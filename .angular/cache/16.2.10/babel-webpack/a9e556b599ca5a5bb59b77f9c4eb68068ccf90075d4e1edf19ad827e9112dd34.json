{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { AddonMessages } from '../messages';\nimport * as i0 from \"@angular/core\";\n/**\n * Content links handler for a discussion.\n * Match message index URL with params id, user1 or user2.\n */\nexport class AddonMessagesDiscussionLinkHandlerService extends CoreContentLinksHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonMessagesDiscussionLinkHandler';\n    this.pattern = /\\/message\\/index\\.php.*([?&](id|user1|user2)=\\d+)/;\n  }\n  /**\n   * Get the list of actions for a link (url).\n   *\n   * @param siteIds List of sites the URL belongs to.\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @returns List of (or promise resolved with list of) actions.\n   */\n  getActions(siteIds, url, params) {\n    return [{\n      action: siteId => {\n        const userId = parseInt(params.id || params.user2, 10);\n        CoreNavigator.navigateToSitePath(`/messages/discussion/user/${userId}`, {\n          siteId\n        });\n      }\n    }];\n  }\n  /**\n   * Check if the handler is enabled for a certain site (site + user) and a URL.\n   * If not defined, defaults to true.\n   *\n   * @param siteId The site ID.\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @returns Whether the handler is enabled for the URL and site.\n   */\n  isEnabled(siteId, url, params) {\n    return _asyncToGenerator(function* () {\n      const enabled = yield AddonMessages.isPluginEnabled(siteId);\n      if (!enabled) {\n        return false;\n      }\n      if (params.id === undefined && params.user2 === undefined) {\n        // Other user not defined, cannot treat the URL.\n        return false;\n      }\n      if (params.user1 !== undefined) {\n        // Check if user1 is the current user, since the app only supports current user.\n        const site = yield CoreSites.getSite(siteId);\n        return parseInt(params.user1, 10) == site.getUserId();\n      }\n      return true;\n    })();\n  }\n}\n_class = AddonMessagesDiscussionLinkHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonMessagesDiscussionLinkHandlerService_BaseFactory;\n  return function AddonMessagesDiscussionLinkHandlerService_Factory(t) {\n    return (ɵAddonMessagesDiscussionLinkHandlerService_BaseFactory || (ɵAddonMessagesDiscussionLinkHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonMessagesDiscussionLinkHandler = makeSingleton(AddonMessagesDiscussionLinkHandlerService);","map":{"version":3,"names":["CoreContentLinksHandlerBase","CoreNavigator","CoreSites","makeSingleton","AddonMessages","AddonMessagesDiscussionLinkHandlerService","constructor","name","pattern","getActions","siteIds","url","params","action","siteId","userId","parseInt","id","user2","navigateToSitePath","isEnabled","_asyncToGenerator","enabled","isPluginEnabled","undefined","user1","site","getSite","getUserId","t","factory","ɵfac","providedIn","AddonMessagesDiscussionLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messages/services/handlers/discussion-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { AddonMessages } from '../messages';\n\n/**\n * Content links handler for a discussion.\n * Match message index URL with params id, user1 or user2.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonMessagesDiscussionLinkHandlerService extends CoreContentLinksHandlerBase {\n\n    name = 'AddonMessagesDiscussionLinkHandler';\n    pattern = /\\/message\\/index\\.php.*([?&](id|user1|user2)=\\d+)/;\n\n    /**\n     * Get the list of actions for a link (url).\n     *\n     * @param siteIds List of sites the URL belongs to.\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @returns List of (or promise resolved with list of) actions.\n     */\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Record<string, string>,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n        return [{\n            action: (siteId): void => {\n                const userId = parseInt(params.id || params.user2, 10);\n                CoreNavigator.navigateToSitePath(`/messages/discussion/user/${userId}`, { siteId });\n            },\n        }];\n    }\n\n    /**\n     * Check if the handler is enabled for a certain site (site + user) and a URL.\n     * If not defined, defaults to true.\n     *\n     * @param siteId The site ID.\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @returns Whether the handler is enabled for the URL and site.\n     */\n    async isEnabled(siteId: string, url: string, params: Record<string, string>): Promise<boolean> {\n        const enabled = await AddonMessages.isPluginEnabled(siteId);\n        if (!enabled) {\n            return false;\n        }\n\n        if (params.id === undefined && params.user2 === undefined) {\n            // Other user not defined, cannot treat the URL.\n            return false;\n        }\n\n        if (params.user1 !== undefined) {\n            // Check if user1 is the current user, since the app only supports current user.\n            const site = await CoreSites.getSite(siteId);\n\n            return parseInt(params.user1, 10) == site.getUserId();\n        }\n\n        return true;\n    }\n\n}\n\nexport const AddonMessagesDiscussionLinkHandler = makeSingleton(AddonMessagesDiscussionLinkHandlerService);\n"],"mappings":";;AAgBA,SAASA,2BAA2B,QAAQ,6CAA6C;AAEzF,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;;AAKA,OAAM,MAAOC,yCAA0C,SAAQL,2BAA2B;EAD1FM,YAAA;;IAGI,KAAAC,IAAI,GAAG,oCAAoC;IAC3C,KAAAC,OAAO,GAAG,mDAAmD;;EAE7D;;;;;;;;EAQAC,UAAUA,CACNC,OAAiB,EACjBC,GAAW,EACXC,MAA8B;IAE9B,OAAO,CAAC;MACJC,MAAM,EAAGC,MAAM,IAAU;QACrB,MAAMC,MAAM,GAAGC,QAAQ,CAACJ,MAAM,CAACK,EAAE,IAAIL,MAAM,CAACM,KAAK,EAAE,EAAE,CAAC;QACtDjB,aAAa,CAACkB,kBAAkB,CAAC,6BAA6BJ,MAAM,EAAE,EAAE;UAAED;QAAM,CAAE,CAAC;MACvF;KACH,CAAC;EACN;EAEA;;;;;;;;;EASMM,SAASA,CAACN,MAAc,EAAEH,GAAW,EAAEC,MAA8B;IAAA,OAAAS,iBAAA;MACvE,MAAMC,OAAO,SAASlB,aAAa,CAACmB,eAAe,CAACT,MAAM,CAAC;MAC3D,IAAI,CAACQ,OAAO,EAAE;QACV,OAAO,KAAK;;MAGhB,IAAIV,MAAM,CAACK,EAAE,KAAKO,SAAS,IAAIZ,MAAM,CAACM,KAAK,KAAKM,SAAS,EAAE;QACvD;QACA,OAAO,KAAK;;MAGhB,IAAIZ,MAAM,CAACa,KAAK,KAAKD,SAAS,EAAE;QAC5B;QACA,MAAME,IAAI,SAASxB,SAAS,CAACyB,OAAO,CAACb,MAAM,CAAC;QAE5C,OAAOE,QAAQ,CAACJ,MAAM,CAACa,KAAK,EAAE,EAAE,CAAC,IAAIC,IAAI,CAACE,SAAS,EAAE;;MAGzD,OAAO,IAAI;IAAC;EAChB;;SAtDSvB,yCAA0C;;;;yJAA1CA,MAAyC,IAAAwB,CAAA,IAAzCxB,MAAyC;EAAA;AAAA;;SAAzCA,MAAyC;EAAAyB,OAAA,EAAzCzB,MAAyC,CAAA0B,IAAA;EAAAC,UAAA,EAD5B;AAAM;AA2DhC,OAAO,MAAMC,kCAAkC,GAAG9B,aAAa,CAACE,yCAAyC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}