{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreRatingOffline } from '@features/rating/services/rating-offline';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils, ToastDuration } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModData, AddonModDataProvider, AddonModDataAction, AddonModDataTemplateType, AddonModDataTemplateMode } from './data';\nimport { AddonModDataFieldsDelegate } from './data-fields-delegate';\nimport { AddonModDataOffline } from './data-offline';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides helper functions for datas.\n */\nexport class AddonModDataHelperProvider {\n  /**\n   * Returns the record with the offline actions applied.\n   *\n   * @param record Entry to modify.\n   * @param offlineActions Offline data with the actions done.\n   * @param fields Entry defined fields indexed by fieldid.\n   * @returns Promise resolved when done.\n   */\n  applyOfflineActions(record, offlineActions, fields) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      offlineActions.forEach(action => {\n        record.timemodified = action.timemodified;\n        record.hasOffline = true;\n        const offlineContents = {};\n        switch (action.action) {\n          case AddonModDataAction.APPROVE:\n            record.approved = true;\n            break;\n          case AddonModDataAction.DISAPPROVE:\n            record.approved = false;\n            break;\n          case AddonModDataAction.DELETE:\n            record.deleted = true;\n            break;\n          case AddonModDataAction.ADD:\n          case AddonModDataAction.EDIT:\n            record.groupid = action.groupid;\n            action.fields.forEach(offlineContent => {\n              if (offlineContents[offlineContent.fieldid] === undefined) {\n                offlineContents[offlineContent.fieldid] = {};\n              }\n              if (offlineContent.subfield) {\n                offlineContents[offlineContent.fieldid][offlineContent.subfield] = CoreTextUtils.parseJSON(offlineContent.value, '');\n              } else {\n                offlineContents[offlineContent.fieldid][''] = CoreTextUtils.parseJSON(offlineContent.value, '');\n              }\n            });\n            // Override field contents.\n            fields.forEach(field => {\n              if (AddonModDataFieldsDelegate.hasFiles(field)) {\n                promises.push(_this.getStoredFiles(record.dataid, record.id, field.id).then(offlineFiles => {\n                  record.contents[field.id] = AddonModDataFieldsDelegate.overrideData(field, record.contents[field.id], offlineContents[field.id], offlineFiles);\n                  record.contents[field.id].fieldid = field.id;\n                  return;\n                }));\n              } else {\n                record.contents[field.id] = AddonModDataFieldsDelegate.overrideData(field, record.contents[field.id], offlineContents[field.id]);\n                record.contents[field.id].fieldid = field.id;\n              }\n            });\n            break;\n          default:\n            break;\n        }\n      });\n      yield Promise.all(promises);\n      return record;\n    })();\n  }\n  /**\n   * Approve or disapprove a database entry.\n   *\n   * @param dataId Database ID.\n   * @param entryId Entry ID.\n   * @param approve True to approve, false to disapprove.\n   * @param courseId Course ID. It not defined, it will be fetched.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  approveOrDisapproveEntry(dataId, entryId, approve, courseId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const modal = yield CoreDomUtils.showModalLoading('core.sending', true);\n      try {\n        courseId = yield _this2.getActivityCourseIdIfNotSet(dataId, courseId, siteId);\n        try {\n          // Approve/disapprove entry.\n          yield AddonModData.approveEntry(dataId, entryId, approve, courseId, siteId);\n        } catch (error) {\n          CoreDomUtils.showErrorModalDefault(error, 'addon.mod_data.errorapproving', true);\n          throw error;\n        }\n        const promises = [];\n        promises.push(AddonModData.invalidateEntryData(dataId, entryId, siteId));\n        promises.push(AddonModData.invalidateEntriesData(dataId, siteId));\n        yield CoreUtils.ignoreErrors(Promise.all(promises));\n        CoreEvents.trigger(AddonModDataProvider.ENTRY_CHANGED, {\n          dataId: dataId,\n          entryId: entryId\n        }, siteId);\n        CoreDomUtils.showToast(approve ? 'addon.mod_data.recordapproved' : 'addon.mod_data.recorddisapproved', true, ToastDuration.LONG);\n      } catch (_unused) {\n        // Ignore error, it was already displayed.\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  /**\n   * Displays fields for being shown.\n   *\n   * @param template Template HMTL.\n   * @param fields Fields that defines every content in the entry.\n   * @param entry Entry.\n   * @param mode Mode list or show.\n   * @param actions Actions that can be performed to the record.\n   * @param options Show fields options (sortBy, offset, etc).\n   *\n   * @returns Generated HTML.\n   */\n  displayShowFields(template, fields, entry, mode, actions, options = {}) {\n    if (!template) {\n      return '';\n    }\n    // Replace the fields found on template.\n    fields.forEach(field => {\n      let replace = '[[' + field.name + ']]';\n      replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n      let replaceRegex = new RegExp(replace, 'gi');\n      // Replace field by a generic directive.\n      const render = '<addon-mod-data-field-plugin [field]=\"fields[' + field.id + ']\" [value]=\"entries[' + entry.id + '].contents[' + field.id + ']\" mode=\"' + mode + '\" [database]=\"database\" (gotoEntry)=\"gotoEntry($event)\">' + '</addon-mod-data-field-plugin>';\n      template = template.replace(replaceRegex, render);\n      // Replace the field name tag.\n      replace = '[[' + field.name + '#name]]';\n      replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n      replaceRegex = new RegExp(replace, 'gi');\n      template = template.replace(replaceRegex, field.name);\n      // Replace the field description tag.\n      replace = '[[' + field.name + '#description]]';\n      replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n      replaceRegex = new RegExp(replace, 'gi');\n      template = template.replace(replaceRegex, field.description);\n    });\n    for (const action in actions) {\n      const replaceRegex = new RegExp('##' + action + '##', 'gi');\n      // Is enabled?\n      if (!actions[action]) {\n        template = template.replace(replaceRegex, '');\n        continue;\n      }\n      if (action == AddonModDataAction.MOREURL) {\n        // Render more url directly because it can be part of an HTML attribute.\n        template = template.replace(replaceRegex, CoreSites.getRequiredCurrentSite().getURL() + '/mod/data/view.php?d={{database.id}}&rid=' + entry.id);\n        continue;\n      } else if (action == 'approvalstatus') {\n        template = template.replace(replaceRegex, Translate.instant('addon.mod_data.' + (entry.approved ? 'approved' : 'notapproved')));\n        continue;\n      }\n      template = template.replace(replaceRegex, `<addon-mod-data-action action=\"${action}\" [entry]=\"entries[${entry.id}]\" mode=\"${mode}\" ` + '[database]=\"database\" [access]=\"access\" [title]=\"title\" ' + (options.offset !== undefined ? `[offset]=\"${options.offset}\" ` : '') + (options.sortBy !== undefined ? `[sortBy]=\"${options.sortBy}\" ` : '') + (options.sortDirection !== undefined ? `sortDirection=\"${options.sortDirection}\" ` : '') + '[group]=\"group\"></addon-mod-data-action>');\n    }\n    // Replace otherfields found on template.\n    const regex = new RegExp('##otherfields##', 'gi');\n    if (!template.match(regex)) {\n      return template;\n    }\n    const unusedFields = fields.filter(field => !template.includes(`[field]=\"fields[${field.id}]`)).map(field => `<p><strong>${field.name}</strong></p>` + '<p><addon-mod-data-field-plugin [field]=\"fields[' + field.id + ']\" [value]=\"entries[' + entry.id + '].contents[' + field.id + ']\" mode=\"' + mode + '\" [database]=\"database\" (gotoEntry)=\"gotoEntry($event)\">' + '</addon-mod-data-field-plugin></p>');\n    return template.replace(regex, unusedFields.join(''));\n  }\n  /**\n   * Get online and offline entries, or search entries.\n   *\n   * @param database Database object.\n   * @param fields The fields that define the contents.\n   * @param options Other options.\n   * @returns Promise resolved when the database is retrieved.\n   */\n  fetchEntries(database, fields, options = {}) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      options.groupId = options.groupId || 0;\n      options.page = options.page || 0;\n      const offlineActions = {};\n      const result = {\n        entries: [],\n        totalcount: 0,\n        offlineEntries: []\n      };\n      options.siteId = site.id;\n      const offlinePromise = AddonModDataOffline.getDatabaseEntries(database.id, site.id).then(actions => {\n        result.hasOfflineActions = !!actions.length;\n        actions.forEach(action => {\n          if (offlineActions[action.entryid] === undefined) {\n            offlineActions[action.entryid] = [];\n          }\n          offlineActions[action.entryid].push(action);\n          // We only display new entries in the first page when not searching.\n          if (action.action == AddonModDataAction.ADD && options.page == 0 && !options.search && !options.advSearch && (!action.groupid || !options.groupId || action.groupid == options.groupId)) {\n            var _site$getInfo;\n            result.offlineEntries.push({\n              id: action.entryid,\n              canmanageentry: true,\n              approved: !database.approval || database.manageapproved,\n              dataid: database.id,\n              groupid: action.groupid,\n              timecreated: -action.entryid,\n              timemodified: -action.entryid,\n              userid: site.getUserId(),\n              fullname: (_site$getInfo = site.getInfo()) === null || _site$getInfo === void 0 ? void 0 : _site$getInfo.fullname,\n              contents: {}\n            });\n          }\n        });\n        // Sort offline entries by creation time.\n        result.offlineEntries.sort((a, b) => b.timecreated - a.timecreated);\n        return;\n      });\n      const ratingsPromise = CoreRatingOffline.hasRatings('mod_data', 'entry', \"module\" /* ContextLevel.MODULE */, database.coursemodule).then(hasRatings => {\n        result.hasOfflineRatings = hasRatings;\n        return;\n      });\n      let fetchPromise;\n      if (options.search || options.advSearch) {\n        fetchPromise = AddonModData.searchEntries(database.id, options).then(searchResult => {\n          result.entries = searchResult.entries;\n          result.totalcount = searchResult.totalcount;\n          result.maxcount = searchResult.maxcount;\n          return;\n        });\n      } else {\n        fetchPromise = AddonModData.getEntries(database.id, options).then(entriesResult => {\n          result.entries = entriesResult.entries;\n          result.totalcount = entriesResult.totalcount;\n          return;\n        });\n      }\n      yield Promise.all([offlinePromise, ratingsPromise, fetchPromise]);\n      // Apply offline actions to online and offline entries.\n      const promises = [];\n      result.entries.forEach(entry => {\n        promises.push(_this3.applyOfflineActions(entry, offlineActions[entry.id] || [], fields));\n      });\n      result.offlineEntries.forEach(entry => {\n        promises.push(_this3.applyOfflineActions(entry, offlineActions[entry.id] || [], fields));\n      });\n      yield Promise.all(promises);\n      return result;\n    })();\n  }\n  /**\n   * Fetch an online or offline entry.\n   *\n   * @param database Database.\n   * @param fields List of database fields.\n   * @param entryId Entry ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the entry.\n   */\n  fetchEntry(database, fields, entryId, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const offlineActions = yield AddonModDataOffline.getEntryActions(database.id, entryId, site.id);\n      let response;\n      if (entryId > 0) {\n        // Online entry.\n        response = yield AddonModData.getEntry(database.id, entryId, {\n          cmId: database.coursemodule,\n          siteId: site.id\n        });\n      } else {\n        var _site$getInfo2;\n        // Offline entry or new entry.\n        response = {\n          entry: {\n            id: entryId,\n            userid: site.getUserId(),\n            groupid: 0,\n            dataid: database.id,\n            timecreated: -entryId,\n            timemodified: -entryId,\n            approved: !database.approval || database.manageapproved,\n            canmanageentry: true,\n            fullname: (_site$getInfo2 = site.getInfo()) === null || _site$getInfo2 === void 0 ? void 0 : _site$getInfo2.fullname,\n            contents: {}\n          }\n        };\n      }\n      yield _this4.applyOfflineActions(response.entry, offlineActions, fields);\n      return response;\n    })();\n  }\n  /**\n   * Returns an object with all the actions that the user can do over the record.\n   *\n   * @param database Database activity.\n   * @param accessInfo Access info to the activity.\n   * @param entry Entry or record where the actions will be performed.\n   * @returns Keyed with the action names and boolean to evalute if it can or cannot be done.\n   */\n  getActions(database, accessInfo, entry, mode) {\n    return {\n      add: false,\n      more: true,\n      moreurl: true,\n      user: true,\n      userpicture: true,\n      timeadded: true,\n      timemodified: true,\n      tags: true,\n      edit: entry.canmanageentry && !entry.deleted,\n      delete: entry.canmanageentry,\n      approve: database.approval && accessInfo.canapprove && !entry.approved && !entry.deleted,\n      disapprove: database.approval && accessInfo.canapprove && entry.approved && !entry.deleted,\n      approvalstatus: database.approval,\n      comments: database.comments,\n      actionsmenu: entry.canmanageentry || database.approval && accessInfo.canapprove && !entry.deleted || mode === AddonModDataTemplateMode.LIST,\n      // Unsupported actions.\n      delcheck: false,\n      export: false\n    };\n  }\n  /**\n   * Convenience function to get the course id of the database.\n   *\n   * @param dataId Database id.\n   * @param courseId Course id, if known.\n   * @param siteId Site id, if not set, current site will be used.\n   * @returns Resolved with course Id when done.\n   */\n  getActivityCourseIdIfNotSet(dataId, courseId, siteId) {\n    return _asyncToGenerator(function* () {\n      if (courseId) {\n        return courseId;\n      }\n      const module = yield CoreCourse.getModuleBasicInfoByInstance(dataId, 'data', {\n        siteId,\n        readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n      });\n      return module.course;\n    })();\n  }\n  /**\n   * Returns the default template of a certain type.\n   *\n   * Based on Moodle function data_generate_default_template.\n   *\n   * @param type Type of template.\n   * @param fields List of database fields.\n   * @returns Template HTML.\n   */\n  getDefaultTemplate(type, fields) {\n    if (type == AddonModDataTemplateType.LIST_HEADER || type == AddonModDataTemplateType.LIST_FOOTER) {\n      return '';\n    }\n    const html = [];\n    if (type == AddonModDataTemplateType.LIST) {\n      html.push('##delcheck##<br />');\n    }\n    html.push('<div class=\"defaulttemplate\">', '<table class=\"mod-data-default-template ##approvalstatus##\">', '<tbody>');\n    fields.forEach(field => {\n      html.push('<tr class=\"\">', '<td class=\"template-field cell c0\" style=\"\">', field.name, ': </td>', '<td class=\"template-token cell c1 lastcol\" style=\"\">[[', field.name, ']]</td>', '</tr>');\n    });\n    if (type == AddonModDataTemplateType.LIST) {\n      html.push('<tr class=\"lastrow\">', '<td class=\"controls template-field cell c0 lastcol\" style=\"\" colspan=\"2\">', '##actionsmenu##  ##edit##  ##more##  ##delete##  ##approve##  ##disapprove##  ##export##', '</td>', '</tr>');\n    } else if (type == AddonModDataTemplateType.SINGLE) {\n      html.push('<tr class=\"lastrow\">', '<td class=\"controls template-field cell c0 lastcol\" style=\"\" colspan=\"2\">', '##actionsmenu##  ##edit##  ##delete##  ##approve##  ##disapprove##  ##export##', '</td>', '</tr>');\n    } else if (type == AddonModDataTemplateType.SEARCH) {\n      html.push('<tr class=\"searchcontrols\">', '<td class=\"template-field cell c0\" style=\"\">Author first name: </td>', '<td class=\"template-token cell c1 lastcol\" style=\"\">##firstname##</td>', '</tr>', '<tr class=\"searchcontrols lastrow\">', '<td class=\"template-field cell c0\" style=\"\">Author surname: </td>', '<td class=\"template-token cell c1 lastcol\" style=\"\">##lastname##</td>', '</tr>');\n    }\n    html.push('</tbody>', '</table>', '</div>');\n    if (type == AddonModDataTemplateType.LIST) {\n      html.push('<hr />');\n    }\n    return html.join('');\n  }\n  /**\n   * Retrieve the entered data in the edit form.\n   * We don't use ng-model because it doesn't detect changes done by JavaScript.\n   *\n   * @param inputData Array with the entered form values.\n   * @param fields Fields that defines every content in the entry.\n   * @param dataId Database Id. If set, files will be uploaded and itemId set.\n   * @param entryId Entry Id.\n   * @param entryContents Original entry contents.\n   * @param offline True to prepare the data for an offline uploading, false otherwise.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns That contains object with the answers.\n   */\n  getEditDataFromForm(inputData, fields, dataId, entryId, entryContents, offline = false, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (!inputData) {\n        return [];\n      }\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Filter and translate fields to each field plugin.\n      const entryFieldDataToSend = [];\n      const promises = fields.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (field) {\n          const fieldData = AddonModDataFieldsDelegate.getFieldEditData(field, inputData, entryContents[field.id]);\n          if (!fieldData) {\n            return;\n          }\n          const proms = fieldData.map( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (fieldSubdata) {\n              var _fieldSubdata$subfiel;\n              let value = fieldSubdata.value;\n              // Upload Files if asked.\n              if (dataId && fieldSubdata.files) {\n                value = yield _this5.uploadOrStoreFiles(dataId, 0, entryId, fieldSubdata.fieldid, fieldSubdata.files, offline, siteId);\n              }\n              // WS wants values in JSON format.\n              entryFieldDataToSend.push({\n                fieldid: fieldSubdata.fieldid,\n                subfield: (_fieldSubdata$subfiel = fieldSubdata.subfield) !== null && _fieldSubdata$subfiel !== void 0 ? _fieldSubdata$subfiel : '',\n                value: value || value === 0 ? JSON.stringify(value) : ''\n              });\n              return;\n            });\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n          yield Promise.all(proms);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      yield Promise.all(promises);\n      return entryFieldDataToSend;\n    })();\n  }\n  /**\n   * Retrieve the temp files to be updated.\n   *\n   * @param inputData Array with the entered form values.\n   * @param fields Fields that defines every content in the entry.\n   * @param entryContents Original entry contents indexed by field id.\n   * @returns That contains object with the files.\n   */\n  getEditTmpFiles(inputData, fields, entryContents) {\n    return _asyncToGenerator(function* () {\n      if (!inputData) {\n        return [];\n      }\n      // Filter and translate fields to each field plugin.\n      const promises = fields.map(field => AddonModDataFieldsDelegate.getFieldEditFiles(field, inputData, entryContents[field.id]));\n      const fieldsFiles = yield Promise.all(promises);\n      return fieldsFiles.reduce((files, fieldFiles) => files.concat(fieldFiles), []);\n    })();\n  }\n  /**\n   * Get a list of stored attachment files for a new entry. See $mmaModDataHelper#storeFiles.\n   *\n   * @param dataId Database ID.\n   * @param entryId Entry ID or, if creating, timemodified.\n   * @param fieldId Field ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getStoredFiles(dataId, entryId, fieldId, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModDataOffline.getEntryFieldFolder(dataId, entryId, fieldId, siteId);\n      try {\n        return yield CoreFileUploader.getStoredFiles(folderPath);\n      } catch (_unused2) {\n        // Ignore not found files.\n        return [];\n      }\n    })();\n  }\n  /**\n   * Returns the template of a certain type.\n   *\n   * @param data Database object.\n   * @param type Type of template.\n   * @param fields List of database fields.\n   * @returns Template HTML.\n   */\n  getTemplate(data, type, fields) {\n    let template = data[type] || this.getDefaultTemplate(type, fields);\n    if (type != AddonModDataTemplateType.LIST_HEADER && type != AddonModDataTemplateType.LIST_FOOTER) {\n      // Try to fix syntax errors so the template can be parsed by Angular.\n      template = CoreDomUtils.fixHtml(template);\n    }\n    // Add core-link directive to links.\n    template = template.replace(/<a ([^>]*href=\"[^>]*)>/ig, (match, attributes) => '<a core-link capture=\"true\" ' + attributes + '>');\n    return template;\n  }\n  /**\n   * Check if data has been changed by the user.\n   *\n   * @param inputData Object with the entered form values.\n   * @param fields Fields that defines every content in the entry.\n   * @param entryContents Original entry contents indexed by field id.\n   * @returns True if changed, false if not.\n   */\n  hasEditDataChanged(inputData, fields, entryContents) {\n    return fields.some(field => AddonModDataFieldsDelegate.hasFieldDataChanged(field, inputData, entryContents[field.id]));\n  }\n  /**\n   * Displays a confirmation modal for deleting an entry.\n   *\n   * @param dataId Database ID.\n   * @param entryId Entry ID.\n   * @param courseId Course ID. It not defined, it will be fetched.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  showDeleteEntryModal(dataId, entryId, courseId, siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      try {\n        yield CoreDomUtils.showDeleteConfirm('addon.mod_data.confirmdeleterecord');\n        const modal = yield CoreDomUtils.showModalLoading();\n        try {\n          if (entryId > 0) {\n            courseId = yield _this6.getActivityCourseIdIfNotSet(dataId, courseId, siteId);\n          }\n          if (courseId) {\n            yield AddonModData.deleteEntry(dataId, entryId, courseId, siteId);\n          }\n        } catch (message) {\n          CoreDomUtils.showErrorModalDefault(message, 'addon.mod_data.errordeleting', true);\n          modal.dismiss();\n          return;\n        }\n        try {\n          yield AddonModData.invalidateEntryData(dataId, entryId, siteId);\n          yield AddonModData.invalidateEntriesData(dataId, siteId);\n        } catch (_unused3) {\n          // Ignore errors.\n        }\n        CoreEvents.trigger(AddonModDataProvider.ENTRY_CHANGED, {\n          dataId,\n          entryId,\n          deleted: true\n        }, siteId);\n        CoreDomUtils.showToast('addon.mod_data.recorddeleted', true, ToastDuration.LONG);\n        modal.dismiss();\n      } catch (_unused4) {\n        // Ignore error, it was already displayed.\n      }\n    })();\n  }\n  /**\n   * Given a list of files (either online files or local files), store the local files in a local folder\n   * to be submitted later.\n   *\n   * @param dataId Database ID.\n   * @param entryId Entry ID or, if creating, timemodified.\n   * @param fieldId Field ID.\n   * @param files List of files.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if success, rejected otherwise.\n   */\n  storeFiles(dataId, entryId, fieldId, files, siteId) {\n    return _asyncToGenerator(function* () {\n      // Get the folder where to store the files.\n      const folderPath = yield AddonModDataOffline.getEntryFieldFolder(dataId, entryId, fieldId, siteId);\n      return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    })();\n  }\n  uploadOrStoreFiles(dataId, itemId = 0, entryId, fieldId, files, offline, siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (offline) {\n        return _this7.storeFiles(dataId, entryId, fieldId, files, siteId);\n      }\n      if (!files.length) {\n        return 0;\n      }\n      return CoreFileUploader.uploadOrReuploadFiles(files, AddonModDataProvider.COMPONENT, itemId, siteId);\n    })();\n  }\n}\n_class = AddonModDataHelperProvider;\n_class.ɵfac = function AddonModDataHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModDataHelper = makeSingleton(AddonModDataHelperProvider);","map":{"version":3,"names":["CoreCourse","CoreFileUploader","CoreRatingOffline","CoreSites","CoreDomUtils","ToastDuration","CoreTextUtils","CoreUtils","makeSingleton","Translate","CoreEvents","AddonModData","AddonModDataProvider","AddonModDataAction","AddonModDataTemplateType","AddonModDataTemplateMode","AddonModDataFieldsDelegate","AddonModDataOffline","AddonModDataHelperProvider","applyOfflineActions","record","offlineActions","fields","_this","_asyncToGenerator","promises","forEach","action","timemodified","hasOffline","offlineContents","APPROVE","approved","DISAPPROVE","DELETE","deleted","ADD","EDIT","groupid","offlineContent","fieldid","undefined","subfield","parseJSON","value","field","hasFiles","push","getStoredFiles","dataid","id","then","offlineFiles","contents","overrideData","Promise","all","approveOrDisapproveEntry","dataId","entryId","approve","courseId","siteId","_this2","getCurrentSiteId","modal","showModalLoading","getActivityCourseIdIfNotSet","approveEntry","error","showErrorModalDefault","invalidateEntryData","invalidateEntriesData","ignoreErrors","trigger","ENTRY_CHANGED","showToast","LONG","_unused","dismiss","displayShowFields","template","entry","mode","actions","options","replace","name","replaceRegex","RegExp","render","description","MOREURL","getRequiredCurrentSite","getURL","instant","offset","sortBy","sortDirection","regex","match","unusedFields","filter","includes","map","join","fetchEntries","database","_this3","site","getSite","groupId","page","result","entries","totalcount","offlineEntries","offlinePromise","getDatabaseEntries","hasOfflineActions","length","entryid","search","advSearch","_site$getInfo","canmanageentry","approval","manageapproved","timecreated","userid","getUserId","fullname","getInfo","sort","a","b","ratingsPromise","hasRatings","coursemodule","hasOfflineRatings","fetchPromise","searchEntries","searchResult","maxcount","getEntries","entriesResult","fetchEntry","_this4","getEntryActions","response","getEntry","cmId","_site$getInfo2","getActions","accessInfo","add","more","moreurl","user","userpicture","timeadded","tags","edit","delete","canapprove","disapprove","approvalstatus","comments","actionsmenu","LIST","delcheck","export","module","getModuleBasicInfoByInstance","readingStrategy","course","getDefaultTemplate","type","LIST_HEADER","LIST_FOOTER","html","SINGLE","SEARCH","getEditDataFromForm","inputData","entryContents","offline","_this5","entryFieldDataToSend","_ref","fieldData","getFieldEditData","proms","_ref2","fieldSubdata","_fieldSubdata$subfiel","files","uploadOrStoreFiles","JSON","stringify","_x2","apply","arguments","_x","getEditTmpFiles","getFieldEditFiles","fieldsFiles","reduce","fieldFiles","concat","fieldId","folderPath","getEntryFieldFolder","_unused2","getTemplate","data","fixHtml","attributes","hasEditDataChanged","some","hasFieldDataChanged","showDeleteEntryModal","_this6","showDeleteConfirm","deleteEntry","message","_unused3","_unused4","storeFiles","storeFilesToUpload","itemId","_this7","uploadOrReuploadFiles","COMPONENT","factory","ɵfac","providedIn","AddonModDataHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/services/data-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ContextLevel } from '@/core/constants';\nimport { Injectable } from '@angular/core';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { CoreRatingOffline } from '@features/rating/services/rating-offline';\nimport { FileEntry } from '@awesome-cordova-plugins/file/ngx';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreDomUtils, ToastDuration } from '@services/utils/dom';\nimport { CoreFormFields } from '@singletons/form';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport {\n    AddonModDataEntry,\n    AddonModData,\n    AddonModDataProvider,\n    AddonModDataSearchEntriesOptions,\n    AddonModDataEntries,\n    AddonModDataEntryFields,\n    AddonModDataAction,\n    AddonModDataGetEntryFormatted,\n    AddonModDataData,\n    AddonModDataTemplateType,\n    AddonModDataGetDataAccessInformationWSResponse,\n    AddonModDataTemplateMode,\n    AddonModDataField,\n    AddonModDataEntryWSField,\n} from './data';\nimport { AddonModDataFieldsDelegate } from './data-fields-delegate';\nimport { AddonModDataOffline, AddonModDataOfflineAction } from './data-offline';\nimport { CoreFileEntry } from '@services/file-helper';\n\n/**\n * Service that provides helper functions for datas.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModDataHelperProvider {\n\n    /**\n     * Returns the record with the offline actions applied.\n     *\n     * @param record Entry to modify.\n     * @param offlineActions Offline data with the actions done.\n     * @param fields Entry defined fields indexed by fieldid.\n     * @returns Promise resolved when done.\n     */\n    protected async applyOfflineActions(\n        record: AddonModDataEntry,\n        offlineActions: AddonModDataOfflineAction[],\n        fields: AddonModDataField[],\n    ): Promise<AddonModDataEntry> {\n        const promises: Promise<void>[] = [];\n\n        offlineActions.forEach((action) => {\n            record.timemodified = action.timemodified;\n            record.hasOffline = true;\n            const offlineContents: Record<number, CoreFormFields> = {};\n\n            switch (action.action) {\n                case AddonModDataAction.APPROVE:\n                    record.approved = true;\n                    break;\n                case AddonModDataAction.DISAPPROVE:\n                    record.approved = false;\n                    break;\n                case AddonModDataAction.DELETE:\n                    record.deleted = true;\n                    break;\n                case AddonModDataAction.ADD:\n                case AddonModDataAction.EDIT:\n                    record.groupid = action.groupid;\n\n                    action.fields.forEach((offlineContent) => {\n                        if (offlineContents[offlineContent.fieldid] === undefined) {\n                            offlineContents[offlineContent.fieldid] = {};\n                        }\n\n                        if (offlineContent.subfield) {\n                            offlineContents[offlineContent.fieldid][offlineContent.subfield] =\n                                CoreTextUtils.parseJSON(offlineContent.value, '');\n                        } else {\n                            offlineContents[offlineContent.fieldid][''] = CoreTextUtils.parseJSON(offlineContent.value, '');\n                        }\n                    });\n\n                    // Override field contents.\n                    fields.forEach((field) => {\n                        if (AddonModDataFieldsDelegate.hasFiles(field)) {\n                            promises.push(this.getStoredFiles(record.dataid, record.id, field.id).then((offlineFiles) => {\n                                record.contents[field.id] = AddonModDataFieldsDelegate.overrideData(\n                                    field,\n                                    record.contents[field.id],\n                                    offlineContents[field.id],\n                                    offlineFiles,\n                                );\n                                record.contents[field.id].fieldid = field.id;\n\n                                return;\n                            }));\n                        } else {\n                            record.contents[field.id] = AddonModDataFieldsDelegate.overrideData(\n                                field,\n                                record.contents[field.id],\n                                offlineContents[field.id],\n                            );\n                            record.contents[field.id].fieldid = field.id;\n                        }\n                    });\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        await Promise.all(promises);\n\n        return record;\n    }\n\n    /**\n     * Approve or disapprove a database entry.\n     *\n     * @param dataId Database ID.\n     * @param entryId Entry ID.\n     * @param approve True to approve, false to disapprove.\n     * @param courseId Course ID. It not defined, it will be fetched.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    async approveOrDisapproveEntry(\n        dataId: number,\n        entryId: number,\n        approve: boolean,\n        courseId?: number,\n        siteId?: string,\n    ): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n        try {\n            courseId = await this.getActivityCourseIdIfNotSet(dataId, courseId, siteId);\n\n            try {\n                // Approve/disapprove entry.\n                await AddonModData.approveEntry(dataId, entryId, approve, courseId, siteId);\n            } catch (error) {\n                CoreDomUtils.showErrorModalDefault(error, 'addon.mod_data.errorapproving', true);\n\n                throw error;\n            }\n\n            const promises: Promise<void>[] = [];\n\n            promises.push(AddonModData.invalidateEntryData(dataId, entryId, siteId));\n            promises.push(AddonModData.invalidateEntriesData(dataId, siteId));\n\n            await CoreUtils.ignoreErrors(Promise.all(promises));\n\n            CoreEvents.trigger(AddonModDataProvider.ENTRY_CHANGED, { dataId: dataId, entryId: entryId }, siteId);\n\n            CoreDomUtils.showToast(\n                approve ? 'addon.mod_data.recordapproved' : 'addon.mod_data.recorddisapproved',\n                true,\n                ToastDuration.LONG,\n            );\n        } catch {\n            // Ignore error, it was already displayed.\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Displays fields for being shown.\n     *\n     * @param template Template HMTL.\n     * @param fields Fields that defines every content in the entry.\n     * @param entry Entry.\n     * @param mode Mode list or show.\n     * @param actions Actions that can be performed to the record.\n     * @param options Show fields options (sortBy, offset, etc).\n     *\n     * @returns Generated HTML.\n     */\n    displayShowFields(\n        template: string,\n        fields: AddonModDataField[],\n        entry: AddonModDataEntry,\n        mode: AddonModDataTemplateMode,\n        actions: Record<AddonModDataAction, boolean>,\n        options: AddonModDatDisplayFieldsOptions = {},\n    ): string {\n\n        if (!template) {\n            return '';\n        }\n\n        // Replace the fields found on template.\n        fields.forEach((field) => {\n            let replace = '[[' + field.name + ']]';\n            replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n            let replaceRegex = new RegExp(replace, 'gi');\n\n            // Replace field by a generic directive.\n            const render = '<addon-mod-data-field-plugin [field]=\"fields[' + field.id + ']\" [value]=\"entries[' + entry.id +\n                    '].contents[' + field.id + ']\" mode=\"' + mode + '\" [database]=\"database\" (gotoEntry)=\"gotoEntry($event)\">' +\n                    '</addon-mod-data-field-plugin>';\n\n            template = template.replace(replaceRegex, render);\n\n            // Replace the field name tag.\n            replace = '[[' + field.name + '#name]]';\n            replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n            replaceRegex = new RegExp(replace, 'gi');\n\n            template = template.replace(replaceRegex, field.name);\n\n            // Replace the field description tag.\n            replace = '[[' + field.name + '#description]]';\n            replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n            replaceRegex = new RegExp(replace, 'gi');\n\n            template = template.replace(replaceRegex, field.description);\n        });\n\n        for (const action in actions) {\n            const replaceRegex = new RegExp('##' + action + '##', 'gi');\n            // Is enabled?\n            if (!actions[action]) {\n                template = template.replace(replaceRegex, '');\n\n                continue;\n            }\n\n            if (action == AddonModDataAction.MOREURL) {\n                // Render more url directly because it can be part of an HTML attribute.\n                template = template.replace(\n                    replaceRegex,\n                    CoreSites.getRequiredCurrentSite().getURL() + '/mod/data/view.php?d={{database.id}}&rid=' + entry.id,\n                );\n\n                continue;\n            } else if (action == 'approvalstatus') {\n                template = template.replace(\n                    replaceRegex,\n                    Translate.instant('addon.mod_data.' + (entry.approved ? 'approved' : 'notapproved')),\n                );\n\n                continue;\n            }\n\n            template = template.replace(\n                replaceRegex,\n                `<addon-mod-data-action action=\"${action}\" [entry]=\"entries[${entry.id}]\" mode=\"${mode}\" ` +\n                '[database]=\"database\" [access]=\"access\" [title]=\"title\" ' +\n                (options.offset !== undefined ? `[offset]=\"${options.offset}\" ` : '') +\n                (options.sortBy !== undefined ? `[sortBy]=\"${options.sortBy}\" ` : '') +\n                (options.sortDirection !== undefined ? `sortDirection=\"${options.sortDirection}\" ` : '') +\n                '[group]=\"group\"></addon-mod-data-action>',\n            );\n        }\n\n        // Replace otherfields found on template.\n        const regex = new RegExp('##otherfields##', 'gi');\n\n        if (!template.match(regex)) {\n            return template;\n        }\n\n        const unusedFields = fields.filter(field => !template.includes(`[field]=\"fields[${field.id}]`)).map((field) =>\n            `<p><strong>${field.name}</strong></p>` +\n                '<p><addon-mod-data-field-plugin [field]=\"fields[' + field.id + ']\" [value]=\"entries[' + entry.id +\n                '].contents[' + field.id + ']\" mode=\"' + mode + '\" [database]=\"database\" (gotoEntry)=\"gotoEntry($event)\">' +\n                '</addon-mod-data-field-plugin></p>');\n\n        return template.replace(regex, unusedFields.join(''));\n    }\n\n    /**\n     * Get online and offline entries, or search entries.\n     *\n     * @param database Database object.\n     * @param fields The fields that define the contents.\n     * @param options Other options.\n     * @returns Promise resolved when the database is retrieved.\n     */\n    async fetchEntries(\n        database: AddonModDataData,\n        fields: AddonModDataField[],\n        options: AddonModDataSearchEntriesOptions = {},\n    ): Promise<AddonModDataEntries> {\n        const site = await CoreSites.getSite(options.siteId);\n        options.groupId = options.groupId || 0;\n        options.page = options.page || 0;\n\n        const offlineActions: Record<number, AddonModDataOfflineAction[]> = {};\n        const result: AddonModDataEntries = {\n            entries: [],\n            totalcount: 0,\n            offlineEntries: [],\n        };\n        options.siteId = site.id;\n\n        const offlinePromise = AddonModDataOffline.getDatabaseEntries(database.id, site.id).then((actions) => {\n            result.hasOfflineActions = !!actions.length;\n\n            actions.forEach((action) => {\n                if (offlineActions[action.entryid] === undefined) {\n                    offlineActions[action.entryid] = [];\n                }\n                offlineActions[action.entryid].push(action);\n\n                // We only display new entries in the first page when not searching.\n                if (action.action == AddonModDataAction.ADD && options.page == 0 && !options.search && !options.advSearch &&\n                    (!action.groupid || !options.groupId || action.groupid == options.groupId)) {\n                    result.offlineEntries!.push({\n                        id: action.entryid,\n                        canmanageentry: true,\n                        approved: !database.approval || database.manageapproved,\n                        dataid: database.id,\n                        groupid: action.groupid,\n                        timecreated: -action.entryid,\n                        timemodified: -action.entryid,\n                        userid: site.getUserId(),\n                        fullname: site.getInfo()?.fullname,\n                        contents: {},\n                    });\n                }\n\n            });\n\n            // Sort offline entries by creation time.\n            result.offlineEntries!.sort((a, b) => b.timecreated - a.timecreated);\n\n            return;\n        });\n\n        const ratingsPromise = CoreRatingOffline.hasRatings('mod_data', 'entry', ContextLevel.MODULE, database.coursemodule)\n            .then((hasRatings) => {\n                result.hasOfflineRatings = hasRatings;\n\n                return;\n            });\n\n        let fetchPromise: Promise<void>;\n        if (options.search || options.advSearch) {\n            fetchPromise = AddonModData.searchEntries(database.id, options).then((searchResult) => {\n                result.entries = searchResult.entries;\n                result.totalcount = searchResult.totalcount;\n                result.maxcount = searchResult.maxcount;\n\n                return;\n            });\n        } else {\n            fetchPromise = AddonModData.getEntries(database.id, options).then((entriesResult) => {\n                result.entries = entriesResult.entries;\n                result.totalcount = entriesResult.totalcount;\n\n                return;\n            });\n        }\n        await Promise.all([offlinePromise, ratingsPromise, fetchPromise]);\n\n        // Apply offline actions to online and offline entries.\n        const promises: Promise<AddonModDataEntry>[] = [];\n        result.entries.forEach((entry) => {\n            promises.push(this.applyOfflineActions(entry, offlineActions[entry.id] || [], fields));\n        });\n\n        result.offlineEntries!.forEach((entry) => {\n            promises.push(this.applyOfflineActions(entry, offlineActions[entry.id] || [], fields));\n        });\n\n        await Promise.all(promises);\n\n        return result;\n    }\n\n    /**\n     * Fetch an online or offline entry.\n     *\n     * @param database Database.\n     * @param fields List of database fields.\n     * @param entryId Entry ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the entry.\n     */\n    async fetchEntry(\n        database: AddonModDataData,\n        fields: AddonModDataField[],\n        entryId: number,\n        siteId?: string,\n    ): Promise<AddonModDataGetEntryFormatted> {\n        const site = await CoreSites.getSite(siteId);\n\n        const offlineActions = await AddonModDataOffline.getEntryActions(database.id, entryId, site.id);\n\n        let response: AddonModDataGetEntryFormatted;\n        if (entryId > 0) {\n            // Online entry.\n            response = await AddonModData.getEntry(database.id, entryId, { cmId: database.coursemodule, siteId: site.id });\n        } else {\n            // Offline entry or new entry.\n            response = {\n                entry: {\n                    id: entryId,\n                    userid: site.getUserId(),\n                    groupid: 0,\n                    dataid: database.id,\n                    timecreated: -entryId,\n                    timemodified: -entryId,\n                    approved: !database.approval || database.manageapproved,\n                    canmanageentry: true,\n                    fullname: site.getInfo()?.fullname,\n                    contents: {},\n                },\n            };\n        }\n\n        await this.applyOfflineActions(response.entry, offlineActions, fields);\n\n        return response;\n    }\n\n    /**\n     * Returns an object with all the actions that the user can do over the record.\n     *\n     * @param database Database activity.\n     * @param accessInfo Access info to the activity.\n     * @param entry Entry or record where the actions will be performed.\n     * @returns Keyed with the action names and boolean to evalute if it can or cannot be done.\n     */\n    getActions(\n        database: AddonModDataData,\n        accessInfo: AddonModDataGetDataAccessInformationWSResponse,\n        entry: AddonModDataEntry,\n        mode: AddonModDataTemplateMode,\n    ): Record<AddonModDataAction, boolean> {\n        return {\n            add: false, // Not directly used on entries.\n            more: true,\n            moreurl: true,\n            user: true,\n            userpicture: true,\n            timeadded: true,\n            timemodified: true,\n            tags: true,\n\n            edit: entry.canmanageentry && !entry.deleted, // This already checks capabilities and readonly period.\n            delete: entry.canmanageentry,\n            approve: database.approval && accessInfo.canapprove && !entry.approved && !entry.deleted,\n            disapprove: database.approval && accessInfo.canapprove && entry.approved && !entry.deleted,\n\n            approvalstatus: database.approval,\n            comments: database.comments,\n\n            actionsmenu: entry.canmanageentry\n                || (database.approval && accessInfo.canapprove && !entry.deleted)\n                || mode === AddonModDataTemplateMode.LIST,\n\n            // Unsupported actions.\n            delcheck: false,\n            export: false,\n        };\n    }\n\n    /**\n     * Convenience function to get the course id of the database.\n     *\n     * @param dataId Database id.\n     * @param courseId Course id, if known.\n     * @param siteId Site id, if not set, current site will be used.\n     * @returns Resolved with course Id when done.\n     */\n    protected async getActivityCourseIdIfNotSet(dataId: number, courseId?: number, siteId?: string): Promise<number> {\n        if (courseId) {\n            return courseId;\n        }\n\n        const module = await CoreCourse.getModuleBasicInfoByInstance(\n            dataId,\n            'data',\n            { siteId, readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE },\n        );\n\n        return module.course;\n    }\n\n    /**\n     * Returns the default template of a certain type.\n     *\n     * Based on Moodle function data_generate_default_template.\n     *\n     * @param type Type of template.\n     * @param fields List of database fields.\n     * @returns Template HTML.\n     */\n    getDefaultTemplate(type: AddonModDataTemplateType, fields: AddonModDataField[]): string {\n        if (type == AddonModDataTemplateType.LIST_HEADER || type == AddonModDataTemplateType.LIST_FOOTER) {\n            return '';\n        }\n\n        const html: string[] = [];\n\n        if (type == AddonModDataTemplateType.LIST) {\n            html.push('##delcheck##<br />');\n        }\n\n        html.push(\n            '<div class=\"defaulttemplate\">',\n            '<table class=\"mod-data-default-template ##approvalstatus##\">',\n            '<tbody>',\n        );\n\n        fields.forEach((field) => {\n            html.push(\n                '<tr class=\"\">',\n                '<td class=\"template-field cell c0\" style=\"\">',\n                field.name,\n                ': </td>',\n                '<td class=\"template-token cell c1 lastcol\" style=\"\">[[',\n                field.name,\n                ']]</td>',\n                '</tr>',\n            );\n        });\n\n        if (type == AddonModDataTemplateType.LIST) {\n            html.push(\n                '<tr class=\"lastrow\">',\n                '<td class=\"controls template-field cell c0 lastcol\" style=\"\" colspan=\"2\">',\n                '##actionsmenu##  ##edit##  ##more##  ##delete##  ##approve##  ##disapprove##  ##export##',\n                '</td>',\n                '</tr>',\n            );\n        } else if (type == AddonModDataTemplateType.SINGLE) {\n            html.push(\n                '<tr class=\"lastrow\">',\n                '<td class=\"controls template-field cell c0 lastcol\" style=\"\" colspan=\"2\">',\n                '##actionsmenu##  ##edit##  ##delete##  ##approve##  ##disapprove##  ##export##',\n                '</td>',\n                '</tr>',\n            );\n        } else if (type == AddonModDataTemplateType.SEARCH) {\n            html.push(\n                '<tr class=\"searchcontrols\">',\n                '<td class=\"template-field cell c0\" style=\"\">Author first name: </td>',\n                '<td class=\"template-token cell c1 lastcol\" style=\"\">##firstname##</td>',\n                '</tr>',\n                '<tr class=\"searchcontrols lastrow\">',\n                '<td class=\"template-field cell c0\" style=\"\">Author surname: </td>',\n                '<td class=\"template-token cell c1 lastcol\" style=\"\">##lastname##</td>',\n                '</tr>',\n            );\n        }\n\n        html.push(\n            '</tbody>',\n            '</table>',\n            '</div>',\n        );\n\n        if (type == AddonModDataTemplateType.LIST) {\n            html.push('<hr />');\n        }\n\n        return html.join('');\n    }\n\n    /**\n     * Retrieve the entered data in the edit form.\n     * We don't use ng-model because it doesn't detect changes done by JavaScript.\n     *\n     * @param inputData Array with the entered form values.\n     * @param fields Fields that defines every content in the entry.\n     * @param dataId Database Id. If set, files will be uploaded and itemId set.\n     * @param entryId Entry Id.\n     * @param entryContents Original entry contents.\n     * @param offline True to prepare the data for an offline uploading, false otherwise.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns That contains object with the answers.\n     */\n    async getEditDataFromForm(\n        inputData: CoreFormFields,\n        fields: AddonModDataField[],\n        dataId: number,\n        entryId: number,\n        entryContents: AddonModDataEntryFields,\n        offline = false,\n        siteId?: string,\n    ): Promise<AddonModDataEntryWSField[]> {\n        if (!inputData) {\n            return [];\n        }\n\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Filter and translate fields to each field plugin.\n        const entryFieldDataToSend: AddonModDataEntryWSField[] = [];\n\n        const promises = fields.map(async (field) => {\n            const fieldData = AddonModDataFieldsDelegate.getFieldEditData(field, inputData, entryContents[field.id]);\n            if (!fieldData) {\n                return;\n            }\n            const proms = fieldData.map(async (fieldSubdata) => {\n                let value = fieldSubdata.value;\n\n                // Upload Files if asked.\n                if (dataId && fieldSubdata.files) {\n                    value = await this.uploadOrStoreFiles(\n                        dataId,\n                        0,\n                        entryId,\n                        fieldSubdata.fieldid,\n                        fieldSubdata.files,\n                        offline,\n                        siteId,\n                    );\n                }\n\n                // WS wants values in JSON format.\n                entryFieldDataToSend.push({\n                    fieldid: fieldSubdata.fieldid,\n                    subfield: fieldSubdata.subfield ?? '',\n                    value: (value || value === 0) ? JSON.stringify(value) : '',\n                });\n\n                return;\n            });\n\n            await Promise.all(proms);\n        });\n\n        await Promise.all(promises);\n\n        return entryFieldDataToSend;\n    }\n\n    /**\n     * Retrieve the temp files to be updated.\n     *\n     * @param inputData Array with the entered form values.\n     * @param fields Fields that defines every content in the entry.\n     * @param entryContents Original entry contents indexed by field id.\n     * @returns That contains object with the files.\n     */\n    async getEditTmpFiles(\n        inputData: CoreFormFields,\n        fields: AddonModDataField[],\n        entryContents: AddonModDataEntryFields,\n    ): Promise<CoreFileEntry[]> {\n        if (!inputData) {\n            return [];\n        }\n\n        // Filter and translate fields to each field plugin.\n        const promises = fields.map((field) =>\n            AddonModDataFieldsDelegate.getFieldEditFiles(field, inputData, entryContents[field.id]));\n\n        const fieldsFiles = await Promise.all(promises);\n\n        return fieldsFiles.reduce((files, fieldFiles) => files.concat(fieldFiles), []);\n    }\n\n    /**\n     * Get a list of stored attachment files for a new entry. See $mmaModDataHelper#storeFiles.\n     *\n     * @param dataId Database ID.\n     * @param entryId Entry ID or, if creating, timemodified.\n     * @param fieldId Field ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getStoredFiles(dataId: number, entryId: number, fieldId: number, siteId?: string): Promise<FileEntry[]> {\n        const folderPath = await AddonModDataOffline.getEntryFieldFolder(dataId, entryId, fieldId, siteId);\n\n        try {\n            return await CoreFileUploader.getStoredFiles(folderPath);\n        } catch {\n            // Ignore not found files.\n            return [];\n        }\n    }\n\n    /**\n     * Returns the template of a certain type.\n     *\n     * @param data Database object.\n     * @param type Type of template.\n     * @param fields List of database fields.\n     * @returns Template HTML.\n     */\n    getTemplate(data: AddonModDataData, type: AddonModDataTemplateType, fields: AddonModDataField[]): string {\n        let template = data[type] || this.getDefaultTemplate(type, fields);\n\n        if (type != AddonModDataTemplateType.LIST_HEADER && type != AddonModDataTemplateType.LIST_FOOTER) {\n            // Try to fix syntax errors so the template can be parsed by Angular.\n            template = CoreDomUtils.fixHtml(template);\n        }\n\n        // Add core-link directive to links.\n        template = template.replace(\n            /<a ([^>]*href=\"[^>]*)>/ig,\n            (match, attributes) => '<a core-link capture=\"true\" ' + attributes + '>',\n        );\n\n        return template;\n    }\n\n    /**\n     * Check if data has been changed by the user.\n     *\n     * @param inputData Object with the entered form values.\n     * @param fields Fields that defines every content in the entry.\n     * @param entryContents Original entry contents indexed by field id.\n     * @returns True if changed, false if not.\n     */\n    hasEditDataChanged(\n        inputData: CoreFormFields,\n        fields: AddonModDataField[],\n        entryContents: AddonModDataEntryFields,\n    ): boolean {\n        return fields.some((field) =>\n            AddonModDataFieldsDelegate.hasFieldDataChanged(field, inputData, entryContents[field.id]));\n    }\n\n    /**\n     * Displays a confirmation modal for deleting an entry.\n     *\n     * @param dataId Database ID.\n     * @param entryId Entry ID.\n     * @param courseId Course ID. It not defined, it will be fetched.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    async showDeleteEntryModal(dataId: number, entryId: number, courseId?: number, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        try {\n            await CoreDomUtils.showDeleteConfirm('addon.mod_data.confirmdeleterecord');\n\n            const modal = await CoreDomUtils.showModalLoading();\n\n            try {\n                if (entryId > 0) {\n                    courseId = await this.getActivityCourseIdIfNotSet(dataId, courseId, siteId);\n                }\n\n                if (courseId) {\n                    await AddonModData.deleteEntry(dataId, entryId, courseId, siteId);\n                }\n            } catch (message) {\n                CoreDomUtils.showErrorModalDefault(message, 'addon.mod_data.errordeleting', true);\n\n                modal.dismiss();\n\n                return;\n            }\n\n            try {\n                await AddonModData.invalidateEntryData(dataId, entryId, siteId);\n                await AddonModData.invalidateEntriesData(dataId, siteId);\n            } catch {\n                // Ignore errors.\n            }\n\n            CoreEvents.trigger(AddonModDataProvider.ENTRY_CHANGED, { dataId, entryId, deleted: true }, siteId);\n\n            CoreDomUtils.showToast('addon.mod_data.recorddeleted', true, ToastDuration.LONG);\n\n            modal.dismiss();\n        } catch {\n            // Ignore error, it was already displayed.\n        }\n\n    }\n\n    /**\n     * Given a list of files (either online files or local files), store the local files in a local folder\n     * to be submitted later.\n     *\n     * @param dataId Database ID.\n     * @param entryId Entry ID or, if creating, timemodified.\n     * @param fieldId Field ID.\n     * @param files List of files.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success, rejected otherwise.\n     */\n    async storeFiles(\n        dataId: number,\n        entryId: number,\n        fieldId: number,\n        files: CoreFileEntry[],\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult> {\n        // Get the folder where to store the files.\n        const folderPath = await AddonModDataOffline.getEntryFieldFolder(dataId, entryId, fieldId, siteId);\n\n        return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    }\n\n    /**\n     * Upload or store some files, depending if the user is offline or not.\n     *\n     * @param dataId Database ID.\n     * @param itemId Draft ID to use. Undefined or 0 to create a new draft ID.\n     * @param entryId Entry ID or, if creating, timemodified.\n     * @param fieldId Field ID.\n     * @param files List of files.\n     * @param offline True if files sould be stored for offline, false to upload them.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the itemId for the uploaded file/s.\n     */\n    async uploadOrStoreFiles(\n        dataId: number,\n        itemId: number,\n        entryId: number,\n        fieldId: number,\n        files: CoreFileEntry[],\n        offline: true,\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult>;\n    async uploadOrStoreFiles(\n        dataId: number,\n        itemId: number,\n        entryId: number,\n        fieldId: number,\n        files: CoreFileEntry[],\n        offline: false,\n        siteId?: string,\n    ): Promise<number>;\n    async uploadOrStoreFiles(\n        dataId: number,\n        itemId: number,\n        entryId: number,\n        fieldId: number,\n        files: CoreFileEntry[],\n        offline: boolean,\n        siteId?: string,\n    ): Promise<number | CoreFileUploaderStoreFilesResult>;\n    async uploadOrStoreFiles(\n        dataId: number,\n        itemId: number = 0,\n        entryId: number,\n        fieldId: number,\n        files: CoreFileEntry[],\n        offline: boolean,\n        siteId?: string,\n    ): Promise<number | CoreFileUploaderStoreFilesResult> {\n        if (offline) {\n            return this.storeFiles(dataId, entryId, fieldId, files, siteId);\n        }\n\n        if (!files.length) {\n            return 0;\n        }\n\n        return CoreFileUploader.uploadOrReuploadFiles(files, AddonModDataProvider.COMPONENT, itemId, siteId);\n    }\n\n}\nexport const AddonModDataHelper = makeSingleton(AddonModDataHelperProvider);\n\nexport type AddonModDatDisplayFieldsOptions = {\n    sortBy?: string | number;\n    sortDirection?: string;\n    offset?: number;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}