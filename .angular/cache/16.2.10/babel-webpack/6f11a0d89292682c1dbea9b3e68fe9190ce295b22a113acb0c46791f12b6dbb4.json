{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport { AddonMessages, AddonMessagesProvider } from '../../services/messages';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../../../core/components/context-menu/context-menu\";\nimport * as i3 from \"../../../../core/components/empty-box/empty-box\";\nimport * as i4 from \"../../../../core/components/infinite-loading/infinite-loading\";\nimport * as i5 from \"../../../../core/components/loading/loading\";\nimport * as i6 from \"../../../../core/components/split-view/split-view\";\nimport * as i7 from \"../../../../core/components/tabs/tab\";\nimport * as i8 from \"../../../../core/components/tabs/tabs\";\nimport * as i9 from \"../../../../core/components/user-avatar/user-avatar\";\nimport * as i10 from \"../../../../core/directives/fa-icon\";\nimport * as i11 from \"../../../../core/directives/format-text\";\nimport * as i12 from \"../../../../core/directives/content\";\nimport * as i13 from \"../../../../core/directives/update-non-reactive-attributes\";\nimport * as i14 from \"@ionic/angular\";\nimport * as i15 from \"@ngx-translate/core\";\nfunction AddonMessagesContactsPage_ng_template_19_ion_list_4_ion_item_1_ion_icon_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 20);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 1, \"addon.messages.contactblocked\"));\n  }\n}\nfunction AddonMessagesContactsPage_ng_template_19_ion_list_4_ion_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 15);\n    i0.ɵɵlistener(\"click\", function AddonMessagesContactsPage_ng_template_19_ion_list_4_ion_item_1_Template_ion_item_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const contact_r5 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r7.selectUser(contact_r5.id));\n    });\n    i0.ɵɵelement(1, \"core-user-avatar\", 16);\n    i0.ɵɵelementStart(2, \"ion-label\")(3, \"p\", 17);\n    i0.ɵɵelement(4, \"core-format-text\", 18);\n    i0.ɵɵtemplate(5, AddonMessagesContactsPage_ng_template_19_ion_list_4_ion_item_1_ion_icon_5_Template, 2, 3, \"ion-icon\", 19);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const contact_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"detail\", true);\n    i0.ɵɵattribute(\"aria-label\", contact_r5.fullname)(\"aria-current\", contact_r5.id === ctx_r4.selectedUserId ? \"page\" : \"false\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"user\", contact_r5)(\"checkOnline\", contact_r5.showonlinestatus)(\"linkProfile\", false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"text\", contact_r5.fullname)(\"contextInstanceId\", 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", contact_r5.isblocked);\n  }\n}\nfunction AddonMessagesContactsPage_ng_template_19_ion_list_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-list\", 13);\n    i0.ɵɵtemplate(1, AddonMessagesContactsPage_ng_template_19_ion_list_4_ion_item_1_Template, 6, 9, \"ion-item\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.confirmedContacts);\n  }\n}\nfunction AddonMessagesContactsPage_ng_template_19_core_empty_box_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-empty-box\", 21);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"message\", i0.ɵɵpipeBind1(1, 1, \"addon.messages.nocontactsgetstarted\"));\n  }\n}\nfunction AddonMessagesContactsPage_ng_template_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-refresher\", 8);\n    i0.ɵɵlistener(\"ionRefresh\", function AddonMessagesContactsPage_ng_template_19_Template_ion_refresher_ionRefresh_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.refreshData($event.target));\n    });\n    i0.ɵɵelement(1, \"ion-refresher-content\", 9);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"core-loading\", 5);\n    i0.ɵɵtemplate(4, AddonMessagesContactsPage_ng_template_19_ion_list_4_Template, 2, 1, \"ion-list\", 10);\n    i0.ɵɵtemplate(5, AddonMessagesContactsPage_ng_template_19_core_empty_box_5_Template, 2, 3, \"core-empty-box\", 11);\n    i0.ɵɵelementStart(6, \"core-infinite-loading\", 12);\n    i0.ɵɵlistener(\"action\", function AddonMessagesContactsPage_ng_template_19_Template_core_infinite_loading_action_6_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.loadMore($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.confirmedLoaded);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(2, 7, \"core.pulltorefresh\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hideUntil\", ctx_r0.confirmedLoaded);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.confirmedContacts.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.confirmedContacts.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"enabled\", ctx_r0.confirmedCanLoadMore)(\"error\", ctx_r0.confirmedLoadMoreError);\n  }\n}\nfunction AddonMessagesContactsPage_ng_template_22_ion_list_4_ion_item_1_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"addon.messages.wouldliketocontactyou\"), \" \");\n  }\n}\nfunction AddonMessagesContactsPage_ng_template_22_ion_list_4_ion_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 15);\n    i0.ɵɵlistener(\"click\", function AddonMessagesContactsPage_ng_template_22_ion_list_4_ion_item_1_Template_ion_item_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const request_r15 = restoredCtx.$implicit;\n      const ctx_r17 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r17.selectUser(request_r15.id));\n    });\n    i0.ɵɵelement(1, \"core-user-avatar\", 22);\n    i0.ɵɵelementStart(2, \"ion-label\");\n    i0.ɵɵelement(3, \"core-format-text\", 18);\n    i0.ɵɵtemplate(4, AddonMessagesContactsPage_ng_template_22_ion_list_4_ion_item_1_p_4_Template, 3, 3, \"p\", 23);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const request_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"detail\", true);\n    i0.ɵɵattribute(\"aria-label\", request_r15.fullname)(\"aria-current\", request_r15.id === ctx_r14.selectedUserId ? \"page\" : \"false\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"user\", request_r15)(\"linkProfile\", false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"text\", request_r15.fullname)(\"contextInstanceId\", 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !request_r15.iscontact);\n  }\n}\nfunction AddonMessagesContactsPage_ng_template_22_ion_list_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-list\", 13);\n    i0.ɵɵtemplate(1, AddonMessagesContactsPage_ng_template_22_ion_list_4_ion_item_1_Template, 5, 8, \"ion-item\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r12.requests);\n  }\n}\nfunction AddonMessagesContactsPage_ng_template_22_core_empty_box_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-empty-box\", 21);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"message\", i0.ɵɵpipeBind1(1, 1, \"addon.messages.nocontactrequests\"));\n  }\n}\nfunction AddonMessagesContactsPage_ng_template_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-refresher\", 8);\n    i0.ɵɵlistener(\"ionRefresh\", function AddonMessagesContactsPage_ng_template_22_Template_ion_refresher_ionRefresh_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.refreshData($event.target));\n    });\n    i0.ɵɵelement(1, \"ion-refresher-content\", 9);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"core-loading\", 5);\n    i0.ɵɵtemplate(4, AddonMessagesContactsPage_ng_template_22_ion_list_4_Template, 2, 1, \"ion-list\", 10);\n    i0.ɵɵtemplate(5, AddonMessagesContactsPage_ng_template_22_core_empty_box_5_Template, 2, 3, \"core-empty-box\", 11);\n    i0.ɵɵelementStart(6, \"core-infinite-loading\", 12);\n    i0.ɵɵlistener(\"action\", function AddonMessagesContactsPage_ng_template_22_Template_core_infinite_loading_action_6_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.loadMore($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.requestsLoaded);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(2, 7, \"core.pulltorefresh\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hideUntil\", ctx_r1.requestsLoaded);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.requests.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.requests.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"enabled\", ctx_r1.requestsCanLoadMore)(\"error\", ctx_r1.requestsLoadMoreError);\n  }\n}\n/**\n * Page that displays contacts and contact requests.\n */\nexport class AddonMessagesContactsPage {\n  constructor() {\n    this.selected = 'confirmed';\n    this.requestsBadge = '';\n    this.confirmedLoaded = false;\n    this.confirmedInitialising = false;\n    this.confirmedCanLoadMore = false;\n    this.confirmedLoadMoreError = false;\n    this.confirmedContacts = [];\n    this.requestsLoaded = false;\n    this.requestsInitialising = false;\n    this.requestsCanLoadMore = false;\n    this.requestsLoadMoreError = false;\n    this.requests = [];\n    this.siteId = CoreSites.getCurrentSiteId();\n    // Update the contact requests badge.\n    this.contactRequestsCountObserver = CoreEvents.on(AddonMessagesProvider.CONTACT_REQUESTS_COUNT_EVENT, data => {\n      this.requestsBadge = data.count > 0 ? String(data.count) : '';\n    }, this.siteId);\n    // Update block status of a user.\n    this.memberInfoObserver = CoreEvents.on(AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT, data => {\n      if (data.userBlocked || data.userUnblocked) {\n        const user = this.confirmedContacts.find(user => user.id == data.userId);\n        if (user) {\n          user.isblocked = !!data.userBlocked;\n        }\n      } else if (data.contactRemoved) {\n        const index = this.confirmedContacts.findIndex(contact => contact.id == data.userId);\n        if (index >= 0) {\n          this.confirmedContacts.splice(index, 1);\n        }\n      } else if (data.contactRequestConfirmed) {\n        this.confirmedFetchData(true);\n      }\n      if (data.contactRequestConfirmed || data.contactRequestDeclined) {\n        const index = this.requests.findIndex(request => request.id == data.userId);\n        if (index >= 0) {\n          this.requests.splice(index, 1);\n        }\n      }\n    }, CoreSites.getCurrentSiteId());\n  }\n  /**\n   * Page being initialized.\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      AddonMessages.getContactRequestsCount(_this.siteId); // Badge already updated by the observer.\n      _this.selected === 'confirmed' ? yield _this.initConfirmed() : yield _this.initRequests();\n    })();\n  }\n  /**\n   * Initialise confirmed contacts.\n   */\n  initConfirmed() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.confirmedInitialising) {\n        return;\n      }\n      try {\n        _this2.confirmedInitialising = true;\n        yield _this2.confirmedFetchData();\n        if (_this2.confirmedContacts.length && CoreScreen.isTablet) {\n          _this2.selectUser(_this2.confirmedContacts[0].id, true);\n        }\n      } finally {\n        _this2.confirmedInitialising = false;\n        _this2.confirmedLoaded = true;\n      }\n    })();\n  }\n  /**\n   * Initialise contact requests.\n   */\n  initRequests() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.requestsInitialising) {\n        return;\n      }\n      try {\n        _this3.requestsInitialising = true;\n        yield _this3.requestsFetchData();\n        if (_this3.requests.length && CoreScreen.isTablet) {\n          _this3.selectUser(_this3.requests[0].id, true);\n        }\n      } finally {\n        _this3.requestsInitialising = false;\n        _this3.requestsLoaded = true;\n      }\n    })();\n  }\n  /**\n   * Fetch contacts.\n   *\n   * @param refresh True if we are refreshing contacts, false if we are loading more.\n   * @returns Promise resolved when done.\n   */\n  confirmedFetchData(refresh = false) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.confirmedLoadMoreError = false;\n      const limitFrom = refresh ? 0 : _this4.confirmedContacts.length;\n      if (limitFrom === 0) {\n        // Always try to get latest data from server.\n        yield AddonMessages.invalidateUserContacts();\n      }\n      try {\n        const result = yield AddonMessages.getUserContacts(limitFrom);\n        _this4.confirmedContacts = refresh ? result.contacts : _this4.confirmedContacts.concat(result.contacts);\n        _this4.confirmedCanLoadMore = result.canLoadMore;\n      } catch (error) {\n        _this4.confirmedLoadMoreError = true;\n        CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n      }\n    })();\n  }\n  /**\n   * Fetch contact requests.\n   *\n   * @param refresh True if we are refreshing contact requests, false if we are loading more.\n   * @returns Promise resolved when done.\n   */\n  requestsFetchData(refresh = false) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.requestsLoadMoreError = false;\n      const limitFrom = refresh ? 0 : _this5.requests.length;\n      if (limitFrom === 0) {\n        // Always try to get latest data from server.\n        yield AddonMessages.invalidateContactRequestsCache();\n      }\n      try {\n        const result = yield AddonMessages.getContactRequests(limitFrom);\n        _this5.requests = refresh ? result.requests : _this5.requests.concat(result.requests);\n        _this5.requestsCanLoadMore = result.canLoadMore;\n      } catch (error) {\n        _this5.requestsLoadMoreError = true;\n        CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n      }\n    })();\n  }\n  /**\n   * Refresh contacts or requests.\n   *\n   * @param refresher Refresher.\n   * @returns Promise resolved when done.\n   */\n  refreshData(refresher) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (_this6.selected == 'confirmed') {\n          // No need to invalidate contacts, we always try to get the latest.\n          yield _this6.confirmedFetchData(true);\n        } else {\n          // Refresh the number of contacts requests to update badges.\n          AddonMessages.refreshContactRequestsCount();\n          // No need to invalidate contact requests, we always try to get the latest.\n          yield _this6.requestsFetchData(true);\n        }\n      } finally {\n        refresher === null || refresher === void 0 || refresher.complete();\n      }\n    })();\n  }\n  /**\n   * Load more contacts or requests.\n   *\n   * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n   * @returns Resolved when done.\n   */\n  loadMore(infiniteComplete) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (_this7.selected == 'confirmed') {\n          // No need to invalidate contacts, we always try to get the latest.\n          yield _this7.confirmedFetchData();\n        } else {\n          yield _this7.requestsFetchData();\n        }\n      } finally {\n        infiniteComplete && infiniteComplete();\n      }\n    })();\n  }\n  /**\n   * Navigate to the search page.\n   */\n  gotoSearch() {\n    CoreNavigator.navigateToSitePath('search');\n  }\n  selectTab(selected) {\n    if (selected !== 'confirmed' && selected !== 'requests') {\n      return;\n    }\n    this.selected = selected;\n    if (this.selected == 'confirmed' && !this.confirmedLoaded) {\n      this.initConfirmed();\n    }\n    if (this.selected == 'requests' && !this.requestsLoaded) {\n      this.initRequests();\n    }\n  }\n  /**\n   * Set the selected user and open the conversation in the split view if needed.\n   *\n   * @param userId Id of the selected user, undefined to use the last selected user in the tab.\n   * @param onInit Whether the contact was selected on initial load.\n   */\n  selectUser(userId, onInit = false) {\n    if (userId == this.selectedUserId && CoreScreen.isTablet) {\n      // No user conversation to open or it is already opened.\n      return;\n    }\n    if (onInit && CoreScreen.isMobile) {\n      // Do not open a conversation by default when split view is not visible.\n      return;\n    }\n    this.selectedUserId = userId;\n    const path = CoreNavigator.getRelativePathToParent('/messages/contacts') + `discussion/user/${userId}`;\n    CoreNavigator.navigate(path, {\n      reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested\n    });\n  }\n  /**\n   * Page destroyed.\n   */\n  ngOnDestroy() {\n    var _this$contactRequests;\n    (_this$contactRequests = this.contactRequestsCountObserver) === null || _this$contactRequests === void 0 || _this$contactRequests.off();\n  }\n}\n_class = AddonMessagesContactsPage;\n_class.ɵfac = function AddonMessagesContactsPage_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-messages-contacts\"]],\n  viewQuery: function AddonMessagesContactsPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CoreSplitViewComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.splitView = _t.first);\n    }\n  },\n  decls: 23,\n  vars: 17,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"slot\", \"end\"], [\"fill\", \"clear\", 3, \"click\"], [\"name\", \"fas-magnifying-glass\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [3, \"hideUntil\"], [3, \"title\", \"ionSelect\"], [\"badgeA11yText\", \"addon.messages.pendingcontactrequests\", 3, \"title\", \"badge\", \"ionSelect\"], [\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [\"class\", \"ion-no-margin\", 4, \"ngIf\"], [\"icon\", \"far-address-book\", 3, \"message\", 4, \"ngIf\"], [\"position\", \"bottom\", 3, \"enabled\", \"error\", \"action\"], [1, \"ion-no-margin\"], [\"class\", \"ion-text-wrap addon-messages-conversation-item\", \"button\", \"\", 3, \"detail\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"button\", \"\", 1, \"ion-text-wrap\", \"addon-messages-conversation-item\", 3, \"detail\", \"click\"], [\"slot\", \"start\", 3, \"user\", \"checkOnline\", \"linkProfile\"], [1, \"item-heading\"], [\"contextLevel\", \"system\", 3, \"text\", \"contextInstanceId\"], [\"name\", \"fas-user-slash\", \"slot\", \"end\", 4, \"ngIf\"], [\"name\", \"fas-user-slash\", \"slot\", \"end\"], [\"icon\", \"far-address-book\", 3, \"message\"], [\"slot\", \"start\", 3, \"user\", \"linkProfile\"], [4, \"ngIf\"]],\n  template: function AddonMessagesContactsPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵtext(7);\n      i0.ɵɵpipe(8, \"translate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"ion-buttons\", 2)(10, \"ion-button\", 3);\n      i0.ɵɵlistener(\"click\", function AddonMessagesContactsPage_Template_ion_button_click_10_listener() {\n        return ctx.gotoSearch();\n      });\n      i0.ɵɵpipe(11, \"translate\");\n      i0.ɵɵelement(12, \"ion-icon\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"core-context-menu\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(14, \"ion-content\")(15, \"core-split-view\")(16, \"core-tabs\", 5)(17, \"core-tab\", 6);\n      i0.ɵɵlistener(\"ionSelect\", function AddonMessagesContactsPage_Template_core_tab_ionSelect_17_listener() {\n        return ctx.selectTab(\"confirmed\");\n      });\n      i0.ɵɵpipe(18, \"translate\");\n      i0.ɵɵtemplate(19, AddonMessagesContactsPage_ng_template_19_Template, 7, 9, \"ng-template\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"core-tab\", 7);\n      i0.ɵɵlistener(\"ionSelect\", function AddonMessagesContactsPage_Template_core_tab_ionSelect_20_listener() {\n        return ctx.selectTab(\"requests\");\n      });\n      i0.ɵɵpipe(21, \"translate\");\n      i0.ɵɵtemplate(22, AddonMessagesContactsPage_ng_template_22_Template, 7, 9, \"ng-template\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 7, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 9, \"addon.messages.contacts\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(11, 11, \"addon.messages.searchcombined\"));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"hideUntil\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"title\", i0.ɵɵpipeBind1(18, 13, \"addon.messages.contacts\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"title\", i0.ɵɵpipeBind1(21, 15, \"addon.messages.requests\"))(\"badge\", ctx.requestsBadge);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.CoreContextMenuComponent, i3.CoreEmptyBoxComponent, i4.CoreInfiniteLoadingComponent, i5.CoreLoadingComponent, i6.CoreSplitViewComponent, i7.CoreTabComponent, i8.CoreTabsComponent, i9.CoreUserAvatarComponent, i10.CoreFaIconDirective, i11.CoreFormatTextDirective, i12.CoreContentDirective, i13.CoreUpdateNonReactiveAttributesDirective, i14.IonButton, i14.IonButtons, i14.IonContent, i14.IonHeader, i14.IonIcon, i14.IonItem, i14.IonLabel, i14.IonList, i14.IonRefresher, i14.IonRefresherContent, i14.IonTitle, i14.IonToolbar, i14.IonBackButton, i15.TranslatePipe],\n  styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%] {\\n  margin-right: 0;\\n  margin-left: 0;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%] {\\n  -webkit-margin-start: 2px;\\n  margin-inline-start: 2px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-self: flex-start;\\n  -webkit-margin-start: 2px;\\n  margin-inline-start: 2px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-badge[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-badge[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%] {\\n  margin-top: 3px;\\n  align-self: flex-end;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   .addon-message-last-message-date[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   .addon-message-last-message-date[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  font-size: 11px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .addon-message-last-message[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .addon-message-last-message[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: flex-start;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .addon-message-last-message-user[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .addon-message-last-message-user[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  color: var(--ion-text-color);\\n  -webkit-margin-end: 2px;\\n  margin-inline-end: 2px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .addon-message-last-message-text[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .addon-message-last-message-text[_ngcontent-%COMP%] {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  flex-shrink: 1;\\n}\\n[_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n}\\n[_nghost-%COMP%]   ion-item-divider[_ngcontent-%COMP%]   ion-badge[_ngcontent-%COMP%] {\\n  margin-left: 16px;\\n  margin-right: 16px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n});","map":{"version":3,"names":["CoreEvents","CoreSites","AddonMessages","AddonMessagesProvider","CoreNavigator","CoreScreen","CoreDomUtils","CoreSplitViewComponent","i0","ɵɵelement","ɵɵattribute","ɵɵpipeBind1","ɵɵelementStart","ɵɵlistener","AddonMessagesContactsPage_ng_template_19_ion_list_4_ion_item_1_Template_ion_item_click_0_listener","restoredCtx","ɵɵrestoreView","_r8","contact_r5","$implicit","ctx_r7","ɵɵnextContext","ɵɵresetView","selectUser","id","ɵɵtemplate","AddonMessagesContactsPage_ng_template_19_ion_list_4_ion_item_1_ion_icon_5_Template","ɵɵelementEnd","ɵɵproperty","fullname","ctx_r4","selectedUserId","ɵɵadvance","showonlinestatus","isblocked","AddonMessagesContactsPage_ng_template_19_ion_list_4_ion_item_1_Template","ctx_r2","confirmedContacts","AddonMessagesContactsPage_ng_template_19_Template_ion_refresher_ionRefresh_0_listener","$event","_r10","ctx_r9","refreshData","target","AddonMessagesContactsPage_ng_template_19_ion_list_4_Template","AddonMessagesContactsPage_ng_template_19_core_empty_box_5_Template","AddonMessagesContactsPage_ng_template_19_Template_core_infinite_loading_action_6_listener","ctx_r11","loadMore","ctx_r0","confirmedLoaded","ɵɵpropertyInterpolate","length","confirmedCanLoadMore","confirmedLoadMoreError","ɵɵtext","ɵɵtextInterpolate1","AddonMessagesContactsPage_ng_template_22_ion_list_4_ion_item_1_Template_ion_item_click_0_listener","_r18","request_r15","ctx_r17","AddonMessagesContactsPage_ng_template_22_ion_list_4_ion_item_1_p_4_Template","ctx_r14","iscontact","AddonMessagesContactsPage_ng_template_22_ion_list_4_ion_item_1_Template","ctx_r12","requests","AddonMessagesContactsPage_ng_template_22_Template_ion_refresher_ionRefresh_0_listener","_r20","ctx_r19","AddonMessagesContactsPage_ng_template_22_ion_list_4_Template","AddonMessagesContactsPage_ng_template_22_core_empty_box_5_Template","AddonMessagesContactsPage_ng_template_22_Template_core_infinite_loading_action_6_listener","ctx_r21","ctx_r1","requestsLoaded","requestsCanLoadMore","requestsLoadMoreError","AddonMessagesContactsPage","constructor","selected","requestsBadge","confirmedInitialising","requestsInitialising","siteId","getCurrentSiteId","contactRequestsCountObserver","on","CONTACT_REQUESTS_COUNT_EVENT","data","count","String","memberInfoObserver","MEMBER_INFO_CHANGED_EVENT","userBlocked","userUnblocked","user","find","userId","contactRemoved","index","findIndex","contact","splice","contactRequestConfirmed","confirmedFetchData","contactRequestDeclined","request","ngOnInit","_this","_asyncToGenerator","getContactRequestsCount","initConfirmed","initRequests","_this2","isTablet","_this3","requestsFetchData","refresh","_this4","limitFrom","invalidateUserContacts","result","getUserContacts","contacts","concat","canLoadMore","error","showErrorModalDefault","_this5","invalidateContactRequestsCache","getContactRequests","refresher","_this6","refreshContactRequestsCount","complete","infiniteComplete","_this7","gotoSearch","navigateToSitePath","selectTab","onInit","isMobile","path","getRelativePathToParent","navigate","reset","splitView","isNested","ngOnDestroy","_this$contactRequests","off","selectors","viewQuery","AddonMessagesContactsPage_Query","rf","ctx","AddonMessagesContactsPage_Template_ion_button_click_10_listener","AddonMessagesContactsPage_Template_core_tab_ionSelect_17_listener","AddonMessagesContactsPage_ng_template_19_Template","AddonMessagesContactsPage_Template_core_tab_ionSelect_20_listener","AddonMessagesContactsPage_ng_template_22_Template","ɵɵtextInterpolate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messages/pages/contacts/contacts.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messages/pages/contacts/contacts.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessages,\n    AddonMessagesConversationMember,\n    AddonMessagesProvider,\n} from '../../services/messages';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\n\n/**\n * Page that displays contacts and contact requests.\n */\n@Component({\n    selector: 'page-addon-messages-contacts',\n    templateUrl: 'contacts.html',\n    styleUrls: [\n        '../../messages-common.scss',\n    ],\n})\nexport class AddonMessagesContactsPage implements OnInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    selected: 'confirmed' | 'requests' = 'confirmed';\n    requestsBadge = '';\n    selectedUserId?: number; // User id of the conversation opened in the split view.\n\n    confirmedLoaded = false;\n    confirmedInitialising = false;\n    confirmedCanLoadMore = false;\n    confirmedLoadMoreError = false;\n    confirmedContacts: AddonMessagesConversationMember[] = [];\n\n    requestsLoaded = false;\n    requestsInitialising = false;\n    requestsCanLoadMore = false;\n    requestsLoadMoreError = false;\n    requests: AddonMessagesConversationMember[] = [];\n\n    protected siteId: string;\n    protected contactRequestsCountObserver: CoreEventObserver;\n    protected memberInfoObserver: CoreEventObserver;\n\n    constructor() {\n\n        this.siteId = CoreSites.getCurrentSiteId();\n\n        // Update the contact requests badge.\n        this.contactRequestsCountObserver = CoreEvents.on(\n            AddonMessagesProvider.CONTACT_REQUESTS_COUNT_EVENT,\n            (data) => {\n                this.requestsBadge = data.count > 0 ? String(data.count) : '';\n            },\n            this.siteId,\n        );\n\n        // Update block status of a user.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (data.userBlocked || data.userUnblocked) {\n                    const user = this.confirmedContacts.find((user) => user.id == data.userId);\n                    if (user) {\n                        user.isblocked = !!data.userBlocked;\n                    }\n                } else if (data.contactRemoved) {\n                    const index = this.confirmedContacts.findIndex((contact) => contact.id == data.userId);\n                    if (index >= 0) {\n                        this.confirmedContacts.splice(index, 1);\n                    }\n                } else if (data.contactRequestConfirmed) {\n                    this.confirmedFetchData(true);\n                }\n\n                if (data.contactRequestConfirmed || data.contactRequestDeclined) {\n                    const index = this.requests.findIndex((request) => request.id == data.userId);\n                    if (index >= 0) {\n                        this.requests.splice(index, 1);\n                    }\n                }\n            },\n            CoreSites.getCurrentSiteId(),\n        );\n\n    }\n\n    /**\n     * Page being initialized.\n     */\n    async ngOnInit(): Promise<void> {\n        AddonMessages.getContactRequestsCount(this.siteId); // Badge already updated by the observer.\n\n        this.selected === 'confirmed'\n            ? await this.initConfirmed()\n            : await this.initRequests();\n    }\n\n    /**\n     * Initialise confirmed contacts.\n     */\n    async initConfirmed(): Promise<void> {\n        if (this.confirmedInitialising) {\n            return;\n        }\n\n        try {\n            this.confirmedInitialising = true;\n\n            await this.confirmedFetchData();\n\n            if (this.confirmedContacts.length && CoreScreen.isTablet) {\n                this.selectUser(this.confirmedContacts[0].id, true);\n            }\n        } finally {\n            this.confirmedInitialising = false;\n            this.confirmedLoaded = true;\n        }\n    }\n\n    /**\n     * Initialise contact requests.\n     */\n    async initRequests(): Promise<void> {\n        if (this.requestsInitialising) {\n            return;\n        }\n\n        try {\n            this.requestsInitialising = true;\n\n            await this.requestsFetchData();\n\n            if (this.requests.length && CoreScreen.isTablet) {\n                this.selectUser(this.requests[0].id, true);\n            }\n        } finally {\n            this.requestsInitialising = false;\n            this.requestsLoaded = true;\n        }\n    }\n\n    /**\n     * Fetch contacts.\n     *\n     * @param refresh True if we are refreshing contacts, false if we are loading more.\n     * @returns Promise resolved when done.\n     */\n    async confirmedFetchData(refresh: boolean = false): Promise<void> {\n        this.confirmedLoadMoreError = false;\n\n        const limitFrom = refresh ? 0 : this.confirmedContacts.length;\n\n        if (limitFrom === 0) {\n            // Always try to get latest data from server.\n            await AddonMessages.invalidateUserContacts();\n        }\n\n        try {\n            const result = await AddonMessages.getUserContacts(limitFrom);\n            this.confirmedContacts = refresh ? result.contacts : this.confirmedContacts.concat(result.contacts);\n            this.confirmedCanLoadMore = result.canLoadMore;\n        } catch (error) {\n            this.confirmedLoadMoreError = true;\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Fetch contact requests.\n     *\n     * @param refresh True if we are refreshing contact requests, false if we are loading more.\n     * @returns Promise resolved when done.\n     */\n    async requestsFetchData(refresh: boolean = false): Promise<void> {\n        this.requestsLoadMoreError = false;\n\n        const limitFrom = refresh ? 0 : this.requests.length;\n\n        if (limitFrom === 0) {\n            // Always try to get latest data from server.\n            await AddonMessages.invalidateContactRequestsCache();\n        }\n\n        try {\n            const result = await AddonMessages.getContactRequests(limitFrom);\n            this.requests = refresh ? result.requests : this.requests.concat(result.requests);\n            this.requestsCanLoadMore = result.canLoadMore;\n        } catch (error) {\n            this.requestsLoadMoreError = true;\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Refresh contacts or requests.\n     *\n     * @param refresher Refresher.\n     * @returns Promise resolved when done.\n     */\n    async refreshData(refresher?: HTMLIonRefresherElement): Promise<void> {\n        try {\n            if (this.selected == 'confirmed') {\n                // No need to invalidate contacts, we always try to get the latest.\n                await this.confirmedFetchData(true);\n            } else {\n                // Refresh the number of contacts requests to update badges.\n                AddonMessages.refreshContactRequestsCount();\n\n                // No need to invalidate contact requests, we always try to get the latest.\n                await this.requestsFetchData(true);\n            }\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Load more contacts or requests.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @returns Resolved when done.\n     */\n    async loadMore(infiniteComplete?: () => void): Promise<void> {\n        try {\n            if (this.selected == 'confirmed') {\n                // No need to invalidate contacts, we always try to get the latest.\n                await this.confirmedFetchData();\n            } else {\n                await this.requestsFetchData();\n            }\n        } finally {\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Navigate to the search page.\n     */\n    gotoSearch(): void {\n        CoreNavigator.navigateToSitePath('search');\n    }\n\n    selectTab(selected: string): void {\n        if (selected !== 'confirmed' && selected !== 'requests') {\n            return;\n        }\n\n        this.selected = selected;\n\n        if (this.selected == 'confirmed' && !this.confirmedLoaded) {\n            this.initConfirmed();\n        }\n\n        if (this.selected == 'requests' && !this.requestsLoaded) {\n            this.initRequests();\n        }\n    }\n\n    /**\n     * Set the selected user and open the conversation in the split view if needed.\n     *\n     * @param userId Id of the selected user, undefined to use the last selected user in the tab.\n     * @param onInit Whether the contact was selected on initial load.\n     */\n    selectUser(userId: number, onInit = false): void {\n        if (userId == this.selectedUserId && CoreScreen.isTablet) {\n            // No user conversation to open or it is already opened.\n            return;\n        }\n\n        if (onInit && CoreScreen.isMobile) {\n            // Do not open a conversation by default when split view is not visible.\n            return;\n        }\n\n        this.selectedUserId = userId;\n\n        const path = CoreNavigator.getRelativePathToParent('/messages/contacts') + `discussion/user/${userId}`;\n        CoreNavigator.navigate(path, {\n            reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested,\n        });\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.contactRequestsCountObserver?.off();\n    }\n\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>{{ 'addon.messages.contacts' | translate }}</h1>\n        </ion-title>\n        <ion-buttons slot=\"end\">\n            <ion-button fill=\"clear\" (click)=\"gotoSearch()\" [attr.aria-label]=\"'addon.messages.searchcombined' | translate\">\n                <ion-icon name=\"fas-magnifying-glass\" slot=\"icon-only\" aria-hidden=\"true\" />\n            </ion-button>\n            <!-- Add an empty context menu so split view pages can add items, otherwise the menu disappears in some cases. -->\n            <core-context-menu />\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <core-split-view>\n        <core-tabs [hideUntil]=\"true\">\n\n            <!-- Contacts tab. -->\n            <core-tab [title]=\"'addon.messages.contacts' | translate\" (ionSelect)=\"selectTab('confirmed')\">\n                <ng-template>\n                    <ion-refresher slot=\"fixed\" [disabled]=\"!confirmedLoaded\" (ionRefresh)=\"refreshData($event.target)\">\n                        <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n                    </ion-refresher>\n                    <core-loading [hideUntil]=\"confirmedLoaded\">\n                        <ion-list class=\"ion-no-margin\" *ngIf=\"confirmedContacts.length\">\n                            <ion-item class=\"ion-text-wrap addon-messages-conversation-item\" (click)=\"selectUser(contact.id)\" button\n                                *ngFor=\"let contact of confirmedContacts\" [attr.aria-label]=\"contact.fullname\" [detail]=\"true\"\n                                [attr.aria-current]=\"contact.id === selectedUserId ? 'page' : 'false'\">\n                                <core-user-avatar slot=\"start\" [user]=\"contact\" [checkOnline]=\"contact.showonlinestatus\"\n                                    [linkProfile]=\"false\" />\n                                <ion-label>\n                                    <p class=\"item-heading\">\n                                        <core-format-text [text]=\"contact.fullname\" contextLevel=\"system\" [contextInstanceId]=\"0\" />\n                                        <ion-icon *ngIf=\"contact.isblocked\" name=\"fas-user-slash\" slot=\"end\"\n                                            [attr.aria-label]=\"'addon.messages.contactblocked' | translate\" />\n                                    </p>\n                                </ion-label>\n                            </ion-item>\n                        </ion-list>\n\n                        <core-empty-box *ngIf=\"!confirmedContacts.length\" icon=\"far-address-book\"\n                            [message]=\"'addon.messages.nocontactsgetstarted' | translate\" />\n\n                        <core-infinite-loading [enabled]=\"confirmedCanLoadMore\" (action)=\"loadMore($event)\" [error]=\"confirmedLoadMoreError\"\n                            position=\"bottom\" />\n                    </core-loading>\n                </ng-template>\n            </core-tab>\n\n            <!-- Requests tab. -->\n            <core-tab [title]=\"'addon.messages.requests' | translate\" (ionSelect)=\"selectTab('requests')\" [badge]=\"requestsBadge\"\n                badgeA11yText=\"addon.messages.pendingcontactrequests\">\n                <ng-template>\n                    <ion-refresher slot=\"fixed\" [disabled]=\"!requestsLoaded\" (ionRefresh)=\"refreshData($event.target)\">\n                        <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n                    </ion-refresher>\n                    <core-loading [hideUntil]=\"requestsLoaded\">\n                        <ion-list class=\"ion-no-margin\" *ngIf=\"requests.length\">\n                            <ion-item class=\"ion-text-wrap addon-messages-conversation-item\" *ngFor=\"let request of requests\"\n                                [attr.aria-label]=\"request.fullname\" (click)=\"selectUser(request.id)\" button\n                                [attr.aria-current]=\"request.id === selectedUserId ? 'page' : 'false'\" [detail]=\"true\">\n                                <core-user-avatar slot=\"start\" [user]=\"request\" [linkProfile]=\"false\" />\n                                <ion-label>\n                                    <core-format-text [text]=\"request.fullname\" contextLevel=\"system\" [contextInstanceId]=\"0\" />\n                                    <p *ngIf=\"!request.iscontact\">\n                                        {{ 'addon.messages.wouldliketocontactyou' | translate }}\n                                    </p>\n                                </ion-label>\n                            </ion-item>\n                        </ion-list>\n                        <core-empty-box *ngIf=\"!requests.length\" icon=\"far-address-book\"\n                            [message]=\"'addon.messages.nocontactrequests' | translate\" />\n                        <core-infinite-loading [enabled]=\"requestsCanLoadMore\" (action)=\"loadMore($event)\" [error]=\"requestsLoadMoreError\"\n                            position=\"bottom\" />\n                    </core-loading>\n                </ng-template>\n            </core-tab>\n        </core-tabs>\n    </core-split-view>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}