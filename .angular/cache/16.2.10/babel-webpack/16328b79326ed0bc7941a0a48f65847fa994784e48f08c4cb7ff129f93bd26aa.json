{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport * as i0 from \"@angular/core\";\n/**\n * Template class to easily create components for blocks.\n */\nexport class CoreBlockBaseComponent {\n  constructor(loggerName = 'AddonBlockComponent') {\n    this.loaded = false; // If false, the UI should display a loading.\n    this.fetchContentDefaultError = ''; // Default error to show when loading contents.\n    this.onReadyPromise = new CorePromisedValue();\n    this.logger = CoreLogger.getInstance(loggerName);\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.loadContent();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnChanges(changes) {\n    if (changes.block) {\n      this.parseConfigs();\n    }\n  }\n  /**\n   * Parse configs if needed.\n   */\n  parseConfigs() {\n    var _this$block$configs;\n    if (!((_this$block$configs = this.block.configs) !== null && _this$block$configs !== void 0 && _this$block$configs.length) || this.block.configsRecord) {\n      return;\n    }\n    this.block.configs.forEach(config => {\n      config.value = CoreTextUtils.parseJSON(config.value);\n    });\n    this.block.configsRecord = CoreUtils.arrayToObject(this.block.configs, 'name');\n  }\n  /**\n   * Perform the refresh content function.\n   *\n   * @param showLoading Whether to show loading.\n   * @returns Resolved when done.\n   */\n  refreshContent(showLoading) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (showLoading) {\n        _this2.loaded = false;\n      }\n      // Wrap the call in a try/catch so the workflow isn't interrupted if an error occurs.\n      try {\n        yield _this2.invalidateContent();\n      } catch (ex) {\n        // An error ocurred in the function, log the error and just resolve the promise so the workflow continues.\n        _this2.logger.error(ex);\n      }\n      yield _this2.loadContent();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateContent() {\n    return _asyncToGenerator(function* () {\n      return;\n    })();\n  }\n  /**\n   * Loads the component contents and shows the corresponding error.\n   */\n  loadContent() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // Wrap the call in a try/catch so the workflow isn't interrupted if an error occurs.\n      try {\n        yield _this3.fetchContent();\n      } catch (error) {\n        // An error ocurred in the function, log the error and just resolve the promise so the workflow continues.\n        _this3.logger.error(error);\n        // Error getting data, fail.\n        CoreDomUtils.showErrorModalDefault(error, _this3.fetchContentDefaultError, true);\n      }\n      _this3.loaded = true;\n      _this3.onReadyPromise.resolve();\n    })();\n  }\n  /**\n   * Download the component contents.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchContent() {\n    return _asyncToGenerator(function* () {\n      return;\n    })();\n  }\n  /**\n   * Reload content without invalidating data.\n   *\n   * @returns Promise resolved when done.\n   */\n  reloadContent() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this4.loaded) {\n        // Content being loaded, don't do anything.\n        return;\n      }\n      _this4.loaded = false;\n      yield _this4.loadContent();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ready() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this5.onReadyPromise;\n    })();\n  }\n}\n_class = CoreBlockBaseComponent;\n_class.ɵfac = function CoreBlockBaseComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject('', 8));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    title: \"title\",\n    block: \"block\",\n    contextLevel: \"contextLevel\",\n    instanceId: \"instanceId\",\n    link: \"link\",\n    linkParams: \"linkParams\",\n    navOptions: \"navOptions\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function CoreBlockBaseComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreLogger","CoreDomUtils","CoreUtils","CoreTextUtils","CorePromisedValue","CoreBlockBaseComponent","constructor","loggerName","loaded","fetchContentDefaultError","onReadyPromise","logger","getInstance","ngOnInit","_this","_asyncToGenerator","loadContent","ngOnChanges","changes","block","parseConfigs","_this$block$configs","configs","length","configsRecord","forEach","config","value","parseJSON","arrayToObject","refreshContent","showLoading","_this2","invalidateContent","ex","error","_this3","fetchContent","showErrorModalDefault","resolve","reloadContent","_this4","ready","_this5","i0","ɵɵdirectiveInject","selectors","inputs","title","contextLevel","instanceId","link","linkParams","navOptions","features","ɵɵNgOnChangesFeature","decls","vars","template","CoreBlockBaseComponent_Template","rf","ctx","encapsulation"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/block/classes/base-block-component.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { OnInit, Input, Component, Optional, Inject, OnChanges, SimpleChanges } from '@angular/core';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreCourseBlock } from '../../course/services/course';\nimport { Params } from '@angular/router';\nimport { ContextLevel } from '@/core/constants';\nimport { CoreNavigationOptions } from '@services/navigator';\nimport { AsyncDirective } from '@classes/async-directive';\nimport { CorePromisedValue } from '@classes/promised-value';\n\n/**\n * Template class to easily create components for blocks.\n */\n@Component({\n    template: '',\n})\nexport abstract class CoreBlockBaseComponent implements OnInit, OnChanges, ICoreBlockComponent, AsyncDirective {\n\n    @Input() title!: string; // The block title.\n    @Input() block!: CoreCourseBlock; // The block to render.\n    @Input() contextLevel!: ContextLevel; // The context where the block will be used.\n    @Input() instanceId!: number; // The instance ID associated with the context level.\n    @Input() link?: string; // Link to go when clicked.\n    @Input() linkParams?: Params; // Link params to go when clicked.\n    @Input() navOptions?: CoreNavigationOptions; // Navigation options.\n\n    loaded = false; // If false, the UI should display a loading.\n    protected fetchContentDefaultError = ''; // Default error to show when loading contents.\n    protected onReadyPromise = new CorePromisedValue<void>();\n\n    protected logger: CoreLogger;\n\n    constructor(@Optional() @Inject('') loggerName: string = 'AddonBlockComponent') {\n        this.logger = CoreLogger.getInstance(loggerName);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        await this.loadContent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.block) {\n            this.parseConfigs();\n        }\n    }\n\n    /**\n     * Parse configs if needed.\n     */\n    protected parseConfigs(): void {\n        if (!this.block.configs?.length || this.block.configsRecord) {\n            return;\n        }\n\n        this.block.configs.forEach((config) => {\n            config.value = CoreTextUtils.parseJSON(config.value);\n        });\n\n        this.block.configsRecord = CoreUtils.arrayToObject(this.block.configs, 'name');\n    }\n\n    /**\n     * Perform the refresh content function.\n     *\n     * @param showLoading Whether to show loading.\n     * @returns Resolved when done.\n     */\n    protected async refreshContent(showLoading?: boolean): Promise<void> {\n        if (showLoading) {\n            this.loaded = false;\n        }\n\n        // Wrap the call in a try/catch so the workflow isn't interrupted if an error occurs.\n        try {\n            await this.invalidateContent();\n        } catch (ex) {\n            // An error ocurred in the function, log the error and just resolve the promise so the workflow continues.\n            this.logger.error(ex);\n        }\n\n        await this.loadContent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateContent(): Promise<void> {\n        return;\n    }\n\n    /**\n     * Loads the component contents and shows the corresponding error.\n     */\n    protected async loadContent(): Promise<void> {\n        // Wrap the call in a try/catch so the workflow isn't interrupted if an error occurs.\n        try {\n            await this.fetchContent();\n        } catch (error) {\n            // An error ocurred in the function, log the error and just resolve the promise so the workflow continues.\n            this.logger.error(error);\n\n            // Error getting data, fail.\n            CoreDomUtils.showErrorModalDefault(error, this.fetchContentDefaultError, true);\n        }\n\n        this.loaded = true;\n        this.onReadyPromise.resolve();\n    }\n\n    /**\n     * Download the component contents.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchContent(): Promise<void> {\n        return;\n    }\n\n    /**\n     * Reload content without invalidating data.\n     *\n     * @returns Promise resolved when done.\n     */\n    async reloadContent(): Promise<void> {\n        if (!this.loaded) {\n            // Content being loaded, don't do anything.\n            return;\n        }\n\n        this.loaded = false;\n        await this.loadContent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ready(): Promise<void> {\n        return await this.onReadyPromise;\n    }\n\n}\n\n/**\n * Interface for block components.\n */\nexport interface ICoreBlockComponent {\n\n    /**\n     * Perform the invalidate content function.\n     */\n    invalidateContent(): Promise<void>;\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}