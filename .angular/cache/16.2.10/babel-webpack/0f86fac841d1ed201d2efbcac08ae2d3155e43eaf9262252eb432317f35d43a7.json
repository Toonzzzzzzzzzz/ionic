{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport { CoreDynamicComponent } from '@components/dynamic-component/dynamic-component';\nimport { AddonModDataTemplateMode } from '../../services/data';\nimport { AddonModDataFieldsDelegate } from '../../services/data-fields-delegate';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../core/components/dynamic-component/dynamic-component\";\nimport * as i2 from \"../../../../../core/components/loading/loading\";\n/**\n * Component that displays a database field plugin.\n */\nexport class AddonModDataFieldPluginComponent {\n  constructor() {\n    this.gotoEntry = new EventEmitter(); // Action to perform.\n    // Output called when the field is initialized with a value and it didn't have one already.\n    this.onFieldInit = new EventEmitter();\n    this.fieldLoaded = false;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.field) {\n        _this.fieldLoaded = true;\n        return;\n      }\n      try {\n        // Check if the plugin has defined its own component to render itself.\n        _this.fieldComponent = yield AddonModDataFieldsDelegate.getComponentForField(_this.field);\n        if (_this.fieldComponent) {\n          // Prepare the data to pass to the component.\n          _this.pluginData = {\n            mode: _this.mode,\n            field: _this.field,\n            value: _this.value,\n            database: _this.database,\n            error: _this.error,\n            form: _this.form,\n            searchFields: _this.searchFields,\n            gotoEntry: _this.gotoEntry,\n            onFieldInit: _this.onFieldInit\n          };\n        }\n      } finally {\n        _this.fieldLoaded = true;\n      }\n    })();\n  }\n  /**\n   * Component being changed.\n   */\n  ngOnChanges(changes) {\n    if (this.fieldLoaded && this.pluginData) {\n      if (this.mode == AddonModDataTemplateMode.EDIT && changes.error) {\n        this.pluginData.error = changes.error.currentValue;\n      }\n      if ((this.mode == AddonModDataTemplateMode.SHOW || this.mode == AddonModDataTemplateMode.LIST) && changes.value) {\n        this.pluginData.value = changes.value.currentValue;\n      }\n    }\n  }\n}\n_class = AddonModDataFieldPluginComponent;\n_class.ɵfac = function AddonModDataFieldPluginComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"addon-mod-data-field-plugin\"]],\n  viewQuery: function AddonModDataFieldPluginComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CoreDynamicComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dynamicComponent = _t.first);\n    }\n  },\n  inputs: {\n    mode: \"mode\",\n    field: \"field\",\n    value: \"value\",\n    database: \"database\",\n    error: \"error\",\n    form: \"form\",\n    searchFields: \"searchFields\"\n  },\n  outputs: {\n    gotoEntry: \"gotoEntry\",\n    onFieldInit: \"onFieldInit\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 4,\n  consts: [[3, \"component\", \"data\"], [3, \"hideUntil\", \"fullscreen\"]],\n  template: function AddonModDataFieldPluginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"core-dynamic-component\", 0);\n      i0.ɵɵelement(1, \"core-loading\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"component\", ctx.fieldComponent)(\"data\", ctx.pluginData);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hideUntil\", ctx.fieldLoaded)(\"fullscreen\", false);\n    }\n  },\n  dependencies: [i1.CoreDynamicComponent, i2.CoreLoadingComponent],\n  encapsulation: 2\n});","map":{"version":3,"names":["EventEmitter","CoreDynamicComponent","AddonModDataTemplateMode","AddonModDataFieldsDelegate","AddonModDataFieldPluginComponent","constructor","gotoEntry","onFieldInit","fieldLoaded","ngOnInit","_this","_asyncToGenerator","field","fieldComponent","getComponentForField","pluginData","mode","value","database","error","form","searchFields","ngOnChanges","changes","EDIT","currentValue","SHOW","LIST","selectors","viewQuery","AddonModDataFieldPluginComponent_Query","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵproperty","ɵɵadvance"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/components/field-plugin/field-plugin.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/components/field-plugin/addon-mod-data-field-plugin.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnChanges, ViewChild, Input, Output, SimpleChange, Type, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CoreDynamicComponent } from '@components/dynamic-component/dynamic-component';\nimport { CoreFormFields } from '@singletons/form';\nimport { AddonModDataEntryFieldInitialized, AddonModDataFieldPluginBaseComponent } from '../../classes/base-field-plugin-component';\nimport { AddonModDataData, AddonModDataField, AddonModDataTemplateMode } from '../../services/data';\nimport { AddonModDataFieldsDelegate } from '../../services/data-fields-delegate';\n\n/**\n * Component that displays a database field plugin.\n */\n@Component({\n    selector: 'addon-mod-data-field-plugin',\n    templateUrl: 'addon-mod-data-field-plugin.html',\n})\nexport class AddonModDataFieldPluginComponent implements OnInit, OnChanges {\n\n    @ViewChild(CoreDynamicComponent) dynamicComponent?: CoreDynamicComponent<AddonModDataFieldPluginBaseComponent>;\n\n    @Input() mode!: AddonModDataTemplateMode; // The render mode.\n    @Input() field!: AddonModDataField; // The field to render.\n    @Input() value?: unknown; // The value of the field.\n    @Input() database?: AddonModDataData; // Database object.\n    @Input() error?: string; // Error when editing.\n    @Input() form?: FormGroup; // Form where to add the form control. Just required for edit and search modes.\n    @Input() searchFields?: CoreFormFields; // The search value of all fields.\n    @Output() gotoEntry = new EventEmitter<number>(); // Action to perform.\n    // Output called when the field is initialized with a value and it didn't have one already.\n    @Output() onFieldInit = new EventEmitter<AddonModDataEntryFieldInitialized>();\n\n    fieldComponent?: Type<AddonModDataFieldPluginBaseComponent>; // Component to render the plugin.\n    pluginData?: AddonDataFieldPluginComponentData; // Data to pass to the component.\n    fieldLoaded = false;\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        if (!this.field) {\n            this.fieldLoaded = true;\n\n            return;\n        }\n\n        try {\n            // Check if the plugin has defined its own component to render itself.\n            this.fieldComponent = await AddonModDataFieldsDelegate.getComponentForField(this.field);\n\n            if (this.fieldComponent) {\n                // Prepare the data to pass to the component.\n                this.pluginData = {\n                    mode: this.mode,\n                    field: this.field,\n                    value: this.value,\n                    database: this.database,\n                    error: this.error,\n                    form: this.form,\n                    searchFields: this.searchFields,\n                    gotoEntry: this.gotoEntry,\n                    onFieldInit: this.onFieldInit,\n                };\n            }\n        } finally {\n            this.fieldLoaded = true;\n        }\n    }\n\n    /**\n     * Component being changed.\n     */\n    ngOnChanges(changes: { [name: string]: SimpleChange }): void {\n        if (this.fieldLoaded && this.pluginData) {\n            if (this.mode == AddonModDataTemplateMode.EDIT && changes.error) {\n                this.pluginData.error = changes.error.currentValue;\n            }\n            if ((this.mode == AddonModDataTemplateMode.SHOW || this.mode == AddonModDataTemplateMode.LIST) && changes.value) {\n                this.pluginData.value = changes.value.currentValue;\n            }\n        }\n    }\n\n}\n\nexport type AddonDataFieldPluginComponentData = {\n    mode: AddonModDataTemplateMode; // The render mode.\n    field: AddonModDataField; // The field to render.\n    value?: unknown; // The value of the field.\n    database?: AddonModDataData; // Database object.\n    error?: string; // Error when editing.\n    form?: FormGroup; // Form where to add the form control. Just required for edit and search modes.\n    searchFields?: CoreFormFields; // The search value of all fields.\n    gotoEntry: EventEmitter<number>;\n    onFieldInit: EventEmitter<AddonModDataEntryFieldInitialized>;\n};\n","<core-dynamic-component [component]=\"fieldComponent\" [data]=\"pluginData\">\n    <!-- This content will be replaced by the component if found. -->\n    <core-loading [hideUntil]=\"fieldLoaded\" [fullscreen]=\"false\" />\n</core-dynamic-component>\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAqFA,YAAY,QAAQ,eAAe;AAExH,SAASC,oBAAoB,QAAQ,iDAAiD;AAGtF,SAA8CC,wBAAwB,QAAQ,qBAAqB;AACnG,SAASC,0BAA0B,QAAQ,qCAAqC;;;;AAEhF;;;AAOA,OAAM,MAAOC,gCAAgC;EAJ7CC,YAAA;IAec,KAAAC,SAAS,GAAG,IAAIN,YAAY,EAAU,CAAC,CAAC;IAClD;IACU,KAAAO,WAAW,GAAG,IAAIP,YAAY,EAAqC;IAI7E,KAAAQ,WAAW,GAAG,KAAK;;EAEnB;;;EAGMC,QAAQA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACV,IAAI,CAACD,KAAI,CAACE,KAAK,EAAE;QACbF,KAAI,CAACF,WAAW,GAAG,IAAI;QAEvB;;MAGJ,IAAI;QACA;QACAE,KAAI,CAACG,cAAc,SAASV,0BAA0B,CAACW,oBAAoB,CAACJ,KAAI,CAACE,KAAK,CAAC;QAEvF,IAAIF,KAAI,CAACG,cAAc,EAAE;UACrB;UACAH,KAAI,CAACK,UAAU,GAAG;YACdC,IAAI,EAAEN,KAAI,CAACM,IAAI;YACfJ,KAAK,EAAEF,KAAI,CAACE,KAAK;YACjBK,KAAK,EAAEP,KAAI,CAACO,KAAK;YACjBC,QAAQ,EAAER,KAAI,CAACQ,QAAQ;YACvBC,KAAK,EAAET,KAAI,CAACS,KAAK;YACjBC,IAAI,EAAEV,KAAI,CAACU,IAAI;YACfC,YAAY,EAAEX,KAAI,CAACW,YAAY;YAC/Bf,SAAS,EAAEI,KAAI,CAACJ,SAAS;YACzBC,WAAW,EAAEG,KAAI,CAACH;WACrB;;OAER,SAAS;QACNG,KAAI,CAACF,WAAW,GAAG,IAAI;;IAC1B;EACL;EAEA;;;EAGAc,WAAWA,CAACC,OAAyC;IACjD,IAAI,IAAI,CAACf,WAAW,IAAI,IAAI,CAACO,UAAU,EAAE;MACrC,IAAI,IAAI,CAACC,IAAI,IAAId,wBAAwB,CAACsB,IAAI,IAAID,OAAO,CAACJ,KAAK,EAAE;QAC7D,IAAI,CAACJ,UAAU,CAACI,KAAK,GAAGI,OAAO,CAACJ,KAAK,CAACM,YAAY;;MAEtD,IAAI,CAAC,IAAI,CAACT,IAAI,IAAId,wBAAwB,CAACwB,IAAI,IAAI,IAAI,CAACV,IAAI,IAAId,wBAAwB,CAACyB,IAAI,KAAKJ,OAAO,CAACN,KAAK,EAAE;QAC7G,IAAI,CAACF,UAAU,CAACE,KAAK,GAAGM,OAAO,CAACN,KAAK,CAACQ,YAAY;;;EAG9D;;SAhESrB,gCAAgC;;mBAAhCA,MAAgC;AAAA;;QAAhCA,MAAgC;EAAAwB,SAAA;EAAAC,SAAA,WAAAC,uCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;qBAE9B9B,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;MC/BnCgC,EAAA,CAAAC,cAAA,gCAAyE;MAErED,EAAA,CAAAE,SAAA,sBAA+D;MACnEF,EAAA,CAAAG,YAAA,EAAyB;;;MAHDH,EAAA,CAAAI,UAAA,cAAAL,GAAA,CAAAnB,cAAA,CAA4B,SAAAmB,GAAA,CAAAjB,UAAA;MAElCkB,EAAA,CAAAK,SAAA,GAAyB;MAAzBL,EAAA,CAAAI,UAAA,cAAAL,GAAA,CAAAxB,WAAA,CAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}