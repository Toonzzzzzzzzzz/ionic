{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDatabaseCachingStrategy, CoreDatabaseTableProxy } from '@classes/database/database-table-proxy';\nimport { CoreApp } from '@services/app';\nimport { APP_SCHEMA, CONFIG_TABLE_NAME } from '@services/database/config';\nimport { makeSingleton } from '@singletons';\nimport { CoreConstants } from '../constants';\nimport { CoreEvents } from '@singletons/events';\nimport { asyncInstance } from '../utils/async-instance';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreBrowser } from '@singletons/browser';\nimport * as i0 from \"@angular/core\";\n/**\n * Factory to provide access to dynamic and permanent config and settings.\n * It should not be abused into a temporary storage.\n */\nexport class CoreConfigProvider {\n  constructor() {\n    this.table = asyncInstance();\n    this.isReady = new CorePromisedValue();\n  }\n  /**\n   * Wait until configuration is ready for use.\n   *\n   * @returns Ready promise.\n   */\n  ready() {\n    return this.isReady;\n  }\n  /**\n   * Initialize.\n   */\n  initialize() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.loadDevelopmentConfig();\n      _this.isReady.resolve();\n    })();\n  }\n  /**\n   * Initialize database.\n   */\n  initializeDatabase() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield CoreApp.createTablesFromSchema(APP_SCHEMA);\n      } catch (e) {\n        // Ignore errors.\n      }\n      const table = new CoreDatabaseTableProxy({\n        cachingStrategy: CoreDatabaseCachingStrategy.Eager\n      }, CoreApp.getDB(), CONFIG_TABLE_NAME, ['name']);\n      yield table.initialize();\n      _this2.table.setInstance(table);\n    })();\n  }\n  /**\n   * Deletes an app setting.\n   *\n   * @param name The config name.\n   * @returns Promise resolved when done.\n   */\n  delete(name) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield _this3.table.deleteByPrimaryKey({\n        name\n      });\n    })();\n  }\n  /**\n   * Get an app setting.\n   *\n   * @param name The config name.\n   * @param defaultValue Default value to use if the entry is not found.\n   * @returns Resolves upon success along with the config data. Reject on failure.\n   */\n  get(name, defaultValue) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const record = yield _this4.table.getOneByPrimaryKey({\n          name\n        });\n        return record.value;\n      } catch (error) {\n        if (defaultValue !== undefined) {\n          return defaultValue;\n        }\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Get an app setting directly from the database, without using any optimizations..\n   *\n   * @param name The config name.\n   * @returns Resolves upon success along with the config data. Reject on failure.\n   */\n  getFromDB(name) {\n    return _asyncToGenerator(function* () {\n      const db = CoreApp.getDB();\n      const record = yield db.getRecord(CONFIG_TABLE_NAME, {\n        name\n      });\n      return record.value;\n    })();\n  }\n  /**\n   * Check whether the given app setting exists.\n   *\n   * @param name The config name.\n   * @returns Whether the app setting exists.\n   */\n  has(name) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this5.table.getOneByPrimaryKey({\n          name\n        });\n        return true;\n      } catch (error) {\n        return false;\n      }\n    })();\n  }\n  /**\n   * Set an app setting.\n   *\n   * @param name The config name.\n   * @param value The config value. Can only store number or strings.\n   * @returns Promise resolved when done.\n   */\n  set(name, value) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      yield _this6.table.insert({\n        name,\n        value\n      });\n    })();\n  }\n  /**\n   * Update config with the given values.\n   *\n   * @param config Config updates.\n   * @param options Patching options.\n   *  - reset: Whether to reset environment before applying the patch.\n   *  - patchDefault: Whether to patch default values as well.\n   */\n  patchEnvironment(config, options = {}) {\n    var _this$defaultEnvironm;\n    this.defaultEnvironment = (_this$defaultEnvironm = this.defaultEnvironment) !== null && _this$defaultEnvironm !== void 0 ? _this$defaultEnvironm : _objectSpread({}, CoreConstants.CONFIG);\n    if (options.reset) {\n      this.resetEnvironmentSilently();\n    }\n    if (options.patchDefault) {\n      Object.assign(this.defaultEnvironment, config);\n    }\n    Object.assign(CoreConstants.CONFIG, config);\n    CoreEvents.trigger(CoreConfigProvider.ENVIRONMENT_UPDATED, CoreConstants.CONFIG);\n  }\n  /**\n   * Reset config values to its original state.\n   */\n  resetEnvironment() {\n    if (!this.defaultEnvironment) {\n      // The environment config hasn't been modified; there's not need to reset.\n      return;\n    }\n    this.resetEnvironmentSilently();\n    CoreEvents.trigger(CoreConfigProvider.ENVIRONMENT_UPDATED, CoreConstants.CONFIG);\n  }\n  /**\n   * Load development config overrides.\n   */\n  loadDevelopmentConfig() {\n    var _CoreBrowser$getDevel;\n    if (!CoreConstants.enableDevTools() || !CoreBrowser.hasDevelopmentSetting('Config')) {\n      return;\n    }\n    this.patchEnvironment(JSON.parse((_CoreBrowser$getDevel = CoreBrowser.getDevelopmentSetting('Config')) !== null && _CoreBrowser$getDevel !== void 0 ? _CoreBrowser$getDevel : '{}'), {\n      patchDefault: true\n    });\n  }\n  /**\n   * Reset config values to its original state without emitting any events.\n   */\n  resetEnvironmentSilently() {\n    if (!this.defaultEnvironment) {\n      // The environment config hasn't been modified; there's not need to reset.\n      return;\n    }\n    Object.keys(CoreConstants.CONFIG).forEach(key => delete CoreConstants.CONFIG[key]);\n    Object.assign(CoreConstants.CONFIG, this.defaultEnvironment);\n  }\n}\n_class = CoreConfigProvider;\n_class.ENVIRONMENT_UPDATED = 'environment_updated';\n_class.ɵfac = function CoreConfigProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreConfig = makeSingleton(CoreConfigProvider);","map":{"version":3,"names":["CoreDatabaseCachingStrategy","CoreDatabaseTableProxy","CoreApp","APP_SCHEMA","CONFIG_TABLE_NAME","makeSingleton","CoreConstants","CoreEvents","asyncInstance","CorePromisedValue","CoreBrowser","CoreConfigProvider","constructor","table","isReady","ready","initialize","_this","_asyncToGenerator","loadDevelopmentConfig","resolve","initializeDatabase","_this2","createTablesFromSchema","e","cachingStrategy","Eager","getDB","setInstance","delete","name","_this3","deleteByPrimaryKey","get","defaultValue","_this4","record","getOneByPrimaryKey","value","error","undefined","getFromDB","db","getRecord","has","_this5","set","_this6","insert","patchEnvironment","config","options","_this$defaultEnvironm","defaultEnvironment","_objectSpread","CONFIG","reset","resetEnvironmentSilently","patchDefault","Object","assign","trigger","ENVIRONMENT_UPDATED","resetEnvironment","_CoreBrowser$getDevel","enableDevTools","hasDevelopmentSetting","JSON","parse","getDevelopmentSetting","keys","forEach","key","_class","factory","ɵfac","providedIn","CoreConfig"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/config.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { EnvironmentConfig } from '@/types/config';\nimport { Injectable } from '@angular/core';\nimport { CoreDatabaseCachingStrategy, CoreDatabaseTableProxy } from '@classes/database/database-table-proxy';\nimport { CoreApp } from '@services/app';\nimport { APP_SCHEMA, ConfigDBEntry, CONFIG_TABLE_NAME } from '@services/database/config';\nimport { makeSingleton } from '@singletons';\nimport { CoreConstants } from '../constants';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreDatabaseTable } from '@classes/database/database-table';\nimport { asyncInstance } from '../utils/async-instance';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreBrowser } from '@singletons/browser';\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [CoreConfigProvider.ENVIRONMENT_UPDATED]: EnvironmentConfig;\n    }\n\n}\n\n/**\n * Factory to provide access to dynamic and permanent config and settings.\n * It should not be abused into a temporary storage.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreConfigProvider {\n\n    static readonly ENVIRONMENT_UPDATED = 'environment_updated';\n\n    protected table = asyncInstance<CoreDatabaseTable<ConfigDBEntry, 'name'>>();\n    protected defaultEnvironment?: EnvironmentConfig;\n    protected isReady = new CorePromisedValue<void>();\n\n    /**\n     * Wait until configuration is ready for use.\n     *\n     * @returns Ready promise.\n     */\n    ready(): Promise<void> {\n        return this.isReady;\n    }\n\n    /**\n     * Initialize.\n     */\n    async initialize(): Promise<void> {\n        this.loadDevelopmentConfig();\n\n        this.isReady.resolve();\n    }\n\n    /**\n     * Initialize database.\n     */\n    async initializeDatabase(): Promise<void> {\n        try {\n            await CoreApp.createTablesFromSchema(APP_SCHEMA);\n        } catch (e) {\n            // Ignore errors.\n        }\n\n        const table = new CoreDatabaseTableProxy<ConfigDBEntry, 'name'>(\n            { cachingStrategy: CoreDatabaseCachingStrategy.Eager },\n            CoreApp.getDB(),\n            CONFIG_TABLE_NAME,\n            ['name'],\n        );\n\n        await table.initialize();\n\n        this.table.setInstance(table);\n    }\n\n    /**\n     * Deletes an app setting.\n     *\n     * @param name The config name.\n     * @returns Promise resolved when done.\n     */\n    async delete(name: string): Promise<void> {\n        await this.table.deleteByPrimaryKey({ name });\n    }\n\n    /**\n     * Get an app setting.\n     *\n     * @param name The config name.\n     * @param defaultValue Default value to use if the entry is not found.\n     * @returns Resolves upon success along with the config data. Reject on failure.\n     */\n    async get<T>(name: string, defaultValue?: T): Promise<T> {\n        try {\n            const record = await this.table.getOneByPrimaryKey({ name });\n\n            return record.value;\n        } catch (error) {\n            if (defaultValue !== undefined) {\n                return defaultValue;\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     * Get an app setting directly from the database, without using any optimizations..\n     *\n     * @param name The config name.\n     * @returns Resolves upon success along with the config data. Reject on failure.\n     */\n    async getFromDB<T>(name: string): Promise<T> {\n        const db = CoreApp.getDB();\n        const record = await db.getRecord<ConfigDBEntry>(CONFIG_TABLE_NAME, { name });\n\n        return record.value;\n    }\n\n    /**\n     * Check whether the given app setting exists.\n     *\n     * @param name The config name.\n     * @returns Whether the app setting exists.\n     */\n    async has(name: string): Promise<boolean> {\n        try {\n            await this.table.getOneByPrimaryKey({ name });\n\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * Set an app setting.\n     *\n     * @param name The config name.\n     * @param value The config value. Can only store number or strings.\n     * @returns Promise resolved when done.\n     */\n    async set(name: string, value: number | string): Promise<void> {\n        await this.table.insert({ name, value });\n    }\n\n    /**\n     * Update config with the given values.\n     *\n     * @param config Config updates.\n     * @param options Patching options.\n     *  - reset: Whether to reset environment before applying the patch.\n     *  - patchDefault: Whether to patch default values as well.\n     */\n    patchEnvironment(config: Partial<EnvironmentConfig>, options: Partial<{ reset: boolean; patchDefault: boolean }> = {}): void {\n        this.defaultEnvironment = this.defaultEnvironment ?? { ...CoreConstants.CONFIG };\n\n        if (options.reset) {\n            this.resetEnvironmentSilently();\n        }\n\n        if (options.patchDefault) {\n            Object.assign(this.defaultEnvironment, config);\n        }\n\n        Object.assign(CoreConstants.CONFIG, config);\n        CoreEvents.trigger(CoreConfigProvider.ENVIRONMENT_UPDATED, CoreConstants.CONFIG);\n    }\n\n    /**\n     * Reset config values to its original state.\n     */\n    resetEnvironment(): void {\n        if (!this.defaultEnvironment) {\n            // The environment config hasn't been modified; there's not need to reset.\n\n            return;\n        }\n\n        this.resetEnvironmentSilently();\n        CoreEvents.trigger(CoreConfigProvider.ENVIRONMENT_UPDATED, CoreConstants.CONFIG);\n    }\n\n    /**\n     * Load development config overrides.\n     */\n    protected loadDevelopmentConfig(): void {\n        if (!CoreConstants.enableDevTools() || !CoreBrowser.hasDevelopmentSetting('Config')) {\n            return;\n        }\n\n        this.patchEnvironment(JSON.parse(CoreBrowser.getDevelopmentSetting('Config') ?? '{}'), { patchDefault: true });\n    }\n\n    /**\n     * Reset config values to its original state without emitting any events.\n     */\n    protected resetEnvironmentSilently(): void {\n        if (!this.defaultEnvironment) {\n            // The environment config hasn't been modified; there's not need to reset.\n\n            return;\n        }\n\n        Object.keys(CoreConstants.CONFIG).forEach(key => delete CoreConstants.CONFIG[key]);\n        Object.assign(CoreConstants.CONFIG, this.defaultEnvironment);\n    }\n\n}\n\nexport const CoreConfig = makeSingleton(CoreConfigProvider);\n"],"mappings":";;;AAgBA,SAASA,2BAA2B,EAAEC,sBAAsB,QAAQ,wCAAwC;AAC5G,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,UAAU,EAAiBC,iBAAiB,QAAQ,2BAA2B;AACxF,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,WAAW,QAAQ,qBAAqB;;AAejD;;;;AAKA,OAAM,MAAOC,kBAAkB;EAD/BC,YAAA;IAKc,KAAAC,KAAK,GAAGL,aAAa,EAA4C;IAEjE,KAAAM,OAAO,GAAG,IAAIL,iBAAiB,EAAQ;;EAEjD;;;;;EAKAM,KAAKA,CAAA;IACD,OAAO,IAAI,CAACD,OAAO;EACvB;EAEA;;;EAGME,UAAUA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACZD,KAAI,CAACE,qBAAqB,EAAE;MAE5BF,KAAI,CAACH,OAAO,CAACM,OAAO,EAAE;IAAC;EAC3B;EAEA;;;EAGMC,kBAAkBA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAJ,iBAAA;MACpB,IAAI;QACA,MAAMhB,OAAO,CAACqB,sBAAsB,CAACpB,UAAU,CAAC;OACnD,CAAC,OAAOqB,CAAC,EAAE;QACR;MAAA;MAGJ,MAAMX,KAAK,GAAG,IAAIZ,sBAAsB,CACpC;QAAEwB,eAAe,EAAEzB,2BAA2B,CAAC0B;MAAK,CAAE,EACtDxB,OAAO,CAACyB,KAAK,EAAE,EACfvB,iBAAiB,EACjB,CAAC,MAAM,CAAC,CACX;MAED,MAAMS,KAAK,CAACG,UAAU,EAAE;MAExBM,MAAI,CAACT,KAAK,CAACe,WAAW,CAACf,KAAK,CAAC;IAAC;EAClC;EAEA;;;;;;EAMMgB,MAAMA,CAACC,IAAY;IAAA,IAAAC,MAAA;IAAA,OAAAb,iBAAA;MACrB,MAAMa,MAAI,CAAClB,KAAK,CAACmB,kBAAkB,CAAC;QAAEF;MAAI,CAAE,CAAC;IAAC;EAClD;EAEA;;;;;;;EAOMG,GAAGA,CAAIH,IAAY,EAAEI,YAAgB;IAAA,IAAAC,MAAA;IAAA,OAAAjB,iBAAA;MACvC,IAAI;QACA,MAAMkB,MAAM,SAASD,MAAI,CAACtB,KAAK,CAACwB,kBAAkB,CAAC;UAAEP;QAAI,CAAE,CAAC;QAE5D,OAAOM,MAAM,CAACE,KAAK;OACtB,CAAC,OAAOC,KAAK,EAAE;QACZ,IAAIL,YAAY,KAAKM,SAAS,EAAE;UAC5B,OAAON,YAAY;;QAGvB,MAAMK,KAAK;;IACd;EACL;EAEA;;;;;;EAMME,SAASA,CAAIX,IAAY;IAAA,OAAAZ,iBAAA;MAC3B,MAAMwB,EAAE,GAAGxC,OAAO,CAACyB,KAAK,EAAE;MAC1B,MAAMS,MAAM,SAASM,EAAE,CAACC,SAAS,CAAgBvC,iBAAiB,EAAE;QAAE0B;MAAI,CAAE,CAAC;MAE7E,OAAOM,MAAM,CAACE,KAAK;IAAC;EACxB;EAEA;;;;;;EAMMM,GAAGA,CAACd,IAAY;IAAA,IAAAe,MAAA;IAAA,OAAA3B,iBAAA;MAClB,IAAI;QACA,MAAM2B,MAAI,CAAChC,KAAK,CAACwB,kBAAkB,CAAC;UAAEP;QAAI,CAAE,CAAC;QAE7C,OAAO,IAAI;OACd,CAAC,OAAOS,KAAK,EAAE;QACZ,OAAO,KAAK;;IACf;EACL;EAEA;;;;;;;EAOMO,GAAGA,CAAChB,IAAY,EAAEQ,KAAsB;IAAA,IAAAS,MAAA;IAAA,OAAA7B,iBAAA;MAC1C,MAAM6B,MAAI,CAAClC,KAAK,CAACmC,MAAM,CAAC;QAAElB,IAAI;QAAEQ;MAAK,CAAE,CAAC;IAAC;EAC7C;EAEA;;;;;;;;EAQAW,gBAAgBA,CAACC,MAAkC,EAAEC,OAAA,GAA8D,EAAE;IAAA,IAAAC,qBAAA;IACjH,IAAI,CAACC,kBAAkB,IAAAD,qBAAA,GAAG,IAAI,CAACC,kBAAkB,cAAAD,qBAAA,cAAAA,qBAAA,GAAAE,aAAA,KAAShD,aAAa,CAACiD,MAAM,CAAE;IAEhF,IAAIJ,OAAO,CAACK,KAAK,EAAE;MACf,IAAI,CAACC,wBAAwB,EAAE;;IAGnC,IAAIN,OAAO,CAACO,YAAY,EAAE;MACtBC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACP,kBAAkB,EAAEH,MAAM,CAAC;;IAGlDS,MAAM,CAACC,MAAM,CAACtD,aAAa,CAACiD,MAAM,EAAEL,MAAM,CAAC;IAC3C3C,UAAU,CAACsD,OAAO,CAAClD,kBAAkB,CAACmD,mBAAmB,EAAExD,aAAa,CAACiD,MAAM,CAAC;EACpF;EAEA;;;EAGAQ,gBAAgBA,CAAA;IACZ,IAAI,CAAC,IAAI,CAACV,kBAAkB,EAAE;MAC1B;MAEA;;IAGJ,IAAI,CAACI,wBAAwB,EAAE;IAC/BlD,UAAU,CAACsD,OAAO,CAAClD,kBAAkB,CAACmD,mBAAmB,EAAExD,aAAa,CAACiD,MAAM,CAAC;EACpF;EAEA;;;EAGUpC,qBAAqBA,CAAA;IAAA,IAAA6C,qBAAA;IAC3B,IAAI,CAAC1D,aAAa,CAAC2D,cAAc,EAAE,IAAI,CAACvD,WAAW,CAACwD,qBAAqB,CAAC,QAAQ,CAAC,EAAE;MACjF;;IAGJ,IAAI,CAACjB,gBAAgB,CAACkB,IAAI,CAACC,KAAK,EAAAJ,qBAAA,GAACtD,WAAW,CAAC2D,qBAAqB,CAAC,QAAQ,CAAC,cAAAL,qBAAA,cAAAA,qBAAA,GAAI,IAAI,CAAC,EAAE;MAAEN,YAAY,EAAE;IAAI,CAAE,CAAC;EAClH;EAEA;;;EAGUD,wBAAwBA,CAAA;IAC9B,IAAI,CAAC,IAAI,CAACJ,kBAAkB,EAAE;MAC1B;MAEA;;IAGJM,MAAM,CAACW,IAAI,CAAChE,aAAa,CAACiD,MAAM,CAAC,CAACgB,OAAO,CAACC,GAAG,IAAI,OAAOlE,aAAa,CAACiD,MAAM,CAACiB,GAAG,CAAC,CAAC;IAClFb,MAAM,CAACC,MAAM,CAACtD,aAAa,CAACiD,MAAM,EAAE,IAAI,CAACF,kBAAkB,CAAC;EAChE;;SAnLS1C,kBAAkB;AAEX8D,MAAA,CAAAX,mBAAmB,GAAG,qBAAqB;;mBAFlDnD,MAAkB;AAAA;;SAAlBA,MAAkB;EAAA+D,OAAA,EAAlB/D,MAAkB,CAAAgE,IAAA;EAAAC,UAAA,EADL;AAAM;AAwLhC,OAAO,MAAMC,UAAU,GAAGxE,aAAa,CAACM,kBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}