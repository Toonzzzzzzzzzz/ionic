{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { AddonNotifications, AddonNotificationsGetReadType, AddonNotificationsProvider } from '@addons/notifications/services/notifications';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\n/**\n * Provides a list of notifications.\n */\nexport class AddonNotificationsNotificationsSource extends CoreRoutedItemsManagerSource {\n  constructor() {\n    super(...arguments);\n    this.totals = {};\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemPath(notification) {\n    return notification.id.toString();\n  }\n  /**\n   * @inheritdoc\n   */\n  reset() {\n    this.totals = {};\n    super.reset();\n  }\n  /**\n   * @inheritdoc\n   */\n  loadPageItems(page) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const results = yield _this.loadNotifications(AddonNotificationsGetReadType.BOTH, page * _this.getPageLength());\n      return {\n        items: results.notifications,\n        hasMoreItems: results.hasMoreNotifications\n      };\n    })();\n  }\n  /**\n   * Load notifications of the given type.\n   *\n   * @param type Type.\n   * @param offset Offset.\n   * @param limit Limit.\n   * @returns Notifications and whether there are any more.\n   */\n  loadNotifications(type, offset, limit) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var _limit, _this2$totals$type;\n      limit = (_limit = limit) !== null && _limit !== void 0 ? _limit : _this2.getPageLength();\n      if (type in _this2.totals && _this2.totals[type] <= offset) {\n        return {\n          notifications: [],\n          hasMoreNotifications: false\n        };\n      }\n      const notifications = yield AddonNotifications.getNotificationsWithStatus(type, {\n        offset,\n        limit\n      });\n      if (notifications.length < limit) {\n        _this2.totals[type] = offset + notifications.length;\n      }\n      return {\n        notifications,\n        hasMoreNotifications: ((_this2$totals$type = _this2.totals[type]) !== null && _this2$totals$type !== void 0 ? _this2$totals$type : Number.MAX_VALUE) > offset + limit\n      };\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  setItems(notifications, hasMoreItems) {\n    const sortedNotifications = notifications.slice(0);\n    sortedNotifications.sort((a, b) => a.timecreated < b.timecreated ? 1 : -1);\n    super.setItems(sortedNotifications, hasMoreItems);\n  }\n  /**\n   * @inheritdoc\n   */\n  getPageLength() {\n    return AddonNotificationsProvider.LIST_LIMIT;\n  }\n}","map":{"version":3,"names":["AddonNotifications","AddonNotificationsGetReadType","AddonNotificationsProvider","CoreRoutedItemsManagerSource","AddonNotificationsNotificationsSource","constructor","totals","getItemPath","notification","id","toString","reset","loadPageItems","page","_this","_asyncToGenerator","results","loadNotifications","BOTH","getPageLength","items","notifications","hasMoreItems","hasMoreNotifications","type","offset","limit","_this2","_limit","_this2$totals$type","getNotificationsWithStatus","length","Number","MAX_VALUE","setItems","sortedNotifications","slice","sort","a","b","timecreated","LIST_LIMIT"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/notifications/classes/notifications-source.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    AddonNotifications,\n    AddonNotificationsGetReadType,\n    AddonNotificationsNotificationMessageFormatted,\n    AddonNotificationsProvider,\n} from '@addons/notifications/services/notifications';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\n\n/**\n * Provides a list of notifications.\n */\nexport class AddonNotificationsNotificationsSource\n    extends CoreRoutedItemsManagerSource<AddonNotificationsNotificationMessageFormatted> {\n\n    protected totals: Record<string, number> = {};\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(notification: AddonNotificationsNotificationMessageFormatted): string {\n        return notification.id.toString();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    reset(): void {\n        this.totals = {};\n\n        super.reset();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(page: number): Promise<{\n        items: AddonNotificationsNotificationMessageFormatted[];\n        hasMoreItems: boolean;\n    }> {\n        const results = await this.loadNotifications(AddonNotificationsGetReadType.BOTH, page * this.getPageLength());\n\n        return {\n            items: results.notifications,\n            hasMoreItems: results.hasMoreNotifications,\n        };\n    }\n\n    /**\n     * Load notifications of the given type.\n     *\n     * @param type Type.\n     * @param offset Offset.\n     * @param limit Limit.\n     * @returns Notifications and whether there are any more.\n     */\n    protected async loadNotifications(type: AddonNotificationsGetReadType, offset: number, limit?: number): Promise<{\n        notifications: AddonNotificationsNotificationMessageFormatted[];\n        hasMoreNotifications: boolean;\n    }> {\n        limit = limit ?? this.getPageLength();\n\n        if (type in this.totals && this.totals[type] <= offset) {\n            return {\n                notifications: [],\n                hasMoreNotifications: false,\n            };\n        }\n\n        const notifications = await AddonNotifications.getNotificationsWithStatus(type, { offset, limit });\n\n        if (notifications.length < limit) {\n            this.totals[type] = offset + notifications.length;\n        }\n\n        return {\n            notifications,\n            hasMoreNotifications: (this.totals[type] ?? Number.MAX_VALUE) > offset + limit,\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected setItems(notifications: AddonNotificationsNotificationMessageFormatted[], hasMoreItems: boolean): void {\n        const sortedNotifications = notifications.slice(0);\n\n        sortedNotifications.sort((a, b) => a.timecreated < b.timecreated ? 1 : -1);\n\n        super.setItems(sortedNotifications, hasMoreItems);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getPageLength(): number {\n        return AddonNotificationsProvider.LIST_LIMIT;\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACIA,kBAAkB,EAClBC,6BAA6B,EAE7BC,0BAA0B,QACvB,8CAA8C;AACrD,SAASC,4BAA4B,QAAQ,uDAAuD;AAEpG;;;AAGA,OAAM,MAAOC,qCACT,SAAQD,4BAA4E;EADxFE,YAAA;;IAGc,KAAAC,MAAM,GAA2B,EAAE;EAoFjD;EAlFI;;;EAGAC,WAAWA,CAACC,YAA4D;IACpE,OAAOA,YAAY,CAACC,EAAE,CAACC,QAAQ,EAAE;EACrC;EAEA;;;EAGAC,KAAKA,CAAA;IACD,IAAI,CAACL,MAAM,GAAG,EAAE;IAEhB,KAAK,CAACK,KAAK,EAAE;EACjB;EAEA;;;EAGgBC,aAAaA,CAACC,IAAY;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAItC,MAAMC,OAAO,SAASF,KAAI,CAACG,iBAAiB,CAAChB,6BAA6B,CAACiB,IAAI,EAAEL,IAAI,GAAGC,KAAI,CAACK,aAAa,EAAE,CAAC;MAE7G,OAAO;QACHC,KAAK,EAAEJ,OAAO,CAACK,aAAa;QAC5BC,YAAY,EAAEN,OAAO,CAACO;OACzB;IAAC;EACN;EAEA;;;;;;;;EAQgBN,iBAAiBA,CAACO,IAAmC,EAAEC,MAAc,EAAEC,KAAc;IAAA,IAAAC,MAAA;IAAA,OAAAZ,iBAAA;MAAA,IAAAa,MAAA,EAAAC,kBAAA;MAIjGH,KAAK,IAAAE,MAAA,GAAGF,KAAK,cAAAE,MAAA,cAAAA,MAAA,GAAID,MAAI,CAACR,aAAa,EAAE;MAErC,IAAIK,IAAI,IAAIG,MAAI,CAACrB,MAAM,IAAIqB,MAAI,CAACrB,MAAM,CAACkB,IAAI,CAAC,IAAIC,MAAM,EAAE;QACpD,OAAO;UACHJ,aAAa,EAAE,EAAE;UACjBE,oBAAoB,EAAE;SACzB;;MAGL,MAAMF,aAAa,SAASrB,kBAAkB,CAAC8B,0BAA0B,CAACN,IAAI,EAAE;QAAEC,MAAM;QAAEC;MAAK,CAAE,CAAC;MAElG,IAAIL,aAAa,CAACU,MAAM,GAAGL,KAAK,EAAE;QAC9BC,MAAI,CAACrB,MAAM,CAACkB,IAAI,CAAC,GAAGC,MAAM,GAAGJ,aAAa,CAACU,MAAM;;MAGrD,OAAO;QACHV,aAAa;QACbE,oBAAoB,EAAE,EAAAM,kBAAA,GAACF,MAAI,CAACrB,MAAM,CAACkB,IAAI,CAAC,cAAAK,kBAAA,cAAAA,kBAAA,GAAIG,MAAM,CAACC,SAAS,IAAIR,MAAM,GAAGC;OAC5E;IAAC;EACN;EAEA;;;EAGUQ,QAAQA,CAACb,aAA+D,EAAEC,YAAqB;IACrG,MAAMa,mBAAmB,GAAGd,aAAa,CAACe,KAAK,CAAC,CAAC,CAAC;IAElDD,mBAAmB,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,WAAW,GAAGD,CAAC,CAACC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAE1E,KAAK,CAACN,QAAQ,CAACC,mBAAmB,EAAEb,YAAY,CAAC;EACrD;EAEA;;;EAGUH,aAAaA,CAAA;IACnB,OAAOjB,0BAA0B,CAACuC,UAAU;EAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}