{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\n/**\n * Zip plugin wrapper.\n */\nexport class Zip {\n  /**\n   * Extracts files from a ZIP archive\n   *\n   * @param source Source ZIP file\n   * @param destination Destination folder\n   * @param onProgress Callback to be called on progress update\n   * @returns 0 is success, -1 is error\n   */\n  unzip(source, destination, onProgress) {\n    return new Promise(resolve => window.zip.unzip(source, destination, result => resolve(result), onProgress));\n  }\n}\n_class = Zip;\n_class.ɵfac = function Zip_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Zip","unzip","source","destination","onProgress","Promise","resolve","window","zip","result","factory","ɵfac","providedIn"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/native/plugins/zip.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\n/**\n * Zip plugin wrapper.\n */\n@Injectable({ providedIn: 'root' })\nexport class Zip {\n\n    /**\n     * Extracts files from a ZIP archive\n     *\n     * @param source Source ZIP file\n     * @param destination Destination folder\n     * @param onProgress Callback to be called on progress update\n     * @returns 0 is success, -1 is error\n     */\n    unzip(source: string, destination: string, onProgress?: (ev: {loaded: number; total: number}) => void): Promise<number> {\n        return new Promise(resolve => window.zip.unzip(source, destination, (result: number) => resolve(result), onProgress));\n    }\n\n}\n"],"mappings":";;AAgBA;;;AAIA,OAAM,MAAOA,GAAG;EAEZ;;;;;;;;EAQAC,KAAKA,CAACC,MAAc,EAAEC,WAAmB,EAAEC,UAA0D;IACjG,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIC,MAAM,CAACC,GAAG,CAACP,KAAK,CAACC,MAAM,EAAEC,WAAW,EAAGM,MAAc,IAAKH,OAAO,CAACG,MAAM,CAAC,EAAEL,UAAU,CAAC,CAAC;EACzH;;SAZSJ,GAAG;;mBAAHA,MAAG;AAAA;;SAAHA,MAAG;EAAAU,OAAA,EAAHV,MAAG,CAAAW,IAAA;EAAAC,UAAA,EADU;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}