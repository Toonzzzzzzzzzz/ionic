{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Cron handler to log out sites when does not meet the app requirements.\n */\nexport class CoreLoginCronHandlerService {\n  constructor() {\n    this.name = 'CoreLoginCronHandler';\n  }\n  /**\n   * @inheritdoc\n   */\n  execute(siteId) {\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      if (!siteId) {\n        return;\n      }\n      // Check logged in site minimun required version.\n      // Do not check twice in the same 10 minutes.\n      const site = yield CoreSites.getSite(siteId);\n      const config = yield CoreUtils.ignoreErrors(site.getPublicConfig({\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */\n      }));\n\n      CoreUtils.ignoreErrors(CoreSites.checkApplication(config));\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  isSync() {\n    // Defined to true to be checked on sync site.\n    return true;\n  }\n}\n_class = CoreLoginCronHandlerService;\n_class.ɵfac = function CoreLoginCronHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreLoginCronHandler = makeSingleton(CoreLoginCronHandlerService);","map":{"version":3,"names":["CoreSites","CoreUtils","makeSingleton","CoreLoginCronHandlerService","constructor","name","execute","siteId","_asyncToGenerator","getCurrentSiteId","site","getSite","config","ignoreErrors","getPublicConfig","readingStrategy","checkApplication","isSync","factory","ɵfac","providedIn","CoreLoginCronHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/login/services/handlers/cron.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCronHandler } from '@services/cron';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Cron handler to log out sites when does not meet the app requirements.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreLoginCronHandlerService implements CoreCronHandler {\n\n    name = 'CoreLoginCronHandler';\n\n    /**\n     * @inheritdoc\n     */\n    async execute(siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n        if (!siteId) {\n            return;\n        }\n\n        // Check logged in site minimun required version.\n        // Do not check twice in the same 10 minutes.\n        const site = await CoreSites.getSite(siteId);\n\n        const config = await CoreUtils.ignoreErrors(site.getPublicConfig({\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n        }));\n\n        CoreUtils.ignoreErrors(CoreSites.checkApplication(config));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isSync(): boolean {\n        // Defined to true to be checked on sync site.\n        return true;\n    }\n\n}\n\nexport const CoreLoginCronHandler = makeSingleton(CoreLoginCronHandlerService);\n"],"mappings":";;AAgBA,SAASA,SAAS,QAAkC,iBAAiB;AACrE,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,2BAA2B;EADxCC,YAAA;IAGI,KAAAC,IAAI,GAAG,sBAAsB;;EAE7B;;;EAGMC,OAAOA,CAACC,MAAe;IAAA,OAAAC,iBAAA;MACzBD,MAAM,GAAGA,MAAM,IAAIP,SAAS,CAACS,gBAAgB,EAAE;MAC/C,IAAI,CAACF,MAAM,EAAE;QACT;;MAGJ;MACA;MACA,MAAMG,IAAI,SAASV,SAAS,CAACW,OAAO,CAACJ,MAAM,CAAC;MAE5C,MAAMK,MAAM,SAASX,SAAS,CAACY,YAAY,CAACH,IAAI,CAACI,eAAe,CAAC;QAC7DC,eAAe;OAClB,CAAC,CAAC;;MAEHd,SAAS,CAACY,YAAY,CAACb,SAAS,CAACgB,gBAAgB,CAACJ,MAAM,CAAC,CAAC;IAAC;EAC/D;EAEA;;;EAGAK,MAAMA,CAAA;IACF;IACA,OAAO,IAAI;EACf;;SA9BSd,2BAA2B;;mBAA3BA,MAA2B;AAAA;;SAA3BA,MAA2B;EAAAe,OAAA,EAA3Bf,MAA2B,CAAAgB,IAAA;EAAAC,UAAA,EADd;AAAM;AAmChC,OAAO,MAAMC,oBAAoB,GAAGnB,aAAa,CAACC,2BAA2B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}