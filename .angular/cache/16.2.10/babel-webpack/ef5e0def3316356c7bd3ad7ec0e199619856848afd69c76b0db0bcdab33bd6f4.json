{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// Based on http://roblouie.com/article/198/using-gestures-in-the-ionic-2-beta/\nimport { EventEmitter } from '@angular/core';\nimport { CoreLogger } from '@singletons/logger';\nimport * as i0 from \"@angular/core\";\n/**\n * Directive to suppress all events on an element. This is useful to prevent keyboard closing when clicking this element.\n *\n * This directive is based on some code posted by johnthackstonanderson in\n * https://github.com/ionic-team/ionic-plugin-keyboard/issues/81\n *\n * @description\n *\n * If nothing is supplied or string 'all', then all the default events will be suppressed. This is the recommended usage.\n *\n * If you only want to suppress a single event just pass the name of the event. If you want to suppress a set of events,\n * pass an array with the names of the events to suppress.\n *\n * Usage of onClick instead of click is mandatory to make this directive work.\n *\n * Example usage:\n *\n * <ion-button [core-suppress-events] (onClick)=\"toggle($event)\">\n */\nexport class CoreSupressEventsDirective {\n  constructor(el) {\n    this.onClick = new EventEmitter();\n    this.element = el.nativeElement;\n  }\n  /**\n   * Initialize event listeners.\n   */\n  ngOnInit() {\n    if (!this.onClick.observed) {\n      CoreLogger.getInstance('CoreSupressEventsDirective').error('No onClick output was defined causing this directive to fail', this.element);\n      return;\n    }\n    let events;\n    if (this.suppressEvents == 'all' || this.suppressEvents === undefined || this.suppressEvents === null) {\n      // Suppress all events.\n      events = ['click', 'mousedown', 'touchdown', 'touchmove', 'touchstart'];\n    } else if (typeof this.suppressEvents == 'string') {\n      // It's a string, just suppress this event.\n      events = [this.suppressEvents];\n    } else if (Array.isArray(this.suppressEvents)) {\n      // Array supplied.\n      events = this.suppressEvents;\n    } else {\n      events = [];\n    }\n    // Suppress the events.\n    for (const evName of events) {\n      this.element.addEventListener(evName, event => this.stopBubble(event));\n    }\n    // Now listen to \"click\" events.\n    this.element.addEventListener('mouseup', event => {\n      this.onClick.emit(event);\n    });\n    this.element.addEventListener('touchend', event => {\n      this.stopBubble(event);\n      this.onClick.emit(event);\n    });\n  }\n  /**\n   * Stop event default and propagation.\n   *\n   * @param event Event.\n   */\n  stopBubble(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n_class = CoreSupressEventsDirective;\n_class.ɵfac = function CoreSupressEventsDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"\", \"core-suppress-events\", \"\"]],\n  inputs: {\n    suppressEvents: [\"core-suppress-events\", \"suppressEvents\"]\n  },\n  outputs: {\n    onClick: \"onClick\"\n  }\n});","map":{"version":3,"names":["EventEmitter","CoreLogger","CoreSupressEventsDirective","constructor","el","onClick","element","nativeElement","ngOnInit","observed","getInstance","error","events","suppressEvents","undefined","Array","isArray","evName","addEventListener","event","stopBubble","emit","preventDefault","stopPropagation","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs","outputs"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/directives/supress-events.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Based on http://roblouie.com/article/198/using-gestures-in-the-ionic-2-beta/\n\nimport { Directive, ElementRef, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { CoreLogger } from '@singletons/logger';\n\n/**\n * Directive to suppress all events on an element. This is useful to prevent keyboard closing when clicking this element.\n *\n * This directive is based on some code posted by johnthackstonanderson in\n * https://github.com/ionic-team/ionic-plugin-keyboard/issues/81\n *\n * @description\n *\n * If nothing is supplied or string 'all', then all the default events will be suppressed. This is the recommended usage.\n *\n * If you only want to suppress a single event just pass the name of the event. If you want to suppress a set of events,\n * pass an array with the names of the events to suppress.\n *\n * Usage of onClick instead of click is mandatory to make this directive work.\n *\n * Example usage:\n *\n * <ion-button [core-suppress-events] (onClick)=\"toggle($event)\">\n */\n@Directive({\n    selector: '[core-suppress-events]',\n})\nexport class CoreSupressEventsDirective implements OnInit {\n\n    @Input('core-suppress-events') suppressEvents?: string | string[];\n    @Output() onClick = new EventEmitter();\n\n    protected element: HTMLElement;\n\n    constructor(el: ElementRef) {\n        this.element = el.nativeElement;\n    }\n\n    /**\n     * Initialize event listeners.\n     */\n    ngOnInit(): void {\n        if (!this.onClick.observed) {\n            CoreLogger.getInstance('CoreSupressEventsDirective')\n                .error('No onClick output was defined causing this directive to fail', this.element);\n\n            return;\n        }\n\n        let events: string[];\n\n        if (this.suppressEvents == 'all' || this.suppressEvents === undefined || this.suppressEvents === null) {\n            // Suppress all events.\n            events = ['click', 'mousedown', 'touchdown', 'touchmove', 'touchstart'];\n\n        } else if (typeof this.suppressEvents == 'string') {\n            // It's a string, just suppress this event.\n            events = [this.suppressEvents];\n\n        } else if (Array.isArray(this.suppressEvents)) {\n            // Array supplied.\n            events = this.suppressEvents;\n        } else {\n            events = [];\n        }\n\n        // Suppress the events.\n        for (const evName of events) {\n            this.element.addEventListener(evName, (event) => this.stopBubble(event));\n        }\n\n        // Now listen to \"click\" events.\n        this.element.addEventListener('mouseup', (event) => { // Triggered in Android & iOS.\n            this.onClick.emit(event);\n        });\n\n        this.element.addEventListener('touchend', (event) => { // Triggered desktop & browser.\n            this.stopBubble(event);\n            this.onClick.emit(event);\n        });\n    }\n\n    /**\n     * Stop event default and propagation.\n     *\n     * @param event Event.\n     */\n    protected stopBubble(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAAuDA,YAAY,QAAQ,eAAe;AAC1F,SAASC,UAAU,QAAQ,oBAAoB;;AAE/C;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,MAAOC,0BAA0B;EAOnCC,YAAYC,EAAc;IAJhB,KAAAC,OAAO,GAAG,IAAIL,YAAY,EAAE;IAKlC,IAAI,CAACM,OAAO,GAAGF,EAAE,CAACG,aAAa;EACnC;EAEA;;;EAGAC,QAAQA,CAAA;IACJ,IAAI,CAAC,IAAI,CAACH,OAAO,CAACI,QAAQ,EAAE;MACxBR,UAAU,CAACS,WAAW,CAAC,4BAA4B,CAAC,CAC/CC,KAAK,CAAC,8DAA8D,EAAE,IAAI,CAACL,OAAO,CAAC;MAExF;;IAGJ,IAAIM,MAAgB;IAEpB,IAAI,IAAI,CAACC,cAAc,IAAI,KAAK,IAAI,IAAI,CAACA,cAAc,KAAKC,SAAS,IAAI,IAAI,CAACD,cAAc,KAAK,IAAI,EAAE;MACnG;MACAD,MAAM,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;KAE1E,MAAM,IAAI,OAAO,IAAI,CAACC,cAAc,IAAI,QAAQ,EAAE;MAC/C;MACAD,MAAM,GAAG,CAAC,IAAI,CAACC,cAAc,CAAC;KAEjC,MAAM,IAAIE,KAAK,CAACC,OAAO,CAAC,IAAI,CAACH,cAAc,CAAC,EAAE;MAC3C;MACAD,MAAM,GAAG,IAAI,CAACC,cAAc;KAC/B,MAAM;MACHD,MAAM,GAAG,EAAE;;IAGf;IACA,KAAK,MAAMK,MAAM,IAAIL,MAAM,EAAE;MACzB,IAAI,CAACN,OAAO,CAACY,gBAAgB,CAACD,MAAM,EAAGE,KAAK,IAAK,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC,CAAC;;IAG5E;IACA,IAAI,CAACb,OAAO,CAACY,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAI;MAC/C,IAAI,CAACd,OAAO,CAACgB,IAAI,CAACF,KAAK,CAAC;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACb,OAAO,CAACY,gBAAgB,CAAC,UAAU,EAAGC,KAAK,IAAI;MAChD,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC;MACtB,IAAI,CAACd,OAAO,CAACgB,IAAI,CAACF,KAAK,CAAC;IAC5B,CAAC,CAAC;EACN;EAEA;;;;;EAKUC,UAAUA,CAACD,KAAY;IAC7BA,KAAK,CAACG,cAAc,EAAE;IACtBH,KAAK,CAACI,eAAe,EAAE;EAC3B;;SA/DSrB,0BAA0B;;mBAA1BA,MAA0B,EAAAsB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;AAAA;;QAA1BxB,MAA0B;EAAAyB,SAAA;EAAAC,MAAA;IAAAf,cAAA;EAAA;EAAAgB,OAAA;IAAAxB,OAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}