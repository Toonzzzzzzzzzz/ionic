{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreFilter } from '@features/filter/services/filter';\nimport { CoreFilterHelper } from '@features/filter/services/filter-helper';\nimport { CoreUtils } from '@services/utils/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../../directives/fa-icon\";\nconst _c0 = [\"canvas\"];\nfunction CoreChartComponent_ion_list_2_ion_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\");\n    i0.ɵɵelement(1, \"ion-icon\", 3);\n    i0.ɵɵelementStart(2, \"ion-label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const data_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"color\", data_r3.fillStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(data_r3.text);\n  }\n}\nfunction CoreChartComponent_ion_list_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-list\");\n    i0.ɵɵtemplate(1, CoreChartComponent_ion_list_2_ion_item_1_Template, 4, 3, \"ion-item\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.legendItems);\n  }\n}\n/**\n * This component shows a chart using chart.js.\n * Documentation can be found at http://www.chartjs.org/docs/.\n * It only supports changes on these properties: data and labels.\n *\n * Example usage:\n * <core-chart [data]=\"data\" [labels]=\"labels\" [type]=\"type\" [legend]=\"legend\"></core-chart>\n */\nexport class CoreChartComponent {\n  constructor() {\n    this.data = []; // Chart data.\n    this.labels = []; // Labels of the data.\n    this.height = 300; // Height of the chart element.\n    this.legendItems = [];\n  }\n  // The first 6 colors will be the app colors, the following will be randomly generated.\n  // It will use the same colors in the whole session.\n\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _this$canvas;\n      let legend = {};\n      if (_this.legend === undefined) {\n        legend = {\n          display: false,\n          labels: {\n            generateLabels: chart => {\n              var _data$labels;\n              const data = chart.data;\n              if ((_data$labels = data.labels) !== null && _data$labels !== void 0 && _data$labels.length) {\n                var _data$datasets;\n                const datasets = (_data$datasets = data.datasets) === null || _data$datasets === void 0 ? void 0 : _data$datasets[0];\n                return data.labels.map((label, i) => {\n                  var _datasets$data, _datasets$backgroundC;\n                  return {\n                    text: label + ': ' + (datasets === null || datasets === void 0 || (_datasets$data = datasets.data) === null || _datasets$data === void 0 ? void 0 : _datasets$data[i]),\n                    fillStyle: datasets === null || datasets === void 0 || (_datasets$backgroundC = datasets.backgroundColor) === null || _datasets$backgroundC === void 0 ? void 0 : _datasets$backgroundC[i]\n                  };\n                });\n              }\n              return [];\n            }\n          }\n        };\n      } else {\n        legend = Object.assign({}, _this.legend);\n      }\n      if (_this.type === 'bar' && _this.data.length >= 5) {\n        _this.type = 'horizontalBar';\n      }\n      // Format labels if needed.\n      yield _this.formatLabels();\n      const context = (_this$canvas = _this.canvas) === null || _this$canvas === void 0 ? void 0 : _this$canvas.nativeElement.getContext('2d');\n      if (!context) {\n        return;\n      }\n      const {\n        Chart\n      } = yield import('./chart.lazy');\n      _this.chart = new Chart(context, {\n        type: _this.type,\n        data: {\n          labels: _this.labels,\n          datasets: [{\n            data: _this.data,\n            backgroundColor: _this.getRandomColors(_this.data.length)\n          }]\n        },\n        options: {\n          legend\n        }\n      });\n      _this.updateLegendItems();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnChanges(changes) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.chart || !changes.labels || !changes.data) {\n        return;\n      }\n      if (changes.labels) {\n        // Format labels if needed.\n        yield _this2.formatLabels();\n      }\n      if (!_this2.chart.data.datasets) {\n        _this2.chart.data.datasets = [];\n      }\n      _this2.chart.data.datasets[0] = {\n        data: _this2.data,\n        backgroundColor: _this2.getRandomColors(_this2.data.length)\n      };\n      _this2.chart.data.labels = _this2.labels;\n      _this2.chart.update();\n      _this2.updateLegendItems();\n    })();\n  }\n  /**\n   * Format labels if needed.\n   *\n   * @returns Promise resolved when done.\n   */\n  formatLabels() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.contextLevel || !_this3.contextInstanceId || _this3.filter === false) {\n        return;\n      }\n      const options = {\n        clean: true,\n        singleLine: true,\n        courseId: _this3.courseId,\n        wsNotFiltered: CoreUtils.isTrueOrOne(_this3.wsNotFiltered)\n      };\n      const filters = yield CoreFilterHelper.getFilters(_this3.contextLevel, _this3.contextInstanceId, options);\n      yield Promise.all(_this3.labels.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (label, i) {\n          _this3.labels[i] = yield CoreFilter.formatText(label, options, filters);\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n  /**\n   * Generate random colors if needed.\n   *\n   * @param n Number of colors needed.\n   * @returns Array with the number of background colors requested.\n   */\n  getRandomColors(n) {\n    while (CoreChartComponent.backgroundColors.length < n) {\n      const red = Math.floor(Math.random() * 255);\n      const green = Math.floor(Math.random() * 255);\n      const blue = Math.floor(Math.random() * 255);\n      CoreChartComponent.backgroundColors.push('rgba(' + red + ', ' + green + ', ' + blue + ', 0.6)');\n    }\n    return CoreChartComponent.backgroundColors.slice(0, n);\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = undefined;\n    }\n  }\n  /**\n   * Recompute legendItems property.\n   */\n  updateLegendItems() {\n    var _this$chart$legend$le, _this$chart;\n    this.legendItems = ((_this$chart$legend$le = (_this$chart = this.chart) === null || _this$chart === void 0 || (_this$chart = _this$chart.legend) === null || _this$chart === void 0 ? void 0 : _this$chart.legendItems) !== null && _this$chart$legend$le !== void 0 ? _this$chart$legend$le : []).filter(item => !!item);\n  }\n}\n_class = CoreChartComponent;\n_class.backgroundColors = ['rgba(0,100,210, 0.6)', 'rgba(203,61,77, 0.6)', 'rgba(0,121,130, 0.6)', 'rgba(249,128,18, 0.6)', 'rgba(94,129,0, 0.6)', 'rgba(251,173,26, 0.6)'];\n_class.ɵfac = function CoreChartComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-chart\"]],\n  viewQuery: function CoreChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  inputs: {\n    data: \"data\",\n    labels: \"labels\",\n    type: \"type\",\n    legend: \"legend\",\n    height: \"height\",\n    filter: \"filter\",\n    contextLevel: \"contextLevel\",\n    contextInstanceId: \"contextInstanceId\",\n    courseId: \"courseId\",\n    wsNotFiltered: \"wsNotFiltered\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[\"canvas\", \"\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"name\", \"fas-square\", \"slot\", \"start\", \"aria-hidden\", \"true\"]],\n  template: function CoreChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"canvas\", null, 0);\n      i0.ɵɵtemplate(2, CoreChartComponent_ion_list_2_Template, 2, 1, \"ion-list\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"height\", ctx.height);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.chart);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.IonIcon, i2.IonItem, i2.IonLabel, i2.IonList, i3.CoreFaIconDirective],\n  styles: [\"[_nghost-%COMP%] {\\n  display: block;\\n}\\n[_nghost-%COMP%]   canvas[_ngcontent-%COMP%] {\\n  max-width: 500px;\\n  margin: 0 auto;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9jb3JlL2NvbXBvbmVudHMvY2hhcnQvY2hhcnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGNBQUE7QUFDSjtBQUNJO0VBQ0ksZ0JBQUE7RUFDQSxjQUFBO0FBQ1IiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICBjYW52YXMge1xuICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xuICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["CoreFilter","CoreFilterHelper","CoreUtils","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵstyleProp","data_r3","fillStyle","ɵɵtextInterpolate","text","ɵɵtemplate","CoreChartComponent_ion_list_2_ion_item_1_Template","ɵɵproperty","ctx_r1","legendItems","CoreChartComponent","constructor","data","labels","height","ngOnInit","_this","_asyncToGenerator","_this$canvas","legend","undefined","display","generateLabels","chart","_data$labels","length","_data$datasets","datasets","map","label","i","_datasets$data","_datasets$backgroundC","backgroundColor","Object","assign","type","formatLabels","context","canvas","nativeElement","getContext","Chart","getRandomColors","options","updateLegendItems","ngOnChanges","changes","_this2","update","_this3","contextLevel","contextInstanceId","filter","clean","singleLine","courseId","wsNotFiltered","isTrueOrOne","filters","getFilters","Promise","all","_ref","formatText","_x","_x2","apply","arguments","n","backgroundColors","red","Math","floor","random","green","blue","push","slice","ngOnDestroy","destroy","_this$chart$legend$le","_this$chart","item","_class","selectors","viewQuery","CoreChartComponent_Query","rf","ctx","CoreChartComponent_ion_list_2_Template","ɵɵattribute"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/chart/chart.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/chart/core-chart.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, OnDestroy, OnInit, ElementRef, OnChanges, ViewChild, SimpleChange } from '@angular/core';\nimport { CoreFilter } from '@features/filter/services/filter';\nimport { CoreFilterHelper } from '@features/filter/services/filter-helper';\nimport { CoreUtils } from '@services/utils/utils';\nimport { ChartLegendLabelItem, ChartLegendOptions } from 'chart.js';\n\n/**\n * This component shows a chart using chart.js.\n * Documentation can be found at http://www.chartjs.org/docs/.\n * It only supports changes on these properties: data and labels.\n *\n * Example usage:\n * <core-chart [data]=\"data\" [labels]=\"labels\" [type]=\"type\" [legend]=\"legend\"></core-chart>\n */\n@Component({\n    selector: 'core-chart',\n    templateUrl: 'core-chart.html',\n    styleUrls: ['chart.scss'],\n})\nexport class CoreChartComponent implements OnDestroy, OnInit, OnChanges {\n\n    // The first 6 colors will be the app colors, the following will be randomly generated.\n    // It will use the same colors in the whole session.\n    protected static backgroundColors = [\n        'rgba(0,100,210, 0.6)',\n        'rgba(203,61,77, 0.6)',\n        'rgba(0,121,130, 0.6)',\n        'rgba(249,128,18, 0.6)',\n        'rgba(94,129,0, 0.6)',\n        'rgba(251,173,26, 0.6)',\n    ];\n\n    @Input() data: number[] = []; // Chart data.\n    @Input() labels: string[] = []; // Labels of the data.\n    @Input() type?: string; // Type of chart.\n    @Input() legend?: ChartLegendOptions; // Legend options.\n    @Input() height = 300; // Height of the chart element.\n    @Input() filter?: boolean | string; // Whether to filter labels. If not defined, true if contextLevel and instanceId are set.\n    @Input() contextLevel?: string; // The context level of the text.\n    @Input() contextInstanceId?: number; // The instance ID related to the context.\n    @Input() courseId?: number; // Course ID the text belongs to. It can be used to improve performance with filters.\n    @Input() wsNotFiltered?: boolean | string; // If true it means the WS didn't filter the labels for some reason.\n    @ViewChild('canvas') canvas?: ElementRef<HTMLCanvasElement>;\n\n    chart?: ChartWithLegend;\n    legendItems: ChartLegendLabelItem[] = [];\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        let legend: ChartLegendOptions = {};\n        if (this.legend === undefined) {\n            legend = {\n                display: false,\n                labels: {\n                    generateLabels: (chart: Chart): ChartLegendLabelItem[] => {\n                        const data = chart.data;\n                        if (data.labels?.length) {\n                            const datasets = data.datasets?.[0];\n\n                            return data.labels.map<ChartLegendLabelItem>((label, i) => ({\n                                text: label + ': ' + datasets?.data?.[i],\n                                fillStyle: datasets?.backgroundColor?.[i],\n                            }));\n                        }\n\n                        return [];\n                    },\n                },\n            };\n        } else {\n            legend = Object.assign({}, this.legend);\n        }\n\n        if (this.type === 'bar' && this.data.length >= 5) {\n            this.type = 'horizontalBar';\n        }\n\n        // Format labels if needed.\n        await this.formatLabels();\n\n        const context = this.canvas?.nativeElement.getContext('2d');\n        if (!context) {\n            return;\n        }\n\n        const { Chart } = await import('./chart.lazy');\n\n        this.chart = new Chart(context, {\n            type: this.type,\n            data: {\n                labels: this.labels,\n                datasets: [{\n                    data: this.data,\n                    backgroundColor: this.getRandomColors(this.data.length),\n                }],\n            },\n            options: { legend },\n        });\n\n        this.updateLegendItems();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnChanges(changes: Record<string, SimpleChange>): Promise<void> {\n        if (!this.chart || !changes.labels || !changes.data) {\n            return;\n        }\n\n        if (changes.labels) {\n            // Format labels if needed.\n            await this.formatLabels();\n        }\n\n        if (!this.chart.data.datasets) {\n            this.chart.data.datasets = [];\n        }\n\n        this.chart.data.datasets[0] = {\n            data: this.data,\n            backgroundColor: this.getRandomColors(this.data.length),\n        };\n        this.chart.data.labels = this.labels;\n        this.chart.update();\n\n        this.updateLegendItems();\n    }\n\n    /**\n     * Format labels if needed.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async formatLabels(): Promise<void> {\n        if (!this.contextLevel || !this.contextInstanceId || this.filter === false) {\n            return;\n        }\n\n        const options = {\n            clean: true,\n            singleLine: true,\n            courseId: this.courseId,\n            wsNotFiltered: CoreUtils.isTrueOrOne(this.wsNotFiltered),\n        };\n\n        const filters = await CoreFilterHelper.getFilters(this.contextLevel, this.contextInstanceId, options);\n\n        await Promise.all(this.labels.map(async (label, i) => {\n            this.labels[i] = await CoreFilter.formatText(label, options, filters);\n        }));\n    }\n\n    /**\n     * Generate random colors if needed.\n     *\n     * @param n Number of colors needed.\n     * @returns Array with the number of background colors requested.\n     */\n    protected getRandomColors(n: number): string[] {\n        while (CoreChartComponent.backgroundColors.length < n) {\n            const red = Math.floor(Math.random() * 255);\n            const green = Math.floor(Math.random() * 255);\n            const blue = Math.floor(Math.random() * 255);\n            CoreChartComponent.backgroundColors.push('rgba(' + red + ', ' + green + ', ' + blue + ', 0.6)');\n        }\n\n        return CoreChartComponent.backgroundColors.slice(0, n);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = undefined;\n        }\n    }\n\n    /**\n     * Recompute legendItems property.\n     */\n    protected updateLegendItems(): void {\n        this.legendItems = (this.chart?.legend?.legendItems ?? []).filter(item => !!item);\n    }\n\n}\n\n// For some reason the legend property isn't defined in TS, define it ourselves.\ntype ChartWithLegend = Chart & {\n    legend?: {\n        legendItems?: ChartLegendLabelItem[];\n    };\n};\n","<canvas #canvas [attr.height]=\"height\"></canvas>\n\n<ion-list *ngIf=\"chart\">\n    <ion-item *ngFor=\"let data of legendItems\">\n        <ion-icon name=\"fas-square\" slot=\"start\" [style.color]=\"data.fillStyle\" aria-hidden=\"true\" />\n        <ion-label>{{data.text}}</ion-label>\n    </ion-item>\n</ion-list>\n"],"mappings":";;AAeA,SAASA,UAAU,QAAQ,kCAAkC;AAC7D,SAASC,gBAAgB,QAAQ,yCAAyC;AAC1E,SAASC,SAAS,QAAQ,uBAAuB;;;;;;;;ICd7CC,EAAA,CAAAC,cAAA,eAA2C;IACvCD,EAAA,CAAAE,SAAA,kBAA6F;IAC7FF,EAAA,CAAAC,cAAA,gBAAW;IAAAD,EAAA,CAAAG,MAAA,GAAa;IAAAH,EAAA,CAAAI,YAAA,EAAY;;;;IADKJ,EAAA,CAAAK,SAAA,GAA8B;IAA9BL,EAAA,CAAAM,WAAA,UAAAC,OAAA,CAAAC,SAAA,CAA8B;IAC5DR,EAAA,CAAAK,SAAA,GAAa;IAAbL,EAAA,CAAAS,iBAAA,CAAAF,OAAA,CAAAG,IAAA,CAAa;;;;;IAHhCV,EAAA,CAAAC,cAAA,eAAwB;IACpBD,EAAA,CAAAW,UAAA,IAAAC,iDAAA,sBAGW;IACfZ,EAAA,CAAAI,YAAA,EAAW;;;;IAJoBJ,EAAA,CAAAK,SAAA,GAAc;IAAdL,EAAA,CAAAa,UAAA,YAAAC,MAAA,CAAAC,WAAA,CAAc;;;ADiB7C;;;;;;;;AAaA,OAAM,MAAOC,kBAAkB;EAL/BC,YAAA;IAkBa,KAAAC,IAAI,GAAa,EAAE,CAAC,CAAC;IACrB,KAAAC,MAAM,GAAa,EAAE,CAAC,CAAC;IAGvB,KAAAC,MAAM,GAAG,GAAG,CAAC,CAAC;IASvB,KAAAL,WAAW,GAA2B,EAAE;;EAxBxC;EACA;;EAyBA;;;EAGMM,QAAQA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAAA,IAAAC,YAAA;MACV,IAAIC,MAAM,GAAuB,EAAE;MACnC,IAAIH,KAAI,CAACG,MAAM,KAAKC,SAAS,EAAE;QAC3BD,MAAM,GAAG;UACLE,OAAO,EAAE,KAAK;UACdR,MAAM,EAAE;YACJS,cAAc,EAAGC,KAAY,IAA4B;cAAA,IAAAC,YAAA;cACrD,MAAMZ,IAAI,GAAGW,KAAK,CAACX,IAAI;cACvB,KAAAY,YAAA,GAAIZ,IAAI,CAACC,MAAM,cAAAW,YAAA,eAAXA,YAAA,CAAaC,MAAM,EAAE;gBAAA,IAAAC,cAAA;gBACrB,MAAMC,QAAQ,IAAAD,cAAA,GAAGd,IAAI,CAACe,QAAQ,cAAAD,cAAA,uBAAbA,cAAA,CAAgB,CAAC,CAAC;gBAEnC,OAAOd,IAAI,CAACC,MAAM,CAACe,GAAG,CAAuB,CAACC,KAAK,EAAEC,CAAC;kBAAA,IAAAC,cAAA,EAAAC,qBAAA;kBAAA,OAAM;oBACxD5B,IAAI,EAAEyB,KAAK,GAAG,IAAI,IAAGF,QAAQ,aAARA,QAAQ,gBAAAI,cAAA,GAARJ,QAAQ,CAAEf,IAAI,cAAAmB,cAAA,uBAAdA,cAAA,CAAiBD,CAAC,CAAC;oBACxC5B,SAAS,EAAEyB,QAAQ,aAARA,QAAQ,gBAAAK,qBAAA,GAARL,QAAQ,CAAEM,eAAe,cAAAD,qBAAA,uBAAzBA,qBAAA,CAA4BF,CAAC;mBAC3C;gBAAA,CAAC,CAAC;;cAGP,OAAO,EAAE;YACb;;SAEP;OACJ,MAAM;QACHX,MAAM,GAAGe,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEnB,KAAI,CAACG,MAAM,CAAC;;MAG3C,IAAIH,KAAI,CAACoB,IAAI,KAAK,KAAK,IAAIpB,KAAI,CAACJ,IAAI,CAACa,MAAM,IAAI,CAAC,EAAE;QAC9CT,KAAI,CAACoB,IAAI,GAAG,eAAe;;MAG/B;MACA,MAAMpB,KAAI,CAACqB,YAAY,EAAE;MAEzB,MAAMC,OAAO,IAAApB,YAAA,GAAGF,KAAI,CAACuB,MAAM,cAAArB,YAAA,uBAAXA,YAAA,CAAasB,aAAa,CAACC,UAAU,CAAC,IAAI,CAAC;MAC3D,IAAI,CAACH,OAAO,EAAE;QACV;;MAGJ,MAAM;QAAEI;MAAK,CAAE,SAAS,MAAM,CAAC,cAAc,CAAC;MAE9C1B,KAAI,CAACO,KAAK,GAAG,IAAImB,KAAK,CAACJ,OAAO,EAAE;QAC5BF,IAAI,EAAEpB,KAAI,CAACoB,IAAI;QACfxB,IAAI,EAAE;UACFC,MAAM,EAAEG,KAAI,CAACH,MAAM;UACnBc,QAAQ,EAAE,CAAC;YACPf,IAAI,EAAEI,KAAI,CAACJ,IAAI;YACfqB,eAAe,EAAEjB,KAAI,CAAC2B,eAAe,CAAC3B,KAAI,CAACJ,IAAI,CAACa,MAAM;WACzD;SACJ;QACDmB,OAAO,EAAE;UAAEzB;QAAM;OACpB,CAAC;MAEFH,KAAI,CAAC6B,iBAAiB,EAAE;IAAC;EAC7B;EAEA;;;EAGMC,WAAWA,CAACC,OAAqC;IAAA,IAAAC,MAAA;IAAA,OAAA/B,iBAAA;MACnD,IAAI,CAAC+B,MAAI,CAACzB,KAAK,IAAI,CAACwB,OAAO,CAAClC,MAAM,IAAI,CAACkC,OAAO,CAACnC,IAAI,EAAE;QACjD;;MAGJ,IAAImC,OAAO,CAAClC,MAAM,EAAE;QAChB;QACA,MAAMmC,MAAI,CAACX,YAAY,EAAE;;MAG7B,IAAI,CAACW,MAAI,CAACzB,KAAK,CAACX,IAAI,CAACe,QAAQ,EAAE;QAC3BqB,MAAI,CAACzB,KAAK,CAACX,IAAI,CAACe,QAAQ,GAAG,EAAE;;MAGjCqB,MAAI,CAACzB,KAAK,CAACX,IAAI,CAACe,QAAQ,CAAC,CAAC,CAAC,GAAG;QAC1Bf,IAAI,EAAEoC,MAAI,CAACpC,IAAI;QACfqB,eAAe,EAAEe,MAAI,CAACL,eAAe,CAACK,MAAI,CAACpC,IAAI,CAACa,MAAM;OACzD;MACDuB,MAAI,CAACzB,KAAK,CAACX,IAAI,CAACC,MAAM,GAAGmC,MAAI,CAACnC,MAAM;MACpCmC,MAAI,CAACzB,KAAK,CAAC0B,MAAM,EAAE;MAEnBD,MAAI,CAACH,iBAAiB,EAAE;IAAC;EAC7B;EAEA;;;;;EAKgBR,YAAYA,CAAA;IAAA,IAAAa,MAAA;IAAA,OAAAjC,iBAAA;MACxB,IAAI,CAACiC,MAAI,CAACC,YAAY,IAAI,CAACD,MAAI,CAACE,iBAAiB,IAAIF,MAAI,CAACG,MAAM,KAAK,KAAK,EAAE;QACxE;;MAGJ,MAAMT,OAAO,GAAG;QACZU,KAAK,EAAE,IAAI;QACXC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAEN,MAAI,CAACM,QAAQ;QACvBC,aAAa,EAAEhE,SAAS,CAACiE,WAAW,CAACR,MAAI,CAACO,aAAa;OAC1D;MAED,MAAME,OAAO,SAASnE,gBAAgB,CAACoE,UAAU,CAACV,MAAI,CAACC,YAAY,EAAED,MAAI,CAACE,iBAAiB,EAAER,OAAO,CAAC;MAErG,MAAMiB,OAAO,CAACC,GAAG,CAACZ,MAAI,CAACrC,MAAM,CAACe,GAAG;QAAA,IAAAmC,IAAA,GAAA9C,iBAAA,CAAC,WAAOY,KAAK,EAAEC,CAAC,EAAI;UACjDoB,MAAI,CAACrC,MAAM,CAACiB,CAAC,CAAC,SAASvC,UAAU,CAACyE,UAAU,CAACnC,KAAK,EAAEe,OAAO,EAAEe,OAAO,CAAC;QACzE,CAAC;QAAA,iBAAAM,EAAA,EAAAC,GAAA;UAAA,OAAAH,IAAA,CAAAI,KAAA,OAAAC,SAAA;QAAA;MAAA,IAAC,CAAC;IAAC;EACR;EAEA;;;;;;EAMUzB,eAAeA,CAAC0B,CAAS;IAC/B,OAAO3D,kBAAkB,CAAC4D,gBAAgB,CAAC7C,MAAM,GAAG4C,CAAC,EAAE;MACnD,MAAME,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;MAC3C,MAAMC,KAAK,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;MAC7C,MAAME,IAAI,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;MAC5ChE,kBAAkB,CAAC4D,gBAAgB,CAACO,IAAI,CAAC,OAAO,GAAGN,GAAG,GAAG,IAAI,GAAGI,KAAK,GAAG,IAAI,GAAGC,IAAI,GAAG,QAAQ,CAAC;;IAGnG,OAAOlE,kBAAkB,CAAC4D,gBAAgB,CAACQ,KAAK,CAAC,CAAC,EAAET,CAAC,CAAC;EAC1D;EAEA;;;EAGAU,WAAWA,CAAA;IACP,IAAI,IAAI,CAACxD,KAAK,EAAE;MACZ,IAAI,CAACA,KAAK,CAACyD,OAAO,EAAE;MACpB,IAAI,CAACzD,KAAK,GAAGH,SAAS;;EAE9B;EAEA;;;EAGUyB,iBAAiBA,CAAA;IAAA,IAAAoC,qBAAA,EAAAC,WAAA;IACvB,IAAI,CAACzE,WAAW,GAAG,EAAAwE,qBAAA,IAAAC,WAAA,GAAC,IAAI,CAAC3D,KAAK,cAAA2D,WAAA,gBAAAA,WAAA,GAAVA,WAAA,CAAY/D,MAAM,cAAA+D,WAAA,uBAAlBA,WAAA,CAAoBzE,WAAW,cAAAwE,qBAAA,cAAAA,qBAAA,GAAI,EAAE,EAAE5B,MAAM,CAAC8B,IAAI,IAAI,CAAC,CAACA,IAAI,CAAC;EACrF;;SAxKSzE,kBAAkB;AAIV0E,MAAA,CAAAd,gBAAgB,GAAG,CAChC,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACtB,uBAAuB,EACvB,qBAAqB,EACrB,uBAAuB,CAC1B;;mBAXQ5D,MAAkB;AAAA;;QAAlBA,MAAkB;EAAA2E,SAAA;EAAAC,SAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;MCjC/B9F,EAAA,CAAAE,SAAA,sBAAgD;MAEhDF,EAAA,CAAAW,UAAA,IAAAqF,sCAAA,sBAKW;;;MAPKhG,EAAA,CAAAiG,WAAA,WAAAF,GAAA,CAAA3E,MAAA,CAAsB;MAE3BpB,EAAA,CAAAK,SAAA,GAAW;MAAXL,EAAA,CAAAa,UAAA,SAAAkF,GAAA,CAAAlE,KAAA,CAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}