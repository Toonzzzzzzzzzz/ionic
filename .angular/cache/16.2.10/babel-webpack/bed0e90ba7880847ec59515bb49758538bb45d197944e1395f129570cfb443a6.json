{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { Subject } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreContextMenuPopoverComponent } from './context-menu-popover';\nimport { CoreDirectivesRegistry } from '@singletons/directives-registry';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"../../directives/fa-icon\";\nimport * as i3 from \"../../directives/update-non-reactive-attributes\";\nconst _c0 = [\"*\"];\n/**\n * This component adds a button (usually in the navigation bar) that displays a context menu popover.\n */\nexport class CoreContextMenuComponent {\n  constructor(elementRef, changeDetector) {\n    this.icon = 'ellipsis-vertical'; // Icon to be shown on the navigation bar. Default: Kebab menu icon.\n    this.hideMenu = true; // It will be unhidden when items are added.\n    this.items = [];\n    this.itemsMovedToParent = [];\n    this.expanded = false;\n    // Create the stream and subscribe to it. We ignore successive changes during 250ms.\n    this.itemsChangedStream = new Subject();\n    this.itemsSubscription = this.itemsChangedStream.pipe(auditTime(250)).subscribe(() => {\n      // Hide the menu if all items are hidden.\n      this.hideMenu = !this.items.some(item => !item.hidden);\n      // Sort the items by priority.\n      this.items.sort((a, b) => (a.priority || 0) <= (b.priority || 0) ? 1 : -1);\n      changeDetector.detectChanges();\n    });\n    // Calculate the unique ID.\n    this.uniqueId = 'core-context-menu-' + CoreUtils.getUniqueId('CoreContextMenuComponent');\n    CoreDirectivesRegistry.register(elementRef.nativeElement, this);\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    this.ariaLabel = this.ariaLabel || this.title || Translate.instant('core.displayoptions');\n  }\n  /**\n   * Add a context menu item.\n   *\n   * @param item The item to add.\n   */\n  addItem(item) {\n    if (this.parentContextMenu) {\n      // All items were moved to the \"parent\" menu. Add the item in there.\n      this.parentContextMenu.addItem(item);\n      if (this.itemsMovedToParent.indexOf(item) == -1) {\n        this.itemsMovedToParent.push(item);\n      }\n    } else if (this.items.indexOf(item) == -1) {\n      this.items.push(item);\n      this.itemsChanged();\n    }\n  }\n  /**\n   * Function called when the items change.\n   */\n  itemsChanged() {\n    if (this.parentContextMenu) {\n      // All items were moved to the \"parent\" menu, call the function in there.\n      this.parentContextMenu.itemsChanged();\n    } else {\n      this.itemsChangedStream.next();\n    }\n  }\n  /**\n   * Merge the current context menu with the one passed as parameter. All the items in this menu will be moved to the\n   * one passed as parameter.\n   *\n   * @param contextMenu The context menu where to move the items.\n   */\n  mergeContextMenus(contextMenu) {\n    this.parentContextMenu = contextMenu;\n    // Add all the items to the other menu.\n    for (let i = 0; i < this.items.length; i++) {\n      const item = this.items[i];\n      contextMenu.addItem(item);\n      this.itemsMovedToParent.push(item);\n    }\n    // Remove all items from the current menu.\n    this.items = [];\n    this.itemsChangedStream.next();\n  }\n  /**\n   * Remove an item from the context menu.\n   *\n   * @param item The item to remove.\n   */\n  removeItem(item) {\n    if (this.parentContextMenu) {\n      // All items were moved to the \"parent\" menu. Remove the item from there.\n      this.parentContextMenu.removeItem(item);\n      const index = this.itemsMovedToParent.indexOf(item);\n      if (index >= 0) {\n        this.itemsMovedToParent.splice(index, 1);\n      }\n    } else {\n      const index = this.items.indexOf(item);\n      if (index >= 0) {\n        this.items.splice(index, 1);\n      }\n      this.itemsChanged();\n    }\n  }\n  /**\n   * Remove the items that were merged to a parent context menu.\n   */\n  removeMergedItems() {\n    if (this.parentContextMenu) {\n      for (let i = 0; i < this.itemsMovedToParent.length; i++) {\n        this.parentContextMenu.removeItem(this.itemsMovedToParent[i]);\n      }\n    }\n  }\n  /**\n   * Restore the items that were merged to a parent context menu.\n   */\n  restoreMergedItems() {\n    if (this.parentContextMenu) {\n      for (let i = 0; i < this.itemsMovedToParent.length; i++) {\n        this.parentContextMenu.addItem(this.itemsMovedToParent[i]);\n      }\n    }\n  }\n  /**\n   * Show the context menu.\n   *\n   * @param event Event.\n   */\n  showContextMenu(event) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.expanded) {\n        _this.expanded = true;\n        const popoverData = yield CoreDomUtils.openPopover({\n          event,\n          component: CoreContextMenuPopoverComponent,\n          componentProps: {\n            title: _this.title,\n            items: _this.items\n          },\n          id: _this.uniqueId\n        });\n        _this.expanded = false;\n        if (popoverData) {\n          var _popoverData$onClosed;\n          (_popoverData$onClosed = popoverData.onClosed) === null || _popoverData$onClosed === void 0 || _popoverData$onClosed.emit();\n        }\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    this.removeMergedItems();\n    this.itemsSubscription.unsubscribe();\n  }\n}\n_class = CoreContextMenuComponent;\n_class.ɵfac = function CoreContextMenuComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-context-menu\"]],\n  inputs: {\n    icon: \"icon\",\n    title: \"title\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"]\n  },\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 4,\n  consts: [[\"fill\", \"clear\", \"aria-haspopup\", \"true\", 3, \"hidden\", \"click\"], [\"slot\", \"icon-only\", \"aria-hidden\", \"true\", 3, \"name\"]],\n  template: function CoreContextMenuComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"ion-button\", 0);\n      i0.ɵɵlistener(\"click\", function CoreContextMenuComponent_Template_ion_button_click_0_listener($event) {\n        return ctx.showContextMenu($event);\n      });\n      i0.ɵɵelement(1, \"ion-icon\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(2);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"hidden\", ctx.hideMenu);\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel)(\"aria-controls\", ctx.uniqueId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"name\", ctx.icon);\n    }\n  },\n  dependencies: [i1.IonButton, i1.IonIcon, i2.CoreFaIconDirective, i3.CoreUpdateNonReactiveAttributesDirective],\n  encapsulation: 2\n});","map":{"version":3,"names":["Subject","auditTime","CoreDomUtils","CoreUtils","Translate","CoreContextMenuPopoverComponent","CoreDirectivesRegistry","CoreContextMenuComponent","constructor","elementRef","changeDetector","icon","hideMenu","items","itemsMovedToParent","expanded","itemsChangedStream","itemsSubscription","pipe","subscribe","some","item","hidden","sort","a","b","priority","detectChanges","uniqueId","getUniqueId","register","nativeElement","ngOnInit","ariaLabel","title","instant","addItem","parentContextMenu","indexOf","push","itemsChanged","next","mergeContextMenus","contextMenu","i","length","removeItem","index","splice","removeMergedItems","restoreMergedItems","showContextMenu","event","_this","_asyncToGenerator","popoverData","openPopover","component","componentProps","id","_popoverData$onClosed","onClosed","emit","ngOnDestroy","unsubscribe","i0","ɵɵdirectiveInject","ElementRef","ChangeDetectorRef","selectors","inputs","ngContentSelectors","_c0","decls","vars","consts","template","CoreContextMenuComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","CoreContextMenuComponent_Template_ion_button_click_0_listener","$event","ɵɵelement","ɵɵelementEnd","ɵɵprojection","ɵɵproperty","ɵɵattribute","ɵɵadvance"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/context-menu/context-menu.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/context-menu/core-context-menu.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, OnInit, OnDestroy, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreContextMenuItemComponent } from './context-menu-item';\nimport { CoreContextMenuPopoverComponent } from './context-menu-popover';\nimport { CoreDirectivesRegistry } from '@singletons/directives-registry';\n\n/**\n * This component adds a button (usually in the navigation bar) that displays a context menu popover.\n */\n@Component({\n    selector: 'core-context-menu',\n    templateUrl: 'core-context-menu.html',\n})\nexport class CoreContextMenuComponent implements OnInit, OnDestroy {\n\n    @Input() icon = 'ellipsis-vertical'; // Icon to be shown on the navigation bar. Default: Kebab menu icon.\n    @Input() title?: string; // Text to be shown on the top of the popover.\n    @Input('aria-label') ariaLabel?: string; // Aria label to be shown on the top of the popover.\n\n    hideMenu = true; // It will be unhidden when items are added.\n    uniqueId: string;\n\n    protected items: CoreContextMenuItemComponent[] = [];\n    protected itemsMovedToParent: CoreContextMenuItemComponent[] = [];\n    protected itemsChangedStream: Subject<void>; // Stream to update the hideMenu boolean when items change.\n    protected parentContextMenu?: CoreContextMenuComponent;\n    protected expanded = false;\n    protected itemsSubscription: Subscription;\n\n    constructor(elementRef: ElementRef, changeDetector: ChangeDetectorRef) {\n        // Create the stream and subscribe to it. We ignore successive changes during 250ms.\n        this.itemsChangedStream = new Subject<void>();\n        this.itemsSubscription = this.itemsChangedStream.pipe(auditTime(250)).subscribe(() => {\n            // Hide the menu if all items are hidden.\n            this.hideMenu = !this.items.some((item) => !item.hidden);\n\n            // Sort the items by priority.\n            this.items.sort((a, b) => (a.priority || 0) <= (b.priority || 0) ? 1 : -1);\n\n            changeDetector.detectChanges();\n        });\n\n        // Calculate the unique ID.\n        this.uniqueId = 'core-context-menu-' + CoreUtils.getUniqueId('CoreContextMenuComponent');\n\n        CoreDirectivesRegistry.register(elementRef.nativeElement, this);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.ariaLabel = this.ariaLabel || this.title || Translate.instant('core.displayoptions');\n    }\n\n    /**\n     * Add a context menu item.\n     *\n     * @param item The item to add.\n     */\n    addItem(item: CoreContextMenuItemComponent): void {\n        if (this.parentContextMenu) {\n            // All items were moved to the \"parent\" menu. Add the item in there.\n            this.parentContextMenu.addItem(item);\n\n            if (this.itemsMovedToParent.indexOf(item) == -1) {\n                this.itemsMovedToParent.push(item);\n            }\n        } else if (this.items.indexOf(item) == -1) {\n            this.items.push(item);\n            this.itemsChanged();\n        }\n    }\n\n    /**\n     * Function called when the items change.\n     */\n    itemsChanged(): void {\n        if (this.parentContextMenu) {\n            // All items were moved to the \"parent\" menu, call the function in there.\n            this.parentContextMenu.itemsChanged();\n        } else {\n            this.itemsChangedStream.next();\n        }\n    }\n\n    /**\n     * Merge the current context menu with the one passed as parameter. All the items in this menu will be moved to the\n     * one passed as parameter.\n     *\n     * @param contextMenu The context menu where to move the items.\n     */\n    mergeContextMenus(contextMenu: CoreContextMenuComponent): void {\n        this.parentContextMenu = contextMenu;\n\n        // Add all the items to the other menu.\n        for (let i = 0; i < this.items.length; i++) {\n            const item = this.items[i];\n            contextMenu.addItem(item);\n            this.itemsMovedToParent.push(item);\n        }\n\n        // Remove all items from the current menu.\n        this.items = [];\n        this.itemsChangedStream.next();\n    }\n\n    /**\n     * Remove an item from the context menu.\n     *\n     * @param item The item to remove.\n     */\n    removeItem(item: CoreContextMenuItemComponent): void {\n        if (this.parentContextMenu) {\n            // All items were moved to the \"parent\" menu. Remove the item from there.\n            this.parentContextMenu.removeItem(item);\n\n            const index = this.itemsMovedToParent.indexOf(item);\n            if (index >= 0) {\n                this.itemsMovedToParent.splice(index, 1);\n            }\n        } else {\n            const index = this.items.indexOf(item);\n            if (index >= 0) {\n                this.items.splice(index, 1);\n            }\n            this.itemsChanged();\n        }\n    }\n\n    /**\n     * Remove the items that were merged to a parent context menu.\n     */\n    removeMergedItems(): void {\n        if (this.parentContextMenu) {\n            for (let i = 0; i < this.itemsMovedToParent.length; i++) {\n                this.parentContextMenu.removeItem(this.itemsMovedToParent[i]);\n            }\n        }\n    }\n\n    /**\n     * Restore the items that were merged to a parent context menu.\n     */\n    restoreMergedItems(): void {\n        if (this.parentContextMenu) {\n            for (let i = 0; i < this.itemsMovedToParent.length; i++) {\n                this.parentContextMenu.addItem(this.itemsMovedToParent[i]);\n            }\n        }\n    }\n\n    /**\n     * Show the context menu.\n     *\n     * @param event Event.\n     */\n    async showContextMenu(event: MouseEvent): Promise<void> {\n        if (!this.expanded) {\n            this.expanded = true;\n\n            const popoverData = await CoreDomUtils.openPopover<CoreContextMenuItemComponent>({\n                event,\n                component: CoreContextMenuPopoverComponent,\n                componentProps: {\n                    title: this.title,\n                    items: this.items,\n                },\n                id: this.uniqueId,\n            });\n\n            this.expanded = false;\n\n            if (popoverData) {\n                popoverData.onClosed?.emit();\n            }\n\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.removeMergedItems();\n        this.itemsSubscription.unsubscribe();\n    }\n\n}\n","<ion-button [hidden]=\"hideMenu\" fill=\"clear\" [attr.aria-label]=\"ariaLabel\" (click)=\"showContextMenu($event)\" aria-haspopup=\"true\"\n    [attr.aria-controls]=\"uniqueId\">\n    <ion-icon [name]=\"icon\" slot=\"icon-only\" aria-hidden=\"true\" />\n</ion-button>\n<ng-content></ng-content>\n"],"mappings":";;AAeA,SAASA,OAAO,QAAsB,MAAM;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,SAAS,QAAQ,aAAa;AAEvC,SAASC,+BAA+B,QAAQ,wBAAwB;AACxE,SAASC,sBAAsB,QAAQ,iCAAiC;;;;;;AAExE;;;AAOA,OAAM,MAAOC,wBAAwB;EAgBjCC,YAAYC,UAAsB,EAAEC,cAAiC;IAd5D,KAAAC,IAAI,GAAG,mBAAmB,CAAC,CAAC;IAIrC,KAAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;IAGP,KAAAC,KAAK,GAAmC,EAAE;IAC1C,KAAAC,kBAAkB,GAAmC,EAAE;IAGvD,KAAAC,QAAQ,GAAG,KAAK;IAItB;IACA,IAAI,CAACC,kBAAkB,GAAG,IAAIhB,OAAO,EAAQ;IAC7C,IAAI,CAACiB,iBAAiB,GAAG,IAAI,CAACD,kBAAkB,CAACE,IAAI,CAACjB,SAAS,CAAC,GAAG,CAAC,CAAC,CAACkB,SAAS,CAAC,MAAK;MACjF;MACA,IAAI,CAACP,QAAQ,GAAG,CAAC,IAAI,CAACC,KAAK,CAACO,IAAI,CAAEC,IAAI,IAAK,CAACA,IAAI,CAACC,MAAM,CAAC;MAExD;MACA,IAAI,CAACT,KAAK,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,CAACD,CAAC,CAACE,QAAQ,IAAI,CAAC,MAAMD,CAAC,CAACC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAE1EhB,cAAc,CAACiB,aAAa,EAAE;IAClC,CAAC,CAAC;IAEF;IACA,IAAI,CAACC,QAAQ,GAAG,oBAAoB,GAAGzB,SAAS,CAAC0B,WAAW,CAAC,0BAA0B,CAAC;IAExFvB,sBAAsB,CAACwB,QAAQ,CAACrB,UAAU,CAACsB,aAAa,EAAE,IAAI,CAAC;EACnE;EAEA;;;EAGAC,QAAQA,CAAA;IACJ,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,IAAI,IAAI,CAACC,KAAK,IAAI9B,SAAS,CAAC+B,OAAO,CAAC,qBAAqB,CAAC;EAC7F;EAEA;;;;;EAKAC,OAAOA,CAACf,IAAkC;IACtC,IAAI,IAAI,CAACgB,iBAAiB,EAAE;MACxB;MACA,IAAI,CAACA,iBAAiB,CAACD,OAAO,CAACf,IAAI,CAAC;MAEpC,IAAI,IAAI,CAACP,kBAAkB,CAACwB,OAAO,CAACjB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;QAC7C,IAAI,CAACP,kBAAkB,CAACyB,IAAI,CAAClB,IAAI,CAAC;;KAEzC,MAAM,IAAI,IAAI,CAACR,KAAK,CAACyB,OAAO,CAACjB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;MACvC,IAAI,CAACR,KAAK,CAAC0B,IAAI,CAAClB,IAAI,CAAC;MACrB,IAAI,CAACmB,YAAY,EAAE;;EAE3B;EAEA;;;EAGAA,YAAYA,CAAA;IACR,IAAI,IAAI,CAACH,iBAAiB,EAAE;MACxB;MACA,IAAI,CAACA,iBAAiB,CAACG,YAAY,EAAE;KACxC,MAAM;MACH,IAAI,CAACxB,kBAAkB,CAACyB,IAAI,EAAE;;EAEtC;EAEA;;;;;;EAMAC,iBAAiBA,CAACC,WAAqC;IACnD,IAAI,CAACN,iBAAiB,GAAGM,WAAW;IAEpC;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC/B,KAAK,CAACgC,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,MAAMvB,IAAI,GAAG,IAAI,CAACR,KAAK,CAAC+B,CAAC,CAAC;MAC1BD,WAAW,CAACP,OAAO,CAACf,IAAI,CAAC;MACzB,IAAI,CAACP,kBAAkB,CAACyB,IAAI,CAAClB,IAAI,CAAC;;IAGtC;IACA,IAAI,CAACR,KAAK,GAAG,EAAE;IACf,IAAI,CAACG,kBAAkB,CAACyB,IAAI,EAAE;EAClC;EAEA;;;;;EAKAK,UAAUA,CAACzB,IAAkC;IACzC,IAAI,IAAI,CAACgB,iBAAiB,EAAE;MACxB;MACA,IAAI,CAACA,iBAAiB,CAACS,UAAU,CAACzB,IAAI,CAAC;MAEvC,MAAM0B,KAAK,GAAG,IAAI,CAACjC,kBAAkB,CAACwB,OAAO,CAACjB,IAAI,CAAC;MACnD,IAAI0B,KAAK,IAAI,CAAC,EAAE;QACZ,IAAI,CAACjC,kBAAkB,CAACkC,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;;KAE/C,MAAM;MACH,MAAMA,KAAK,GAAG,IAAI,CAAClC,KAAK,CAACyB,OAAO,CAACjB,IAAI,CAAC;MACtC,IAAI0B,KAAK,IAAI,CAAC,EAAE;QACZ,IAAI,CAAClC,KAAK,CAACmC,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;;MAE/B,IAAI,CAACP,YAAY,EAAE;;EAE3B;EAEA;;;EAGAS,iBAAiBA,CAAA;IACb,IAAI,IAAI,CAACZ,iBAAiB,EAAE;MACxB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9B,kBAAkB,CAAC+B,MAAM,EAAED,CAAC,EAAE,EAAE;QACrD,IAAI,CAACP,iBAAiB,CAACS,UAAU,CAAC,IAAI,CAAChC,kBAAkB,CAAC8B,CAAC,CAAC,CAAC;;;EAGzE;EAEA;;;EAGAM,kBAAkBA,CAAA;IACd,IAAI,IAAI,CAACb,iBAAiB,EAAE;MACxB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9B,kBAAkB,CAAC+B,MAAM,EAAED,CAAC,EAAE,EAAE;QACrD,IAAI,CAACP,iBAAiB,CAACD,OAAO,CAAC,IAAI,CAACtB,kBAAkB,CAAC8B,CAAC,CAAC,CAAC;;;EAGtE;EAEA;;;;;EAKMO,eAAeA,CAACC,KAAiB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACnC,IAAI,CAACD,KAAI,CAACtC,QAAQ,EAAE;QAChBsC,KAAI,CAACtC,QAAQ,GAAG,IAAI;QAEpB,MAAMwC,WAAW,SAASrD,YAAY,CAACsD,WAAW,CAA+B;UAC7EJ,KAAK;UACLK,SAAS,EAAEpD,+BAA+B;UAC1CqD,cAAc,EAAE;YACZxB,KAAK,EAAEmB,KAAI,CAACnB,KAAK;YACjBrB,KAAK,EAAEwC,KAAI,CAACxC;WACf;UACD8C,EAAE,EAAEN,KAAI,CAACzB;SACZ,CAAC;QAEFyB,KAAI,CAACtC,QAAQ,GAAG,KAAK;QAErB,IAAIwC,WAAW,EAAE;UAAA,IAAAK,qBAAA;UACb,CAAAA,qBAAA,GAAAL,WAAW,CAACM,QAAQ,cAAAD,qBAAA,eAApBA,qBAAA,CAAsBE,IAAI,EAAE;;;IAGnC;EACL;EAEA;;;EAGAC,WAAWA,CAAA;IACP,IAAI,CAACd,iBAAiB,EAAE;IACxB,IAAI,CAAChC,iBAAiB,CAAC+C,WAAW,EAAE;EACxC;;SA7KSzD,wBAAwB;;mBAAxBA,MAAwB,EAAA0D,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA,GAAAF,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAG,iBAAA;AAAA;;QAAxB7D,MAAwB;EAAA8D,SAAA;EAAAC,MAAA;IAAA3D,IAAA;IAAAuB,KAAA;IAAAD,SAAA;EAAA;EAAAsC,kBAAA,EAAAC,GAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,kCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;MC/BrCb,EAAA,CAAAe,cAAA,oBACoC;MADuCf,EAAA,CAAAgB,UAAA,mBAAAC,8DAAAC,MAAA;QAAA,OAASJ,GAAA,CAAA5B,eAAA,CAAAgC,MAAA,CAAuB;MAAA,EAAC;MAExGlB,EAAA,CAAAmB,SAAA,kBAA8D;MAClEnB,EAAA,CAAAoB,YAAA,EAAa;MACbpB,EAAA,CAAAqB,YAAA,GAAyB;;;MAJbrB,EAAA,CAAAsB,UAAA,WAAAR,GAAA,CAAAnE,QAAA,CAAmB;MAAcqD,EAAA,CAAAuB,WAAA,eAAAT,GAAA,CAAA9C,SAAA,CAA6B,kBAAA8C,GAAA,CAAAnD,QAAA;MAE5DqC,EAAA,CAAAwB,SAAA,GAAa;MAAbxB,EAAA,CAAAsB,UAAA,SAAAR,GAAA,CAAApE,IAAA,CAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}