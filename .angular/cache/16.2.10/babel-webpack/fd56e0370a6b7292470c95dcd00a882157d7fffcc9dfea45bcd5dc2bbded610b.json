{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { forwardRef } from '@angular/core';\nimport { IonContent } from '@ionic/angular';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreCourseFormatDelegate } from '@features/course/services/format-delegate';\nimport { CoreCourseModulePrefetchDelegate } from '@features/course/services/module-prefetch-delegate';\nimport { CoreCourseSync, CoreCourseSyncProvider } from '@features/course/services/sync';\nimport { CoreCourseFormatComponent } from '../../components/course-format/course-format';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreNavigator } from '@services/navigator';\nimport { CORE_REFRESH_CONTEXT } from '@/core/utils/refresh-context';\nimport * as i0 from \"@angular/core\";\nfunction CoreCourseContentsPage_core_course_format_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-course-format\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"core-course-format-\", ctx_r0.course.format, \"\");\n    i0.ɵɵproperty(\"course\", ctx_r0.course)(\"sections\", ctx_r0.sections)(\"initialSectionId\", ctx_r0.sectionId)(\"initialSectionNumber\", ctx_r0.sectionNumber)(\"initialBlockInstanceId\", ctx_r0.blockInstanceId)(\"moduleId\", ctx_r0.moduleId)(\"isGuest\", ctx_r0.isGuest);\n  }\n}\n/**\n * Page that displays the contents of a course.\n */\nexport class CoreCourseContentsPage {\n  constructor(changeDetectorRef) {\n    this.changeDetectorRef = changeDetectorRef;\n    this.dataLoaded = false;\n    this.updatingData = false;\n    this.downloadCourseEnabled = false;\n    this.displayEnableDownload = false;\n    this.displayRefresher = false;\n    this.isDestroyed = false;\n    this.modulesHaveCompletion = false;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this.course = CoreNavigator.getRequiredRouteParam('course');\n      } catch (error) {\n        CoreDomUtils.showErrorModal(error);\n        CoreNavigator.back();\n        return;\n      }\n      _this.sectionId = CoreNavigator.getRouteNumberParam('sectionId');\n      _this.sectionNumber = CoreNavigator.getRouteNumberParam('sectionNumber');\n      _this.blockInstanceId = CoreNavigator.getRouteNumberParam('blockInstanceId');\n      _this.moduleId = CoreNavigator.getRouteNumberParam('moduleId');\n      _this.isGuest = CoreNavigator.getRouteBooleanParam('isGuest');\n      _this.debouncedUpdateCachedCompletion = CoreUtils.debounce(() => {\n        if (_this.modulesHaveCompletion) {\n          CoreUtils.ignoreErrors(CoreCourse.getSections(_this.course.id, false, true));\n        } else {\n          CoreUtils.ignoreErrors(CoreCourse.getActivitiesCompletionStatus(_this.course.id, undefined, undefined, false, false, false));\n        }\n      }, 30000);\n      _this.initListeners();\n      yield _this.loadData(false, true);\n      _this.dataLoaded = true;\n    })();\n  }\n  /**\n   * Init listeners.\n   *\n   * @returns Promise resolved when done.\n   */\n  initListeners() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.completionObserver) {\n        return; // Already initialized.\n      }\n      // Check if the course format requires the view to be refreshed when completion changes.\n      const shouldRefresh = yield CoreCourseFormatDelegate.shouldRefreshWhenCompletionChanges(_this2.course);\n      if (!shouldRefresh) {\n        return;\n      }\n      _this2.completionObserver = CoreEvents.on(CoreEvents.COMPLETION_MODULE_VIEWED, data => {\n        if (data && data.courseId == _this2.course.id) {\n          _this2.showLoadingAndRefresh(true, false);\n        }\n      });\n      _this2.manualCompletionObserver = CoreEvents.on(CoreEvents.MANUAL_COMPLETION_CHANGED, data => {\n        _this2.onCompletionChange(data.completion);\n      });\n      _this2.syncObserver = CoreEvents.on(CoreCourseSyncProvider.AUTO_SYNCED, data => {\n        if (!data || data.courseId != _this2.course.id) {\n          return;\n        }\n        _this2.showLoadingAndRefresh(false, false);\n        if (data.warnings && data.warnings[0]) {\n          CoreDomUtils.showAlert(undefined, data.warnings[0].message);\n        }\n      });\n    })();\n  }\n  /**\n   * Fetch and load all the data required for the view.\n   *\n   * @param refresh If it's refreshing content.\n   * @param sync If it should try to sync.\n   * @returns Promise resolved when done.\n   */\n  loadData(refresh, sync) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // First of all, get the course because the data might have changed.\n      const result = yield CoreUtils.ignoreErrors(CoreCourseHelper.getCourse(_this3.course.id));\n      if (result) {\n        if (_this3.course.id === result.course.id && 'displayname' in _this3.course && !('displayname' in result.course)) {\n          result.course.displayname = _this3.course.displayname;\n        }\n        _this3.course = result.course;\n      }\n      if (sync) {\n        var _result$warnings;\n        // Try to synchronize the course data.\n        // For now we don't allow manual syncing, so ignore errors.\n        const result = yield CoreUtils.ignoreErrors(CoreCourseSync.syncCourse(_this3.course.id, _this3.course.displayname || _this3.course.fullname));\n        if (result !== null && result !== void 0 && (_result$warnings = result.warnings) !== null && _result$warnings !== void 0 && _result$warnings.length) {\n          CoreDomUtils.showAlert(undefined, result.warnings[0].message);\n        }\n      }\n      try {\n        yield Promise.all([_this3.loadSections(refresh), _this3.loadCourseFormatOptions()]);\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'core.course.couldnotloadsectioncontent', true);\n      }\n    })();\n  }\n  /**\n   * Load course sections.\n   *\n   * @param refresh If it's refreshing content.\n   * @returns Promise resolved when done.\n   */\n  loadSections(refresh) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // Get all the sections.\n      const sections = yield CoreCourse.getSections(_this4.course.id, false, true);\n      if (refresh) {\n        // Invalidate the recently downloaded module list. To ensure info can be prefetched.\n        const modules = CoreCourse.getSectionsModules(sections);\n        yield CoreCourseModulePrefetchDelegate.invalidateModules(modules, _this4.course.id);\n      }\n      let completionStatus = {};\n      // Get the completion status.\n      if (_this4.course.enablecompletion !== false) {\n        const sectionWithModules = sections.find(section => section.modules.length > 0);\n        if (sectionWithModules && sectionWithModules.modules[0].completion !== undefined) {\n          // The module already has completion (3.6 onwards). Load the offline completion.\n          _this4.modulesHaveCompletion = true;\n          yield CoreUtils.ignoreErrors(CoreCourseHelper.loadOfflineCompletion(_this4.course.id, sections));\n        } else {\n          const fetchedData = yield CoreUtils.ignoreErrors(CoreCourse.getActivitiesCompletionStatus(_this4.course.id));\n          completionStatus = fetchedData || completionStatus;\n        }\n      }\n      // Add handlers\n      const result = yield CoreCourseHelper.addHandlerDataForModules(sections, _this4.course.id, completionStatus, _this4.course.fullname, true);\n      _this4.sections = result.sections;\n      if (CoreCourseFormatDelegate.canViewAllSections(_this4.course)) {\n        // Add a fake first section (all sections).\n        _this4.sections.unshift(CoreCourseHelper.createAllSectionsSection());\n      }\n      // Get whether to show the refresher now that we have sections.\n      _this4.displayRefresher = CoreCourseFormatDelegate.displayRefresher(_this4.course, _this4.sections);\n    })();\n  }\n  /**\n   * Load course format options if needed.\n   *\n   * @returns Promise resolved when done.\n   */\n  loadCourseFormatOptions() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      // Load the course format options when course completion is enabled to show completion progress on sections.\n      if (!_this5.course.enablecompletion) {\n        return;\n      }\n      if ('courseformatoptions' in _this5.course && _this5.course.courseformatoptions) {\n        // Already loaded.\n        _this5.formatOptions = CoreUtils.objectToKeyValueMap(_this5.course.courseformatoptions, 'name', 'value');\n        return;\n      }\n      const course = yield CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', _this5.course.id));\n      course && Object.assign(_this5.course, course);\n      if (course !== null && course !== void 0 && course.courseformatoptions) {\n        _this5.formatOptions = CoreUtils.objectToKeyValueMap(course.courseformatoptions, 'name', 'value');\n      }\n    })();\n  }\n  /**\n   * Refresh the data.\n   *\n   * @param refresher Refresher.\n   * @returns Promise resolved when done.\n   */\n  doRefresh(refresher) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreUtils.ignoreErrors(_this6.invalidateData());\n      try {\n        yield _this6.loadData(true, true);\n      } finally {\n        // Do not call doRefresh on the format component if the refresher is defined in the format component\n        // to prevent an infinite loop.\n        if (_this6.displayRefresher && _this6.formatComponent) {\n          yield CoreUtils.ignoreErrors(_this6.formatComponent.doRefresh(refresher));\n        }\n        refresher === null || refresher === void 0 || refresher.complete();\n      }\n    })();\n  }\n  /**\n   * The completion of any of the modules has changed.\n   *\n   * @param completionData Completion data.\n   * @returns Promise resolved when done.\n   */\n  onCompletionChange(completionData) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const shouldReload = completionData.valueused === undefined || completionData.valueused;\n      if (!shouldReload) {\n        var _this7$debouncedUpdat;\n        // Invalidate the completion.\n        yield CoreUtils.ignoreErrors(CoreCourse.invalidateSections(_this7.course.id));\n        (_this7$debouncedUpdat = _this7.debouncedUpdateCachedCompletion) === null || _this7$debouncedUpdat === void 0 || _this7$debouncedUpdat.call(_this7);\n        return;\n      }\n      yield CoreUtils.ignoreErrors(_this7.invalidateData());\n      yield _this7.showLoadingAndRefresh(true, false);\n    })();\n  }\n  /**\n   * Invalidate the data.\n   *\n   * @returns Promise resolved when done.\n   */\n  invalidateData() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      promises.push(CoreCourse.invalidateSections(_this8.course.id));\n      promises.push(CoreCourses.invalidateUserCourses());\n      promises.push(CoreCourseFormatDelegate.invalidateData(_this8.course, _this8.sections || []));\n      if (_this8.sections) {\n        promises.push(CoreCourseModulePrefetchDelegate.invalidateCourseUpdates(_this8.course.id));\n      }\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Refresh list after a completion change since there could be new activities.\n   *\n   * @param sync If it should try to sync.\n   * @param invalidateData Whether to invalidate data. Set it to false if data has already been invalidated.\n   * @returns Promise resolved when done.\n   */\n  showLoadingAndRefresh(sync = false, invalidateData = true) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      var _this9$content, _scrollElement$scroll;\n      // Try to keep current scroll position.\n      const scrollElement = yield CoreUtils.ignoreErrors((_this9$content = _this9.content) === null || _this9$content === void 0 ? void 0 : _this9$content.getScrollElement());\n      const scrollTop = (_scrollElement$scroll = scrollElement === null || scrollElement === void 0 ? void 0 : scrollElement.scrollTop) !== null && _scrollElement$scroll !== void 0 ? _scrollElement$scroll : -1;\n      _this9.updatingData = true;\n      _this9.changeDetectorRef.detectChanges();\n      try {\n        var _this9$formatComponen;\n        if (invalidateData) {\n          yield CoreUtils.ignoreErrors(_this9.invalidateData());\n        }\n        yield _this9.loadData(true, sync);\n        yield (_this9$formatComponen = _this9.formatComponent) === null || _this9$formatComponen === void 0 ? void 0 : _this9$formatComponen.doRefresh(undefined, undefined, true);\n      } finally {\n        _this9.updatingData = false;\n        _this9.changeDetectorRef.detectChanges();\n        if (scrollTop > 0) {\n          var _this9$content2;\n          yield CoreUtils.nextTick();\n          (_this9$content2 = _this9.content) === null || _this9$content2 === void 0 || _this9$content2.scrollToPoint(0, scrollTop, 0);\n        }\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  refreshContext() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      yield _this10.showLoadingAndRefresh(true, true);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$completionObser, _this$manualCompletio, _this$syncObserver;\n    this.isDestroyed = true;\n    (_this$completionObser = this.completionObserver) === null || _this$completionObser === void 0 || _this$completionObser.off();\n    (_this$manualCompletio = this.manualCompletionObserver) === null || _this$manualCompletio === void 0 || _this$manualCompletio.off();\n    (_this$syncObserver = this.syncObserver) === null || _this$syncObserver === void 0 || _this$syncObserver.off();\n  }\n  /**\n   * User entered the page.\n   */\n  ionViewDidEnter() {\n    var _this$formatComponent;\n    (_this$formatComponent = this.formatComponent) === null || _this$formatComponent === void 0 || _this$formatComponent.ionViewDidEnter();\n  }\n  /**\n   * User left the page.\n   */\n  ionViewDidLeave() {\n    var _this$formatComponent2;\n    (_this$formatComponent2 = this.formatComponent) === null || _this$formatComponent2 === void 0 || _this$formatComponent2.ionViewDidLeave();\n  }\n}\n_class = CoreCourseContentsPage;\n_class.ɵfac = function CoreCourseContentsPage_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-core-course-contents\"]],\n  viewQuery: function CoreCourseContentsPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(IonContent, 5);\n      i0.ɵɵviewQuery(CoreCourseFormatComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formatComponent = _t.first);\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CORE_REFRESH_CONTEXT,\n    useExisting: forwardRef(() => _class)\n  }])],\n  decls: 6,\n  vars: 6,\n  consts: [[\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [3, \"hideUntil\"], [3, \"course\", \"sections\", \"initialSectionId\", \"initialSectionNumber\", \"initialBlockInstanceId\", \"moduleId\", \"class\", \"isGuest\", 4, \"ngIf\"], [3, \"course\", \"sections\", \"initialSectionId\", \"initialSectionNumber\", \"initialBlockInstanceId\", \"moduleId\", \"isGuest\"]],\n  template: function CoreCourseContentsPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-content\")(1, \"ion-refresher\", 0);\n      i0.ɵɵlistener(\"ionRefresh\", function CoreCourseContentsPage_Template_ion_refresher_ionRefresh_1_listener($event) {\n        return ctx.doRefresh($event.target);\n      });\n      i0.ɵɵelement(2, \"ion-refresher-content\", 1);\n      i0.ɵɵpipe(3, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"core-loading\", 2);\n      i0.ɵɵtemplate(5, CoreCourseContentsPage_core_course_format_5_Template, 1, 10, \"core-course-format\", 3);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.dataLoaded || ctx.updatingData || !ctx.displayRefresher);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(3, 4, \"core.pulltorefresh\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.dataLoaded && !ctx.updatingData);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.dataLoaded && ctx.sections);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"names":["forwardRef","IonContent","CoreDomUtils","CoreUtils","CoreCourses","CoreCourse","CoreCourseHelper","CoreCourseFormatDelegate","CoreCourseModulePrefetchDelegate","CoreCourseSync","CoreCourseSyncProvider","CoreCourseFormatComponent","CoreEvents","CoreNavigator","CORE_REFRESH_CONTEXT","i0","ɵɵelement","ɵɵclassMapInterpolate1","ctx_r0","course","format","ɵɵproperty","sections","sectionId","sectionNumber","blockInstanceId","moduleId","isGuest","CoreCourseContentsPage","constructor","changeDetectorRef","dataLoaded","updatingData","downloadCourseEnabled","displayEnableDownload","displayRefresher","isDestroyed","modulesHaveCompletion","ngOnInit","_this","_asyncToGenerator","getRequiredRouteParam","error","showErrorModal","back","getRouteNumberParam","getRouteBooleanParam","debouncedUpdateCachedCompletion","debounce","ignoreErrors","getSections","id","getActivitiesCompletionStatus","undefined","initListeners","loadData","_this2","completionObserver","shouldRefresh","shouldRefreshWhenCompletionChanges","on","COMPLETION_MODULE_VIEWED","data","courseId","showLoadingAndRefresh","manualCompletionObserver","MANUAL_COMPLETION_CHANGED","onCompletionChange","completion","syncObserver","AUTO_SYNCED","warnings","showAlert","message","refresh","sync","_this3","result","getCourse","displayname","_result$warnings","syncCourse","fullname","length","Promise","all","loadSections","loadCourseFormatOptions","showErrorModalDefault","_this4","modules","getSectionsModules","invalidateModules","completionStatus","enablecompletion","sectionWithModules","find","section","loadOfflineCompletion","fetchedData","addHandlerDataForModules","canViewAllSections","unshift","createAllSectionsSection","_this5","courseformatoptions","formatOptions","objectToKeyValueMap","getCourseByField","Object","assign","doRefresh","refresher","_this6","invalidateData","formatComponent","complete","completionData","_this7","shouldReload","valueused","_this7$debouncedUpdat","invalidateSections","call","_this8","promises","push","invalidateUserCourses","invalidateCourseUpdates","_this9","_this9$content","_scrollElement$scroll","scrollElement","content","getScrollElement","scrollTop","detectChanges","_this9$formatComponen","_this9$content2","nextTick","scrollToPoint","refreshContext","_this10","ngOnDestroy","_this$completionObser","_this$manualCompletio","_this$syncObserver","off","ionViewDidEnter","_this$formatComponent","ionViewDidLeave","_this$formatComponent2","ɵɵdirectiveInject","ChangeDetectorRef","selectors","viewQuery","CoreCourseContentsPage_Query","rf","ctx","provide","useExisting","decls","vars","consts","template","CoreCourseContentsPage_Template","ɵɵelementStart","ɵɵlistener","CoreCourseContentsPage_Template_ion_refresher_ionRefresh_1_listener","$event","target","ɵɵelementEnd","ɵɵtemplate","CoreCourseContentsPage_core_course_format_5_Template","ɵɵadvance","ɵɵpropertyInterpolate","ɵɵpipeBind1"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/pages/contents/contents.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/pages/contents/contents.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, ViewChild, OnInit, OnDestroy, forwardRef, ChangeDetectorRef } from '@angular/core';\nimport { IonContent } from '@ionic/angular';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreCourses, CoreCourseAnyCourseData } from '@features/courses/services/courses';\nimport {\n    CoreCourse,\n    CoreCourseCompletionActivityStatus,\n} from '@features/course/services/course';\nimport {\n    CoreCourseHelper,\n    CoreCourseModuleCompletionData,\n    CoreCourseSection,\n} from '@features/course/services/course-helper';\nimport { CoreCourseFormatDelegate } from '@features/course/services/format-delegate';\nimport { CoreCourseModulePrefetchDelegate } from '@features/course/services/module-prefetch-delegate';\nimport { CoreCourseSync, CoreCourseSyncProvider } from '@features/course/services/sync';\nimport { CoreCourseFormatComponent } from '../../components/course-format/course-format';\nimport {\n    CoreEvents,\n    CoreEventObserver,\n} from '@singletons/events';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreRefreshContext, CORE_REFRESH_CONTEXT } from '@/core/utils/refresh-context';\n\n/**\n * Page that displays the contents of a course.\n */\n@Component({\n    selector: 'page-core-course-contents',\n    templateUrl: 'contents.html',\n    providers: [{\n        provide: CORE_REFRESH_CONTEXT,\n        useExisting: forwardRef(() => CoreCourseContentsPage),\n    }],\n})\nexport class CoreCourseContentsPage implements OnInit, OnDestroy, CoreRefreshContext {\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild(CoreCourseFormatComponent) formatComponent?: CoreCourseFormatComponent;\n\n    course!: CoreCourseAnyCourseData;\n    sections?: CoreCourseSection[];\n    sectionId?: number;\n    sectionNumber?: number;\n    blockInstanceId?: number;\n    dataLoaded = false;\n    updatingData = false;\n    downloadCourseEnabled = false;\n    moduleId?: number;\n    displayEnableDownload = false;\n    displayRefresher = false;\n    isGuest?: boolean;\n\n    protected formatOptions?: Record<string, unknown>;\n    protected completionObserver?: CoreEventObserver;\n    protected manualCompletionObserver?: CoreEventObserver;\n    protected syncObserver?: CoreEventObserver;\n    protected isDestroyed = false;\n    protected modulesHaveCompletion = false;\n    protected debouncedUpdateCachedCompletion?: () => void; // Update the cached completion after a certain time.\n\n    constructor(protected changeDetectorRef: ChangeDetectorRef) {}\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n\n        try {\n            this.course = CoreNavigator.getRequiredRouteParam<CoreCourseAnyCourseData>('course');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.sectionId = CoreNavigator.getRouteNumberParam('sectionId');\n        this.sectionNumber = CoreNavigator.getRouteNumberParam('sectionNumber');\n        this.blockInstanceId = CoreNavigator.getRouteNumberParam('blockInstanceId');\n        this.moduleId = CoreNavigator.getRouteNumberParam('moduleId');\n        this.isGuest = CoreNavigator.getRouteBooleanParam('isGuest');\n\n        this.debouncedUpdateCachedCompletion = CoreUtils.debounce(() => {\n            if (this.modulesHaveCompletion) {\n                CoreUtils.ignoreErrors(CoreCourse.getSections(this.course.id, false, true));\n            } else {\n                CoreUtils.ignoreErrors(CoreCourse.getActivitiesCompletionStatus(\n                    this.course.id,\n                    undefined,\n                    undefined,\n                    false,\n                    false,\n                    false,\n                ));\n            }\n        }, 30000);\n\n        this.initListeners();\n\n        await this.loadData(false, true);\n\n        this.dataLoaded = true;\n    }\n\n    /**\n     * Init listeners.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async initListeners(): Promise<void> {\n        if (this.completionObserver) {\n            return; // Already initialized.\n        }\n\n        // Check if the course format requires the view to be refreshed when completion changes.\n        const shouldRefresh = await CoreCourseFormatDelegate.shouldRefreshWhenCompletionChanges(this.course);\n        if (!shouldRefresh) {\n            return;\n        }\n\n        this.completionObserver = CoreEvents.on(\n            CoreEvents.COMPLETION_MODULE_VIEWED,\n            (data) => {\n                if (data && data.courseId == this.course.id) {\n                    this.showLoadingAndRefresh(true, false);\n                }\n            },\n        );\n\n        this.manualCompletionObserver = CoreEvents.on(CoreEvents.MANUAL_COMPLETION_CHANGED, (data) => {\n            this.onCompletionChange(data.completion);\n        });\n\n        this.syncObserver = CoreEvents.on(CoreCourseSyncProvider.AUTO_SYNCED, (data) => {\n            if (!data || data.courseId != this.course.id) {\n                return;\n            }\n\n            this.showLoadingAndRefresh(false, false);\n\n            if (data.warnings && data.warnings[0]) {\n                CoreDomUtils.showAlert(undefined, data.warnings[0].message);\n            }\n        });\n    }\n\n    /**\n     * Fetch and load all the data required for the view.\n     *\n     * @param refresh If it's refreshing content.\n     * @param sync If it should try to sync.\n     * @returns Promise resolved when done.\n     */\n    protected async loadData(refresh?: boolean, sync?: boolean): Promise<void> {\n        // First of all, get the course because the data might have changed.\n        const result = await CoreUtils.ignoreErrors(CoreCourseHelper.getCourse(this.course.id));\n\n        if (result) {\n            if (this.course.id === result.course.id && 'displayname' in this.course && !('displayname' in result.course)) {\n                result.course.displayname = this.course.displayname;\n            }\n            this.course = result.course;\n        }\n\n        if (sync) {\n            // Try to synchronize the course data.\n            // For now we don't allow manual syncing, so ignore errors.\n            const result = await CoreUtils.ignoreErrors(CoreCourseSync.syncCourse(\n                this.course.id,\n                this.course.displayname || this.course.fullname,\n            ));\n            if (result?.warnings?.length) {\n                CoreDomUtils.showAlert(undefined, result.warnings[0].message);\n            }\n        }\n\n        try {\n            await Promise.all([\n                this.loadSections(refresh),\n                this.loadCourseFormatOptions(),\n            ]);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.couldnotloadsectioncontent', true);\n        }\n    }\n\n    /**\n     * Load course sections.\n     *\n     * @param refresh If it's refreshing content.\n     * @returns Promise resolved when done.\n     */\n    protected async loadSections(refresh?: boolean): Promise<void> {\n        // Get all the sections.\n        const sections = await CoreCourse.getSections(this.course.id, false, true);\n\n        if (refresh) {\n            // Invalidate the recently downloaded module list. To ensure info can be prefetched.\n            const modules = CoreCourse.getSectionsModules(sections);\n\n            await CoreCourseModulePrefetchDelegate.invalidateModules(modules, this.course.id);\n        }\n\n        let completionStatus: Record<string, CoreCourseCompletionActivityStatus> = {};\n\n        // Get the completion status.\n        if (this.course.enablecompletion !== false) {\n            const sectionWithModules = sections.find((section) => section.modules.length > 0);\n\n            if (sectionWithModules && sectionWithModules.modules[0].completion !== undefined) {\n                // The module already has completion (3.6 onwards). Load the offline completion.\n                this.modulesHaveCompletion = true;\n\n                await CoreUtils.ignoreErrors(CoreCourseHelper.loadOfflineCompletion(this.course.id, sections));\n            } else {\n                const fetchedData = await CoreUtils.ignoreErrors(\n                    CoreCourse.getActivitiesCompletionStatus(this.course.id),\n                );\n\n                completionStatus = fetchedData || completionStatus;\n            }\n        }\n\n        // Add handlers\n        const result = await CoreCourseHelper.addHandlerDataForModules(\n            sections,\n            this.course.id,\n            completionStatus,\n            this.course.fullname,\n            true,\n        );\n        this.sections = result.sections;\n\n        if (CoreCourseFormatDelegate.canViewAllSections(this.course)) {\n            // Add a fake first section (all sections).\n            this.sections.unshift(CoreCourseHelper.createAllSectionsSection());\n        }\n\n        // Get whether to show the refresher now that we have sections.\n        this.displayRefresher = CoreCourseFormatDelegate.displayRefresher(this.course, this.sections);\n    }\n\n    /**\n     * Load course format options if needed.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async loadCourseFormatOptions(): Promise<void> {\n\n        // Load the course format options when course completion is enabled to show completion progress on sections.\n        if (!this.course.enablecompletion) {\n            return;\n        }\n\n        if ('courseformatoptions' in this.course && this.course.courseformatoptions) {\n            // Already loaded.\n            this.formatOptions = CoreUtils.objectToKeyValueMap(this.course.courseformatoptions, 'name', 'value');\n\n            return;\n        }\n\n        const course = await CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', this.course.id));\n\n        course && Object.assign(this.course, course);\n\n        if (course?.courseformatoptions) {\n            this.formatOptions = CoreUtils.objectToKeyValueMap(course.courseformatoptions, 'name', 'value');\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @returns Promise resolved when done.\n     */\n    async doRefresh(refresher?: HTMLIonRefresherElement): Promise<void> {\n        await CoreUtils.ignoreErrors(this.invalidateData());\n\n        try {\n            await this.loadData(true, true);\n        } finally {\n            // Do not call doRefresh on the format component if the refresher is defined in the format component\n            // to prevent an infinite loop.\n            if (this.displayRefresher && this.formatComponent) {\n                await CoreUtils.ignoreErrors(this.formatComponent.doRefresh(refresher));\n            }\n\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * The completion of any of the modules has changed.\n     *\n     * @param completionData Completion data.\n     * @returns Promise resolved when done.\n     */\n    async onCompletionChange(completionData: CoreCourseModuleCompletionData): Promise<void> {\n        const shouldReload = completionData.valueused === undefined || completionData.valueused;\n\n        if (!shouldReload) {\n            // Invalidate the completion.\n            await CoreUtils.ignoreErrors(CoreCourse.invalidateSections(this.course.id));\n\n            this.debouncedUpdateCachedCompletion?.();\n\n            return;\n        }\n\n        await CoreUtils.ignoreErrors(this.invalidateData());\n\n        await this.showLoadingAndRefresh(true, false);\n    }\n\n    /**\n     * Invalidate the data.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async invalidateData(): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(CoreCourse.invalidateSections(this.course.id));\n        promises.push(CoreCourses.invalidateUserCourses());\n        promises.push(CoreCourseFormatDelegate.invalidateData(this.course, this.sections || []));\n\n        if (this.sections) {\n            promises.push(CoreCourseModulePrefetchDelegate.invalidateCourseUpdates(this.course.id));\n        }\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Refresh list after a completion change since there could be new activities.\n     *\n     * @param sync If it should try to sync.\n     * @param invalidateData Whether to invalidate data. Set it to false if data has already been invalidated.\n     * @returns Promise resolved when done.\n     */\n    protected async showLoadingAndRefresh(sync = false, invalidateData = true): Promise<void> {\n        // Try to keep current scroll position.\n        const scrollElement = await CoreUtils.ignoreErrors(this.content?.getScrollElement());\n        const scrollTop = scrollElement?.scrollTop ?? -1;\n\n        this.updatingData = true;\n        this.changeDetectorRef.detectChanges();\n\n        try {\n            if (invalidateData) {\n                await CoreUtils.ignoreErrors(this.invalidateData());\n            }\n\n            await this.loadData(true, sync);\n\n            await this.formatComponent?.doRefresh(undefined, undefined, true);\n        } finally {\n            this.updatingData = false;\n            this.changeDetectorRef.detectChanges();\n\n            if (scrollTop > 0) {\n                await CoreUtils.nextTick();\n                this.content?.scrollToPoint(0, scrollTop, 0);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async refreshContext(): Promise<void> {\n        await this.showLoadingAndRefresh(true, true);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.isDestroyed = true;\n        this.completionObserver?.off();\n        this.manualCompletionObserver?.off();\n        this.syncObserver?.off();\n    }\n\n    /**\n     * User entered the page.\n     */\n    ionViewDidEnter(): void {\n        this.formatComponent?.ionViewDidEnter();\n    }\n\n    /**\n     * User left the page.\n     */\n    ionViewDidLeave(): void {\n        this.formatComponent?.ionViewDidLeave();\n    }\n\n}\n","<ion-content>\n    <ion-refresher slot=\"fixed\" [disabled]=\"!dataLoaded || updatingData || !displayRefresher\" (ionRefresh)=\"doRefresh($event.target)\">\n        <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n    </ion-refresher>\n\n    <core-loading [hideUntil]=\"dataLoaded && !updatingData\">\n        <core-course-format [course]=\"course\" [sections]=\"sections\" [initialSectionId]=\"sectionId\" [initialSectionNumber]=\"sectionNumber\"\n            [initialBlockInstanceId]=\"blockInstanceId\" [moduleId]=\"moduleId\" class=\"core-course-format-{{course.format}}\"\n            *ngIf=\"dataLoaded && sections\" [isGuest]=\"isGuest\" />\n    </core-loading>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}