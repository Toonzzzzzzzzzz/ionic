{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../context-menu/context-menu\";\n/**\n * This directive adds a item to the Context Menu popover.\n *\n * @description\n * This directive defines and item to be added to the popover generated in CoreContextMenu.\n *\n * It is required to place this tag inside a core-context-menu tag.\n *\n * <core-context-menu>\n *     <core-context-menu-item [hidden]=\"showGrid\" [priority]=\"601\" [content]=\"'core.layoutgrid' | translate\"\n *         (action)=\"switchGrid()\" [iconAction]=\"'apps'\"></core-context-menu-item>\n * </core-context-menu>\n */\nexport class CoreContextMenuItemComponent {\n  constructor(ctxtMenu) {\n    this.ctxtMenu = ctxtMenu;\n    this.autoLogin = true; // Whether the link needs to be opened using auto-login.\n    this.closeOnClick = true; // Whether to close the popover when the item is clicked.\n    this.showBrowserWarning = true; // Whether to show a warning before opening browser (for links). Defaults to true.\n    this.toggle = false; // Whether the toggle is on or off.\n    this.toggleChange = new EventEmitter(); // Will emit an event when toggle changes to enable 2-way data binding.\n    this.hasAction = false;\n    this.destroyed = false;\n    this.action = new EventEmitter();\n    this.onClosed = new EventEmitter();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    // Initialize values.\n    this.priority = this.priority || 1;\n    this.hasAction = !!this.action && this.action.observed;\n    this.ariaAction = this.ariaAction || this.content;\n    if (this.hasAction) {\n      this.href = '';\n    }\n    // Navigation help if href provided.\n    this.captureLink = this.href && this.captureLink ? this.captureLink : false;\n    if (!this.destroyed) {\n      this.ctxtMenu.addItem(this);\n    }\n  }\n  /**\n   * Toggle changed.\n   *\n   * @param event Event.\n   */\n  toggleChanged(event) {\n    if (this.toggle === undefined) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this.toggleChange.emit(this.toggle);\n  }\n  /**\n   * Component destroyed.\n   */\n  ngOnDestroy() {\n    this.destroyed = true;\n    this.ctxtMenu.removeItem(this);\n  }\n  /**\n   * Detect changes on input properties.\n   */\n  ngOnChanges(changes) {\n    if (changes.hidden && !changes.hidden.firstChange) {\n      this.ctxtMenu.itemsChanged();\n    }\n  }\n}\n_class = CoreContextMenuItemComponent;\n_class.ɵfac = function CoreContextMenuItemComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.CoreContextMenuComponent));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-context-menu-item\"]],\n  inputs: {\n    content: \"content\",\n    iconAction: \"iconAction\",\n    iconSlash: \"iconSlash\",\n    ariaAction: \"ariaAction\",\n    href: \"href\",\n    captureLink: \"captureLink\",\n    autoLogin: \"autoLogin\",\n    closeOnClick: \"closeOnClick\",\n    priority: \"priority\",\n    badge: \"badge\",\n    badgeClass: \"badgeClass\",\n    badgeA11yText: \"badgeA11yText\",\n    hidden: \"hidden\",\n    showBrowserWarning: \"showBrowserWarning\",\n    toggle: \"toggle\"\n  },\n  outputs: {\n    action: \"action\",\n    onClosed: \"onClosed\",\n    toggleChange: \"toggleChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function CoreContextMenuItemComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});","map":{"version":3,"names":["EventEmitter","CoreContextMenuItemComponent","constructor","ctxtMenu","autoLogin","closeOnClick","showBrowserWarning","toggle","toggleChange","hasAction","destroyed","action","onClosed","ngOnInit","priority","observed","ariaAction","content","href","captureLink","addItem","toggleChanged","event","undefined","preventDefault","stopPropagation","emit","ngOnDestroy","removeItem","ngOnChanges","changes","hidden","firstChange","itemsChanged","i0","ɵɵdirectiveInject","i1","CoreContextMenuComponent","selectors","inputs","iconAction","iconSlash","badge","badgeClass","badgeA11yText","outputs","features","ɵɵNgOnChangesFeature","decls","vars","template","CoreContextMenuItemComponent_Template","rf","ctx","encapsulation"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/context-menu/context-menu-item.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, Output, OnInit, OnDestroy, EventEmitter, OnChanges, SimpleChange } from '@angular/core';\nimport { CoreContextMenuComponent } from '../context-menu/context-menu';\n\n/**\n * This directive adds a item to the Context Menu popover.\n *\n * @description\n * This directive defines and item to be added to the popover generated in CoreContextMenu.\n *\n * It is required to place this tag inside a core-context-menu tag.\n *\n * <core-context-menu>\n *     <core-context-menu-item [hidden]=\"showGrid\" [priority]=\"601\" [content]=\"'core.layoutgrid' | translate\"\n *         (action)=\"switchGrid()\" [iconAction]=\"'apps'\"></core-context-menu-item>\n * </core-context-menu>\n */\n@Component({\n    selector: 'core-context-menu-item',\n    template: '',\n})\nexport class CoreContextMenuItemComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input() content?: string; // Content of the item.\n    @Input() iconAction?: string; // Name of the icon to show on the right side of the item. Represents the action to do on click.\n    // If is \"spinner\" an spinner will be shown.\n    // If is \"toggle\" a toggle switch will be shown.\n    // If no icon or spinner is selected, no action or link will work.\n    // If href but no iconAction is provided arrow-right will be used.\n    @Input() iconSlash?: boolean; // Display a red slash over the icon.\n    @Input() ariaAction?: string; // Aria label to add to iconAction. If not set, it will be equal to content.\n    @Input() href?: string; // Link to go if no action provided.\n    @Input() captureLink?: boolean | string; // Whether the link needs to be captured by the app.\n    @Input() autoLogin: boolean | string = true; // Whether the link needs to be opened using auto-login.\n    @Input() closeOnClick = true; // Whether to close the popover when the item is clicked.\n    @Input() priority?: number; // Used to sort items. The highest priority, the highest position.\n    @Input() badge?: string; // A badge to show in the item.\n    @Input() badgeClass?: number; // A class to set in the badge.\n    @Input() badgeA11yText?: string; // Description for the badge, if needed.\n    @Input() hidden?: boolean; // Whether the item should be hidden.\n    @Input() showBrowserWarning = true; // Whether to show a warning before opening browser (for links). Defaults to true.\n    @Input() toggle = false; // Whether the toggle is on or off.\n    @Output() action?: EventEmitter<() => void>; // Will emit an event when the item clicked.\n    @Output() onClosed?: EventEmitter<() => void>; // Will emit an event when the popover is closed because the item was clicked.\n    @Output() toggleChange = new EventEmitter<boolean>();// Will emit an event when toggle changes to enable 2-way data binding.\n\n    protected hasAction = false;\n    protected destroyed = false;\n\n    constructor(\n        protected ctxtMenu: CoreContextMenuComponent,\n    ) {\n        this.action = new EventEmitter();\n        this.onClosed = new EventEmitter();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        // Initialize values.\n        this.priority = this.priority || 1;\n        this.hasAction = !!this.action && this.action.observed;\n        this.ariaAction = this.ariaAction || this.content;\n\n        if (this.hasAction) {\n            this.href = '';\n        }\n\n        // Navigation help if href provided.\n        this.captureLink = this.href && this.captureLink ? this.captureLink : false;\n\n        if (!this.destroyed) {\n            this.ctxtMenu.addItem(this);\n        }\n    }\n\n    /**\n     * Toggle changed.\n     *\n     * @param event Event.\n     */\n    toggleChanged(event: Event): void {\n        if (this.toggle === undefined) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        this.toggleChange.emit(this.toggle);\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.destroyed = true;\n        this.ctxtMenu.removeItem(this);\n    }\n\n    /**\n     * Detect changes on input properties.\n     */\n    ngOnChanges(changes: { [name: string]: SimpleChange }): void {\n        if (changes.hidden && !changes.hidden.firstChange) {\n            this.ctxtMenu.itemsChanged();\n        }\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAsDA,YAAY,QAAiC,eAAe;;;AAGlH;;;;;;;;;;;;;AAiBA,OAAM,MAAOC,4BAA4B;EA4BrCC,YACcC,QAAkC;IAAlC,KAAAA,QAAQ,GAARA,QAAQ;IAjBb,KAAAC,SAAS,GAAqB,IAAI,CAAC,CAAC;IACpC,KAAAC,YAAY,GAAG,IAAI,CAAC,CAAC;IAMrB,KAAAC,kBAAkB,GAAG,IAAI,CAAC,CAAC;IAC3B,KAAAC,MAAM,GAAG,KAAK,CAAC,CAAC;IAGf,KAAAC,YAAY,GAAG,IAAIR,YAAY,EAAW,CAAC;IAE3C,KAAAS,SAAS,GAAG,KAAK;IACjB,KAAAC,SAAS,GAAG,KAAK;IAKvB,IAAI,CAACC,MAAM,GAAG,IAAIX,YAAY,EAAE;IAChC,IAAI,CAACY,QAAQ,GAAG,IAAIZ,YAAY,EAAE;EACtC;EAEA;;;EAGAa,QAAQA,CAAA;IACJ;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,IAAI,CAAC;IAClC,IAAI,CAACL,SAAS,GAAG,CAAC,CAAC,IAAI,CAACE,MAAM,IAAI,IAAI,CAACA,MAAM,CAACI,QAAQ;IACtD,IAAI,CAACC,UAAU,GAAG,IAAI,CAACA,UAAU,IAAI,IAAI,CAACC,OAAO;IAEjD,IAAI,IAAI,CAACR,SAAS,EAAE;MAChB,IAAI,CAACS,IAAI,GAAG,EAAE;;IAGlB;IACA,IAAI,CAACC,WAAW,GAAG,IAAI,CAACD,IAAI,IAAI,IAAI,CAACC,WAAW,GAAG,IAAI,CAACA,WAAW,GAAG,KAAK;IAE3E,IAAI,CAAC,IAAI,CAACT,SAAS,EAAE;MACjB,IAAI,CAACP,QAAQ,CAACiB,OAAO,CAAC,IAAI,CAAC;;EAEnC;EAEA;;;;;EAKAC,aAAaA,CAACC,KAAY;IACtB,IAAI,IAAI,CAACf,MAAM,KAAKgB,SAAS,EAAE;MAC3B;;IAGJD,KAAK,CAACE,cAAc,EAAE;IACtBF,KAAK,CAACG,eAAe,EAAE;IACvB,IAAI,CAACjB,YAAY,CAACkB,IAAI,CAAC,IAAI,CAACnB,MAAM,CAAC;EACvC;EAEA;;;EAGAoB,WAAWA,CAAA;IACP,IAAI,CAACjB,SAAS,GAAG,IAAI;IACrB,IAAI,CAACP,QAAQ,CAACyB,UAAU,CAAC,IAAI,CAAC;EAClC;EAEA;;;EAGAC,WAAWA,CAACC,OAAyC;IACjD,IAAIA,OAAO,CAACC,MAAM,IAAI,CAACD,OAAO,CAACC,MAAM,CAACC,WAAW,EAAE;MAC/C,IAAI,CAAC7B,QAAQ,CAAC8B,YAAY,EAAE;;EAEpC;;SAtFShC,4BAA4B;;mBAA5BA,MAA4B,EAAAiC,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,wBAAA;AAAA;;QAA5BpC,MAA4B;EAAAqC,SAAA;EAAAC,MAAA;IAAAtB,OAAA;IAAAuB,UAAA;IAAAC,SAAA;IAAAzB,UAAA;IAAAE,IAAA;IAAAC,WAAA;IAAAf,SAAA;IAAAC,YAAA;IAAAS,QAAA;IAAA4B,KAAA;IAAAC,UAAA;IAAAC,aAAA;IAAAb,MAAA;IAAAzB,kBAAA;IAAAC,MAAA;EAAA;EAAAsC,OAAA;IAAAlC,MAAA;IAAAC,QAAA;IAAAJ,YAAA;EAAA;EAAAsC,QAAA,GAAAZ,EAAA,CAAAa,oBAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,sCAAAC,EAAA,EAAAC,GAAA;EAAAC,aAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}