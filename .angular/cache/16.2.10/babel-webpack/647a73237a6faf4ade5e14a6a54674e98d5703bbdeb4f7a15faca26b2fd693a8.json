{"ast":null,"code":";\nexport class ParallelHasher {\n  constructor(workerUri, workerOptions) {\n    this._queue = [];\n    this._ready = true;\n    const self = this;\n    if (Worker) {\n      self._hashWorker = new Worker(workerUri, workerOptions);\n      self._hashWorker.onmessage = self._recievedMessage.bind(self);\n      self._hashWorker.onerror = err => {\n        self._ready = false;\n        console.error('Hash worker failure', err);\n      };\n    } else {\n      self._ready = false;\n      console.error('Web Workers are not supported in this browser');\n    }\n  }\n  /**\n   * Hash a blob of data in the worker\n   * @param blob Data to hash\n   * @returns Promise of the Hashed result\n   */\n  hash(blob) {\n    const self = this;\n    let promise;\n    promise = new Promise((resolve, reject) => {\n      self._queue.push({\n        blob,\n        resolve,\n        reject\n      });\n      self._processNext();\n    });\n    return promise;\n  }\n  /** Terminate any existing hash requests */\n  terminate() {\n    this._ready = false;\n    this._hashWorker.terminate();\n  }\n  // Processes the next item in the queue\n  _processNext() {\n    if (this._ready && !this._processing && this._queue.length > 0) {\n      this._processing = this._queue.pop();\n      this._hashWorker.postMessage(this._processing.blob);\n    }\n  }\n  // Hash result is returned from the worker\n  _recievedMessage(evt) {\n    var _a, _b;\n    const data = evt.data;\n    if (data.success) {\n      (_a = this._processing) === null || _a === void 0 ? void 0 : _a.resolve(data.result);\n    } else {\n      (_b = this._processing) === null || _b === void 0 ? void 0 : _b.reject(data.result);\n    }\n    this._processing = undefined;\n    this._processNext();\n  }\n}","map":{"version":3,"names":["ParallelHasher","constructor","workerUri","workerOptions","_queue","_ready","self","Worker","_hashWorker","onmessage","_recievedMessage","bind","onerror","err","console","error","hash","blob","promise","Promise","resolve","reject","push","_processNext","terminate","_processing","length","pop","postMessage","evt","_a","_b","data","success","result","undefined"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/node_modules/ts-md5/dist/esm/parallel_hasher.js"],"sourcesContent":[";\nexport class ParallelHasher {\n    constructor(workerUri, workerOptions) {\n        this._queue = [];\n        this._ready = true;\n        const self = this;\n        if (Worker) {\n            self._hashWorker = new Worker(workerUri, workerOptions);\n            self._hashWorker.onmessage = self._recievedMessage.bind(self);\n            self._hashWorker.onerror = (err) => {\n                self._ready = false;\n                console.error('Hash worker failure', err);\n            };\n        }\n        else {\n            self._ready = false;\n            console.error('Web Workers are not supported in this browser');\n        }\n    }\n    /**\n     * Hash a blob of data in the worker\n     * @param blob Data to hash\n     * @returns Promise of the Hashed result\n     */\n    hash(blob) {\n        const self = this;\n        let promise;\n        promise = new Promise((resolve, reject) => {\n            self._queue.push({\n                blob,\n                resolve,\n                reject,\n            });\n            self._processNext();\n        });\n        return promise;\n    }\n    /** Terminate any existing hash requests */\n    terminate() {\n        this._ready = false;\n        this._hashWorker.terminate();\n    }\n    // Processes the next item in the queue\n    _processNext() {\n        if (this._ready && !this._processing && this._queue.length > 0) {\n            this._processing = this._queue.pop();\n            this._hashWorker.postMessage(this._processing.blob);\n        }\n    }\n    // Hash result is returned from the worker\n    _recievedMessage(evt) {\n        var _a, _b;\n        const data = evt.data;\n        if (data.success) {\n            (_a = this._processing) === null || _a === void 0 ? void 0 : _a.resolve(data.result);\n        }\n        else {\n            (_b = this._processing) === null || _b === void 0 ? void 0 : _b.reject(data.result);\n        }\n        this._processing = undefined;\n        this._processNext();\n    }\n}\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,CAAC;EACxBC,WAAWA,CAACC,SAAS,EAAEC,aAAa,EAAE;IAClC,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,MAAMC,IAAI,GAAG,IAAI;IACjB,IAAIC,MAAM,EAAE;MACRD,IAAI,CAACE,WAAW,GAAG,IAAID,MAAM,CAACL,SAAS,EAAEC,aAAa,CAAC;MACvDG,IAAI,CAACE,WAAW,CAACC,SAAS,GAAGH,IAAI,CAACI,gBAAgB,CAACC,IAAI,CAACL,IAAI,CAAC;MAC7DA,IAAI,CAACE,WAAW,CAACI,OAAO,GAAIC,GAAG,IAAK;QAChCP,IAAI,CAACD,MAAM,GAAG,KAAK;QACnBS,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MAC7C,CAAC;IACL,CAAC,MACI;MACDP,IAAI,CAACD,MAAM,GAAG,KAAK;MACnBS,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;IAClE;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIC,IAAIA,CAACC,IAAI,EAAE;IACP,MAAMX,IAAI,GAAG,IAAI;IACjB,IAAIY,OAAO;IACXA,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACvCf,IAAI,CAACF,MAAM,CAACkB,IAAI,CAAC;QACbL,IAAI;QACJG,OAAO;QACPC;MACJ,CAAC,CAAC;MACFf,IAAI,CAACiB,YAAY,CAAC,CAAC;IACvB,CAAC,CAAC;IACF,OAAOL,OAAO;EAClB;EACA;EACAM,SAASA,CAAA,EAAG;IACR,IAAI,CAACnB,MAAM,GAAG,KAAK;IACnB,IAAI,CAACG,WAAW,CAACgB,SAAS,CAAC,CAAC;EAChC;EACA;EACAD,YAAYA,CAAA,EAAG;IACX,IAAI,IAAI,CAAClB,MAAM,IAAI,CAAC,IAAI,CAACoB,WAAW,IAAI,IAAI,CAACrB,MAAM,CAACsB,MAAM,GAAG,CAAC,EAAE;MAC5D,IAAI,CAACD,WAAW,GAAG,IAAI,CAACrB,MAAM,CAACuB,GAAG,CAAC,CAAC;MACpC,IAAI,CAACnB,WAAW,CAACoB,WAAW,CAAC,IAAI,CAACH,WAAW,CAACR,IAAI,CAAC;IACvD;EACJ;EACA;EACAP,gBAAgBA,CAACmB,GAAG,EAAE;IAClB,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAMC,IAAI,GAAGH,GAAG,CAACG,IAAI;IACrB,IAAIA,IAAI,CAACC,OAAO,EAAE;MACd,CAACH,EAAE,GAAG,IAAI,CAACL,WAAW,MAAM,IAAI,IAAIK,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACV,OAAO,CAACY,IAAI,CAACE,MAAM,CAAC;IACxF,CAAC,MACI;MACD,CAACH,EAAE,GAAG,IAAI,CAACN,WAAW,MAAM,IAAI,IAAIM,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACV,MAAM,CAACW,IAAI,CAACE,MAAM,CAAC;IACvF;IACA,IAAI,CAACT,WAAW,GAAGU,SAAS;IAC5B,IAAI,CAACZ,YAAY,CAAC,CAAC;EACvB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}