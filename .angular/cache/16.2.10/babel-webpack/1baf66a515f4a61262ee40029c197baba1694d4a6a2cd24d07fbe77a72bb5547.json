{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { Translate } from '@singletons';\nimport { CoreNetwork } from '@services/network';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreFileUploaderHelper } from '@features/fileuploader/services/fileuploader-helper';\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreUtils } from '@services/utils/utils';\nimport * as i0 from \"@angular/core\";\nconst _c0 = function (a0, a1) {\n  return {\n    size: a0,\n    attachments: a1\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    $a: a0\n  };\n};\nfunction CoreAttachmentsComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, \"core.maxsizeandattachments\", i0.ɵɵpureFunction1(7, _c1, i0.ɵɵpureFunction2(4, _c0, ctx_r0.maxSizeReadable, ctx_r0.maxSubmissionsReadable))), \" \");\n  }\n}\nfunction CoreAttachmentsComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(2, 1, \"core.maxfilesize\", i0.ɵɵpureFunction1(4, _c1, ctx_r1.maxSizeReadable)));\n  }\n}\nfunction CoreAttachmentsComponent_ion_item_6_li_6_strong_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"strong\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const typeInfo_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", typeInfo_r6.name, \" \");\n  }\n}\nfunction CoreAttachmentsComponent_ion_item_6_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtemplate(1, CoreAttachmentsComponent_ion_item_6_li_6_strong_1_Template, 2, 1, \"strong\", 2);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const typeInfo_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", typeInfo_r6.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", typeInfo_r6.extlist, \" \");\n  }\n}\nfunction CoreAttachmentsComponent_ion_item_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 1)(1, \"ion-label\")(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ul\", 7);\n    i0.ɵɵtemplate(6, CoreAttachmentsComponent_ion_item_6_li_6_Template, 3, 2, \"li\", 5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 2, \"core.fileuploader.filesofthesetypes\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.fileTypes.info);\n  }\n}\nfunction CoreAttachmentsComponent_div_7_core_file_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"core-file\", 10);\n    i0.ɵɵlistener(\"onDelete\", function CoreAttachmentsComponent_div_7_core_file_1_Template_core_file_onDelete_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const index_r10 = i0.ɵɵnextContext().index;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.delete(index_r10, true));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const file_r9 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"file\", file_r9)(\"component\", ctx_r11.component)(\"componentId\", ctx_r11.componentId)(\"canDelete\", true)(\"canDownload\", !file_r9.offline);\n  }\n}\nfunction CoreAttachmentsComponent_div_7_core_local_file_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"core-local-file\", 11);\n    i0.ɵɵlistener(\"onDelete\", function CoreAttachmentsComponent_div_7_core_local_file_2_Template_core_local_file_onDelete_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const index_r10 = i0.ɵɵnextContext().index;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.delete(index_r10, false));\n    })(\"onRename\", function CoreAttachmentsComponent_div_7_core_local_file_2_Template_core_local_file_onRename_0_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const index_r10 = i0.ɵɵnextContext().index;\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.renamed(index_r10, $event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const file_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"file\", file_r9)(\"manage\", true);\n  }\n}\nfunction CoreAttachmentsComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, CoreAttachmentsComponent_div_7_core_file_1_Template, 1, 5, \"core-file\", 8);\n    i0.ɵɵtemplate(2, CoreAttachmentsComponent_div_7_core_local_file_2_Template, 1, 2, \"core-local-file\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const file_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !file_r9.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", file_r9.name);\n  }\n}\nfunction CoreAttachmentsComponent_ion_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 12);\n    i0.ɵɵlistener(\"click\", function CoreAttachmentsComponent_ion_button_8_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.add());\n    });\n    i0.ɵɵelement(1, \"ion-icon\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"core.fileuploader.addfiletext\"), \" \");\n  }\n}\n/**\n * Component to render attachments, allow adding more and delete the current ones.\n *\n * All the changes done will be applied to the \"files\" input array, no file will be uploaded. The component using this\n * component should be the one uploading and moving the files.\n *\n * All the files added will be copied to the app temporary folder, so they should be deleted after uploading them\n * or if the user cancels the action.\n *\n * <core-attachments [files]=\"files\" [maxSize]=\"configs.maxsubmissionsizebytes\" [maxSubmissions]=\"configs.maxfilesubmissions\"\n *     [component]=\"component\" [componentId]=\"assign.cmid\" [acceptedTypes]=\"configs.filetypeslist\" [allowOffline]=\"allowOffline\">\n * </core-attachments>\n */\nexport class CoreAttachmentsComponent {\n  constructor() {\n    this.files = []; // List of attachments. New attachments will be added to this array.\n    this.loaded = false;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _this$acceptedTypes;\n      _this.files = _this.files || [];\n      _this.maxSize = _this.maxSize !== null ? Number(_this.maxSize) : NaN;\n      if (_this.maxSize === 0) {\n        yield _this.getMaxSizeOfArea();\n      } else if (_this.maxSize > 0) {\n        _this.maxSizeReadable = CoreTextUtils.bytesToSize(_this.maxSize, 2);\n      } else if (_this.maxSize === -1) {\n        _this.maxSizeReadable = Translate.instant('core.unlimited');\n      } else {\n        _this.maxSizeReadable = Translate.instant('core.unknown');\n      }\n      if (_this.maxSubmissions === undefined || _this.maxSubmissions < 0) {\n        _this.maxSubmissionsReadable = _this.maxSubmissions === undefined ? Translate.instant('core.unknown') : undefined;\n        _this.unlimitedFiles = true;\n      } else {\n        _this.maxSubmissionsReadable = String(_this.maxSubmissions);\n      }\n      _this.acceptedTypes = (_this$acceptedTypes = _this.acceptedTypes) === null || _this$acceptedTypes === void 0 ? void 0 : _this$acceptedTypes.trim();\n      if (_this.acceptedTypes && _this.acceptedTypes != '*') {\n        _this.fileTypes = CoreFileUploader.prepareFiletypeList(_this.acceptedTypes);\n      }\n      _this.loaded = true;\n    })();\n  }\n  /**\n   * Get max size of the area.\n   *\n   * @returns Promise resolved when done.\n   */\n  getMaxSizeOfArea() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.courseId) {\n        // Check course max size.\n        const course = yield CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', _this2.courseId));\n        if (course !== null && course !== void 0 && course.maxbytes) {\n          _this2.maxSize = course.maxbytes;\n          _this2.maxSizeReadable = CoreTextUtils.bytesToSize(_this2.maxSize, 2);\n          return;\n        }\n      }\n      // Check user max size.\n      const currentSite = CoreSites.getCurrentSite();\n      const siteInfo = currentSite === null || currentSite === void 0 ? void 0 : currentSite.getInfo();\n      if (siteInfo !== null && siteInfo !== void 0 && siteInfo.usermaxuploadfilesize) {\n        _this2.maxSize = siteInfo.usermaxuploadfilesize;\n        _this2.maxSizeReadable = CoreTextUtils.bytesToSize(_this2.maxSize, 2);\n      } else {\n        _this2.maxSizeReadable = Translate.instant('core.unknown');\n      }\n    })();\n  }\n  /**\n   * Add a new attachment.\n   */\n  add() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const allowOffline = !!_this3.allowOffline && _this3.allowOffline !== 'false';\n      if (!allowOffline && !CoreNetwork.isOnline()) {\n        CoreDomUtils.showErrorModal('core.fileuploader.errormustbeonlinetoupload', true);\n        return;\n      }\n      const mimetypes = _this3.fileTypes && _this3.fileTypes.mimetypes;\n      try {\n        var _this3$files;\n        const result = yield CoreFileUploaderHelper.selectFile(_this3.maxSize, allowOffline, undefined, mimetypes);\n        (_this3$files = _this3.files) === null || _this3$files === void 0 || _this3$files.push(result);\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error selecting file.');\n      }\n    })();\n  }\n  /**\n   * Delete a file from the list.\n   *\n   * @param index The index of the file.\n   * @param askConfirm Whether to ask confirm.\n   */\n  delete(index, askConfirm) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      var _this4$files;\n      if (askConfirm) {\n        try {\n          yield CoreDomUtils.showDeleteConfirm('core.confirmdeletefile');\n        } catch (_unused) {\n          // User cancelled.\n          return;\n        }\n      }\n      // Remove the file from the list.\n      (_this4$files = _this4.files) === null || _this4$files === void 0 || _this4$files.splice(index, 1);\n    })();\n  }\n  /**\n   * A file was renamed.\n   *\n   * @param index Index of the file.\n   * @param data The data received.\n   */\n  renamed(index, data) {\n    this.files[index] = data.file;\n  }\n}\n_class = CoreAttachmentsComponent;\n_class.ɵfac = function CoreAttachmentsComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-attachments\"]],\n  inputs: {\n    files: \"files\",\n    maxSize: \"maxSize\",\n    maxSubmissions: \"maxSubmissions\",\n    component: \"component\",\n    componentId: \"componentId\",\n    allowOffline: \"allowOffline\",\n    acceptedTypes: \"acceptedTypes\",\n    required: \"required\",\n    courseId: \"courseId\"\n  },\n  decls: 9,\n  vars: 8,\n  consts: [[3, \"hideUntil\", \"fullscreen\"], [1, \"ion-text-wrap\"], [4, \"ngIf\"], [1, \"core-mark-required\", 3, \"core-mark-required\"], [\"class\", \"ion-text-wrap\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"expand\", \"block\", \"class\", \"ion-text-wrap ion-margin\", 3, \"click\", 4, \"ngIf\"], [1, \"list-with-style\"], [3, \"file\", \"component\", \"componentId\", \"canDelete\", \"canDownload\", \"onDelete\", 4, \"ngIf\"], [3, \"file\", \"manage\", \"onDelete\", \"onRename\", 4, \"ngIf\"], [3, \"file\", \"component\", \"componentId\", \"canDelete\", \"canDownload\", \"onDelete\"], [3, \"file\", \"manage\", \"onDelete\", \"onRename\"], [\"expand\", \"block\", 1, \"ion-text-wrap\", \"ion-margin\", 3, \"click\"], [\"name\", \"fas-plus\", \"slot\", \"start\", \"aria-hidden\", \"true\"]],\n  template: function CoreAttachmentsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"core-loading\", 0)(1, \"ion-item\", 1)(2, \"ion-label\");\n      i0.ɵɵtemplate(3, CoreAttachmentsComponent_span_3_Template, 3, 9, \"span\", 2);\n      i0.ɵɵtemplate(4, CoreAttachmentsComponent_span_4_Template, 3, 6, \"span\", 2);\n      i0.ɵɵelement(5, \"span\", 3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(6, CoreAttachmentsComponent_ion_item_6_Template, 7, 4, \"ion-item\", 4);\n      i0.ɵɵtemplate(7, CoreAttachmentsComponent_div_7_Template, 3, 2, \"div\", 5);\n      i0.ɵɵtemplate(8, CoreAttachmentsComponent_ion_button_8_Template, 4, 3, \"ion-button\", 6);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded)(\"fullscreen\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.maxSubmissionsReadable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.maxSubmissionsReadable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"core-mark-required\", ctx.required);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.fileTypes && ctx.fileTypes.mimetypes && ctx.fileTypes.mimetypes.length);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.files);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.unlimitedFiles || ctx.maxSubmissions !== undefined && ctx.maxSubmissions >= 0 && ctx.files && ctx.files.length < ctx.maxSubmissions);\n    }\n  },\n  styles: [\"core-loading[_ngcontent-%COMP%] {\\n  --loading-inline-min-height: 60px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9jb3JlL2NvbXBvbmVudHMvYXR0YWNobWVudHMvYXR0YWNobWVudHMuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGlDQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJjb3JlLWxvYWRpbmcge1xuICAgIC0tbG9hZGluZy1pbmxpbmUtbWluLWhlaWdodDogNjBweDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"names":["CoreFileUploader","CoreSites","CoreTextUtils","Translate","CoreNetwork","CoreDomUtils","CoreFileUploaderHelper","CoreCourses","CoreUtils","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind2","ɵɵpureFunction1","_c1","ɵɵpureFunction2","_c0","ctx_r0","maxSizeReadable","maxSubmissionsReadable","ɵɵtextInterpolate","ctx_r1","typeInfo_r6","name","ɵɵtemplate","CoreAttachmentsComponent_ion_item_6_li_6_strong_1_Template","ɵɵproperty","extlist","CoreAttachmentsComponent_ion_item_6_li_6_Template","ɵɵpipeBind1","ctx_r2","fileTypes","info","ɵɵlistener","CoreAttachmentsComponent_div_7_core_file_1_Template_core_file_onDelete_0_listener","ɵɵrestoreView","_r15","index_r10","ɵɵnextContext","index","ctx_r13","ɵɵresetView","delete","file_r9","ctx_r11","component","componentId","offline","CoreAttachmentsComponent_div_7_core_local_file_2_Template_core_local_file_onDelete_0_listener","_r19","ctx_r17","CoreAttachmentsComponent_div_7_core_local_file_2_Template_core_local_file_onRename_0_listener","$event","ctx_r20","renamed","CoreAttachmentsComponent_div_7_core_file_1_Template","CoreAttachmentsComponent_div_7_core_local_file_2_Template","CoreAttachmentsComponent_ion_button_8_Template_ion_button_click_0_listener","_r24","ctx_r23","add","ɵɵelement","CoreAttachmentsComponent","constructor","files","loaded","ngOnInit","_this","_asyncToGenerator","_this$acceptedTypes","maxSize","Number","NaN","getMaxSizeOfArea","bytesToSize","instant","maxSubmissions","undefined","unlimitedFiles","String","acceptedTypes","trim","prepareFiletypeList","_this2","courseId","course","ignoreErrors","getCourseByField","maxbytes","currentSite","getCurrentSite","siteInfo","getInfo","usermaxuploadfilesize","_this3","allowOffline","isOnline","showErrorModal","mimetypes","_this3$files","result","selectFile","push","error","showErrorModalDefault","askConfirm","_this4","_this4$files","showDeleteConfirm","_unused","splice","data","file","selectors","inputs","required","decls","vars","consts","template","CoreAttachmentsComponent_Template","rf","ctx","CoreAttachmentsComponent_span_3_Template","CoreAttachmentsComponent_span_4_Template","CoreAttachmentsComponent_ion_item_6_Template","CoreAttachmentsComponent_div_7_Template","CoreAttachmentsComponent_ion_button_8_Template","length"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/attachments/attachments.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/attachments/core-attachments.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FileEntry } from '@awesome-cordova-plugins/file/ngx';\n\nimport { CoreFileUploader, CoreFileUploaderTypeList } from '@features/fileuploader/services/fileuploader';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { Translate } from '@singletons';\nimport { CoreNetwork } from '@services/network';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreFileUploaderHelper } from '@features/fileuploader/services/fileuploader-helper';\nimport { CoreFileEntry } from '@services/file-helper';\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreUtils } from '@services/utils/utils';\n\n/**\n * Component to render attachments, allow adding more and delete the current ones.\n *\n * All the changes done will be applied to the \"files\" input array, no file will be uploaded. The component using this\n * component should be the one uploading and moving the files.\n *\n * All the files added will be copied to the app temporary folder, so they should be deleted after uploading them\n * or if the user cancels the action.\n *\n * <core-attachments [files]=\"files\" [maxSize]=\"configs.maxsubmissionsizebytes\" [maxSubmissions]=\"configs.maxfilesubmissions\"\n *     [component]=\"component\" [componentId]=\"assign.cmid\" [acceptedTypes]=\"configs.filetypeslist\" [allowOffline]=\"allowOffline\">\n * </core-attachments>\n */\n@Component({\n    selector: 'core-attachments',\n    templateUrl: 'core-attachments.html',\n    styleUrls: ['attachments.scss'],\n})\nexport class CoreAttachmentsComponent implements OnInit {\n\n    @Input() files: CoreFileEntry[] = []; // List of attachments. New attachments will be added to this array.\n    @Input() maxSize?: number; // Max size. -1 means unlimited, 0 means course/user max size, not defined means unknown.\n    @Input() maxSubmissions?: number; // Max number of attachments. -1 means unlimited, not defined means unknown limit.\n    @Input() component?: string; // Component the downloaded files will be linked to.\n    @Input() componentId?: string | number; // Component ID.\n    @Input() allowOffline?: boolean | string; // Whether to allow selecting files in offline.\n    @Input() acceptedTypes?: string; // List of supported filetypes. If undefined, all types supported.\n    @Input() required?: boolean; // Whether to display the required mark.\n    @Input() courseId?: number; // Course ID.\n\n    maxSizeReadable?: string;\n    maxSubmissionsReadable?: string;\n    unlimitedFiles?: boolean;\n    fileTypes?: CoreFileUploaderTypeList;\n    loaded = false;\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.files = this.files || [];\n        this.maxSize = this.maxSize !== null ? Number(this.maxSize) : NaN;\n\n        if (this.maxSize === 0) {\n            await this.getMaxSizeOfArea();\n        } else if (this.maxSize > 0) {\n            this.maxSizeReadable = CoreTextUtils.bytesToSize(this.maxSize, 2);\n        } else if (this.maxSize === -1) {\n            this.maxSizeReadable = Translate.instant('core.unlimited');\n        } else {\n            this.maxSizeReadable = Translate.instant('core.unknown');\n        }\n\n        if (this.maxSubmissions === undefined || this.maxSubmissions < 0) {\n            this.maxSubmissionsReadable = this.maxSubmissions === undefined ?\n                Translate.instant('core.unknown') : undefined;\n            this.unlimitedFiles = true;\n        } else {\n            this.maxSubmissionsReadable = String(this.maxSubmissions);\n        }\n\n        this.acceptedTypes = this.acceptedTypes?.trim();\n\n        if (this.acceptedTypes && this.acceptedTypes != '*') {\n            this.fileTypes = CoreFileUploader.prepareFiletypeList(this.acceptedTypes);\n        }\n\n        this.loaded = true;\n    }\n\n    /**\n     * Get max size of the area.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async getMaxSizeOfArea(): Promise<void> {\n        if (this.courseId) {\n            // Check course max size.\n            const course = await CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', this.courseId));\n\n            if (course?.maxbytes) {\n                this.maxSize = course.maxbytes;\n                this.maxSizeReadable = CoreTextUtils.bytesToSize(this.maxSize, 2);\n\n                return;\n            }\n        }\n\n        // Check user max size.\n        const currentSite = CoreSites.getCurrentSite();\n        const siteInfo = currentSite?.getInfo();\n\n        if (siteInfo?.usermaxuploadfilesize) {\n            this.maxSize = siteInfo.usermaxuploadfilesize;\n            this.maxSizeReadable = CoreTextUtils.bytesToSize(this.maxSize, 2);\n        } else {\n            this.maxSizeReadable = Translate.instant('core.unknown');\n        }\n    }\n\n    /**\n     * Add a new attachment.\n     */\n    async add(): Promise<void> {\n        const allowOffline = !!this.allowOffline && this.allowOffline !== 'false';\n\n        if (!allowOffline && !CoreNetwork.isOnline()) {\n            CoreDomUtils.showErrorModal('core.fileuploader.errormustbeonlinetoupload', true);\n\n            return;\n        }\n\n        const mimetypes = this.fileTypes && this.fileTypes.mimetypes;\n\n        try {\n            const result = await CoreFileUploaderHelper.selectFile(this.maxSize, allowOffline, undefined, mimetypes);\n\n            this.files?.push(result);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error selecting file.');\n        }\n    }\n\n    /**\n     * Delete a file from the list.\n     *\n     * @param index The index of the file.\n     * @param askConfirm Whether to ask confirm.\n     */\n    async delete(index: number, askConfirm?: boolean): Promise<void> {\n\n        if (askConfirm) {\n            try {\n                await CoreDomUtils.showDeleteConfirm('core.confirmdeletefile');\n            } catch {\n                // User cancelled.\n                return;\n            }\n        }\n\n        // Remove the file from the list.\n        this.files?.splice(index, 1);\n    }\n\n    /**\n     * A file was renamed.\n     *\n     * @param index Index of the file.\n     * @param data The data received.\n     */\n    renamed(index: number, data: { file: FileEntry }): void {\n        this.files[index] = data.file;\n    }\n\n}\n","<core-loading [hideUntil]=\"loaded\" [fullscreen]=\"false\">\n    <ion-item class=\"ion-text-wrap\">\n        <ion-label>\n            <span *ngIf=\"maxSubmissionsReadable\">\n                {{ 'core.maxsizeandattachments' | translate:{$a: {size: maxSizeReadable, attachments: maxSubmissionsReadable} } }}\n            </span>\n            <span *ngIf=\"!maxSubmissionsReadable\">{{ 'core.maxfilesize' | translate:{$a: maxSizeReadable} }}</span>\n            <span [core-mark-required]=\"required\" class=\"core-mark-required\"></span>\n        </ion-label>\n    </ion-item>\n    <ion-item class=\"ion-text-wrap\" *ngIf=\"fileTypes && fileTypes.mimetypes && fileTypes.mimetypes.length\">\n        <ion-label>\n            <p>{{ 'core.fileuploader.filesofthesetypes' | translate }}</p>\n            <ul class=\"list-with-style\">\n                <li *ngFor=\"let typeInfo of fileTypes.info\">\n                    <strong *ngIf=\"typeInfo.name\">{{typeInfo.name}} </strong>{{typeInfo.extlist}}\n                </li>\n            </ul>\n        </ion-label>\n    </ion-item>\n    <div *ngFor=\"let file of files; let index=index\">\n        <!-- Files already attached to the submission, either in online or in offline. -->\n        <core-file *ngIf=\"!file.name\" [file]=\"file\" [component]=\"component\" [componentId]=\"componentId\" [canDelete]=\"true\"\n            (onDelete)=\"delete(index, true)\" [canDownload]=\"!file.offline\" />\n\n        <!-- Files added to draft but not attached to submission yet. -->\n        <core-local-file *ngIf=\"file.name\" [file]=\"file\" [manage]=\"true\" (onDelete)=\"delete(index, false)\"\n            (onRename)=\"renamed(index, $event)\" />\n    </div>\n\n    <!-- Button to add more files. -->\n    <ion-button expand=\"block\"\n        *ngIf=\"unlimitedFiles || (maxSubmissions !== undefined && maxSubmissions >= 0 && files && files.length < maxSubmissions)\"\n        class=\"ion-text-wrap ion-margin\" (click)=\"add()\">\n        <ion-icon name=\"fas-plus\" slot=\"start\" aria-hidden=\"true\" />\n        {{ 'core.fileuploader.addfiletext' | translate }}\n    </ion-button>\n</core-loading>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}