{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Subject } from 'rxjs';\nimport { CoreLogger } from '@singletons/logger';\n/*\n * Service to send and listen to events.\n */\nexport class CoreEvents {\n  /**\n   * Listen for a certain event. To stop listening to the event:\n   * let observer = eventsProvider.on('something', myCallBack);\n   * ...\n   * observer.off();\n   *\n   * @param eventName Name of the event to listen to.\n   * @param callBack Function to call when the event is triggered.\n   * @param siteId Site where to trigger the event. Undefined won't check the site.\n   * @returns Observer to stop listening.\n   */\n  static on(eventName, callBack, siteId) {\n    // If it's a unique event and has been triggered already, call the callBack.\n    // We don't need to create an observer because the event won't be triggered again.\n    if (this.uniqueEvents[eventName]) {\n      callBack(this.uniqueEvents[eventName].data);\n      // Return a fake observer to prevent errors.\n      return {\n        off: () => {\n          // Nothing to do.\n        }\n      };\n    }\n    this.logger.debug(`New observer listening to event '${eventName}'`);\n    if (this.observables[eventName] === undefined) {\n      // No observable for this event, create a new one.\n      this.observables[eventName] = new Subject();\n    }\n    const subscription = this.observables[eventName].subscribe(value => {\n      if (!siteId || value.siteId == siteId) {\n        callBack(value);\n      }\n    });\n    // Create and return a CoreEventObserver.\n    return {\n      off: () => {\n        this.logger.debug(`Stop listening to event '${eventName}'`);\n        subscription.unsubscribe();\n      }\n    };\n  }\n  /**\n   * Listen once for a certain event. To stop listening to the event (in case it wasn't triggered):\n   * let observer = eventsProvider.on('something', myCallBack);\n   * ...\n   * observer.off();\n   *\n   * @param eventName Name of the event to listen to.\n   * @param callBack Function to call when the event is triggered.\n   * @param siteId Site where to trigger the event. Undefined won't check the site.\n   * @returns Observer to stop listening.\n   */\n  static once(eventName, callBack, siteId) {\n    const listener = CoreEvents.on(eventName, value => {\n      listener.off();\n      callBack(value);\n    }, siteId);\n    return listener;\n  }\n  /**\n   * Listen for several events. To stop listening to the events:\n   * let observer = eventsProvider.onMultiple(['something', 'another'], myCallBack);\n   * ...\n   * observer.off();\n   *\n   * @param eventNames Names of the events to listen to.\n   * @param callBack Function to call when any of the events is triggered.\n   * @param siteId Site where to trigger the event. Undefined won't check the site.\n   * @returns Observer to stop listening.\n   */\n  static onMultiple(eventNames, callBack, siteId) {\n    const observers = eventNames.map(name => this.on(name, callBack, siteId));\n    // Create and return a CoreEventObserver.\n    return {\n      off: () => {\n        observers.forEach(observer => {\n          observer.off();\n        });\n      }\n    };\n  }\n  /**\n   * Triggers an event, notifying all the observers.\n   *\n   * @param eventName Name of the event to trigger.\n   * @param data Data to pass to the observers.\n   * @param siteId Site where to trigger the event. Undefined means no Site.\n   */\n  static trigger(eventName, data, siteId) {\n    this.logger.debug(`Event '${eventName}' triggered.`);\n    if (this.observables[eventName]) {\n      if (siteId) {\n        Object.assign(data || {}, {\n          siteId\n        });\n      }\n      this.observables[eventName].next(data || {});\n    }\n  }\n  /**\n   * Triggers a unique event, notifying all the observers. If the event has already been triggered, don't do anything.\n   *\n   * @param eventName Name of the event to trigger.\n   * @param data Data to pass to the observers.\n   * @param siteId Site where to trigger the event. Undefined means no Site.\n   */\n  static triggerUnique(eventName, data, siteId) {\n    if (this.uniqueEvents[eventName]) {\n      this.logger.debug(`Unique event '${eventName}' ignored because it was already triggered.`);\n    } else {\n      this.logger.debug(`Unique event '${eventName}' triggered.`);\n      if (siteId) {\n        Object.assign(data || {}, {\n          siteId\n        });\n      }\n      // Store the data so it can be passed to observers that register from now on.\n      this.uniqueEvents[eventName] = {\n        data\n      };\n      // Now pass the data to observers.\n      if (this.observables[eventName]) {\n        this.observables[eventName].next(data);\n      }\n    }\n  }\n  /**\n   * Wait until an event has been emitted.\n   *\n   * @param eventName Event name.\n   */\n  static waitUntil(eventName) {\n    return new Promise(resolve => this.once(eventName, () => resolve()));\n  }\n}\n_class = CoreEvents;\n_class.SESSION_EXPIRED = 'session_expired';\n_class.PASSWORD_CHANGE_FORCED = 'password_change_forced';\n_class.USER_NOT_FULLY_SETUP = 'user_not_fully_setup';\n_class.SITE_POLICY_AGREED = 'site_policy_agreed';\n_class.SITE_POLICY_NOT_AGREED = 'site_policy_not_agreed';\n_class.LOGIN = 'login';\n_class.LOGOUT = 'logout';\n_class.LANGUAGE_CHANGED = 'language_changed';\n_class.NOTIFICATION_SOUND_CHANGED = 'notification_sound_changed';\n_class.SITE_ADDED = 'site_added';\n_class.SITE_UPDATED = 'site_updated';\n_class.SITE_DELETED = 'site_deleted';\n_class.COMPLETION_MODULE_VIEWED = 'completion_module_viewed';\n_class.MANUAL_COMPLETION_CHANGED = 'manual_completion_changed';\n_class.USER_DELETED = 'user_deleted';\n_class.USER_SUSPENDED = 'user_suspended';\n_class.USER_NO_LOGIN = 'user_no_login';\n_class.PACKAGE_STATUS_CHANGED = 'package_status_changed';\n_class.COURSE_STATUS_CHANGED = 'course_status_changed';\n_class.SECTION_STATUS_CHANGED = 'section_status_changed';\n_class.COMPONENT_FILE_ACTION = 'component_file_action';\n_class.SITE_PLUGINS_LOADED = 'site_plugins_loaded';\n_class.SITE_PLUGINS_COURSE_RESTRICT_UPDATED = 'site_plugins_course_restrict_updated';\n_class.LOGIN_SITE_CHECKED = 'login_site_checked';\n_class.LOGIN_SITE_UNCHECKED = 'login_site_unchecked';\n_class.IAB_LOAD_START = 'inappbrowser_load_start';\n_class.IAB_LOAD_STOP = 'inappbrowser_load_stop';\n_class.IAB_EXIT = 'inappbrowser_exit';\n_class.IAB_MESSAGE = 'inappbrowser_message';\n_class.APP_LAUNCHED_URL = 'app_launched_url';\n// App opened with a certain URL (custom URL scheme).\n_class.FILE_SHARED = 'file_shared';\n_class.KEYBOARD_CHANGE = 'keyboard_change';\n_class.ORIENTATION_CHANGE = 'orientation_change';\n_class.SEND_ON_ENTER_CHANGED = 'send_on_enter_changed';\n_class.SELECT_COURSE_TAB = 'select_course_tab';\n_class.WS_CACHE_INVALIDATED = 'ws_cache_invalidated';\n_class.SITE_STORAGE_DELETED = 'site_storage_deleted';\n_class.FORM_ACTION = 'form_action';\n_class.ACTIVITY_DATA_SENT = 'activity_data_sent';\n_class.DEVICE_REGISTERED_IN_MOODLE = 'device_registered_in_moodle';\n_class.COURSE_MODULE_VIEWED = 'course_module_viewed';\n_class.COMPLETE_REQUIRED_PROFILE_DATA_FINISHED = 'complete_required_profile_data_finished';\n_class.MAIN_HOME_LOADED = 'main_home_loaded';\n_class.FULL_SCREEN_CHANGED = 'full_screen_changed';\n_class.logger = CoreLogger.getInstance('CoreEvents');\n_class.observables = {};\n_class.uniqueEvents = {};\nexport var CoreEventFormAction;\n(function (CoreEventFormAction) {\n  CoreEventFormAction[\"CANCEL\"] = \"cancel\";\n  CoreEventFormAction[\"SUBMIT\"] = \"submit\";\n})(CoreEventFormAction || (CoreEventFormAction = {}));","map":{"version":3,"names":["Subject","CoreLogger","CoreEvents","on","eventName","callBack","siteId","uniqueEvents","data","off","logger","debug","observables","undefined","subscription","subscribe","value","unsubscribe","once","listener","onMultiple","eventNames","observers","map","name","forEach","observer","trigger","Object","assign","next","triggerUnique","waitUntil","Promise","resolve","_class","SESSION_EXPIRED","PASSWORD_CHANGE_FORCED","USER_NOT_FULLY_SETUP","SITE_POLICY_AGREED","SITE_POLICY_NOT_AGREED","LOGIN","LOGOUT","LANGUAGE_CHANGED","NOTIFICATION_SOUND_CHANGED","SITE_ADDED","SITE_UPDATED","SITE_DELETED","COMPLETION_MODULE_VIEWED","MANUAL_COMPLETION_CHANGED","USER_DELETED","USER_SUSPENDED","USER_NO_LOGIN","PACKAGE_STATUS_CHANGED","COURSE_STATUS_CHANGED","SECTION_STATUS_CHANGED","COMPONENT_FILE_ACTION","SITE_PLUGINS_LOADED","SITE_PLUGINS_COURSE_RESTRICT_UPDATED","LOGIN_SITE_CHECKED","LOGIN_SITE_UNCHECKED","IAB_LOAD_START","IAB_LOAD_STOP","IAB_EXIT","IAB_MESSAGE","APP_LAUNCHED_URL","FILE_SHARED","KEYBOARD_CHANGE","ORIENTATION_CHANGE","SEND_ON_ENTER_CHANGED","SELECT_COURSE_TAB","WS_CACHE_INVALIDATED","SITE_STORAGE_DELETED","FORM_ACTION","ACTIVITY_DATA_SENT","DEVICE_REGISTERED_IN_MOODLE","COURSE_MODULE_VIEWED","COMPLETE_REQUIRED_PROFILE_DATA_FINISHED","MAIN_HOME_LOADED","FULL_SCREEN_CHANGED","getInstance","CoreEventFormAction"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/singletons/events.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Subject } from 'rxjs';\n\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreFilepoolComponentFileEventData } from '@services/filepool';\nimport { CoreRedirectPayload } from '@services/navigator';\nimport { CoreCourseModuleCompletionData } from '@features/course/services/course-helper';\nimport { CoreScreenOrientation } from '@services/screen';\nimport { CoreSiteInfoResponse, CoreSitePublicConfigResponse } from '@classes/sites/unauthenticated-site';\n\n/**\n * Observer instance to stop listening to an event.\n */\nexport interface CoreEventObserver {\n    /**\n     * Stop the observer.\n     */\n    off: () => void;\n}\n\n/**\n * Event payloads.\n */\nexport interface CoreEventsData {\n    [CoreEvents.SITE_UPDATED]: CoreEventSiteUpdatedData;\n    [CoreEvents.SITE_ADDED]: CoreEventSiteAddedData;\n    [CoreEvents.SITE_DELETED]: CoreSite;\n    [CoreEvents.SESSION_EXPIRED]: CoreEventSessionExpiredData;\n    [CoreEvents.COURSE_STATUS_CHANGED]: CoreEventCourseStatusChanged;\n    [CoreEvents.PACKAGE_STATUS_CHANGED]: CoreEventPackageStatusChanged;\n    [CoreEvents.USER_DELETED]: CoreEventUserDeletedData;\n    [CoreEvents.USER_SUSPENDED]: CoreEventUserSuspendedData;\n    [CoreEvents.USER_NO_LOGIN]: CoreEventUserNoLoginData;\n    [CoreEvents.FORM_ACTION]: CoreEventFormActionData;\n    [CoreEvents.NOTIFICATION_SOUND_CHANGED]: CoreEventNotificationSoundChangedData;\n    [CoreEvents.SELECT_COURSE_TAB]: CoreEventSelectCourseTabData;\n    [CoreEvents.COMPLETION_MODULE_VIEWED]: CoreEventCompletionModuleViewedData;\n    [CoreEvents.MANUAL_COMPLETION_CHANGED]: CoreEventManualCompletionChangedData;\n    [CoreEvents.SECTION_STATUS_CHANGED]: CoreEventSectionStatusChangedData;\n    [CoreEvents.ACTIVITY_DATA_SENT]: CoreEventActivityDataSentData;\n    [CoreEvents.IAB_LOAD_START]: InAppBrowserEvent;\n    [CoreEvents.IAB_LOAD_STOP]: InAppBrowserEvent;\n    [CoreEvents.IAB_MESSAGE]: Record<string, unknown>;\n    [CoreEvents.LOGIN_SITE_CHECKED]: CoreEventLoginSiteCheckedData;\n    [CoreEvents.LOGIN_SITE_UNCHECKED]: CoreEventLoginSiteUncheckedData;\n    [CoreEvents.SEND_ON_ENTER_CHANGED]: CoreEventSendOnEnterChangedData;\n    [CoreEvents.COMPONENT_FILE_ACTION]: CoreFilepoolComponentFileEventData;\n    [CoreEvents.FILE_SHARED]: CoreEventFileSharedData;\n    [CoreEvents.APP_LAUNCHED_URL]: CoreEventAppLaunchedData;\n    [CoreEvents.ORIENTATION_CHANGE]: CoreEventOrientationData;\n    [CoreEvents.COURSE_MODULE_VIEWED]: CoreEventCourseModuleViewed;\n    [CoreEvents.COMPLETE_REQUIRED_PROFILE_DATA_FINISHED]: CoreEventCompleteRequiredProfileDataFinished;\n}\n\n/*\n * Service to send and listen to events.\n */\nexport class CoreEvents {\n\n    static readonly SESSION_EXPIRED = 'session_expired';\n    static readonly PASSWORD_CHANGE_FORCED = 'password_change_forced';\n    static readonly USER_NOT_FULLY_SETUP = 'user_not_fully_setup';\n    static readonly SITE_POLICY_AGREED = 'site_policy_agreed';\n    static readonly SITE_POLICY_NOT_AGREED = 'site_policy_not_agreed';\n    static readonly LOGIN = 'login';\n    static readonly LOGOUT = 'logout';\n    static readonly LANGUAGE_CHANGED = 'language_changed';\n    static readonly NOTIFICATION_SOUND_CHANGED = 'notification_sound_changed';\n    static readonly SITE_ADDED = 'site_added';\n    static readonly SITE_UPDATED = 'site_updated';\n    static readonly SITE_DELETED = 'site_deleted';\n    static readonly COMPLETION_MODULE_VIEWED = 'completion_module_viewed';\n    static readonly MANUAL_COMPLETION_CHANGED = 'manual_completion_changed';\n    static readonly USER_DELETED = 'user_deleted';\n    static readonly USER_SUSPENDED = 'user_suspended';\n    static readonly USER_NO_LOGIN = 'user_no_login';\n    static readonly PACKAGE_STATUS_CHANGED = 'package_status_changed';\n    static readonly COURSE_STATUS_CHANGED = 'course_status_changed';\n    static readonly SECTION_STATUS_CHANGED = 'section_status_changed';\n    static readonly COMPONENT_FILE_ACTION = 'component_file_action';\n    static readonly SITE_PLUGINS_LOADED = 'site_plugins_loaded';\n    static readonly SITE_PLUGINS_COURSE_RESTRICT_UPDATED = 'site_plugins_course_restrict_updated';\n    static readonly LOGIN_SITE_CHECKED = 'login_site_checked';\n    static readonly LOGIN_SITE_UNCHECKED = 'login_site_unchecked';\n    static readonly IAB_LOAD_START = 'inappbrowser_load_start';\n    static readonly IAB_LOAD_STOP = 'inappbrowser_load_stop';\n    static readonly IAB_EXIT = 'inappbrowser_exit';\n    static readonly IAB_MESSAGE = 'inappbrowser_message';\n    static readonly APP_LAUNCHED_URL = 'app_launched_url'; // App opened with a certain URL (custom URL scheme).\n    static readonly FILE_SHARED = 'file_shared';\n    static readonly KEYBOARD_CHANGE = 'keyboard_change';\n    static readonly ORIENTATION_CHANGE = 'orientation_change';\n    static readonly SEND_ON_ENTER_CHANGED = 'send_on_enter_changed';\n    static readonly SELECT_COURSE_TAB = 'select_course_tab';\n    static readonly WS_CACHE_INVALIDATED = 'ws_cache_invalidated';\n    static readonly SITE_STORAGE_DELETED = 'site_storage_deleted';\n    static readonly FORM_ACTION = 'form_action';\n    static readonly ACTIVITY_DATA_SENT = 'activity_data_sent';\n    static readonly DEVICE_REGISTERED_IN_MOODLE = 'device_registered_in_moodle';\n    static readonly COURSE_MODULE_VIEWED = 'course_module_viewed';\n    static readonly COMPLETE_REQUIRED_PROFILE_DATA_FINISHED = 'complete_required_profile_data_finished';\n    static readonly MAIN_HOME_LOADED = 'main_home_loaded';\n    static readonly FULL_SCREEN_CHANGED = 'full_screen_changed';\n\n    protected static logger = CoreLogger.getInstance('CoreEvents');\n    protected static observables: { [eventName: string]: Subject<unknown> } = {};\n    protected static uniqueEvents: { [eventName: string]: {data: unknown} } = {};\n\n    /**\n     * Listen for a certain event. To stop listening to the event:\n     * let observer = eventsProvider.on('something', myCallBack);\n     * ...\n     * observer.off();\n     *\n     * @param eventName Name of the event to listen to.\n     * @param callBack Function to call when the event is triggered.\n     * @param siteId Site where to trigger the event. Undefined won't check the site.\n     * @returns Observer to stop listening.\n     */\n    static on<Fallback = unknown, Event extends string = string>(\n        eventName: Event,\n        callBack: (value: CoreEventData<Event, Fallback> & CoreEventSiteData) => void,\n        siteId?: string,\n    ): CoreEventObserver {\n        // If it's a unique event and has been triggered already, call the callBack.\n        // We don't need to create an observer because the event won't be triggered again.\n        if (this.uniqueEvents[eventName]) {\n            callBack(this.uniqueEvents[eventName].data as CoreEventData<Event, Fallback> & CoreEventSiteData);\n\n            // Return a fake observer to prevent errors.\n            return {\n                off: (): void => {\n                    // Nothing to do.\n                },\n            };\n        }\n\n        this.logger.debug(`New observer listening to event '${eventName}'`);\n\n        if (this.observables[eventName] === undefined) {\n            // No observable for this event, create a new one.\n            this.observables[eventName] = new Subject();\n        }\n\n        const subscription = this.observables[eventName].subscribe(\n            (value: CoreEventData<Event, Fallback> & CoreEventSiteData) => {\n                if (!siteId || value.siteId == siteId) {\n                    callBack(value);\n                }\n            },\n        );\n\n        // Create and return a CoreEventObserver.\n        return {\n            off: (): void => {\n                this.logger.debug(`Stop listening to event '${eventName}'`);\n                subscription.unsubscribe();\n            },\n        };\n    }\n\n    /**\n     * Listen once for a certain event. To stop listening to the event (in case it wasn't triggered):\n     * let observer = eventsProvider.on('something', myCallBack);\n     * ...\n     * observer.off();\n     *\n     * @param eventName Name of the event to listen to.\n     * @param callBack Function to call when the event is triggered.\n     * @param siteId Site where to trigger the event. Undefined won't check the site.\n     * @returns Observer to stop listening.\n     */\n    static once<Fallback = unknown, Event extends string = string>(\n        eventName: Event,\n        callBack: (value: CoreEventData<Event, Fallback> & CoreEventSiteData) => void,\n        siteId?: string,\n    ): CoreEventObserver {\n        const listener = CoreEvents.on<Fallback, Event>(eventName, (value) => {\n            listener.off();\n            callBack(value);\n        }, siteId);\n\n        return listener;\n    }\n\n    /**\n     * Listen for several events. To stop listening to the events:\n     * let observer = eventsProvider.onMultiple(['something', 'another'], myCallBack);\n     * ...\n     * observer.off();\n     *\n     * @param eventNames Names of the events to listen to.\n     * @param callBack Function to call when any of the events is triggered.\n     * @param siteId Site where to trigger the event. Undefined won't check the site.\n     * @returns Observer to stop listening.\n     */\n    static onMultiple<T = unknown>(eventNames: string[], callBack: (value: T) => void, siteId?: string): CoreEventObserver {\n        const observers = eventNames.map((name) => this.on<T>(name, callBack, siteId));\n\n        // Create and return a CoreEventObserver.\n        return {\n            off: (): void => {\n                observers.forEach((observer) => {\n                    observer.off();\n                });\n            },\n        };\n    }\n\n    /**\n     * Triggers an event, notifying all the observers.\n     *\n     * @param eventName Name of the event to trigger.\n     * @param data Data to pass to the observers.\n     * @param siteId Site where to trigger the event. Undefined means no Site.\n     */\n    static trigger<Fallback = unknown, Event extends string = string>(\n        eventName: Event,\n        data?: CoreEventData<Event, Fallback>,\n        siteId?: string,\n    ): void {\n        this.logger.debug(`Event '${eventName}' triggered.`);\n        if (this.observables[eventName]) {\n            if (siteId) {\n                Object.assign(data || {}, { siteId });\n            }\n            this.observables[eventName].next(data || {});\n        }\n    }\n\n    /**\n     * Triggers a unique event, notifying all the observers. If the event has already been triggered, don't do anything.\n     *\n     * @param eventName Name of the event to trigger.\n     * @param data Data to pass to the observers.\n     * @param siteId Site where to trigger the event. Undefined means no Site.\n     */\n    static triggerUnique<Fallback = unknown, Event extends string = string>(\n        eventName: Event,\n        data: CoreEventData<Event, Fallback>,\n        siteId?: string,\n    ): void {\n        if (this.uniqueEvents[eventName]) {\n            this.logger.debug(`Unique event '${eventName}' ignored because it was already triggered.`);\n        } else {\n            this.logger.debug(`Unique event '${eventName}' triggered.`);\n\n            if (siteId) {\n                Object.assign(data || {}, { siteId });\n            }\n\n            // Store the data so it can be passed to observers that register from now on.\n            this.uniqueEvents[eventName] = {\n                data,\n            };\n\n            // Now pass the data to observers.\n            if (this.observables[eventName]) {\n                this.observables[eventName].next(data);\n            }\n        }\n    }\n\n    /**\n     * Wait until an event has been emitted.\n     *\n     * @param eventName Event name.\n     */\n    static waitUntil(eventName: string): Promise<void> {\n        return new Promise(resolve => this.once(eventName, () => resolve()));\n    }\n\n}\n\n/**\n * Resolve payload type for a given event.\n */\nexport type CoreEventData<Event, Fallback> = Event extends keyof CoreEventsData ? CoreEventsData[Event] : Fallback;\n\n/**\n * Some events contains siteId added by the trigger function. This type is intended to be combined with others.\n */\nexport type CoreEventSiteData = {\n    siteId?: string;\n};\n\n/**\n * Data passed to SITE_UPDATED event.\n */\nexport type CoreEventSiteUpdatedData = CoreSiteInfoResponse;\n\n/**\n * Data passed to SITE_ADDED event.\n */\nexport type CoreEventSiteAddedData = CoreSiteInfoResponse;\n\n/**\n * Data passed to SESSION_EXPIRED event.\n */\nexport type CoreEventSessionExpiredData = CoreRedirectPayload;\n\n/**\n * Data passed to CORE_LOADING_CHANGED event.\n */\nexport type CoreEventLoadingChangedData = {\n    loaded: boolean;\n    uniqueId: string;\n};\n\n/**\n * Data passed to COURSE_STATUS_CHANGED event.\n */\nexport type CoreEventCourseStatusChanged = {\n    courseId: number; // Course Id.\n    status: string;\n};\n\n/**\n * Data passed to PACKAGE_STATUS_CHANGED event.\n */\nexport type CoreEventPackageStatusChanged = {\n    component: string;\n    componentId: string | number;\n    status: string;\n};\n\n/**\n * Data passed to USER_DELETED event.\n */\nexport type CoreEventUserDeletedData = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params: any; // Params sent to the WS that failed.\n};\n\n/**\n * Data passed to USER_SUSPENDED event.\n */\nexport type CoreEventUserSuspendedData = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params: any; // Params sent to the WS that failed.\n};\n\n/**\n * Data passed to USER_NO_LOGIN event.\n */\nexport type CoreEventUserNoLoginData = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params: any; // Params sent to the WS that failed.\n};\n\nexport enum CoreEventFormAction {\n    CANCEL = 'cancel',\n    SUBMIT = 'submit',\n}\n\n/**\n * Data passed to FORM_ACTION event.\n */\nexport type CoreEventFormActionData = {\n    action: CoreEventFormAction; // Action performed.\n    form: HTMLElement; // Form element.\n    online?: boolean; // Whether the data was sent to server or not. Only when submitting.\n};\n\n/**\n * Data passed to NOTIFICATION_SOUND_CHANGED event.\n */\nexport type CoreEventNotificationSoundChangedData = {\n    enabled: boolean;\n};\n\n/**\n * Data passed to SELECT_COURSE_TAB event.\n */\nexport type CoreEventSelectCourseTabData = {\n    name?: string; // Name of the tab's handler. If not set, load course contents.\n    sectionId?: number;\n    sectionNumber?: number;\n};\n\n/**\n * Data passed to COMPLETION_MODULE_VIEWED event.\n */\nexport type CoreEventCompletionModuleViewedData = {\n    courseId: number;\n    cmId?: number;\n};\n\n/**\n * Data passed to MANUAL_COMPLETION_CHANGED event.\n */\nexport type CoreEventManualCompletionChangedData = {\n    completion: CoreCourseModuleCompletionData;\n};\n\n/**\n * Data passed to SECTION_STATUS_CHANGED event.\n */\nexport type CoreEventSectionStatusChangedData = {\n    courseId: number;\n    sectionId?: number;\n};\n\n/**\n * Data passed to ACTIVITY_DATA_SENT event.\n */\nexport type CoreEventActivityDataSentData = {\n    module: string;\n};\n\n/**\n * Data passed to LOGIN_SITE_CHECKED event.\n */\nexport type CoreEventLoginSiteCheckedData = {\n    config: CoreSitePublicConfigResponse;\n};\n\n/**\n * Data passed to LOGIN_SITE_UNCHECKED event.\n */\nexport type CoreEventLoginSiteUncheckedData = {\n    config?: CoreSitePublicConfigResponse;\n    loginSuccessful: boolean;\n};\n\n/**\n * Data passed to SEND_ON_ENTER_CHANGED event.\n */\nexport type CoreEventSendOnEnterChangedData = {\n    sendOnEnter: boolean;\n};\n\n/**\n * Data passed to FILE_SHARED event.\n */\nexport type CoreEventFileSharedData = {\n    name: string;\n    siteId: string;\n};\n\n/**\n * Data passed to APP_LAUNCHED_URL event.\n */\nexport type CoreEventAppLaunchedData = {\n    url: string;\n};\n\n/**\n * Data passed to ORIENTATION_CHANGE event.\n */\nexport type CoreEventOrientationData = {\n    orientation: CoreScreenOrientation;\n};\n\n/**\n * Data passed to COURSE_MODULE_VIEWED event.\n */\nexport type CoreEventCourseModuleViewed = {\n    courseId: number;\n    cmId: number;\n    timeaccess: number;\n    sectionId?: number;\n};\n\n/**\n * Data passed to COMPLETE_REQUIRED_PROFILE_DATA_FINISHED event.\n */\nexport type CoreEventCompleteRequiredProfileDataFinished = {\n    path: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}