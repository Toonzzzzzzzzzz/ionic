{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldCheckboxComponent } from '../component/checkbox';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for checkbox data field plugin.\n */\nexport class AddonModDataFieldCheckboxHandlerService {\n  constructor() {\n    this.name = 'AddonModDataFieldCheckboxHandler';\n    this.type = 'checkbox';\n  }\n  /**\n   * @inheritdoc\n   */\n  getComponent() {\n    return AddonModDataFieldCheckboxComponent;\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldSearchData(field, inputData) {\n    const fieldName = 'f_' + field.id;\n    const reqName = 'f_' + field.id + '_allreq';\n    if (inputData[fieldName]) {\n      const values = [];\n      values.push({\n        name: fieldName,\n        value: inputData[fieldName]\n      });\n      if (inputData[reqName]) {\n        values.push({\n          name: reqName,\n          value: true\n        });\n      }\n      return values;\n    }\n    return [];\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldEditData(field, inputData) {\n    const fieldName = 'f_' + field.id;\n    return [{\n      fieldid: field.id,\n      value: inputData[fieldName] || []\n    }];\n  }\n  /**\n   * @inheritdoc\n   */\n  hasFieldDataChanged(field, inputData, originalFieldData) {\n    const fieldName = 'f_' + field.id;\n    const content = (originalFieldData === null || originalFieldData === void 0 ? void 0 : originalFieldData.content) || '';\n    return inputData[fieldName].join('##') != content;\n  }\n  /**\n   * Check and get field requeriments.\n   *\n   * @param field Defines the field to be rendered.\n   * @param inputData Data entered in the edit form.\n   * @returns String with the notification or false.\n   */\n  getFieldsNotifications(field, inputData) {\n    if (field.required && (!inputData || !inputData.length || !inputData[0].value)) {\n      return Translate.instant('addon.mod_data.errormustsupplyvalue');\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  overrideData(originalContent, offlineContent) {\n    originalContent.content = offlineContent[''] && offlineContent[''].join('##') || '';\n    return originalContent;\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n}\n_class = AddonModDataFieldCheckboxHandlerService;\n_class.ɵfac = function AddonModDataFieldCheckboxHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModDataFieldCheckboxHandler = makeSingleton(AddonModDataFieldCheckboxHandlerService);","map":{"version":3,"names":["makeSingleton","Translate","AddonModDataFieldCheckboxComponent","AddonModDataFieldCheckboxHandlerService","constructor","name","type","getComponent","getFieldSearchData","field","inputData","fieldName","id","reqName","values","push","value","getFieldEditData","fieldid","hasFieldDataChanged","originalFieldData","content","join","getFieldsNotifications","required","length","instant","overrideData","originalContent","offlineContent","isEnabled","_asyncToGenerator","factory","ɵfac","providedIn","AddonModDataFieldCheckboxHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/fields/checkbox/services/handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    AddonModDataEntryField,\n    AddonModDataField,\n    AddonModDataSearchEntriesAdvancedFieldFormatted,\n    AddonModDataSubfieldData,\n} from '@addons/mod/data/services/data';\nimport { AddonModDataFieldHandler } from '@addons/mod/data/services/data-fields-delegate';\nimport { Injectable, Type } from '@angular/core';\nimport { CoreFormFields } from '@singletons/form';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldCheckboxComponent } from '../component/checkbox';\nimport type { AddonModDataFieldPluginBaseComponent } from '@addons/mod/data/classes/base-field-plugin-component';\n\n/**\n * Handler for checkbox data field plugin.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModDataFieldCheckboxHandlerService implements AddonModDataFieldHandler {\n\n    name = 'AddonModDataFieldCheckboxHandler';\n    type = 'checkbox';\n\n    /**\n     * @inheritdoc\n     */\n    getComponent(): Type<AddonModDataFieldPluginBaseComponent> {\n        return AddonModDataFieldCheckboxComponent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldSearchData(\n        field: AddonModDataField,\n        inputData: CoreFormFields<string[]>,\n    ): AddonModDataSearchEntriesAdvancedFieldFormatted[] {\n\n        const fieldName = 'f_' + field.id;\n        const reqName = 'f_' + field.id + '_allreq';\n\n        if (inputData[fieldName]) {\n            const values: AddonModDataSearchEntriesAdvancedFieldFormatted[] = [];\n\n            values.push({\n                name: fieldName,\n                value: inputData[fieldName],\n            });\n\n            if (inputData[reqName]) {\n                values.push({\n                    name: reqName,\n                    value: true,\n                });\n            }\n\n            return values;\n        }\n\n        return [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldEditData(field: AddonModDataField, inputData: CoreFormFields<string[]>): AddonModDataSubfieldData[] {\n        const fieldName = 'f_' + field.id;\n\n        return [{\n            fieldid: field.id,\n            value: inputData[fieldName] || [],\n        }];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    hasFieldDataChanged(\n        field: AddonModDataField,\n        inputData: CoreFormFields<string[]>,\n        originalFieldData: AddonModDataEntryField,\n    ): boolean {\n        const fieldName = 'f_' + field.id;\n\n        const content = originalFieldData?.content || '';\n\n        return inputData[fieldName].join('##') != content;\n    }\n\n    /**\n     * Check and get field requeriments.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the edit form.\n     * @returns String with the notification or false.\n     */\n    getFieldsNotifications(field: AddonModDataField, inputData: AddonModDataSubfieldData[]): string | undefined {\n        if (field.required && (!inputData || !inputData.length || !inputData[0].value)) {\n            return Translate.instant('addon.mod_data.errormustsupplyvalue');\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    overrideData(originalContent: AddonModDataEntryField, offlineContent: CoreFormFields<string[]>): AddonModDataEntryField {\n        originalContent.content = (offlineContent[''] && offlineContent[''].join('##')) || '';\n\n        return originalContent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n}\nexport const AddonModDataFieldCheckboxHandler = makeSingleton(AddonModDataFieldCheckboxHandlerService);\n"],"mappings":";;AAuBA,SAASA,aAAa,EAAEC,SAAS,QAAQ,aAAa;AACtD,SAASC,kCAAkC,QAAQ,uBAAuB;;AAG1E;;;AAIA,OAAM,MAAOC,uCAAuC;EADpDC,YAAA;IAGI,KAAAC,IAAI,GAAG,kCAAkC;IACzC,KAAAC,IAAI,GAAG,UAAU;;EAEjB;;;EAGAC,YAAYA,CAAA;IACR,OAAOL,kCAAkC;EAC7C;EAEA;;;EAGAM,kBAAkBA,CACdC,KAAwB,EACxBC,SAAmC;IAGnC,MAAMC,SAAS,GAAG,IAAI,GAAGF,KAAK,CAACG,EAAE;IACjC,MAAMC,OAAO,GAAG,IAAI,GAAGJ,KAAK,CAACG,EAAE,GAAG,SAAS;IAE3C,IAAIF,SAAS,CAACC,SAAS,CAAC,EAAE;MACtB,MAAMG,MAAM,GAAsD,EAAE;MAEpEA,MAAM,CAACC,IAAI,CAAC;QACRV,IAAI,EAAEM,SAAS;QACfK,KAAK,EAAEN,SAAS,CAACC,SAAS;OAC7B,CAAC;MAEF,IAAID,SAAS,CAACG,OAAO,CAAC,EAAE;QACpBC,MAAM,CAACC,IAAI,CAAC;UACRV,IAAI,EAAEQ,OAAO;UACbG,KAAK,EAAE;SACV,CAAC;;MAGN,OAAOF,MAAM;;IAGjB,OAAO,EAAE;EACb;EAEA;;;EAGAG,gBAAgBA,CAACR,KAAwB,EAAEC,SAAmC;IAC1E,MAAMC,SAAS,GAAG,IAAI,GAAGF,KAAK,CAACG,EAAE;IAEjC,OAAO,CAAC;MACJM,OAAO,EAAET,KAAK,CAACG,EAAE;MACjBI,KAAK,EAAEN,SAAS,CAACC,SAAS,CAAC,IAAI;KAClC,CAAC;EACN;EAEA;;;EAGAQ,mBAAmBA,CACfV,KAAwB,EACxBC,SAAmC,EACnCU,iBAAyC;IAEzC,MAAMT,SAAS,GAAG,IAAI,GAAGF,KAAK,CAACG,EAAE;IAEjC,MAAMS,OAAO,GAAG,CAAAD,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEC,OAAO,KAAI,EAAE;IAEhD,OAAOX,SAAS,CAACC,SAAS,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC,IAAID,OAAO;EACrD;EAEA;;;;;;;EAOAE,sBAAsBA,CAACd,KAAwB,EAAEC,SAAqC;IAClF,IAAID,KAAK,CAACe,QAAQ,KAAK,CAACd,SAAS,IAAI,CAACA,SAAS,CAACe,MAAM,IAAI,CAACf,SAAS,CAAC,CAAC,CAAC,CAACM,KAAK,CAAC,EAAE;MAC5E,OAAOf,SAAS,CAACyB,OAAO,CAAC,qCAAqC,CAAC;;EAEvE;EAEA;;;EAGAC,YAAYA,CAACC,eAAuC,EAAEC,cAAwC;IAC1FD,eAAe,CAACP,OAAO,GAAIQ,cAAc,CAAC,EAAE,CAAC,IAAIA,cAAc,CAAC,EAAE,CAAC,CAACP,IAAI,CAAC,IAAI,CAAC,IAAK,EAAE;IAErF,OAAOM,eAAe;EAC1B;EAEA;;;EAGME,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB;;SAlGS5B,uCAAuC;;mBAAvCA,MAAuC;AAAA;;SAAvCA,MAAuC;EAAA6B,OAAA,EAAvC7B,MAAuC,CAAA8B,IAAA;EAAAC,UAAA,EAD1B;AAAM;AAsGhC,OAAO,MAAMC,gCAAgC,GAAGnC,aAAa,CAACG,uCAAuC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}