{"ast":null,"code":"var _class;\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreTextUtils } from '@services/utils/text';\nimport * as i0 from \"@angular/core\";\n/**\n * Pipe to turn a number in bytes to a human readable size (e.g. 5,25 MB).\n */\nexport class CoreBytesToSizePipe {\n  constructor() {\n    this.logger = CoreLogger.getInstance('CoreBytesToSizePipe');\n  }\n  /**\n   * Takes a number and turns it to a human readable size.\n   *\n   * @param value The bytes to convert.\n   * @returns Readable bytes.\n   */\n  transform(value) {\n    if (typeof value == 'string') {\n      // Convert the value to a number.\n      const numberValue = parseInt(value, 10);\n      if (isNaN(numberValue)) {\n        this.logger.error('Invalid value received', value);\n        return value;\n      }\n      value = numberValue;\n    }\n    return CoreTextUtils.bytesToSize(value);\n  }\n}\n_class = CoreBytesToSizePipe;\n_class.ɵfac = function CoreBytesToSizePipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"coreBytesToSize\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["CoreLogger","CoreTextUtils","CoreBytesToSizePipe","constructor","logger","getInstance","transform","value","numberValue","parseInt","isNaN","error","bytesToSize","pure"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/pipes/bytes-to-size.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreTextUtils } from '@services/utils/text';\n\n/**\n * Pipe to turn a number in bytes to a human readable size (e.g. 5,25 MB).\n */\n@Pipe({\n    name: 'coreBytesToSize',\n})\nexport class CoreBytesToSizePipe implements PipeTransform {\n\n    protected logger: CoreLogger;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreBytesToSizePipe');\n    }\n\n    /**\n     * Takes a number and turns it to a human readable size.\n     *\n     * @param value The bytes to convert.\n     * @returns Readable bytes.\n     */\n    transform(value: number | string): string {\n        if (typeof value == 'string') {\n            // Convert the value to a number.\n            const numberValue = parseInt(value, 10);\n            if (isNaN(numberValue)) {\n                this.logger.error('Invalid value received', value);\n\n                return value;\n            }\n            value = numberValue;\n        }\n\n        return CoreTextUtils.bytesToSize(value);\n    }\n\n}\n"],"mappings":";AAgBA,SAASA,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,aAAa,QAAQ,sBAAsB;;AAEpD;;;AAMA,OAAM,MAAOC,mBAAmB;EAI5BC,YAAA;IACI,IAAI,CAACC,MAAM,GAAGJ,UAAU,CAACK,WAAW,CAAC,qBAAqB,CAAC;EAC/D;EAEA;;;;;;EAMAC,SAASA,CAACC,KAAsB;IAC5B,IAAI,OAAOA,KAAK,IAAI,QAAQ,EAAE;MAC1B;MACA,MAAMC,WAAW,GAAGC,QAAQ,CAACF,KAAK,EAAE,EAAE,CAAC;MACvC,IAAIG,KAAK,CAACF,WAAW,CAAC,EAAE;QACpB,IAAI,CAACJ,MAAM,CAACO,KAAK,CAAC,wBAAwB,EAAEJ,KAAK,CAAC;QAElD,OAAOA,KAAK;;MAEhBA,KAAK,GAAGC,WAAW;;IAGvB,OAAOP,aAAa,CAACW,WAAW,CAACL,KAAK,CAAC;EAC3C;;SA3BSL,mBAAmB;;mBAAnBA,MAAmB;AAAA;;;QAAnBA,MAAmB;EAAAW,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}