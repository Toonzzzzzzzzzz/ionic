{"ast":null,"code":"var _class;\nimport { CoreDelegate } from '@classes/delegate';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./handlers/default-field\";\n/**\n * Delegate to register database fields handlers.\n */\nexport class AddonModDataFieldsDelegateService extends CoreDelegate {\n  constructor(defaultHandler) {\n    super('AddonModDataFieldsDelegate', true);\n    this.defaultHandler = defaultHandler;\n    this.handlerNameProperty = 'type';\n  }\n  /**\n   * Get the component to use for a certain field field.\n   *\n   * @param field The field object.\n   * @returns Promise resolved with the component to use, undefined if not found.\n   */\n  getComponentForField(field) {\n    return Promise.resolve(this.executeFunctionOnEnabled(field.type, 'getComponent', [field]));\n  }\n  /**\n   * Get database data in the input data to search.\n   *\n   * @param field Defines the field to be rendered.\n   * @param inputData Data entered in the search form.\n   * @returns Name and data field.\n   */\n  getFieldSearchData(field, inputData) {\n    return this.executeFunctionOnEnabled(field.type, 'getFieldSearchData', [field, inputData]) || [];\n  }\n  /**\n   * Get database data in the input data to add or update entry.\n   *\n   * @param field Defines the field to be rendered.\n   * @param inputData Data entered in the search form.\n   * @param originalFieldData Original field entered data.\n   * @returns Name and data field.\n   */\n  getFieldEditData(field, inputData, originalFieldData) {\n    return this.executeFunctionOnEnabled(field.type, 'getFieldEditData', [field, inputData, originalFieldData]) || [];\n  }\n  /**\n   * Get database data in the input files to add or update entry.\n   *\n   * @param field Defines the field to be rendered.\n   * @param inputData Data entered in the search form.\n   * @param originalFieldData Original field entered data.\n   * @returns Name and data field.\n   */\n  getFieldEditFiles(field, inputData, originalFieldData) {\n    return this.executeFunctionOnEnabled(field.type, 'getFieldEditFiles', [field, inputData, originalFieldData]) || [];\n  }\n  /**\n   * Check and get field requeriments.\n   *\n   * @param field Defines the field to be rendered.\n   * @param inputData Data entered in the edit form.\n   * @returns String with the notification or false.\n   */\n  getFieldsNotifications(field, inputData) {\n    return this.executeFunctionOnEnabled(field.type, 'getFieldsNotifications', [field, inputData]);\n  }\n  /**\n   * Check if field type manage files or not.\n   *\n   * @param field Defines the field to be checked.\n   * @returns If the field type manages files.\n   */\n  hasFiles(field) {\n    return this.hasFunction(field.type, 'getFieldEditFiles');\n  }\n  /**\n   * Check if the data has changed for a certain field.\n   *\n   * @param field Defines the field to be rendered.\n   * @param inputData Data entered in the search form.\n   * @param originalFieldData Original field entered data.\n   * @returns If the field has changes.\n   */\n  hasFieldDataChanged(field, inputData, originalFieldData) {\n    return !!this.executeFunctionOnEnabled(field.type, 'hasFieldDataChanged', [field, inputData, originalFieldData]);\n  }\n  /**\n   * Check if a field plugin is supported.\n   *\n   * @param pluginType Type of the plugin.\n   * @returns True if supported, false otherwise.\n   */\n  isPluginSupported(pluginType) {\n    return this.hasHandler(pluginType, true);\n  }\n  /**\n   * Override field content data with offline submission.\n   *\n   * @param field Defines the field to be rendered.\n   * @param originalContent Original data to be overriden.\n   * @param offlineContent Array with all the offline data to override.\n   * @param offlineFiles Array with all the offline files in the field.\n   * @returns Data overriden\n   */\n  overrideData(field, originalContent, offlineContent, offlineFiles) {\n    originalContent = originalContent || {};\n    if (!offlineContent) {\n      return originalContent;\n    }\n    return this.executeFunctionOnEnabled(field.type, 'overrideData', [originalContent, offlineContent, offlineFiles]) || originalContent;\n  }\n}\n_class = AddonModDataFieldsDelegateService;\n_class.ɵfac = function AddonModDataFieldsDelegateService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AddonModDataDefaultFieldHandler));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModDataFieldsDelegate = makeSingleton(AddonModDataFieldsDelegateService);","map":{"version":3,"names":["CoreDelegate","makeSingleton","AddonModDataFieldsDelegateService","constructor","defaultHandler","handlerNameProperty","getComponentForField","field","Promise","resolve","executeFunctionOnEnabled","type","getFieldSearchData","inputData","getFieldEditData","originalFieldData","getFieldEditFiles","getFieldsNotifications","hasFiles","hasFunction","hasFieldDataChanged","isPluginSupported","pluginType","hasHandler","overrideData","originalContent","offlineContent","offlineFiles","i0","ɵɵinject","i1","AddonModDataDefaultFieldHandler","factory","ɵfac","providedIn","AddonModDataFieldsDelegate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/services/data-fields-delegate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\nimport { CoreDelegate, CoreDelegateHandler } from '@classes/delegate';\nimport { AddonModDataDefaultFieldHandler } from './handlers/default-field';\nimport { makeSingleton } from '@singletons';\nimport { AddonModDataEntryField,\n    AddonModDataField,\n    AddonModDataSearchEntriesAdvancedFieldFormatted,\n    AddonModDataSubfieldData,\n} from './data';\nimport { CoreFormFields } from '@singletons/form';\nimport { FileEntry } from '@awesome-cordova-plugins/file/ngx';\nimport { CoreFileEntry } from '@services/file-helper';\nimport type { AddonModDataFieldPluginBaseComponent } from '@addons/mod/data/classes/base-field-plugin-component';\n\n/**\n * Interface that all fields handlers must implement.\n */\nexport interface AddonModDataFieldHandler extends CoreDelegateHandler {\n\n    /**\n     * Name of the type of data field the handler supports. E.g. 'checkbox'.\n     */\n    type: string;\n\n    /**\n     * Return the Component to use to display the plugin data.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     *\n     * @param field The field object.\n     * @returns The component to use, undefined if not found.\n     */\n    getComponent?(plugin: AddonModDataField): Type<AddonModDataFieldPluginBaseComponent> | undefined;\n\n    /**\n     * Get field search data in the input data.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the search form.\n     * @returns With name and value of the data to be sent.\n     */\n    getFieldSearchData?(\n        field: AddonModDataField,\n        inputData: CoreFormFields,\n    ): AddonModDataSearchEntriesAdvancedFieldFormatted[];\n\n    /**\n     * Get field edit data in the input data.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the edit form.\n     * @returns With name and value of the data to be sent.\n     */\n    getFieldEditData?(\n        field: AddonModDataField,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        inputData: CoreFormFields<any>,\n        originalFieldData: AddonModDataEntryField,\n    ): AddonModDataSubfieldData[];\n\n    /**\n     * Get field data in changed.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the edit form.\n     * @param originalFieldData Original field entered data.\n     * @returns If the field has changes.\n     */\n    hasFieldDataChanged?(\n        field: AddonModDataField,\n        inputData: CoreFormFields,\n        originalFieldData: AddonModDataEntryField,\n    ): boolean;\n\n    /**\n     * Get field edit files in the input data.\n     *\n     * @param field Defines the field..\n     * @returns With name and value of the data to be sent.\n     */\n    getFieldEditFiles?(\n        field: AddonModDataField,\n        inputData: CoreFormFields,\n        originalFieldData: AddonModDataEntryField,\n    ): CoreFileEntry[];\n\n    /**\n     * Check and get field requeriments.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the edit form.\n     * @returns String with the notification or false.\n     */\n    getFieldsNotifications?(field: AddonModDataField, inputData: AddonModDataSubfieldData[]): string | undefined;\n\n    /**\n     * Override field content data with offline submission.\n     *\n     * @param originalContent Original data to be overriden.\n     * @param offlineContent Array with all the offline data to override.\n     * @param offlineFiles Array with all the offline files in the field.\n     * @returns Data overriden\n     */\n    overrideData?(\n        originalContent: AddonModDataEntryField,\n        offlineContent: CoreFormFields,\n        offlineFiles?: FileEntry[],\n    ): AddonModDataEntryField;\n}\n\n/**\n * Delegate to register database fields handlers.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModDataFieldsDelegateService extends CoreDelegate<AddonModDataFieldHandler> {\n\n    protected handlerNameProperty = 'type';\n\n    constructor(\n        protected defaultHandler: AddonModDataDefaultFieldHandler,\n    ) {\n        super('AddonModDataFieldsDelegate', true);\n    }\n\n    /**\n     * Get the component to use for a certain field field.\n     *\n     * @param field The field object.\n     * @returns Promise resolved with the component to use, undefined if not found.\n     */\n    getComponentForField(field: AddonModDataField): Promise<Type<AddonModDataFieldPluginBaseComponent> | undefined> {\n        return Promise.resolve(this.executeFunctionOnEnabled(field.type, 'getComponent', [field]));\n    }\n\n    /**\n     * Get database data in the input data to search.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the search form.\n     * @returns Name and data field.\n     */\n    getFieldSearchData(field: AddonModDataField, inputData: CoreFormFields): AddonModDataSearchEntriesAdvancedFieldFormatted[] {\n        return this.executeFunctionOnEnabled(field.type, 'getFieldSearchData', [field, inputData]) || [];\n    }\n\n    /**\n     * Get database data in the input data to add or update entry.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the search form.\n     * @param originalFieldData Original field entered data.\n     * @returns Name and data field.\n     */\n    getFieldEditData(\n        field: AddonModDataField,\n        inputData: CoreFormFields,\n        originalFieldData: AddonModDataEntryField,\n    ): AddonModDataSubfieldData[] {\n        return this.executeFunctionOnEnabled(field.type, 'getFieldEditData', [field, inputData, originalFieldData]) || [];\n    }\n\n    /**\n     * Get database data in the input files to add or update entry.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the search form.\n     * @param originalFieldData Original field entered data.\n     * @returns Name and data field.\n     */\n    getFieldEditFiles(\n        field: AddonModDataField,\n        inputData: CoreFormFields,\n        originalFieldData: CoreFormFields,\n    ): CoreFileEntry[] {\n        return this.executeFunctionOnEnabled(field.type, 'getFieldEditFiles', [field, inputData, originalFieldData]) || [];\n    }\n\n    /**\n     * Check and get field requeriments.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the edit form.\n     * @returns String with the notification or false.\n     */\n    getFieldsNotifications(field: AddonModDataField, inputData: AddonModDataSubfieldData[]): string | undefined {\n        return this.executeFunctionOnEnabled(field.type, 'getFieldsNotifications', [field, inputData]);\n    }\n\n    /**\n     * Check if field type manage files or not.\n     *\n     * @param field Defines the field to be checked.\n     * @returns If the field type manages files.\n     */\n    hasFiles(field: AddonModDataField): boolean {\n        return this.hasFunction(field.type, 'getFieldEditFiles');\n    }\n\n    /**\n     * Check if the data has changed for a certain field.\n     *\n     * @param field Defines the field to be rendered.\n     * @param inputData Data entered in the search form.\n     * @param originalFieldData Original field entered data.\n     * @returns If the field has changes.\n     */\n    hasFieldDataChanged(\n        field: AddonModDataField,\n        inputData: CoreFormFields,\n        originalFieldData: CoreFormFields,\n    ): boolean {\n        return !!this.executeFunctionOnEnabled(\n            field.type,\n            'hasFieldDataChanged',\n            [field, inputData, originalFieldData],\n        );\n    }\n\n    /**\n     * Check if a field plugin is supported.\n     *\n     * @param pluginType Type of the plugin.\n     * @returns True if supported, false otherwise.\n     */\n    isPluginSupported(pluginType: string): boolean {\n        return this.hasHandler(pluginType, true);\n    }\n\n    /**\n     * Override field content data with offline submission.\n     *\n     * @param field Defines the field to be rendered.\n     * @param originalContent Original data to be overriden.\n     * @param offlineContent Array with all the offline data to override.\n     * @param offlineFiles Array with all the offline files in the field.\n     * @returns Data overriden\n     */\n    overrideData(\n        field: AddonModDataField,\n        originalContent: AddonModDataEntryField,\n        offlineContent: CoreFormFields,\n        offlineFiles?: FileEntry[],\n    ): AddonModDataEntryField {\n        originalContent = originalContent || {};\n\n        if (!offlineContent) {\n            return originalContent;\n        }\n\n        return this.executeFunctionOnEnabled(field.type, 'overrideData', [originalContent, offlineContent, offlineFiles]) ||\n            originalContent;\n    }\n\n}\nexport const AddonModDataFieldsDelegate = makeSingleton(AddonModDataFieldsDelegateService);\n"],"mappings":";AAeA,SAASA,YAAY,QAA6B,mBAAmB;AAErE,SAASC,aAAa,QAAQ,aAAa;;;AA0G3C;;;AAIA,OAAM,MAAOC,iCAAkC,SAAQF,YAAsC;EAIzFG,YACcC,cAA+C;IAEzD,KAAK,CAAC,4BAA4B,EAAE,IAAI,CAAC;IAF/B,KAAAA,cAAc,GAAdA,cAAc;IAHlB,KAAAC,mBAAmB,GAAG,MAAM;EAMtC;EAEA;;;;;;EAMAC,oBAAoBA,CAACC,KAAwB;IACzC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACC,wBAAwB,CAACH,KAAK,CAACI,IAAI,EAAE,cAAc,EAAE,CAACJ,KAAK,CAAC,CAAC,CAAC;EAC9F;EAEA;;;;;;;EAOAK,kBAAkBA,CAACL,KAAwB,EAAEM,SAAyB;IAClE,OAAO,IAAI,CAACH,wBAAwB,CAACH,KAAK,CAACI,IAAI,EAAE,oBAAoB,EAAE,CAACJ,KAAK,EAAEM,SAAS,CAAC,CAAC,IAAI,EAAE;EACpG;EAEA;;;;;;;;EAQAC,gBAAgBA,CACZP,KAAwB,EACxBM,SAAyB,EACzBE,iBAAyC;IAEzC,OAAO,IAAI,CAACL,wBAAwB,CAACH,KAAK,CAACI,IAAI,EAAE,kBAAkB,EAAE,CAACJ,KAAK,EAAEM,SAAS,EAAEE,iBAAiB,CAAC,CAAC,IAAI,EAAE;EACrH;EAEA;;;;;;;;EAQAC,iBAAiBA,CACbT,KAAwB,EACxBM,SAAyB,EACzBE,iBAAiC;IAEjC,OAAO,IAAI,CAACL,wBAAwB,CAACH,KAAK,CAACI,IAAI,EAAE,mBAAmB,EAAE,CAACJ,KAAK,EAAEM,SAAS,EAAEE,iBAAiB,CAAC,CAAC,IAAI,EAAE;EACtH;EAEA;;;;;;;EAOAE,sBAAsBA,CAACV,KAAwB,EAAEM,SAAqC;IAClF,OAAO,IAAI,CAACH,wBAAwB,CAACH,KAAK,CAACI,IAAI,EAAE,wBAAwB,EAAE,CAACJ,KAAK,EAAEM,SAAS,CAAC,CAAC;EAClG;EAEA;;;;;;EAMAK,QAAQA,CAACX,KAAwB;IAC7B,OAAO,IAAI,CAACY,WAAW,CAACZ,KAAK,CAACI,IAAI,EAAE,mBAAmB,CAAC;EAC5D;EAEA;;;;;;;;EAQAS,mBAAmBA,CACfb,KAAwB,EACxBM,SAAyB,EACzBE,iBAAiC;IAEjC,OAAO,CAAC,CAAC,IAAI,CAACL,wBAAwB,CAClCH,KAAK,CAACI,IAAI,EACV,qBAAqB,EACrB,CAACJ,KAAK,EAAEM,SAAS,EAAEE,iBAAiB,CAAC,CACxC;EACL;EAEA;;;;;;EAMAM,iBAAiBA,CAACC,UAAkB;IAChC,OAAO,IAAI,CAACC,UAAU,CAACD,UAAU,EAAE,IAAI,CAAC;EAC5C;EAEA;;;;;;;;;EASAE,YAAYA,CACRjB,KAAwB,EACxBkB,eAAuC,EACvCC,cAA8B,EAC9BC,YAA0B;IAE1BF,eAAe,GAAGA,eAAe,IAAI,EAAE;IAEvC,IAAI,CAACC,cAAc,EAAE;MACjB,OAAOD,eAAe;;IAG1B,OAAO,IAAI,CAACf,wBAAwB,CAACH,KAAK,CAACI,IAAI,EAAE,cAAc,EAAE,CAACc,eAAe,EAAEC,cAAc,EAAEC,YAAY,CAAC,CAAC,IAC7GF,eAAe;EACvB;;SAzISvB,iCAAkC;;mBAAlCA,MAAiC,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,+BAAA;AAAA;;SAAjC7B,MAAiC;EAAA8B,OAAA,EAAjC9B,MAAiC,CAAA+B,IAAA;EAAAC,UAAA,EADpB;AAAM;AA6IhC,OAAO,MAAMC,0BAA0B,GAAGlC,aAAa,CAACC,iCAAiC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}