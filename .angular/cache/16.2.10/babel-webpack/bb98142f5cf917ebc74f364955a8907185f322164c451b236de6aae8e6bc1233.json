{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreApp } from '@services/app';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { Md5 } from 'ts-md5';\nimport { CoreLogger } from '../../../singletons/logger';\nimport * as i0 from \"@angular/core\";\n/**\n * Singleton with helper functions to style the app.\n */\nexport class CoreStylesService {\n  constructor() {\n    this.stylesEls = {};\n    this.styleHandlers = [];\n    this.logger = CoreLogger.getInstance('CoreStyles');\n  }\n  /**\n   * Initialize styles.\n   */\n  initialize() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.listenEvents();\n      // Preload the current site styles first, we want this to be fast.\n      yield _this.preloadCurrentSite();\n      // Preload the styles of the rest of sites.\n      yield _this.preloadSites();\n    })();\n  }\n  /**\n   * Register a new style handler.\n   *\n   * @param styleHandler Style handler to be registered.\n   */\n  registerStyleHandler(styleHandler) {\n    this.styleHandlers.push(styleHandler);\n    // Sort them by priority, greatest go last because style loaded last it's more important.\n    this.styleHandlers = this.styleHandlers.sort((a, b) => a.priority >= b.priority ? 1 : -1);\n  }\n  /**\n   * Listen events.\n   */\n  listenEvents() {\n    var _this2 = this;\n    // When a new site is added to the app, add its styles.\n    CoreEvents.on(CoreEvents.SITE_ADDED, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (data) {\n        try {\n          yield _this2.addSite(data.siteId);\n          // User has logged in, remove tmp styles and enable loaded styles.\n          if (data.siteId == CoreSites.getCurrentSiteId()) {\n            _this2.unloadTmpStyles();\n            _this2.enableSiteStyles(data.siteId);\n          }\n        } catch (error) {\n          _this2.logger.error('Error adding styles for new site', error);\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    // Update styles when current site is updated.\n    CoreEvents.on(CoreEvents.SITE_UPDATED, data => {\n      if (data.siteId === CoreSites.getCurrentSiteId()) {\n        this.load(data.siteId).catch(error => {\n          this.logger.error('Error loading site after site update', error);\n        });\n      }\n    });\n    // Enable styles of current site on login.\n    CoreEvents.on(CoreEvents.LOGIN, data => {\n      this.unloadTmpStyles();\n      this.enableSiteStyles(data.siteId);\n    });\n    // Disable added styles on logout.\n    CoreEvents.on(CoreEvents.LOGOUT, () => {\n      this.clear();\n    });\n    // Remove site styles when a site is deleted.\n    CoreEvents.on(CoreEvents.SITE_DELETED, site => {\n      this.removeSite(site.getId());\n    });\n    // Load temporary styles when site config is checked in login.\n    CoreEvents.on(CoreEvents.LOGIN_SITE_CHECKED, data => {\n      this.loadTmpStyles(data.config).catch(error => {\n        this.logger.error('Error loading tmp styles', error);\n      });\n    });\n    // Unload temporary styles when site config is \"unchecked\" in login.\n    CoreEvents.on(CoreEvents.LOGIN_SITE_UNCHECKED, ({\n      loginSuccessful\n    }) => {\n      if (loginSuccessful) {\n        // The tmp styles have been added for a site we've logged into, so we'll wait for the final\n        // site styles to be loaded before removing the tmp styles so there is no blink effect.\n        return;\n      }\n      // The tmp styles are from a site that wasn't added in the end. Just remove them.\n      this.unloadTmpStyles();\n    });\n  }\n  /**\n   * Create a style element for a site.\n   *\n   * @param siteId Site Id.\n   * @param disabled Whether the element should be disabled.\n   */\n  createStyleElements(siteId, disabled) {\n    this.stylesEls[siteId] = {};\n    this.styleHandlers.forEach(handler => {\n      const styleElementId = this.getStyleId(siteId, handler.name);\n      let styleEl = document.head.querySelector(`style#${styleElementId}`);\n      if (!styleEl) {\n        // Create the style and add it to the header.\n        styleEl = document.createElement('style');\n        styleEl.setAttribute('id', styleElementId);\n        this.disableStyleElement(styleEl, disabled);\n        this.stylesEls[siteId][handler.name] = '';\n        document.head.appendChild(styleEl);\n      }\n    });\n  }\n  /**\n   * Set the content of an style element.\n   *\n   * @param siteId Site Id.\n   * @param handler Style handler.\n   * @param disabled Whether the element should be disabled.\n   * @param config Site public config.\n   * @returns New element.\n   */\n  setStyle(siteId, handler, disabled, config) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      let contents = '';\n      const enabled = yield handler.isEnabled(siteId, config);\n      if (enabled) {\n        contents = (yield handler.getStyle(siteId, config)).trim();\n      }\n      const hash = Md5.hashAsciiStr(contents);\n      // Update the styles only if they have changed.\n      if (_this3.stylesEls[siteId][handler.name] === hash) {\n        return;\n      }\n      const styleElementId = _this3.getStyleId(siteId, handler.name);\n      const styleEl = document.head.querySelector(`style#${styleElementId}`);\n      if (!styleEl) {\n        _this3.stylesEls[siteId][handler.name] = '';\n        return;\n      }\n      styleEl.innerHTML = contents;\n      _this3.stylesEls[siteId][handler.name] = hash;\n      // Adding styles to a style element automatically enables it. Disable it again if needed.\n      _this3.disableStyleElement(styleEl, disabled);\n    })();\n  }\n  /**\n   * Add a style element for a site and load the styles for that element. The style will be disabled.\n   *\n   * @param siteId Site ID.\n   * @returns Promise resolved when added and loaded.\n   */\n  addSite(siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!siteId || _this4.stylesEls[siteId]) {\n        // Invalid site ID or style already added.\n        return;\n      }\n      // Create the style and add it to the header.\n      _this4.createStyleElements(siteId, true);\n      try {\n        yield _this4.load(siteId, true);\n      } catch (error) {\n        _this4.logger.error('Error loading site after site init', error);\n      }\n    })();\n  }\n  /**\n   * Clear styles added to the DOM, disabling them all.\n   */\n  clear() {\n    let styles = [];\n    // Disable all the styles.\n    this.styleHandlers.forEach(handler => {\n      styles = styles.concat(Array.from(document.querySelectorAll(`style[id*=${handler.name}]`)));\n    });\n    styles.forEach(style => {\n      this.disableStyleElement(style, true);\n    });\n    CoreApp.setSystemUIColors();\n  }\n  /**\n   * Returns style element Id based on site and source.\n   *\n   * @param siteId Site Id.\n   * @param sourceName Source or handler name.\n   * @returns Element Id.\n   */\n  getStyleId(siteId, sourceName) {\n    return `${sourceName}-${siteId}`;\n  }\n  /**\n   * Disabled an element based on site and source name.\n   *\n   * @param siteId Site Id.\n   * @param sourceName Source or handler name.\n   * @param disable Whether to disable or enable the element.\n   */\n  disableStyleElementByName(siteId, sourceName, disable) {\n    const styleElementId = this.getStyleId(siteId, sourceName);\n    const styleEl = document.head.querySelector(`style#${styleElementId}`);\n    if (styleEl) {\n      this.disableStyleElement(styleEl, disable);\n    }\n  }\n  /**\n   * Enabled or disable a certain style element.\n   *\n   * @param element The element to enable or disable.\n   * @param disable Whether to disable or enable the element.\n   */\n  disableStyleElement(element, disable) {\n    // Setting disabled should be enough, but we also set the attribute so it can be seen in the DOM which ones are disabled.\n    // Cast to any because the HTMLStyleElement type doesn't define the disabled attribute.\n    element.disabled = !!disable; // eslint-disable-line @typescript-eslint/no-explicit-any\n    if (disable) {\n      element.setAttribute('media', 'disabled');\n    } else {\n      element.removeAttribute('media');\n    }\n  }\n  /**\n   * Enable the styles of a certain site.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   */\n  enableSiteStyles(siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    if (this.stylesEls[siteId]) {\n      for (const sourceName in this.stylesEls[siteId]) {\n        this.disableStyleElementByName(siteId, sourceName, false);\n      }\n      CoreApp.setSystemUIColors();\n    }\n  }\n  /**\n   * Load styles for a certain site.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @param disabled Whether loaded styles should be disabled.\n   * @returns Promise resolved when styles are loaded.\n   */\n  load(siteId, disabled = false) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const siteIdentifier = siteId || CoreSites.getCurrentSiteId();\n      if (!siteIdentifier || !_this5.stylesEls[siteIdentifier]) {\n        throw new CoreError('Cannot load styles, site not found: ${siteId}');\n      }\n      _this5.logger.debug('Load site', siteIdentifier, disabled);\n      // Enable or disable the styles.\n      for (const sourceName in _this5.stylesEls[siteIdentifier]) {\n        _this5.disableStyleElementByName(siteIdentifier, sourceName, disabled);\n      }\n      yield CoreUtils.allPromises(_this5.styleHandlers.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (handler) {\n          yield _this5.setStyle(siteIdentifier, handler, disabled);\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      if (!disabled) {\n        CoreApp.setSystemUIColors();\n      }\n    })();\n  }\n  /**\n   * Load styles for a temporary site, given its public config. These styles aren't prefetched.\n   *\n   * @param config Site public config.\n   * @returns Promise resolved when loaded.\n   */\n  loadTmpStyles(config) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // Create the style and add it to the header.\n      _this6.createStyleElements(CoreStylesService.TMP_SITE_ID, true);\n      yield CoreUtils.allPromises(_this6.styleHandlers.map( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (handler) {\n          yield _this6.setStyle(CoreStylesService.TMP_SITE_ID, handler, false, config);\n        });\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n      CoreApp.setSystemUIColors();\n    })();\n  }\n  /**\n   * Preload the styles of the current site (stored in DB).\n   *\n   * @returns Promise resolved when loaded.\n   */\n  preloadCurrentSite() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const siteId = yield CoreUtils.ignoreErrors(CoreSites.getStoredCurrentSiteId());\n      if (!siteId) {\n        // No current site stored.\n        return;\n      }\n      return _this7.addSite(siteId);\n    })();\n  }\n  /**\n   * Preload the styles of all the stored sites.\n   *\n   * @returns Promise resolved when loaded.\n   */\n  preloadSites() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const ids = yield CoreSites.getSitesIds();\n      yield CoreUtils.allPromises(ids.map(siteId => _this8.addSite(siteId)));\n    })();\n  }\n  /**\n   * Remove the styles of a certain site.\n   *\n   * @param siteId Site ID.\n   */\n  removeSite(siteId) {\n    if (siteId && this.stylesEls[siteId]) {\n      for (const sourceName in this.stylesEls[siteId]) {\n        const styleElementId = this.getStyleId(siteId, sourceName);\n        const styleEl = document.head.querySelector(`style#${styleElementId}`);\n        if (styleEl) {\n          document.head.removeChild(styleEl);\n        }\n      }\n      delete this.stylesEls[siteId];\n      CoreApp.setSystemUIColors();\n    }\n  }\n  /**\n   * Unload styles for a temporary site.\n   */\n  unloadTmpStyles() {\n    this.removeSite(CoreStylesService.TMP_SITE_ID);\n  }\n}\n_class = CoreStylesService;\n_class.TMP_SITE_ID = 'tmpsite';\n_class.ɵfac = function CoreStylesService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreStyles = makeSingleton(CoreStylesService);","map":{"version":3,"names":["CoreError","CoreApp","CoreSites","CoreUtils","makeSingleton","CoreEvents","Md5","CoreLogger","CoreStylesService","constructor","stylesEls","styleHandlers","logger","getInstance","initialize","_this","_asyncToGenerator","listenEvents","preloadCurrentSite","preloadSites","registerStyleHandler","styleHandler","push","sort","a","b","priority","_this2","on","SITE_ADDED","_ref","data","addSite","siteId","getCurrentSiteId","unloadTmpStyles","enableSiteStyles","error","_x","apply","arguments","SITE_UPDATED","load","catch","LOGIN","LOGOUT","clear","SITE_DELETED","site","removeSite","getId","LOGIN_SITE_CHECKED","loadTmpStyles","config","LOGIN_SITE_UNCHECKED","loginSuccessful","createStyleElements","disabled","forEach","handler","styleElementId","getStyleId","name","styleEl","document","head","querySelector","createElement","setAttribute","disableStyleElement","appendChild","setStyle","_this3","contents","enabled","isEnabled","getStyle","trim","hash","hashAsciiStr","innerHTML","_this4","styles","concat","Array","from","querySelectorAll","style","setSystemUIColors","sourceName","disableStyleElementByName","disable","element","removeAttribute","_this5","siteIdentifier","debug","allPromises","map","_ref2","_x2","_this6","TMP_SITE_ID","_ref3","_x3","_this7","ignoreErrors","getStoredCurrentSiteId","_this8","ids","getSitesIds","removeChild","_class","factory","ɵfac","providedIn","CoreStyles"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/styles/services/styles.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSitePublicConfigResponse } from '@classes/sites/unauthenticated-site';\nimport { CoreApp } from '@services/app';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { Md5 } from 'ts-md5';\nimport { CoreLogger } from '../../../singletons/logger';\n\n/**\n * Interface that all style handlers must implement.\n */\nexport interface CoreStyleHandler {\n\n    /**\n     * Source name.\n     */\n    name: string;\n\n    /**\n     * Priority of application.\n     */\n    priority: number;\n\n    /**\n     * Wether the handler should be enabled for the site.\n     *\n     * @param siteId Site Id.\n     * @param config Site public config for temp sites.\n     * @returns Wether the handler should be enabled for the site.\n     */\n    isEnabled(siteId: string, config?: CoreSitePublicConfigResponse): boolean | Promise<boolean>;\n\n    /**\n     * Get the style for the site.\n     *\n     * @param siteId Site Id.\n     * @param config Site public config for temp sites.\n     * @returns CSS to apply.\n     */\n    getStyle(siteId?: string, config?: CoreSitePublicConfigResponse): string | Promise<string>;\n}\n\n/**\n * Singleton with helper functions to style the app.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreStylesService {\n\n    protected logger: CoreLogger;\n\n    protected stylesEls: {\n        [siteId: string]: {\n            [sourceName: string]: string; // Hashes\n        };\n    } = {};\n\n    protected styleHandlers: CoreStyleHandler[] = [];\n\n    static readonly TMP_SITE_ID = 'tmpsite';\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreStyles');\n    }\n\n    /**\n     * Initialize styles.\n     */\n    async initialize(): Promise<void> {\n        this.listenEvents();\n\n        // Preload the current site styles first, we want this to be fast.\n        await this.preloadCurrentSite();\n\n        // Preload the styles of the rest of sites.\n        await this.preloadSites();\n    }\n\n    /**\n     * Register a new style handler.\n     *\n     * @param styleHandler Style handler to be registered.\n     */\n    registerStyleHandler(styleHandler: CoreStyleHandler): void {\n        this.styleHandlers.push(styleHandler);\n\n        // Sort them by priority, greatest go last because style loaded last it's more important.\n        this.styleHandlers = this.styleHandlers.sort((a, b) => a.priority >= b.priority ? 1 : -1);\n    }\n\n    /**\n     * Listen events.\n     */\n    protected listenEvents(): void {\n        // When a new site is added to the app, add its styles.\n        CoreEvents.on(CoreEvents.SITE_ADDED, async (data) => {\n            try {\n                await this.addSite(data.siteId);\n\n                // User has logged in, remove tmp styles and enable loaded styles.\n                if (data.siteId == CoreSites.getCurrentSiteId()) {\n                    this.unloadTmpStyles();\n                    this.enableSiteStyles(data.siteId);\n                }\n            } catch (error) {\n                this.logger.error('Error adding styles for new site', error);\n            }\n        });\n\n        // Update styles when current site is updated.\n        CoreEvents.on(CoreEvents.SITE_UPDATED, (data) => {\n            if (data.siteId === CoreSites.getCurrentSiteId()) {\n                this.load(data.siteId).catch((error) => {\n                    this.logger.error('Error loading site after site update', error);\n                });\n            }\n        });\n\n        // Enable styles of current site on login.\n        CoreEvents.on(CoreEvents.LOGIN, (data) => {\n            this.unloadTmpStyles();\n            this.enableSiteStyles(data.siteId);\n        });\n\n        // Disable added styles on logout.\n        CoreEvents.on(CoreEvents.LOGOUT, () => {\n            this.clear();\n        });\n\n        // Remove site styles when a site is deleted.\n        CoreEvents.on(CoreEvents.SITE_DELETED, (site) => {\n            this.removeSite(site.getId());\n        });\n\n        // Load temporary styles when site config is checked in login.\n        CoreEvents.on(CoreEvents.LOGIN_SITE_CHECKED, (data) => {\n            this.loadTmpStyles(data.config).catch((error) => {\n                this.logger.error('Error loading tmp styles', error);\n            });\n        });\n\n        // Unload temporary styles when site config is \"unchecked\" in login.\n        CoreEvents.on(CoreEvents.LOGIN_SITE_UNCHECKED, ({ loginSuccessful }) => {\n            if (loginSuccessful) {\n                // The tmp styles have been added for a site we've logged into, so we'll wait for the final\n                // site styles to be loaded before removing the tmp styles so there is no blink effect.\n                return;\n            }\n\n            // The tmp styles are from a site that wasn't added in the end. Just remove them.\n            this.unloadTmpStyles();\n        });\n    }\n\n    /**\n     * Create a style element for a site.\n     *\n     * @param siteId Site Id.\n     * @param disabled Whether the element should be disabled.\n     */\n    protected createStyleElements(siteId: string, disabled: boolean): void {\n        this.stylesEls[siteId] = {};\n\n        this.styleHandlers.forEach((handler) => {\n\n            const styleElementId = this.getStyleId(siteId, handler.name);\n\n            let styleEl: HTMLStyleElement | null = document.head.querySelector(`style#${styleElementId}`);\n\n            if (!styleEl) {\n                // Create the style and add it to the header.\n                styleEl = document.createElement('style');\n\n                styleEl.setAttribute('id', styleElementId);\n                this.disableStyleElement(styleEl, disabled);\n\n                this.stylesEls[siteId][handler.name] = '';\n                document.head.appendChild(styleEl);\n            }\n        });\n    }\n\n    /**\n     * Set the content of an style element.\n     *\n     * @param siteId Site Id.\n     * @param handler Style handler.\n     * @param disabled Whether the element should be disabled.\n     * @param config Site public config.\n     * @returns New element.\n     */\n    protected async setStyle(\n        siteId: string,\n        handler: CoreStyleHandler,\n        disabled: boolean,\n        config?: CoreSitePublicConfigResponse,\n    ): Promise<void> {\n        let contents = '';\n\n        const enabled = await handler.isEnabled(siteId, config);\n        if (enabled) {\n            contents = (await handler.getStyle(siteId, config)).trim();\n        }\n\n        const hash = <string>Md5.hashAsciiStr(contents);\n\n        // Update the styles only if they have changed.\n        if (this.stylesEls[siteId][handler.name] === hash) {\n            return;\n        }\n\n        const styleElementId = this.getStyleId(siteId, handler.name);\n\n        const styleEl: HTMLStyleElement | null = document.head.querySelector(`style#${styleElementId}`);\n\n        if (!styleEl) {\n            this.stylesEls[siteId][handler.name] = '';\n\n            return;\n        }\n\n        styleEl.innerHTML = contents;\n        this.stylesEls[siteId][handler.name] = hash;\n\n        // Adding styles to a style element automatically enables it. Disable it again if needed.\n        this.disableStyleElement(styleEl, disabled);\n    }\n\n    /**\n     * Add a style element for a site and load the styles for that element. The style will be disabled.\n     *\n     * @param siteId Site ID.\n     * @returns Promise resolved when added and loaded.\n     */\n    protected async addSite(siteId?: string): Promise<void> {\n        if (!siteId || this.stylesEls[siteId]) {\n            // Invalid site ID or style already added.\n            return;\n        }\n\n        // Create the style and add it to the header.\n        this.createStyleElements(siteId, true);\n\n        try {\n            await this.load(siteId, true);\n        } catch (error) {\n            this.logger.error('Error loading site after site init', error);\n        }\n    }\n\n    /**\n     * Clear styles added to the DOM, disabling them all.\n     */\n    protected clear(): void {\n        let styles: HTMLStyleElement[] = [];\n        // Disable all the styles.\n        this.styleHandlers.forEach((handler) => {\n            styles = styles.concat(Array.from(document.querySelectorAll(`style[id*=${handler.name}]`)));\n        });\n\n        styles.forEach((style) => {\n            this.disableStyleElement(style, true);\n        });\n\n        CoreApp.setSystemUIColors();\n    }\n\n    /**\n     * Returns style element Id based on site and source.\n     *\n     * @param siteId Site Id.\n     * @param sourceName Source or handler name.\n     * @returns Element Id.\n     */\n    protected getStyleId(siteId: string, sourceName: string): string {\n        return `${sourceName}-${siteId}`;\n    }\n\n    /**\n     * Disabled an element based on site and source name.\n     *\n     * @param siteId Site Id.\n     * @param sourceName Source or handler name.\n     * @param disable Whether to disable or enable the element.\n     */\n    protected disableStyleElementByName(siteId: string, sourceName: string, disable: boolean): void {\n        const styleElementId = this.getStyleId(siteId, sourceName);\n\n        const styleEl: HTMLStyleElement | null = document.head.querySelector(`style#${styleElementId}`);\n\n        if (styleEl) {\n            this.disableStyleElement(styleEl, disable);\n        }\n    }\n\n    /**\n     * Enabled or disable a certain style element.\n     *\n     * @param element The element to enable or disable.\n     * @param disable Whether to disable or enable the element.\n     */\n    protected disableStyleElement(element: HTMLStyleElement, disable: boolean): void {\n        // Setting disabled should be enough, but we also set the attribute so it can be seen in the DOM which ones are disabled.\n        // Cast to any because the HTMLStyleElement type doesn't define the disabled attribute.\n        (<any> element).disabled = !!disable; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n        if (disable) {\n            element.setAttribute('media', 'disabled');\n        } else {\n            element.removeAttribute('media');\n        }\n    }\n\n    /**\n     * Enable the styles of a certain site.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     */\n    protected enableSiteStyles(siteId?: string): void {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        if (this.stylesEls[siteId]) {\n            for (const sourceName in this.stylesEls[siteId]) {\n                this.disableStyleElementByName(siteId, sourceName, false);\n            }\n\n            CoreApp.setSystemUIColors();\n        }\n    }\n\n    /**\n     * Load styles for a certain site.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @param disabled Whether loaded styles should be disabled.\n     * @returns Promise resolved when styles are loaded.\n     */\n    protected async load(siteId?: string, disabled = false): Promise<void> {\n        const siteIdentifier = siteId || CoreSites.getCurrentSiteId();\n\n        if (!siteIdentifier || !this.stylesEls[siteIdentifier]) {\n            throw new CoreError('Cannot load styles, site not found: ${siteId}');\n        }\n\n        this.logger.debug('Load site', siteIdentifier, disabled);\n\n        // Enable or disable the styles.\n        for (const sourceName in this.stylesEls[siteIdentifier]) {\n            this.disableStyleElementByName(siteIdentifier, sourceName, disabled);\n        }\n\n        await CoreUtils.allPromises(this.styleHandlers.map(async (handler) => {\n            await this.setStyle(siteIdentifier, handler, disabled);\n        }));\n\n        if (!disabled) {\n            CoreApp.setSystemUIColors();\n        }\n    }\n\n    /**\n     * Load styles for a temporary site, given its public config. These styles aren't prefetched.\n     *\n     * @param config Site public config.\n     * @returns Promise resolved when loaded.\n     */\n    protected async loadTmpStyles(config: CoreSitePublicConfigResponse): Promise<void> {\n        // Create the style and add it to the header.\n        this.createStyleElements(CoreStylesService.TMP_SITE_ID, true);\n\n        await CoreUtils.allPromises(this.styleHandlers.map(async (handler) => {\n            await this.setStyle(CoreStylesService.TMP_SITE_ID, handler, false, config);\n        }));\n\n        CoreApp.setSystemUIColors();\n    }\n\n    /**\n     * Preload the styles of the current site (stored in DB).\n     *\n     * @returns Promise resolved when loaded.\n     */\n    protected async preloadCurrentSite(): Promise<void> {\n        const siteId = await CoreUtils.ignoreErrors(CoreSites.getStoredCurrentSiteId());\n\n        if (!siteId) {\n            // No current site stored.\n            return;\n        }\n\n        return this.addSite(siteId);\n    }\n\n    /**\n     * Preload the styles of all the stored sites.\n     *\n     * @returns Promise resolved when loaded.\n     */\n    protected async preloadSites(): Promise<void> {\n        const ids = await CoreSites.getSitesIds();\n\n        await CoreUtils.allPromises(ids.map((siteId) => this.addSite(siteId)));\n    }\n\n    /**\n     * Remove the styles of a certain site.\n     *\n     * @param siteId Site ID.\n     */\n    protected removeSite(siteId: string): void {\n        if (siteId && this.stylesEls[siteId]) {\n            for (const sourceName in this.stylesEls[siteId]) {\n                const styleElementId = this.getStyleId(siteId, sourceName);\n\n                const styleEl: HTMLStyleElement | null = document.head.querySelector(`style#${styleElementId}`);\n\n                if (styleEl) {\n                    document.head.removeChild(styleEl);\n                }\n            }\n            delete this.stylesEls[siteId];\n\n            CoreApp.setSystemUIColors();\n        }\n    }\n\n    /**\n     * Unload styles for a temporary site.\n     */\n    protected unloadTmpStyles(): void {\n        this.removeSite(CoreStylesService.TMP_SITE_ID);\n    }\n\n}\n\nexport const CoreStyles = makeSingleton(CoreStylesService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}