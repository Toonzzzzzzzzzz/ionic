{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton } from '@singletons';\nimport { CoreEnrolAction, CoreEnrolDelegate } from './enrol-delegate';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreEnrol } from './enrol';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides helper functions for enrolment plugins.\n */\nexport class CoreEnrolHelperService {\n  /**\n   * Get enrolment icons to show enrol status.\n   *\n   * @param methodTypes List of enrolment types to show.\n   * @param courseId Course Id.\n   * @returns Enrolment icons to show.\n   */\n  getEnrolmentIcons(methodTypes, courseId) {\n    return _asyncToGenerator(function* () {\n      methodTypes = CoreUtils.uniqueArray(methodTypes);\n      let enrolmentIcons = [];\n      let addBrowserOption = false;\n      const promises = methodTypes.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (type) {\n          const enrolIcons = yield CoreEnrolDelegate.getInfoIcons(type, courseId);\n          if (enrolIcons.length) {\n            enrolmentIcons = enrolmentIcons.concat(enrolIcons);\n            return;\n          }\n          const action = CoreEnrolDelegate.getEnrolmentAction(type);\n          addBrowserOption = addBrowserOption || action === CoreEnrolAction.BROWSER;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      yield Promise.all(promises);\n      if (addBrowserOption) {\n        enrolmentIcons.push({\n          className: 'enrol_browser',\n          label: 'core.courses.otherenrolments',\n          icon: 'fas-up-right-from-square'\n        });\n      }\n      if (enrolmentIcons.length == 0) {\n        enrolmentIcons.push({\n          className: 'enrol_locked',\n          label: 'core.courses.notenrollable',\n          icon: 'fas-lock'\n        });\n      }\n      return enrolmentIcons;\n    })();\n  }\n  /**\n   * Get enrolment methods divided by type.\n   *\n   * @param courseId Course Id.\n   * @param allMethodTypes List of enrolment methods returned by getCourseByField.\n   * @returns Enrolment info divided by types.\n   */\n  getEnrolmentsByType(courseId, allMethodTypes) {\n    return _asyncToGenerator(function* () {\n      // Don't use getSupportedCourseEnrolmentMethods to treat unsupported methods and methods with disabled status.\n      const enrolmentMethods = yield CoreEnrol.getCourseEnrolmentMethods(courseId);\n      const self = [];\n      const guest = [];\n      let hasBrowser = false;\n      let hasNotSupported = false;\n      enrolmentMethods.forEach(method => {\n        if (!CoreUtils.isTrueOrOne(method.status)) {\n          return;\n        }\n        const action = CoreEnrolDelegate.getEnrolmentAction(method.type);\n        switch (action) {\n          case CoreEnrolAction.SELF:\n            self.push(method);\n            break;\n          case CoreEnrolAction.GUEST:\n            guest.push(method);\n            break;\n          case CoreEnrolAction.BROWSER:\n            hasBrowser = true;\n            break;\n          case CoreEnrolAction.NOT_SUPPORTED:\n            hasNotSupported = true;\n            break;\n        }\n      });\n      // Now treat the methods returned by getCourseByField but not by getCourseEnrolmentMethods.\n      allMethodTypes === null || allMethodTypes === void 0 || allMethodTypes.forEach(type => {\n        if (enrolmentMethods.some(method => method.type === type)) {\n          return; // Already treated.\n        }\n\n        const action = CoreEnrolDelegate.getEnrolmentAction(type);\n        hasBrowser = hasBrowser || action === CoreEnrolAction.BROWSER;\n        hasNotSupported = hasNotSupported || action === CoreEnrolAction.NOT_SUPPORTED;\n      });\n      return {\n        self,\n        guest,\n        hasBrowser,\n        hasNotSupported\n      };\n    })();\n  }\n}\n_class = CoreEnrolHelperService;\n_class.ɵfac = function CoreEnrolHelperService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreEnrolHelper = makeSingleton(CoreEnrolHelperService);","map":{"version":3,"names":["makeSingleton","CoreEnrolAction","CoreEnrolDelegate","CoreUtils","CoreEnrol","CoreEnrolHelperService","getEnrolmentIcons","methodTypes","courseId","_asyncToGenerator","uniqueArray","enrolmentIcons","addBrowserOption","promises","map","_ref","type","enrolIcons","getInfoIcons","length","concat","action","getEnrolmentAction","BROWSER","_x","apply","arguments","Promise","all","push","className","label","icon","getEnrolmentsByType","allMethodTypes","enrolmentMethods","getCourseEnrolmentMethods","self","guest","hasBrowser","hasNotSupported","forEach","method","isTrueOrOne","status","SELF","GUEST","NOT_SUPPORTED","some","factory","ɵfac","providedIn","CoreEnrolHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/enrol/services/enrol-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { makeSingleton } from '@singletons';\nimport { CoreEnrolAction, CoreEnrolDelegate, CoreEnrolInfoIcon } from './enrol-delegate';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreEnrol, CoreEnrolEnrolmentMethod } from './enrol';\n\n/**\n * Service that provides helper functions for enrolment plugins.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreEnrolHelperService {\n\n    /**\n     * Get enrolment icons to show enrol status.\n     *\n     * @param methodTypes List of enrolment types to show.\n     * @param courseId Course Id.\n     * @returns Enrolment icons to show.\n     */\n    async getEnrolmentIcons(methodTypes: string[], courseId: number): Promise<CoreEnrolInfoIcon[]> {\n        methodTypes = CoreUtils.uniqueArray(methodTypes);\n\n        let enrolmentIcons: CoreEnrolInfoIcon[] = [];\n        let addBrowserOption = false;\n\n        const promises = methodTypes.map(async (type) => {\n            const enrolIcons = await CoreEnrolDelegate.getInfoIcons(type, courseId);\n\n            if (enrolIcons.length) {\n                enrolmentIcons = enrolmentIcons.concat(enrolIcons);\n\n                return;\n            }\n\n            const action = CoreEnrolDelegate.getEnrolmentAction(type);\n            addBrowserOption = addBrowserOption || action === CoreEnrolAction.BROWSER;\n        });\n\n        await Promise.all(promises);\n\n        if (addBrowserOption) {\n            enrolmentIcons.push({\n                className: 'enrol_browser',\n                label: 'core.courses.otherenrolments',\n                icon: 'fas-up-right-from-square',\n            });\n        }\n\n        if (enrolmentIcons.length == 0) {\n            enrolmentIcons.push({\n                className: 'enrol_locked',\n                label: 'core.courses.notenrollable',\n                icon: 'fas-lock',\n            });\n        }\n\n        return enrolmentIcons;\n    }\n\n    /**\n     * Get enrolment methods divided by type.\n     *\n     * @param courseId Course Id.\n     * @param allMethodTypes List of enrolment methods returned by getCourseByField.\n     * @returns Enrolment info divided by types.\n     */\n    async getEnrolmentsByType(courseId: number, allMethodTypes?: string[]): Promise<CoreEnrolmentsByType> {\n        // Don't use getSupportedCourseEnrolmentMethods to treat unsupported methods and methods with disabled status.\n        const enrolmentMethods = await CoreEnrol.getCourseEnrolmentMethods(courseId);\n\n        const self: CoreEnrolEnrolmentMethod[] = [];\n        const guest: CoreEnrolEnrolmentMethod[] = [];\n        let hasBrowser = false;\n        let hasNotSupported = false;\n\n        enrolmentMethods.forEach((method) => {\n            if (!CoreUtils.isTrueOrOne(method.status)) {\n                return;\n            }\n\n            const action = CoreEnrolDelegate.getEnrolmentAction(method.type);\n\n            switch (action) {\n                case CoreEnrolAction.SELF:\n                    self.push(method);\n                    break;\n                case CoreEnrolAction.GUEST:\n                    guest.push(method);\n                    break;\n                case CoreEnrolAction.BROWSER:\n                    hasBrowser = true;\n                    break;\n                case CoreEnrolAction.NOT_SUPPORTED:\n                    hasNotSupported = true;\n                    break;\n            }\n        });\n\n        // Now treat the methods returned by getCourseByField but not by getCourseEnrolmentMethods.\n        allMethodTypes?.forEach(type => {\n            if (enrolmentMethods.some(method => method.type === type)) {\n                return; // Already treated.\n            }\n\n            const action = CoreEnrolDelegate.getEnrolmentAction(type);\n            hasBrowser = hasBrowser || action === CoreEnrolAction.BROWSER;\n            hasNotSupported = hasNotSupported || action === CoreEnrolAction.NOT_SUPPORTED;\n        });\n\n        return {\n            self,\n            guest,\n            hasBrowser,\n            hasNotSupported,\n        };\n    }\n\n}\n\nexport const CoreEnrolHelper = makeSingleton(CoreEnrolHelperService);\n\nexport type CoreEnrolmentsByType = {\n    self: CoreEnrolEnrolmentMethod[];\n    guest: CoreEnrolEnrolmentMethod[];\n    hasBrowser: boolean;\n    hasNotSupported: boolean;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}