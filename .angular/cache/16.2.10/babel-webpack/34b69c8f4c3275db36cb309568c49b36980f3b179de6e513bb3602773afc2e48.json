{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreGroups } from '@services/groups';\nimport { AddonModFeedback, AddonModFeedbackProvider } from '../services/feedback';\nimport { AddonModFeedbackHelper } from '../services/feedback-helper';\n/**\n * Feedback attempts.\n */\nexport class AddonModFeedbackAttemptsSource extends CoreRoutedItemsManagerSource {\n  constructor(courseId, cmId) {\n    super();\n    this.COURSE_ID = courseId;\n    this.CM_ID = cmId;\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemPath(attempt) {\n    return attempt.id.toString();\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemQueryParams() {\n    return {\n      groupId: this.selectedGroup\n    };\n  }\n  /**\n   * @inheritdoc\n   */\n  getPagesLoaded() {\n    if (!this.identifiable || !this.anonymous) {\n      return 0;\n    }\n    const pageLength = this.getPageLength();\n    return Math.ceil(Math.max(this.anonymous.length, this.identifiable.length) / pageLength);\n  }\n  /**\n   * Type guard to infer AddonModFeedbackWSAttempt objects.\n   *\n   * @param attempt Attempt to check.\n   * @returns Whether the item is an identifieable attempt.\n   */\n  isIdentifiableAttempt(attempt) {\n    return 'fullname' in attempt;\n  }\n  /**\n   * Type guard to infer AddonModFeedbackWSAnonAttempt objects.\n   *\n   * @param attempt Attempt to check.\n   * @returns Whether the item is an anonymous attempt.\n   */\n  isAnonymousAttempt(attempt) {\n    return 'number' in attempt;\n  }\n  /**\n   * Invalidate feedback cache.\n   */\n  invalidateCache() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield Promise.all([CoreGroups.invalidateActivityGroupInfo(_this.CM_ID), _this.feedback && AddonModFeedback.invalidateResponsesAnalysisData(_this.feedback.id)]);\n    })();\n  }\n  /**\n   * Load feedback.\n   */\n  loadFeedback() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.feedback = yield AddonModFeedback.getFeedback(_this2.COURSE_ID, _this2.CM_ID);\n      _this2.groupInfo = yield CoreGroups.getActivityGroupInfo(_this2.CM_ID);\n      _this2.selectedGroup = CoreGroups.validateGroupId(_this2.selectedGroup, _this2.groupInfo);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getPageLength() {\n    return AddonModFeedbackProvider.PER_PAGE;\n  }\n  /**\n   * @inheritdoc\n   */\n  loadPageItems(page) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.feedback) {\n        throw new Error('Can\\'t load attempts without feeback');\n      }\n      const result = yield AddonModFeedbackHelper.getResponsesAnalysis(_this3.feedback.id, {\n        page,\n        groupId: _this3.selectedGroup,\n        cmId: _this3.CM_ID\n      });\n      if (page === 0) {\n        _this3.identifiableTotal = result.totalattempts;\n        _this3.anonymousTotal = result.totalanonattempts;\n      }\n      const totalItemsLoaded = _this3.getPageLength() * (page + 1);\n      const pageAttempts = [\n      // The page argument is ignored in the webservice when there is only one page,\n      // so we should ignore the responses of pages beyond the first if that's the case.\n      ...(page === 0 || result.totalattempts > AddonModFeedbackProvider.PER_PAGE ? result.attempts : []), ...(page === 0 || result.totalanonattempts > AddonModFeedbackProvider.PER_PAGE ? result.anonattempts : [])];\n      return {\n        items: pageAttempts,\n        hasMoreItems: result.totalattempts > totalItemsLoaded || result.totalanonattempts > totalItemsLoaded\n      };\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  setItems(attempts, hasMoreItems) {\n    this.identifiable = attempts.filter(this.isIdentifiableAttempt);\n    this.anonymous = attempts.filter(this.isAnonymousAttempt);\n    super.setItems(this.identifiable.concat(this.anonymous), hasMoreItems);\n  }\n}","map":{"version":3,"names":["CoreRoutedItemsManagerSource","CoreGroups","AddonModFeedback","AddonModFeedbackProvider","AddonModFeedbackHelper","AddonModFeedbackAttemptsSource","constructor","courseId","cmId","COURSE_ID","CM_ID","getItemPath","attempt","id","toString","getItemQueryParams","groupId","selectedGroup","getPagesLoaded","identifiable","anonymous","pageLength","getPageLength","Math","ceil","max","length","isIdentifiableAttempt","isAnonymousAttempt","invalidateCache","_this","_asyncToGenerator","Promise","all","invalidateActivityGroupInfo","feedback","invalidateResponsesAnalysisData","loadFeedback","_this2","getFeedback","groupInfo","getActivityGroupInfo","validateGroupId","PER_PAGE","loadPageItems","page","_this3","Error","result","getResponsesAnalysis","identifiableTotal","totalattempts","anonymousTotal","totalanonattempts","totalItemsLoaded","pageAttempts","attempts","anonattempts","items","hasMoreItems","setItems","filter","concat"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/feedback/classes/feedback-attempts-source.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport {\n    AddonModFeedback,\n    AddonModFeedbackProvider,\n    AddonModFeedbackWSAnonAttempt,\n    AddonModFeedbackWSAttempt,\n    AddonModFeedbackWSFeedback,\n} from '../services/feedback';\nimport { AddonModFeedbackHelper } from '../services/feedback-helper';\nimport { Params } from '@angular/router';\n\n/**\n * Feedback attempts.\n */\nexport class AddonModFeedbackAttemptsSource extends CoreRoutedItemsManagerSource<AddonModFeedbackAttemptItem> {\n\n    readonly COURSE_ID: number;\n    readonly CM_ID: number;\n\n    selectedGroup?: number;\n    identifiable?: AddonModFeedbackWSAttempt[];\n    identifiableTotal?: number;\n    anonymous?: AddonModFeedbackWSAnonAttempt[];\n    anonymousTotal?: number;\n    groupInfo?: CoreGroupInfo;\n    feedback?: AddonModFeedbackWSFeedback;\n\n    constructor(courseId: number, cmId: number) {\n        super();\n\n        this.COURSE_ID = courseId;\n        this.CM_ID = cmId;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(attempt: AddonModFeedbackAttemptItem): string {\n        return attempt.id.toString();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemQueryParams(): Params {\n        return {\n            groupId: this.selectedGroup,\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getPagesLoaded(): number {\n        if (!this.identifiable || !this.anonymous) {\n            return 0;\n        }\n\n        const pageLength = this.getPageLength();\n\n        return Math.ceil(Math.max(this.anonymous.length, this.identifiable.length) / pageLength);\n    }\n\n    /**\n     * Type guard to infer AddonModFeedbackWSAttempt objects.\n     *\n     * @param attempt Attempt to check.\n     * @returns Whether the item is an identifieable attempt.\n     */\n    isIdentifiableAttempt(attempt: AddonModFeedbackAttemptItem): attempt is AddonModFeedbackWSAttempt {\n        return 'fullname' in attempt;\n    }\n\n    /**\n     * Type guard to infer AddonModFeedbackWSAnonAttempt objects.\n     *\n     * @param attempt Attempt to check.\n     * @returns Whether the item is an anonymous attempt.\n     */\n    isAnonymousAttempt(attempt: AddonModFeedbackAttemptItem): attempt is AddonModFeedbackWSAnonAttempt {\n        return 'number' in attempt;\n    }\n\n    /**\n     * Invalidate feedback cache.\n     */\n    async invalidateCache(): Promise<void> {\n        await Promise.all([\n            CoreGroups.invalidateActivityGroupInfo(this.CM_ID),\n            this.feedback && AddonModFeedback.invalidateResponsesAnalysisData(this.feedback.id),\n        ]);\n    }\n\n    /**\n     * Load feedback.\n     */\n    async loadFeedback(): Promise<void> {\n        this.feedback = await AddonModFeedback.getFeedback(this.COURSE_ID, this.CM_ID);\n        this.groupInfo = await CoreGroups.getActivityGroupInfo(this.CM_ID);\n\n        this.selectedGroup = CoreGroups.validateGroupId(this.selectedGroup, this.groupInfo);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getPageLength(): number {\n        return AddonModFeedbackProvider.PER_PAGE;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(page: number): Promise<{ items: AddonModFeedbackAttemptItem[]; hasMoreItems: boolean }> {\n        if (!this.feedback) {\n            throw new Error('Can\\'t load attempts without feeback');\n        }\n\n        const result = await AddonModFeedbackHelper.getResponsesAnalysis(this.feedback.id, {\n            page,\n            groupId: this.selectedGroup,\n            cmId: this.CM_ID,\n        });\n\n        if (page === 0) {\n            this.identifiableTotal = result.totalattempts;\n            this.anonymousTotal = result.totalanonattempts;\n        }\n\n        const totalItemsLoaded = this.getPageLength() * (page + 1);\n        const pageAttempts: AddonModFeedbackAttemptItem[] = [\n            // The page argument is ignored in the webservice when there is only one page,\n            // so we should ignore the responses of pages beyond the first if that's the case.\n            ...(page === 0 || result.totalattempts > AddonModFeedbackProvider.PER_PAGE)\n                ? result.attempts\n                : [],\n            ...(page === 0 || result.totalanonattempts > AddonModFeedbackProvider.PER_PAGE)\n                ? result.anonattempts\n                : [],\n        ];\n\n        return {\n            items: pageAttempts,\n            hasMoreItems: result.totalattempts > totalItemsLoaded || result.totalanonattempts > totalItemsLoaded,\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected setItems(attempts: AddonModFeedbackAttemptItem[], hasMoreItems: boolean): void {\n        this.identifiable = attempts.filter(this.isIdentifiableAttempt);\n        this.anonymous = attempts.filter(this.isAnonymousAttempt);\n\n        super.setItems((this.identifiable as AddonModFeedbackAttemptItem[]).concat(this.anonymous), hasMoreItems);\n    }\n\n}\n\n/**\n * Type of items that can be held in the source.\n */\nexport type AddonModFeedbackAttemptItem = AddonModFeedbackWSAttempt | AddonModFeedbackWSAnonAttempt;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}