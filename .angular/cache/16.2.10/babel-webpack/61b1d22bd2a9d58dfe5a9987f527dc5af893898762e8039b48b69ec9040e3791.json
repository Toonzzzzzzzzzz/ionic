{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Http } from '@singletons';\nimport { CoreConstants } from '../constants';\nimport { CoreLogger } from './logger';\nimport aliases from '@/assets/fonts/font-awesome/aliases.json';\nimport { firstValueFrom } from 'rxjs';\n/**\n * Singleton with helper functions for icon management.\n */\nexport class CoreIcons {\n  /**\n   * Check icon alias and returns the new icon name.\n   *\n   * @param icon Icon name.\n   * @returns New icon name and new library if changed.\n   */\n  static getFontAwesomeIconFileName(icon) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let newLibrary = undefined;\n      if (icon.endsWith('-o')) {\n        newLibrary = 'regular';\n        icon = icon.substring(0, icon.length - 2);\n      }\n      if (CoreIcons.ALIASES[icon]) {\n        _this.logger.error(`Icon ${icon} is an alias of ${CoreIcons.ALIASES[icon]}, please use the new name.`);\n        return {\n          newLibrary,\n          fileName: CoreIcons.ALIASES[icon]\n        };\n      }\n      return {\n        newLibrary,\n        fileName: icon\n      };\n    })();\n  }\n  /**\n   * Validate that an icon exists, or show warning otherwise (only in development and testing environments).\n   *\n   * @param name Icon name.\n   * @param src Icon source url.\n   */\n  static validateIcon(name, src) {\n    if (!CoreConstants.BUILD.isDevelopment && !CoreConstants.BUILD.isTesting) {\n      return;\n    }\n    if (!(src in CoreIcons.DEV_ICONS_STATUS)) {\n      CoreIcons.DEV_ICONS_STATUS[src] = firstValueFrom(Http.get(src, {\n        responseType: 'text'\n      })).then(() => true).catch(() => false);\n    }\n    // eslint-disable-next-line promise/catch-or-return\n    CoreIcons.DEV_ICONS_STATUS[src].then(exists => {\n      if (exists) {\n        return;\n      }\n      return this.logger.error(`Icon ${name} not found`);\n    });\n  }\n  /**\n   * Replaces an <i> icon that uses CSS by a ion-icon with SVG.\n   * It supports from 4.7 to 6.4 Font awesome versions.\n   * But it can fail on 4.7 and 5.x because of the lack of assets.\n   *\n   * @param icon Current icon element.\n   * @returns New icon, already included in the DOM.\n   */\n  static replaceCSSIcon(icon) {\n    return _asyncToGenerator(function* () {\n      var _icon$parentElement;\n      let library = 'solid';\n      let iconName = '';\n      Array.from(icon.classList).forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (className) {\n          // Library name of 5.x\n          switch (className) {\n            case 'fas':\n              library = 'solid';\n              return;\n            case 'far':\n              library = 'regular';\n              return;\n            case 'fab':\n              library = 'brands';\n              return;\n          }\n          // Check fa- style class names.\n          const faPart = className.match(/fa-([a-zA-Z0-9-]+)/);\n          if (!faPart) {\n            return;\n          }\n          const firstPart = faPart[1].split('-')[0];\n          switch (firstPart) {\n            // Class is defining library.\n            case 'solid':\n              library = 'solid';\n              break;\n            case 'regular':\n            case 'light':\n              library = 'regular';\n              break;\n            case 'brands':\n              library = 'brands';\n              break;\n            // Class is defining special cases.\n            case '2xs':\n            case 'xs':\n            case 'sm':\n            case 'lg':\n            case 'xl':\n            case '2xl':\n            case 'fw':\n            case 'sharp':\n            case 'rotate':\n              return;\n            // Class is defining the icon name (fa-ICONNAME).\n            default:\n              iconName = faPart[1];\n              break;\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      if (!iconName) {\n        return;\n      }\n      const newIcon = document.createElement('ion-icon');\n      Array.from(icon.attributes).forEach(attr => {\n        newIcon.setAttribute(attr.nodeName, attr.nodeValue || '');\n      });\n      if (!newIcon.getAttribute('aria-label') && !newIcon.getAttribute('aria-labelledby') && !newIcon.getAttribute('title')) {\n        newIcon.setAttribute('aria-hidden', 'true');\n      }\n      const {\n        fileName,\n        newLibrary\n      } = yield CoreIcons.getFontAwesomeIconFileName(iconName);\n      if (newLibrary) {\n        library = newLibrary;\n      }\n      iconName = fileName;\n      const src = CoreIcons.getIconSrc('font-awesome', library, iconName);\n      newIcon.setAttribute('src', src);\n      newIcon.classList.add('faicon');\n      CoreIcons.validateIcon(iconName, src);\n      (_icon$parentElement = icon.parentElement) === null || _icon$parentElement === void 0 || _icon$parentElement.insertBefore(newIcon, icon);\n      icon.remove();\n      return newIcon;\n    })();\n  }\n  /**\n   * Get icon SVG path.\n   *\n   * @param font Font Family.\n   * @param library Library to use.\n   * @param icon Icon Name.\n   * @returns Path.\n   */\n  static getIconSrc(font, library, icon) {\n    return `assets/fonts/${font}/${library}/${icon}.svg`;\n  }\n}\n_class = CoreIcons;\n/**\n * Object used to store whether icons exist or not during development.\n */\n_class.DEV_ICONS_STATUS = {};\n_class.ALIASES = _objectSpread({}, aliases);\n_class.logger = CoreLogger.getInstance('CoreIcons');","map":{"version":3,"names":["Http","CoreConstants","CoreLogger","aliases","firstValueFrom","CoreIcons","getFontAwesomeIconFileName","icon","_this","_asyncToGenerator","newLibrary","undefined","endsWith","substring","length","ALIASES","logger","error","fileName","validateIcon","name","src","BUILD","isDevelopment","isTesting","DEV_ICONS_STATUS","get","responseType","then","catch","exists","replaceCSSIcon","_icon$parentElement","library","iconName","Array","from","classList","forEach","_ref","className","faPart","match","firstPart","split","_x","apply","arguments","newIcon","document","createElement","attributes","attr","setAttribute","nodeName","nodeValue","getAttribute","getIconSrc","add","parentElement","insertBefore","remove","font","_class","_objectSpread","getInstance"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/singletons/icons.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Http } from '@singletons';\nimport { CoreConstants } from '../constants';\nimport { CoreLogger } from './logger';\nimport aliases from '@/assets/fonts/font-awesome/aliases.json';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Singleton with helper functions for icon management.\n */\nexport class CoreIcons {\n\n    /**\n     * Object used to store whether icons exist or not during development.\n     */\n    private static readonly DEV_ICONS_STATUS: Record<string, Promise<boolean>> = {};\n\n    private static readonly ALIASES = { ...aliases } as unknown as Record<string, string>;\n\n    protected static logger = CoreLogger.getInstance('CoreIcons');\n\n    /**\n     * Check icon alias and returns the new icon name.\n     *\n     * @param icon Icon name.\n     * @returns New icon name and new library if changed.\n     */\n    static async getFontAwesomeIconFileName(icon: string): Promise<{fileName: string; newLibrary?: string}> {\n        let newLibrary: string | undefined = undefined;\n        if (icon.endsWith('-o')) {\n            newLibrary = 'regular';\n            icon = icon.substring(0, icon.length - 2);\n        }\n\n        if (CoreIcons.ALIASES[icon]) {\n            this.logger.error(`Icon ${icon} is an alias of ${CoreIcons.ALIASES[icon]}, please use the new name.`);\n\n            return { newLibrary, fileName: CoreIcons.ALIASES[icon] };\n        }\n\n        return { newLibrary, fileName: icon };\n    }\n\n    /**\n     * Validate that an icon exists, or show warning otherwise (only in development and testing environments).\n     *\n     * @param name Icon name.\n     * @param src Icon source url.\n     */\n    static validateIcon(name: string, src: string): void {\n        if (!CoreConstants.BUILD.isDevelopment && !CoreConstants.BUILD.isTesting) {\n            return;\n        }\n\n        if (!(src in CoreIcons.DEV_ICONS_STATUS)) {\n            CoreIcons.DEV_ICONS_STATUS[src] = firstValueFrom(Http.get(src, { responseType: 'text' }))\n                .then(() => true)\n                .catch(() => false);\n        }\n\n        // eslint-disable-next-line promise/catch-or-return\n        CoreIcons.DEV_ICONS_STATUS[src].then(exists => {\n            if (exists) {\n                return;\n            }\n\n            return this.logger.error(`Icon ${name} not found`);\n        });\n    }\n\n    /**\n     * Replaces an <i> icon that uses CSS by a ion-icon with SVG.\n     * It supports from 4.7 to 6.4 Font awesome versions.\n     * But it can fail on 4.7 and 5.x because of the lack of assets.\n     *\n     * @param icon Current icon element.\n     * @returns New icon, already included in the DOM.\n     */\n    static async replaceCSSIcon(icon: Element): Promise<HTMLIonIconElement | undefined> {\n        let library = 'solid';\n        let iconName = '';\n\n        Array.from(icon.classList).forEach(async (className) => {\n            // Library name of 5.x\n            switch (className) {\n                case 'fas':\n                    library = 'solid';\n\n                    return;\n                case 'far':\n                    library = 'regular';\n\n                    return;\n                case 'fab':\n                    library = 'brands';\n\n                    return;\n            }\n\n            // Check fa- style class names.\n            const faPart = className.match(/fa-([a-zA-Z0-9-]+)/);\n            if (!faPart) {\n                return;\n            }\n\n            const firstPart = faPart[1].split('-')[0];\n\n            switch (firstPart) {\n                // Class is defining library.\n                case 'solid':\n                    library = 'solid';\n                    break;\n                case 'regular':\n                case 'light':\n                    library = 'regular';\n                    break;\n                case 'brands':\n                    library = 'brands';\n                    break;\n                // Class is defining special cases.\n                case '2xs':\n                case 'xs':\n                case 'sm':\n                case 'lg':\n                case 'xl':\n                case '2xl':\n                case 'fw':\n                case 'sharp':\n                case 'rotate':\n                    return;\n                // Class is defining the icon name (fa-ICONNAME).\n                default:\n                    iconName = faPart[1];\n                    break;\n            }\n        });\n\n        if (!iconName) {\n            return;\n        }\n\n        const newIcon = document.createElement('ion-icon');\n\n        Array.from(icon.attributes).forEach(attr => {\n            newIcon.setAttribute(attr.nodeName, attr.nodeValue || '');\n        });\n\n        if (!newIcon.getAttribute('aria-label') &&\n                !newIcon.getAttribute('aria-labelledby') &&\n                !newIcon.getAttribute('title')) {\n            newIcon.setAttribute('aria-hidden', 'true');\n        }\n\n        const { fileName, newLibrary } = await CoreIcons.getFontAwesomeIconFileName(iconName);\n        if (newLibrary) {\n            library = newLibrary;\n        }\n        iconName = fileName;\n\n        const src = CoreIcons.getIconSrc('font-awesome', library, iconName);\n\n        newIcon.setAttribute('src', src);\n\n        newIcon.classList.add('faicon');\n        CoreIcons.validateIcon(iconName, src);\n\n        icon.parentElement?.insertBefore(newIcon, icon);\n        icon.remove();\n\n        return newIcon;\n    }\n\n    /**\n     * Get icon SVG path.\n     *\n     * @param font Font Family.\n     * @param library Library to use.\n     * @param icon Icon Name.\n     * @returns Path.\n     */\n    static getIconSrc(font: string, library: string, icon: string): string {\n        return `assets/fonts/${font}/${library}/${icon}.svg`;\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}