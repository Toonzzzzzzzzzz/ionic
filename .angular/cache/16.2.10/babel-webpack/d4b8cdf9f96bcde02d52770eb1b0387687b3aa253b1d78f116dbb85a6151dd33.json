{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport { AddonModLessonModuleHandlerService } from './module';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to treat links to lesson report.\n */\nexport class AddonModLessonReportLinkHandlerService extends CoreContentLinksHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModLessonReportLinkHandler';\n    this.featureName = 'CoreCourseModuleDelegate_AddonModLesson';\n    this.pattern = /\\/mod\\/lesson\\/report\\.php.*([&?]id=\\d+)/;\n  }\n  /**\n   * Get the list of actions for a link (url).\n   *\n   * @param siteIds List of sites the URL belongs to.\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @returns List of (or promise resolved with list of) actions.\n   */\n  getActions(siteIds, url, params) {\n    return [{\n      action: siteId => {\n        if (!params.action || params.action == 'reportoverview') {\n          // Go to overview.\n          this.openReportOverview(Number(params.id), Number(params.group), siteId);\n        } else if (params.action == 'reportdetail') {\n          this.openUserRetake(Number(params.id), Number(params.userid), Number(params.try), siteId);\n        }\n      }\n    }];\n  }\n  /**\n   * Check if the handler is enabled for a certain site (site + user) and a URL.\n   * If not defined, defaults to true.\n   *\n   * @param siteId The site ID.\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @returns Whether the handler is enabled for the URL and site.\n   */\n  isEnabled(siteId, url, params) {\n    return _asyncToGenerator(function* () {\n      if (params.action == 'reportdetail' && !params.userid) {\n        // Individual details are only available if the teacher is seeing a certain user.\n        return false;\n      }\n      return true;\n    })();\n  }\n  /**\n   * Open report overview.\n   *\n   * @param moduleId Module ID.\n   * @param groupId Group ID.\n   * @param siteId Site ID.\n   * @returns Promise resolved when done.\n   */\n  openReportOverview(moduleId, groupId, siteId) {\n    return _asyncToGenerator(function* () {\n      const modal = yield CoreDomUtils.showModalLoading();\n      try {\n        // Get the module object.\n        const module = yield CoreCourse.getModule(moduleId, undefined, undefined, false, false, siteId);\n        const params = {\n          module,\n          action: 'report',\n          group: groupId === undefined || isNaN(groupId) ? null : groupId\n        };\n        CoreNavigator.navigateToSitePath(`${AddonModLessonModuleHandlerService.PAGE_NAME}/${module.course}/${module.id}`, {\n          params,\n          siteId\n        });\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error processing link.');\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  /**\n   * Open a user's retake.\n   *\n   * @param moduleId Module ID.\n   * @param userId User ID.\n   * @param retake Retake to open.\n   * @param siteId Site ID.\n   * @returns Promise resolved when done.\n   */\n  openUserRetake(moduleId, userId, retake, siteId) {\n    return _asyncToGenerator(function* () {\n      const modal = yield CoreDomUtils.showModalLoading();\n      try {\n        // Get the module object.\n        const module = yield CoreCourse.getModuleBasicInfo(moduleId, {\n          siteId,\n          readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n        });\n        const params = {\n          retake: retake || 0\n        };\n        CoreNavigator.navigateToSitePath(AddonModLessonModuleHandlerService.PAGE_NAME + `/${module.course}/${module.id}/user-retake/${userId}`, {\n          params,\n          siteId\n        });\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error processing link.');\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n}\n_class = AddonModLessonReportLinkHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModLessonReportLinkHandlerService_BaseFactory;\n  return function AddonModLessonReportLinkHandlerService_Factory(t) {\n    return (ɵAddonModLessonReportLinkHandlerService_BaseFactory || (ɵAddonModLessonReportLinkHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModLessonReportLinkHandler = makeSingleton(AddonModLessonReportLinkHandlerService);","map":{"version":3,"names":["CoreContentLinksHandlerBase","CoreCourse","CoreNavigator","CoreDomUtils","makeSingleton","AddonModLessonModuleHandlerService","AddonModLessonReportLinkHandlerService","constructor","name","featureName","pattern","getActions","siteIds","url","params","action","siteId","openReportOverview","Number","id","group","openUserRetake","userid","try","isEnabled","_asyncToGenerator","moduleId","groupId","modal","showModalLoading","module","getModule","undefined","isNaN","navigateToSitePath","PAGE_NAME","course","error","showErrorModalDefault","dismiss","userId","retake","getModuleBasicInfo","readingStrategy","t","factory","ɵfac","providedIn","AddonModLessonReportLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/lesson/services/handlers/report-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport { AddonModLessonModuleHandlerService } from './module';\n\n/**\n * Handler to treat links to lesson report.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModLessonReportLinkHandlerService extends CoreContentLinksHandlerBase {\n\n    name = 'AddonModLessonReportLinkHandler';\n    featureName = 'CoreCourseModuleDelegate_AddonModLesson';\n    pattern = /\\/mod\\/lesson\\/report\\.php.*([&?]id=\\d+)/;\n\n    /**\n     * Get the list of actions for a link (url).\n     *\n     * @param siteIds List of sites the URL belongs to.\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @returns List of (or promise resolved with list of) actions.\n     */\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Record<string, string>,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n        return [{\n            action: (siteId) => {\n                if (!params.action || params.action == 'reportoverview') {\n                    // Go to overview.\n                    this.openReportOverview(Number(params.id), Number(params.group), siteId);\n                } else if (params.action == 'reportdetail') {\n                    this.openUserRetake(Number(params.id), Number(params.userid), Number(params.try), siteId);\n                }\n            },\n        }];\n    }\n\n    /**\n     * Check if the handler is enabled for a certain site (site + user) and a URL.\n     * If not defined, defaults to true.\n     *\n     * @param siteId The site ID.\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @returns Whether the handler is enabled for the URL and site.\n     */\n    async isEnabled(siteId: string, url: string, params: Record<string, string>): Promise<boolean> {\n        if (params.action == 'reportdetail' && !params.userid) {\n            // Individual details are only available if the teacher is seeing a certain user.\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Open report overview.\n     *\n     * @param moduleId Module ID.\n     * @param groupId Group ID.\n     * @param siteId Site ID.\n     * @returns Promise resolved when done.\n     */\n    protected async openReportOverview(moduleId: number, groupId?: number, siteId?: string): Promise<void> {\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            // Get the module object.\n            const module = await CoreCourse.getModule(\n                moduleId,\n                undefined,\n                undefined,\n                false,\n                false,\n                siteId,\n            );\n\n            const params = {\n                module,\n                action: 'report',\n                group: groupId === undefined || isNaN(groupId) ? null : groupId,\n            };\n\n            CoreNavigator.navigateToSitePath(\n                `${AddonModLessonModuleHandlerService.PAGE_NAME}/${module.course}/${module.id}`,\n                { params, siteId },\n            );\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error processing link.');\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Open a user's retake.\n     *\n     * @param moduleId Module ID.\n     * @param userId User ID.\n     * @param retake Retake to open.\n     * @param siteId Site ID.\n     * @returns Promise resolved when done.\n     */\n    protected async openUserRetake(\n        moduleId: number,\n        userId: number,\n        retake: number,\n        siteId: string,\n    ): Promise<void> {\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            // Get the module object.\n            const module = await CoreCourse.getModuleBasicInfo(\n                moduleId,\n                { siteId, readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE },\n            );\n            const params = {\n                retake: retake || 0,\n            };\n\n            CoreNavigator.navigateToSitePath(\n                AddonModLessonModuleHandlerService.PAGE_NAME + `/${module.course}/${module.id}/user-retake/${userId}`,\n                { params, siteId },\n            );\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error processing link.');\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n}\n\nexport const AddonModLessonReportLinkHandler = makeSingleton(AddonModLessonReportLinkHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}