{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreError } from '@classes/errors/error';\n/**\n * Wrapper used to interact with a database table.\n */\nexport class CoreDatabaseTable {\n  constructor(config, database, tableName, primaryKeyColumns) {\n    this.listeners = [];\n    this.config = config;\n    this.database = database;\n    this.tableName = tableName;\n    this.primaryKeyColumns = primaryKeyColumns !== null && primaryKeyColumns !== void 0 ? primaryKeyColumns : ['id'];\n  }\n  /**\n   * Get database configuration.\n   *\n   * @returns The database configuration.\n   */\n  getConfig() {\n    return this.config;\n  }\n  /**\n   * Get database connection.\n   *\n   * @returns Database connection.\n   */\n  getDatabase() {\n    return this.database;\n  }\n  /**\n   * Get table name.\n   *\n   * @returns Table name.\n   */\n  getTableName() {\n    return this.tableName;\n  }\n  /**\n   * Get primary key columns.\n   *\n   * @returns Primary key columns.\n   */\n  getPrimaryKeyColumns() {\n    return this.primaryKeyColumns.slice(0);\n  }\n  /**\n   * Initialize.\n   */\n  initialize() {\n    return _asyncToGenerator(function* () {})();\n  } // Nothing to initialize by default, override this method if necessary.\n  /**\n   * Destroy.\n   */\n  destroy() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.listeners.forEach(listener => {\n        var _listener$onDestroy;\n        return (_listener$onDestroy = listener.onDestroy) === null || _listener$onDestroy === void 0 ? void 0 : _listener$onDestroy.call(listener);\n      });\n    })();\n  }\n  /**\n   * Add listener.\n   *\n   * @param listener Listener.\n   */\n  addListener(listener) {\n    this.listeners.push(listener);\n  }\n  /**\n   * Check whether the table matches the given configuration for the values that concern it.\n   *\n   * @param config Database config.\n   * @returns Whether the table matches the given configuration.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  matchesConfig(config) {\n    return true;\n  }\n  /**\n   * Get records matching the given conditions.\n   *\n   * @param conditions Matching conditions. If this argument is missing, all records in the table will be returned.\n   * @param options Query options.\n   * @returns Database records.\n   */\n  getMany(conditions, options) {\n    if (!conditions && !options) {\n      return this.database.getAllRecords(this.tableName);\n    }\n    const sorting = (options === null || options === void 0 ? void 0 : options.sorting) && this.normalizedSorting(options.sorting).map(([column, direction]) => `${column.toString()} ${direction}`).join(', ');\n    return this.database.getRecords(this.tableName, conditions, sorting, '*', options === null || options === void 0 ? void 0 : options.offset, options === null || options === void 0 ? void 0 : options.limit);\n  }\n  /**\n   * Get records matching the given conditions.\n   *\n   * This method should be used when it's necessary to apply complex conditions; the simple `getMany`\n   * method should be favored otherwise for better performance.\n   *\n   * @param conditions Matching conditions in SQL and JavaScript.\n   * @returns Records matching the given conditions.\n   */\n  getManyWhere(conditions) {\n    return this.database.getRecordsSelect(this.tableName, conditions.sql, conditions.sqlParams);\n  }\n  /**\n   * Find one record matching the given conditions.\n   *\n   * @param conditions Matching conditions.\n   * @param options Result options.\n   * @returns Database record.\n   */\n  getOne(conditions, options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!options) {\n        return _this2.database.getRecord(_this2.tableName, conditions);\n      }\n      const records = yield _this2.getMany(conditions, _objectSpread(_objectSpread({}, options), {}, {\n        limit: 1\n      }));\n      if (records.length === 0) {\n        throw new CoreError('No records found.');\n      }\n      return records[0];\n    })();\n  }\n  /**\n   * Find one record by its primary key.\n   *\n   * @param primaryKey Primary key.\n   * @returns Database record.\n   */\n  getOneByPrimaryKey(primaryKey) {\n    return this.database.getRecord(this.tableName, primaryKey);\n  }\n  /**\n   * Reduce some records into a single value.\n   *\n   * @param reducer Reducer functions in SQL and JavaScript.\n   * @param conditions Matching conditions in SQL and JavaScript. If this argument is missing, all records in the table\n   *                   will be used.\n   * @returns Reduced value.\n   */\n  reduce(reducer, conditions) {\n    var _conditions$sql;\n    return this.database.getFieldSql(`SELECT ${reducer.sql} FROM ${this.tableName} ${(_conditions$sql = conditions === null || conditions === void 0 ? void 0 : conditions.sql) !== null && _conditions$sql !== void 0 ? _conditions$sql : ''}`, conditions === null || conditions === void 0 ? void 0 : conditions.sqlParams);\n  }\n  /**\n   * Check whether the table is empty or not.\n   *\n   * @returns Whether the table is empty or not.\n   */\n  isEmpty() {\n    return this.hasAny();\n  }\n  /**\n   * Check whether the table has any record matching the given conditions.\n   *\n   * @param conditions Matching conditions. If this argument is missing, this method will return whether the table\n   *                   is empty or not.\n   * @returns Whether the table contains any records matching the given conditions.\n   */\n  hasAny(conditions) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this3.getOne(conditions);\n        return true;\n      } catch (error) {\n        // Couldn't get a single record.\n        return false;\n      }\n    })();\n  }\n  /**\n   * Check whether the table has any record matching the given primary key.\n   *\n   * @param primaryKey Record primary key.\n   * @returns Whether the table contains a record matching the given primary key.\n   */\n  hasAnyByPrimaryKey(primaryKey) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this4.getOneByPrimaryKey(primaryKey);\n        return true;\n      } catch (error) {\n        // Couldn't get the record.\n        return false;\n      }\n    })();\n  }\n  /**\n   * Count records in table.\n   *\n   * @param conditions Matching conditions.\n   * @returns Number of records matching the given conditions.\n   */\n  count(conditions) {\n    return this.database.countRecords(this.tableName, conditions);\n  }\n  /**\n   * Insert a new record.\n   *\n   * @param record Database record.\n   */\n  insert(record) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      yield _this5.database.insertRecord(_this5.tableName, record);\n    })();\n  }\n  /**\n   * Update records matching the given conditions.\n   *\n   * @param updates Record updates.\n   * @param conditions Matching conditions. If this argument is missing, all records will be updated.\n   */\n  update(updates, conditions) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      yield _this6.database.updateRecords(_this6.tableName, updates, conditions);\n    })();\n  }\n  /**\n   * Update records matching the given conditions.\n   *\n   * This method should be used when it's necessary to apply complex conditions; the simple `update`\n   * method should be favored otherwise for better performance.\n   *\n   * @param updates Record updates.\n   * @param conditions Matching conditions in SQL and JavaScript.\n   */\n  updateWhere(updates, conditions) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      yield _this7.database.updateRecordsWhere(_this7.tableName, updates, conditions.sql, conditions.sqlParams);\n    })();\n  }\n  /**\n   * Delete records matching the given conditions.\n   *\n   * @param conditions Matching conditions. If this argument is missing, all records will be deleted.\n   */\n  delete(conditions) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      conditions ? yield _this8.database.deleteRecords(_this8.tableName, conditions) : yield _this8.database.deleteRecords(_this8.tableName);\n    })();\n  }\n  /**\n   * Delete a single record identified by its primary key.\n   *\n   * @param primaryKey Record primary key.\n   */\n  deleteByPrimaryKey(primaryKey) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      yield _this9.database.deleteRecords(_this9.tableName, primaryKey);\n    })();\n  }\n  /**\n   * Get the primary key from a database record.\n   *\n   * @param record Database record.\n   * @returns Primary key.\n   */\n  getPrimaryKeyFromRecord(record) {\n    return this.primaryKeyColumns.reduce((primaryKey, column) => {\n      primaryKey[column] = record[column];\n      return primaryKey;\n    }, {});\n  }\n  /**\n   * Serialize a primary key with a string representation.\n   *\n   * @param primaryKey Primary key.\n   * @returns Serialized primary key.\n   */\n  serializePrimaryKey(primaryKey) {\n    return Object.values(primaryKey).map(value => String(value)).join('-');\n  }\n  /**\n   * Check whether a given record matches the given conditions.\n   *\n   * @param record Database record.\n   * @param conditions Matching conditions.\n   * @returns Whether the record matches the conditions.\n   */\n  recordMatches(record, conditions) {\n    return !Object.entries(conditions).some(([column, value]) => record[column] !== value);\n  }\n  /**\n   * Sort a list of records with the given order. This method mutates the input array.\n   *\n   * @param records Array of records to sort.\n   * @param sorting Sorting conditions.\n   * @returns Sorted array. This will be the same reference that was given as an argument.\n   */\n  sortRecords(records, sorting) {\n    const columnsSorting = this.normalizedSorting(sorting);\n    records.sort((a, b) => {\n      for (const [column, direction] of columnsSorting) {\n        var _a$column, _b$column;\n        const aValue = (_a$column = a[column]) !== null && _a$column !== void 0 ? _a$column : 0;\n        const bValue = (_b$column = b[column]) !== null && _b$column !== void 0 ? _b$column : 0;\n        if (aValue > bValue) {\n          return direction === 'desc' ? -1 : 1;\n        }\n        if (aValue < bValue) {\n          return direction === 'desc' ? 1 : -1;\n        }\n      }\n      return 0;\n    });\n    return records;\n  }\n  /**\n   * Get a normalized array of sorting conditions.\n   *\n   * @param sorting Sorting conditions.\n   * @returns Normalized sorting conditions.\n   */\n  normalizedSorting(sorting) {\n    const sortingArray = Array.isArray(sorting) ? sorting : [sorting];\n    return sortingArray.reduce((normalizedSorting, columnSorting) => {\n      normalizedSorting.push(typeof columnSorting === 'object' ? [Object.keys(columnSorting)[0], Object.values(columnSorting)[0]] : [columnSorting, 'asc']);\n      return normalizedSorting;\n    }, []);\n  }\n}","map":{"version":3,"names":["CoreError","CoreDatabaseTable","constructor","config","database","tableName","primaryKeyColumns","listeners","getConfig","getDatabase","getTableName","getPrimaryKeyColumns","slice","initialize","_asyncToGenerator","destroy","_this","forEach","listener","_listener$onDestroy","onDestroy","call","addListener","push","matchesConfig","getMany","conditions","options","getAllRecords","sorting","normalizedSorting","map","column","direction","toString","join","getRecords","offset","limit","getManyWhere","getRecordsSelect","sql","sqlParams","getOne","_this2","getRecord","records","_objectSpread","length","getOneByPrimaryKey","primaryKey","reduce","reducer","_conditions$sql","getFieldSql","isEmpty","hasAny","_this3","error","hasAnyByPrimaryKey","_this4","count","countRecords","insert","record","_this5","insertRecord","update","updates","_this6","updateRecords","updateWhere","_this7","updateRecordsWhere","delete","_this8","deleteRecords","deleteByPrimaryKey","_this9","getPrimaryKeyFromRecord","serializePrimaryKey","Object","values","value","String","recordMatches","entries","some","sortRecords","columnsSorting","sort","a","b","_a$column","_b$column","aValue","bValue","sortingArray","Array","isArray","columnSorting","keys"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/database/database-table.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreError } from '@classes/errors/error';\nimport { SQLiteDB, SQLiteDBRecordValue, SQLiteDBRecordValues } from '@classes/sqlitedb';\n\n/**\n * Wrapper used to interact with a database table.\n */\nexport class CoreDatabaseTable<\n    DBRecord extends SQLiteDBRecordValues = SQLiteDBRecordValues,\n    PrimaryKeyColumn extends keyof DBRecord = 'id',\n    PrimaryKey extends GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn> = GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn>\n> {\n\n    protected config: Partial<CoreDatabaseConfiguration>;\n    protected database: SQLiteDB;\n    protected tableName: string;\n    protected primaryKeyColumns: PrimaryKeyColumn[];\n    protected listeners: CoreDatabaseTableListener[] = [];\n\n    constructor(\n        config: Partial<CoreDatabaseConfiguration>,\n        database: SQLiteDB,\n        tableName: string,\n        primaryKeyColumns?: PrimaryKeyColumn[],\n    ) {\n        this.config = config;\n        this.database = database;\n        this.tableName = tableName;\n        this.primaryKeyColumns = primaryKeyColumns ?? ['id'] as PrimaryKeyColumn[];\n    }\n\n    /**\n     * Get database configuration.\n     *\n     * @returns The database configuration.\n     */\n    getConfig(): Partial<CoreDatabaseConfiguration> {\n        return this.config;\n    }\n\n    /**\n     * Get database connection.\n     *\n     * @returns Database connection.\n     */\n    getDatabase(): SQLiteDB {\n        return this.database;\n    }\n\n    /**\n     * Get table name.\n     *\n     * @returns Table name.\n     */\n    getTableName(): string {\n        return this.tableName;\n    }\n\n    /**\n     * Get primary key columns.\n     *\n     * @returns Primary key columns.\n     */\n    getPrimaryKeyColumns(): PrimaryKeyColumn[] {\n        return this.primaryKeyColumns.slice(0);\n    }\n\n    /**\n     * Initialize.\n     */\n    async initialize(): Promise<void> {\n        // Nothing to initialize by default, override this method if necessary.\n    }\n\n    /**\n     * Destroy.\n     */\n    async destroy(): Promise<void> {\n        this.listeners.forEach(listener => listener.onDestroy?.());\n    }\n\n    /**\n     * Add listener.\n     *\n     * @param listener Listener.\n     */\n    addListener(listener: CoreDatabaseTableListener): void {\n        this.listeners.push(listener);\n    }\n\n    /**\n     * Check whether the table matches the given configuration for the values that concern it.\n     *\n     * @param config Database config.\n     * @returns Whether the table matches the given configuration.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    matchesConfig(config: Partial<CoreDatabaseConfiguration>): boolean {\n        return true;\n    }\n\n    /**\n     * Get records matching the given conditions.\n     *\n     * @param conditions Matching conditions. If this argument is missing, all records in the table will be returned.\n     * @param options Query options.\n     * @returns Database records.\n     */\n    getMany(conditions?: Partial<DBRecord>, options?: Partial<CoreDatabaseQueryOptions<DBRecord>>): Promise<DBRecord[]> {\n        if (!conditions && !options) {\n            return this.database.getAllRecords(this.tableName);\n        }\n\n        const sorting = options?.sorting\n            && this.normalizedSorting(options.sorting).map(([column, direction]) => `${column.toString()} ${direction}`).join(', ');\n\n        return this.database.getRecords(this.tableName, conditions, sorting, '*', options?.offset, options?.limit);\n    }\n\n    /**\n     * Get records matching the given conditions.\n     *\n     * This method should be used when it's necessary to apply complex conditions; the simple `getMany`\n     * method should be favored otherwise for better performance.\n     *\n     * @param conditions Matching conditions in SQL and JavaScript.\n     * @returns Records matching the given conditions.\n     */\n    getManyWhere(conditions: CoreDatabaseConditions<DBRecord>): Promise<DBRecord[]>  {\n        return this.database.getRecordsSelect(this.tableName, conditions.sql, conditions.sqlParams);\n    }\n\n    /**\n     * Find one record matching the given conditions.\n     *\n     * @param conditions Matching conditions.\n     * @param options Result options.\n     * @returns Database record.\n     */\n    async getOne(\n        conditions?: Partial<DBRecord>,\n        options?: Partial<Omit<CoreDatabaseQueryOptions<DBRecord>, 'offset' | 'limit'>>,\n    ): Promise<DBRecord> {\n        if (!options) {\n            return this.database.getRecord<DBRecord>(this.tableName, conditions);\n        }\n\n        const records = await this.getMany(conditions, {\n            ...options,\n            limit: 1,\n        });\n\n        if (records.length === 0) {\n            throw new CoreError('No records found.');\n        }\n\n        return records[0];\n    }\n\n    /**\n     * Find one record by its primary key.\n     *\n     * @param primaryKey Primary key.\n     * @returns Database record.\n     */\n    getOneByPrimaryKey(primaryKey: PrimaryKey): Promise<DBRecord> {\n        return this.database.getRecord<DBRecord>(this.tableName, primaryKey);\n    }\n\n    /**\n     * Reduce some records into a single value.\n     *\n     * @param reducer Reducer functions in SQL and JavaScript.\n     * @param conditions Matching conditions in SQL and JavaScript. If this argument is missing, all records in the table\n     *                   will be used.\n     * @returns Reduced value.\n     */\n    reduce<T>(reducer: CoreDatabaseReducer<DBRecord, T>, conditions?: CoreDatabaseConditions<DBRecord>): Promise<T> {\n        return this.database.getFieldSql(\n            `SELECT ${reducer.sql} FROM ${this.tableName} ${conditions?.sql ?? ''}`,\n            conditions?.sqlParams,\n        ) as unknown as Promise<T>;\n    }\n\n    /**\n     * Check whether the table is empty or not.\n     *\n     * @returns Whether the table is empty or not.\n     */\n    isEmpty(): Promise<boolean> {\n        return this.hasAny();\n    }\n\n    /**\n     * Check whether the table has any record matching the given conditions.\n     *\n     * @param conditions Matching conditions. If this argument is missing, this method will return whether the table\n     *                   is empty or not.\n     * @returns Whether the table contains any records matching the given conditions.\n     */\n    async hasAny(conditions?: Partial<DBRecord>): Promise<boolean> {\n        try {\n            await this.getOne(conditions);\n\n            return true;\n        } catch (error) {\n            // Couldn't get a single record.\n            return false;\n        }\n    }\n\n    /**\n     * Check whether the table has any record matching the given primary key.\n     *\n     * @param primaryKey Record primary key.\n     * @returns Whether the table contains a record matching the given primary key.\n     */\n    async hasAnyByPrimaryKey(primaryKey: PrimaryKey): Promise<boolean> {\n        try {\n            await this.getOneByPrimaryKey(primaryKey);\n\n            return true;\n        } catch (error) {\n            // Couldn't get the record.\n            return false;\n        }\n    }\n\n    /**\n     * Count records in table.\n     *\n     * @param conditions Matching conditions.\n     * @returns Number of records matching the given conditions.\n     */\n    count(conditions?: Partial<DBRecord>): Promise<number> {\n        return this.database.countRecords(this.tableName, conditions);\n    }\n\n    /**\n     * Insert a new record.\n     *\n     * @param record Database record.\n     */\n    async insert(record: DBRecord): Promise<void> {\n        await this.database.insertRecord(this.tableName, record);\n    }\n\n    /**\n     * Update records matching the given conditions.\n     *\n     * @param updates Record updates.\n     * @param conditions Matching conditions. If this argument is missing, all records will be updated.\n     */\n    async update(updates: Partial<DBRecord>, conditions?: Partial<DBRecord>): Promise<void> {\n        await this.database.updateRecords(this.tableName, updates, conditions);\n    }\n\n    /**\n     * Update records matching the given conditions.\n     *\n     * This method should be used when it's necessary to apply complex conditions; the simple `update`\n     * method should be favored otherwise for better performance.\n     *\n     * @param updates Record updates.\n     * @param conditions Matching conditions in SQL and JavaScript.\n     */\n    async updateWhere(updates: Partial<DBRecord>, conditions: CoreDatabaseConditions<DBRecord>): Promise<void> {\n        await this.database.updateRecordsWhere(this.tableName, updates, conditions.sql, conditions.sqlParams);\n    }\n\n    /**\n     * Delete records matching the given conditions.\n     *\n     * @param conditions Matching conditions. If this argument is missing, all records will be deleted.\n     */\n    async delete(conditions?: Partial<DBRecord>): Promise<void> {\n        conditions\n            ? await this.database.deleteRecords(this.tableName, conditions)\n            : await this.database.deleteRecords(this.tableName);\n    }\n\n    /**\n     * Delete a single record identified by its primary key.\n     *\n     * @param primaryKey Record primary key.\n     */\n    async deleteByPrimaryKey(primaryKey: PrimaryKey): Promise<void> {\n        await this.database.deleteRecords(this.tableName, primaryKey);\n    }\n\n    /**\n     * Get the primary key from a database record.\n     *\n     * @param record Database record.\n     * @returns Primary key.\n     */\n    protected getPrimaryKeyFromRecord(record: DBRecord): PrimaryKey {\n        return this.primaryKeyColumns.reduce((primaryKey, column) => {\n            primaryKey[column] = record[column];\n\n            return primaryKey;\n        }, {} as Record<PrimaryKeyColumn, unknown>) as PrimaryKey;\n    }\n\n    /**\n     * Serialize a primary key with a string representation.\n     *\n     * @param primaryKey Primary key.\n     * @returns Serialized primary key.\n     */\n    protected serializePrimaryKey(primaryKey: PrimaryKey): string {\n        return Object.values(primaryKey).map(value => String(value)).join('-');\n    }\n\n    /**\n     * Check whether a given record matches the given conditions.\n     *\n     * @param record Database record.\n     * @param conditions Matching conditions.\n     * @returns Whether the record matches the conditions.\n     */\n    protected recordMatches(record: DBRecord, conditions: Partial<DBRecord>): boolean {\n        return !Object.entries(conditions).some(([column, value]) => record[column] !== value);\n    }\n\n    /**\n     * Sort a list of records with the given order. This method mutates the input array.\n     *\n     * @param records Array of records to sort.\n     * @param sorting Sorting conditions.\n     * @returns Sorted array. This will be the same reference that was given as an argument.\n     */\n    protected sortRecords(records: DBRecord[], sorting: CoreDatabaseSorting<DBRecord>): DBRecord[] {\n        const columnsSorting = this.normalizedSorting(sorting);\n\n        records.sort((a, b) => {\n            for (const [column, direction] of columnsSorting) {\n                const aValue = a[column] ?? 0;\n                const bValue = b[column] ?? 0;\n\n                if (aValue > bValue) {\n                    return direction === 'desc' ? -1 : 1;\n                }\n\n                if (aValue < bValue) {\n                    return direction === 'desc' ? 1 : -1;\n                }\n            }\n\n            return 0;\n        });\n\n        return records;\n    }\n\n    /**\n     * Get a normalized array of sorting conditions.\n     *\n     * @param sorting Sorting conditions.\n     * @returns Normalized sorting conditions.\n     */\n    protected normalizedSorting(sorting: CoreDatabaseSorting<DBRecord>): [keyof DBRecord, 'asc' | 'desc'][] {\n        const sortingArray = Array.isArray(sorting) ? sorting : [sorting];\n\n        return sortingArray.reduce((normalizedSorting, columnSorting) => {\n            normalizedSorting.push(\n                typeof columnSorting === 'object'\n                    ? [\n                        Object.keys(columnSorting)[0] as keyof DBRecord,\n                        Object.values(columnSorting)[0] as 'asc' | 'desc',\n                    ]\n                    : [columnSorting, 'asc'],\n            );\n\n            return normalizedSorting;\n        }, [] as [keyof DBRecord, 'asc' | 'desc'][]);\n    }\n\n}\n\n/**\n * Database configuration.\n */\nexport interface CoreDatabaseConfiguration {\n    // This definition is augmented in subclasses.\n}\n\n/**\n * Database table listener.\n */\nexport interface CoreDatabaseTableListener {\n    onDestroy?(): void;\n}\n\n/**\n * CoreDatabaseTable constructor.\n */\nexport type CoreDatabaseTableConstructor<\n    DBRecord extends SQLiteDBRecordValues = SQLiteDBRecordValues,\n    PrimaryKeyColumn extends keyof DBRecord = 'id',\n    PrimaryKey extends GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn> = GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn>\n> = {\n\n    new (\n        config: Partial<CoreDatabaseConfiguration>,\n        database: SQLiteDB,\n        tableName: string,\n        primaryKeyColumns?: PrimaryKeyColumn[]\n    ): CoreDatabaseTable<DBRecord, PrimaryKeyColumn, PrimaryKey>;\n\n};\n\n/**\n * Infer primary key type from database record and primary key column types.\n */\nexport type GetDBRecordPrimaryKey<DBRecord extends SQLiteDBRecordValues, PrimaryKeyColumn extends keyof DBRecord> = {\n    [column in PrimaryKeyColumn]: DBRecord[column];\n};\n\n/**\n * Reducer used to accumulate a value from multiple records both in SQL and JavaScript.\n *\n * Both operations should be equivalent.\n */\nexport type CoreDatabaseReducer<DBRecord, T> = {\n    sql: string;\n    js: (previousValue: T, record: DBRecord) => T;\n    jsInitialValue: T;\n};\n\n/**\n * Conditions to match database records both in SQL and JavaScript.\n *\n * Both conditions should be equivalent.\n */\nexport type CoreDatabaseConditions<DBRecord> = {\n    sql: string;\n    sqlParams?: SQLiteDBRecordValue[];\n    js: (record: DBRecord) => boolean;\n};\n\n/**\n * Sorting conditions for a single column.\n *\n * This type will accept an object that defines sorting conditions for a single column, but not more.\n * For example, `{id: 'desc'}` and `{name: 'asc'}` would be acceptend values, but `{id: 'desc', name: 'asc'}` wouldn't.\n *\n * @see https://stackoverflow.com/questions/57571664/typescript-type-for-an-object-with-only-one-key-no-union-type-allowed-as-a-key\n */\nexport type CoreDatabaseColumnSorting<DBRecordColumn extends string | symbol | number> = {\n    [Column in DBRecordColumn]:\n    (Record<Column, 'asc' | 'desc'> & Partial<Record<Exclude<DBRecordColumn, Column>, never>>) extends infer ColumnSorting\n        ? { [Column in keyof ColumnSorting]: ColumnSorting[Column] }\n        : never;\n}[DBRecordColumn];\n\n/**\n * Sorting conditions to apply to query results.\n *\n * Columns will be sorted in ascending order by default.\n */\nexport type CoreDatabaseSorting<DBRecord> =\n    keyof DBRecord |\n    CoreDatabaseColumnSorting<keyof DBRecord> |\n    Array<keyof DBRecord | CoreDatabaseColumnSorting<keyof DBRecord>>;\n\n/**\n * Options to configure query results.\n */\nexport type CoreDatabaseQueryOptions<DBRecord> = {\n    offset: number;\n    limit: number;\n    sorting: CoreDatabaseSorting<DBRecord>;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}