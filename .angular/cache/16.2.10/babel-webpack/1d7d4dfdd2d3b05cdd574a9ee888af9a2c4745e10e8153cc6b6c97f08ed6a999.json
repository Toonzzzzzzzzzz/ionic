{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CorePushNotifications } from '@features/pushnotifications/services/pushnotifications';\nimport { AddonMessageOutputAirnotifier } from '../../services/airnotifier';\nimport { CoreUtils } from '@services/utils/utils';\nimport * as i0 from \"@angular/core\";\nfunction AddonMessageOutputAirnotifierDevicesPage_ng_container_14_ion_item_7_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 1, \"core.currentdevice\"));\n  }\n}\nfunction AddonMessageOutputAirnotifierDevicesPage_ng_container_14_ion_item_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 6)(1, \"ion-label\")(2, \"p\", 8)(3, \"strong\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AddonMessageOutputAirnotifierDevicesPage_ng_container_14_ion_item_7_p_6_Template, 4, 3, \"p\", 9);\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"translate\");\n    i0.ɵɵpipe(10, \"coreFormatDate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"core-button-with-spinner\", 10)(12, \"ion-toggle\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function AddonMessageOutputAirnotifierDevicesPage_ng_container_14_ion_item_7_Template_ion_toggle_ngModelChange_12_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const device_r3 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(device_r3.enable = $event);\n    })(\"ngModelChange\", function AddonMessageOutputAirnotifierDevicesPage_ng_container_14_ion_item_7_Template_ion_toggle_ngModelChange_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const device_r3 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.enableDevice(device_r3, device_r3.enable));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const device_r3 = ctx.$implicit;\n    const platform_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵclassProp(\"item-current\", device_r3.current);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate2(\"\", device_r3.name, \" \", device_r3.model, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" (\", platform_r1.platform, \" \", device_r3.version, \") \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", device_r3.current);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind1(9, 11, \"core.lastmodified\"), \": \", i0.ɵɵpipeBind2(10, 13, device_r3.timemodified * 1000, \"strftimedatetimeshort\"), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"loading\", device_r3.updating);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", device_r3.enable);\n  }\n}\nfunction AddonMessageOutputAirnotifierDevicesPage_ng_container_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"ion-item-divider\", 6)(2, \"ion-label\")(3, \"h2\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(5, \"ion-card\")(6, \"ion-list\");\n    i0.ɵɵtemplate(7, AddonMessageOutputAirnotifierDevicesPage_ng_container_14_ion_item_7_Template, 13, 16, \"ion-item\", 7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const platform_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(platform_r1.platform);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", platform_r1.devices);\n  }\n}\n/**\n * Page that displays the list of devices.\n */\nexport class AddonMessageOutputAirnotifierDevicesPage {\n  constructor() {\n    this.platformDevices = [];\n    this.loaded = false;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    this.fetchDevices();\n  }\n  /**\n   * Fetches the list of devices.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchDevices() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const devices = yield AddonMessageOutputAirnotifier.getUserDevices();\n        _this.formatDevices(devices);\n      } catch (error) {\n        CoreDomUtils.showErrorModal(error);\n      } finally {\n        _this.loaded = true;\n      }\n    })();\n  }\n  /**\n   * Add some calculated data for devices.\n   *\n   * @param devices Devices to format.\n   */\n  formatDevices(devices) {\n    this.platformDevices = [];\n    const formattedDevices = {};\n    const pushId = CorePushNotifications.getPushId();\n    // Convert enabled to boolean and search current device.\n    devices.forEach(device => {\n      if (formattedDevices[device.platform] === undefined) {\n        formattedDevices[device.platform] = {\n          platform: device.platform,\n          devices: []\n        };\n      }\n      device.enable = !!device.enable;\n      device.current = pushId === device.pushid;\n      formattedDevices[device.platform].devices.push(device);\n    });\n    for (const platform in formattedDevices) {\n      const devices = formattedDevices[platform];\n      devices.devices.sort((a, b) => b.timemodified - a.timemodified);\n      devices.platform = devices.platform.replace('-fcm', '');\n      this.platformDevices.push(devices);\n    }\n  }\n  /**\n   * Update list of devices after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\n   */\n  updateDevicesAfterDelay() {\n    // Cancel pending updates.\n    if (this.updateTimeout) {\n      clearTimeout(this.updateTimeout);\n    }\n    this.updateTimeout = window.setTimeout(() => {\n      this.updateTimeout = undefined;\n      this.updateDevices();\n    }, 5000);\n  }\n  /**\n   * Fetch devices. The purpose is to store the updated data, it won't be reflected in the view.\n   */\n  updateDevices() {\n    return _asyncToGenerator(function* () {\n      yield CoreUtils.ignoreErrors(AddonMessageOutputAirnotifier.invalidateUserDevices());\n      yield AddonMessageOutputAirnotifier.getUserDevices();\n    })();\n  }\n  /**\n   * Refresh the list of devices.\n   *\n   * @param refresher Refresher.\n   */\n  refreshDevices(refresher) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield CoreUtils.ignoreErrors(AddonMessageOutputAirnotifier.invalidateUserDevices());\n        yield _this2.fetchDevices();\n      } finally {\n        refresher === null || refresher === void 0 || refresher.complete();\n      }\n    })();\n  }\n  /**\n   * Enable or disable a certain device.\n   *\n   * @param device The device object.\n   * @param enable True to enable the device, false to disable it.\n   */\n  enableDevice(device, enable) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      device.updating = true;\n      try {\n        yield AddonMessageOutputAirnotifier.enableDevice(device.id, enable);\n        // Update the list of devices since it was modified.\n        _this3.updateDevicesAfterDelay();\n      } catch (error) {\n        // Show error and revert change.\n        CoreDomUtils.showErrorModal(error);\n        device.enable = !device.enable;\n      } finally {\n        device.updating = false;\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    // If there is a pending action to update devices, execute it right now.\n    if (this.updateTimeout) {\n      clearTimeout(this.updateTimeout);\n      this.updateDevices();\n    }\n  }\n}\n_class = AddonMessageOutputAirnotifierDevicesPage;\n_class.ɵfac = function AddonMessageOutputAirnotifierDevicesPage_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-message-output-airnotifier-devices\"]],\n  decls: 15,\n  vars: 12,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [3, \"hideUntil\"], [4, \"ngFor\", \"ngForOf\"], [1, \"ion-text-wrap\"], [\"class\", \"ion-text-wrap\", 3, \"item-current\", 4, \"ngFor\", \"ngForOf\"], [1, \"item-heading\"], [4, \"ngIf\"], [\"slot\", \"end\", 3, \"loading\"], [3, \"ngModel\", \"ngModelChange\"]],\n  template: function AddonMessageOutputAirnotifierDevicesPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵtext(7);\n      i0.ɵɵpipe(8, \"translate\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(9, \"ion-content\")(10, \"ion-refresher\", 2);\n      i0.ɵɵlistener(\"ionRefresh\", function AddonMessageOutputAirnotifierDevicesPage_Template_ion_refresher_ionRefresh_10_listener($event) {\n        return ctx.refreshDevices($event.target);\n      });\n      i0.ɵɵelement(11, \"ion-refresher-content\", 3);\n      i0.ɵɵpipe(12, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"core-loading\", 4);\n      i0.ɵɵtemplate(14, AddonMessageOutputAirnotifierDevicesPage_ng_container_14_Template, 8, 2, \"ng-container\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 6, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 8, \"addon.messageoutput_airnotifier.processorsettingsdesc\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", !ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(12, 10, \"core.pulltorefresh\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.platformDevices);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreDomUtils","CorePushNotifications","AddonMessageOutputAirnotifier","CoreUtils","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","ɵɵtemplate","AddonMessageOutputAirnotifierDevicesPage_ng_container_14_ion_item_7_p_6_Template","ɵɵlistener","AddonMessageOutputAirnotifierDevicesPage_ng_container_14_ion_item_7_Template_ion_toggle_ngModelChange_12_listener","$event","restoredCtx","ɵɵrestoreView","_r6","device_r3","$implicit","ɵɵresetView","enable","ctx_r7","ɵɵnextContext","enableDevice","ɵɵclassProp","current","ɵɵtextInterpolate2","name","model","platform_r1","platform","version","ɵɵproperty","ɵɵpipeBind2","timemodified","updating","ɵɵelementContainerStart","AddonMessageOutputAirnotifierDevicesPage_ng_container_14_ion_item_7_Template","ɵɵelementContainerEnd","devices","AddonMessageOutputAirnotifierDevicesPage","constructor","platformDevices","loaded","ngOnInit","fetchDevices","_this","_asyncToGenerator","getUserDevices","formatDevices","error","showErrorModal","formattedDevices","pushId","getPushId","forEach","device","undefined","pushid","push","sort","a","b","replace","updateDevicesAfterDelay","updateTimeout","clearTimeout","window","setTimeout","updateDevices","ignoreErrors","invalidateUserDevices","refreshDevices","refresher","_this2","complete","_this3","id","ngOnDestroy","selectors","decls","vars","consts","template","AddonMessageOutputAirnotifierDevicesPage_Template","rf","ctx","ɵɵelement","AddonMessageOutputAirnotifierDevicesPage_Template_ion_refresher_ionRefresh_10_listener","target","AddonMessageOutputAirnotifierDevicesPage_ng_container_14_Template","ɵɵpropertyInterpolate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messageoutput/airnotifier/pages/devices/devices.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messageoutput/airnotifier/pages/devices/devices.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CorePushNotifications } from '@features/pushnotifications/services/pushnotifications';\nimport { AddonMessageOutputAirnotifier, AddonMessageOutputAirnotifierDevice } from '../../services/airnotifier';\nimport { CoreUtils } from '@services/utils/utils';\n\n/**\n * Page that displays the list of devices.\n */\n@Component({\n    selector: 'page-addon-message-output-airnotifier-devices',\n    templateUrl: 'devices.html',\n})\nexport class AddonMessageOutputAirnotifierDevicesPage implements OnInit, OnDestroy {\n\n    platformDevices: AddonMessageOutputAirnotifierPlatformDevices[] = [];\n    loaded = false;\n\n    protected updateTimeout?: number;\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.fetchDevices();\n    }\n\n    /**\n     * Fetches the list of devices.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchDevices(): Promise<void> {\n        try {\n            const devices = await AddonMessageOutputAirnotifier.getUserDevices();\n            this.formatDevices(devices);\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Add some calculated data for devices.\n     *\n     * @param devices Devices to format.\n     */\n    protected formatDevices(devices: AddonMessageOutputAirnotifierDevice[]): void {\n        this.platformDevices = [];\n\n        const formattedDevices: Record<string, AddonMessageOutputAirnotifierPlatformDevices> = {};\n        const pushId = CorePushNotifications.getPushId();\n\n        // Convert enabled to boolean and search current device.\n        devices.forEach((device: AddonMessageOutputAirnotifierDeviceFormatted) => {\n            if (formattedDevices[device.platform] === undefined) {\n                formattedDevices[device.platform] = {\n                    platform: device.platform,\n                    devices: [],\n                };\n            }\n\n            device.enable = !!device.enable;\n            device.current = pushId === device.pushid;\n\n            formattedDevices[device.platform].devices.push(device);\n\n        });\n\n        for (const platform in formattedDevices) {\n            const devices = formattedDevices[platform];\n            devices.devices.sort((a, b) => b.timemodified - a.timemodified);\n\n            devices.platform = devices.platform.replace('-fcm', '');\n\n            this.platformDevices.push(devices);\n        }\n    }\n\n    /**\n     * Update list of devices after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\n     */\n    protected updateDevicesAfterDelay(): void {\n        // Cancel pending updates.\n        if (this.updateTimeout) {\n            clearTimeout(this.updateTimeout);\n        }\n\n        this.updateTimeout = window.setTimeout(() => {\n            this.updateTimeout = undefined;\n            this.updateDevices();\n        }, 5000);\n    }\n\n    /**\n     * Fetch devices. The purpose is to store the updated data, it won't be reflected in the view.\n     */\n    protected async updateDevices(): Promise<void> {\n        await CoreUtils.ignoreErrors(AddonMessageOutputAirnotifier.invalidateUserDevices());\n\n        await AddonMessageOutputAirnotifier.getUserDevices();\n    }\n\n    /**\n     * Refresh the list of devices.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshDevices(refresher: HTMLIonRefresherElement): Promise<void> {\n        try {\n            await CoreUtils.ignoreErrors(AddonMessageOutputAirnotifier.invalidateUserDevices());\n\n            await this.fetchDevices();\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Enable or disable a certain device.\n     *\n     * @param device The device object.\n     * @param enable True to enable the device, false to disable it.\n     */\n    async enableDevice(device: AddonMessageOutputAirnotifierDeviceFormatted, enable: boolean): Promise<void> {\n        device.updating = true;\n\n        try {\n            await AddonMessageOutputAirnotifier.enableDevice(device.id, enable);\n\n            // Update the list of devices since it was modified.\n            this.updateDevicesAfterDelay();\n        } catch (error) {\n            // Show error and revert change.\n            CoreDomUtils.showErrorModal(error);\n            device.enable = !device.enable;\n        } finally {\n            device.updating = false;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        // If there is a pending action to update devices, execute it right now.\n        if (this.updateTimeout) {\n            clearTimeout(this.updateTimeout);\n            this.updateDevices();\n        }\n    }\n\n}\n\ntype AddonMessageOutputAirnotifierPlatformDevices = {\n    platform: string;\n    devices: AddonMessageOutputAirnotifierDeviceFormatted[];\n};\n\n/**\n * User device with some calculated data.\n */\ntype AddonMessageOutputAirnotifierDeviceFormatted = AddonMessageOutputAirnotifierDevice & {\n    current?: boolean; // Calculated in the app. Whether it's the current device.\n    updating?: boolean; // Calculated in the app. Whether the device enable is being updated right now.\n};\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>{{ 'addon.messageoutput_airnotifier.processorsettingsdesc' | translate }}</h1>\n        </ion-title>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <ion-refresher slot=\"fixed\" [disabled]=\"!loaded\" (ionRefresh)=\"refreshDevices($event.target)\">\n        <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n    </ion-refresher>\n    <core-loading [hideUntil]=\"loaded\">\n        <ng-container *ngFor=\"let platform of platformDevices\">\n            <ion-item-divider class=\"ion-text-wrap\">\n                <ion-label>\n                    <h2>{{ platform.platform }}</h2>\n                </ion-label>\n            </ion-item-divider>\n            <ion-card>\n                <ion-list>\n                    <ion-item class=\"ion-text-wrap\" *ngFor=\"let device of platform.devices\" [class.item-current]=\"device.current\">\n                        <ion-label>\n                            <p class=\"item-heading\">\n                                <strong>{{ device.name }} {{ device.model }}</strong> ({{platform.platform}} {{ device.version }})\n                            </p>\n                            <p *ngIf=\"device.current\"><strong>{{ 'core.currentdevice' | translate }}</strong></p>\n                            <p>\n                                {{ 'core.lastmodified' | translate }}: {{ device.timemodified * 1000 |\n                                coreFormatDate:'strftimedatetimeshort' }}\n                            </p>\n                        </ion-label>\n                        <core-button-with-spinner [loading]=\"device.updating\" slot=\"end\">\n                            <ion-toggle [(ngModel)]=\"device.enable\" (ngModelChange)=\"enableDevice(device, device.enable)\" />\n                        </core-button-with-spinner>\n                    </ion-item>\n                </ion-list>\n            </ion-card>\n        </ng-container>\n    </core-loading>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}