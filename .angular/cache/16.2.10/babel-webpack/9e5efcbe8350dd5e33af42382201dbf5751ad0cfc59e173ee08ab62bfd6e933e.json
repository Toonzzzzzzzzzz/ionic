{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton } from '@singletons';\nimport { CorePlatform } from '@services/platform';\nimport { asyncInstance } from '@/core/utils/async-instance';\nimport * as i0 from \"@angular/core\";\n/**\n * Native plugin manager.\n */\nexport class CoreNativeService {\n  constructor() {\n    this.plugins = {};\n    this.mocks = {};\n  }\n  /**\n   * Get a native plugin instance.\n   *\n   * @param plugin Plugin name.\n   * @returns Plugin instance, null if plugin is not supported for current platform.\n   */\n  plugin(plugin) {\n    var _this = this;\n    if (plugin === 'installReferrer' && !CorePlatform.isAndroid()) {\n      return null;\n    }\n    if (!(plugin in this.plugins)) {\n      this.plugins[plugin] = asyncInstance( /*#__PURE__*/_asyncToGenerator(function* () {\n        var _window$cordova;\n        yield CorePlatform.ready();\n        const instance = CorePlatform.isMobile() ? (_window$cordova = window.cordova) === null || _window$cordova === void 0 || (_window$cordova = _window$cordova.MoodleApp) === null || _window$cordova === void 0 ? void 0 : _window$cordova[plugin] : _this.mocks[plugin];\n        if (!instance) {\n          throw new Error(`Plugin ${plugin} not found.`);\n        }\n        return instance;\n      }));\n    }\n    return this.plugins[plugin];\n  }\n  /**\n   * Register a mock to use in browser instead of the native plugin implementation.\n   *\n   * @param plugin Plugin name.\n   * @param instance Instance to use.\n   */\n  registerBrowserMock(plugin, instance) {\n    this.mocks[plugin] = instance;\n  }\n}\n_class = CoreNativeService;\n_class.ɵfac = function CoreNativeService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreNative = makeSingleton(CoreNativeService);","map":{"version":3,"names":["makeSingleton","CorePlatform","asyncInstance","CoreNativeService","constructor","plugins","mocks","plugin","_this","isAndroid","_asyncToGenerator","_window$cordova","ready","instance","isMobile","window","cordova","MoodleApp","Error","registerBrowserMock","factory","ɵfac","providedIn","CoreNative"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/native/services/native.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { makeSingleton } from '@singletons';\nimport { CorePlatform } from '@services/platform';\nimport { AsyncInstance, AsyncObject, asyncInstance } from '@/core/utils/async-instance';\n\n/**\n * Native plugin manager.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreNativeService {\n\n    private plugins: Partial<Record<keyof MoodleAppPlugins, AsyncInstance<AsyncObject>>> = {};\n    private mocks: Partial<Record<keyof MoodleAppPlugins, MoodleAppPlugins[keyof MoodleAppPlugins]>> = {};\n\n    /**\n     * Get a native plugin instance.\n     *\n     * @param plugin Plugin name.\n     * @returns Plugin instance, null if plugin is not supported for current platform.\n     */\n    plugin<Plugin extends keyof MoodleAppPlugins>(plugin: Plugin): AsyncInstance<MoodleAppPlugins[Plugin]> | null {\n        if (plugin === 'installReferrer' && !CorePlatform.isAndroid()) {\n            return null;\n        }\n\n        if (!(plugin in this.plugins)) {\n            this.plugins[plugin] = asyncInstance(async () => {\n                await CorePlatform.ready();\n\n                const instance = CorePlatform.isMobile() ? window.cordova?.MoodleApp?.[plugin] : this.mocks[plugin];\n                if (!instance) {\n                    throw new Error(`Plugin ${plugin} not found.`);\n                }\n\n                return instance;\n            });\n        }\n\n        return this.plugins[plugin] as AsyncInstance<MoodleAppPlugins[Plugin]>;\n    }\n\n    /**\n     * Register a mock to use in browser instead of the native plugin implementation.\n     *\n     * @param plugin Plugin name.\n     * @param instance Instance to use.\n     */\n    registerBrowserMock<Plugin extends keyof MoodleAppPlugins>(plugin: Plugin, instance: MoodleAppPlugins[Plugin]): void {\n        this.mocks[plugin] = instance;\n    }\n\n}\n\nexport const CoreNative = makeSingleton(CoreNativeService);\n"],"mappings":";;AAeA,SAASA,aAAa,QAAQ,aAAa;AAC3C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAAqCC,aAAa,QAAQ,6BAA6B;;AAEvF;;;AAIA,OAAM,MAAOC,iBAAiB;EAD9BC,YAAA;IAGY,KAAAC,OAAO,GAAwE,EAAE;IACjF,KAAAC,KAAK,GAAsF,EAAE;;EAErG;;;;;;EAMAC,MAAMA,CAAwCA,MAAc;IAAA,IAAAC,KAAA;IACxD,IAAID,MAAM,KAAK,iBAAiB,IAAI,CAACN,YAAY,CAACQ,SAAS,EAAE,EAAE;MAC3D,OAAO,IAAI;;IAGf,IAAI,EAAEF,MAAM,IAAI,IAAI,CAACF,OAAO,CAAC,EAAE;MAC3B,IAAI,CAACA,OAAO,CAACE,MAAM,CAAC,GAAGL,aAAa,eAAAQ,iBAAA,CAAC,aAAW;QAAA,IAAAC,eAAA;QAC5C,MAAMV,YAAY,CAACW,KAAK,EAAE;QAE1B,MAAMC,QAAQ,GAAGZ,YAAY,CAACa,QAAQ,EAAE,IAAAH,eAAA,GAAGI,MAAM,CAACC,OAAO,cAAAL,eAAA,gBAAAA,eAAA,GAAdA,eAAA,CAAgBM,SAAS,cAAAN,eAAA,uBAAzBA,eAAA,CAA4BJ,MAAM,CAAC,GAAGC,KAAI,CAACF,KAAK,CAACC,MAAM,CAAC;QACnG,IAAI,CAACM,QAAQ,EAAE;UACX,MAAM,IAAIK,KAAK,CAAC,UAAUX,MAAM,aAAa,CAAC;;QAGlD,OAAOM,QAAQ;MACnB,CAAC,EAAC;;IAGN,OAAO,IAAI,CAACR,OAAO,CAACE,MAAM,CAA4C;EAC1E;EAEA;;;;;;EAMAY,mBAAmBA,CAAwCZ,MAAc,EAAEM,QAAkC;IACzG,IAAI,CAACP,KAAK,CAACC,MAAM,CAAC,GAAGM,QAAQ;EACjC;;SAxCSV,iBAAiB;;mBAAjBA,MAAiB;AAAA;;SAAjBA,MAAiB;EAAAiB,OAAA,EAAjBjB,MAAiB,CAAAkB,IAAA;EAAAC,UAAA,EADJ;AAAM;AA6ChC,OAAO,MAAMC,UAAU,GAAGvB,aAAa,CAACG,iBAAiB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}