{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Ionic color names.\n */\nexport var CoreIonicColorNames;\n(function (CoreIonicColorNames) {\n  CoreIonicColorNames[\"PRIMARY\"] = \"primary\";\n  CoreIonicColorNames[\"SECONDARY\"] = \"secondary\";\n  CoreIonicColorNames[\"SUCCESS\"] = \"success\";\n  CoreIonicColorNames[\"WARNING\"] = \"warning\";\n  CoreIonicColorNames[\"DANGER\"] = \"danger\";\n  CoreIonicColorNames[\"INFO\"] = \"info\";\n  CoreIonicColorNames[\"DARK\"] = \"dark\";\n  CoreIonicColorNames[\"MEDIUM\"] = \"medium\";\n  CoreIonicColorNames[\"LIGHT\"] = \"light\";\n  CoreIonicColorNames[\"NONE\"] = \"\";\n})(CoreIonicColorNames || (CoreIonicColorNames = {}));\n/**\n * Singleton with helper functions for colors.\n */\nexport class CoreColors {\n  /**\n   * Returns better contrast color.\n   *\n   * @param color Black or white texts.\n   * @returns True if white contrasts better than black. False otherwise.\n   */\n  static isWhiteContrastingBetter(color) {\n    return CoreColors.luma(color) < 165;\n  }\n  /**\n   * Returns the same color % darker.\n   *\n   * @param color Color to get darker.\n   * @returns Darker Hex RGB color.\n   */\n  static darker(color, percent = 48) {\n    const inversePercent = 1 - percent / 100;\n    const components = CoreColors.hexToRGB(color);\n    components.red = Math.floor(components.red * inversePercent);\n    components.green = Math.floor(components.green * inversePercent);\n    components.blue = Math.floor(components.blue * inversePercent);\n    return CoreColors.RGBToHex(components);\n  }\n  /**\n   * Returns the same color % lighter.\n   *\n   * @param color Color to get lighter.\n   * @returns Lighter Hex RGB color.\n   */\n  static lighter(color, percent = 80) {\n    percent = percent / 100;\n    const inversePercent = 1 - percent;\n    const components = CoreColors.hexToRGB(color);\n    components.red = Math.floor(255 * percent + components.red * inversePercent);\n    components.green = Math.floor(255 * percent + components.green * inversePercent);\n    components.blue = Math.floor(255 * percent + components.blue * inversePercent);\n    return CoreColors.RGBToHex(components);\n  }\n  /**\n   * Returns the hex code from any color css type (ie named).\n   *\n   * @param color Color in any format.\n   * @returns Color in hex format.\n   */\n  static getColorHex(color) {\n    const rgba = CoreColors.getColorRGBA(color);\n    if (rgba.length === 0) {\n      return '';\n    }\n    const hex = [0, 1, 2].map(idx => this.componentToHex(rgba[idx])).join('');\n    return '#' + hex;\n  }\n  /**\n   * Returns RGBA color from any color format.\n   *\n   * @param color Color in any format.\n   * @returns Red, green, blue and alpha.\n   */\n  static getColorRGBA(color) {\n    if (!color.match(/rgba?\\(.*\\)/)) {\n      // Convert the color to RGB format.\n      const d = document.createElement('span');\n      d.style.color = color;\n      document.body.appendChild(d);\n      color = getComputedStyle(d).color;\n      document.body.removeChild(d);\n    }\n    const matches = color.match(/\\d+[^.]|\\d*\\.\\d*/g) || [];\n    return matches.map((a, index) => index < 3 ? parseInt(a, 10) : parseFloat(a));\n  }\n  /**\n   * Gets the luma of a color.\n   *\n   * @param color Hex RGB color.\n   * @returns Luma number based on SMPTE C, Rec. 709 weightings.\n   */\n  static luma(color) {\n    const rgb = CoreColors.hexToRGB(color);\n    return rgb.red * 0.2126 + rgb.green * 0.7152 + rgb.blue * 0.0722;\n  }\n  /**\n   * Converts Hex RGB to Color components.\n   *\n   * @param color Hexadec RGB Color.\n   * @returns RGB color components.\n   */\n  static hexToRGB(color) {\n    if (color.charAt(0) == '#') {\n      color = color.substring(1);\n    }\n    if (color.length === 3) {\n      color = color.charAt(0) + color.charAt(0) + color.charAt(1) + color.charAt(1) + color.charAt(2) + color.charAt(2);\n    } else if (color.length !== 6) {\n      throw 'Invalid hex color: ' + color;\n    }\n    return {\n      red: parseInt(color.substring(0, 2), 16),\n      green: parseInt(color.substring(2, 4), 16),\n      blue: parseInt(color.substring(4, 6), 16)\n    };\n  }\n  /**\n   * Converts RGB components to Hex string.\n   *\n   * @param color Color components.\n   * @returns RGB color in string.\n   */\n  static RGBToHex(color) {\n    return '#' + CoreColors.componentToHex(color.red) + CoreColors.componentToHex(color.green) + CoreColors.componentToHex(color.blue);\n  }\n  /**\n   * Converts a color component from decimal to hexadec.\n   *\n   * @param c color component in decimal.\n   * @returns Hexadec of the color component.\n   */\n  static componentToHex(c) {\n    return ('0' + c.toString(16)).slice(-2);\n  }\n  /**\n   * Get the toolbar's current background color.\n   *\n   * @returns Color in hex format.\n   */\n  static getToolbarBackgroundColor() {\n    const element = document.querySelector('ion-header ion-toolbar');\n    let color;\n    if (element) {\n      color = getComputedStyle(element).getPropertyValue('--background').trim();\n    } else {\n      // Fallback, it won't always work.\n      color = getComputedStyle(document.body).getPropertyValue('--core-header-toolbar-background').trim();\n    }\n    return CoreColors.getColorHex(color);\n  }\n  /**\n   * Get the bottom page current background color. Bottom bar if shown or page background otherwise.\n   *\n   * @returns Color in hex format.\n   */\n  static getBottomPageBackgroundColor() {\n    const element = document.querySelector('ion-tabs.placement-bottom:not(.tabshidden) ion-tab-bar.mainmenu-tabs');\n    let color;\n    if (element) {\n      color = getComputedStyle(element).getPropertyValue('--background').trim();\n    } else {\n      // Fallback, it won't always work.\n      color = getComputedStyle(document.body).getPropertyValue('--ion-background-color').trim();\n    }\n    return CoreColors.getColorHex(color);\n  }\n}","map":{"version":3,"names":["CoreIonicColorNames","CoreColors","isWhiteContrastingBetter","color","luma","darker","percent","inversePercent","components","hexToRGB","red","Math","floor","green","blue","RGBToHex","lighter","getColorHex","rgba","getColorRGBA","length","hex","map","idx","componentToHex","join","match","d","document","createElement","style","body","appendChild","getComputedStyle","removeChild","matches","a","index","parseInt","parseFloat","rgb","charAt","substring","c","toString","slice","getToolbarBackgroundColor","element","querySelector","getPropertyValue","trim","getBottomPageBackgroundColor"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/singletons/colors.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Color components contained within a rgb color.\n */\ninterface ColorComponents {\n    red: number; // Red component of an RGB color [0-255].\n    green: number; // Green component of an RGB color [0-255].\n    blue: number; // Blue component of an RGB color [0-255].\n}\n\n/**\n * Ionic color names.\n */\nexport enum CoreIonicColorNames {\n    PRIMARY = 'primary',\n    SECONDARY = 'secondary',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    DANGER = 'danger',\n    INFO = 'info',\n    DARK = 'dark',\n    MEDIUM = 'medium',\n    LIGHT = 'light',\n    NONE = '',\n}\n\n/**\n * Singleton with helper functions for colors.\n */\nexport class CoreColors {\n\n    /**\n     * Returns better contrast color.\n     *\n     * @param color Black or white texts.\n     * @returns True if white contrasts better than black. False otherwise.\n     */\n    static isWhiteContrastingBetter(color: string): boolean {\n        return CoreColors.luma(color) < 165;\n    }\n\n    /**\n     * Returns the same color % darker.\n     *\n     * @param color Color to get darker.\n     * @returns Darker Hex RGB color.\n     */\n    static darker(color: string, percent: number = 48): string {\n        const inversePercent = 1 - (percent / 100);\n        const components = CoreColors.hexToRGB(color);\n        components.red = Math.floor(components.red * inversePercent);\n        components.green = Math.floor(components.green * inversePercent);\n        components.blue = Math.floor(components.blue * inversePercent);\n\n        return CoreColors.RGBToHex(components);\n    }\n\n    /**\n     * Returns the same color % lighter.\n     *\n     * @param color Color to get lighter.\n     * @returns Lighter Hex RGB color.\n     */\n    static lighter(color: string, percent: number = 80): string {\n        percent = percent / 100;\n        const inversePercent = 1 - percent;\n\n        const components = CoreColors.hexToRGB(color);\n        components.red = Math.floor(255 * percent + components.red * inversePercent);\n        components.green = Math.floor(255 * percent + components.green * inversePercent);\n        components.blue = Math.floor(255 * percent + components.blue * inversePercent);\n\n        return CoreColors.RGBToHex(components);\n    }\n\n    /**\n     * Returns the hex code from any color css type (ie named).\n     *\n     * @param color Color in any format.\n     * @returns Color in hex format.\n     */\n    static getColorHex(color: string): string {\n        const rgba = CoreColors.getColorRGBA(color);\n        if (rgba.length === 0) {\n            return '';\n        }\n\n        const hex = [0,1,2].map(\n            (idx) => this.componentToHex(rgba[idx]),\n        ).join('');\n\n        return '#' + hex;\n    }\n\n    /**\n     * Returns RGBA color from any color format.\n     *\n     * @param color Color in any format.\n     * @returns Red, green, blue and alpha.\n     */\n    static getColorRGBA(color: string): number[] {\n        if (!color.match(/rgba?\\(.*\\)/)) {\n            // Convert the color to RGB format.\n            const d = document.createElement('span');\n            d.style.color = color;\n            document.body.appendChild(d);\n\n            color = getComputedStyle(d).color;\n            document.body.removeChild(d);\n        }\n\n        const matches = color.match(/\\d+[^.]|\\d*\\.\\d*/g) || [];\n\n        return matches.map((a, index) => index < 3 ? parseInt(a, 10) : parseFloat(a));\n    }\n\n    /**\n     * Gets the luma of a color.\n     *\n     * @param color Hex RGB color.\n     * @returns Luma number based on SMPTE C, Rec. 709 weightings.\n     */\n    protected static luma(color: string): number {\n        const rgb = CoreColors.hexToRGB(color);\n\n        return (rgb.red * 0.2126) + (rgb.green * 0.7152) + (rgb.blue * 0.0722);\n    }\n\n    /**\n     * Converts Hex RGB to Color components.\n     *\n     * @param color Hexadec RGB Color.\n     * @returns RGB color components.\n     */\n    static hexToRGB(color: string): ColorComponents {\n        if (color.charAt(0) == '#') {\n            color = color.substring(1);\n        }\n\n        if (color.length === 3) {\n            color = color.charAt(0) + color.charAt(0) + color.charAt(1) + color.charAt(1) + color.charAt(2) + color.charAt(2);\n        } else if (color.length !== 6) {\n            throw('Invalid hex color: ' + color);\n        }\n\n        return {\n            red: parseInt(color.substring(0, 2), 16),\n            green: parseInt(color.substring(2, 4), 16),\n            blue: parseInt(color.substring(4, 6), 16),\n        };\n\n    }\n\n    /**\n     * Converts RGB components to Hex string.\n     *\n     * @param color Color components.\n     * @returns RGB color in string.\n     */\n    protected static RGBToHex(color: ColorComponents): string {\n        return '#' + CoreColors.componentToHex(color.red) +\n            CoreColors.componentToHex(color.green) +\n            CoreColors.componentToHex(color.blue);\n\n    }\n\n    /**\n     * Converts a color component from decimal to hexadec.\n     *\n     * @param c color component in decimal.\n     * @returns Hexadec of the color component.\n     */\n    protected static componentToHex(c: number): string {\n        return ('0' + c.toString(16)).slice(-2);\n    }\n\n    /**\n     * Get the toolbar's current background color.\n     *\n     * @returns Color in hex format.\n     */\n    static getToolbarBackgroundColor(): string {\n        const element = document.querySelector('ion-header ion-toolbar');\n        let color: string;\n\n        if (element) {\n            color = getComputedStyle(element).getPropertyValue('--background').trim();\n        } else {\n            // Fallback, it won't always work.\n            color = getComputedStyle(document.body).getPropertyValue('--core-header-toolbar-background').trim();\n        }\n\n        return CoreColors.getColorHex(color);\n    }\n\n    /**\n     * Get the bottom page current background color. Bottom bar if shown or page background otherwise.\n     *\n     * @returns Color in hex format.\n     */\n    static getBottomPageBackgroundColor(): string {\n        const element = document.querySelector('ion-tabs.placement-bottom:not(.tabshidden) ion-tab-bar.mainmenu-tabs');\n        let color: string;\n\n        if (element) {\n            color = getComputedStyle(element).getPropertyValue('--background').trim();\n        } else {\n            // Fallback, it won't always work.\n            color = getComputedStyle(document.body).getPropertyValue('--ion-background-color').trim();\n        }\n\n        return CoreColors.getColorHex(color);\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}