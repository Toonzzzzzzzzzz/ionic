{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { AddonModAssignProvider, AddonModAssign } from '@addons/mod/assign/services/assign';\nimport { AddonModAssignHelper } from '@addons/mod/assign/services/assign-helper';\nimport { AddonModAssignOffline } from '@addons/mod/assign/services/assign-offline';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreFileHelper } from '@services/file-helper';\nimport { CoreFileSession } from '@services/file-session';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModAssignSubmissionFileComponent } from '../component/file';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for file submission plugin.\n */\nexport class AddonModAssignSubmissionFileHandlerService {\n  constructor() {\n    this.name = 'AddonModAssignSubmissionFileHandler';\n    this.type = 'file';\n  }\n  /**\n   * Whether the plugin can be edited in offline for existing submissions. In general, this should return false if the\n   * plugin uses Moodle filters. The reason is that the app only prefetches filtered data, and the user should edit\n   * unfiltered data.\n   *\n   * @returns Boolean or promise resolved with boolean: whether it can be edited in offline.\n   */\n  canEditOffline() {\n    // This plugin doesn't use Moodle filters, it can be edited in offline.\n    return true;\n  }\n  /**\n   * Check if a plugin has no data.\n   *\n   * @param assign The assignment.\n   * @param plugin The plugin object.\n   * @returns Whether the plugin is empty.\n   */\n  isEmpty(assign, plugin) {\n    const files = AddonModAssign.getSubmissionPluginAttachments(plugin);\n    return files.length === 0;\n  }\n  /**\n   * Should clear temporary data for a cancelled submission.\n   *\n   * @param assign The assignment.\n   */\n  clearTmpData(assign) {\n    const files = CoreFileSession.getFiles(AddonModAssignProvider.COMPONENT, assign.id);\n    // Clear the files in session for this assign.\n    CoreFileSession.clearFiles(AddonModAssignProvider.COMPONENT, assign.id);\n    // Now delete the local files from the tmp folder.\n    CoreFileUploader.clearTmpFiles(files);\n  }\n  /**\n   * This function will be called when the user wants to create a new submission based on the previous one.\n   * It should add to pluginData the data to send to server based in the data in plugin (previous attempt).\n   *\n   * @param assign The assignment.\n   * @param plugin The plugin object.\n   * @param pluginData Object where to store the data to send.\n   * @returns If the function is async, it should return a Promise resolved when done.\n   */\n  copySubmissionData(assign, plugin, pluginData) {\n    return _asyncToGenerator(function* () {\n      // We need to re-upload all the existing files.\n      const files = AddonModAssign.getSubmissionPluginAttachments(plugin);\n      // Get the itemId.\n      pluginData.files_filemanager = yield AddonModAssignHelper.uploadFiles(assign.id, files);\n    })();\n  }\n  /**\n   * Return the Component to use to display the plugin data, either in read or in edit mode.\n   * It's recommended to return the class of the component, but you can also return an instance of the component.\n   *\n   * @returns The component (or promise resolved with component) to use, undefined if not found.\n   */\n  getComponent() {\n    return AddonModAssignSubmissionFileComponent;\n  }\n  /**\n   * Delete any stored data for the plugin and submission.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param offlineData Offline data stored.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns If the function is async, it should return a Promise resolved when done.\n   */\n  deleteOfflineData(assign, submission, plugin, offlineData, siteId) {\n    return _asyncToGenerator(function* () {\n      yield CoreUtils.ignoreErrors(AddonModAssignHelper.deleteStoredSubmissionFiles(assign.id, AddonModAssignSubmissionFileHandlerService.FOLDER_NAME, submission.userid, siteId));\n    })();\n  }\n  /**\n   * Get files used by this plugin.\n   * The files returned by this function will be prefetched when the user prefetches the assign.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @returns The files (or promise resolved with the files).\n   */\n  getPluginFiles(assign, submission, plugin) {\n    return AddonModAssign.getSubmissionPluginAttachments(plugin);\n  }\n  /**\n   * Get the size of data (in bytes) this plugin will send to copy a previous submission.\n   *\n   * @param assign The assignment.\n   * @param plugin The plugin object.\n   * @returns The size (or promise resolved with size).\n   */\n  getSizeForCopy(assign, plugin) {\n    return _asyncToGenerator(function* () {\n      const files = AddonModAssign.getSubmissionPluginAttachments(plugin);\n      return CoreFileHelper.getTotalFilesSize(files);\n    })();\n  }\n  /**\n   * Get the size of data (in bytes) this plugin will send to add or edit a submission.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @returns The size (or promise resolved with size).\n   */\n  getSizeForEdit(assign, submission, plugin) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Check if there's any change.\n      const hasChanged = yield _this.hasDataChanged(assign, submission, plugin);\n      if (hasChanged) {\n        const files = CoreFileSession.getFiles(AddonModAssignProvider.COMPONENT, assign.id);\n        return CoreFileHelper.getTotalFilesSize(files);\n      } else {\n        // Nothing has changed, we won't upload any file.\n        return 0;\n      }\n    })();\n  }\n  /**\n   * Check if the submission data has changed for this plugin.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @returns Boolean (or promise resolved with boolean): whether the data has changed.\n   */\n  hasDataChanged(assign, submission, plugin) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const offlineData = yield CoreUtils.ignoreErrors(\n      // Check if there's any offline data.\n      AddonModAssignOffline.getSubmission(assign.id, submission.userid), undefined);\n      let numFiles;\n      if (offlineData && offlineData.plugindata && offlineData.plugindata.files_filemanager) {\n        const offlineDataFiles = offlineData.plugindata.files_filemanager;\n        // Has offline data, return the number of files.\n        numFiles = offlineDataFiles.offline + offlineDataFiles.online.length;\n      } else {\n        // No offline data, return the number of online files.\n        const pluginFiles = AddonModAssign.getSubmissionPluginAttachments(plugin);\n        numFiles = pluginFiles && pluginFiles.length;\n      }\n      const currentFiles = CoreFileSession.getFiles(AddonModAssignProvider.COMPONENT, assign.id);\n      if (currentFiles.length != numFiles) {\n        // Number of files has changed.\n        return true;\n      }\n      const files = yield _this2.getSubmissionFilesToSync(assign, submission, offlineData);\n      // Check if there is any local file added and list has changed.\n      return CoreFileUploader.areFileListDifferent(currentFiles, files);\n    })();\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns True or promise resolved with true if enabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * Whether or not the handler is enabled for edit on a site level.\n   *\n   * @returns Whether or not the handler is enabled for edit on a site level.\n   */\n  isEnabledForEdit() {\n    return true;\n  }\n  /**\n   * Prepare and add to pluginData the data to send to the server based on the input data.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param inputData Data entered by the user for the submission.\n   * @param pluginData Object where to store the data to send.\n   * @param offline Whether the user is editing in offline.\n   * @param userId User ID. If not defined, site's current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns If the function is async, it should return a Promise resolved when done.\n   */\n  prepareSubmissionData(assign, submission, plugin, inputData, pluginData, offline = false, userId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const changed = yield _this3.hasDataChanged(assign, submission, plugin);\n      if (!changed) {\n        return;\n      }\n      // Data has changed, we need to upload new files and re-upload all the existing files.\n      const currentFiles = CoreFileSession.getFiles(AddonModAssignProvider.COMPONENT, assign.id);\n      const error = CoreUtils.hasRepeatedFilenames(currentFiles);\n      if (error) {\n        throw error;\n      }\n      pluginData.files_filemanager = yield AddonModAssignHelper.uploadOrStoreFiles(assign.id, AddonModAssignSubmissionFileHandlerService.FOLDER_NAME, currentFiles, offline, userId, siteId);\n    })();\n  }\n  /**\n   * Prepare and add to pluginData the data to send to the server based on the offline data stored.\n   * This will be used when performing a synchronization.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param offlineData Offline data stored.\n   * @param pluginData Object where to store the data to send.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns If the function is async, it should return a Promise resolved when done.\n   */\n  prepareSyncData(assign, submission, plugin, offlineData, pluginData, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const files = yield _this4.getSubmissionFilesToSync(assign, submission, offlineData, siteId);\n      if (files.length == 0) {\n        return;\n      }\n      pluginData.files_filemanager = yield AddonModAssignHelper.uploadFiles(assign.id, files, siteId);\n    })();\n  }\n  /**\n   * Get the file list to be synced.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param offlineData Offline data stored.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns File entries when is all resolved.\n   */\n  getSubmissionFilesToSync(assign, submission, offlineData, siteId) {\n    return _asyncToGenerator(function* () {\n      const filesData = offlineData === null || offlineData === void 0 ? void 0 : offlineData.plugindata.files_filemanager;\n      if (!filesData) {\n        return [];\n      }\n      // Has some data to sync.\n      let files = filesData.online || [];\n      if (filesData.offline) {\n        // Has offline files, get them and add them to the list.\n        const storedFiles = yield CoreUtils.ignoreErrors(AddonModAssignHelper.getStoredSubmissionFiles(assign.id, AddonModAssignSubmissionFileHandlerService.FOLDER_NAME, submission.userid, siteId), []);\n        files = files.concat(storedFiles);\n      }\n      return files;\n    })();\n  }\n}\n_class = AddonModAssignSubmissionFileHandlerService;\n_class.FOLDER_NAME = 'submission_file';\n_class.ɵfac = function AddonModAssignSubmissionFileHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModAssignSubmissionFileHandler = makeSingleton(AddonModAssignSubmissionFileHandlerService);","map":{"version":3,"names":["AddonModAssignProvider","AddonModAssign","AddonModAssignHelper","AddonModAssignOffline","CoreFileUploader","CoreFileHelper","CoreFileSession","CoreUtils","makeSingleton","AddonModAssignSubmissionFileComponent","AddonModAssignSubmissionFileHandlerService","constructor","name","type","canEditOffline","isEmpty","assign","plugin","files","getSubmissionPluginAttachments","length","clearTmpData","getFiles","COMPONENT","id","clearFiles","clearTmpFiles","copySubmissionData","pluginData","_asyncToGenerator","files_filemanager","uploadFiles","getComponent","deleteOfflineData","submission","offlineData","siteId","ignoreErrors","deleteStoredSubmissionFiles","FOLDER_NAME","userid","getPluginFiles","getSizeForCopy","getTotalFilesSize","getSizeForEdit","_this","hasChanged","hasDataChanged","_this2","getSubmission","undefined","numFiles","plugindata","offlineDataFiles","offline","online","pluginFiles","currentFiles","getSubmissionFilesToSync","areFileListDifferent","isEnabled","isEnabledForEdit","prepareSubmissionData","inputData","userId","_this3","changed","error","hasRepeatedFilenames","uploadOrStoreFiles","prepareSyncData","_this4","filesData","storedFiles","getStoredSubmissionFiles","concat","_class","factory","ɵfac","providedIn","AddonModAssignSubmissionFileHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/submission/file/services/handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    AddonModAssignAssign,\n    AddonModAssignSubmission,\n    AddonModAssignPlugin,\n    AddonModAssignProvider,\n    AddonModAssign,\n} from '@addons/mod/assign/services/assign';\nimport { AddonModAssignHelper } from '@addons/mod/assign/services/assign-helper';\nimport { AddonModAssignOffline, AddonModAssignSubmissionsDBRecordFormatted } from '@addons/mod/assign/services/assign-offline';\nimport { AddonModAssignSubmissionHandler } from '@addons/mod/assign/services/submission-delegate';\nimport { Injectable, Type } from '@angular/core';\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { CoreFileEntry, CoreFileHelper } from '@services/file-helper';\nimport { CoreFileSession } from '@services/file-session';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSFile } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { AddonModAssignSubmissionFileComponent } from '../component/file';\nimport { FileEntry } from '@awesome-cordova-plugins/file/ngx';\nimport type { AddonModAssignSubmissionPluginBaseComponent } from '@addons/mod/assign/classes/base-submission-plugin-component';\n\n/**\n * Handler for file submission plugin.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonModAssignSubmissionFileHandlerService implements AddonModAssignSubmissionHandler {\n\n    static readonly FOLDER_NAME = 'submission_file';\n\n    name = 'AddonModAssignSubmissionFileHandler';\n    type = 'file';\n\n    /**\n     * Whether the plugin can be edited in offline for existing submissions. In general, this should return false if the\n     * plugin uses Moodle filters. The reason is that the app only prefetches filtered data, and the user should edit\n     * unfiltered data.\n     *\n     * @returns Boolean or promise resolved with boolean: whether it can be edited in offline.\n     */\n    canEditOffline(): boolean {\n        // This plugin doesn't use Moodle filters, it can be edited in offline.\n        return true;\n    }\n\n    /**\n     * Check if a plugin has no data.\n     *\n     * @param assign The assignment.\n     * @param plugin The plugin object.\n     * @returns Whether the plugin is empty.\n     */\n    isEmpty(assign: AddonModAssignAssign, plugin: AddonModAssignPlugin): boolean {\n        const files = AddonModAssign.getSubmissionPluginAttachments(plugin);\n\n        return files.length === 0;\n    }\n\n    /**\n     * Should clear temporary data for a cancelled submission.\n     *\n     * @param assign The assignment.\n     */\n    clearTmpData(assign: AddonModAssignAssign): void {\n        const files = CoreFileSession.getFiles(AddonModAssignProvider.COMPONENT, assign.id);\n\n        // Clear the files in session for this assign.\n        CoreFileSession.clearFiles(AddonModAssignProvider.COMPONENT, assign.id);\n\n        // Now delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(files);\n    }\n\n    /**\n     * This function will be called when the user wants to create a new submission based on the previous one.\n     * It should add to pluginData the data to send to server based in the data in plugin (previous attempt).\n     *\n     * @param assign The assignment.\n     * @param plugin The plugin object.\n     * @param pluginData Object where to store the data to send.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    async copySubmissionData(\n        assign: AddonModAssignAssign,\n        plugin: AddonModAssignPlugin,\n        pluginData: AddonModAssignSubmissionFilePluginData,\n    ): Promise<void> {\n        // We need to re-upload all the existing files.\n        const files = AddonModAssign.getSubmissionPluginAttachments(plugin);\n\n        // Get the itemId.\n        pluginData.files_filemanager = await AddonModAssignHelper.uploadFiles(assign.id, files);\n    }\n\n    /**\n     * Return the Component to use to display the plugin data, either in read or in edit mode.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     *\n     * @returns The component (or promise resolved with component) to use, undefined if not found.\n     */\n    getComponent(): Type<AddonModAssignSubmissionPluginBaseComponent> {\n        return AddonModAssignSubmissionFileComponent;\n    }\n\n    /**\n     * Delete any stored data for the plugin and submission.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param offlineData Offline data stored.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    async deleteOfflineData(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        offlineData: AddonModAssignSubmissionsDBRecordFormatted,\n        siteId?: string,\n    ): Promise<void> {\n\n        await CoreUtils.ignoreErrors(\n            AddonModAssignHelper.deleteStoredSubmissionFiles(\n                assign.id,\n                AddonModAssignSubmissionFileHandlerService.FOLDER_NAME,\n                submission.userid,\n                siteId,\n            ),\n        );\n    }\n\n    /**\n     * Get files used by this plugin.\n     * The files returned by this function will be prefetched when the user prefetches the assign.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @returns The files (or promise resolved with the files).\n     */\n    getPluginFiles(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n    ): CoreWSFile[] {\n        return AddonModAssign.getSubmissionPluginAttachments(plugin);\n    }\n\n    /**\n     * Get the size of data (in bytes) this plugin will send to copy a previous submission.\n     *\n     * @param assign The assignment.\n     * @param plugin The plugin object.\n     * @returns The size (or promise resolved with size).\n     */\n    async getSizeForCopy(assign: AddonModAssignAssign, plugin: AddonModAssignPlugin): Promise<number> {\n        const files = AddonModAssign.getSubmissionPluginAttachments(plugin);\n\n        return CoreFileHelper.getTotalFilesSize(files);\n    }\n\n    /**\n     * Get the size of data (in bytes) this plugin will send to add or edit a submission.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @returns The size (or promise resolved with size).\n     */\n    async getSizeForEdit(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n    ): Promise<number> {\n        // Check if there's any change.\n        const hasChanged = await this.hasDataChanged(assign, submission, plugin);\n        if (hasChanged) {\n            const files = CoreFileSession.getFiles(AddonModAssignProvider.COMPONENT, assign.id);\n\n            return CoreFileHelper.getTotalFilesSize(files);\n        } else {\n            // Nothing has changed, we won't upload any file.\n            return 0;\n        }\n    }\n\n    /**\n     * Check if the submission data has changed for this plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @returns Boolean (or promise resolved with boolean): whether the data has changed.\n     */\n    async hasDataChanged(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n    ): Promise<boolean> {\n        const offlineData = await CoreUtils.ignoreErrors(\n            // Check if there's any offline data.\n            AddonModAssignOffline.getSubmission(assign.id, submission.userid),\n            undefined,\n        );\n\n        let numFiles: number;\n        if (offlineData && offlineData.plugindata && offlineData.plugindata.files_filemanager) {\n            const offlineDataFiles = <CoreFileUploaderStoreFilesResult>offlineData.plugindata.files_filemanager;\n            // Has offline data, return the number of files.\n            numFiles = offlineDataFiles.offline + offlineDataFiles.online.length;\n        } else {\n            // No offline data, return the number of online files.\n            const pluginFiles = AddonModAssign.getSubmissionPluginAttachments(plugin);\n\n            numFiles = pluginFiles && pluginFiles.length;\n        }\n\n        const currentFiles = CoreFileSession.getFiles(AddonModAssignProvider.COMPONENT, assign.id);\n\n        if (currentFiles.length != numFiles) {\n            // Number of files has changed.\n            return true;\n        }\n\n        const files = await this.getSubmissionFilesToSync(assign, submission, offlineData);\n\n        // Check if there is any local file added and list has changed.\n        return CoreFileUploader.areFileListDifferent(currentFiles, files);\n    }\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns True or promise resolved with true if enabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * Whether or not the handler is enabled for edit on a site level.\n     *\n     * @returns Whether or not the handler is enabled for edit on a site level.\n     */\n    isEnabledForEdit(): boolean {\n        return true;\n    }\n\n    /**\n     * Prepare and add to pluginData the data to send to the server based on the input data.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the submission.\n     * @param pluginData Object where to store the data to send.\n     * @param offline Whether the user is editing in offline.\n     * @param userId User ID. If not defined, site's current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    async prepareSubmissionData(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: AddonModAssignSubmissionFileData,\n        pluginData: AddonModAssignSubmissionFilePluginData,\n        offline = false,\n        userId?: number,\n        siteId?: string,\n    ): Promise<void> {\n\n        const changed = await this.hasDataChanged(assign, submission, plugin);\n        if (!changed) {\n            return;\n        }\n\n        // Data has changed, we need to upload new files and re-upload all the existing files.\n        const currentFiles = CoreFileSession.getFiles(AddonModAssignProvider.COMPONENT, assign.id);\n        const error = CoreUtils.hasRepeatedFilenames(currentFiles);\n\n        if (error) {\n            throw error;\n        }\n\n        pluginData.files_filemanager = await AddonModAssignHelper.uploadOrStoreFiles(\n            assign.id,\n            AddonModAssignSubmissionFileHandlerService.FOLDER_NAME,\n            currentFiles,\n            offline,\n            userId,\n            siteId,\n        );\n    }\n\n    /**\n     * Prepare and add to pluginData the data to send to the server based on the offline data stored.\n     * This will be used when performing a synchronization.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param offlineData Offline data stored.\n     * @param pluginData Object where to store the data to send.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    async prepareSyncData(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        offlineData: AddonModAssignSubmissionsDBRecordFormatted,\n        pluginData: AddonModAssignSubmissionFilePluginData,\n        siteId?: string,\n    ): Promise<void> {\n\n        const files = await this.getSubmissionFilesToSync(assign, submission, offlineData, siteId);\n\n        if (files.length == 0) {\n            return;\n        }\n\n        pluginData.files_filemanager = await AddonModAssignHelper.uploadFiles(assign.id, files, siteId);\n    }\n\n    /**\n     * Get the file list to be synced.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param offlineData Offline data stored.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns File entries when is all resolved.\n     */\n    protected async getSubmissionFilesToSync(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        offlineData?: AddonModAssignSubmissionsDBRecordFormatted,\n        siteId?: string,\n    ): Promise<CoreFileEntry[]> {\n        const filesData = <CoreFileUploaderStoreFilesResult>offlineData?.plugindata.files_filemanager;\n        if (!filesData) {\n            return [];\n        }\n\n        // Has some data to sync.\n        let files: CoreFileEntry[] = filesData.online || [];\n\n        if (filesData.offline) {\n            // Has offline files, get them and add them to the list.\n            const storedFiles = <FileEntry[]> await CoreUtils.ignoreErrors(\n                AddonModAssignHelper.getStoredSubmissionFiles(\n                    assign.id,\n                    AddonModAssignSubmissionFileHandlerService.FOLDER_NAME,\n                    submission.userid,\n                    siteId,\n                ),\n                [],\n            );\n            files = files.concat(storedFiles);\n        }\n\n        return files;\n    }\n\n}\nexport const AddonModAssignSubmissionFileHandler = makeSingleton(AddonModAssignSubmissionFileHandlerService);\n\n// Define if ever used.\nexport type AddonModAssignSubmissionFileData = Record<string, unknown>;\n\nexport type AddonModAssignSubmissionFilePluginData = {\n    // The id of a draft area containing files for this submission. Or the offline file results.\n    files_filemanager: number | CoreFileUploaderStoreFilesResult; // eslint-disable-line @typescript-eslint/naming-convention\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}