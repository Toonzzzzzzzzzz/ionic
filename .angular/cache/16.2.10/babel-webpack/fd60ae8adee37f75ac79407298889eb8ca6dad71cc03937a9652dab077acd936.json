{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { defaultTextFormat } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWS } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModWorkshopOffline } from './workshop-offline';\nimport { AddonModWorkshopSyncProvider } from './workshop-sync';\nimport { ADDON_MOD_WORKSHOP_COMPONENT } from '@addons/mod/workshop/constants';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaModWorkshop:';\nexport var AddonModWorkshopPhase;\n(function (AddonModWorkshopPhase) {\n  AddonModWorkshopPhase[AddonModWorkshopPhase[\"PHASE_SETUP\"] = 10] = \"PHASE_SETUP\";\n  AddonModWorkshopPhase[AddonModWorkshopPhase[\"PHASE_SUBMISSION\"] = 20] = \"PHASE_SUBMISSION\";\n  AddonModWorkshopPhase[AddonModWorkshopPhase[\"PHASE_ASSESSMENT\"] = 30] = \"PHASE_ASSESSMENT\";\n  AddonModWorkshopPhase[AddonModWorkshopPhase[\"PHASE_EVALUATION\"] = 40] = \"PHASE_EVALUATION\";\n  AddonModWorkshopPhase[AddonModWorkshopPhase[\"PHASE_CLOSED\"] = 50] = \"PHASE_CLOSED\";\n})(AddonModWorkshopPhase || (AddonModWorkshopPhase = {}));\nexport var AddonModWorkshopSubmissionType;\n(function (AddonModWorkshopSubmissionType) {\n  AddonModWorkshopSubmissionType[AddonModWorkshopSubmissionType[\"SUBMISSION_TYPE_DISABLED\"] = 0] = \"SUBMISSION_TYPE_DISABLED\";\n  AddonModWorkshopSubmissionType[AddonModWorkshopSubmissionType[\"SUBMISSION_TYPE_AVAILABLE\"] = 1] = \"SUBMISSION_TYPE_AVAILABLE\";\n  AddonModWorkshopSubmissionType[AddonModWorkshopSubmissionType[\"SUBMISSION_TYPE_REQUIRED\"] = 2] = \"SUBMISSION_TYPE_REQUIRED\";\n})(AddonModWorkshopSubmissionType || (AddonModWorkshopSubmissionType = {}));\nexport var AddonModWorkshopExampleMode;\n(function (AddonModWorkshopExampleMode) {\n  AddonModWorkshopExampleMode[AddonModWorkshopExampleMode[\"EXAMPLES_VOLUNTARY\"] = 0] = \"EXAMPLES_VOLUNTARY\";\n  AddonModWorkshopExampleMode[AddonModWorkshopExampleMode[\"EXAMPLES_BEFORE_SUBMISSION\"] = 1] = \"EXAMPLES_BEFORE_SUBMISSION\";\n  AddonModWorkshopExampleMode[AddonModWorkshopExampleMode[\"EXAMPLES_BEFORE_ASSESSMENT\"] = 2] = \"EXAMPLES_BEFORE_ASSESSMENT\";\n})(AddonModWorkshopExampleMode || (AddonModWorkshopExampleMode = {}));\nexport var AddonModWorkshopAction;\n(function (AddonModWorkshopAction) {\n  AddonModWorkshopAction[\"ADD\"] = \"add\";\n  AddonModWorkshopAction[\"DELETE\"] = \"delete\";\n  AddonModWorkshopAction[\"UPDATE\"] = \"update\";\n})(AddonModWorkshopAction || (AddonModWorkshopAction = {}));\nexport var AddonModWorkshopAssessmentMode;\n(function (AddonModWorkshopAssessmentMode) {\n  AddonModWorkshopAssessmentMode[\"ASSESSMENT\"] = \"assessment\";\n  AddonModWorkshopAssessmentMode[\"PREVIEW\"] = \"preview\";\n})(AddonModWorkshopAssessmentMode || (AddonModWorkshopAssessmentMode = {}));\nexport var AddonModWorkshopOverallFeedbackMode;\n(function (AddonModWorkshopOverallFeedbackMode) {\n  AddonModWorkshopOverallFeedbackMode[AddonModWorkshopOverallFeedbackMode[\"DISABLED\"] = 0] = \"DISABLED\";\n  AddonModWorkshopOverallFeedbackMode[AddonModWorkshopOverallFeedbackMode[\"ENABLED_OPTIONAL\"] = 1] = \"ENABLED_OPTIONAL\";\n  AddonModWorkshopOverallFeedbackMode[AddonModWorkshopOverallFeedbackMode[\"ENABLED_REQUIRED\"] = 2] = \"ENABLED_REQUIRED\";\n})(AddonModWorkshopOverallFeedbackMode || (AddonModWorkshopOverallFeedbackMode = {}));\n/**\n * Service that provides some features for workshops.\n */\nexport class AddonModWorkshopProvider {\n  /**\n   * Get cache key for workshop data WS calls.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getWorkshopDataCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'workshop:' + courseId;\n  }\n  /**\n   * Get prefix cache key for all workshop activity data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @returns Cache key.\n   */\n  getWorkshopDataPrefixCacheKey(workshopId) {\n    return ROOT_CACHE_KEY + workshopId;\n  }\n  /**\n   * Get cache key for workshop access information data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @returns Cache key.\n   */\n  getWorkshopAccessInformationDataCacheKey(workshopId) {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':access';\n  }\n  /**\n   * Get cache key for workshop user plan data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @returns Cache key.\n   */\n  getUserPlanDataCacheKey(workshopId) {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':userplan';\n  }\n  /**\n   * Get cache key for workshop submissions data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @param userId User ID.\n   * @param groupId Group ID.\n   * @returns Cache key.\n   */\n  getSubmissionsDataCacheKey(workshopId, userId = 0, groupId = 0) {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':submissions:' + userId + ':' + groupId;\n  }\n  /**\n   * Get cache key for a workshop submission data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId Submission ID.\n   * @returns Cache key.\n   */\n  getSubmissionDataCacheKey(workshopId, submissionId) {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':submission:' + submissionId;\n  }\n  /**\n   * Get cache key for workshop grades data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @returns Cache key.\n   */\n  getGradesDataCacheKey(workshopId) {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':grades';\n  }\n  /**\n   * Get cache key for workshop grade report data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @param groupId Group ID.\n   * @returns Cache key.\n   */\n  getGradesReportDataCacheKey(workshopId, groupId = 0) {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':report:' + groupId;\n  }\n  /**\n   * Get cache key for workshop submission assessments data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId Submission ID.\n   * @returns Cache key.\n   */\n  getSubmissionAssessmentsDataCacheKey(workshopId, submissionId) {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':assessments:' + submissionId;\n  }\n  /**\n   * Get cache key for workshop reviewer assessments data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @param userId User ID or current user.\n   * @returns Cache key.\n   */\n  getReviewerAssessmentsDataCacheKey(workshopId, userId = 0) {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':reviewerassessments:' + userId;\n  }\n  /**\n   * Get cache key for a workshop assessment data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @returns Cache key.\n   */\n  getAssessmentDataCacheKey(workshopId, assessmentId) {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':assessment:' + assessmentId;\n  }\n  /**\n   * Get cache key for workshop assessment form data WS calls.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param mode Mode assessment (default) or preview.\n   * @returns Cache key.\n   */\n  getAssessmentFormDataCacheKey(workshopId, assessmentId, mode = 'assessment') {\n    return this.getWorkshopDataPrefixCacheKey(workshopId) + ':assessmentsform:' + assessmentId + ':' + mode;\n  }\n  /**\n   * Get a workshop with key=value. If more than one is found, only the first will be returned.\n   *\n   * @param courseId Course ID.\n   * @param key Name of the property to check.\n   * @param value Value to search.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop is retrieved.\n   */\n  getWorkshopByKey(courseId, key, value, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        courseids: [courseId]\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this.getWorkshopDataCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: ADDON_MOD_WORKSHOP_COMPONENT\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_workshop_get_workshops_by_courses', params, preSets);\n      const workshop = response.workshops.find(workshop => workshop[key] == value);\n      if (!workshop) {\n        throw new CoreError(Translate.instant('core.course.modulenotfound'));\n      }\n      // Set submission types for Moodle 3.5.\n      if (workshop.submissiontypetext === undefined) {\n        if (workshop.nattachments !== undefined && workshop.nattachments > 0) {\n          workshop.submissiontypetext = AddonModWorkshopSubmissionType.SUBMISSION_TYPE_AVAILABLE;\n          workshop.submissiontypefile = AddonModWorkshopSubmissionType.SUBMISSION_TYPE_AVAILABLE;\n        } else {\n          workshop.submissiontypetext = AddonModWorkshopSubmissionType.SUBMISSION_TYPE_REQUIRED;\n          workshop.submissiontypefile = AddonModWorkshopSubmissionType.SUBMISSION_TYPE_DISABLED;\n        }\n      }\n      return workshop;\n    })();\n  }\n  /**\n   * Get a workshop by course module ID.\n   *\n   * @param courseId Course ID.\n   * @param cmId Course module ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop is retrieved.\n   */\n  getWorkshop(courseId, cmId, options = {}) {\n    return this.getWorkshopByKey(courseId, 'coursemodule', cmId, options);\n  }\n  /**\n   * Get a workshop by ID.\n   *\n   * @param courseId Course ID.\n   * @param id Workshop ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop is retrieved.\n   */\n  getWorkshopById(courseId, id, options = {}) {\n    return this.getWorkshopByKey(courseId, 'id', id, options);\n  }\n  /**\n   * Invalidates workshop data.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the workshop is invalidated.\n   */\n  invalidateWorkshopData(courseId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this2.getWorkshopDataCacheKey(courseId));\n    })();\n  }\n  /**\n   * Invalidates workshop data except files and module info.\n   *\n   * @param workshopId Workshop ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the workshop is invalidated.\n   */\n  invalidateWorkshopWSData(workshopId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKeyStartingWith(_this3.getWorkshopDataPrefixCacheKey(workshopId));\n    })();\n  }\n  /**\n   * Get access information for a given workshop.\n   *\n   * @param workshopId Workshop ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop is retrieved.\n   */\n  getWorkshopAccessInformation(workshopId, options = {}) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        workshopid: workshopId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this4.getWorkshopAccessInformationDataCacheKey(workshopId),\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      return site.read('mod_workshop_get_workshop_access_information', params, preSets);\n    })();\n  }\n  /**\n   * Invalidates workshop access information data.\n   *\n   * @param workshopId Workshop ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateWorkshopAccessInformationData(workshopId, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this5.getWorkshopAccessInformationDataCacheKey(workshopId));\n    })();\n  }\n  /**\n   * Return the planner information for the given user.\n   *\n   * @param workshopId Workshop ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop data is retrieved.\n   */\n  getUserPlanPhases(workshopId, options = {}) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        workshopid: workshopId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this6.getUserPlanDataCacheKey(workshopId),\n        updateFrequency: CoreSite.FREQUENCY_OFTEN,\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_workshop_get_user_plan', params, preSets);\n      return CoreUtils.arrayToObject(response.userplan.phases, 'code');\n    })();\n  }\n  /**\n   * Invalidates workshop user plan data.\n   *\n   * @param workshopId Workshop ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateUserPlanPhasesData(workshopId, siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this7.getUserPlanDataCacheKey(workshopId));\n    })();\n  }\n  /**\n   * Retrieves all the workshop submissions visible by the current user or the one done by the given user.\n   *\n   * @param workshopId Workshop ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop submissions are retrieved.\n   */\n  getSubmissions(workshopId, options = {}) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const userId = options.userId || 0;\n      const groupId = options.groupId || 0;\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        workshopid: workshopId,\n        userid: userId,\n        groupid: groupId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this8.getSubmissionsDataCacheKey(workshopId, userId, groupId),\n        updateFrequency: CoreSite.FREQUENCY_OFTEN,\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_workshop_get_submissions', params, preSets);\n      return response.submissions;\n    })();\n  }\n  /**\n   * Invalidates workshop submissions data.\n   *\n   * @param workshopId Workshop ID.\n   * @param userId User ID.\n   * @param groupId Group ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateSubmissionsData(workshopId, userId = 0, groupId = 0, siteId) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this9.getSubmissionsDataCacheKey(workshopId, userId, groupId));\n    })();\n  }\n  /**\n   * Retrieves the given submission.\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId Submission ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop submission data is retrieved.\n   */\n  getSubmission(workshopId, submissionId, options = {}) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        submissionid: submissionId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this10.getSubmissionDataCacheKey(workshopId, submissionId),\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_workshop_get_submission', params, preSets);\n      return response.submission;\n    })();\n  }\n  /**\n   * Invalidates workshop submission data.\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId Submission ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateSubmissionData(workshopId, submissionId, siteId) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this11.getSubmissionDataCacheKey(workshopId, submissionId));\n    })();\n  }\n  /**\n   * Returns the grades information for the given workshop and user.\n   *\n   * @param workshopId Workshop ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop grades data is retrieved.\n   */\n  getGrades(workshopId, options = {}) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        workshopid: workshopId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this12.getGradesDataCacheKey(workshopId),\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      return site.read('mod_workshop_get_grades', params, preSets);\n    })();\n  }\n  /**\n   * Invalidates workshop grades data.\n   *\n   * @param workshopId Workshop ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateGradesData(workshopId, siteId) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this13.getGradesDataCacheKey(workshopId));\n    })();\n  }\n  /**\n   * Retrieves the assessment grades report.\n   *\n   * @param workshopId Workshop ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop data is retrieved.\n   */\n  getGradesReport(workshopId, options = {}) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        workshopid: workshopId,\n        groupid: options.groupId,\n        page: options.page || 0,\n        perpage: options.perPage || AddonModWorkshopProvider.PER_PAGE\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this14.getGradesReportDataCacheKey(workshopId, options.groupId),\n        updateFrequency: CoreSite.FREQUENCY_OFTEN,\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_workshop_get_grades_report', params, preSets);\n      return response.report;\n    })();\n  }\n  /**\n   * Performs the whole fetch of the grade reports in the workshop.\n   *\n   * @param workshopId Workshop ID.\n   * @param options Other options.\n   * @returns Promise resolved when done.\n   */\n  fetchAllGradeReports(workshopId, options = {}) {\n    return this.fetchGradeReportsRecursive(workshopId, [], _objectSpread(_objectSpread({}, options), {}, {\n      page: 0,\n      perPage: options.perPage || AddonModWorkshopProvider.PER_PAGE,\n      siteId: options.siteId || CoreSites.getCurrentSiteId()\n    }));\n  }\n  /**\n   * Recursive call on fetch all grade reports.\n   *\n   * @param workshopId Workshop ID.\n   * @param grades Grades already fetched (just to concatenate them).\n   * @param options Other options.\n   * @returns Promise resolved when done.\n   */\n  fetchGradeReportsRecursive(workshopId, grades, options = {}) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      var _options$page, _options$perPage;\n      options.page = (_options$page = options.page) !== null && _options$page !== void 0 ? _options$page : 0;\n      options.perPage = (_options$perPage = options.perPage) !== null && _options$perPage !== void 0 ? _options$perPage : AddonModWorkshopProvider.PER_PAGE;\n      const report = yield _this15.getGradesReport(workshopId, options);\n      Array.prototype.push.apply(grades, report.grades);\n      const canLoadMore = (options.page + 1) * options.perPage < report.totalcount;\n      if (canLoadMore) {\n        options.page++;\n        return _this15.fetchGradeReportsRecursive(workshopId, grades, options);\n      }\n      return grades;\n    })();\n  }\n  /**\n   * Invalidates workshop grade report data.\n   *\n   * @param workshopId Workshop ID.\n   * @param groupId Group ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateGradeReportData(workshopId, groupId = 0, siteId) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this16.getGradesReportDataCacheKey(workshopId, groupId));\n    })();\n  }\n  /**\n   * Retrieves the given submission assessment.\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId Submission ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop data is retrieved.\n   */\n  getSubmissionAssessments(workshopId, submissionId, options = {}) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        submissionid: submissionId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this17.getSubmissionAssessmentsDataCacheKey(workshopId, submissionId),\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_workshop_get_submission_assessments', params, preSets);\n      return response.assessments;\n    })();\n  }\n  /**\n   * Invalidates workshop submission assessments data.\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId Submission ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateSubmissionAssesmentsData(workshopId, submissionId, siteId) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this18.getSubmissionAssessmentsDataCacheKey(workshopId, submissionId));\n    })();\n  }\n  /**\n   * Add a new submission to a given workshop.\n   *\n   * @param workshopId Workshop ID.\n   * @param courseId Course ID the workshop belongs to.\n   * @param title The submission title.\n   * @param content The submission text content.\n   * @param attachmentsId The draft file area id for attachments.\n   * @param siteId Site ID. If not defined, current site.\n   * @param allowOffline True if it can be stored in offline, false otherwise.\n   * @returns Promise resolved with submission ID if sent online or false if stored offline.\n   */\n  addSubmission(workshopId, courseId, title, content, attachmentsId, siteId, allowOffline = false) {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Convenience function to store a message to be synchronized later.\n      const storeOffline = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* () {\n          yield AddonModWorkshopOffline.saveSubmission(workshopId, courseId, title, content, undefined, undefined, AddonModWorkshopAction.ADD, siteId);\n          return false;\n        });\n        return function storeOffline() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      // If we are editing an offline submission, discard previous first.\n      yield AddonModWorkshopOffline.deleteSubmissionAction(workshopId, AddonModWorkshopAction.ADD, siteId);\n      if (!CoreNetwork.isOnline() && allowOffline) {\n        // App is offline, store the action.\n        return storeOffline();\n      }\n      try {\n        return yield _this19.addSubmissionOnline(workshopId, title, content, attachmentsId, siteId);\n      } catch (error) {\n        if (allowOffline && !CoreUtils.isWebServiceError(error)) {\n          // Couldn't connect to server, store in offline.\n          return storeOffline();\n        }\n        // The WebService has thrown an error or offline not supported, reject.\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Add a new submission to a given workshop. It will fail if offline or cannot connect.\n   *\n   * @param workshopId Workshop ID.\n   * @param title The submission title.\n   * @param content The submission text content.\n   * @param attachmentsId The draft file area id for attachments.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the submission is created.\n   */\n  addSubmissionOnline(workshopId, title, content, attachmentsId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        workshopid: workshopId,\n        title: title,\n        content: content,\n        attachmentsid: attachmentsId\n      };\n      const response = yield site.write('mod_workshop_add_submission', params);\n      // Other errors ocurring.\n      CoreWS.throwOnFailedStatus(response, 'Add submission failed');\n      if (!response.submissionid) {\n        throw new CoreError('Add submission failed, no submission id was returned');\n      }\n      return response.submissionid;\n    })();\n  }\n  /**\n   * Updates the given submission.\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId Submission ID.\n   * @param courseId Course ID the workshop belongs to.\n   * @param title The submission title.\n   * @param content The submission text content.\n   * @param attachmentsId The draft file area id for attachments.\n   * @param siteId Site ID. If not defined, current site.\n   * @param allowOffline True if it can be stored in offline, false otherwise.\n   * @returns Promise resolved with submission ID if sent online or false if stored offline.\n   */\n  updateSubmission(workshopId, submissionId, courseId, title, content, attachmentsId, siteId, allowOffline = false) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Convenience function to store a message to be synchronized later.\n      const storeOffline = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* () {\n          yield AddonModWorkshopOffline.saveSubmission(workshopId, courseId, title, content, undefined, submissionId, AddonModWorkshopAction.UPDATE, siteId);\n          return false;\n        });\n        return function storeOffline() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      // If we are editing an offline discussion, discard previous first.\n      yield AddonModWorkshopOffline.deleteSubmissionAction(workshopId, AddonModWorkshopAction.UPDATE, siteId);\n      if (!CoreNetwork.isOnline() && allowOffline) {\n        // App is offline, store the action.\n        return storeOffline();\n      }\n      try {\n        return yield _this20.updateSubmissionOnline(submissionId, title, content, attachmentsId, siteId);\n      } catch (error) {\n        if (allowOffline && !CoreUtils.isWebServiceError(error)) {\n          // Couldn't connect to server, store in offline.\n          return storeOffline();\n        }\n        // The WebService has thrown an error or offline not supported, reject.\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Updates the given submission. It will fail if offline or cannot connect.\n   *\n   * @param submissionId Submission ID.\n   * @param title The submission title.\n   * @param content The submission text content.\n   * @param attachmentsId The draft file area id for attachments.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the submission is updated.\n   */\n  updateSubmissionOnline(submissionId, title, content, attachmentsId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        submissionid: submissionId,\n        title: title,\n        content: content,\n        attachmentsid: attachmentsId || 0\n      };\n      const response = yield site.write('mod_workshop_update_submission', params);\n      // Other errors ocurring.\n      CoreWS.throwOnFailedStatus(response, 'Update submission failed');\n      return submissionId;\n    })();\n  }\n  /**\n   * Deletes the given submission.\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId Submission ID.\n   * @param courseId Course ID the workshop belongs to.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with submission ID if sent online, resolved with false if stored offline.\n   */\n  deleteSubmission(workshopId, submissionId, courseId, siteId) {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Convenience function to store a message to be synchronized later.\n      const storeOffline = () => AddonModWorkshopOffline.saveSubmission(workshopId, courseId, '', '', undefined, submissionId, AddonModWorkshopAction.DELETE, siteId);\n      // If we are editing an offline discussion, discard previous first.\n      yield AddonModWorkshopOffline.deleteSubmissionAction(workshopId, AddonModWorkshopAction.DELETE, siteId);\n      if (!CoreNetwork.isOnline()) {\n        // App is offline, store the action.\n        return storeOffline();\n      }\n      try {\n        return yield _this21.deleteSubmissionOnline(submissionId, siteId);\n      } catch (error) {\n        if (!CoreUtils.isWebServiceError(error)) {\n          // Couldn't connect to server, store in offline.\n          return storeOffline();\n        }\n        // The WebService has thrown an error or offline not supported, reject.\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Deletes the given submission. It will fail if offline or cannot connect.\n   *\n   * @param submissionId Submission ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the submission is deleted.\n   */\n  deleteSubmissionOnline(submissionId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        submissionid: submissionId\n      };\n      const response = yield site.write('mod_workshop_delete_submission', params);\n      // Other errors ocurring.\n      CoreWS.throwOnFailedStatus(response, 'Delete submission failed');\n    })();\n  }\n  /**\n   * Retrieves all the assessments reviewed by the given user.\n   *\n   * @param workshopId Workshop ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop data is retrieved.\n   */\n  getReviewerAssessments(workshopId, options = {}) {\n    var _this22 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        workshopid: workshopId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this22.getReviewerAssessmentsDataCacheKey(workshopId, options.userId),\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      if (options.userId) {\n        params.userid = options.userId;\n      }\n      const response = yield site.read('mod_workshop_get_reviewer_assessments', params, preSets);\n      return response.assessments;\n    })();\n  }\n  /**\n   * Invalidates workshop user assessments data.\n   *\n   * @param workshopId Workshop ID.\n   * @param userId User ID. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateReviewerAssesmentsData(workshopId, userId, siteId) {\n    var _this23 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this23.getReviewerAssessmentsDataCacheKey(workshopId, userId));\n    })();\n  }\n  /**\n   * Retrieves the given assessment.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop data is retrieved.\n   */\n  getAssessment(workshopId, assessmentId, options = {}) {\n    var _this24 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        assessmentid: assessmentId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this24.getAssessmentDataCacheKey(workshopId, assessmentId),\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_workshop_get_assessment', params, preSets);\n      return response.assessment;\n    })();\n  }\n  /**\n   * Invalidates workshop assessment data.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAssessmentData(workshopId, assessmentId, siteId) {\n    var _this25 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this25.getAssessmentDataCacheKey(workshopId, assessmentId));\n    })();\n  }\n  /**\n   * Retrieves the assessment form definition (data required to be able to display the assessment form).\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop data is retrieved.\n   */\n  getAssessmentForm(workshopId, assessmentId, options = {}) {\n    var _this26 = this;\n    return _asyncToGenerator(function* () {\n      const mode = options.mode || AddonModWorkshopAssessmentMode.ASSESSMENT;\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        assessmentid: assessmentId,\n        mode: mode\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this26.getAssessmentFormDataCacheKey(workshopId, assessmentId, mode),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: ADDON_MOD_WORKSHOP_COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_workshop_get_assessment_form_definition', params, preSets);\n      return {\n        dimenssionscount: response.dimenssionscount,\n        descriptionfiles: response.descriptionfiles,\n        dimensionsinfo: response.dimensionsinfo,\n        warnings: response.warnings,\n        fields: _this26.parseFields(response.fields),\n        current: _this26.parseFields(response.current),\n        options: CoreUtils.objectToKeyValueMap(response.options, 'name', 'value')\n      };\n    })();\n  }\n  /**\n   * Parse fieldes into a more handful format.\n   *\n   * @param fields Fields to parse\n   * @returns Parsed fields\n   */\n  parseFields(fields) {\n    const parsedFields = [];\n    fields.forEach(field => {\n      const args = field.name.split('_');\n      const name = args[0];\n      const idx = args[3];\n      const idy = args[6];\n      const idxNumber = parseInt(args[3], 10);\n      const idyNumber = parseInt(args[6], 10);\n      if (!isNaN(idxNumber)) {\n        if (!parsedFields[idx]) {\n          parsedFields[idx] = {\n            number: idxNumber + 1 // eslint-disable-line id-blacklist\n          };\n        }\n\n        if (!isNaN(idyNumber)) {\n          if (!parsedFields[idx].fields) {\n            parsedFields[idx].fields = [];\n          }\n          if (!parsedFields[idx].fields[idy]) {\n            parsedFields[idx].fields[idy] = {\n              number: idyNumber + 1 // eslint-disable-line id-blacklist\n            };\n          }\n\n          parsedFields[idx].fields[idy][name] = field.value;\n        } else {\n          parsedFields[idx][name] = field.value;\n        }\n      }\n    });\n    return parsedFields;\n  }\n  /**\n   * Invalidates workshop assessments form data.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param mode Mode assessment (default) or preview.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAssessmentFormData(workshopId, assessmentId, mode = 'assessment', siteId) {\n    var _this27 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this27.getAssessmentFormDataCacheKey(workshopId, assessmentId, mode));\n    })();\n  }\n  /**\n   * Updates the given assessment.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param courseId Course ID the workshop belongs to.\n   * @param inputData Assessment data.\n   * @param siteId Site ID. If not defined, current site.\n   * @param allowOffline True if it can be stored in offline, false otherwise.\n   * @returns Promise resolved with true if sent online, or false if stored offline.\n   */\n  updateAssessment(workshopId, assessmentId, courseId, inputData, siteId, allowOffline = false) {\n    var _this28 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Convenience function to store a message to be synchronized later.\n      const storeOffline = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* () {\n          yield AddonModWorkshopOffline.saveAssessment(workshopId, assessmentId, courseId, inputData, siteId);\n          return false;\n        });\n        return function storeOffline() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n      // If we are editing an offline discussion, discard previous first.\n      yield AddonModWorkshopOffline.deleteAssessment(workshopId, assessmentId, siteId);\n      if (!CoreNetwork.isOnline() && allowOffline) {\n        // App is offline, store the action.\n        return storeOffline();\n      }\n      try {\n        yield _this28.updateAssessmentOnline(assessmentId, inputData, siteId);\n        return true;\n      } catch (error) {\n        if (allowOffline && !CoreUtils.isWebServiceError(error)) {\n          // Couldn't connect to server, store in offline.\n          return storeOffline();\n        }\n        // The WebService has thrown an error or offline not supported, reject.\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Updates the given assessment. It will fail if offline or cannot connect.\n   *\n   * @param assessmentId Assessment ID.\n   * @param inputData Assessment data.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the grade of the submission.\n   */\n  updateAssessmentOnline(assessmentId, inputData, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        assessmentid: assessmentId,\n        data: CoreUtils.objectToArrayOfObjects(inputData, 'name', 'value')\n      };\n      const response = yield site.write('mod_workshop_update_assessment', params);\n      // Other errors ocurring.\n      CoreWS.throwOnFailedStatus(response, 'Update assessment failed');\n    })();\n  }\n  /**\n   * Evaluates a submission (used by teachers for provide feedback or override the submission grade).\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId The submission id.\n   * @param courseId Course ID the workshop belongs to.\n   * @param feedbackText The feedback for the author.\n   * @param published Whether to publish the submission for other users.\n   * @param gradeOver The new submission grade (empty for no overriding the grade).\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when submission is evaluated if sent online,\n   *         resolved with false if stored offline.\n   */\n  evaluateSubmission(workshopId, submissionId, courseId, feedbackText, published, gradeOver, siteId) {\n    var _this29 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Convenience function to store a message to be synchronized later.\n      const storeOffline = () => AddonModWorkshopOffline.saveEvaluateSubmission(workshopId, submissionId, courseId, feedbackText, published, gradeOver, siteId).then(() => false);\n      // If we are editing an offline discussion, discard previous first.\n      yield AddonModWorkshopOffline.deleteEvaluateSubmission(workshopId, submissionId, siteId);\n      if (!CoreNetwork.isOnline()) {\n        // App is offline, store the action.\n        return storeOffline();\n      }\n      try {\n        return yield _this29.evaluateSubmissionOnline(submissionId, feedbackText, published, gradeOver, siteId);\n      } catch (error) {\n        if (CoreUtils.isWebServiceError(error)) {\n          // The WebService has thrown an error or offline not supported, reject.\n          throw error;\n        }\n        // Couldn't connect to server, store in offline.\n        return storeOffline();\n      }\n    })();\n  }\n  /**\n   * Evaluates a submission (used by teachers for provide feedback or override the submission grade).\n   * It will fail if offline or cannot connect.\n   *\n   * @param submissionId The submission id.\n   * @param feedbackText The feedback for the author.\n   * @param published Whether to publish the submission for other users.\n   * @param gradeOver The new submission grade (empty for no overriding the grade).\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the submission is evaluated.\n   */\n  evaluateSubmissionOnline(submissionId, feedbackText, published, gradeOver, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        submissionid: submissionId,\n        feedbacktext: feedbackText || '',\n        feedbackformat: defaultTextFormat,\n        published: published,\n        gradeover: gradeOver\n      };\n      const response = yield site.write('mod_workshop_evaluate_submission', params);\n      // Other errors ocurring.\n      CoreWS.throwOnFailedStatus(response, 'Evaluate submission failed');\n      return true;\n    })();\n  }\n  /**\n   * Evaluates an assessment (used by teachers for provide feedback to the reviewer).\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId The assessment id.\n   * @param courseId Course ID the workshop belongs to.\n   * @param feedbackText The feedback for the reviewer.\n   * @param weight The new weight for the assessment.\n   * @param gradingGradeOver The new grading grade (empty for no overriding the grade).\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when assessment is evaluated if sent online,\n   *         resolved with false if stored offline.\n   */\n  evaluateAssessment(workshopId, assessmentId, courseId, feedbackText, weight = 0, gradingGradeOver, siteId) {\n    var _this30 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Convenience function to store a message to be synchronized later.\n      const storeOffline = () => AddonModWorkshopOffline.saveEvaluateAssessment(workshopId, assessmentId, courseId, feedbackText, weight, gradingGradeOver, siteId).then(() => false);\n      // If we are editing an offline discussion, discard previous first.\n      yield AddonModWorkshopOffline.deleteEvaluateAssessment(workshopId, assessmentId, siteId);\n      if (!CoreNetwork.isOnline()) {\n        // App is offline, store the action.\n        return storeOffline();\n      }\n      try {\n        return yield _this30.evaluateAssessmentOnline(assessmentId, feedbackText, weight, gradingGradeOver, siteId);\n      } catch (error) {\n        if (!CoreUtils.isWebServiceError(error)) {\n          // Couldn't connect to server, store in offline.\n          return storeOffline();\n        }\n        // The WebService has thrown an error or offline not supported, reject.\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Evaluates an assessment (used by teachers for provide feedback to the reviewer). It will fail if offline or cannot connect.\n   *\n   * @param assessmentId The assessment id.\n   * @param feedbackText The feedback for the reviewer.\n   * @param weight The new weight for the assessment.\n   * @param gradingGradeOver The new grading grade (empty for no overriding the grade).\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the assessment is evaluated.\n   */\n  evaluateAssessmentOnline(assessmentId, feedbackText, weight, gradingGradeOver, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        assessmentid: assessmentId,\n        feedbacktext: feedbackText || '',\n        feedbackformat: defaultTextFormat,\n        weight: weight,\n        gradinggradeover: gradingGradeOver\n      };\n      const response = yield site.write('mod_workshop_evaluate_assessment', params);\n      // Other errors ocurring.\n      CoreWS.throwOnFailedStatus(response, 'Evaluate assessment failed');\n      return true;\n    })();\n  }\n  /**\n   * Invalidate the prefetched content except files.\n   *\n   * @param moduleId The module ID.\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promised resolved when content is invalidated.\n   */\n  invalidateContent(moduleId, courseId, siteId) {\n    var _this31 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const workshop = yield _this31.getWorkshop(courseId, moduleId, {\n        readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */,\n        siteId\n      });\n      yield _this31.invalidateContentById(workshop.id, courseId, siteId);\n    })();\n  }\n  /**\n   * Invalidate the prefetched content except files using the activityId.\n   *\n   * @param workshopId Workshop ID.\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when content is invalidated.\n   */\n  invalidateContentById(workshopId, courseId, siteId) {\n    var _this32 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const promises = [\n      // Do not invalidate workshop data before getting workshop info, we need it!\n      _this32.invalidateWorkshopData(courseId, siteId), _this32.invalidateWorkshopWSData(workshopId, siteId)];\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Report the workshop as being viewed.\n   *\n   * @param id Workshop ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logView(id, siteId) {\n    return _asyncToGenerator(function* () {\n      const params = {\n        workshopid: id\n      };\n      yield CoreCourseLogHelper.log('mod_workshop_view_workshop', params, ADDON_MOD_WORKSHOP_COMPONENT, id, siteId);\n    })();\n  }\n  /**\n   * Report the workshop submission as being viewed.\n   *\n   * @param id Submission ID.\n   * @param workshopId Workshop ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logViewSubmission(id, workshopId, siteId) {\n    return _asyncToGenerator(function* () {\n      const params = {\n        submissionid: id\n      };\n      yield CoreCourseLogHelper.log('mod_workshop_view_submission', params, ADDON_MOD_WORKSHOP_COMPONENT, workshopId, siteId);\n    })();\n  }\n}\n_class = AddonModWorkshopProvider;\n_class.PER_PAGE = 10;\n_class.SUBMISSION_CHANGED = 'addon_mod_workshop_submission_changed';\n_class.ASSESSMENT_SAVED = 'addon_mod_workshop_assessment_saved';\n_class.ASSESSMENT_INVALIDATED = 'addon_mod_workshop_assessment_invalidated';\n_class.ɵfac = function AddonModWorkshopProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModWorkshop = makeSingleton(AddonModWorkshopProvider);","map":{"version":3,"names":["CoreError","CoreSite","CoreCourseLogHelper","CoreNetwork","CoreSites","CoreSitesReadingStrategy","defaultTextFormat","CoreUtils","CoreWS","makeSingleton","Translate","AddonModWorkshopOffline","AddonModWorkshopSyncProvider","ADDON_MOD_WORKSHOP_COMPONENT","ROOT_CACHE_KEY","AddonModWorkshopPhase","AddonModWorkshopSubmissionType","AddonModWorkshopExampleMode","AddonModWorkshopAction","AddonModWorkshopAssessmentMode","AddonModWorkshopOverallFeedbackMode","AddonModWorkshopProvider","getWorkshopDataCacheKey","courseId","getWorkshopDataPrefixCacheKey","workshopId","getWorkshopAccessInformationDataCacheKey","getUserPlanDataCacheKey","getSubmissionsDataCacheKey","userId","groupId","getSubmissionDataCacheKey","submissionId","getGradesDataCacheKey","getGradesReportDataCacheKey","getSubmissionAssessmentsDataCacheKey","getReviewerAssessmentsDataCacheKey","getAssessmentDataCacheKey","assessmentId","getAssessmentFormDataCacheKey","mode","getWorkshopByKey","key","value","options","_this","_asyncToGenerator","site","getSite","siteId","params","courseids","preSets","_objectSpread","cacheKey","updateFrequency","FREQUENCY_RARELY","component","getReadingStrategyPreSets","readingStrategy","response","read","workshop","workshops","find","instant","submissiontypetext","undefined","nattachments","SUBMISSION_TYPE_AVAILABLE","submissiontypefile","SUBMISSION_TYPE_REQUIRED","SUBMISSION_TYPE_DISABLED","getWorkshop","cmId","getWorkshopById","id","invalidateWorkshopData","_this2","invalidateWsCacheForKey","invalidateWorkshopWSData","_this3","invalidateWsCacheForKeyStartingWith","getWorkshopAccessInformation","_this4","workshopid","componentId","invalidateWorkshopAccessInformationData","_this5","getUserPlanPhases","_this6","FREQUENCY_OFTEN","arrayToObject","userplan","phases","invalidateUserPlanPhasesData","_this7","getSubmissions","_this8","userid","groupid","submissions","invalidateSubmissionsData","_this9","getSubmission","_this10","submissionid","submission","invalidateSubmissionData","_this11","getGrades","_this12","invalidateGradesData","_this13","getGradesReport","_this14","page","perpage","perPage","PER_PAGE","report","fetchAllGradeReports","fetchGradeReportsRecursive","getCurrentSiteId","grades","_this15","_options$page","_options$perPage","Array","prototype","push","apply","canLoadMore","totalcount","invalidateGradeReportData","_this16","getSubmissionAssessments","_this17","assessments","invalidateSubmissionAssesmentsData","_this18","addSubmission","title","content","attachmentsId","allowOffline","_this19","storeOffline","_ref","saveSubmission","ADD","arguments","deleteSubmissionAction","isOnline","addSubmissionOnline","error","isWebServiceError","attachmentsid","write","throwOnFailedStatus","updateSubmission","_this20","_ref2","UPDATE","updateSubmissionOnline","deleteSubmission","_this21","DELETE","deleteSubmissionOnline","getReviewerAssessments","_this22","invalidateReviewerAssesmentsData","_this23","getAssessment","_this24","assessmentid","assessment","invalidateAssessmentData","_this25","getAssessmentForm","_this26","ASSESSMENT","dimenssionscount","descriptionfiles","dimensionsinfo","warnings","fields","parseFields","current","objectToKeyValueMap","parsedFields","forEach","field","args","name","split","idx","idy","idxNumber","parseInt","idyNumber","isNaN","number","invalidateAssessmentFormData","_this27","updateAssessment","inputData","_this28","_ref3","saveAssessment","deleteAssessment","updateAssessmentOnline","data","objectToArrayOfObjects","evaluateSubmission","feedbackText","published","gradeOver","_this29","saveEvaluateSubmission","then","deleteEvaluateSubmission","evaluateSubmissionOnline","feedbacktext","feedbackformat","gradeover","evaluateAssessment","weight","gradingGradeOver","_this30","saveEvaluateAssessment","deleteEvaluateAssessment","evaluateAssessmentOnline","gradinggradeover","invalidateContent","moduleId","_this31","invalidateContentById","_this32","promises","Promise","all","logView","log","logViewSubmission","_class","SUBMISSION_CHANGED","ASSESSMENT_SAVED","ASSESSMENT_INVALIDATED","factory","ɵfac","providedIn","AddonModWorkshop"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/workshop/services/workshop.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseCommonModWSOptions } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreGradesMenuItem } from '@features/grades/services/grades-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites, CoreSitesCommonWSOptions, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreTextFormat, defaultTextFormat } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreStatusWithWarningsWSResponse, CoreWS, CoreWSExternalFile, CoreWSExternalWarning } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreFormFields } from '@singletons/form';\nimport { AddonModWorkshopOffline } from './workshop-offline';\nimport { AddonModWorkshopAutoSyncData, AddonModWorkshopSyncProvider } from './workshop-sync';\nimport { ADDON_MOD_WORKSHOP_COMPONENT } from '@addons/mod/workshop/constants';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\n\nconst ROOT_CACHE_KEY = 'mmaModWorkshop:';\n\nexport enum AddonModWorkshopPhase {\n    PHASE_SETUP = 10,\n    PHASE_SUBMISSION = 20,\n    PHASE_ASSESSMENT = 30,\n    PHASE_EVALUATION = 40,\n    PHASE_CLOSED = 50,\n}\n\nexport enum AddonModWorkshopSubmissionType {\n    SUBMISSION_TYPE_DISABLED = 0,\n    SUBMISSION_TYPE_AVAILABLE = 1,\n    SUBMISSION_TYPE_REQUIRED = 2,\n}\n\nexport enum AddonModWorkshopExampleMode {\n    EXAMPLES_VOLUNTARY = 0,\n    EXAMPLES_BEFORE_SUBMISSION = 1,\n    EXAMPLES_BEFORE_ASSESSMENT = 2,\n}\n\nexport enum AddonModWorkshopAction {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update',\n}\n\nexport enum AddonModWorkshopAssessmentMode {\n    ASSESSMENT = 'assessment',\n    PREVIEW = 'preview',\n}\n\nexport enum AddonModWorkshopOverallFeedbackMode {\n    DISABLED = 0,\n    ENABLED_OPTIONAL = 1,\n    ENABLED_REQUIRED = 2,\n}\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [AddonModWorkshopSyncProvider.AUTO_SYNCED]: AddonModWorkshopAutoSyncData;\n        [AddonModWorkshopProvider.SUBMISSION_CHANGED]: AddonModWorkshopSubmissionChangedEventData;\n        [AddonModWorkshopProvider.ASSESSMENT_SAVED]: AddonModWorkshopAssessmentSavedChangedEventData;\n        [AddonModWorkshopProvider.ASSESSMENT_INVALIDATED]: AddonModWorkshopAssessmentInvalidatedChangedEventData;\n    }\n}\n\n/**\n * Service that provides some features for workshops.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModWorkshopProvider {\n\n    static readonly PER_PAGE = 10;\n\n    static readonly SUBMISSION_CHANGED = 'addon_mod_workshop_submission_changed';\n    static readonly ASSESSMENT_SAVED = 'addon_mod_workshop_assessment_saved';\n    static readonly ASSESSMENT_INVALIDATED = 'addon_mod_workshop_assessment_invalidated';\n\n    /**\n     * Get cache key for workshop data WS calls.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getWorkshopDataCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'workshop:' + courseId;\n    }\n\n    /**\n     * Get prefix cache key for all workshop activity data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @returns Cache key.\n     */\n    protected getWorkshopDataPrefixCacheKey(workshopId: number): string {\n        return ROOT_CACHE_KEY + workshopId;\n    }\n\n    /**\n     * Get cache key for workshop access information data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @returns Cache key.\n     */\n    protected getWorkshopAccessInformationDataCacheKey(workshopId: number): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':access';\n    }\n\n    /**\n     * Get cache key for workshop user plan data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @returns Cache key.\n     */\n    protected getUserPlanDataCacheKey(workshopId: number): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':userplan';\n    }\n\n    /**\n     * Get cache key for workshop submissions data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @param userId User ID.\n     * @param groupId Group ID.\n     * @returns Cache key.\n     */\n    protected getSubmissionsDataCacheKey(workshopId: number, userId: number = 0, groupId: number = 0): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':submissions:' + userId + ':' + groupId;\n    }\n\n    /**\n     * Get cache key for a workshop submission data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId Submission ID.\n     * @returns Cache key.\n     */\n    protected getSubmissionDataCacheKey(workshopId: number, submissionId: number): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':submission:' + submissionId;\n    }\n\n    /**\n     * Get cache key for workshop grades data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @returns Cache key.\n     */\n    protected getGradesDataCacheKey(workshopId: number): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':grades';\n    }\n\n    /**\n     * Get cache key for workshop grade report data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @param groupId Group ID.\n     * @returns Cache key.\n     */\n    protected getGradesReportDataCacheKey(workshopId: number, groupId: number = 0): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':report:' + groupId;\n    }\n\n    /**\n     * Get cache key for workshop submission assessments data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId Submission ID.\n     * @returns Cache key.\n     */\n    protected getSubmissionAssessmentsDataCacheKey(workshopId: number, submissionId: number): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':assessments:' + submissionId;\n    }\n\n    /**\n     * Get cache key for workshop reviewer assessments data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @param userId User ID or current user.\n     * @returns Cache key.\n     */\n    protected getReviewerAssessmentsDataCacheKey(workshopId: number, userId: number = 0): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':reviewerassessments:' + userId;\n    }\n\n    /**\n     * Get cache key for a workshop assessment data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @returns Cache key.\n     */\n    protected getAssessmentDataCacheKey(workshopId: number, assessmentId: number): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':assessment:' + assessmentId;\n    }\n\n    /**\n     * Get cache key for workshop assessment form data WS calls.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param mode Mode assessment (default) or preview.\n     * @returns Cache key.\n     */\n    protected getAssessmentFormDataCacheKey(workshopId: number, assessmentId: number, mode: string = 'assessment'): string {\n        return this.getWorkshopDataPrefixCacheKey(workshopId) + ':assessmentsform:' + assessmentId + ':' + mode;\n    }\n\n    /**\n     * Get a workshop with key=value. If more than one is found, only the first will be returned.\n     *\n     * @param courseId Course ID.\n     * @param key Name of the property to check.\n     * @param value Value to search.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop is retrieved.\n     */\n    protected async getWorkshopByKey(\n        courseId: number,\n        key: string,\n        value: number,\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<AddonModWorkshopData> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetWorkshopsByCoursesWSParams = {\n            courseids: [courseId],\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getWorkshopDataCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n        const response = await site.read<AddonModWorkshopGetWorkshopsByCoursesWSResponse>(\n            'mod_workshop_get_workshops_by_courses',\n            params,\n            preSets,\n        );\n\n        const workshop = response.workshops.find((workshop) => workshop[key] == value);\n        if (!workshop) {\n            throw new CoreError(Translate.instant('core.course.modulenotfound'));\n        }\n\n        // Set submission types for Moodle 3.5.\n        if (workshop.submissiontypetext === undefined) {\n            if (workshop.nattachments !== undefined && workshop.nattachments > 0) {\n                workshop.submissiontypetext = AddonModWorkshopSubmissionType.SUBMISSION_TYPE_AVAILABLE;\n                workshop.submissiontypefile = AddonModWorkshopSubmissionType.SUBMISSION_TYPE_AVAILABLE;\n            } else {\n                workshop.submissiontypetext = AddonModWorkshopSubmissionType.SUBMISSION_TYPE_REQUIRED;\n                workshop.submissiontypefile = AddonModWorkshopSubmissionType.SUBMISSION_TYPE_DISABLED;\n            }\n        }\n\n        return workshop;\n    }\n\n    /**\n     * Get a workshop by course module ID.\n     *\n     * @param courseId Course ID.\n     * @param cmId Course module ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop is retrieved.\n     */\n    getWorkshop(courseId: number, cmId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModWorkshopData> {\n        return this.getWorkshopByKey(courseId, 'coursemodule', cmId, options);\n    }\n\n    /**\n     * Get a workshop by ID.\n     *\n     * @param courseId Course ID.\n     * @param id Workshop ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop is retrieved.\n     */\n    getWorkshopById(courseId: number, id: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModWorkshopData> {\n        return this.getWorkshopByKey(courseId, 'id', id, options);\n    }\n\n    /**\n     * Invalidates workshop data.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the workshop is invalidated.\n     */\n    async invalidateWorkshopData(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getWorkshopDataCacheKey(courseId));\n    }\n\n    /**\n     * Invalidates workshop data except files and module info.\n     *\n     * @param workshopId Workshop ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the workshop is invalidated.\n     */\n    async invalidateWorkshopWSData(workshopId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKeyStartingWith(this.getWorkshopDataPrefixCacheKey(workshopId));\n    }\n\n    /**\n     * Get access information for a given workshop.\n     *\n     * @param workshopId Workshop ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop is retrieved.\n     */\n    async getWorkshopAccessInformation(\n        workshopId: number,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<AddonModWorkshopGetWorkshopAccessInformationWSResponse> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetWorkshopAccessInformationWSParams = {\n            workshopid: workshopId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getWorkshopAccessInformationDataCacheKey(workshopId),\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        return site.read<AddonModWorkshopGetWorkshopAccessInformationWSResponse>(\n            'mod_workshop_get_workshop_access_information',\n            params,\n            preSets,\n        );\n    }\n\n    /**\n     * Invalidates workshop access information data.\n     *\n     * @param workshopId Workshop ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateWorkshopAccessInformationData(workshopId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getWorkshopAccessInformationDataCacheKey(workshopId));\n    }\n\n    /**\n     * Return the planner information for the given user.\n     *\n     * @param workshopId Workshop ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop data is retrieved.\n     */\n    async getUserPlanPhases(\n        workshopId: number,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<Record<string, AddonModWorkshopPhaseData>> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetUserPlanWSParams = {\n            workshopid: workshopId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getUserPlanDataCacheKey(workshopId),\n            updateFrequency: CoreSite.FREQUENCY_OFTEN,\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModWorkshopGetUserPlanWSResponse>('mod_workshop_get_user_plan', params, preSets);\n\n        return CoreUtils.arrayToObject(response.userplan.phases, 'code');\n    }\n\n    /**\n     * Invalidates workshop user plan data.\n     *\n     * @param workshopId Workshop ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateUserPlanPhasesData(workshopId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        await site.invalidateWsCacheForKey(this.getUserPlanDataCacheKey(workshopId));\n    }\n\n    /**\n     * Retrieves all the workshop submissions visible by the current user or the one done by the given user.\n     *\n     * @param workshopId Workshop ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop submissions are retrieved.\n     */\n    async getSubmissions(\n        workshopId: number,\n        options: AddonModWorkshopGetSubmissionsOptions = {},\n    ): Promise<AddonModWorkshopSubmissionData[]> {\n        const userId = options.userId || 0;\n        const groupId = options.groupId || 0;\n\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetSubmissionsWSParams = {\n            workshopid: workshopId,\n            userid: userId,\n            groupid: groupId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getSubmissionsDataCacheKey(workshopId, userId, groupId),\n            updateFrequency: CoreSite.FREQUENCY_OFTEN,\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModWorkshopGetSubmissionsWSResponse>('mod_workshop_get_submissions', params, preSets);\n\n        return response.submissions;\n    }\n\n    /**\n     * Invalidates workshop submissions data.\n     *\n     * @param workshopId Workshop ID.\n     * @param userId User ID.\n     * @param groupId Group ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateSubmissionsData(workshopId: number, userId: number = 0, groupId: number = 0, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getSubmissionsDataCacheKey(workshopId, userId, groupId));\n    }\n\n    /**\n     * Retrieves the given submission.\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId Submission ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop submission data is retrieved.\n     */\n    async getSubmission(\n        workshopId: number,\n        submissionId: number,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<AddonModWorkshopSubmissionData> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetSubmissionWSParams = {\n            submissionid: submissionId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getSubmissionDataCacheKey(workshopId, submissionId),\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModWorkshopGetSubmissionWSResponse>('mod_workshop_get_submission', params, preSets);\n\n        return response.submission;\n    }\n\n    /**\n     * Invalidates workshop submission data.\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId Submission ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateSubmissionData(workshopId: number, submissionId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getSubmissionDataCacheKey(workshopId, submissionId));\n    }\n\n    /**\n     * Returns the grades information for the given workshop and user.\n     *\n     * @param workshopId Workshop ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop grades data is retrieved.\n     */\n    async getGrades(workshopId: number, options: CoreCourseCommonModWSOptions = {}): Promise<AddonModWorkshopGetGradesWSResponse> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetGradesWSParams = {\n            workshopid: workshopId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getGradesDataCacheKey(workshopId),\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        return site.read<AddonModWorkshopGetGradesWSResponse>('mod_workshop_get_grades', params, preSets);\n    }\n\n    /**\n     * Invalidates workshop grades data.\n     *\n     * @param workshopId Workshop ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateGradesData(workshopId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getGradesDataCacheKey(workshopId));\n    }\n\n    /**\n     * Retrieves the assessment grades report.\n     *\n     * @param workshopId Workshop ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop data is retrieved.\n     */\n    async getGradesReport(\n        workshopId: number,\n        options: AddonModWorkshopGetGradesReportOptions = {},\n    ): Promise<AddonModWorkshoGradesReportData> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetGradesReportWSParams = {\n            workshopid: workshopId,\n            groupid: options.groupId,\n            page: options.page || 0,\n            perpage: options.perPage || AddonModWorkshopProvider.PER_PAGE,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getGradesReportDataCacheKey(workshopId, options.groupId),\n            updateFrequency: CoreSite.FREQUENCY_OFTEN,\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response =\n            await site.read<AddonModWorkshopGetGradesReportWSResponse>('mod_workshop_get_grades_report', params, preSets);\n\n        return response.report;\n    }\n\n    /**\n     * Performs the whole fetch of the grade reports in the workshop.\n     *\n     * @param workshopId Workshop ID.\n     * @param options Other options.\n     * @returns Promise resolved when done.\n     */\n    fetchAllGradeReports(\n        workshopId: number,\n        options: AddonModWorkshopFetchAllGradesReportOptions = {},\n    ): Promise<AddonModWorkshopGradesData[]> {\n        return this.fetchGradeReportsRecursive(workshopId, [], {\n            ...options, // Include all options.\n            page: 0,\n            perPage: options.perPage || AddonModWorkshopProvider.PER_PAGE,\n            siteId: options.siteId || CoreSites.getCurrentSiteId(),\n        });\n    }\n\n    /**\n     * Recursive call on fetch all grade reports.\n     *\n     * @param workshopId Workshop ID.\n     * @param grades Grades already fetched (just to concatenate them).\n     * @param options Other options.\n     * @returns Promise resolved when done.\n     */\n    protected async fetchGradeReportsRecursive(\n        workshopId: number,\n        grades: AddonModWorkshopGradesData[],\n        options: AddonModWorkshopGetGradesReportOptions = {},\n    ): Promise<AddonModWorkshopGradesData[]> {\n        options.page = options.page ?? 0;\n        options.perPage = options.perPage ?? AddonModWorkshopProvider.PER_PAGE;\n\n        const report = await this.getGradesReport(workshopId, options);\n\n        Array.prototype.push.apply(grades, report.grades);\n        const canLoadMore = ((options.page + 1) * options.perPage) < report.totalcount;\n\n        if (canLoadMore) {\n            options.page++;\n\n            return this.fetchGradeReportsRecursive(workshopId, grades, options);\n        }\n\n        return grades;\n    }\n\n    /**\n     * Invalidates workshop grade report data.\n     *\n     * @param workshopId Workshop ID.\n     * @param groupId Group ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateGradeReportData(workshopId: number, groupId: number = 0, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getGradesReportDataCacheKey(workshopId, groupId));\n    }\n\n    /**\n     * Retrieves the given submission assessment.\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId Submission ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop data is retrieved.\n     */\n    async getSubmissionAssessments(\n        workshopId: number,\n        submissionId: number,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<AddonModWorkshopSubmissionAssessmentData[]> {\n\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetSubmissionAssessmentsWSParams = {\n            submissionid: submissionId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getSubmissionAssessmentsDataCacheKey(workshopId, submissionId),\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n        const response = await site.read<AddonModWorkshopGetAssessmentsWSResponse>(\n            'mod_workshop_get_submission_assessments',\n            params,\n            preSets,\n        );\n\n        return response.assessments;\n    }\n\n    /**\n     * Invalidates workshop submission assessments data.\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId Submission ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateSubmissionAssesmentsData(workshopId: number, submissionId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getSubmissionAssessmentsDataCacheKey(workshopId, submissionId));\n    }\n\n    /**\n     * Add a new submission to a given workshop.\n     *\n     * @param workshopId Workshop ID.\n     * @param courseId Course ID the workshop belongs to.\n     * @param title The submission title.\n     * @param content The submission text content.\n     * @param attachmentsId The draft file area id for attachments.\n     * @param siteId Site ID. If not defined, current site.\n     * @param allowOffline True if it can be stored in offline, false otherwise.\n     * @returns Promise resolved with submission ID if sent online or false if stored offline.\n     */\n    async addSubmission(\n        workshopId: number,\n        courseId: number,\n        title: string,\n        content: string,\n        attachmentsId?: number,\n        siteId?: string,\n        allowOffline: boolean = false,\n    ): Promise<number | false> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Convenience function to store a message to be synchronized later.\n        const storeOffline = async (): Promise<false> => {\n            await AddonModWorkshopOffline.saveSubmission(\n                workshopId,\n                courseId,\n                title,\n                content,\n                undefined,\n                undefined,\n                AddonModWorkshopAction.ADD,\n                siteId,\n            );\n\n            return false;\n        };\n\n        // If we are editing an offline submission, discard previous first.\n        await AddonModWorkshopOffline.deleteSubmissionAction(workshopId, AddonModWorkshopAction.ADD, siteId);\n\n        if (!CoreNetwork.isOnline() && allowOffline) {\n            // App is offline, store the action.\n            return storeOffline();\n        }\n\n        try {\n            return await this.addSubmissionOnline(workshopId, title, content, attachmentsId as number, siteId);\n        } catch (error) {\n            if (allowOffline && !CoreUtils.isWebServiceError(error)) {\n                // Couldn't connect to server, store in offline.\n                return storeOffline();\n            }\n\n            // The WebService has thrown an error or offline not supported, reject.\n            throw error;\n        }\n    }\n\n    /**\n     * Add a new submission to a given workshop. It will fail if offline or cannot connect.\n     *\n     * @param workshopId Workshop ID.\n     * @param title The submission title.\n     * @param content The submission text content.\n     * @param attachmentsId The draft file area id for attachments.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the submission is created.\n     */\n    async addSubmissionOnline(\n        workshopId: number,\n        title: string,\n        content: string,\n        attachmentsId?: number,\n        siteId?: string,\n    ): Promise<number> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonModWorkshopAddSubmissionWSParams = {\n            workshopid: workshopId,\n            title: title,\n            content: content,\n            attachmentsid: attachmentsId,\n        };\n\n        const response = await site.write<AddonModWorkshopAddSubmissionWSResponse>('mod_workshop_add_submission', params);\n\n        // Other errors ocurring.\n        CoreWS.throwOnFailedStatus(response, 'Add submission failed');\n\n        if (!response.submissionid) {\n            throw new CoreError('Add submission failed, no submission id was returned');\n        }\n\n        return response.submissionid;\n    }\n\n    /**\n     * Updates the given submission.\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId Submission ID.\n     * @param courseId Course ID the workshop belongs to.\n     * @param title The submission title.\n     * @param content The submission text content.\n     * @param attachmentsId The draft file area id for attachments.\n     * @param siteId Site ID. If not defined, current site.\n     * @param allowOffline True if it can be stored in offline, false otherwise.\n     * @returns Promise resolved with submission ID if sent online or false if stored offline.\n     */\n    async updateSubmission(\n        workshopId: number,\n        submissionId: number,\n        courseId: number,\n        title: string,\n        content: string,\n        attachmentsId?: number | undefined,\n        siteId?: string,\n        allowOffline: boolean = false,\n    ): Promise<number | false> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Convenience function to store a message to be synchronized later.\n        const storeOffline = async (): Promise<false> => {\n            await AddonModWorkshopOffline.saveSubmission(\n                workshopId,\n                courseId,\n                title,\n                content,\n                undefined,\n                submissionId,\n                AddonModWorkshopAction.UPDATE,\n                siteId,\n            );\n\n            return false;\n        };\n\n        // If we are editing an offline discussion, discard previous first.\n        await AddonModWorkshopOffline.deleteSubmissionAction(workshopId, AddonModWorkshopAction.UPDATE, siteId);\n\n        if (!CoreNetwork.isOnline() && allowOffline) {\n            // App is offline, store the action.\n            return storeOffline();\n        }\n\n        try {\n            return await this.updateSubmissionOnline(submissionId, title, content, attachmentsId as number, siteId);\n        } catch (error) {\n            if (allowOffline && !CoreUtils.isWebServiceError(error)) {\n                // Couldn't connect to server, store in offline.\n                return storeOffline();\n            }\n\n            // The WebService has thrown an error or offline not supported, reject.\n            throw error;\n        }\n    }\n\n    /**\n     * Updates the given submission. It will fail if offline or cannot connect.\n     *\n     * @param submissionId Submission ID.\n     * @param title The submission title.\n     * @param content The submission text content.\n     * @param attachmentsId The draft file area id for attachments.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the submission is updated.\n     */\n    async updateSubmissionOnline(\n        submissionId: number,\n        title: string,\n        content: string,\n        attachmentsId?: number,\n        siteId?: string,\n    ): Promise<number> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonModWorkshopUpdateSubmissionWSParams = {\n            submissionid: submissionId,\n            title: title,\n            content: content,\n            attachmentsid: attachmentsId || 0,\n        };\n\n        const response = await site.write<CoreStatusWithWarningsWSResponse>('mod_workshop_update_submission', params);\n\n        // Other errors ocurring.\n        CoreWS.throwOnFailedStatus(response, 'Update submission failed');\n\n        return submissionId;\n    }\n\n    /**\n     * Deletes the given submission.\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId Submission ID.\n     * @param courseId Course ID the workshop belongs to.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with submission ID if sent online, resolved with false if stored offline.\n     */\n    async deleteSubmission(workshopId: number, submissionId: number, courseId: number, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Convenience function to store a message to be synchronized later.\n        const storeOffline = (): Promise<void> => AddonModWorkshopOffline.saveSubmission(\n            workshopId,\n            courseId,\n            '',\n            '',\n            undefined,\n            submissionId,\n            AddonModWorkshopAction.DELETE,\n            siteId,\n        );\n\n        // If we are editing an offline discussion, discard previous first.\n        await AddonModWorkshopOffline.deleteSubmissionAction(workshopId, AddonModWorkshopAction.DELETE, siteId);\n\n        if (!CoreNetwork.isOnline()) {\n            // App is offline, store the action.\n            return storeOffline();\n        }\n\n        try {\n            return await this.deleteSubmissionOnline(submissionId, siteId);\n        } catch (error) {\n            if (!CoreUtils.isWebServiceError(error)) {\n                // Couldn't connect to server, store in offline.\n                return storeOffline();\n            }\n\n            // The WebService has thrown an error or offline not supported, reject.\n            throw error;\n        }\n    }\n\n    /**\n     * Deletes the given submission. It will fail if offline or cannot connect.\n     *\n     * @param submissionId Submission ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the submission is deleted.\n     */\n    async deleteSubmissionOnline(submissionId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const params: AddonModWorkshopDeleteSubmissionWSParams = {\n            submissionid: submissionId,\n        };\n\n        const response = await site.write<CoreStatusWithWarningsWSResponse>('mod_workshop_delete_submission', params);\n\n        // Other errors ocurring.\n        CoreWS.throwOnFailedStatus(response, 'Delete submission failed');\n    }\n\n    /**\n     * Retrieves all the assessments reviewed by the given user.\n     *\n     * @param workshopId Workshop ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop data is retrieved.\n     */\n    async getReviewerAssessments(\n        workshopId: number,\n        options: AddonModWorkshopUserOptions = {},\n    ): Promise<AddonModWorkshopSubmissionAssessmentData[]> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetReviewerAssessmentsWSParams = {\n            workshopid: workshopId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getReviewerAssessmentsDataCacheKey(workshopId, options.userId),\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        if (options.userId) {\n            params.userid = options.userId;\n        }\n\n        const response =\n            await site.read<AddonModWorkshopGetAssessmentsWSResponse>('mod_workshop_get_reviewer_assessments', params, preSets);\n\n        return response.assessments;\n    }\n\n    /**\n     * Invalidates workshop user assessments data.\n     *\n     * @param workshopId Workshop ID.\n     * @param userId User ID. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateReviewerAssesmentsData(workshopId: number, userId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getReviewerAssessmentsDataCacheKey(workshopId, userId));\n    }\n\n    /**\n     * Retrieves the given assessment.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop data is retrieved.\n     */\n    async getAssessment(\n        workshopId: number,\n        assessmentId: number,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<AddonModWorkshopSubmissionAssessmentData> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetAssessmentWSParams = {\n            assessmentid: assessmentId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getAssessmentDataCacheKey(workshopId, assessmentId),\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n        const response = await site.read<AddonModWorkshopGetAssessmentWSResponse>('mod_workshop_get_assessment', params, preSets);\n\n        return response.assessment;\n    }\n\n    /**\n     * Invalidates workshop assessment data.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAssessmentData(workshopId: number, assessmentId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getAssessmentDataCacheKey(workshopId, assessmentId));\n    }\n\n    /**\n     * Retrieves the assessment form definition (data required to be able to display the assessment form).\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop data is retrieved.\n     */\n    async getAssessmentForm(\n        workshopId: number,\n        assessmentId: number,\n        options: AddonModWorkshopGetAssessmentFormOptions = {},\n    ): Promise<AddonModWorkshopGetAssessmentFormDefinitionData> {\n        const mode = options.mode || AddonModWorkshopAssessmentMode.ASSESSMENT;\n\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModWorkshopGetAssessmentFormDefinitionWSParams = {\n            assessmentid: assessmentId,\n            mode: mode,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getAssessmentFormDataCacheKey(workshopId, assessmentId, mode),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: ADDON_MOD_WORKSHOP_COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModWorkshopGetAssessmentFormDefinitionWSResponse>(\n            'mod_workshop_get_assessment_form_definition',\n            params,\n            preSets,\n        );\n\n        return {\n            dimenssionscount: response.dimenssionscount,\n            descriptionfiles: response.descriptionfiles,\n            dimensionsinfo: response.dimensionsinfo,\n            warnings: response.warnings,\n            fields: this.parseFields(response.fields),\n            current: this.parseFields(response.current),\n            options: CoreUtils.objectToKeyValueMap<string>(response.options, 'name', 'value'),\n        };\n    }\n\n    /**\n     * Parse fieldes into a more handful format.\n     *\n     * @param fields Fields to parse\n     * @returns Parsed fields\n     */\n    parseFields(fields: AddonModWorkshopGetAssessmentFormFieldData[]): AddonModWorkshopGetAssessmentFormFieldsParsedData[] {\n        const parsedFields: AddonModWorkshopGetAssessmentFormFieldsParsedData[] = [];\n\n        fields.forEach((field) => {\n            const args: string[] = field.name.split('_');\n            const name = args[0];\n            const idx = args[3];\n            const idy = args[6];\n            const idxNumber = parseInt(args[3], 10);\n            const idyNumber = parseInt(args[6], 10);\n\n            if (!isNaN(idxNumber)) {\n                if (!parsedFields[idx]) {\n                    parsedFields[idx] = {\n                        number: idxNumber + 1, // eslint-disable-line id-blacklist\n                    };\n                }\n\n                if (!isNaN(idyNumber)) {\n                    if (!parsedFields[idx].fields) {\n                        parsedFields[idx].fields = [];\n                    }\n\n                    if (!parsedFields[idx].fields[idy]) {\n                        parsedFields[idx].fields[idy] = {\n                            number: idyNumber + 1, // eslint-disable-line id-blacklist\n                        };\n                    }\n                    parsedFields[idx].fields[idy][name] = field.value;\n                } else {\n                    parsedFields[idx][name] = field.value;\n                }\n            }\n        });\n\n        return parsedFields;\n    }\n\n    /**\n     * Invalidates workshop assessments form data.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param mode Mode assessment (default) or preview.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAssessmentFormData(\n        workshopId: number,\n        assessmentId: number,\n        mode: string = 'assessment',\n        siteId?: string,\n    ):\n        Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getAssessmentFormDataCacheKey(workshopId, assessmentId, mode));\n    }\n\n    /**\n     * Updates the given assessment.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param courseId Course ID the workshop belongs to.\n     * @param inputData Assessment data.\n     * @param siteId Site ID. If not defined, current site.\n     * @param allowOffline True if it can be stored in offline, false otherwise.\n     * @returns Promise resolved with true if sent online, or false if stored offline.\n     */\n    async updateAssessment(\n        workshopId: number,\n        assessmentId: number,\n        courseId: number,\n        inputData: CoreFormFields,\n        siteId?: string,\n        allowOffline = false,\n    ): Promise<boolean> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Convenience function to store a message to be synchronized later.\n        const storeOffline = async (): Promise<boolean> => {\n            await AddonModWorkshopOffline.saveAssessment(workshopId, assessmentId, courseId, inputData, siteId);\n\n            return false;\n        };\n\n        // If we are editing an offline discussion, discard previous first.\n        await AddonModWorkshopOffline.deleteAssessment(workshopId, assessmentId, siteId);\n        if (!CoreNetwork.isOnline() && allowOffline) {\n            // App is offline, store the action.\n            return storeOffline();\n        }\n        try {\n            await this.updateAssessmentOnline(assessmentId, inputData, siteId);\n\n            return true;\n        } catch (error) {\n            if (allowOffline && !CoreUtils.isWebServiceError(error)) {\n                // Couldn't connect to server, store in offline.\n                return storeOffline();\n            }\n\n            // The WebService has thrown an error or offline not supported, reject.\n            throw error;\n        }\n    }\n\n    /**\n     * Updates the given assessment. It will fail if offline or cannot connect.\n     *\n     * @param assessmentId Assessment ID.\n     * @param inputData Assessment data.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the grade of the submission.\n     */\n    async updateAssessmentOnline(assessmentId: number, inputData: CoreFormFields, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonModWorkshopUpdateAssessmentWSParams = {\n            assessmentid: assessmentId,\n            data: CoreUtils.objectToArrayOfObjects(inputData, 'name', 'value'),\n        };\n\n        const response = await site.write<AddonModWorkshopUpdateAssessmentWSResponse>('mod_workshop_update_assessment', params);\n\n        // Other errors ocurring.\n        CoreWS.throwOnFailedStatus(response, 'Update assessment failed');\n    }\n\n    /**\n     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId The submission id.\n     * @param courseId Course ID the workshop belongs to.\n     * @param feedbackText The feedback for the author.\n     * @param published Whether to publish the submission for other users.\n     * @param gradeOver The new submission grade (empty for no overriding the grade).\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when submission is evaluated if sent online,\n     *         resolved with false if stored offline.\n     */\n    async evaluateSubmission(\n        workshopId: number,\n        submissionId: number,\n        courseId: number,\n        feedbackText?: string,\n        published?: boolean,\n        gradeOver?: string,\n        siteId?: string,\n    ): Promise<boolean> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Convenience function to store a message to be synchronized later.\n        const storeOffline = (): Promise<boolean> => AddonModWorkshopOffline.saveEvaluateSubmission(\n            workshopId,\n            submissionId,\n            courseId,\n            feedbackText,\n            published,\n            gradeOver,\n            siteId,\n        ).then(() => false);\n\n        // If we are editing an offline discussion, discard previous first.\n        await AddonModWorkshopOffline.deleteEvaluateSubmission(workshopId, submissionId, siteId);\n        if (!CoreNetwork.isOnline()) {\n            // App is offline, store the action.\n            return storeOffline();\n        }\n\n        try {\n            return await this.evaluateSubmissionOnline(submissionId, feedbackText, published, gradeOver, siteId);\n        } catch (error) {\n            if (CoreUtils.isWebServiceError(error)) {\n                // The WebService has thrown an error or offline not supported, reject.\n                throw error;\n            }\n\n            // Couldn't connect to server, store in offline.\n            return storeOffline();\n        }\n    }\n\n    /**\n     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).\n     * It will fail if offline or cannot connect.\n     *\n     * @param submissionId The submission id.\n     * @param feedbackText The feedback for the author.\n     * @param published Whether to publish the submission for other users.\n     * @param gradeOver The new submission grade (empty for no overriding the grade).\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the submission is evaluated.\n     */\n    async evaluateSubmissionOnline(\n        submissionId: number,\n        feedbackText?: string,\n        published?: boolean,\n        gradeOver?: string,\n        siteId?: string,\n    ): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonModWorkshopEvaluateSubmissionWSParams = {\n            submissionid: submissionId,\n            feedbacktext: feedbackText || '',\n            feedbackformat: defaultTextFormat,\n            published: published,\n            gradeover: gradeOver,\n        };\n\n        const response = await site.write<CoreStatusWithWarningsWSResponse>('mod_workshop_evaluate_submission', params);\n\n        // Other errors ocurring.\n        CoreWS.throwOnFailedStatus(response, 'Evaluate submission failed');\n\n        return true;\n    }\n\n    /**\n     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId The assessment id.\n     * @param courseId Course ID the workshop belongs to.\n     * @param feedbackText The feedback for the reviewer.\n     * @param weight The new weight for the assessment.\n     * @param gradingGradeOver The new grading grade (empty for no overriding the grade).\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when assessment is evaluated if sent online,\n     *         resolved with false if stored offline.\n     */\n    async evaluateAssessment(\n        workshopId: number,\n        assessmentId: number,\n        courseId: number,\n        feedbackText?: string,\n        weight = 0,\n        gradingGradeOver?: string,\n        siteId?: string,\n    ): Promise<boolean> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Convenience function to store a message to be synchronized later.\n        const storeOffline = (): Promise<boolean> => AddonModWorkshopOffline.saveEvaluateAssessment(\n            workshopId,\n            assessmentId,\n            courseId,\n            feedbackText,\n            weight,\n            gradingGradeOver,\n            siteId,\n        ).then(() => false);\n\n        // If we are editing an offline discussion, discard previous first.\n        await AddonModWorkshopOffline.deleteEvaluateAssessment(workshopId, assessmentId, siteId);\n        if (!CoreNetwork.isOnline()) {\n            // App is offline, store the action.\n            return storeOffline();\n        }\n        try {\n            return await this.evaluateAssessmentOnline(assessmentId, feedbackText, weight, gradingGradeOver, siteId);\n        } catch (error) {\n            if (!CoreUtils.isWebServiceError(error)) {\n                // Couldn't connect to server, store in offline.\n                return storeOffline();\n            }\n            // The WebService has thrown an error or offline not supported, reject.\n            throw error;\n        }\n    }\n\n    /**\n     * Evaluates an assessment (used by teachers for provide feedback to the reviewer). It will fail if offline or cannot connect.\n     *\n     * @param assessmentId The assessment id.\n     * @param feedbackText The feedback for the reviewer.\n     * @param weight The new weight for the assessment.\n     * @param gradingGradeOver The new grading grade (empty for no overriding the grade).\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the assessment is evaluated.\n     */\n    async evaluateAssessmentOnline(\n        assessmentId: number,\n        feedbackText?: string,\n        weight?: number,\n        gradingGradeOver?: string,\n        siteId?: string,\n    ): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonModWorkshopEvaluateAssessmentWSParams = {\n            assessmentid: assessmentId,\n            feedbacktext: feedbackText || '',\n            feedbackformat: defaultTextFormat,\n            weight: weight,\n            gradinggradeover: gradingGradeOver,\n        };\n\n        const response = await site.write<CoreStatusWithWarningsWSResponse>('mod_workshop_evaluate_assessment', params);\n\n        // Other errors ocurring.\n        CoreWS.throwOnFailedStatus(response, 'Evaluate assessment failed');\n\n        return true;\n    }\n\n    /**\n     * Invalidate the prefetched content except files.\n     *\n     * @param moduleId The module ID.\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promised resolved when content is invalidated.\n     */\n    async invalidateContent(moduleId: number, courseId: number, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const workshop = await this.getWorkshop(courseId, moduleId, {\n            readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE,\n            siteId,\n        });\n\n        await this.invalidateContentById(workshop.id, courseId, siteId);\n    }\n\n    /**\n     * Invalidate the prefetched content except files using the activityId.\n     *\n     * @param workshopId Workshop ID.\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when content is invalidated.\n     */\n    async invalidateContentById(workshopId: number, courseId: number, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const promises = [\n            // Do not invalidate workshop data before getting workshop info, we need it!\n            this.invalidateWorkshopData(courseId, siteId),\n            this.invalidateWorkshopWSData(workshopId, siteId),\n        ];\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Report the workshop as being viewed.\n     *\n     * @param id Workshop ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logView(id: number, siteId?: string): Promise<void> {\n        const params: AddonModWorkshopViewWorkshopWSParams = {\n            workshopid: id,\n        };\n\n        await CoreCourseLogHelper.log(\n            'mod_workshop_view_workshop',\n            params,\n            ADDON_MOD_WORKSHOP_COMPONENT,\n            id,\n            siteId,\n        );\n    }\n\n    /**\n     * Report the workshop submission as being viewed.\n     *\n     * @param id Submission ID.\n     * @param workshopId Workshop ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logViewSubmission(id: number, workshopId: number, siteId?: string): Promise<void> {\n        const params: AddonModWorkshopViewSubmissionWSParams = {\n            submissionid: id,\n        };\n\n        await CoreCourseLogHelper.log(\n            'mod_workshop_view_submission',\n            params,\n            ADDON_MOD_WORKSHOP_COMPONENT,\n            workshopId,\n            siteId,\n        );\n    }\n\n}\nexport const AddonModWorkshop = makeSingleton(AddonModWorkshopProvider);\n\n/**\n * Params of mod_workshop_view_workshop WS.\n */\ntype AddonModWorkshopViewWorkshopWSParams = {\n    workshopid: number; // Workshop instance id.\n};\n\n/**\n * Params of mod_workshop_view_submission WS.\n */\ntype AddonModWorkshopViewSubmissionWSParams = {\n    submissionid: number; // Submission id.\n};\n\n/**\n * Params of mod_workshop_get_workshops_by_courses WS.\n */\ntype AddonModWorkshopGetWorkshopsByCoursesWSParams = {\n    courseids?: number[]; // Array of course ids.\n};\n\n/**\n * Data returned by mod_workshop_get_workshops_by_courses WS.\n */\ntype AddonModWorkshopGetWorkshopsByCoursesWSResponse = {\n    workshops: AddonModWorkshopData[];\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport type AddonModWorkshopData = {\n    id: number; // The primary key of the record.\n    course: number; // Course id this workshop is part of.\n    name: string; // Workshop name.\n    intro: string; // Workshop introduction text.\n    introformat?: CoreTextFormat; // Intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    instructauthors?: string; // Instructions for the submission phase.\n    instructauthorsformat?: CoreTextFormat; // Instructauthors format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    instructreviewers?: string; // Instructions for the assessment phase.\n    instructreviewersformat?: CoreTextFormat; // Instructreviewers format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    timemodified?: number; // The timestamp when the module was modified.\n    phase: AddonModWorkshopPhase; // The current phase of workshop.\n    useexamples?: boolean; // Optional feature: students practise evaluating on example submissions from teacher.\n    usepeerassessment?: boolean; // Optional feature: students perform peer assessment of others' work.\n    useselfassessment?: boolean; // Optional feature: students perform self assessment of their own work.\n    grade?: number; // The maximum grade for submission.\n    gradinggrade?: number; // The maximum grade for assessment.\n    strategy?: string; // The type of the current grading strategy used in this workshop.\n    evaluation?: string; // The recently used grading evaluation method.\n    gradedecimals?: number; // Number of digits that should be shown after the decimal point when displaying grades.\n    submissiontypetext?: AddonModWorkshopSubmissionType; // Indicates whether text is required as part of each submission.\n    // 0 for no, 1 for optional, 2 for required.\n    submissiontypefile?: AddonModWorkshopSubmissionType; // Indicates whether a file upload is required as part of each submission.\n    // 0 for no, 1 for optional, 2 for required.\n    nattachments?: number; // Maximum number of submission attachments.\n    submissionfiletypes?: string; // Comma separated list of file extensions.\n    latesubmissions?: boolean; // Allow submitting the work after the deadline.\n    maxbytes?: number; // Maximum size of the one attached file.\n    examplesmode?: AddonModWorkshopExampleMode; // 0 = example assessments are voluntary,\n    // 1 = examples must be assessed before submission,\n    // 2 = examples are available after own submission and must be assessed before peer/self assessment phase.\n    submissionstart?: number; // 0 = will be started manually, greater than 0 the timestamp of the start of the submission phase.\n    submissionend?: number; // 0 = will be closed manually, greater than 0 the timestamp of the end of the submission phase.\n    assessmentstart?: number; // 0 = will be started manually, greater than 0 the timestamp of the start of the assessment phase.\n    assessmentend?: number; // 0 = will be closed manually, greater than 0 the timestamp of the end of the assessment phase.\n    phaseswitchassessment?: boolean; // Automatically switch to the assessment phase after the submissions deadline.\n    conclusion?: string; // A text to be displayed at the end of the workshop.\n    conclusionformat?: CoreTextFormat; // Conclusion format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    overallfeedbackmode?: AddonModWorkshopOverallFeedbackMode; // Mode of the overall feedback support.\n    overallfeedbackfiles?: number; // Number of allowed attachments to the overall feedback.\n    overallfeedbackfiletypes?: string; // Comma separated list of file extensions.\n    overallfeedbackmaxbytes?: number; // Maximum size of one file attached to the overall feedback.\n    coursemodule: number; // Coursemodule.\n    introfiles: CoreWSExternalFile[]; // Introfiles.\n    instructauthorsfiles?: CoreWSExternalFile[]; // Instructauthorsfiles.\n    instructreviewersfiles?: CoreWSExternalFile[]; // Instructreviewersfiles.\n    conclusionfiles?: CoreWSExternalFile[]; // Conclusionfiles.\n};\n\n/**\n * Params of mod_workshop_get_workshop_access_information WS.\n */\ntype AddonModWorkshopGetWorkshopAccessInformationWSParams = {\n    workshopid: number; // Workshop instance id.\n};\n\n/**\n * Data returned by mod_workshop_get_workshop_access_information WS.\n */\nexport type AddonModWorkshopGetWorkshopAccessInformationWSResponse = {\n    creatingsubmissionallowed: boolean; // Is the given user allowed to create their submission?.\n    modifyingsubmissionallowed: boolean; // Is the user allowed to modify his existing submission?.\n    assessingallowed: boolean; // Is the user allowed to create/edit his assessments?.\n    assessingexamplesallowed: boolean; // Are reviewers allowed to create/edit their assessments of the example submissions?.\n    examplesassessedbeforesubmission: boolean; // Whether the given user has assessed all his required examples before submission\n    // (always true if there are not examples to assess or not configured to check before submission).\n    examplesassessedbeforeassessment: boolean; // Whether the given user has assessed all his required examples before assessment\n    // (always true if there are not examples to assessor not configured to check before assessment).\n    canview: boolean; // Whether the user has the capability mod/workshop:view allowed.\n    canaddinstance: boolean; // Whether the user has the capability mod/workshop:addinstance allowed.\n    canswitchphase: boolean; // Whether the user has the capability mod/workshop:switchphase allowed.\n    caneditdimensions: boolean; // Whether the user has the capability mod/workshop:editdimensions allowed.\n    cansubmit: boolean; // Whether the user has the capability mod/workshop:submit allowed.\n    canpeerassess: boolean; // Whether the user has the capability mod/workshop:peerassess allowed.\n    canmanageexamples: boolean; // Whether the user has the capability mod/workshop:manageexamples allowed.\n    canallocate: boolean; // Whether the user has the capability mod/workshop:allocate allowed.\n    canpublishsubmissions: boolean; // Whether the user has the capability mod/workshop:publishsubmissions allowed.\n    canviewauthornames: boolean; // Whether the user has the capability mod/workshop:viewauthornames allowed.\n    canviewreviewernames: boolean; // Whether the user has the capability mod/workshop:viewreviewernames allowed.\n    canviewallsubmissions: boolean; // Whether the user has the capability mod/workshop:viewallsubmissions allowed.\n    canviewpublishedsubmissions: boolean; // Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.\n    canviewauthorpublished: boolean; // Whether the user has the capability mod/workshop:viewauthorpublished allowed.\n    canviewallassessments: boolean; // Whether the user has the capability mod/workshop:viewallassessments allowed.\n    canoverridegrades: boolean; // Whether the user has the capability mod/workshop:overridegrades allowed.\n    canignoredeadlines: boolean; // Whether the user has the capability mod/workshop:ignoredeadlines allowed.\n    candeletesubmissions: boolean; // Whether the user has the capability mod/workshop:deletesubmissions allowed.\n    canexportsubmissions: boolean; // Whether the user has the capability mod/workshop:exportsubmissions allowed.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_workshop_get_user_plan WS.\n */\ntype AddonModWorkshopGetUserPlanWSParams = {\n    workshopid: number; // Workshop instance id.\n    userid?: number; // User id (empty or 0 for current user).\n};\n\n/**\n * Data returned by mod_workshop_get_user_plan WS.\n */\ntype AddonModWorkshopGetUserPlanWSResponse = {\n    userplan: {\n        phases: AddonModWorkshopPhaseData[];\n        examples: {\n            id: number; // Example submission id.\n            title: string; // Example submission title.\n            assessmentid: number; // Example submission assessment id.\n            grade: number; // The submission grade.\n            gradinggrade: number; // The assessment grade.\n        }[];\n    };\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport type AddonModWorkshopPhaseData = {\n    code: AddonModWorkshopPhase; // Phase code.\n    title: string; // Phase title.\n    active: boolean; // Whether is the active task.\n    tasks: AddonModWorkshopPhaseTaskData[];\n    actions: AddonModWorkshopPhaseActionData[];\n};\n\nexport type AddonModWorkshopPhaseTaskData = {\n    code: string; // Task code.\n    title: string; // Task title.\n    link: string; // Link to task.\n    details?: string; // Task details.\n    completed: string; // Completion information (maybe empty, maybe a boolean or generic info).\n};\n\nexport type AddonModWorkshopPhaseActionData = {\n    type?: string; // Action type.\n    label?: string; // Action label.\n    url: string; // Link to action.\n    method?: string; // Get or post.\n};\n\n/**\n * Params of mod_workshop_get_submissions WS.\n */\ntype AddonModWorkshopGetSubmissionsWSParams = {\n    workshopid: number; // Workshop instance id.\n    userid?: number; // Get submissions done by this user. Use 0 or empty for the current user.\n    groupid?: number; // Group id, 0 means that the function will determine the user group.\n    // It will return submissions done by users in the given group.\n    page?: number; // The page of records to return.\n    perpage?: number; // The number of records to return per page.\n};\n\n/**\n * Data returned by mod_workshop_get_submissions WS.\n */\ntype AddonModWorkshopGetSubmissionsWSResponse = {\n    submissions: AddonModWorkshopSubmissionData[];\n    totalcount: number; // Total count of submissions.\n    totalfilesize: number; // Total size (bytes) of the files attached to all the submissions (even the ones not returned due\n    // to pagination).\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport type AddonModWorkshopSubmissionData = {\n    id: number; // The primary key of the record.\n    workshopid: number; // The id of the workshop instance.\n    example: boolean; // Is this submission an example from teacher.\n    authorid: number; // The author of the submission.\n    timecreated: number; // Timestamp when the work was submitted for the first time.\n    timemodified: number; // Timestamp when the submission has been updated.\n    title: string; // The submission title.\n    content: string; // Submission text.\n    contentformat?: CoreTextFormat; // Content format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    contenttrust: number; // The trust mode of the data.\n    attachment: number; // Used by File API file_postupdate_standard_filemanager.\n    grade?: number; // Aggregated grade for the submission. The grade is a decimal number from interval 0..100.\n    // If NULL then the grade for submission has not been aggregated yet.\n    gradeover?: number; // Grade for the submission manually overridden by a teacher. Grade is always from interval 0..100.\n    // If NULL then the grade is not overriden.\n    gradeoverby?: number; // The id of the user who has overridden the grade for submission.\n    feedbackauthor?: string; // Teacher comment/feedback for the author of the submission, for example describing the reasons\n    // for the grade overriding.\n    feedbackauthorformat?: CoreTextFormat; // Feedbackauthor format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    timegraded?: number; // The timestamp when grade or gradeover was recently modified.\n    published: boolean; // Shall the submission be available to other when the workshop is closed.\n    late: number; // Has this submission been submitted after the deadline or during the assessment phase?.\n    contentfiles?: CoreWSExternalFile[]; // Contentfiles.\n    attachmentfiles?: CoreWSExternalFile[]; // Attachmentfiles.\n};\n\n/**\n * Params of mod_workshop_get_submission WS.\n */\ntype AddonModWorkshopGetSubmissionWSParams = {\n    submissionid: number; // Submission id.\n};\n\n/**\n * Data returned by mod_workshop_get_submission WS.\n */\ntype AddonModWorkshopGetSubmissionWSResponse = {\n    submission: AddonModWorkshopSubmissionData;\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_workshop_get_grades WS.\n */\ntype AddonModWorkshopGetGradesWSParams = {\n    workshopid: number; // Workshop instance id.\n    userid?: number; // User id (empty or 0 for current user).\n};\n\n/**\n * Data returned by mod_workshop_get_grades WS.\n */\nexport type AddonModWorkshopGetGradesWSResponse = {\n    assessmentrawgrade?: number; // The assessment raw (numeric) grade.\n    assessmentlongstrgrade?: string; // The assessment string grade.\n    assessmentgradehidden?: boolean; // Whether the grade is hidden or not.\n    submissionrawgrade?: number; // The submission raw (numeric) grade.\n    submissionlongstrgrade?: string; // The submission string grade.\n    submissiongradehidden?: boolean; // Whether the grade is hidden or not.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_workshop_get_grades_report WS.\n */\ntype AddonModWorkshopGetGradesReportWSParams = {\n    workshopid: number; // Workshop instance id.\n    groupid?: number; // Group id, 0 means that the function will determine the user group.\n    sortby?: string; // Sort by this element:\n    // lastname, firstname, submissiontitle, submissionmodified, submissiongrade, gradinggrade.\n    sortdirection?: string; // Sort direction: ASC or DESC.\n    page?: number; // The page of records to return.\n    perpage?: number; // The number of records to return per page.\n};\n\n/**\n * Data returned by mod_workshop_get_grades_report WS.\n */\ntype AddonModWorkshopGetGradesReportWSResponse = {\n    report: AddonModWorkshoGradesReportData;\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport type AddonModWorkshoGradesReportData = {\n    grades: AddonModWorkshopGradesData[];\n    totalcount: number; // Number of total submissions.\n};\n\nexport type AddonModWorkshopGradesData = {\n    userid: number; // The id of the user being displayed in the report.\n    submissionid?: number; // Submission id.\n    submissiontitle?: string; // Submission title.\n    submissionmodified?: number; // Timestamp submission was updated.\n    submissiongrade?: number; // Aggregated grade for the submission.\n    gradinggrade?: number; // Computed grade for the assessment.\n    submissiongradeover?: number; // Grade for the assessment overrided by the teacher.\n    submissiongradeoverby?: number; // The id of the user who overrided the grade.\n    submissionpublished?: number; // Whether is a submission published.\n    reviewedby?: AddonModWorkshopReviewer[]; // The users who reviewed the user submission.\n    reviewerof?: AddonModWorkshopReviewer[]; // The assessments the user reviewed.\n};\n\nexport type AddonModWorkshopReviewer = {\n    userid: number; // The id of the user (0 when is configured to do not display names).\n    assessmentid: number; // The id of the assessment.\n    submissionid: number; // The id of the submission assessed.\n    grade: number; // The grade for submission.\n    gradinggrade: number; // The grade for assessment.\n    gradinggradeover: number; // The aggregated grade overrided.\n    weight: number; // The weight of the assessment for aggregation.\n};\n\n/**\n * Params of mod_workshop_get_submission_assessments WS.\n */\ntype AddonModWorkshopGetSubmissionAssessmentsWSParams = {\n    submissionid: number; // Submission id.\n};\n\n/**\n * Data returned by mod_workshop_get_submission_assessments and mod_workshop_get_reviewer_assessments WS.\n */\ntype AddonModWorkshopGetAssessmentsWSResponse = {\n    assessments: AddonModWorkshopSubmissionAssessmentData[];\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport type AddonModWorkshopSubmissionAssessmentData = {\n    id: number; // The primary key of the record.\n    submissionid: number; // The id of the assessed submission.\n    reviewerid: number; // The id of the reviewer who makes this assessment.\n    weight: number; // The weight of the assessment for the purposes of aggregation.\n    timecreated: number; // If 0 then the assessment was allocated but the reviewer has not assessed yet.\n    // If greater than 0 then the timestamp of when the reviewer assessed for the first time.\n    timemodified: number; // If 0 then the assessment was allocated but the reviewer has not assessed yet.\n    // If greater than 0 then the timestamp of when the reviewer assessed for the last time.\n    grade?: number; // The aggregated grade for submission suggested by the reviewer.\n    // The grade 0..100 is computed from the values assigned to the assessment dimensions fields.\n    // If NULL then it has not been aggregated yet.\n    gradinggrade?: number; // The computed grade 0..100 for this assessment. If NULL then it has not been computed yet.\n    gradinggradeover?: number; // Grade for the assessment manually overridden by a teacher.\n    // Grade is always from interval 0..100. If NULL then the grade is not overriden.\n    gradinggradeoverby: number; // The id of the user who has overridden the grade for submission.\n    feedbackauthor: string; // The comment/feedback from the reviewer for the author.\n    feedbackauthorformat?: CoreTextFormat; // Feedbackauthor format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    feedbackauthorattachment: number; // Are there some files attached to the feedbackauthor field?\n    // Sets to 1 by file_postupdate_standard_filemanager().\n    feedbackreviewer?: string; // The comment/feedback from the teacher for the reviewer.\n    // For example the reason why the grade for assessment was overridden.\n    feedbackreviewerformat?: CoreTextFormat; // Feedbackreviewer format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    feedbackcontentfiles: CoreWSExternalFile[]; // Feedbackcontentfiles.\n    feedbackattachmentfiles: CoreWSExternalFile[]; // Feedbackattachmentfiles.\n};\n\n/**\n * Params of mod_workshop_get_reviewer_assessments WS.\n */\ntype AddonModWorkshopGetReviewerAssessmentsWSParams = {\n    workshopid: number; // Workshop instance id.\n    userid?: number; // User id who did the assessment review (empty or 0 for current user).\n};\n\n/**\n * Params of mod_workshop_get_assessment WS.\n */\ntype AddonModWorkshopGetAssessmentWSParams = {\n    assessmentid: number; // Assessment id.\n};\n\n/**\n * Data returned by mod_workshop_get_assessment WS.\n */\ntype AddonModWorkshopGetAssessmentWSResponse = {\n    assessment: AddonModWorkshopSubmissionAssessmentData;\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_workshop_get_assessment_form_definition WS.\n */\ntype AddonModWorkshopGetAssessmentFormDefinitionWSParams = {\n    assessmentid: number; // Assessment id.\n    mode?: AddonModWorkshopAssessmentMode; // The form mode (assessment or preview).\n};\n\n/**\n * Data returned by mod_workshop_get_assessment_form_definition WS.\n */\ntype AddonModWorkshopGetAssessmentFormDefinitionWSResponse = {\n    dimenssionscount: number; // The number of dimenssions used by the form.\n    descriptionfiles: CoreWSExternalFile[];\n    options: { // The form options.\n        name: string; // Option name.\n        value: string; // Option value.\n    }[];\n    fields: AddonModWorkshopGetAssessmentFormFieldData[]; // The form fields.\n    current: AddonModWorkshopGetAssessmentFormFieldData[]; // The current field values.\n    dimensionsinfo: { // The dimensions general information.\n        id: number; // Dimension id.\n        min: number; // Minimum grade for the dimension.\n        max: number; // Maximum grade for the dimension.\n        weight: string; // The weight of the dimension.\n        scale?: string; // Scale items (if used).\n    }[];\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport type AddonModWorkshopGetAssessmentFormDefinitionData =\n    Omit<AddonModWorkshopGetAssessmentFormDefinitionWSResponse, 'fields'|'options'|'current'> & {\n        options?: {[name: string]: string} ;\n        fields: AddonModWorkshopGetAssessmentFormFieldsParsedData[]; // The form fields.\n        current: AddonModWorkshopGetAssessmentFormFieldsParsedData[]; // The current field values.\n    };\n\nexport type AddonModWorkshopGetAssessmentFormFieldData = {\n    name: string; // Field name.\n    value: string; // Field default value.\n};\n\nexport type AddonModWorkshopGetAssessmentFormFieldsParsedData = (\n    Record<string, string> &\n    {\n        number?: number; // eslint-disable-line id-blacklist\n        grades?: CoreGradesMenuItem[];\n        grade?: number | string;\n        fields?: (Record<string, string> & {\n            number: number; // eslint-disable-line id-blacklist\n        })[];\n    }\n);\n\n/**\n * Common options with a user ID.\n */\nexport type AddonModWorkshopUserOptions = CoreCourseCommonModWSOptions & {\n    userId?: number; // User ID. If not defined, current user.\n};\n\n/**\n * Common options with a group ID.\n */\nexport type AddonModWorkshopGroupOptions = CoreCourseCommonModWSOptions & {\n    groupId?: number; // Group id, 0 or not defined means that the function will determine the user group.\n};\n\n/**\n * Options to pass to getSubmissions.\n */\nexport type AddonModWorkshopGetSubmissionsOptions = AddonModWorkshopUserOptions & AddonModWorkshopGroupOptions;\n\n/**\n * Options to pass to fetchAllGradeReports.\n */\nexport type AddonModWorkshopFetchAllGradesReportOptions = AddonModWorkshopGroupOptions & {\n    perPage?: number; // Records per page to return. Default AddonModWorkshopProvider.PER_PAGE.\n};\n\n/**\n * Options to pass to getGradesReport.\n */\nexport type AddonModWorkshopGetGradesReportOptions = AddonModWorkshopFetchAllGradesReportOptions & {\n    page?: number; // Page of records to return. Default 0.\n};\n\n/**\n * Options to pass to getAssessmentForm.\n */\nexport type AddonModWorkshopGetAssessmentFormOptions = CoreCourseCommonModWSOptions & {\n    mode?: AddonModWorkshopAssessmentMode; // Mode assessment (default) or preview. Defaults to 'assessment'.\n};\n\n/**\n * Params of mod_workshop_update_assessment WS.\n */\ntype AddonModWorkshopUpdateAssessmentWSParams = {\n    assessmentid: number; // Assessment id.\n    data: AddonModWorkshopAssessmentFieldData[]; // Assessment data.\n};\n\nexport type AddonModWorkshopAssessmentFieldData = {\n    name: string; // The assessment data (use WS get_assessment_form_definition for obtaining the data to sent).\n    // Apart from that data, you can optionally send:\n    // feedbackauthor (str); the feedback for the submission author\n    // feedbackauthorformat (int); the format of the feedbackauthor\n    // feedbackauthorinlineattachmentsid (int); the draft file area for the editor attachments\n    // feedbackauthorattachmentsid (int); the draft file area id for the feedback attachments.\n    value: string; // The value of the option.\n};\n\n/**\n * Data returned by mod_workshop_update_assessment WS.\n */\ntype AddonModWorkshopUpdateAssessmentWSResponse = {\n    status: boolean; // Status: true if the assessment was added or updated false otherwise.\n    rawgrade?: number; // Raw percentual grade (0.00000 to 100.00000) for submission.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_workshop_evaluate_submission WS.\n */\ntype AddonModWorkshopEvaluateSubmissionWSParams = {\n    submissionid: number; // Submission id.\n    feedbacktext?: string; // The feedback for the author.\n    feedbackformat?: CoreTextFormat; // The feedback format for text.\n    published?: boolean; // Publish the submission for others?.\n    gradeover?: string; // The new submission grade.\n};\n\n/**\n * Params of mod_workshop_evaluate_assessment WS.\n */\ntype AddonModWorkshopEvaluateAssessmentWSParams = {\n    assessmentid: number; // Assessment id.\n    feedbacktext?: string; // The feedback for the reviewer.\n    feedbackformat?: CoreTextFormat; // The feedback format for text.\n    weight?: number; // The new weight for the assessment.\n    gradinggradeover?: string; // The new grading grade.\n};\n\n/**\n * Params of mod_workshop_delete_submission WS.\n */\ntype AddonModWorkshopDeleteSubmissionWSParams = {\n    submissionid: number; // Submission id.\n};\n\n/**\n * Params of mod_workshop_add_submission WS.\n */\ntype AddonModWorkshopAddSubmissionWSParams = {\n    workshopid: number; // Workshop id.\n    title: string; // Submission title.\n    content?: string; // Submission text content.\n    contentformat?: number; // The format used for the content.\n    inlineattachmentsid?: number; // The draft file area id for inline attachments in the content.\n    attachmentsid?: number; // The draft file area id for attachments.\n};\n\n/**\n * Data returned by mod_workshop_add_submission WS.\n */\ntype AddonModWorkshopAddSubmissionWSResponse = {\n    status: boolean; // True if the submission was created false otherwise.\n    submissionid?: number; // New workshop submission id.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_workshop_update_submission WS.\n */\ntype AddonModWorkshopUpdateSubmissionWSParams = {\n    submissionid: number; // Submission id.\n    title: string; // Submission title.\n    content?: string; // Submission text content.\n    contentformat?: number; // The format used for the content.\n    inlineattachmentsid?: number; // The draft file area id for inline attachments in the content.\n    attachmentsid?: number; // The draft file area id for attachments.\n};\n\nexport type AddonModWorkshopSubmissionChangedEventData = {\n    workshopId: number;\n    submissionId?: number;\n};\n\nexport type AddonModWorkshopAssessmentSavedChangedEventData = {\n    workshopId: number;\n    assessmentId: number;\n    userId: number;\n};\n\nexport type AddonModWorkshopAssessmentInvalidatedChangedEventData = null;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}