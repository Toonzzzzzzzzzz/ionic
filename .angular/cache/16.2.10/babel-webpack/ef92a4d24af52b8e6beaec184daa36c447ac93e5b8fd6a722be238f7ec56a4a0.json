{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreTagFeedComponent } from '@features/tag/components/feed/feed';\nimport { CoreTagHelper } from '@features/tag/services/tag-helper';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { makeSingleton } from '@singletons';\nimport { AddonModBook } from '../book';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to support tags.\n */\nexport class AddonModBookTagAreaHandlerService {\n  constructor() {\n    this.name = 'AddonModBookTagAreaHandler';\n    this.type = 'mod_book/book_chapters';\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns Whether or not the handler is enabled on a site level.\n   */\n  isEnabled() {\n    return AddonModBook.isPluginEnabled();\n  }\n  /**\n   * Parses the rendered content of a tag index and returns the items.\n   *\n   * @param content Rendered content.\n   * @returns Area items (or promise resolved with the items).\n   */\n  parseContent(content) {\n    return _asyncToGenerator(function* () {\n      const items = CoreTagHelper.parseFeedContent(content);\n      // Find module ids of the returned books, they are needed by the link delegate.\n      yield Promise.all(items.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (item) {\n          const params = item.url ? CoreUrlUtils.extractUrlParams(item.url) : {};\n          if (params.b && !params.id) {\n            const bookId = parseInt(params.b, 10);\n            const module = yield CoreCourse.getModuleBasicInfoByInstance(bookId, 'book', {\n              readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n            });\n            item.url += '&id=' + module.id;\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      return items;\n    })();\n  }\n  /**\n   * Get the component to use to display items.\n   *\n   * @returns The component (or promise resolved with component) to use, undefined if not found.\n   */\n  getComponent() {\n    return CoreTagFeedComponent;\n  }\n}\n_class = AddonModBookTagAreaHandlerService;\n_class.ɵfac = function AddonModBookTagAreaHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModBookTagAreaHandler = makeSingleton(AddonModBookTagAreaHandlerService);","map":{"version":3,"names":["CoreCourse","CoreTagFeedComponent","CoreTagHelper","CoreUrlUtils","makeSingleton","AddonModBook","AddonModBookTagAreaHandlerService","constructor","name","type","isEnabled","isPluginEnabled","parseContent","content","_asyncToGenerator","items","parseFeedContent","Promise","all","map","_ref","item","params","url","extractUrlParams","b","id","bookId","parseInt","module","getModuleBasicInfoByInstance","readingStrategy","_x","apply","arguments","getComponent","factory","ɵfac","providedIn","AddonModBookTagAreaHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/book/services/handlers/tag-area.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreTagFeedComponent } from '@features/tag/components/feed/feed';\nimport { CoreTagAreaHandler } from '@features/tag/services/tag-area-delegate';\nimport { CoreTagFeedElement, CoreTagHelper } from '@features/tag/services/tag-helper';\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { makeSingleton } from '@singletons';\nimport { AddonModBook } from '../book';\n\n/**\n * Handler to support tags.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModBookTagAreaHandlerService implements CoreTagAreaHandler {\n\n    name = 'AddonModBookTagAreaHandler';\n    type = 'mod_book/book_chapters';\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns Whether or not the handler is enabled on a site level.\n     */\n    isEnabled(): Promise<boolean> {\n        return AddonModBook.isPluginEnabled();\n    }\n\n    /**\n     * Parses the rendered content of a tag index and returns the items.\n     *\n     * @param content Rendered content.\n     * @returns Area items (or promise resolved with the items).\n     */\n    async parseContent(content: string): Promise<CoreTagFeedElement[]> {\n        const items = CoreTagHelper.parseFeedContent(content);\n\n        // Find module ids of the returned books, they are needed by the link delegate.\n        await Promise.all(items.map(async (item) => {\n            const params = item.url ? CoreUrlUtils.extractUrlParams(item.url) : {};\n            if (params.b && !params.id) {\n                const bookId = parseInt(params.b, 10);\n\n                const module = await CoreCourse.getModuleBasicInfoByInstance(\n                    bookId,\n                    'book',\n                    { readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE },\n                );\n                item.url += '&id=' + module.id;\n            }\n        }));\n\n        return items;\n    }\n\n    /**\n     * Get the component to use to display items.\n     *\n     * @returns The component (or promise resolved with component) to use, undefined if not found.\n     */\n    getComponent(): Type<unknown> | Promise<Type<unknown>> {\n        return CoreTagFeedComponent;\n    }\n\n}\n\nexport const AddonModBookTagAreaHandler = makeSingleton(AddonModBookTagAreaHandlerService);\n"],"mappings":";;AAeA,SAASA,UAAU,QAAQ,kCAAkC;AAC7D,SAASC,oBAAoB,QAAQ,oCAAoC;AAEzE,SAA6BC,aAAa,QAAQ,mCAAmC;AAErF,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,YAAY,QAAQ,SAAS;;AAEtC;;;AAIA,OAAM,MAAOC,iCAAiC;EAD9CC,YAAA;IAGI,KAAAC,IAAI,GAAG,4BAA4B;IACnC,KAAAC,IAAI,GAAG,wBAAwB;;EAE/B;;;;;EAKAC,SAASA,CAAA;IACL,OAAOL,YAAY,CAACM,eAAe,EAAE;EACzC;EAEA;;;;;;EAMMC,YAAYA,CAACC,OAAe;IAAA,OAAAC,iBAAA;MAC9B,MAAMC,KAAK,GAAGb,aAAa,CAACc,gBAAgB,CAACH,OAAO,CAAC;MAErD;MACA,MAAMI,OAAO,CAACC,GAAG,CAACH,KAAK,CAACI,GAAG;QAAA,IAAAC,IAAA,GAAAN,iBAAA,CAAC,WAAOO,IAAI,EAAI;UACvC,MAAMC,MAAM,GAAGD,IAAI,CAACE,GAAG,GAAGpB,YAAY,CAACqB,gBAAgB,CAACH,IAAI,CAACE,GAAG,CAAC,GAAG,EAAE;UACtE,IAAID,MAAM,CAACG,CAAC,IAAI,CAACH,MAAM,CAACI,EAAE,EAAE;YACxB,MAAMC,MAAM,GAAGC,QAAQ,CAACN,MAAM,CAACG,CAAC,EAAE,EAAE,CAAC;YAErC,MAAMI,MAAM,SAAS7B,UAAU,CAAC8B,4BAA4B,CACxDH,MAAM,EACN,MAAM,EACN;cAAEI,eAAe;YAAuC,CAAE,CAC7D;YACDV,IAAI,CAACE,GAAG,IAAI,MAAM,GAAGM,MAAM,CAACH,EAAE;;QAEtC,CAAC;QAAA,iBAAAM,EAAA;UAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;QAAA;MAAA,IAAC,CAAC;MAEH,OAAOnB,KAAK;IAAC;EACjB;EAEA;;;;;EAKAoB,YAAYA,CAAA;IACR,OAAOlC,oBAAoB;EAC/B;;SAhDSK,iCAAiC;;mBAAjCA,MAAiC;AAAA;;SAAjCA,MAAiC;EAAA8B,OAAA,EAAjC9B,MAAiC,CAAA+B,IAAA;EAAAC,UAAA,EADpB;AAAM;AAqDhC,OAAO,MAAMC,0BAA0B,GAAGnC,aAAa,CAACE,iCAAiC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}