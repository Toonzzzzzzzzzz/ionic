{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDom } from '@singletons/dom';\nimport * as i0 from \"@angular/core\";\n/**\n * Directive to auto focus an element when a view is loaded.\n *\n * The value of the input will decide if show keyboard when focusing the element (only on Android).\n * In case value is nofocus, the directive is disabled.\n *\n * <ion-input [core-auto-focus]=\"showKeyboard\">\n */\nexport class CoreAutoFocusDirective {\n  constructor(element) {\n    this.autoFocus = true;\n    this.element = element.nativeElement;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngAfterViewInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (CoreUtils.isFalseOrZero(_this.autoFocus)) {\n        return;\n      }\n      yield CoreDom.waitToBeInDOM(_this.element);\n      // Wait in case there is an animation to enter the page, otherwise the interaction\n      // between the keyboard appearing and the animation causes a visual glitch.\n      yield CoreUtils.wait(540);\n      CoreDomUtils.focusElement(_this.element);\n    })();\n  }\n}\n_class = CoreAutoFocusDirective;\n_class.ɵfac = function CoreAutoFocusDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"\", \"core-auto-focus\", \"\"]],\n  inputs: {\n    autoFocus: [\"core-auto-focus\", \"autoFocus\"]\n  }\n});","map":{"version":3,"names":["CoreDomUtils","CoreUtils","CoreDom","CoreAutoFocusDirective","constructor","element","autoFocus","nativeElement","ngAfterViewInit","_this","_asyncToGenerator","isFalseOrZero","waitToBeInDOM","wait","focusElement","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/directives/auto-focus.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Directive, Input, ElementRef, AfterViewInit } from '@angular/core';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDom } from '@singletons/dom';\n\n/**\n * Directive to auto focus an element when a view is loaded.\n *\n * The value of the input will decide if show keyboard when focusing the element (only on Android).\n * In case value is nofocus, the directive is disabled.\n *\n * <ion-input [core-auto-focus]=\"showKeyboard\">\n */\n@Directive({\n    selector: '[core-auto-focus]',\n})\nexport class CoreAutoFocusDirective implements AfterViewInit {\n\n    @Input('core-auto-focus') autoFocus: boolean | string = true;\n\n    protected element: HTMLIonInputElement | HTMLIonTextareaElement | HTMLIonSearchbarElement | HTMLElement;\n\n    constructor(element: ElementRef) {\n        this.element = element.nativeElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        if (CoreUtils.isFalseOrZero(this.autoFocus)) {\n            return;\n        }\n\n        await CoreDom.waitToBeInDOM(this.element);\n\n        // Wait in case there is an animation to enter the page, otherwise the interaction\n        // between the keyboard appearing and the animation causes a visual glitch.\n        await CoreUtils.wait(540);\n\n        CoreDomUtils.focusElement(this.element);\n\n    }\n\n}\n"],"mappings":";;AAgBA,SAASA,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,OAAO,QAAQ,iBAAiB;;AAEzC;;;;;;;;AAWA,OAAM,MAAOC,sBAAsB;EAM/BC,YAAYC,OAAmB;IAJL,KAAAC,SAAS,GAAqB,IAAI;IAKxD,IAAI,CAACD,OAAO,GAAGA,OAAO,CAACE,aAAa;EACxC;EAEA;;;EAGMC,eAAeA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACjB,IAAIT,SAAS,CAACU,aAAa,CAACF,KAAI,CAACH,SAAS,CAAC,EAAE;QACzC;;MAGJ,MAAMJ,OAAO,CAACU,aAAa,CAACH,KAAI,CAACJ,OAAO,CAAC;MAEzC;MACA;MACA,MAAMJ,SAAS,CAACY,IAAI,CAAC,GAAG,CAAC;MAEzBb,YAAY,CAACc,YAAY,CAACL,KAAI,CAACJ,OAAO,CAAC;IAAC;EAE5C;;SA1BSF,sBAAsB;;mBAAtBA,MAAsB,EAAAY,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;AAAA;;QAAtBd,MAAsB;EAAAe,SAAA;EAAAC,MAAA;IAAAb,SAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}