{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseResourcePrefetchHandlerBase } from '@features/course/classes/resource-prefetch-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModImscp, AddonModImscpProvider } from '../imscp';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to prefetch IMSCPs.\n */\nexport class AddonModImscpPrefetchHandlerService extends CoreCourseResourcePrefetchHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModImscp';\n    this.modName = 'imscp';\n    this.component = AddonModImscpProvider.COMPONENT;\n  }\n  /**\n   * @inheritdoc\n   */\n  downloadOrPrefetch(module, courseId, prefetch) {\n    var _superprop_getDownloadOrPrefetch = () => super.downloadOrPrefetch,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      const siteId = CoreSites.getCurrentSiteId();\n      const dirPath = yield CoreFilepool.getPackageDirPathByUrl(siteId, module.url);\n      const promises = [];\n      promises.push(_superprop_getDownloadOrPrefetch().call(_this, module, courseId, prefetch, dirPath));\n      promises.push(AddonModImscp.getImscp(courseId, module.id, {\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n        siteId\n      }));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getIntroFiles(module, courseId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // If not found, use undefined so module description is used.\n      const imscp = yield CoreUtils.ignoreErrors(AddonModImscp.getImscp(courseId, module.id));\n      return _this2.getIntroFilesFromInstance(module, imscp);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateContent(moduleId, courseId) {\n    return _asyncToGenerator(function* () {\n      return AddonModImscp.invalidateContent(moduleId, courseId);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateModule(module, courseId) {\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      promises.push(AddonModImscp.invalidateImscpData(courseId));\n      promises.push(CoreCourse.invalidateModule(module.id));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return AddonModImscp.isPluginEnabled();\n  }\n  /**\n   * @inheritdoc\n   */\n  isFileDownloadable(file) {\n    return AddonModImscp.isFileDownloadable(file);\n  }\n}\n_class = AddonModImscpPrefetchHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModImscpPrefetchHandlerService_BaseFactory;\n  return function AddonModImscpPrefetchHandlerService_Factory(t) {\n    return (ɵAddonModImscpPrefetchHandlerService_BaseFactory || (ɵAddonModImscpPrefetchHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModImscpPrefetchHandler = makeSingleton(AddonModImscpPrefetchHandlerService);","map":{"version":3,"names":["CoreCourseResourcePrefetchHandlerBase","CoreCourse","CoreFilepool","CoreSites","CoreUtils","makeSingleton","AddonModImscp","AddonModImscpProvider","AddonModImscpPrefetchHandlerService","constructor","name","modName","component","COMPONENT","downloadOrPrefetch","module","courseId","prefetch","_superprop_getDownloadOrPrefetch","_this","_asyncToGenerator","siteId","getCurrentSiteId","dirPath","getPackageDirPathByUrl","url","promises","push","call","getImscp","id","readingStrategy","Promise","all","getIntroFiles","_this2","imscp","ignoreErrors","getIntroFilesFromInstance","invalidateContent","moduleId","invalidateModule","invalidateImscpData","isEnabled","isPluginEnabled","isFileDownloadable","file","t","factory","ɵfac","providedIn","AddonModImscpPrefetchHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/imscp/services/handlers/prefetch.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourseResourcePrefetchHandlerBase } from '@features/course/classes/resource-prefetch-handler';\nimport {\n    CoreCourse,\n    CoreCourseAnyModuleData,\n    CoreCourseModuleContentFile,\n} from '@features/course/services/course';\nimport { CoreCourseModuleData } from '@features/course/services/course-helper';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSFile } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { AddonModImscp, AddonModImscpProvider } from '../imscp';\n\n/**\n * Handler to prefetch IMSCPs.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonModImscpPrefetchHandlerService extends CoreCourseResourcePrefetchHandlerBase {\n\n    name = 'AddonModImscp';\n    modName = 'imscp';\n    component = AddonModImscpProvider.COMPONENT;\n\n    /**\n     * @inheritdoc\n     */\n    async downloadOrPrefetch(module: CoreCourseModuleData, courseId: number, prefetch?: boolean): Promise<void> {\n        const siteId = CoreSites.getCurrentSiteId();\n\n        const dirPath = await CoreFilepool.getPackageDirPathByUrl(siteId, module.url!);\n        const promises: Promise<unknown>[] = [];\n\n        promises.push(super.downloadOrPrefetch(module, courseId, prefetch, dirPath));\n        promises.push(AddonModImscp.getImscp(courseId, module.id, {\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId,\n        }));\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getIntroFiles(module: CoreCourseAnyModuleData, courseId: number): Promise<CoreWSFile[]> {\n        // If not found, use undefined so module description is used.\n        const imscp = await CoreUtils.ignoreErrors(AddonModImscp.getImscp(courseId, module.id));\n\n        return this.getIntroFilesFromInstance(module, imscp);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateContent(moduleId: number, courseId: number): Promise<void> {\n        return AddonModImscp.invalidateContent(moduleId, courseId);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateModule(module: CoreCourseAnyModuleData, courseId: number): Promise<void> {\n        const promises: Promise<unknown>[] = [];\n\n        promises.push(AddonModImscp.invalidateImscpData(courseId));\n        promises.push(CoreCourse.invalidateModule(module.id));\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isEnabled(): Promise<boolean> {\n        return AddonModImscp.isPluginEnabled();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isFileDownloadable(file: CoreCourseModuleContentFile): boolean {\n        return AddonModImscp.isFileDownloadable(file);\n    }\n\n}\nexport const AddonModImscpPrefetchHandler = makeSingleton(AddonModImscpPrefetchHandlerService);\n"],"mappings":";;AAeA,SAASA,qCAAqC,QAAQ,oDAAoD;AAC1G,SACIC,UAAU,QAGP,kCAAkC;AAEzC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,SAAS,QAAkC,iBAAiB;AACrE,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,aAAa,EAAEC,qBAAqB,QAAQ,UAAU;;AAE/D;;;AAIA,OAAM,MAAOC,mCAAoC,SAAQR,qCAAqC;EAD9FS,YAAA;;IAGI,KAAAC,IAAI,GAAG,eAAe;IACtB,KAAAC,OAAO,GAAG,OAAO;IACjB,KAAAC,SAAS,GAAGL,qBAAqB,CAACM,SAAS;;EAE3C;;;EAGMC,kBAAkBA,CAACC,MAA4B,EAAEC,QAAgB,EAAEC,QAAkB;IAAA,IAAAC,gCAAA,GAAAA,CAAA,WAAAJ,kBAAA;MAAAK,KAAA;IAAA,OAAAC,iBAAA;MACvF,MAAMC,MAAM,GAAGlB,SAAS,CAACmB,gBAAgB,EAAE;MAE3C,MAAMC,OAAO,SAASrB,YAAY,CAACsB,sBAAsB,CAACH,MAAM,EAAEN,MAAM,CAACU,GAAI,CAAC;MAC9E,MAAMC,QAAQ,GAAuB,EAAE;MAEvCA,QAAQ,CAACC,IAAI,CAACT,gCAAA,GAAAU,IAAA,CAAAT,KAAA,EAAyBJ,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEM,OAAO,CAAC,CAAC;MAC5EG,QAAQ,CAACC,IAAI,CAACrB,aAAa,CAACuB,QAAQ,CAACb,QAAQ,EAAED,MAAM,CAACe,EAAE,EAAE;QACtDC,eAAe;QACfV;OACH,CAAC,CAAC;MAEH,MAAMW,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;IAAC;EAChC;EAEA;;;EAGMQ,aAAaA,CAACnB,MAA+B,EAAEC,QAAgB;IAAA,IAAAmB,MAAA;IAAA,OAAAf,iBAAA;MACjE;MACA,MAAMgB,KAAK,SAAShC,SAAS,CAACiC,YAAY,CAAC/B,aAAa,CAACuB,QAAQ,CAACb,QAAQ,EAAED,MAAM,CAACe,EAAE,CAAC,CAAC;MAEvF,OAAOK,MAAI,CAACG,yBAAyB,CAACvB,MAAM,EAAEqB,KAAK,CAAC;IAAC;EACzD;EAEA;;;EAGMG,iBAAiBA,CAACC,QAAgB,EAAExB,QAAgB;IAAA,OAAAI,iBAAA;MACtD,OAAOd,aAAa,CAACiC,iBAAiB,CAACC,QAAQ,EAAExB,QAAQ,CAAC;IAAC;EAC/D;EAEA;;;EAGMyB,gBAAgBA,CAAC1B,MAA+B,EAAEC,QAAgB;IAAA,OAAAI,iBAAA;MACpE,MAAMM,QAAQ,GAAuB,EAAE;MAEvCA,QAAQ,CAACC,IAAI,CAACrB,aAAa,CAACoC,mBAAmB,CAAC1B,QAAQ,CAAC,CAAC;MAC1DU,QAAQ,CAACC,IAAI,CAAC1B,UAAU,CAACwC,gBAAgB,CAAC1B,MAAM,CAACe,EAAE,CAAC,CAAC;MAErD,MAAME,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;IAAC;EAChC;EAEA;;;EAGAiB,SAASA,CAAA;IACL,OAAOrC,aAAa,CAACsC,eAAe,EAAE;EAC1C;EAEA;;;EAGAC,kBAAkBA,CAACC,IAAiC;IAChD,OAAOxC,aAAa,CAACuC,kBAAkB,CAACC,IAAI,CAAC;EACjD;;SAjEStC,mCAAoC;;;;6IAApCA,MAAmC,IAAAuC,CAAA,IAAnCvC,MAAmC;EAAA;AAAA;;SAAnCA,MAAmC;EAAAwC,OAAA,EAAnCxC,MAAmC,CAAAyC,IAAA;EAAAC,UAAA,EADrB;AAAM;AAqEjC,OAAO,MAAMC,4BAA4B,GAAG9C,aAAa,CAACG,mCAAmC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}