{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport moment from 'moment-timezone';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreTime } from './time';\nimport { CoreBrowser } from '@singletons/browser';\n/**\n * Method to warn that logs are disabled, called only once.\n */\nconst warnLogsDisabled = CoreTime.once(() => {\n  // eslint-disable-next-line no-console\n  console.warn('Log is disabled in production app');\n});\n/**\n * Helper service to display messages in the console.\n *\n * @description\n * This service is meant to improve log messages, adding a timestamp and a name to all log messages.\n *\n * In your class constructor, call getInstance to configure your class name:\n * CoreLogger.getInstance('InitPage');\n *\n * Then you can call the log function you want to use in this logger instance.\n */\nexport class CoreLogger {\n  // Avoid creating instances.\n  constructor(log, info, warn, debug, error) {\n    this.log = log;\n    this.info = info;\n    this.warn = warn;\n    this.debug = debug;\n    this.error = error;\n  }\n  /**\n   * Get a logger instance for a certain class, service or component.\n   *\n   * @param className Name to use in the messages.\n   * @returns Instance.\n   */\n  static getInstance(className) {\n    // Disable log on production and testing.\n    if (!CoreBrowser.hasDevelopmentSetting('LoggingEnabled') && (CoreConstants.BUILD.isProduction || CoreConstants.BUILD.isTesting)) {\n      if (CoreConstants.BUILD.isProduction) {\n        warnLogsDisabled();\n      }\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      const muted = () => {};\n      return new CoreLogger(muted, muted, muted, muted, muted);\n    }\n    className = className || '';\n    return new CoreLogger(\n    // eslint-disable-next-line no-console\n    CoreLogger.prepareLogFn((...data) => console.log(...data), className),\n    // eslint-disable-next-line no-console\n    CoreLogger.prepareLogFn((...data) => console.info(...data), className),\n    // eslint-disable-next-line no-console\n    CoreLogger.prepareLogFn((...data) => console.warn(...data), className),\n    // eslint-disable-next-line no-console\n    CoreLogger.prepareLogFn((...data) => console.debug(...data), className),\n    // eslint-disable-next-line no-console\n    CoreLogger.prepareLogFn((...data) => console.error(...data), className));\n  }\n  /**\n   * Prepare a logging function, concatenating the timestamp and class name to all messages.\n   *\n   * @param logFn Log function to use.\n   * @param className Name to use in the messages.\n   * @returns Prepared function.\n   */\n  static prepareLogFn(logFn, className) {\n    // Return our own function that will call the logging function with the treated message.\n    return (...args) => {\n      const now = moment().format('l LTS');\n      args[0] = now + ' ' + className + ': ' + args[0]; // Prepend timestamp and className to the original message.\n      logFn.apply(null, args);\n    };\n  }\n}","map":{"version":3,"names":["moment","CoreConstants","CoreTime","CoreBrowser","warnLogsDisabled","once","console","warn","CoreLogger","constructor","log","info","debug","error","getInstance","className","hasDevelopmentSetting","BUILD","isProduction","isTesting","muted","prepareLogFn","data","logFn","args","now","format","apply"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/singletons/logger.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport moment from 'moment-timezone';\n\nimport { CoreConstants } from '@/core/constants';\n\nimport { CoreTime } from './time';\nimport { CoreBrowser } from '@singletons/browser';\n\n/**\n * Method to warn that logs are disabled, called only once.\n */\nconst warnLogsDisabled = CoreTime.once(() => {\n    // eslint-disable-next-line no-console\n    console.warn('Log is disabled in production app');\n});\n\n/**\n * Log function type.\n */\ntype LogFunction = (...data: unknown[]) => void;\n\n/**\n * Helper service to display messages in the console.\n *\n * @description\n * This service is meant to improve log messages, adding a timestamp and a name to all log messages.\n *\n * In your class constructor, call getInstance to configure your class name:\n * CoreLogger.getInstance('InitPage');\n *\n * Then you can call the log function you want to use in this logger instance.\n */\nexport class CoreLogger {\n\n    log: LogFunction;\n    info: LogFunction;\n    warn: LogFunction;\n    debug: LogFunction;\n    error: LogFunction;\n\n    // Avoid creating instances.\n    private constructor(log: LogFunction, info: LogFunction, warn: LogFunction, debug: LogFunction, error: LogFunction) {\n        this.log = log;\n        this.info = info;\n        this.warn = warn;\n        this.debug = debug;\n        this.error = error;\n    }\n\n    /**\n     * Get a logger instance for a certain class, service or component.\n     *\n     * @param className Name to use in the messages.\n     * @returns Instance.\n     */\n    static getInstance(className: string): CoreLogger {\n        // Disable log on production and testing.\n        if (\n            !CoreBrowser.hasDevelopmentSetting('LoggingEnabled') &&\n            (CoreConstants.BUILD.isProduction || CoreConstants.BUILD.isTesting)\n        ) {\n            if (CoreConstants.BUILD.isProduction) {\n                warnLogsDisabled();\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            const muted = () => {};\n\n            return new CoreLogger(muted, muted, muted, muted, muted);\n        }\n\n        className = className || '';\n\n        return new CoreLogger(\n            // eslint-disable-next-line no-console\n            CoreLogger.prepareLogFn((...data) => console.log(...data), className),\n            // eslint-disable-next-line no-console\n            CoreLogger.prepareLogFn((...data) => console.info(...data), className),\n            // eslint-disable-next-line no-console\n            CoreLogger.prepareLogFn((...data) => console.warn(...data), className),\n            // eslint-disable-next-line no-console\n            CoreLogger.prepareLogFn((...data) => console.debug(...data), className),\n            // eslint-disable-next-line no-console\n            CoreLogger.prepareLogFn((...data) => console.error(...data), className),\n        );\n    }\n\n    /**\n     * Prepare a logging function, concatenating the timestamp and class name to all messages.\n     *\n     * @param logFn Log function to use.\n     * @param className Name to use in the messages.\n     * @returns Prepared function.\n     */\n    private static prepareLogFn(logFn: LogFunction, className: string): LogFunction {\n        // Return our own function that will call the logging function with the treated message.\n        return (...args): void => {\n            const now = moment().format('l LTS');\n            args[0] = now + ' ' + className + ': ' + args[0]; // Prepend timestamp and className to the original message.\n            logFn.apply(null, args);\n        };\n    }\n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,MAAM,MAAM,iBAAiB;AAEpC,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,QAAQ,QAAQ,QAAQ;AACjC,SAASC,WAAW,QAAQ,qBAAqB;AAEjD;;;AAGA,MAAMC,gBAAgB,GAAGF,QAAQ,CAACG,IAAI,CAAC,MAAK;EACxC;EACAC,OAAO,CAACC,IAAI,CAAC,mCAAmC,CAAC;AACrD,CAAC,CAAC;AAOF;;;;;;;;;;;AAWA,OAAM,MAAOC,UAAU;EAQnB;EACAC,YAAoBC,GAAgB,EAAEC,IAAiB,EAAEJ,IAAiB,EAAEK,KAAkB,EAAEC,KAAkB;IAC9G,IAAI,CAACH,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACK,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;EAEA;;;;;;EAMA,OAAOC,WAAWA,CAACC,SAAiB;IAChC;IACA,IACI,CAACZ,WAAW,CAACa,qBAAqB,CAAC,gBAAgB,CAAC,KACnDf,aAAa,CAACgB,KAAK,CAACC,YAAY,IAAIjB,aAAa,CAACgB,KAAK,CAACE,SAAS,CAAC,EACrE;MACE,IAAIlB,aAAa,CAACgB,KAAK,CAACC,YAAY,EAAE;QAClCd,gBAAgB,EAAE;;MAGtB;MACA,MAAMgB,KAAK,GAAGA,CAAA,KAAK,CAAE,CAAC;MAEtB,OAAO,IAAIZ,UAAU,CAACY,KAAK,EAAEA,KAAK,EAAEA,KAAK,EAAEA,KAAK,EAAEA,KAAK,CAAC;;IAG5DL,SAAS,GAAGA,SAAS,IAAI,EAAE;IAE3B,OAAO,IAAIP,UAAU;IACjB;IACAA,UAAU,CAACa,YAAY,CAAC,CAAC,GAAGC,IAAI,KAAKhB,OAAO,CAACI,GAAG,CAAC,GAAGY,IAAI,CAAC,EAAEP,SAAS,CAAC;IACrE;IACAP,UAAU,CAACa,YAAY,CAAC,CAAC,GAAGC,IAAI,KAAKhB,OAAO,CAACK,IAAI,CAAC,GAAGW,IAAI,CAAC,EAAEP,SAAS,CAAC;IACtE;IACAP,UAAU,CAACa,YAAY,CAAC,CAAC,GAAGC,IAAI,KAAKhB,OAAO,CAACC,IAAI,CAAC,GAAGe,IAAI,CAAC,EAAEP,SAAS,CAAC;IACtE;IACAP,UAAU,CAACa,YAAY,CAAC,CAAC,GAAGC,IAAI,KAAKhB,OAAO,CAACM,KAAK,CAAC,GAAGU,IAAI,CAAC,EAAEP,SAAS,CAAC;IACvE;IACAP,UAAU,CAACa,YAAY,CAAC,CAAC,GAAGC,IAAI,KAAKhB,OAAO,CAACO,KAAK,CAAC,GAAGS,IAAI,CAAC,EAAEP,SAAS,CAAC,CAC1E;EACL;EAEA;;;;;;;EAOQ,OAAOM,YAAYA,CAACE,KAAkB,EAAER,SAAiB;IAC7D;IACA,OAAO,CAAC,GAAGS,IAAI,KAAU;MACrB,MAAMC,GAAG,GAAGzB,MAAM,EAAE,CAAC0B,MAAM,CAAC,OAAO,CAAC;MACpCF,IAAI,CAAC,CAAC,CAAC,GAAGC,GAAG,GAAG,GAAG,GAAGV,SAAS,GAAG,IAAI,GAAGS,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAClDD,KAAK,CAACI,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;IAC3B,CAAC;EACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}