{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreLoadingComponent } from '@components/loading/loading';\nimport { CoreSettingsHelper } from '@features/settings/services/settings-helper';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreColors } from '@singletons/colors';\nimport { CoreDirectivesRegistry } from '@singletons/directives-registry';\nimport { CoreDom } from '@singletons/dom';\nimport { CoreFormatTextDirective } from './format-text';\nimport * as i0 from \"@angular/core\";\nconst defaultMaxHeight = 80;\nconst minMaxHeight = 56;\n/**\n * Directive to make an element collapsible.\n *\n * Example usage:\n *\n * <div collapsible-item>\n */\nexport class CoreCollapsibleItemDirective {\n  constructor(el) {\n    /**\n     * Max height in pixels to render the content box. It should be 56 at least to make sense.\n     * Using this parameter will force display: block to calculate height better.\n     * If you want to avoid this use class=\"inline\" at the same time to use display: inline-block.\n     */\n    this.height = defaultMaxHeight;\n    this.toggleExpandEnabled = false;\n    this.expanded = false;\n    this.maxHeight = defaultMaxHeight;\n    this.expandedHeight = 0;\n    this.loadingHeight = false;\n    this.element = el.nativeElement;\n    this.element.addEventListener('click', event => this.elementClicked(event));\n    this.uniqueId = 'collapsible-item-' + CoreUtils.getUniqueId('CoreCollapsibleItemDirective');\n    this.element.id = this.uniqueId;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _this$page;\n      if (_this.height === null) {\n        return;\n      }\n      if (typeof _this.height === 'string') {\n        _this.maxHeight = _this.height === '' ? defaultMaxHeight : parseInt(_this.height, 10);\n      } else {\n        _this.maxHeight = _this.height;\n      }\n      _this.maxHeight = _this.maxHeight < minMaxHeight ? defaultMaxHeight : _this.maxHeight;\n      if (!_this.maxHeight) {\n        // Do not collapse.\n        return;\n      }\n      _this.element.classList.add('collapsible-item');\n      yield _this.waitLoadingsDone();\n      yield _this.calculateHeight();\n      (_this$page = _this.page) === null || _this$page === void 0 || _this$page.addEventListener('ionViewDidEnter', _this.pageDidEnterListener = () => {\n        _this.calculateHeight();\n      });\n      _this.resizeListener = CoreDom.onWindowResize(() => {\n        _this.calculateHeight();\n      }, 50);\n      _this.darkModeListener = CoreSettingsHelper.onDarkModeChange().subscribe(() => {\n        _this.setGradientColor();\n      });\n    })();\n  }\n  /**\n   * Wait until all <core-loading> children inside the page.\n   *\n   * @returns Promise resolved when loadings are done.\n   */\n  waitLoadingsDone() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.domPromise = CoreDom.waitToBeInDOM(_this2.element);\n      yield _this2.domPromise;\n      _this2.page = _this2.element.closest('.ion-page') || undefined;\n      if (!_this2.page) {\n        return;\n      }\n      yield CoreDirectivesRegistry.waitDirectivesReady(_this2.page, 'core-loading', CoreLoadingComponent);\n    })();\n  }\n  /**\n   * Wait until all <core-format-text> children inside the element are done rendering.\n   */\n  waitFormatTextsRendered() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreDirectivesRegistry.waitDirectivesReady(_this3.element, 'core-format-text', CoreFormatTextDirective);\n    })();\n  }\n  /**\n   * Calculate the height and check if we need to display show more or not.\n   */\n  calculateHeight() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.loadingHeight) {\n        // Already calculating, return.\n        return;\n      }\n      _this4.loadingHeight = true;\n      _this4.visiblePromise = CoreDom.waitToBeVisible(_this4.element);\n      yield _this4.visiblePromise;\n      // Remove max-height (if any) to calculate the real height.\n      _this4.element.classList.add('collapsible-loading-height');\n      yield _this4.waitFormatTextsRendered();\n      _this4.expandedHeight = _this4.element.getBoundingClientRect().height;\n      // Restore the max height now.\n      _this4.element.classList.remove('collapsible-loading-height');\n      // If cannot calculate height, shorten always.\n      const enable = !_this4.expandedHeight || _this4.expandedHeight >= _this4.maxHeight;\n      _this4.setExpandButtonEnabled(enable);\n      _this4.setGradientColor();\n      _this4.loadingHeight = false;\n    })();\n  }\n  /**\n   * Sets the gradient color based on the background.\n   */\n  setGradientColor() {\n    if (!this.toggleExpandEnabled) {\n      return;\n    }\n    let coloredElement = this.element;\n    let backgroundColor = [0, 0, 0, 0];\n    let background = '';\n    while (coloredElement && backgroundColor[3] === 0) {\n      background = getComputedStyle(coloredElement).backgroundColor;\n      backgroundColor = CoreColors.getColorRGBA(background);\n      coloredElement = coloredElement.parentElement;\n    }\n    if (backgroundColor[3] !== 0) {\n      delete backgroundColor[3];\n      const bgList = backgroundColor.join(',');\n      this.element.style.setProperty('--background-gradient-rgb', `${bgList}`);\n    }\n  }\n  /**\n   * Sets if expand button is enabled or not.\n   *\n   * @param enable Wether enable or disable.\n   */\n  setExpandButtonEnabled(enable) {\n    this.toggleExpandEnabled = enable;\n    this.element.classList.toggle('collapsible-enabled', enable);\n    if (!enable || this.element.querySelector('ion-button.collapsible-toggle')) {\n      this.setHeight(!enable || this.expanded ? undefined : this.maxHeight);\n      return;\n    }\n    // Add expand/collapse buttons\n    const toggleButton = document.createElement('ion-button');\n    toggleButton.classList.add('collapsible-toggle');\n    toggleButton.setAttribute('fill', 'clear');\n    toggleButton.setAttribute('aria-controls', this.uniqueId);\n    const toggleText = document.createElement('span');\n    toggleText.classList.add('collapsible-toggle-text');\n    toggleText.classList.add('sr-only');\n    toggleButton.appendChild(toggleText);\n    const expandArrow = document.createElement('span');\n    expandArrow.classList.add('collapsible-toggle-arrow');\n    toggleButton.appendChild(expandArrow);\n    this.element.append(toggleButton);\n    this.toggleExpand(this.expanded);\n  }\n  /**\n   * Set max height to element.\n   *\n   * @param height Max height if collapsed or undefined if expanded.\n   */\n  setHeight(height) {\n    if (height) {\n      this.element.style.setProperty('--collapsible-height', height + 'px');\n    } else if (this.expandedHeight) {\n      this.element.style.setProperty('--collapsible-height', this.expandedHeight + 'px');\n    } else {\n      this.element.style.removeProperty('--collapsible-height');\n    }\n  }\n  /**\n   * Expand or collapse text.\n   *\n   * @param expand Wether expand or collapse text. If undefined, will toggle.\n   */\n  toggleExpand(expand) {\n    if (expand === undefined) {\n      expand = !this.expanded;\n    }\n    this.expanded = expand;\n    // Reset scroll inside the element to show always the top part.\n    this.element.scrollTo(0, 0);\n    this.element.classList.toggle('collapsible-collapsed', !expand);\n    this.setHeight(!expand ? this.maxHeight : undefined);\n    const toggleButton = this.element.querySelector('ion-button.collapsible-toggle');\n    const toggleText = toggleButton === null || toggleButton === void 0 ? void 0 : toggleButton.querySelector('.collapsible-toggle-text');\n    if (!toggleButton || !toggleText) {\n      return;\n    }\n    toggleText.innerHTML = expand ? Translate.instant('core.showless') : Translate.instant('core.showmore');\n    toggleButton.setAttribute('aria-expanded', expand ? 'true' : 'false');\n  }\n  /**\n   * Listener to call when the element is clicked.\n   *\n   * @param e Click event.\n   */\n  elementClicked(e) {\n    if (e.defaultPrevented) {\n      // Ignore it if the event was prevented by some other listener.\n      return;\n    }\n    if (!this.toggleExpandEnabled) {\n      // Nothing to do on click, just stop.\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    this.toggleExpand();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$resizeListener, _this$darkModeListene, _this$domPromise, _this$visiblePromise;\n    (_this$resizeListener = this.resizeListener) === null || _this$resizeListener === void 0 || _this$resizeListener.off();\n    (_this$darkModeListene = this.darkModeListener) === null || _this$darkModeListene === void 0 || _this$darkModeListene.unsubscribe();\n    (_this$domPromise = this.domPromise) === null || _this$domPromise === void 0 || _this$domPromise.cancel();\n    (_this$visiblePromise = this.visiblePromise) === null || _this$visiblePromise === void 0 || _this$visiblePromise.cancel();\n    if (this.page && this.pageDidEnterListener) {\n      this.page.removeEventListener('ionViewDidEnter', this.pageDidEnterListener);\n    }\n  }\n}\n_class = CoreCollapsibleItemDirective;\n_class.ɵfac = function CoreCollapsibleItemDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"\", \"collapsible-item\", \"\"]],\n  inputs: {\n    height: [\"collapsible-item\", \"height\"]\n  }\n});","map":{"version":3,"names":["CoreLoadingComponent","CoreSettingsHelper","CoreUtils","Translate","CoreColors","CoreDirectivesRegistry","CoreDom","CoreFormatTextDirective","defaultMaxHeight","minMaxHeight","CoreCollapsibleItemDirective","constructor","el","height","toggleExpandEnabled","expanded","maxHeight","expandedHeight","loadingHeight","element","nativeElement","addEventListener","event","elementClicked","uniqueId","getUniqueId","id","ngOnInit","_this","_asyncToGenerator","_this$page","parseInt","classList","add","waitLoadingsDone","calculateHeight","page","pageDidEnterListener","resizeListener","onWindowResize","darkModeListener","onDarkModeChange","subscribe","setGradientColor","_this2","domPromise","waitToBeInDOM","closest","undefined","waitDirectivesReady","waitFormatTextsRendered","_this3","_this4","visiblePromise","waitToBeVisible","getBoundingClientRect","remove","enable","setExpandButtonEnabled","coloredElement","backgroundColor","background","getComputedStyle","getColorRGBA","parentElement","bgList","join","style","setProperty","toggle","querySelector","setHeight","toggleButton","document","createElement","setAttribute","toggleText","appendChild","expandArrow","append","toggleExpand","removeProperty","expand","scrollTo","innerHTML","instant","e","defaultPrevented","preventDefault","stopPropagation","ngOnDestroy","_this$resizeListener","_this$darkModeListene","_this$domPromise","_this$visiblePromise","off","unsubscribe","cancel","removeEventListener","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/directives/collapsible-item.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { CoreCancellablePromise } from '@classes/cancellable-promise';\nimport { CoreLoadingComponent } from '@components/loading/loading';\nimport { CoreSettingsHelper } from '@features/settings/services/settings-helper';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreColors } from '@singletons/colors';\nimport { CoreDirectivesRegistry } from '@singletons/directives-registry';\nimport { CoreDom } from '@singletons/dom';\nimport { CoreEventObserver } from '@singletons/events';\nimport { Subscription } from 'rxjs';\nimport { CoreFormatTextDirective } from './format-text';\n\nconst defaultMaxHeight = 80;\nconst minMaxHeight = 56;\n\n/**\n * Directive to make an element collapsible.\n *\n * Example usage:\n *\n * <div collapsible-item>\n */\n@Directive({\n    selector: '[collapsible-item]',\n})\nexport class CoreCollapsibleItemDirective implements OnInit, OnDestroy {\n\n    /**\n     * Max height in pixels to render the content box. It should be 56 at least to make sense.\n     * Using this parameter will force display: block to calculate height better.\n     * If you want to avoid this use class=\"inline\" at the same time to use display: inline-block.\n     */\n    @Input('collapsible-item') height: number | string = defaultMaxHeight;\n\n    protected element: HTMLElement;\n    protected toggleExpandEnabled = false;\n    protected expanded = false;\n    protected maxHeight = defaultMaxHeight;\n    protected expandedHeight = 0;\n    protected resizeListener?: CoreEventObserver;\n    protected darkModeListener?: Subscription;\n    protected domPromise?: CoreCancellablePromise<void>;\n    protected visiblePromise?: CoreCancellablePromise<void>;\n    protected uniqueId: string;\n    protected loadingHeight = false;\n    protected pageDidEnterListener?: EventListener;\n    protected page?: HTMLElement;\n\n    constructor(el: ElementRef<HTMLElement>) {\n        this.element = el.nativeElement;\n\n        this.element.addEventListener('click', (event) => this.elementClicked(event));\n        this.uniqueId = 'collapsible-item-' + CoreUtils.getUniqueId('CoreCollapsibleItemDirective');\n        this.element.id = this.uniqueId;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        if (this.height === null) {\n            return;\n        }\n\n        if (typeof this.height === 'string') {\n            this.maxHeight = this.height === ''\n                ? defaultMaxHeight\n                : parseInt(this.height, 10);\n        } else {\n            this.maxHeight = this.height;\n        }\n        this.maxHeight = this.maxHeight < minMaxHeight ? defaultMaxHeight : this.maxHeight;\n\n        if (!this.maxHeight) {\n            // Do not collapse.\n            return;\n        }\n\n        this.element.classList.add('collapsible-item');\n\n        await this.waitLoadingsDone();\n\n        await this.calculateHeight();\n\n        this.page?.addEventListener(\n            'ionViewDidEnter',\n            this.pageDidEnterListener = () => {\n                this.calculateHeight();\n            },\n        );\n\n        this.resizeListener = CoreDom.onWindowResize(() => {\n            this.calculateHeight();\n        }, 50);\n\n        this.darkModeListener = CoreSettingsHelper.onDarkModeChange().subscribe(() => {\n            this.setGradientColor();\n        });\n    }\n\n    /**\n     * Wait until all <core-loading> children inside the page.\n     *\n     * @returns Promise resolved when loadings are done.\n     */\n    protected async waitLoadingsDone(): Promise<void> {\n        this.domPromise = CoreDom.waitToBeInDOM(this.element);\n\n        await this.domPromise;\n\n        this.page = this.element.closest<HTMLElement>('.ion-page') || undefined;\n        if (!this.page) {\n            return;\n        }\n\n        await CoreDirectivesRegistry.waitDirectivesReady(this.page, 'core-loading', CoreLoadingComponent);\n    }\n\n    /**\n     * Wait until all <core-format-text> children inside the element are done rendering.\n     */\n    protected async waitFormatTextsRendered(): Promise<void> {\n        await CoreDirectivesRegistry.waitDirectivesReady(this.element, 'core-format-text', CoreFormatTextDirective);\n    }\n\n    /**\n     * Calculate the height and check if we need to display show more or not.\n     */\n    protected async calculateHeight(): Promise<void> {\n        if (this.loadingHeight) {\n            // Already calculating, return.\n            return;\n        }\n        this.loadingHeight = true;\n\n        this.visiblePromise = CoreDom.waitToBeVisible(this.element);\n        await this.visiblePromise;\n\n        // Remove max-height (if any) to calculate the real height.\n        this.element.classList.add('collapsible-loading-height');\n\n        await this.waitFormatTextsRendered();\n\n        this.expandedHeight = this.element.getBoundingClientRect().height;\n\n        // Restore the max height now.\n        this.element.classList.remove('collapsible-loading-height');\n\n        // If cannot calculate height, shorten always.\n        const enable = !this.expandedHeight || this.expandedHeight >= this.maxHeight;\n        this.setExpandButtonEnabled(enable);\n        this.setGradientColor();\n\n        this.loadingHeight = false;\n    }\n\n    /**\n     * Sets the gradient color based on the background.\n     */\n    protected setGradientColor(): void {\n        if (!this.toggleExpandEnabled) {\n            return;\n        }\n\n        let coloredElement: HTMLElement | null = this.element;\n        let backgroundColor = [0, 0, 0, 0];\n        let background = '';\n        while (coloredElement && backgroundColor[3] === 0) {\n            background = getComputedStyle(coloredElement).backgroundColor;\n            backgroundColor = CoreColors.getColorRGBA(background);\n            coloredElement = coloredElement.parentElement;\n        }\n\n        if (backgroundColor[3] !== 0) {\n            delete(backgroundColor[3]);\n            const bgList = backgroundColor.join(',');\n            this.element.style.setProperty('--background-gradient-rgb', `${bgList}`);\n        }\n    }\n\n    /**\n     * Sets if expand button is enabled or not.\n     *\n     * @param enable Wether enable or disable.\n     */\n    protected setExpandButtonEnabled(enable: boolean): void {\n        this.toggleExpandEnabled = enable;\n        this.element.classList.toggle('collapsible-enabled', enable);\n\n        if (!enable || this.element.querySelector('ion-button.collapsible-toggle')) {\n            this.setHeight(!enable || this.expanded ? undefined : this.maxHeight);\n\n            return;\n        }\n\n        // Add expand/collapse buttons\n        const toggleButton = document.createElement('ion-button');\n        toggleButton.classList.add('collapsible-toggle');\n        toggleButton.setAttribute('fill', 'clear');\n        toggleButton.setAttribute('aria-controls', this.uniqueId);\n\n        const toggleText = document.createElement('span');\n        toggleText.classList.add('collapsible-toggle-text');\n        toggleText.classList.add('sr-only');\n        toggleButton.appendChild(toggleText);\n\n        const expandArrow = document.createElement('span');\n        expandArrow.classList.add('collapsible-toggle-arrow');\n        toggleButton.appendChild(expandArrow);\n\n        this.element.append(toggleButton);\n\n        this.toggleExpand(this.expanded);\n    }\n\n    /**\n     * Set max height to element.\n     *\n     * @param height Max height if collapsed or undefined if expanded.\n     */\n    protected setHeight(height?: number): void {\n        if (height) {\n            this.element.style.setProperty('--collapsible-height', height + 'px');\n        } else if (this.expandedHeight) {\n            this.element.style.setProperty('--collapsible-height', this.expandedHeight + 'px');\n        } else {\n            this.element.style.removeProperty('--collapsible-height');\n\n        }\n    }\n\n    /**\n     * Expand or collapse text.\n     *\n     * @param expand Wether expand or collapse text. If undefined, will toggle.\n     */\n    protected toggleExpand(expand?: boolean): void {\n        if (expand === undefined) {\n            expand = !this.expanded;\n        }\n        this.expanded = expand;\n\n        // Reset scroll inside the element to show always the top part.\n        this.element.scrollTo(0, 0);\n        this.element.classList.toggle('collapsible-collapsed', !expand);\n        this.setHeight(!expand ? this.maxHeight: undefined);\n\n        const toggleButton = this.element.querySelector('ion-button.collapsible-toggle');\n        const toggleText = toggleButton?.querySelector('.collapsible-toggle-text');\n        if (!toggleButton || !toggleText) {\n            return;\n        }\n        toggleText.innerHTML = expand ? Translate.instant('core.showless') : Translate.instant('core.showmore');\n        toggleButton.setAttribute('aria-expanded', expand ? 'true' : 'false');\n    }\n\n    /**\n     * Listener to call when the element is clicked.\n     *\n     * @param e Click event.\n     */\n    elementClicked(e: MouseEvent): void {\n        if (e.defaultPrevented) {\n            // Ignore it if the event was prevented by some other listener.\n            return;\n        }\n\n        if (!this.toggleExpandEnabled) {\n            // Nothing to do on click, just stop.\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.toggleExpand();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.resizeListener?.off();\n        this.darkModeListener?.unsubscribe();\n        this.domPromise?.cancel();\n        this.visiblePromise?.cancel();\n\n        if (this.page && this.pageDidEnterListener) {\n            this.page.removeEventListener('ionViewDidEnter', this.pageDidEnterListener);\n        }\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}