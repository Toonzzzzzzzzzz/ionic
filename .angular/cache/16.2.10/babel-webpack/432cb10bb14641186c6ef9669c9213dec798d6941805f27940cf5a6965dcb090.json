{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreSite } from '@classes/sites/site';\nimport { makeSingleton } from '@singletons';\nimport { CoreError } from '@classes/errors/error';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaBadges:';\n/**\n * Service to handle badges.\n */\nexport class AddonBadgesProvider {\n  /**\n   * Returns whether or not the badge plugin is enabled for a certain site.\n   *\n   * This method is called quite often and thus should only perform a quick\n   * check, we should not be calling WS from here.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with true if enabled, false otherwise.\n   */\n  isPluginEnabled(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.canUseAdvancedFeature('enablebadges');\n    })();\n  }\n  /**\n   * Get the cache key for the get badges call.\n   *\n   * @param courseId ID of the course to get the badges from.\n   * @param userId ID of the user to get the badges from.\n   * @returns Cache key.\n   */\n  getBadgesCacheKey(courseId, userId) {\n    return ROOT_CACHE_KEY + 'badges:' + courseId + ':' + userId;\n  }\n  /**\n   * Get issued badges for a certain user in a course.\n   *\n   * @param courseId ID of the course to get the badges from.\n   * @param userId ID of the user to get the badges from.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise to be resolved when the badges are retrieved.\n   */\n  getUserBadges(courseId, userId, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const data = {\n        courseid: courseId,\n        userid: userId\n      };\n      const preSets = {\n        cacheKey: _this.getBadgesCacheKey(courseId, userId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      };\n      const response = yield site.read('core_badges_get_user_badges', data, preSets);\n      if (!response || !response.badges) {\n        throw new CoreError('Invalid badges response');\n      }\n      // In 3.7, competencies was renamed to alignment. Rename the property in 3.6 too.\n      response.badges.forEach(badge => {\n        badge.alignment = badge.alignment || badge.competencies;\n        // Check that the alignment is valid, they were broken in 3.7.\n        if (badge.alignment && badge.alignment[0] && badge.alignment[0].targetname === undefined) {\n          // If any badge lacks targetname it means they are affected by the Moodle bug, don't display them.\n          delete badge.alignment;\n        }\n      });\n      return response.badges;\n    })();\n  }\n  /**\n   * Invalidate get badges WS call.\n   *\n   * @param courseId Course ID.\n   * @param userId ID of the user to get the badges from.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when data is invalidated.\n   */\n  invalidateUserBadges(courseId, userId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this2.getBadgesCacheKey(courseId, userId));\n    })();\n  }\n}\n_class = AddonBadgesProvider;\n_class.ɵfac = function AddonBadgesProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonBadges = makeSingleton(AddonBadgesProvider);","map":{"version":3,"names":["CoreSites","CoreSite","makeSingleton","CoreError","ROOT_CACHE_KEY","AddonBadgesProvider","isPluginEnabled","siteId","_asyncToGenerator","site","getSite","canUseAdvancedFeature","getBadgesCacheKey","courseId","userId","getUserBadges","_this","data","courseid","userid","preSets","cacheKey","updateFrequency","FREQUENCY_RARELY","response","read","badges","forEach","badge","alignment","competencies","targetname","undefined","invalidateUserBadges","_this2","invalidateWsCacheForKey","factory","ɵfac","providedIn","AddonBadges"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/badges/services/badges.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { CoreSite } from '@classes/sites/site';\nimport { makeSingleton } from '@singletons';\nimport { CoreError } from '@classes/errors/error';\n\nconst ROOT_CACHE_KEY = 'mmaBadges:';\n\n/**\n * Service to handle badges.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonBadgesProvider {\n\n    /**\n     * Returns whether or not the badge plugin is enabled for a certain site.\n     *\n     * This method is called quite often and thus should only perform a quick\n     * check, we should not be calling WS from here.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with true if enabled, false otherwise.\n     */\n    async isPluginEnabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.canUseAdvancedFeature('enablebadges');\n    }\n\n    /**\n     * Get the cache key for the get badges call.\n     *\n     * @param courseId ID of the course to get the badges from.\n     * @param userId ID of the user to get the badges from.\n     * @returns Cache key.\n     */\n    protected getBadgesCacheKey(courseId: number, userId: number): string {\n        return ROOT_CACHE_KEY + 'badges:' + courseId + ':' + userId;\n    }\n\n    /**\n     * Get issued badges for a certain user in a course.\n     *\n     * @param courseId ID of the course to get the badges from.\n     * @param userId ID of the user to get the badges from.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise to be resolved when the badges are retrieved.\n     */\n    async getUserBadges(courseId: number, userId: number, siteId?: string): Promise<AddonBadgesUserBadge[]> {\n\n        const site = await CoreSites.getSite(siteId);\n        const data: AddonBadgesGetUserBadgesWSParams = {\n            courseid: courseId,\n            userid: userId,\n        };\n        const preSets = {\n            cacheKey: this.getBadgesCacheKey(courseId, userId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n        };\n\n        const response = await site.read<AddonBadgesGetUserBadgesWSResponse>('core_badges_get_user_badges', data, preSets);\n        if (!response || !response.badges) {\n            throw new CoreError('Invalid badges response');\n        }\n\n        // In 3.7, competencies was renamed to alignment. Rename the property in 3.6 too.\n        response.badges.forEach((badge) => {\n            badge.alignment = badge.alignment || badge.competencies;\n\n            // Check that the alignment is valid, they were broken in 3.7.\n            if (badge.alignment && badge.alignment[0] && badge.alignment[0].targetname === undefined) {\n                // If any badge lacks targetname it means they are affected by the Moodle bug, don't display them.\n                delete badge.alignment;\n            }\n        });\n\n        return response.badges;\n    }\n\n    /**\n     * Invalidate get badges WS call.\n     *\n     * @param courseId Course ID.\n     * @param userId ID of the user to get the badges from.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when data is invalidated.\n     */\n    async invalidateUserBadges(courseId: number, userId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getBadgesCacheKey(courseId, userId));\n    }\n\n}\n\nexport const AddonBadges = makeSingleton(AddonBadgesProvider);\n\n/**\n * Params of core_badges_get_user_badges WS.\n */\ntype AddonBadgesGetUserBadgesWSParams = {\n    userid?: number; // Badges only for this user id, empty for current user.\n    courseid?: number; // Filter badges by course id, empty all the courses.\n    page?: number; // The page of records to return.\n    perpage?: number; // The number of records to return per page.\n    search?: string; // A simple string to search for.\n    onlypublic?: boolean; // Whether to return only public badges.\n};\n\n/**\n * Data returned by core_badges_get_user_badges WS.\n */\ntype AddonBadgesGetUserBadgesWSResponse = {\n    badges: AddonBadgesUserBadge[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Result of WS core_badges_get_user_badges.\n */\nexport type AddonBadgesGetUserBadgesResult = {\n    badges: AddonBadgesUserBadge[]; // List of badges.\n    warnings?: CoreWSExternalWarning[]; // List of warnings.\n};\n\n/**\n * Badge data returned by WS core_badges_get_user_badges.\n */\nexport type AddonBadgesUserBadge = {\n    id?: number; // Badge id.\n    name: string; // Badge name.\n    description: string; // Badge description.\n    timecreated?: number; // Time created.\n    timemodified?: number; // Time modified.\n    usercreated?: number; // User created.\n    usermodified?: number; // User modified.\n    issuername: string; // Issuer name.\n    issuerurl: string; // Issuer URL.\n    issuercontact: string; // Issuer contact.\n    expiredate?: number; // Expire date.\n    expireperiod?: number; // Expire period.\n    type?: number; // Type.\n    courseid?: number; // Course id.\n    message?: string; // Message.\n    messagesubject?: string; // Message subject.\n    attachment?: number; // Attachment.\n    notification?: number; // @since 3.6. Whether to notify when badge is awarded.\n    nextcron?: number; // @since 3.6. Next cron.\n    status?: number; // Status.\n    issuedid?: number; // Issued id.\n    uniquehash: string; // Unique hash.\n    dateissued: number; // Date issued.\n    dateexpire: number; // Date expire.\n    visible?: number; // Visible.\n    email?: string; // @since 3.6. User email.\n    version?: string; // @since 3.6. Version.\n    language?: string; // @since 3.6. Language.\n    imageauthorname?: string; // @since 3.6. Name of the image author.\n    imageauthoremail?: string; // @since 3.6. Email of the image author.\n    imageauthorurl?: string; // @since 3.6. URL of the image author.\n    imagecaption?: string; // @since 3.6. Caption of the image.\n    badgeurl: string; // Badge URL.\n    endorsement?: { // @since 3.6.\n        id: number; // Endorsement id.\n        badgeid: number; // Badge id.\n        issuername: string; // Endorsement issuer name.\n        issuerurl: string; // Endorsement issuer URL.\n        issueremail: string; // Endorsement issuer email.\n        claimid: string; // Claim URL.\n        claimcomment: string; // Claim comment.\n        dateissued: number; // Date issued.\n    };\n    alignment?: { // @since 3.7. Calculated by the app for 3.6 sites. Badge alignments.\n        id?: number; // Alignment id.\n        badgeid?: number; // Badge id.\n        targetname?: string; // Target name.\n        targeturl?: string; // Target URL.\n        targetdescription?: string; // Target description.\n        targetframework?: string; // Target framework.\n        targetcode?: string; // Target code.\n    }[];\n    competencies?: { // @deprecatedonmoodle since 3.7. @since 3.6. In 3.7 it was renamed to alignment.\n        id?: number; // Alignment id.\n        badgeid?: number; // Badge id.\n        targetname?: string; // Target name.\n        targeturl?: string; // Target URL.\n        targetdescription?: string; // Target description.\n        targetframework?: string; // Target framework.\n        targetcode?: string; // Target code.\n    }[];\n    relatedbadges?: { // @since 3.6. Related badges.\n        id: number; // Badge id.\n        name: string; // Badge name.\n        version?: string; // Version.\n        language?: string; // Language.\n        type?: number; // Type.\n    }[];\n};\n"],"mappings":";;AAeA,SAASA,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,SAAS,QAAQ,uBAAuB;;AAEjD,MAAMC,cAAc,GAAG,YAAY;AAEnC;;;AAIA,OAAM,MAAOC,mBAAmB;EAE5B;;;;;;;;;EASMC,eAAeA,CAACC,MAAe;IAAA,OAAAC,iBAAA;MACjC,MAAMC,IAAI,SAAST,SAAS,CAACU,OAAO,CAACH,MAAM,CAAC;MAE5C,OAAOE,IAAI,CAACE,qBAAqB,CAAC,cAAc,CAAC;IAAC;EACtD;EAEA;;;;;;;EAOUC,iBAAiBA,CAACC,QAAgB,EAAEC,MAAc;IACxD,OAAOV,cAAc,GAAG,SAAS,GAAGS,QAAQ,GAAG,GAAG,GAAGC,MAAM;EAC/D;EAEA;;;;;;;;EAQMC,aAAaA,CAACF,QAAgB,EAAEC,MAAc,EAAEP,MAAe;IAAA,IAAAS,KAAA;IAAA,OAAAR,iBAAA;MAEjE,MAAMC,IAAI,SAAST,SAAS,CAACU,OAAO,CAACH,MAAM,CAAC;MAC5C,MAAMU,IAAI,GAAqC;QAC3CC,QAAQ,EAAEL,QAAQ;QAClBM,MAAM,EAAEL;OACX;MACD,MAAMM,OAAO,GAAG;QACZC,QAAQ,EAAEL,KAAI,CAACJ,iBAAiB,CAACC,QAAQ,EAAEC,MAAM,CAAC;QAClDQ,eAAe,EAAErB,QAAQ,CAACsB;OAC7B;MAED,MAAMC,QAAQ,SAASf,IAAI,CAACgB,IAAI,CAAqC,6BAA6B,EAAER,IAAI,EAAEG,OAAO,CAAC;MAClH,IAAI,CAACI,QAAQ,IAAI,CAACA,QAAQ,CAACE,MAAM,EAAE;QAC/B,MAAM,IAAIvB,SAAS,CAAC,yBAAyB,CAAC;;MAGlD;MACAqB,QAAQ,CAACE,MAAM,CAACC,OAAO,CAAEC,KAAK,IAAI;QAC9BA,KAAK,CAACC,SAAS,GAAGD,KAAK,CAACC,SAAS,IAAID,KAAK,CAACE,YAAY;QAEvD;QACA,IAAIF,KAAK,CAACC,SAAS,IAAID,KAAK,CAACC,SAAS,CAAC,CAAC,CAAC,IAAID,KAAK,CAACC,SAAS,CAAC,CAAC,CAAC,CAACE,UAAU,KAAKC,SAAS,EAAE;UACtF;UACA,OAAOJ,KAAK,CAACC,SAAS;;MAE9B,CAAC,CAAC;MAEF,OAAOL,QAAQ,CAACE,MAAM;IAAC;EAC3B;EAEA;;;;;;;;EAQMO,oBAAoBA,CAACpB,QAAgB,EAAEC,MAAc,EAAEP,MAAe;IAAA,IAAA2B,MAAA;IAAA,OAAA1B,iBAAA;MACxE,MAAMC,IAAI,SAAST,SAAS,CAACU,OAAO,CAACH,MAAM,CAAC;MAE5C,MAAME,IAAI,CAAC0B,uBAAuB,CAACD,MAAI,CAACtB,iBAAiB,CAACC,QAAQ,EAAEC,MAAM,CAAC,CAAC;IAAC;EACjF;;SA/EST,mBAAmB;;mBAAnBA,MAAmB;AAAA;;SAAnBA,MAAmB;EAAA+B,OAAA,EAAnB/B,MAAmB,CAAAgC,IAAA;EAAAC,UAAA,EADN;AAAM;AAoFhC,OAAO,MAAMC,WAAW,GAAGrC,aAAa,CAACG,mBAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}