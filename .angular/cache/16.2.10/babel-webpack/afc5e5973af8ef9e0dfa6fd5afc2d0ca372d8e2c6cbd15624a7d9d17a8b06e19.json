{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to treat links to page.\n */\nexport class AddonModPagePluginFileHandlerService {\n  constructor() {\n    this.name = 'AddonModPagePluginFileHandler';\n    this.component = 'mod_page';\n  }\n  /**\n   * Return the RegExp to match the revision on pluginfile URLs.\n   *\n   * @param args Arguments of the pluginfile URL defining component and filearea at least.\n   * @returns RegExp to match the revision on pluginfile URLs.\n   */\n  getComponentRevisionRegExp(args) {\n    // Check filearea.\n    if (args[2] == 'content') {\n      // Component + Filearea + Revision\n      return new RegExp('/mod_page/content/([0-9]+)/');\n    }\n  }\n  /**\n   * Should return the string to remove the revision on pluginfile url.\n   *\n   * @returns String to remove the revision on pluginfile url.\n   */\n  getComponentRevisionReplace() {\n    // Component + Filearea + Revision\n    return '/mod_page/content/0/';\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns Whether or not the handler is enabled on a site level.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n}\n_class = AddonModPagePluginFileHandlerService;\n_class.ɵfac = function AddonModPagePluginFileHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModPagePluginFileHandler = makeSingleton(AddonModPagePluginFileHandlerService);","map":{"version":3,"names":["makeSingleton","AddonModPagePluginFileHandlerService","constructor","name","component","getComponentRevisionRegExp","args","RegExp","getComponentRevisionReplace","isEnabled","_asyncToGenerator","factory","ɵfac","providedIn","AddonModPagePluginFileHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/page/services/handlers/pluginfile.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CorePluginFileHandler } from '@services/plugin-file-delegate';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Handler to treat links to page.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModPagePluginFileHandlerService implements CorePluginFileHandler {\n\n    name = 'AddonModPagePluginFileHandler';\n    component = 'mod_page';\n\n    /**\n     * Return the RegExp to match the revision on pluginfile URLs.\n     *\n     * @param args Arguments of the pluginfile URL defining component and filearea at least.\n     * @returns RegExp to match the revision on pluginfile URLs.\n     */\n    getComponentRevisionRegExp(args: string[]): RegExp | undefined {\n        // Check filearea.\n        if (args[2] == 'content') {\n            // Component + Filearea + Revision\n            return new RegExp('/mod_page/content/([0-9]+)/');\n        }\n    }\n\n    /**\n     * Should return the string to remove the revision on pluginfile url.\n     *\n     * @returns String to remove the revision on pluginfile url.\n     */\n    getComponentRevisionReplace(): string {\n        // Component + Filearea + Revision\n        return '/mod_page/content/0/';\n    }\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns Whether or not the handler is enabled on a site level.\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n}\n\nexport const AddonModPagePluginFileHandler = makeSingleton(AddonModPagePluginFileHandlerService);\n"],"mappings":";;AAgBA,SAASA,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,oCAAoC;EADjDC,YAAA;IAGI,KAAAC,IAAI,GAAG,+BAA+B;IACtC,KAAAC,SAAS,GAAG,UAAU;;EAEtB;;;;;;EAMAC,0BAA0BA,CAACC,IAAc;IACrC;IACA,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;MACtB;MACA,OAAO,IAAIC,MAAM,CAAC,6BAA6B,CAAC;;EAExD;EAEA;;;;;EAKAC,2BAA2BA,CAAA;IACvB;IACA,OAAO,sBAAsB;EACjC;EAEA;;;;;EAKMC,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB;;SApCST,oCAAoC;;mBAApCA,MAAoC;AAAA;;SAApCA,MAAoC;EAAAU,OAAA,EAApCV,MAAoC,CAAAW,IAAA;EAAAC,UAAA,EADvB;AAAM;AAyChC,OAAO,MAAMC,6BAA6B,GAAGd,aAAa,CAACC,oCAAoC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}