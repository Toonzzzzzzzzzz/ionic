{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreConfig } from '@services/config';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreLogger } from '@singletons/logger';\nimport { makeSingleton } from '@singletons';\nimport { CoreH5P } from '@features/h5p/services/h5p';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreSites } from './sites';\nimport { CoreUtils } from './utils/utils';\nimport { CoreApp } from './app';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreFile } from './file';\nimport { CorePlatform } from './platform';\nimport * as i0 from \"@angular/core\";\n/**\n * Factory to handle app updates. This factory shouldn't be used outside of core.\n *\n * This service handles processes that need to be run when updating the app, like migrate Ionic 1 database data to Ionic 3.\n */\nexport class CoreUpdateManagerProvider {\n  constructor() {\n    this.logger = CoreLogger.getInstance('CoreUpdateManagerProvider');\n    this.doneDeferred = new CorePromisedValue();\n  }\n  /**\n   * Returns a promise resolved when the load function is done.\n   *\n   * @returns Promise resolved when the load function is done.\n   */\n  get donePromise() {\n    return this.doneDeferred;\n  }\n  /**\n   * Check if the app has been updated and performs the needed processes.\n   * This function shouldn't be used outside of core.\n   *\n   * @returns Promise resolved when the update process finishes.\n   */\n  initialize() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      const versionCode = CoreConstants.CONFIG.versioncode;\n      const [versionApplied, previousAppFolder, currentAppFolder] = yield Promise.all([CoreConfig.get(CoreUpdateManagerProvider.VERSION_APPLIED, 0), CoreConfig.get(CoreUpdateManagerProvider.PREVIOUS_APP_FOLDER, ''), CorePlatform.isMobile() ? CoreUtils.ignoreErrors(CoreFile.getBasePath(), '') : '']);\n      if (versionCode > versionApplied) {\n        promises.push(_this.checkCurrentSiteAllowed());\n      }\n      if (versionCode >= 3950 && versionApplied < 3950 && versionApplied > 0 || currentAppFolder && currentAppFolder !== previousAppFolder) {\n        // Delete content indexes if the app folder has changed.\n        // This happens in iOS every time the app is updated, even if the version hasn't changed.\n        promises.push(CoreH5P.h5pPlayer.deleteAllContentIndexes());\n      }\n      if (versionCode >= 41000 && versionApplied < 41000 && versionApplied > 0) {\n        promises.push(_this.upgradeFontSizeNames());\n      }\n      if (versionCode >= 43000 && versionApplied < 43000 && versionApplied > 0) {\n        promises.push(CoreSites.moveTokensToSecureStorage());\n      }\n      try {\n        yield Promise.all(promises);\n        yield Promise.all([CoreConfig.set(CoreUpdateManagerProvider.VERSION_APPLIED, versionCode), currentAppFolder ? CoreConfig.set(CoreUpdateManagerProvider.PREVIOUS_APP_FOLDER, currentAppFolder) : undefined]);\n      } catch (error) {\n        _this.logger.error(`Error applying update from ${versionApplied} to ${versionCode}`, error);\n      } finally {\n        _this.doneDeferred.resolve();\n      }\n    })();\n  }\n  /**\n   * If there is a current site, check if it's still supported in the new app.\n   *\n   * @returns Promise resolved when done.\n   */\n  checkCurrentSiteAllowed() {\n    return _asyncToGenerator(function* () {\n      const sites = yield CoreLoginHelper.getAvailableSites();\n      if (!sites.length) {\n        return;\n      }\n      const currentSiteId = yield CoreUtils.ignoreErrors(CoreSites.getStoredCurrentSiteId());\n      if (!currentSiteId) {\n        return;\n      }\n      const site = yield CoreUtils.ignoreErrors(CoreSites.getSite(currentSiteId));\n      if (!site) {\n        return;\n      }\n      const isUrlAllowed = yield CoreLoginHelper.isSiteUrlAllowed(site.getURL(), false);\n      if (isUrlAllowed) {\n        return;\n      }\n      // Site no longer supported, remove it as current site.\n      yield CoreSites.removeStoredCurrentSite();\n      // Tell the app to open add site so the user can add the new site.\n      CoreApp.storeRedirect(CoreConstants.NO_SITE_ID, {\n        redirectPath: '/login/sites',\n        redirectOptions: {\n          params: {\n            openAddSite: true\n          }\n        }\n      });\n    })();\n  }\n  upgradeFontSizeNames() {\n    return _asyncToGenerator(function* () {\n      const storedFontSizeName = yield CoreConfig.get(CoreConstants.SETTINGS_ZOOM_LEVEL, \"none\" /* CoreZoomLevel.NONE */);\n      switch (storedFontSizeName) {\n        case 'low':\n          yield CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, \"none\" /* CoreZoomLevel.NONE */);\n          break;\n        case 'normal':\n          yield CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, \"medium\" /* CoreZoomLevel.MEDIUM */);\n          break;\n      }\n    })();\n  }\n}\n_class = CoreUpdateManagerProvider;\n_class.VERSION_APPLIED = 'version_applied';\n_class.PREVIOUS_APP_FOLDER = 'previous_app_folder';\n_class.ɵfac = function CoreUpdateManagerProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreUpdateManager = makeSingleton(CoreUpdateManagerProvider);","map":{"version":3,"names":["CoreConfig","CoreConstants","CoreLogger","makeSingleton","CoreH5P","CoreLoginHelper","CoreSites","CoreUtils","CoreApp","CorePromisedValue","CoreFile","CorePlatform","CoreUpdateManagerProvider","constructor","logger","getInstance","doneDeferred","donePromise","initialize","_this","_asyncToGenerator","promises","versionCode","CONFIG","versioncode","versionApplied","previousAppFolder","currentAppFolder","Promise","all","get","VERSION_APPLIED","PREVIOUS_APP_FOLDER","isMobile","ignoreErrors","getBasePath","push","checkCurrentSiteAllowed","h5pPlayer","deleteAllContentIndexes","upgradeFontSizeNames","moveTokensToSecureStorage","set","undefined","error","resolve","sites","getAvailableSites","length","currentSiteId","getStoredCurrentSiteId","site","getSite","isUrlAllowed","isSiteUrlAllowed","getURL","removeStoredCurrentSite","storeRedirect","NO_SITE_ID","redirectPath","redirectOptions","params","openAddSite","storedFontSizeName","SETTINGS_ZOOM_LEVEL","_class","factory","ɵfac","providedIn","CoreUpdateManager"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/update-manager.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreConfig } from '@services/config';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreLogger } from '@singletons/logger';\nimport { makeSingleton } from '@singletons';\nimport { CoreH5P } from '@features/h5p/services/h5p';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreSites } from './sites';\nimport { CoreUtils } from './utils/utils';\nimport { CoreApp } from './app';\nimport { CoreZoomLevel } from '@features/settings/services/settings-helper';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreFile } from './file';\nimport { CorePlatform } from './platform';\n\n/**\n * Factory to handle app updates. This factory shouldn't be used outside of core.\n *\n * This service handles processes that need to be run when updating the app, like migrate Ionic 1 database data to Ionic 3.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreUpdateManagerProvider {\n\n    protected static readonly VERSION_APPLIED = 'version_applied';\n    protected static readonly PREVIOUS_APP_FOLDER = 'previous_app_folder';\n\n    protected logger: CoreLogger;\n    protected doneDeferred: CorePromisedValue<void>;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreUpdateManagerProvider');\n        this.doneDeferred = new CorePromisedValue();\n    }\n\n    /**\n     * Returns a promise resolved when the load function is done.\n     *\n     * @returns Promise resolved when the load function is done.\n     */\n    get donePromise(): Promise<void> {\n        return this.doneDeferred;\n    }\n\n    /**\n     * Check if the app has been updated and performs the needed processes.\n     * This function shouldn't be used outside of core.\n     *\n     * @returns Promise resolved when the update process finishes.\n     */\n    async initialize(): Promise<void> {\n        const promises: Promise<unknown>[] = [];\n        const versionCode = CoreConstants.CONFIG.versioncode;\n\n        const [versionApplied, previousAppFolder, currentAppFolder] = await Promise.all([\n            CoreConfig.get<number>(CoreUpdateManagerProvider.VERSION_APPLIED, 0),\n            CoreConfig.get<string>(CoreUpdateManagerProvider.PREVIOUS_APP_FOLDER, ''),\n            CorePlatform.isMobile() ? CoreUtils.ignoreErrors(CoreFile.getBasePath(), '') : '',\n        ]);\n\n        if (versionCode > versionApplied) {\n            promises.push(this.checkCurrentSiteAllowed());\n        }\n\n        if (\n            (versionCode >= 3950 && versionApplied < 3950 && versionApplied > 0) ||\n            (currentAppFolder && currentAppFolder !== previousAppFolder)\n        ) {\n            // Delete content indexes if the app folder has changed.\n            // This happens in iOS every time the app is updated, even if the version hasn't changed.\n            promises.push(CoreH5P.h5pPlayer.deleteAllContentIndexes());\n        }\n\n        if (versionCode >= 41000 && versionApplied < 41000 && versionApplied > 0) {\n            promises.push(this.upgradeFontSizeNames());\n        }\n\n        if (versionCode >= 43000 && versionApplied < 43000 && versionApplied > 0) {\n            promises.push(CoreSites.moveTokensToSecureStorage());\n        }\n\n        try {\n            await Promise.all(promises);\n\n            await Promise.all([\n                CoreConfig.set(CoreUpdateManagerProvider.VERSION_APPLIED, versionCode),\n                currentAppFolder ? CoreConfig.set(CoreUpdateManagerProvider.PREVIOUS_APP_FOLDER, currentAppFolder) : undefined,\n            ]);\n        } catch (error) {\n            this.logger.error(`Error applying update from ${versionApplied} to ${versionCode}`, error);\n        } finally {\n            this.doneDeferred.resolve();\n        }\n    }\n\n    /**\n     * If there is a current site, check if it's still supported in the new app.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async checkCurrentSiteAllowed(): Promise<void> {\n        const sites = await CoreLoginHelper.getAvailableSites();\n\n        if (!sites.length) {\n            return;\n        }\n\n        const currentSiteId = await CoreUtils.ignoreErrors(CoreSites.getStoredCurrentSiteId());\n        if (!currentSiteId) {\n            return;\n        }\n\n        const site = await CoreUtils.ignoreErrors(CoreSites.getSite(currentSiteId));\n        if (!site) {\n            return;\n        }\n\n        const isUrlAllowed = await CoreLoginHelper.isSiteUrlAllowed(site.getURL(), false);\n        if (isUrlAllowed) {\n            return;\n        }\n\n        // Site no longer supported, remove it as current site.\n        await CoreSites.removeStoredCurrentSite();\n\n        // Tell the app to open add site so the user can add the new site.\n        CoreApp.storeRedirect(CoreConstants.NO_SITE_ID, {\n            redirectPath: '/login/sites',\n            redirectOptions: {\n                params: {\n                    openAddSite: true,\n                },\n            },\n        });\n    }\n\n    protected async upgradeFontSizeNames(): Promise<void> {\n        const storedFontSizeName = await CoreConfig.get<string>(CoreConstants.SETTINGS_ZOOM_LEVEL, CoreZoomLevel.NONE);\n        switch (storedFontSizeName) {\n            case 'low':\n                await CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, CoreZoomLevel.NONE);\n                break;\n\n            case 'normal':\n                await CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, CoreZoomLevel.MEDIUM);\n                break;\n        }\n    }\n\n}\n\nexport const CoreUpdateManager = makeSingleton(CoreUpdateManagerProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}