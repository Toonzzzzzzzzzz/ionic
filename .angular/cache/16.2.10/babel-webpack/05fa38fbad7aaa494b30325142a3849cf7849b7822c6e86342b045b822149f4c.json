{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreLocalNotifications } from '@services/local-notifications';\nimport { CoreSites } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { makeSingleton, Translate } from '@singletons';\nimport { REMINDERS_TABLE } from './database/reminders';\nimport { CorePlatform } from '@services/platform';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreConfig } from '@services/config';\nimport { CoreEvents } from '@singletons/events';\nimport * as i0 from \"@angular/core\";\n/**\n * Units to set a reminder.\n */\nexport var CoreRemindersUnits;\n(function (CoreRemindersUnits) {\n  CoreRemindersUnits[CoreRemindersUnits[\"MINUTE\"] = CoreConstants.SECONDS_MINUTE] = \"MINUTE\";\n  CoreRemindersUnits[CoreRemindersUnits[\"HOUR\"] = CoreConstants.SECONDS_HOUR] = \"HOUR\";\n  CoreRemindersUnits[CoreRemindersUnits[\"DAY\"] = CoreConstants.SECONDS_DAY] = \"DAY\";\n  CoreRemindersUnits[CoreRemindersUnits[\"WEEK\"] = CoreConstants.SECONDS_WEEK] = \"WEEK\";\n})(CoreRemindersUnits || (CoreRemindersUnits = {}));\nconst REMINDER_UNITS_LABELS = {\n  single: {\n    [CoreRemindersUnits.MINUTE]: 'core.minute',\n    [CoreRemindersUnits.HOUR]: 'core.hour',\n    [CoreRemindersUnits.DAY]: 'core.day',\n    [CoreRemindersUnits.WEEK]: 'core.week'\n  },\n  multi: {\n    [CoreRemindersUnits.MINUTE]: 'core.minutes',\n    [CoreRemindersUnits.HOUR]: 'core.hours',\n    [CoreRemindersUnits.DAY]: 'core.days',\n    [CoreRemindersUnits.WEEK]: 'core.weeks'\n  }\n};\n/**\n * Service to handle reminders.\n */\nexport class CoreRemindersService {\n  /**\n   * Initialize the service.\n   *\n   * @returns Promise resolved when done.\n   */\n  initialize() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.isEnabled()) {\n        return;\n      }\n      _this.scheduleAllNotifications();\n      CoreEvents.on(CoreRemindersService.DEFAULT_NOTIFICATION_TIME_CHANGED, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (data) {\n          const site = yield CoreSites.getSite(data.siteId);\n          const siteId = site.getId();\n          // Get all the events that have a default reminder.\n          const reminders = yield _this.getRemindersWithDefaultTime(siteId);\n          // Reschedule all the default reminders.\n          reminders.forEach(reminder => _this.scheduleNotification(reminder, siteId));\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Returns if Reminders are enabled.\n   *\n   * @returns True if reminders are enabled and available, false otherwise.\n   */\n  isEnabled() {\n    return true;\n  }\n  /**\n   * Save reminder to Database.\n   *\n   * @param reminder Reminder to set.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Resolved when done. Rejected on failure.\n   */\n  addReminder(reminder, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const reminderId = yield site.getDb().insertRecord(REMINDERS_TABLE, reminder);\n      const reminderRecord = Object.assign(reminder, {\n        id: reminderId\n      });\n      yield _this2.scheduleNotification(reminderRecord, site.getId());\n    })();\n  }\n  /**\n   * Update a reminder from local Db.\n   *\n   * @param reminder Fields to update.\n   * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n   * @returns Promise resolved when the reminder data is updated.\n   */\n  updateReminder(reminder, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.getDb().updateRecords(REMINDERS_TABLE, reminder, {\n        id: reminder.id\n      });\n      // Reschedule.\n      yield _this3.scheduleNotification(reminder, siteId);\n    })();\n  }\n  /**\n   * Update all reminders of a component and instance from local Db.\n   *\n   * @param newFields Fields to update.\n   * @param selector Reminder selector.\n   * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n   * @returns Promise resolved when the reminder data is updated.\n   */\n  updateReminders(newFields, selector, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const reminders = yield _this4.getReminders(selector, site.getId());\n      yield Promise.all(reminders.map(reminder => {\n        reminder = Object.assign(reminder, newFields);\n        return _this4.updateReminder(reminder, site.getId());\n      }));\n    })();\n  }\n  /**\n   * Get all reminders from local Db.\n   *\n   * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n   * @returns Promise resolved when the reminder data is retrieved.\n   */\n  getAllReminders(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(REMINDERS_TABLE, undefined, 'time ASC');\n    })();\n  }\n  /**\n   * Get all reminders of a component and instance from local Db.\n   *\n   * @param selector Reminder selector.\n   * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n   * @returns Promise resolved when the reminder data is retrieved.\n   */\n  getReminders(selector, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(REMINDERS_TABLE, selector, 'time ASC');\n    })();\n  }\n  /**\n   * Get all reminders of a component with default time.\n   *\n   * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n   * @returns Promise resolved when the reminder data is retrieved.\n   */\n  getRemindersWithDefaultTime(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(REMINDERS_TABLE, {\n        timebefore: CoreRemindersService.DEFAULT_REMINDER_TIMEBEFORE\n      }, 'time ASC');\n    })();\n  }\n  /**\n   * Remove a reminder and cancel the notification.\n   *\n   * @param id Reminder ID.\n   * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n   * @returns Promise resolved when the notification is updated.\n   */\n  removeReminder(id, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const reminder = yield site.getDb().getRecord(REMINDERS_TABLE, {\n        id\n      });\n      if (_this5.isEnabled()) {\n        _this5.cancelReminder(id, reminder.component, site.getId());\n      }\n      yield site.getDb().deleteRecords(REMINDERS_TABLE, {\n        id\n      });\n    })();\n  }\n  /**\n   * Remove all reminders of the same element.\n   *\n   * @param selector Reminder selector.\n   * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n   * @returns Promise resolved when the notification is updated.\n   */\n  removeReminders(selector, siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      siteId = site.getId();\n      if (_this6.isEnabled()) {\n        const reminders = yield _this6.getReminders(selector, siteId);\n        reminders.forEach(reminder => {\n          _this6.cancelReminder(reminder.id, reminder.component, siteId);\n        });\n      }\n      yield site.getDb().deleteRecords(REMINDERS_TABLE, selector);\n    })();\n  }\n  /**\n   * Cancel a notification for a reminder.\n   *\n   * @param reminderId Reminder Id to cancel.\n   * @param component Reminder component.\n   * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n   * @returns Promise resolved when done.\n   */\n  cancelReminder(reminderId, component, siteId) {\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      return CoreLocalNotifications.cancel(reminderId, component, siteId);\n    })();\n  }\n  /**\n   * Schedules a notification. If local notification plugin is not enabled, resolve the promise.\n   *\n   * @param reminder Reminder to schedule.\n   * @param siteId Site ID the reminder belongs to. If not defined, use current site.\n   * @returns Promise resolved when the notification is scheduled.\n   */\n  scheduleNotification(reminder, siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this7.isEnabled()) {\n        return;\n      }\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const timebefore = reminder.timebefore === CoreRemindersService.DEFAULT_REMINDER_TIMEBEFORE ? yield _this7.getDefaultNotificationTime(siteId) : reminder.timebefore;\n      if (timebefore === CoreRemindersService.DISABLED) {\n        // Notification disabled. Cancel.\n        return _this7.cancelReminder(reminder.id, reminder.component, siteId);\n      }\n      const notificationTime = (reminder.time - timebefore) * 1000;\n      if (notificationTime <= Date.now()) {\n        // @TODO Add a threshold.\n        // This reminder is over, don't schedule. Cancel if it was scheduled.\n        return _this7.cancelReminder(reminder.id, reminder.component, siteId);\n      }\n      const notificationData = {\n        reminderId: reminder.id,\n        instanceId: reminder.instanceId,\n        siteId: siteId\n      };\n      const notification = {\n        id: reminder.id,\n        title: reminder.title,\n        text: CoreTimeUtils.userDate(reminder.time * 1000, 'core.strftimedaydatetime', true),\n        icon: 'file://assets/img/icons/calendar.png',\n        trigger: {\n          at: new Date(notificationTime)\n        },\n        data: notificationData\n      };\n      return CoreLocalNotifications.schedule(notification, reminder.component, siteId);\n    })();\n  }\n  /**\n   * Get the all saved reminders and schedule the notification.\n   * If local notification plugin is not enabled, resolve the promise.\n   *\n   * @returns Promise resolved when all the notifications have been scheduled.\n   */\n  scheduleAllNotifications() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      yield CorePlatform.ready();\n      if (CoreLocalNotifications.isPluginAvailable()) {\n        // Notifications are already scheduled.\n        return;\n      }\n      const siteIds = yield CoreSites.getSitesIds();\n      yield Promise.all(siteIds.map(siteId => /*#__PURE__*/_asyncToGenerator(function* () {\n        const reminders = yield _this8.getAllReminders(siteId);\n        reminders.forEach(reminder => {\n          _this8.scheduleNotification(reminder, siteId);\n        });\n      })));\n    })();\n  }\n  /**\n   * Given a value and a unit, return the translated label.\n   *\n   * @param value Value.\n   * @param unit Unit.\n   * @param addDefaultLabel Whether to add the \"Default\" text.\n   * @returns Translated label.\n   */\n  getUnitValueLabel(value, unit, addDefaultLabel = false) {\n    if (value === CoreRemindersService.DISABLED) {\n      return Translate.instant('core.settings.disabled');\n    }\n    if (value === 0) {\n      return Translate.instant('core.reminders.atthetime');\n    }\n    const unitsLabel = value === 1 ? REMINDER_UNITS_LABELS.single[unit] : REMINDER_UNITS_LABELS.multi[unit];\n    const label = Translate.instant('core.reminders.timebefore', {\n      units: Translate.instant(unitsLabel),\n      value: value\n    });\n    if (addDefaultLabel) {\n      return Translate.instant('core.defaultvalue', {\n        $a: label\n      });\n    }\n    return label;\n  }\n  /**\n   * Given a number of seconds, convert it to a unit&value format compatible with reminders.\n   *\n   * @param seconds Number of seconds.\n   * @returns Value and unit.\n   */\n  static convertSecondsToValueAndUnit(seconds) {\n    if (seconds === undefined || seconds < 0) {\n      return {\n        value: CoreRemindersService.DISABLED,\n        unit: CoreRemindersUnits.MINUTE\n      };\n    } else if (seconds === 0) {\n      return {\n        value: 0,\n        unit: CoreRemindersUnits.MINUTE\n      };\n    } else if (seconds % CoreRemindersUnits.WEEK === 0) {\n      return {\n        value: seconds / CoreRemindersUnits.WEEK,\n        unit: CoreRemindersUnits.WEEK\n      };\n    } else if (seconds % CoreRemindersUnits.DAY === 0) {\n      return {\n        value: seconds / CoreRemindersUnits.DAY,\n        unit: CoreRemindersUnits.DAY\n      };\n    } else if (seconds % CoreRemindersUnits.HOUR === 0) {\n      return {\n        value: seconds / CoreRemindersUnits.HOUR,\n        unit: CoreRemindersUnits.HOUR\n      };\n    } else {\n      return {\n        value: seconds / CoreRemindersUnits.MINUTE,\n        unit: CoreRemindersUnits.MINUTE\n      };\n    }\n  }\n  /**\n   * Get the configured default notification time.\n   *\n   * @param siteId ID of the site. If not defined, use current site.\n   * @returns Promise resolved with the default time (in seconds).\n   */\n  getDefaultNotificationTime(siteId) {\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const key = CoreRemindersService.DEFAULT_NOTIFICATION_TIME_SETTING + '#' + siteId;\n      return CoreConfig.get(key, CoreConstants.CONFIG.calendarreminderdefaultvalue || 3600);\n    })();\n  }\n  /**\n   * Set the default notification time.\n   *\n   * @param time New default time.\n   * @param siteId ID of the site. If not defined, use current site.\n   * @returns Promise resolved when stored.\n   */\n  setDefaultNotificationTime(time, siteId) {\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const key = CoreRemindersService.DEFAULT_NOTIFICATION_TIME_SETTING + '#' + siteId;\n      yield CoreConfig.set(key, time);\n      CoreEvents.trigger(CoreRemindersService.DEFAULT_NOTIFICATION_TIME_CHANGED, {\n        time\n      }, siteId);\n    })();\n  }\n}\n_class = CoreRemindersService;\n_class.DEFAULT_REMINDER_TIMEBEFORE = -1;\n_class.DISABLED = -1;\n_class.DEFAULT_NOTIFICATION_TIME_SETTING = 'CoreRemindersDefaultNotification';\n_class.DEFAULT_NOTIFICATION_TIME_CHANGED = 'CoreRemindersDefaultNotificationChangedEvent';\n_class.ɵfac = function CoreRemindersService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreReminders = makeSingleton(CoreRemindersService);","map":{"version":3,"names":["CoreLocalNotifications","CoreSites","CoreTimeUtils","makeSingleton","Translate","REMINDERS_TABLE","CorePlatform","CoreConstants","CoreConfig","CoreEvents","CoreRemindersUnits","SECONDS_MINUTE","SECONDS_HOUR","SECONDS_DAY","SECONDS_WEEK","REMINDER_UNITS_LABELS","single","MINUTE","HOUR","DAY","WEEK","multi","CoreRemindersService","initialize","_this","_asyncToGenerator","isEnabled","scheduleAllNotifications","on","DEFAULT_NOTIFICATION_TIME_CHANGED","_ref","data","site","getSite","siteId","getId","reminders","getRemindersWithDefaultTime","forEach","reminder","scheduleNotification","_x","apply","arguments","addReminder","_this2","reminderId","getDb","insertRecord","reminderRecord","Object","assign","id","updateReminder","_this3","updateRecords","updateReminders","newFields","selector","_this4","getReminders","Promise","all","map","getAllReminders","getRecords","undefined","timebefore","DEFAULT_REMINDER_TIMEBEFORE","removeReminder","_this5","getRecord","cancelReminder","component","deleteRecords","removeReminders","_this6","getCurrentSiteId","cancel","_this7","getDefaultNotificationTime","DISABLED","notificationTime","time","Date","now","notificationData","instanceId","notification","title","text","userDate","icon","trigger","at","schedule","_this8","ready","isPluginAvailable","siteIds","getSitesIds","getUnitValueLabel","value","unit","addDefaultLabel","instant","unitsLabel","label","units","$a","convertSecondsToValueAndUnit","seconds","key","DEFAULT_NOTIFICATION_TIME_SETTING","get","CONFIG","calendarreminderdefaultvalue","setDefaultNotificationTime","set","_class","factory","ɵfac","providedIn","CoreReminders"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/reminders/services/reminders.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreLocalNotifications } from '@services/local-notifications';\nimport { CoreSites } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreReminderDBRecord, REMINDERS_TABLE } from './database/reminders';\nimport { ILocalNotification } from '@awesome-cordova-plugins/local-notifications';\nimport { CorePlatform } from '@services/platform';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreConfig } from '@services/config';\nimport { CoreEvents } from '@singletons/events';\n\n/**\n * Units to set a reminder.\n */\nexport enum CoreRemindersUnits {\n    MINUTE = CoreConstants.SECONDS_MINUTE,\n    HOUR = CoreConstants.SECONDS_HOUR,\n    DAY = CoreConstants.SECONDS_DAY,\n    WEEK = CoreConstants.SECONDS_WEEK,\n}\n\nconst REMINDER_UNITS_LABELS = {\n    single: {\n        [CoreRemindersUnits.MINUTE]: 'core.minute',\n        [CoreRemindersUnits.HOUR]: 'core.hour',\n        [CoreRemindersUnits.DAY]: 'core.day',\n        [CoreRemindersUnits.WEEK]: 'core.week',\n    },\n    multi: {\n        [CoreRemindersUnits.MINUTE]: 'core.minutes',\n        [CoreRemindersUnits.HOUR]: 'core.hours',\n        [CoreRemindersUnits.DAY]: 'core.days',\n        [CoreRemindersUnits.WEEK]: 'core.weeks',\n    },\n};\n\n/**\n * Service to handle reminders.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreRemindersService {\n\n    static readonly DEFAULT_REMINDER_TIMEBEFORE = -1;\n    static readonly DISABLED = -1;\n\n    static readonly DEFAULT_NOTIFICATION_TIME_SETTING = 'CoreRemindersDefaultNotification';\n    static readonly DEFAULT_NOTIFICATION_TIME_CHANGED = 'CoreRemindersDefaultNotificationChangedEvent';\n\n    /**\n     * Initialize the service.\n     *\n     * @returns Promise resolved when done.\n     */\n    async initialize(): Promise<void> {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        this.scheduleAllNotifications();\n\n        CoreEvents.on(CoreRemindersService.DEFAULT_NOTIFICATION_TIME_CHANGED, async (data) => {\n            const site = await CoreSites.getSite(data.siteId);\n            const siteId = site.getId();\n\n            // Get all the events that have a default reminder.\n            const reminders = await this.getRemindersWithDefaultTime(siteId);\n\n            // Reschedule all the default reminders.\n            reminders.forEach((reminder) =>\n                this.scheduleNotification(reminder, siteId));\n        });\n    }\n\n    /**\n     * Returns if Reminders are enabled.\n     *\n     * @returns True if reminders are enabled and available, false otherwise.\n     */\n    isEnabled(): boolean {\n        return true;\n    }\n\n    /**\n     * Save reminder to Database.\n     *\n     * @param reminder Reminder to set.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Resolved when done. Rejected on failure.\n     */\n    async addReminder(reminder: CoreReminderData, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const reminderId = await site.getDb().insertRecord(REMINDERS_TABLE, reminder);\n\n        const reminderRecord: CoreReminderDBRecord = Object.assign(reminder, { id: reminderId });\n\n        await this.scheduleNotification(reminderRecord, site.getId());\n    }\n\n    /**\n     * Update a reminder from local Db.\n     *\n     * @param reminder Fields to update.\n     * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n     * @returns Promise resolved when the reminder data is updated.\n     */\n    async updateReminder(\n        reminder: CoreReminderDBRecord,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.getDb().updateRecords(REMINDERS_TABLE, reminder, { id: reminder.id });\n\n        // Reschedule.\n        await this.scheduleNotification(reminder, siteId);\n    }\n\n    /**\n     * Update all reminders of a component and instance from local Db.\n     *\n     * @param newFields Fields to update.\n     * @param selector Reminder selector.\n     * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n     * @returns Promise resolved when the reminder data is updated.\n     */\n    async updateReminders(\n        newFields: Partial<CoreReminderData>,\n        selector: CoreReminderSelector,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const reminders = await this.getReminders(selector, site.getId());\n\n        await Promise.all(reminders.map((reminder) => {\n            reminder = Object.assign(reminder, newFields);\n\n            return this.updateReminder(reminder, site.getId());\n        }));\n    }\n\n    /**\n     * Get all reminders from local Db.\n     *\n     * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n     * @returns Promise resolved when the reminder data is retrieved.\n     */\n    async getAllReminders(siteId?: string): Promise<CoreReminderDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(REMINDERS_TABLE, undefined, 'time ASC');\n    }\n\n    /**\n     * Get all reminders of a component and instance from local Db.\n     *\n     * @param selector Reminder selector.\n     * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n     * @returns Promise resolved when the reminder data is retrieved.\n     */\n    async getReminders(selector: CoreReminderSelector, siteId?: string): Promise<CoreReminderDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(REMINDERS_TABLE, selector, 'time ASC');\n    }\n\n    /**\n     * Get all reminders of a component with default time.\n     *\n     * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n     * @returns Promise resolved when the reminder data is retrieved.\n     */\n    protected async getRemindersWithDefaultTime(siteId?: string): Promise<CoreReminderDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords<CoreReminderDBRecord>(\n            REMINDERS_TABLE,\n            { timebefore: CoreRemindersService.DEFAULT_REMINDER_TIMEBEFORE },\n            'time ASC',\n        );\n    }\n\n    /**\n     * Remove a reminder and cancel the notification.\n     *\n     * @param id Reminder ID.\n     * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n     * @returns Promise resolved when the notification is updated.\n     */\n    async removeReminder(id: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const reminder = await site.getDb().getRecord<CoreReminderDBRecord>(REMINDERS_TABLE, { id });\n\n        if (this.isEnabled()) {\n            this.cancelReminder(id, reminder.component, site.getId());\n        }\n\n        await site.getDb().deleteRecords(REMINDERS_TABLE, { id });\n    }\n\n    /**\n     * Remove all reminders of the same element.\n     *\n     * @param selector Reminder selector.\n     * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n     * @returns Promise resolved when the notification is updated.\n     */\n    async removeReminders(selector: CoreReminderSelector, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        siteId = site.getId();\n\n        if (this.isEnabled()) {\n            const reminders = await this.getReminders(selector, siteId);\n\n            reminders.forEach((reminder) => {\n                this.cancelReminder(reminder.id, reminder.component, siteId);\n            });\n        }\n\n        await site.getDb().deleteRecords(REMINDERS_TABLE, selector);\n    }\n\n    /**\n     * Cancel a notification for a reminder.\n     *\n     * @param reminderId Reminder Id to cancel.\n     * @param component Reminder component.\n     * @param siteId ID of the site the reminder belongs to. If not defined, use current site.\n     * @returns Promise resolved when done.\n     */\n    async cancelReminder(reminderId: number, component: string, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        return CoreLocalNotifications.cancel(reminderId, component, siteId);\n    }\n\n    /**\n     * Schedules a notification. If local notification plugin is not enabled, resolve the promise.\n     *\n     * @param reminder Reminder to schedule.\n     * @param siteId Site ID the reminder belongs to. If not defined, use current site.\n     * @returns Promise resolved when the notification is scheduled.\n     */\n    async scheduleNotification(\n        reminder: CoreReminderDBRecord,\n        siteId?: string,\n    ): Promise<void> {\n\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const timebefore = reminder.timebefore === CoreRemindersService.DEFAULT_REMINDER_TIMEBEFORE\n            ? await this.getDefaultNotificationTime(siteId)\n            : reminder.timebefore;\n\n        if (timebefore === CoreRemindersService.DISABLED) {\n            // Notification disabled. Cancel.\n            return this.cancelReminder(reminder.id, reminder.component, siteId);\n        }\n\n        const notificationTime = (reminder.time - timebefore) * 1000;\n\n        if (notificationTime <= Date.now()) { // @TODO Add a threshold.\n            // This reminder is over, don't schedule. Cancel if it was scheduled.\n            return this.cancelReminder(reminder.id, reminder.component, siteId);\n        }\n\n        const notificationData: CoreRemindersPushNotificationData = {\n            reminderId: reminder.id,\n            instanceId: reminder.instanceId,\n            siteId: siteId,\n        };\n\n        const notification: ILocalNotification = {\n            id: reminder.id,\n            title: reminder.title,\n            text: CoreTimeUtils.userDate(reminder.time * 1000, 'core.strftimedaydatetime', true),\n            icon: 'file://assets/img/icons/calendar.png',\n            trigger: {\n                at: new Date(notificationTime),\n            },\n            data: notificationData,\n        };\n\n        return CoreLocalNotifications.schedule(notification, reminder.component, siteId);\n    }\n\n    /**\n     * Get the all saved reminders and schedule the notification.\n     * If local notification plugin is not enabled, resolve the promise.\n     *\n     * @returns Promise resolved when all the notifications have been scheduled.\n     */\n    async scheduleAllNotifications(): Promise<void> {\n        await CorePlatform.ready();\n\n        if (CoreLocalNotifications.isPluginAvailable()) {\n            // Notifications are already scheduled.\n            return;\n        }\n\n        const siteIds = await CoreSites.getSitesIds();\n\n        await Promise.all(siteIds.map((siteId: string) => async () => {\n            const reminders = await this.getAllReminders(siteId);\n\n            reminders.forEach((reminder) => {\n                this.scheduleNotification(reminder, siteId);\n            });\n        }));\n    }\n\n    /**\n     * Given a value and a unit, return the translated label.\n     *\n     * @param value Value.\n     * @param unit Unit.\n     * @param addDefaultLabel Whether to add the \"Default\" text.\n     * @returns Translated label.\n     */\n    getUnitValueLabel(value: number, unit: CoreRemindersUnits, addDefaultLabel = false): string {\n        if (value === CoreRemindersService.DISABLED) {\n            return Translate.instant('core.settings.disabled');\n        }\n\n        if (value === 0) {\n            return Translate.instant('core.reminders.atthetime');\n        }\n\n        const unitsLabel = value === 1 ?\n            REMINDER_UNITS_LABELS.single[unit] :\n            REMINDER_UNITS_LABELS.multi[unit];\n\n        const label = Translate.instant('core.reminders.timebefore', {\n            units: Translate.instant(unitsLabel),\n            value: value,\n        });\n\n        if (addDefaultLabel) {\n            return Translate.instant('core.defaultvalue', { $a: label });\n        }\n\n        return label;\n    }\n\n    /**\n     * Given a number of seconds, convert it to a unit&value format compatible with reminders.\n     *\n     * @param seconds Number of seconds.\n     * @returns Value and unit.\n     */\n    static convertSecondsToValueAndUnit(seconds?: number): CoreReminderValueAndUnit {\n        if (seconds === undefined || seconds < 0) {\n            return {\n                value: CoreRemindersService.DISABLED,\n                unit: CoreRemindersUnits.MINUTE,\n            };\n        } else if (seconds === 0) {\n            return {\n                value: 0,\n                unit: CoreRemindersUnits.MINUTE,\n            };\n        } else if (seconds % CoreRemindersUnits.WEEK === 0) {\n            return {\n                value: seconds / CoreRemindersUnits.WEEK,\n                unit: CoreRemindersUnits.WEEK,\n            };\n        } else if (seconds % CoreRemindersUnits.DAY === 0) {\n            return {\n                value: seconds / CoreRemindersUnits.DAY,\n                unit: CoreRemindersUnits.DAY,\n            };\n        } else if (seconds % CoreRemindersUnits.HOUR === 0) {\n            return {\n                value: seconds / CoreRemindersUnits.HOUR,\n                unit: CoreRemindersUnits.HOUR,\n            };\n        } else {\n            return {\n                value: seconds / CoreRemindersUnits.MINUTE,\n                unit: CoreRemindersUnits.MINUTE,\n            };\n        }\n    }\n\n    /**\n     * Get the configured default notification time.\n     *\n     * @param siteId ID of the site. If not defined, use current site.\n     * @returns Promise resolved with the default time (in seconds).\n     */\n    async getDefaultNotificationTime(siteId?: string): Promise<number> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const key = CoreRemindersService.DEFAULT_NOTIFICATION_TIME_SETTING + '#' + siteId;\n\n        return CoreConfig.get(key, CoreConstants.CONFIG.calendarreminderdefaultvalue || 3600);\n    }\n\n    /**\n     * Set the default notification time.\n     *\n     * @param time New default time.\n     * @param siteId ID of the site. If not defined, use current site.\n     * @returns Promise resolved when stored.\n     */\n    async setDefaultNotificationTime(time: number, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const key = CoreRemindersService.DEFAULT_NOTIFICATION_TIME_SETTING + '#' + siteId;\n\n        await CoreConfig.set(key, time);\n\n        CoreEvents.trigger(CoreRemindersService.DEFAULT_NOTIFICATION_TIME_CHANGED, { time }, siteId);\n    }\n\n}\n\nexport const CoreReminders = makeSingleton(CoreRemindersService);\n\nexport type CoreReminderData = Omit<CoreReminderDBRecord, 'id'>;\n\n/**\n * Additional data sent in push notifications, with some calculated data.\n */\nexport type CoreRemindersPushNotificationData = {\n    reminderId: number;\n    instanceId: number;\n    siteId: string;\n};\n\nexport type CoreReminderNotificationOptions = {\n    title: string;\n};\n\n/**\n * Value and unit for reminders.\n */\nexport type CoreReminderValueAndUnit = {\n    value: number;\n    unit: CoreRemindersUnits;\n};\n\nexport type CoreReminderSelector = {\n    instanceId: number;\n    component: string;\n    type?: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}