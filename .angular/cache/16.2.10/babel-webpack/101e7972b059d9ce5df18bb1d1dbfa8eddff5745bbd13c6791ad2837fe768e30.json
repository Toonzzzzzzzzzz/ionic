{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreFile } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreH5P } from '../services/h5p';\nimport { CoreH5PCore } from './core';\nimport { CoreH5PHelper } from './helper';\nimport { CorePath } from '@singletons/path';\nimport { CoreXAPIIRI } from '@features/xapi/classes/iri';\n/**\n * Equivalent to Moodle's H5P player class.\n */\nexport class CoreH5PPlayer {\n  constructor(h5pCore, h5pStorage) {\n    this.h5pCore = h5pCore;\n    this.h5pStorage = h5pStorage;\n  }\n  /**\n   * Calculate the URL to the site H5P player.\n   *\n   * @param siteUrl Site URL.\n   * @param fileUrl File URL.\n   * @param displayOptions Display options.\n   * @param component Component to send xAPI events to.\n   * @returns URL.\n   */\n  calculateOnlinePlayerUrl(siteUrl, fileUrl, displayOptions, component) {\n    fileUrl = CoreH5P.treatH5PUrl(fileUrl, siteUrl);\n    const params = this.getUrlParamsFromDisplayOptions(displayOptions);\n    params.url = encodeURIComponent(fileUrl);\n    if (component) {\n      params.component = component;\n    }\n    return CoreUrlUtils.addParamsToUrl(CorePath.concatenatePaths(siteUrl, '/h5p/embed.php'), params);\n  }\n  /**\n   * Create the index.html to render an H5P package.\n   * Part of the code of this function is equivalent to Moodle's add_assets_to_page function.\n   *\n   * @param id Content ID.\n   * @param h5pUrl The URL of the H5P file.\n   * @param content Content data.\n   * @param embedType Embed type. The app will always use 'iframe'.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the URL of the index file.\n   */\n  createContentIndex(id, h5pUrl, content, embedType, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const contentId = _this.getContentId(id);\n      const basePath = CoreFile.getBasePathInstant();\n      const contentUrl = CoreFile.convertFileSrc(CorePath.concatenatePaths(basePath, _this.h5pCore.h5pFS.getContentFolderPath(content.folderName, site.getId())));\n      // Create the settings needed for the content.\n      const contentSettings = {\n        library: CoreH5PCore.libraryToString(content.library),\n        fullScreen: content.library.fullscreen,\n        exportUrl: '',\n        embedCode: _this.getEmbedCode(site.getURL(), h5pUrl, true),\n        resizeCode: _this.getResizeCode(),\n        title: content.slug,\n        displayOptions: {},\n        url: '',\n        contentUrl: contentUrl,\n        metadata: content.metadata,\n        contentUserData: [{\n          state: '{}' // state will be overridden in params.js to use the latest state when the package is played.\n        }]\n      };\n      // Get the core H5P assets, needed by the H5P classes to render the H5P content.\n      const result = yield _this.getAssets(id, content, embedType, site.getId());\n      result.settings.contents[contentId] = Object.assign(result.settings.contents[contentId], contentSettings);\n      const indexPath = _this.h5pCore.h5pFS.getContentIndexPath(content.folderName, site.getId());\n      let html = '<html><head><title>' + content.title + '</title>' + '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">';\n      // Include the required CSS.\n      result.cssRequires.forEach(cssUrl => {\n        html += '<link rel=\"stylesheet\" type=\"text/css\" href=\"' + cssUrl + '\">';\n      });\n      // Add the settings.\n      html += '<script type=\"text/javascript\">var H5PIntegration = ' + JSON.stringify(result.settings).replace(/\\//g, '\\\\/') + '</script>';\n      // Add our own script to handle the params.\n      html += '<script type=\"text/javascript\" src=\"' + CorePath.concatenatePaths(_this.h5pCore.h5pFS.getCoreH5PPath(), 'moodle/js/params.js') + '\"></script>';\n      html += '</head><body>';\n      // Include the required JS at the beginning of the body, like Moodle web does.\n      // Load the embed.js to allow communication with the parent window.\n      html += '<script type=\"text/javascript\" src=\"' + CorePath.concatenatePaths(_this.h5pCore.h5pFS.getCoreH5PPath(), 'moodle/js/embed.js') + '\"></script>';\n      result.jsRequires.forEach(jsUrl => {\n        html += '<script type=\"text/javascript\" src=\"' + jsUrl + '\"></script>';\n      });\n      html += '<div class=\"h5p-iframe-wrapper\">' + '<iframe id=\"h5p-iframe-' + id + '\" class=\"h5p-iframe\" data-content-id=\"' + id + '\"' + 'style=\"height:1px; min-width: 100%\" src=\"about:blank\"></iframe>' + '</div></body>';\n      const fileEntry = yield CoreFile.writeFile(indexPath, html);\n      return fileEntry.toURL();\n    })();\n  }\n  /**\n   * Delete all content indexes of all sites from filesystem.\n   *\n   * @returns Promise resolved when done.\n   */\n  deleteAllContentIndexes() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const siteIds = yield CoreSites.getSitesIds();\n      yield Promise.all(siteIds.map(siteId => _this2.deleteAllContentIndexesForSite(siteId)));\n    })();\n  }\n  /**\n   * Delete all content indexes for a certain site from filesystem.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  deleteAllContentIndexesForSite(siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const siteIdentifier = siteId || CoreSites.getCurrentSiteId();\n      if (!siteIdentifier) {\n        return;\n      }\n      const records = yield _this3.h5pCore.h5pFramework.getAllContentData(siteIdentifier);\n      yield Promise.all(records.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (record) {\n          yield CoreUtils.ignoreErrors(_this3.h5pCore.h5pFS.deleteContentIndex(record.foldername, siteIdentifier));\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n  /**\n   * Delete all package content data.\n   *\n   * @param fileUrl File URL.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  deleteContentByUrl(fileUrl, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const data = yield _this4.h5pCore.h5pFramework.getContentDataByUrl(fileUrl, siteId);\n      yield CoreUtils.allPromises([_this4.h5pCore.h5pFramework.deleteContentData(data.id, siteId), _this4.h5pCore.h5pFS.deleteContentFolder(data.foldername, siteId)]);\n    })();\n  }\n  /**\n   * Get the assets of a package.\n   *\n   * @param id Content id.\n   * @param content Content data.\n   * @param embedType Embed type.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the assets.\n   */\n  getAssets(id, content, embedType, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Get core assets.\n      const coreAssets = yield CoreH5PHelper.getCoreAssets(siteId);\n      const contentId = _this5.getContentId(id);\n      const settings = coreAssets.settings;\n      settings.contents = settings.contents || {};\n      settings.contents[contentId] = settings.contents[contentId] || {};\n      settings.moodleLibraryPaths = yield _this5.h5pCore.getDependencyRoots(id);\n      // The Moodle component is added dynamically using the params.js script instead of doing it here.\n      /* The filterParameters function should be called before getting the dependency files because it rebuilds content\n         dependency cache. */\n      settings.contents[contentId].jsonContent = yield _this5.h5pCore.filterParameters(content, siteId);\n      const files = yield _this5.getDependencyFiles(id, content.folderName, siteId);\n      // H5P checks the embedType in here, but we'll always use iframe so there's no need to do it.\n      // JavaScripts and stylesheets will be loaded through h5p.js.\n      settings.contents[contentId].scripts = _this5.h5pCore.getAssetsUrls(files.scripts);\n      settings.contents[contentId].styles = _this5.h5pCore.getAssetsUrls(files.styles);\n      return {\n        settings: settings,\n        cssRequires: coreAssets.cssRequires,\n        jsRequires: coreAssets.jsRequires\n      };\n    })();\n  }\n  /**\n   * Get the identifier for the H5P content. This identifier is different than the ID stored in the DB.\n   *\n   * @param id Package ID.\n   * @returns Content identifier.\n   */\n  getContentId(id) {\n    return 'cid-' + id;\n  }\n  /**\n   * Get the content index file.\n   *\n   * @param fileUrl URL of the H5P package.\n   * @param displayOptions Display options.\n   * @param component Component to send xAPI events to.\n   * @param contextId Context ID where the H5P is. Required for tracking.\n   * @param siteId The site ID. If not defined, current site.\n   * @returns Promise resolved with the file URL if exists, rejected otherwise.\n   */\n  getContentIndexFileUrl(fileUrl, displayOptions, component, contextId, siteId, otherOptions = {}) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const path = yield _this6.h5pCore.h5pFS.getContentIndexFileUrl(fileUrl, siteId);\n      // Add display options and component to the URL.\n      const data = yield _this6.h5pCore.h5pFramework.getContentDataByUrl(fileUrl, siteId);\n      displayOptions = _this6.h5pCore.fixDisplayOptions(displayOptions || {}, data.id);\n      const params = {\n        displayOptions: JSON.stringify(displayOptions),\n        component: component || ''\n      };\n      if (contextId) {\n        params.trackingUrl = yield CoreXAPIIRI.generate(contextId, 'activity', siteId);\n      }\n      if (otherOptions.saveFreq !== undefined) {\n        params.saveFreq = otherOptions.saveFreq;\n      }\n      if (otherOptions.state !== undefined) {\n        params.state = otherOptions.state;\n      }\n      return CoreUrlUtils.addParamsToUrl(path, params);\n    })();\n  }\n  /**\n   * Finds library dependencies files of a certain package.\n   *\n   * @param id Content id.\n   * @param folderName Name of the folder of the content.\n   * @param siteId The site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getDependencyFiles(id, folderName, siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const preloadedDeps = yield CoreH5P.h5pCore.loadContentDependencies(id, 'preloaded', siteId);\n      return _this7.h5pCore.getDependenciesFiles(preloadedDeps, folderName, _this7.h5pCore.h5pFS.getExternalH5PFolderPath(siteId), siteId);\n    })();\n  }\n  /**\n   * Get display options from a URL params.\n   *\n   * @param params URL params.\n   * @returns Display options as object.\n   */\n  getDisplayOptionsFromUrlParams(params) {\n    const displayOptions = {};\n    if (!params) {\n      return displayOptions;\n    }\n    displayOptions[CoreH5PCore.DISPLAY_OPTION_DOWNLOAD] = false; // Never allow downloading in the app.\n    displayOptions[CoreH5PCore.DISPLAY_OPTION_EMBED] = false; // Never show the embed option in the app.\n    displayOptions[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT] = CoreUtils.isTrueOrOne(params[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT]);\n    displayOptions[CoreH5PCore.DISPLAY_OPTION_FRAME] = displayOptions[CoreH5PCore.DISPLAY_OPTION_DOWNLOAD] || displayOptions[CoreH5PCore.DISPLAY_OPTION_EMBED] || displayOptions[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT];\n    displayOptions[CoreH5PCore.DISPLAY_OPTION_ABOUT] = !!this.h5pCore.h5pFramework.getOption(CoreH5PCore.DISPLAY_OPTION_ABOUT, true);\n    return displayOptions;\n  }\n  /**\n   * Embed code for settings.\n   *\n   * @param siteUrl The site URL.\n   * @param h5pUrl The URL of the .h5p file.\n   * @param embedEnabled Whether the option to embed the H5P content is enabled.\n   * @returns The HTML code to reuse this H5P content in a different place.\n   */\n  getEmbedCode(siteUrl, h5pUrl, embedEnabled) {\n    if (!embedEnabled) {\n      return '';\n    }\n    return '<iframe src=\"' + this.getEmbedUrl(siteUrl, h5pUrl) + '\" allowfullscreen=\"allowfullscreen\"></iframe>';\n  }\n  /**\n   * Get the encoded URL for embeding an H5P content.\n   *\n   * @param siteUrl The site URL.\n   * @param h5pUrl The URL of the .h5p file.\n   * @returns The embed URL.\n   */\n  getEmbedUrl(siteUrl, h5pUrl) {\n    return CorePath.concatenatePaths(siteUrl, '/h5p/embed.php') + '?url=' + h5pUrl;\n  }\n  /**\n   * Resizing script for settings.\n   *\n   * @returns The HTML code with the resize script.\n   */\n  getResizeCode() {\n    return '<script src=\"' + this.getResizerScriptUrl() + '\"></script>';\n  }\n  /**\n   * Get the URL to the resizer script.\n   *\n   * @returns URL.\n   */\n  getResizerScriptUrl() {\n    return CorePath.concatenatePaths(this.h5pCore.h5pFS.getCoreH5PPath(), 'js/h5p-resizer.js');\n  }\n  /**\n   * Get online player URL params from display options.\n   *\n   * @param options Display options.\n   * @returns Object with URL params.\n   */\n  getUrlParamsFromDisplayOptions(options) {\n    const params = {};\n    if (!options) {\n      return params;\n    }\n    params[CoreH5PCore.DISPLAY_OPTION_FRAME] = options[CoreH5PCore.DISPLAY_OPTION_FRAME] ? '1' : '0';\n    params[CoreH5PCore.DISPLAY_OPTION_DOWNLOAD] = options[CoreH5PCore.DISPLAY_OPTION_DOWNLOAD] ? '1' : '0';\n    params[CoreH5PCore.DISPLAY_OPTION_EMBED] = options[CoreH5PCore.DISPLAY_OPTION_EMBED] ? '1' : '0';\n    params[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT] = options[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT] ? '1' : '0';\n    return params;\n  }\n}","map":{"version":3,"names":["CoreFile","CoreSites","CoreUrlUtils","CoreUtils","CoreH5P","CoreH5PCore","CoreH5PHelper","CorePath","CoreXAPIIRI","CoreH5PPlayer","constructor","h5pCore","h5pStorage","calculateOnlinePlayerUrl","siteUrl","fileUrl","displayOptions","component","treatH5PUrl","params","getUrlParamsFromDisplayOptions","url","encodeURIComponent","addParamsToUrl","concatenatePaths","createContentIndex","id","h5pUrl","content","embedType","siteId","_this","_asyncToGenerator","site","getSite","contentId","getContentId","basePath","getBasePathInstant","contentUrl","convertFileSrc","h5pFS","getContentFolderPath","folderName","getId","contentSettings","library","libraryToString","fullScreen","fullscreen","exportUrl","embedCode","getEmbedCode","getURL","resizeCode","getResizeCode","title","slug","metadata","contentUserData","state","result","getAssets","settings","contents","Object","assign","indexPath","getContentIndexPath","html","cssRequires","forEach","cssUrl","JSON","stringify","replace","getCoreH5PPath","jsRequires","jsUrl","fileEntry","writeFile","toURL","deleteAllContentIndexes","_this2","siteIds","getSitesIds","Promise","all","map","deleteAllContentIndexesForSite","_this3","siteIdentifier","getCurrentSiteId","records","h5pFramework","getAllContentData","_ref","record","ignoreErrors","deleteContentIndex","foldername","_x","apply","arguments","deleteContentByUrl","_this4","data","getContentDataByUrl","allPromises","deleteContentData","deleteContentFolder","_this5","coreAssets","getCoreAssets","moodleLibraryPaths","getDependencyRoots","jsonContent","filterParameters","files","getDependencyFiles","scripts","getAssetsUrls","styles","getContentIndexFileUrl","contextId","otherOptions","_this6","path","fixDisplayOptions","trackingUrl","generate","saveFreq","undefined","_this7","preloadedDeps","loadContentDependencies","getDependenciesFiles","getExternalH5PFolderPath","getDisplayOptionsFromUrlParams","DISPLAY_OPTION_DOWNLOAD","DISPLAY_OPTION_EMBED","DISPLAY_OPTION_COPYRIGHT","isTrueOrOne","DISPLAY_OPTION_FRAME","DISPLAY_OPTION_ABOUT","getOption","embedEnabled","getEmbedUrl","getResizerScriptUrl","options"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/h5p/classes/player.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreFile } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreH5P } from '../services/h5p';\nimport { CoreH5PCore, CoreH5PDisplayOptions, CoreH5PContentData, CoreH5PDependenciesFiles } from './core';\nimport { CoreH5PCoreSettings, CoreH5PHelper } from './helper';\nimport { CoreH5PStorage } from './storage';\nimport { CorePath } from '@singletons/path';\nimport { CoreXAPIIRI } from '@features/xapi/classes/iri';\n\n/**\n * Equivalent to Moodle's H5P player class.\n */\nexport class CoreH5PPlayer {\n\n    constructor(\n        protected h5pCore: CoreH5PCore,\n        protected h5pStorage: CoreH5PStorage,\n    ) { }\n\n    /**\n     * Calculate the URL to the site H5P player.\n     *\n     * @param siteUrl Site URL.\n     * @param fileUrl File URL.\n     * @param displayOptions Display options.\n     * @param component Component to send xAPI events to.\n     * @returns URL.\n     */\n    calculateOnlinePlayerUrl(siteUrl: string, fileUrl: string, displayOptions?: CoreH5PDisplayOptions, component?: string): string {\n        fileUrl = CoreH5P.treatH5PUrl(fileUrl, siteUrl);\n\n        const params = this.getUrlParamsFromDisplayOptions(displayOptions);\n        params.url = encodeURIComponent(fileUrl);\n        if (component) {\n            params.component = component;\n        }\n\n        return CoreUrlUtils.addParamsToUrl(CorePath.concatenatePaths(siteUrl, '/h5p/embed.php'), params);\n    }\n\n    /**\n     * Create the index.html to render an H5P package.\n     * Part of the code of this function is equivalent to Moodle's add_assets_to_page function.\n     *\n     * @param id Content ID.\n     * @param h5pUrl The URL of the H5P file.\n     * @param content Content data.\n     * @param embedType Embed type. The app will always use 'iframe'.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the URL of the index file.\n     */\n    async createContentIndex(\n        id: number,\n        h5pUrl: string,\n        content: CoreH5PContentData,\n        embedType: string,\n        siteId?: string,\n    ): Promise<string> {\n\n        const site = await CoreSites.getSite(siteId);\n\n        const contentId = this.getContentId(id);\n        const basePath = CoreFile.getBasePathInstant();\n        const contentUrl = CoreFile.convertFileSrc(\n            CorePath.concatenatePaths(\n                basePath,\n                this.h5pCore.h5pFS.getContentFolderPath(content.folderName, site.getId()),\n            ),\n        );\n\n        // Create the settings needed for the content.\n        const contentSettings = {\n            library: CoreH5PCore.libraryToString(content.library),\n            fullScreen: content.library.fullscreen,\n            exportUrl: '', // We'll never display the download button, so we don't need the exportUrl.\n            embedCode: this.getEmbedCode(site.getURL(), h5pUrl, true),\n            resizeCode: this.getResizeCode(),\n            title: content.slug,\n            displayOptions: {},\n            url: '', // It will be filled using dynamic params if needed.\n            contentUrl: contentUrl,\n            metadata: content.metadata,\n            contentUserData: [\n                {\n                    state: '{}', // state will be overridden in params.js to use the latest state when the package is played.\n                },\n            ],\n        };\n\n        // Get the core H5P assets, needed by the H5P classes to render the H5P content.\n        const result = await this.getAssets(id, content, embedType, site.getId());\n\n        result.settings.contents[contentId] = Object.assign(result.settings.contents[contentId], contentSettings);\n\n        const indexPath = this.h5pCore.h5pFS.getContentIndexPath(content.folderName, site.getId());\n        let html = '<html><head><title>' + content.title + '</title>' +\n                '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">';\n\n        // Include the required CSS.\n        result.cssRequires.forEach((cssUrl) => {\n            html += '<link rel=\"stylesheet\" type=\"text/css\" href=\"' + cssUrl + '\">';\n        });\n\n        // Add the settings.\n        html += '<script type=\"text/javascript\">var H5PIntegration = ' +\n                JSON.stringify(result.settings).replace(/\\//g, '\\\\/') + '</script>';\n\n        // Add our own script to handle the params.\n        html += '<script type=\"text/javascript\" src=\"' + CorePath.concatenatePaths(\n            this.h5pCore.h5pFS.getCoreH5PPath(),\n            'moodle/js/params.js',\n        ) + '\"></script>';\n\n        html += '</head><body>';\n\n        // Include the required JS at the beginning of the body, like Moodle web does.\n        // Load the embed.js to allow communication with the parent window.\n        html += '<script type=\"text/javascript\" src=\"' +\n                CorePath.concatenatePaths(this.h5pCore.h5pFS.getCoreH5PPath(), 'moodle/js/embed.js') + '\"></script>';\n\n        result.jsRequires.forEach((jsUrl) => {\n            html += '<script type=\"text/javascript\" src=\"' + jsUrl + '\"></script>';\n        });\n\n        html += '<div class=\"h5p-iframe-wrapper\">' +\n                '<iframe id=\"h5p-iframe-' + id + '\" class=\"h5p-iframe\" data-content-id=\"' + id + '\"' +\n                    'style=\"height:1px; min-width: 100%\" src=\"about:blank\"></iframe>' +\n                '</div></body>';\n\n        const fileEntry = await CoreFile.writeFile(indexPath, html);\n\n        return fileEntry.toURL();\n    }\n\n    /**\n     * Delete all content indexes of all sites from filesystem.\n     *\n     * @returns Promise resolved when done.\n     */\n    async deleteAllContentIndexes(): Promise<void> {\n        const siteIds = await CoreSites.getSitesIds();\n\n        await Promise.all(siteIds.map((siteId) => this.deleteAllContentIndexesForSite(siteId)));\n    }\n\n    /**\n     * Delete all content indexes for a certain site from filesystem.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async deleteAllContentIndexesForSite(siteId?: string): Promise<void> {\n        const siteIdentifier = siteId || CoreSites.getCurrentSiteId();\n\n        if (!siteIdentifier) {\n            return;\n        }\n\n        const records = await this.h5pCore.h5pFramework.getAllContentData(siteIdentifier);\n\n        await Promise.all(records.map(async (record) => {\n            await CoreUtils.ignoreErrors(this.h5pCore.h5pFS.deleteContentIndex(record.foldername, siteIdentifier));\n        }));\n    }\n\n    /**\n     * Delete all package content data.\n     *\n     * @param fileUrl File URL.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async deleteContentByUrl(fileUrl: string, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const data = await this.h5pCore.h5pFramework.getContentDataByUrl(fileUrl, siteId);\n\n        await CoreUtils.allPromises([\n            this.h5pCore.h5pFramework.deleteContentData(data.id, siteId),\n\n            this.h5pCore.h5pFS.deleteContentFolder(data.foldername, siteId),\n        ]);\n    }\n\n    /**\n     * Get the assets of a package.\n     *\n     * @param id Content id.\n     * @param content Content data.\n     * @param embedType Embed type.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the assets.\n     */\n    protected async getAssets(\n        id: number,\n        content: CoreH5PContentData,\n        embedType: string,\n        siteId?: string,\n    ): Promise<{settings: AssetsSettings; cssRequires: string[]; jsRequires: string[]}> {\n\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Get core assets.\n        const coreAssets = await CoreH5PHelper.getCoreAssets(siteId);\n\n        const contentId = this.getContentId(id);\n        const settings = <AssetsSettings> coreAssets.settings;\n        settings.contents = settings.contents || {};\n        settings.contents[contentId] = settings.contents[contentId] || {};\n\n        settings.moodleLibraryPaths = await this.h5pCore.getDependencyRoots(id);\n\n        // The Moodle component is added dynamically using the params.js script instead of doing it here.\n\n        /* The filterParameters function should be called before getting the dependency files because it rebuilds content\n           dependency cache. */\n        settings.contents[contentId].jsonContent = await this.h5pCore.filterParameters(content, siteId);\n\n        const files = await this.getDependencyFiles(id, content.folderName, siteId);\n\n        // H5P checks the embedType in here, but we'll always use iframe so there's no need to do it.\n        // JavaScripts and stylesheets will be loaded through h5p.js.\n        settings.contents[contentId].scripts = this.h5pCore.getAssetsUrls(files.scripts);\n        settings.contents[contentId].styles = this.h5pCore.getAssetsUrls(files.styles);\n\n        return {\n            settings: settings,\n            cssRequires: coreAssets.cssRequires,\n            jsRequires: coreAssets.jsRequires,\n        };\n    }\n\n    /**\n     * Get the identifier for the H5P content. This identifier is different than the ID stored in the DB.\n     *\n     * @param id Package ID.\n     * @returns Content identifier.\n     */\n    protected getContentId(id: number): string {\n        return 'cid-' + id;\n    }\n\n    /**\n     * Get the content index file.\n     *\n     * @param fileUrl URL of the H5P package.\n     * @param displayOptions Display options.\n     * @param component Component to send xAPI events to.\n     * @param contextId Context ID where the H5P is. Required for tracking.\n     * @param siteId The site ID. If not defined, current site.\n     * @returns Promise resolved with the file URL if exists, rejected otherwise.\n     */\n    async getContentIndexFileUrl(\n        fileUrl: string,\n        displayOptions?: CoreH5PDisplayOptions,\n        component?: string,\n        contextId?: number,\n        siteId?: string,\n        otherOptions: CoreH5PGetContentUrlOptions = {},\n    ): Promise<string> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const path = await this.h5pCore.h5pFS.getContentIndexFileUrl(fileUrl, siteId);\n\n        // Add display options and component to the URL.\n        const data = await this.h5pCore.h5pFramework.getContentDataByUrl(fileUrl, siteId);\n\n        displayOptions = this.h5pCore.fixDisplayOptions(displayOptions || {}, data.id);\n\n        const params: Record<string, string | number> = {\n            displayOptions: JSON.stringify(displayOptions),\n            component: component || '',\n        };\n\n        if (contextId) {\n            params.trackingUrl = await CoreXAPIIRI.generate(contextId, 'activity', siteId);\n        }\n        if (otherOptions.saveFreq !== undefined) {\n            params.saveFreq = otherOptions.saveFreq;\n        }\n        if (otherOptions.state !== undefined) {\n            params.state = otherOptions.state;\n        }\n\n        return CoreUrlUtils.addParamsToUrl(path, params);\n    }\n\n    /**\n     * Finds library dependencies files of a certain package.\n     *\n     * @param id Content id.\n     * @param folderName Name of the folder of the content.\n     * @param siteId The site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    protected async getDependencyFiles(id: number, folderName: string, siteId?: string): Promise<CoreH5PDependenciesFiles> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const preloadedDeps = await CoreH5P.h5pCore.loadContentDependencies(id, 'preloaded', siteId);\n\n        return this.h5pCore.getDependenciesFiles(\n            preloadedDeps,\n            folderName,\n            this.h5pCore.h5pFS.getExternalH5PFolderPath(siteId),\n            siteId,\n        );\n    }\n\n    /**\n     * Get display options from a URL params.\n     *\n     * @param params URL params.\n     * @returns Display options as object.\n     */\n    getDisplayOptionsFromUrlParams(params?: {[name: string]: string}): CoreH5PDisplayOptions {\n        const displayOptions: CoreH5PDisplayOptions = {};\n\n        if (!params) {\n            return displayOptions;\n        }\n\n        displayOptions[CoreH5PCore.DISPLAY_OPTION_DOWNLOAD] = false; // Never allow downloading in the app.\n        displayOptions[CoreH5PCore.DISPLAY_OPTION_EMBED] = false; // Never show the embed option in the app.\n        displayOptions[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT] =\n                CoreUtils.isTrueOrOne(params[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT]);\n        displayOptions[CoreH5PCore.DISPLAY_OPTION_FRAME] = displayOptions[CoreH5PCore.DISPLAY_OPTION_DOWNLOAD] ||\n                displayOptions[CoreH5PCore.DISPLAY_OPTION_EMBED] || displayOptions[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT];\n        displayOptions[CoreH5PCore.DISPLAY_OPTION_ABOUT] =\n                !!this.h5pCore.h5pFramework.getOption(CoreH5PCore.DISPLAY_OPTION_ABOUT, true);\n\n        return displayOptions;\n    }\n\n    /**\n     * Embed code for settings.\n     *\n     * @param siteUrl The site URL.\n     * @param h5pUrl The URL of the .h5p file.\n     * @param embedEnabled Whether the option to embed the H5P content is enabled.\n     * @returns The HTML code to reuse this H5P content in a different place.\n     */\n    protected getEmbedCode(siteUrl: string, h5pUrl: string, embedEnabled?: boolean): string {\n        if (!embedEnabled) {\n            return '';\n        }\n\n        return '<iframe src=\"' + this.getEmbedUrl(siteUrl, h5pUrl) + '\" allowfullscreen=\"allowfullscreen\"></iframe>';\n    }\n\n    /**\n     * Get the encoded URL for embeding an H5P content.\n     *\n     * @param siteUrl The site URL.\n     * @param h5pUrl The URL of the .h5p file.\n     * @returns The embed URL.\n     */\n    protected getEmbedUrl(siteUrl: string, h5pUrl: string): string {\n        return CorePath.concatenatePaths(siteUrl, '/h5p/embed.php') + '?url=' + h5pUrl;\n    }\n\n    /**\n     * Resizing script for settings.\n     *\n     * @returns The HTML code with the resize script.\n     */\n    protected getResizeCode(): string {\n        return '<script src=\"' + this.getResizerScriptUrl() + '\"></script>';\n    }\n\n    /**\n     * Get the URL to the resizer script.\n     *\n     * @returns URL.\n     */\n    getResizerScriptUrl(): string {\n        return CorePath.concatenatePaths(this.h5pCore.h5pFS.getCoreH5PPath(), 'js/h5p-resizer.js');\n    }\n\n    /**\n     * Get online player URL params from display options.\n     *\n     * @param options Display options.\n     * @returns Object with URL params.\n     */\n    getUrlParamsFromDisplayOptions(options?: CoreH5PDisplayOptions): {[name: string]: string} {\n        const params: {[name: string]: string} = {};\n\n        if (!options) {\n            return params;\n        }\n\n        params[CoreH5PCore.DISPLAY_OPTION_FRAME] = options[CoreH5PCore.DISPLAY_OPTION_FRAME] ? '1' : '0';\n        params[CoreH5PCore.DISPLAY_OPTION_DOWNLOAD] = options[CoreH5PCore.DISPLAY_OPTION_DOWNLOAD] ? '1' : '0';\n        params[CoreH5PCore.DISPLAY_OPTION_EMBED] = options[CoreH5PCore.DISPLAY_OPTION_EMBED] ? '1' : '0';\n        params[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT] = options[CoreH5PCore.DISPLAY_OPTION_COPYRIGHT] ? '1' : '0';\n\n        return params;\n    }\n\n}\n\ntype AssetsSettings = CoreH5PCoreSettings & {\n    contents: {\n        [contentId: string]: {\n            jsonContent: string | null;\n            scripts: string[];\n            styles: string[];\n        };\n    };\n    moodleLibraryPaths: {\n        [libString: string]: string;\n    };\n};\n\nexport type CoreH5PGetContentUrlOptions = {\n    saveFreq?: number; // State save frequency (if enabled).\n    state?: string; // Current state.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}