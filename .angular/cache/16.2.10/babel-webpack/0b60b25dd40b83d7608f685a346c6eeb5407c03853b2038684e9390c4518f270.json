{"ast":null,"code":"var _class;\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides some features for folder.\n */\nexport class AddonModFolderHelperProvider {\n  /**\n   * Format folder contents, creating directory structure.\n   * Folders found in filepaths are added to the array. Each folder has the properties: name, fileicon,\n   * type (folder), filepath and contents (array with files and subfolders).\n   *\n   * @param fileEntries Folder contents.\n   * @returns Formatted contents.\n   */\n  formatContents(fileEntries) {\n    const rootFolder = {\n      type: 'root',\n      filename: '',\n      filepath: '',\n      folders: [],\n      files: []\n    };\n    fileEntries.forEach(fileEntry => {\n      // Root level. Just add.\n      if (fileEntry.filepath === '/') {\n        rootFolder.files.push(fileEntry);\n        return;\n      }\n      // It's a file in a subfolder. Lets treat the path to add the subfolders to the array.\n      let currentFolder = rootFolder; // Start at root level.\n      let path = fileEntry.filepath;\n      let completePath = '';\n      // Remove first and last slash if needed.\n      if (path.substring(0, 1) === '/') {\n        path = path.substring(1);\n      }\n      if (path.substring(path.length - 1) === '/') {\n        path = path.slice(0, -1);\n      }\n      const directories = path.split('/');\n      directories.forEach(directory => {\n        completePath = completePath + '/' + directory;\n        // Search if the directory is already stored in folders array.\n        let subFolder = currentFolder.folders.find(list => list.filename === directory);\n        if (!subFolder) {\n          // Directory not found. Add it to the array.\n          subFolder = {\n            type: 'folder',\n            filename: directory,\n            filepath: completePath,\n            folders: [],\n            files: []\n          };\n          currentFolder.folders.push(subFolder);\n        }\n        currentFolder = subFolder;\n      });\n      currentFolder.files.push(fileEntry);\n    });\n    return rootFolder;\n  }\n}\n_class = AddonModFolderHelperProvider;\n_class.ɵfac = function AddonModFolderHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModFolderHelper = makeSingleton(AddonModFolderHelperProvider);","map":{"version":3,"names":["makeSingleton","AddonModFolderHelperProvider","formatContents","fileEntries","rootFolder","type","filename","filepath","folders","files","forEach","fileEntry","push","currentFolder","path","completePath","substring","length","slice","directories","split","directory","subFolder","find","list","factory","ɵfac","providedIn","AddonModFolderHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/folder/services/folder-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourseModuleContentFile } from '@features/course/services/course';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Service that provides some features for folder.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModFolderHelperProvider {\n\n    /**\n     * Format folder contents, creating directory structure.\n     * Folders found in filepaths are added to the array. Each folder has the properties: name, fileicon,\n     * type (folder), filepath and contents (array with files and subfolders).\n     *\n     * @param fileEntries Folder contents.\n     * @returns Formatted contents.\n     */\n    formatContents(fileEntries: CoreCourseModuleContentFile[]): AddonModFolderFolderFormattedData {\n        const rootFolder: AddonModFolderFolderFormattedData = {\n            type: 'root',\n            filename: '',\n            filepath: '',\n            folders: [],\n            files: [],\n        };\n\n        fileEntries.forEach((fileEntry) => {\n            // Root level. Just add.\n            if (fileEntry.filepath === '/') {\n                rootFolder.files.push(fileEntry);\n\n                return;\n            }\n\n            // It's a file in a subfolder. Lets treat the path to add the subfolders to the array.\n            let currentFolder = rootFolder; // Start at root level.\n            let path = fileEntry.filepath;\n            let completePath = '';\n\n            // Remove first and last slash if needed.\n            if (path.substring(0, 1) === '/') {\n                path = path.substring(1);\n            }\n            if (path.substring(path.length - 1) === '/') {\n                path = path.slice(0, -1);\n            }\n\n            const directories: string[] = path.split('/');\n\n            directories.forEach((directory) => {\n                completePath = completePath + '/' + directory;\n                // Search if the directory is already stored in folders array.\n                let subFolder = currentFolder.folders.find((list) => list.filename === directory);\n\n                if (!subFolder) {\n                    // Directory not found. Add it to the array.\n                    subFolder = {\n                        type: 'folder',\n                        filename: directory,\n                        filepath: completePath,\n                        folders: [],\n                        files: [],\n                    };\n                    currentFolder.folders.push(subFolder);\n                }\n                currentFolder = subFolder;\n            });\n\n            currentFolder.files.push(fileEntry);\n        });\n\n        return rootFolder;\n    }\n\n}\nexport const AddonModFolderHelper = makeSingleton(AddonModFolderHelperProvider);\n\nexport type AddonModFolderFolderFormattedData = {\n    type: string; // A file or a folder or external link.\n    filename: string;\n    filepath: string;\n    folders: AddonModFolderFolderFormattedData[];\n    files: CoreCourseModuleContentFile[];\n};\n"],"mappings":";AAgBA,SAASA,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,4BAA4B;EAErC;;;;;;;;EAQAC,cAAcA,CAACC,WAA0C;IACrD,MAAMC,UAAU,GAAsC;MAClDC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE;KACV;IAEDN,WAAW,CAACO,OAAO,CAAEC,SAAS,IAAI;MAC9B;MACA,IAAIA,SAAS,CAACJ,QAAQ,KAAK,GAAG,EAAE;QAC5BH,UAAU,CAACK,KAAK,CAACG,IAAI,CAACD,SAAS,CAAC;QAEhC;;MAGJ;MACA,IAAIE,aAAa,GAAGT,UAAU,CAAC,CAAC;MAChC,IAAIU,IAAI,GAAGH,SAAS,CAACJ,QAAQ;MAC7B,IAAIQ,YAAY,GAAG,EAAE;MAErB;MACA,IAAID,IAAI,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;QAC9BF,IAAI,GAAGA,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC;;MAE5B,IAAIF,IAAI,CAACE,SAAS,CAACF,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QACzCH,IAAI,GAAGA,IAAI,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;MAG5B,MAAMC,WAAW,GAAaL,IAAI,CAACM,KAAK,CAAC,GAAG,CAAC;MAE7CD,WAAW,CAACT,OAAO,CAAEW,SAAS,IAAI;QAC9BN,YAAY,GAAGA,YAAY,GAAG,GAAG,GAAGM,SAAS;QAC7C;QACA,IAAIC,SAAS,GAAGT,aAAa,CAACL,OAAO,CAACe,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAAClB,QAAQ,KAAKe,SAAS,CAAC;QAEjF,IAAI,CAACC,SAAS,EAAE;UACZ;UACAA,SAAS,GAAG;YACRjB,IAAI,EAAE,QAAQ;YACdC,QAAQ,EAAEe,SAAS;YACnBd,QAAQ,EAAEQ,YAAY;YACtBP,OAAO,EAAE,EAAE;YACXC,KAAK,EAAE;WACV;UACDI,aAAa,CAACL,OAAO,CAACI,IAAI,CAACU,SAAS,CAAC;;QAEzCT,aAAa,GAAGS,SAAS;MAC7B,CAAC,CAAC;MAEFT,aAAa,CAACJ,KAAK,CAACG,IAAI,CAACD,SAAS,CAAC;IACvC,CAAC,CAAC;IAEF,OAAOP,UAAU;EACrB;;SAjESH,4BAA4B;;mBAA5BA,MAA4B;AAAA;;SAA5BA,MAA4B;EAAAwB,OAAA,EAA5BxB,MAA4B,CAAAyB,IAAA;EAAAC,UAAA,EADf;AAAM;AAqEhC,OAAO,MAAMC,oBAAoB,GAAG5B,aAAa,CAACC,4BAA4B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}