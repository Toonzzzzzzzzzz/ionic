{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreSites } from '@services/sites';\nimport { CoreSitesFactory } from '@services/sites-factory';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../../../directives/fa-icon\";\nimport * as i3 from \"../../../../directives/update-non-reactive-attributes\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@ngx-translate/core\";\nfunction CoreLoginMethodsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 1, \"core.login.or\"));\n  }\n}\nfunction CoreLoginMethodsComponent_div_1_ion_button_1_ion_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 9);\n  }\n  if (rf & 2) {\n    const method_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"name\", method_r5.icon);\n  }\n}\nfunction CoreLoginMethodsComponent_div_1_ion_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 7);\n    i0.ɵɵlistener(\"click\", function CoreLoginMethodsComponent_div_1_ion_button_1_Template_ion_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const method_r5 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(method_r5.action());\n    });\n    i0.ɵɵtemplate(1, CoreLoginMethodsComponent_div_1_ion_button_1_ion_icon_1_Template, 1, 1, \"ion-icon\", 8);\n    i0.ɵɵelementStart(2, \"ion-label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const method_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"fill\", \"outline\");\n    i0.ɵɵattribute(\"aria-label\", method_r5.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", method_r5.icon);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(method_r5.name);\n  }\n}\nfunction CoreLoginMethodsComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, CoreLoginMethodsComponent_div_1_ion_button_1_Template, 4, 4, \"ion-button\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.loginMethods);\n  }\n}\nfunction CoreLoginMethodsComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"ion-button\", 10);\n    i0.ɵɵlistener(\"click\", function CoreLoginMethodsComponent_ng_container_2_Template_ion_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.showInstructionsAndScanQR());\n    });\n    i0.ɵɵelement(2, \"ion-icon\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 1, \"core.scanqr\"), \" \");\n  }\n}\nfunction CoreLoginMethodsComponent_ion_list_3_ion_button_4_img_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 17);\n  }\n  if (rf & 2) {\n    const provider_r13 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"src\", provider_r13.iconurl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction CoreLoginMethodsComponent_ion_list_3_ion_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 15);\n    i0.ɵɵlistener(\"click\", function CoreLoginMethodsComponent_ion_list_3_ion_button_4_Template_ion_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const provider_r13 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.oauthClicked(provider_r13));\n    });\n    i0.ɵɵtemplate(1, CoreLoginMethodsComponent_ion_list_3_ion_button_4_img_1_Template, 1, 1, \"img\", 16);\n    i0.ɵɵelementStart(2, \"ion-label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const provider_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"fill\", \"outline\");\n    i0.ɵɵattribute(\"aria-label\", provider_r13.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", provider_r13.iconurl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(provider_r13.name);\n  }\n}\nfunction CoreLoginMethodsComponent_ion_list_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-list\", 12)(1, \"h2\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, CoreLoginMethodsComponent_ion_list_3_ion_button_4_Template, 4, 4, \"ion-button\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, \"core.login.potentialidps\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.identityProviders);\n  }\n}\nexport class CoreLoginMethodsComponent {\n  constructor() {\n    this.reconnect = false;\n    this.siteUrl = '';\n    this.isBrowserSSO = false;\n    this.showScanQR = false;\n    this.loginMethods = [];\n    this.identityProviders = [];\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.reconnect) {\n        _this.loginMethods = yield CoreLoginHelper.getLoginMethods();\n        const currentSite = CoreSites.getCurrentSite();\n        const defaultMethod = yield CoreLoginHelper.getDefaultLoginMethod();\n        if (currentSite !== null && currentSite !== void 0 && currentSite.isLoggedOut() && defaultMethod) {\n          yield defaultMethod.action();\n        }\n      }\n      if (_this.siteConfig) {\n        _this.isBrowserSSO = CoreLoginHelper.isSSOLoginNeeded(_this.siteConfig.typeoflogin);\n        // Identity providers won't be shown if login on browser.\n        if (!_this.isBrowserSSO) {\n          _this.identityProviders = yield CoreLoginHelper.getValidIdentityProvidersForSite(CoreSitesFactory.makeUnauthenticatedSite(_this.siteUrl, _this.siteConfig));\n        }\n        if (_this.reconnect) {\n          _this.showScanQR = CoreLoginHelper.displayQRInSiteScreen();\n        }\n        // If still false or credentials screen.\n        if (!_this.reconnect || !_this.showScanQR) {\n          _this.showScanQR = yield CoreLoginHelper.displayQRInCredentialsScreen(_this.siteConfig.tool_mobile_qrcodetype);\n        }\n      }\n    })();\n  }\n  /**\n   * Show instructions and scan QR code.\n   *\n   * @returns Promise resolved when done.\n   */\n  showInstructionsAndScanQR() {\n    return _asyncToGenerator(function* () {\n      try {\n        yield CoreLoginHelper.showScanQRInstructions();\n        yield CoreLoginHelper.scanQR();\n      } catch (_unused) {\n        // Ignore errors.\n      }\n    })();\n  }\n  /**\n   * An OAuth button was clicked.\n   *\n   * @param provider The provider that was clicked.\n   */\n  oauthClicked(provider) {\n    var _this$siteConfig;\n    const result = CoreLoginHelper.openBrowserForOAuthLogin(this.siteUrl, provider, (_this$siteConfig = this.siteConfig) === null || _this$siteConfig === void 0 ? void 0 : _this$siteConfig.launchurl, this.redirectData);\n    if (!result) {\n      CoreDomUtils.showErrorModal('Invalid data.');\n    }\n  }\n}\n_class = CoreLoginMethodsComponent;\n_class.ɵfac = function CoreLoginMethodsComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-login-methods\"]],\n  inputs: {\n    reconnect: \"reconnect\",\n    siteUrl: \"siteUrl\",\n    siteConfig: \"siteConfig\",\n    redirectData: \"redirectData\"\n  },\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"ion-text-center ion-padding core-login-methods-separator\", 4, \"ngIf\"], [\"class\", \"core-login-methods\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"core-login-identity-providers\", 4, \"ngIf\"], [1, \"ion-text-center\", \"ion-padding\", \"core-login-methods-separator\"], [1, \"core-login-methods\"], [\"class\", \"ion-text-wrap ion-margin\", \"expand\", \"block\", 3, \"fill\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"expand\", \"block\", 1, \"ion-text-wrap\", \"ion-margin\", 3, \"fill\", \"click\"], [\"slot\", \"start\", 3, \"name\", 4, \"ngIf\"], [\"slot\", \"start\", 3, \"name\"], [\"expand\", \"block\", \"fill\", \"outline\", 1, \"ion-margin\", \"core-login-site-qrcode\", 3, \"click\"], [\"slot\", \"start\", \"name\", \"fas-qrcode\", \"aria-hidden\", \"true\"], [1, \"core-login-identity-providers\"], [1, \"item-heading\"], [\"class\", \"ion-text-wrap ion-margin core-oauth-provider\", \"expand\", \"block\", 3, \"fill\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"expand\", \"block\", 1, \"ion-text-wrap\", \"ion-margin\", \"core-oauth-provider\", 3, \"fill\", \"click\"], [\"alt\", \"\", \"width\", \"32\", \"height\", \"32\", \"slot\", \"start\", \"aria-hidden\", \"true\", 3, \"src\", 4, \"ngIf\"], [\"alt\", \"\", \"width\", \"32\", \"height\", \"32\", \"slot\", \"start\", \"aria-hidden\", \"true\", 3, \"src\"]],\n  template: function CoreLoginMethodsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CoreLoginMethodsComponent_div_0_Template, 4, 3, \"div\", 0);\n      i0.ɵɵtemplate(1, CoreLoginMethodsComponent_div_1_Template, 2, 1, \"div\", 1);\n      i0.ɵɵtemplate(2, CoreLoginMethodsComponent_ng_container_2_Template, 5, 3, \"ng-container\", 2);\n      i0.ɵɵtemplate(3, CoreLoginMethodsComponent_ion_list_3_Template, 5, 4, \"ion-list\", 3);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.loginMethods.length || ctx.identityProviders.length || ctx.showScanQR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginMethods.length);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showScanQR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.identityProviders.length);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.CoreFaIconDirective, i3.CoreUpdateNonReactiveAttributesDirective, i4.IonButton, i4.IonIcon, i4.IonLabel, i4.IonList, i5.TranslatePipe],\n  styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[_nghost-%COMP%]   ion-content[_ngcontent-%COMP%], [_nghost-%COMP%]   ion-list[_ngcontent-%COMP%] {\\n  --background: var(--core-login-background);\\n  --ion-item-background: var(--core-login-background);\\n  --color: var(--core-login-text-color);\\n}\\n[_nghost-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%] {\\n  --color: var(--core-login-text-color);\\n}\\n[_nghost-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], [_nghost-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%], [_nghost-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%], [_nghost-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%]   .core-oauth-icon[_ngcontent-%COMP%] {\\n  color: var(--color);\\n}\\n[_nghost-%COMP%]   ion-button.core-button-as-link[_ngcontent-%COMP%] {\\n  --color: var(--core-login-text-color);\\n  -webkit-text-decoration-color: var(--core-login-text-color);\\n          text-decoration-color: var(--core-login-text-color);\\n}\\n[_nghost-%COMP%]   ion-button.core-button-as-link[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%] {\\n  color: var(--core-login-text-color);\\n}\\n[_nghost-%COMP%]   .core-login-reconnect-warning[_ngcontent-%COMP%] {\\n  margin: 0px 0px 32px 0px;\\n}\\n[_nghost-%COMP%]   .core-login-info-box[_ngcontent-%COMP%] {\\n  margin-bottom: 32px;\\n}\\n[_nghost-%COMP%]   .core-login-info-box[_ngcontent-%COMP%]   .core-login-site[_ngcontent-%COMP%]   .core-login-site-logo[_ngcontent-%COMP%] {\\n  width: 90%;\\n  max-width: 300px;\\n  margin: 0px auto;\\n}\\n[_nghost-%COMP%]   .core-login-info-box[_ngcontent-%COMP%]   .core-login-site[_ngcontent-%COMP%]   .core-login-site-logo[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n  max-width: 100%;\\n  max-height: 104px;\\n}\\n[_nghost-%COMP%]   .core-login-info-box[_ngcontent-%COMP%]   .core-login-site[_ngcontent-%COMP%]   .core-sitename[_ngcontent-%COMP%] {\\n  font-size: 1.2rem;\\n  margin-bottom: 8px;\\n}\\n[_nghost-%COMP%]   .core-login-info-box[_ngcontent-%COMP%]   .core-login-site[_ngcontent-%COMP%]   .core-siteurl[_ngcontent-%COMP%] {\\n  margin-top: 8px;\\n  margin-bottom: 0px;\\n}\\n[_nghost-%COMP%]   .core-login-info-box[_ngcontent-%COMP%]   .core-login-site[_ngcontent-%COMP%]    + .core-login-user[_ngcontent-%COMP%] {\\n  margin-top: 24px;\\n}\\n[_nghost-%COMP%]   core-user-avatar.large-avatar[_ngcontent-%COMP%] {\\n  --core-avatar-size: var(--core-large-avatar-size);\\n}\\n[_nghost-%COMP%]   .core-login-fullname[_ngcontent-%COMP%] {\\n  margin-top: 8px;\\n  margin-bottom: 0px;\\n}\\n[_nghost-%COMP%]   .core-login-methods[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   .item.item-input[_ngcontent-%COMP%] {\\n  margin-bottom: 16px;\\n}\\n[_nghost-%COMP%]   .core-login-methods[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%], [_nghost-%COMP%]   .core-login-methods[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%] {\\n  --background: var(--core-login-input-background);\\n  --color: var(--core-login-input-color);\\n}\\n[_nghost-%COMP%]   ion-button[_ngcontent-%COMP%] {\\n  margin-left: 0px;\\n  margin-right: 0px;\\n}\\n[_nghost-%COMP%]   .core-login-forgotten-password[_ngcontent-%COMP%] {\\n  text-decoration: underline;\\n}\\n[_nghost-%COMP%]   .core-login-methods-separator[_ngcontent-%COMP%] {\\n  position: relative;\\n  padding: 8px 0;\\n}\\n[_nghost-%COMP%]   .core-login-methods-separator[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n  background: var(--core-login-background);\\n  padding: 0 8px;\\n}\\n[_nghost-%COMP%]   .core-login-methods-separator[_ngcontent-%COMP%]::before {\\n  height: 1px;\\n  position: absolute;\\n  top: 50%;\\n  left: 0px;\\n  right: 0px;\\n  border-bottom: 1px solid var(--gray-300);\\n  content: \\\"\\\";\\n  z-index: -1;\\n}\\n[_nghost-%COMP%]   .core-login-login-button[_ngcontent-%COMP%] {\\n  margin-top: 32px;\\n}\\n[_nghost-%COMP%]   .core-login-login-inbrowser-button[_ngcontent-%COMP%] {\\n  margin-bottom: 8px;\\n}\\n[_nghost-%COMP%]   p.core-login-inbrowser[_ngcontent-%COMP%] {\\n  font-size: 12px;\\n  margin-top: 8px;\\n  margin-bottom: 8px;\\n}\\n[_nghost-%COMP%]   .core-login-sign-up[_ngcontent-%COMP%] {\\n  margin-top: 8px;\\n  border-top: 1px solid var(--gray-300);\\n}\\n[_nghost-%COMP%]   .core-login-identity-providers[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%], [_nghost-%COMP%]   .core-login-sign-up[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n  margin-top: 16px;\\n  margin-bottom: 8px;\\n  font-size: 16px;\\n}\\n\\nhtml.dark[_nghost-%COMP%]   core-loading[_ngcontent-%COMP%], html.dark   [_nghost-%COMP%]   core-loading[_ngcontent-%COMP%] {\\n  --loading-background: var(--core-login-background-dark);\\n  --loading-text-color: #ffffff;\\n  --loading-spinner: #ffffff;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9nbG9iYWxzLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvdGhlbWUvaGVscGVycy9pb25pYy5mdW5jdGlvbnMuc3RyaW5nLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvdGhlbWUvaGVscGVycy9pb25pYy5mdW5jdGlvbnMuY29sb3Iuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9oZWxwZXJzL2lvbmljLm1peGlucy5zY3NzIiwid2VicGFjazovLy4vc3JjL3RoZW1lL2hlbHBlcnMvaW9uaWMuY29tcG9uZW50cy5taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9oZWxwZXJzL2N1c3RvbS5taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9nbG9iYWxzLmN1c3RvbS5zY3NzIiwid2VicGFjazovLy4vc3JjL3RoZW1lL2dsb2JhbHMudmFyaWFibGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvY29yZS9mZWF0dXJlcy9sb2dpbi9sb2dpbi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0VBQUE7QUNBQTs7Ozs7RUFBQTtBQ0FBOzs7OztFQUFBO0FDQUE7Ozs7O0VBQUE7QUNBQTs7Ozs7O0VBQUE7QUNFQTs7OztFQUFBO0FBNEdBOztFQUFBO0FDOUdBOzs7O0VBQUE7QUNBQTs7OztFQUFBO0FBK0RBOzs7O0VBQUE7QUM1REk7O0VBRUksMENBQUE7RUFDQSxtREFBQTtFQUNBLHFDQUFBO0FBbURSO0FBaERJO0VBQ0kscUNBQUE7QUFrRFI7QUFoRFE7RUFDSSxtQkFBQTtBQWtEWjtBQTlDSTtFQUNJLHFDQUFBO0VBQ0EsMkRBQUE7VUFBQSxtREFBQTtBQWdEUjtBQTlDUTtFQUNJLG1DQUFBO0FBZ0RaO0FBMUNJO0VBQ0ksd0JBQUE7QUE0Q1I7QUF6Q0k7RUFDSSxtQkFBQTtBQTJDUjtBQXhDWTtFQUNJLFVBQUE7RUFDQSxnQkFBQTtFQUNBLGdCQUFBO0FBMENoQjtBQXhDZ0I7RUFDSSxlQUFBO0VBQ0EsaUJBQUE7QUEwQ3BCO0FBdENZO0VBQ0ksaUJBQUE7RUFDQSxrQkFBQTtBQXdDaEI7QUFyQ1k7RUFDSSxlQUFBO0VBQ0Esa0JBQUE7QUF1Q2hCO0FBbkNRO0VBQ0ksZ0JBQUE7QUFxQ1o7QUFqQ0k7RUFDSSxpREFBQTtBQW1DUjtBQWhDSTtFQUNJLGVBQUE7RUFDQSxrQkFBQTtBQWtDUjtBQTlCUTtFQUNJLG1CQUFBO0FBZ0NaO0FBN0JROztFQUVJLGdEQUFBO0VBQ0Esc0NBQUE7QUErQlo7QUEzQkk7RUFDSSxnQkFBQTtFQUNBLGlCQUFBO0FBNkJSO0FBMUJJO0VBQ0ksMEJBQUE7QUE0QlI7QUFFSTtFQUNJLGtCQUFBO0VBQ0EsY0FBQTtBQUFSO0FBRVE7RUFDSSx3Q0FBQTtFQUNBLGNBQUE7QUFBWjtBQUdRO0VBQ0ksV0FBQTtFQUNBLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxVQUFBO0VBQ0Esd0NBQUE7RUFDQSxXQUFBO0VBQ0EsV0FBQTtBQURaO0FBYUk7RUFDSSxnQkFBQTtBQVhSO0FBY0k7RUFDSSxrQkFBQTtBQVpSO0FBZUk7RUFDSSxlQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0FBYlI7QUFnQkk7RUFDSSxlQUFBO0VBQ0EscUNBQUE7QUFkUjtBQWlCSTs7RUFFSSxnQkFBQTtFQUNBLGtCQUFBO0VBQ0EsZUFBQTtBQWZSOztBQTZCUTtFQUNJLHVEQUFBO0VBQ0EsNkJBQUE7RUFDQSwwQkFBQTtBQTFCWiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQXBwIEdsb2JhbCB2YXJpYWJsZXMgU0NTU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUGxhY2UgaGVyZSB0aGUgZGlmZmVyZW50IGZpbGVzIHlvdSBzaG91bGQgaW1wb3J0IHRvIHVzZSBnbG9iYWwgdmFyaWFibGVzLlxuICovXG5cbiRmb250LXBhdGg6IFwiLi4vYXNzZXRzL2ZvbnRzXCI7XG4kYXNzZXRzLXBhdGg6IFwiLi4vYXNzZXRzXCI7XG5cbkBpbXBvcnQgXCIuL2hlbHBlcnMvaGVscGVycy5zY3NzXCI7XG5AaW1wb3J0IFwiLi9nbG9iYWxzLmN1c3RvbS5zY3NzXCI7XG5AaW1wb3J0IFwiLi9nbG9iYWxzLnZhcmlhYmxlcy5zY3NzXCI7XG4iLCIvKipcbiAqIEltcG9ydGVkIGlvbmljIHN0cmluZyBmdW5jdGlvbnMgZm9yIFNDU1NcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEV4dHJhY3RlZCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvY29yZS9zcmMvdGhlbWVzL2lvbmljLmZ1bmN0aW9ucy5zdHJpbmcuc2Nzc1xuICovXG5cblxuLy8gU3RyaW5nIFV0aWxpdHkgRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBTdHJpbmcgUmVwbGFjZSBGdW5jdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQGZ1bmN0aW9uIHN0ci1yZXBsYWNlKCRzdHJpbmcsICRzZWFyY2gsICRyZXBsYWNlOiBcIlwiKSB7XG4gICRpbmRleDogc3RyLWluZGV4KCRzdHJpbmcsICRzZWFyY2gpO1xuXG4gIEBpZiAkaW5kZXgge1xuICAgIEByZXR1cm4gc3RyLXNsaWNlKCRzdHJpbmcsIDEsICRpbmRleCAtIDEpICsgJHJlcGxhY2UgKyBzdHItcmVwbGFjZShzdHItc2xpY2UoJHN0cmluZywgJGluZGV4ICsgc3RyLWxlbmd0aCgkc2VhcmNoKSksICRzZWFyY2gsICRyZXBsYWNlKTtcbiAgfVxuXG4gIEByZXR1cm4gJHN0cmluZztcbn1cblxuLy8gU3RyaW5nIFNwbGl0IEZ1bmN0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbkBmdW5jdGlvbiBzdHItc3BsaXQoJHN0cmluZywgJHNlcGFyYXRvcikge1xuICAvLyBlbXB0eSBhcnJheS9saXN0XG4gICRzcGxpdC1hcnI6ICgpO1xuICAvLyBmaXJzdCBpbmRleCBvZiBzZXBhcmF0b3IgaW4gc3RyaW5nXG4gICRpbmRleDogc3RyLWluZGV4KCRzdHJpbmcsICRzZXBhcmF0b3IpO1xuICAvLyBsb29wIHRocm91Z2ggc3RyaW5nXG4gIEB3aGlsZSAkaW5kZXggIT0gbnVsbCB7XG4gICAgLy8gZ2V0IHRoZSBzdWJzdHJpbmcgZnJvbSB0aGUgZmlyc3QgY2hhcmFjdGVyIHRvIHRoZSBzZXBhcmF0b3JcbiAgICAkaXRlbTogc3RyLXNsaWNlKCRzdHJpbmcsIDEsICRpbmRleCAtIDEpO1xuICAgIC8vIHB1c2ggaXRlbSB0byBhcnJheVxuICAgICRzcGxpdC1hcnI6IGFwcGVuZCgkc3BsaXQtYXJyLCAkaXRlbSk7XG4gICAgLy8gcmVtb3ZlIGl0ZW0gYW5kIHNlcGFyYXRvciBmcm9tIHN0cmluZ1xuICAgICRzdHJpbmc6IHN0ci1zbGljZSgkc3RyaW5nLCAkaW5kZXggKyAxKTtcbiAgICAvLyBmaW5kIG5ldyBpbmRleCBvZiBzZXBhcmF0b3JcbiAgICAkaW5kZXg6IHN0ci1pbmRleCgkc3RyaW5nLCAkc2VwYXJhdG9yKTtcbiAgfVxuICAvLyBhZGQgdGhlIHJlbWFpbmluZyBzdHJpbmcgdG8gbGlzdCAodGhlIGxhc3QgaXRlbSlcbiAgJHNwbGl0LWFycjogYXBwZW5kKCRzcGxpdC1hcnIsICRzdHJpbmcpO1xuXG4gIEByZXR1cm4gJHNwbGl0LWFycjtcbn1cblxuXG4vLyBTdHJpbmcgRXh0cmFjdCBGdW5jdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQGZ1bmN0aW9uIHN0ci1leHRyYWN0KCRzdHJpbmcsICRzdGFydCwgJGVuZCkge1xuICAkc3RhcnQtaW5kZXg6IHN0ci1pbmRleCgkc3RyaW5nLCAkc3RhcnQpO1xuXG4gIEBpZiAkc3RhcnQtaW5kZXgge1xuICAgICRwb3N0OiBzdHItc2xpY2UoJHN0cmluZywgJHN0YXJ0LWluZGV4ICsgc3RyLWxlbmd0aCgkc3RhcnQpKTtcbiAgICAkZW5kLWluZGV4OiBzdHItaW5kZXgoJHBvc3QsICRlbmQpO1xuXG4gICAgQGlmICRlbmQtaW5kZXgge1xuICAgICAgQHJldHVybiBzdHItc2xpY2UoJHBvc3QsIDEsICRlbmQtaW5kZXggLSAxKTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuIG51bGw7XG59XG5cblxuLy8gU3RyaW5nIENvbnRhaW5zIEZ1bmN0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AZnVuY3Rpb24gc3RyLWNvbnRhaW5zKCRzdHJpbmcsICRuZWVkbGUpIHtcbiAgQGlmICh0eXBlLW9mKCRzdHJpbmcpID09IHN0cmluZykge1xuICAgIEByZXR1cm4gc3RyLWluZGV4KCRzdHJpbmcsICRuZWVkbGUpICE9IG51bGw7XG4gIH1cblxuICBAcmV0dXJuIGZhbHNlO1xufVxuXG5cbi8vIFVSTCBFbmNvZGUgRnVuY3Rpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBmdW5jdGlvbiB1cmwtZW5jb2RlKCR2YWwpIHtcbiAgJHNwYWNlczogc3RyLXJlcGxhY2UoJHZhbCwgXCIgXCIsIFwiJTIwXCIpO1xuICAkZW5jb2RlZDogc3RyLXJlcGxhY2UoJHNwYWNlcywgXCIjXCIsIFwiJTIzXCIpO1xuICBAcmV0dXJuICRlbmNvZGVkO1xufVxuXG5cbi8vIEFkZCBSb290IFNlbGVjdG9yXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQWRkcyBhIHJvb3Qgc2VsZWN0b3IgdXNpbmcgaG9zdCBiYXNlZCBvbiB0aGUgc2VsZWN0b3IgcGFzc2VkXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AZnVuY3Rpb24gYWRkLXJvb3Qtc2VsZWN0b3IoJHJvb3QsICRhZGRIb3N0U2VsZWN0b3IpIHtcbiAgJHNlbGVjdG9yczogc3RyLXNwbGl0KCRyb290LCBcIixcIik7XG5cbiAgJGxpc3Q6ICgpO1xuXG4gIEBlYWNoICRzZWxlY3RvciBpbiAkc2VsZWN0b3JzIHtcbiAgICAvLyBJZiB0aGUgc2VsZWN0b3IgY29udGFpbnMgOmhvc3QoIGl0IG1lYW5zIGl0IGlzIHRhcmdldGluZyBhIGNsYXNzIG9uIHRoZSBob3N0XG4gICAgLy8gZWxlbWVudCBzbyB3ZSBuZWVkIHRvIGNoYW5nZSBob3cgd2UgdGFyZ2V0IGl0OlxuICAgIC8vIEBpbmNsdWRlIGFkZC1yb290LXNlbGVjdG9yKFwiOmhvc3QoLmZpeGVkKVwiLCBcIltkaXI9cnRsXVwiKVxuICAgIC8vIC0tPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCguZml4ZWQpXG4gICAgLy8gLS0+IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5maXhlZFxuICAgIEBpZiBzdHItY29udGFpbnMoJHNlbGVjdG9yLCBcIjpob3N0KFwiKSB7XG4gICAgICAvLyBAaW5jbHVkZSBhZGQtcm9vdC1zZWxlY3RvcihcIjpob3N0KC5maXhlZClcIiwgXCJbZGlyPXJ0bF1cIilcbiAgICAgIC8vIC0tPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCguZml4ZWQpXG4gICAgICAkc2hhZG93LWVsZW1lbnQ6IHN0ci1yZXBsYWNlKCRzZWxlY3RvciwgXCI6aG9zdChcIiwgXCI6aG9zdC1jb250ZXh0KCN7JGFkZEhvc3RTZWxlY3Rvcn0pOmhvc3QoXCIpO1xuICAgICAgJGxpc3Q6IGFwcGVuZCgkbGlzdCwgJHNoYWRvdy1lbGVtZW50LCBjb21tYSk7XG5cbiAgICAgICRuZXctZWxlbWVudDogKCk7XG4gICAgICAkZWxlbWVudHM6IHN0ci1zcGxpdCgkc2VsZWN0b3IsIFwiIFwiKTtcblxuICAgICAgQGVhY2ggJGVsZW1lbnQgaW4gJGVsZW1lbnRzIHtcbiAgICAgICAgQGlmIHN0ci1jb250YWlucygkZWxlbWVudCwgXCI6aG9zdChcIikge1xuICAgICAgICAgICRzY29wZWQtZWxlbWVudDogJGVsZW1lbnQ7XG5cbiAgICAgICAgICAvLyBSZXBsYWNlIHRoZSA6aG9zdCggYW5kICkgc28gYWxsIHdlIGhhdmUgbGVmdCBpcyB0aGUgY2xhc3NcbiAgICAgICAgICAvLyBpbnNpZGUgb2YgaXQ6XG4gICAgICAgICAgLy8gOmhvc3QoLmZpeGVkKSAtPiAuZml4ZWRcbiAgICAgICAgICAkc2NvcGVkLWVsZW1lbnQ6IHN0ci1yZXBsYWNlKCRzY29wZWQtZWxlbWVudCwgXCIpXCIsIFwiXCIpO1xuICAgICAgICAgICRzY29wZWQtZWxlbWVudDogc3RyLXJlcGxhY2UoJHNjb3BlZC1lbGVtZW50LCBcIjpob3N0KFwiLCBcIlwiKTtcblxuICAgICAgICAgIC8vIEFkZCB0aGUgY2xhc3MgYmFjayBpbnNpZGUgb2YgaG9zdCB3aXRoIHRoZSBydGwgc2VsZWN0b3I6XG4gICAgICAgICAgLy8gLmZpeGVkIC0+IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5maXhlZFxuICAgICAgICAgICRzY29wZWQtZWxlbWVudDogc3RyLXJlcGxhY2UoJHNjb3BlZC1lbGVtZW50LCAkc2NvcGVkLWVsZW1lbnQsIFwiOmhvc3QtY29udGV4dCgjeyRhZGRIb3N0U2VsZWN0b3J9KSN7JHNjb3BlZC1lbGVtZW50fVwiKTtcblxuICAgICAgICAgIC8vIEBpbmNsdWRlIGFkZC1yb290LXNlbGVjdG9yKFwiOmhvc3QoLmZpeGVkKVwiLCBcIltkaXI9cnRsXVwiKVxuICAgICAgICAgIC8vIC0tPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuZml4ZWRcbiAgICAgICAgICAkbmV3LWVsZW1lbnQ6IGFwcGVuZCgkbmV3LWVsZW1lbnQsICRzY29wZWQtZWxlbWVudCwgc3BhY2UpO1xuICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICAvLyBBZGQgYmFjayBhbnkgc2VsZWN0b3JzIHRoYXQgZm9sbG93ZWQgdGhlIGhvc3QgYWZ0ZXIgdHJhbnNmb3JtaW5nIHRoZVxuICAgICAgICAgIC8vIGZpcnN0IHNlbGVjdG9yOlxuICAgICAgICAgIC8vIDpob3N0KC5maXhlZCkgOjpzbG90dGVkKGlvbi1pY29uKVxuICAgICAgICAgIC8vIC0tPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCguZml4ZWQpIDo6c2xvdHRlZChpb24taWNvbilcbiAgICAgICAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLmZpeGVkIDo6c2xvdHRlZChpb24taWNvbilcbiAgICAgICAgICAkbmV3LWVsZW1lbnQ6IGFwcGVuZCgkbmV3LWVsZW1lbnQsICRlbGVtZW50LCBzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGxpc3Q6IGFwcGVuZCgkbGlzdCwgJG5ldy1lbGVtZW50LCBjb21tYSk7XG4gICAgLy8gSWYgdGhlIHNlbGVjdG9yIGNvbnRhaW5zIDpob3N0IHdpdGhvdXQgYSBwYXJhbnRoZXNlc1xuICAgIC8vIGl0IG1lYW5zIGl0IGlzIHRhcmdldGluZyBqdXN0IHRoZSBob3N0XG4gICAgLy8gZWxlbWVudCBzbyB3ZSBjYW4gY2hhbmdlIGl0IHRvIGxvb2sgZm9yIGhvc3QtY29udGV4dFxuICAgIC8vIEBpbmNsdWRlIGFkZC1yb290LXNlbGVjdG9yKFwiOmhvc3RcIiwgXCJbZGlyPXJ0bF1cIilcbiAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pXG4gICAgLy8gLS0+IDpob3N0OmRpcihydGwpXG4gICAgfSBAZWxzZSBpZiBzdHItY29udGFpbnMoJHNlbGVjdG9yLCBcIjpob3N0XCIpIHtcbiAgICAgICRuZXctZWxlbWVudDogKCk7XG4gICAgICAkZWxlbWVudHM6IHN0ci1zcGxpdCgkc2VsZWN0b3IsIFwiIFwiKTtcblxuICAgICAgQGVhY2ggJGVsZW1lbnQgaW4gJGVsZW1lbnRzIHtcbiAgICAgICAgQGlmIHN0ci1jb250YWlucygkZWxlbWVudCwgXCI6aG9zdFwiKSB7XG4gICAgICAgICAgLy8gUmVwbGFjZSB0aGUgOmhvc3Qgd2l0aCB0aGUgYWRkSG9zdFNlbGVjdG9yOlxuICAgICAgICAgIC8vIDpob3N0IC0+IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKVxuICAgICAgICAgICR1cGRhdGVkLWVsZW1lbnQ6IHN0ci1yZXBsYWNlKCRlbGVtZW50LCBcIjpob3N0XCIsIFwiOmhvc3QtY29udGV4dCgjeyRhZGRIb3N0U2VsZWN0b3J9KVwiKTtcblxuICAgICAgICAgIC8vIEFkZCB0aGUgZmluYWwgc2VsZWN0b3IgYWZ0ZXIgYWxsIHRyYW5zZm9ybWF0aW9uczpcbiAgICAgICAgICAvLyA6aG9zdCAtPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSlcbiAgICAgICAgICAkbmV3LWVsZW1lbnQ6IGFwcGVuZCgkbmV3LWVsZW1lbnQsICR1cGRhdGVkLWVsZW1lbnQsIHNwYWNlKTtcbiAgICAgICAgfSBAZWxzZSB7XG4gICAgICAgICAgLy8gQWRkIGJhY2sgYW55IHNlbGVjdG9ycyB0aGF0IGZvbGxvd2VkIHRoZSBob3N0IGFmdGVyIHRyYW5zZm9ybWluZyB0aGVcbiAgICAgICAgICAvLyBmaXJzdCBzZWxlY3RvcjpcbiAgICAgICAgICAvLyA6aG9zdCA6OnNsb3R0ZWQoaW9uLWljb24pIC0+IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSA6OnNsb3R0ZWQoaW9uLWljb24pXG4gICAgICAgICAgJG5ldy1lbGVtZW50OiBhcHBlbmQoJG5ldy1lbGVtZW50LCAkZWxlbWVudCwgc3BhY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRsaXN0OiBhcHBlbmQoJGxpc3QsICRuZXctZWxlbWVudCwgY29tbWEpO1xuICAgIC8vIElmIHRoZSBzZWxlY3RvciBkb2VzIG5vdCBjb250YWluIGhvc3QgYXQgYWxsIGl0IGlzIGVpdGhlciBhIHNoYWRvd1xuICAgIC8vIG9yIG5vcm1hbCBlbGVtZW50IHNvIGFwcGVuZCBib3RoIHRoZSBhZGRIb3N0U2VsZWN0b3IgYW5kIGhvc3QtY29udGV4dFxuICAgIC8vIEBpbmNsdWRlIGFkZC1yb290LXNlbGVjdG9yKFwiaW9uLWNvbXBvbmVudFwiLCBcIltkaXI9cnRsXVwiKVxuICAgIC8vIC0tPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgaW9uLWNvbXBvbmVudFxuICAgIC8vIC0tPiBbZGlyPXJ0bF0gaW9uLWNvbXBvbmVudFxuICAgIH0gQGVsc2Uge1xuICAgICAgJGxpc3Q6IGFwcGVuZCgkbGlzdCwgXCIjeyRhZGRIb3N0U2VsZWN0b3J9ICN7JHNlbGVjdG9yfVwiLCBjb21tYSk7XG4gICAgICAkbGlzdDogYXBwZW5kKCRsaXN0LCBcIjpob3N0LWNvbnRleHQoI3skYWRkSG9zdFNlbGVjdG9yfSkgI3skc2VsZWN0b3J9XCIsIGNvbW1hKTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRsaXN0O1xufVxuIiwiLyoqXG4gKiBJbXBvcnRlZCBpb25pYyBjb2xvciBmdW5jdGlvbnMgZm9yIFNDU1NcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEV4dHJhY3RlZCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvY29yZS9zcmMvdGhlbWVzL2lvbmljLmZ1bmN0aW9ucy5jb2xvci5zY3NzXG4gKi9cblxuLy8gR2V0cyB0aGUgYWN0aXZlIGNvbG9yJ3MgY3NzIHZhcmlhYmxlIGZyb20gYSB2YXJpYXRpb24uIEFscGhhIGlzIG9wdGlvbmFsLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4YW1wbGUgdXNhZ2U6XG4vLyBjdXJyZW50LWNvbG9yKGJhc2UpID0+IHZhcigtLWlvbi1jb2xvci1iYXNlKVxuLy8gY3VycmVudC1jb2xvcihjb250cmFzdCwgMC4xKSA9PiByZ2JhKHZhcigtLWlvbi1jb2xvci1jb250cmFzdC1yZ2IpLCAwLjEpXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIGN1cnJlbnQtY29sb3IoJHZhcmlhdGlvbiwgJGFscGhhOiBudWxsKSB7XG4gIEBpZiAkYWxwaGEgPT0gbnVsbCB7XG4gICAgQHJldHVybiB2YXIoLS1pb24tY29sb3ItI3skdmFyaWF0aW9ufSk7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gcmdiYSh2YXIoLS1pb24tY29sb3ItI3skdmFyaWF0aW9ufS1yZ2IpLCAjeyRhbHBoYX0pO1xuICB9XG59XG5cbi8vIEdldHMgdGhlIHNwZWNpZmljIGNvbG9yJ3MgY3NzIHZhcmlhYmxlIGZyb20gdGhlIG5hbWUgYW5kIHZhcmlhdGlvbi4gQWxwaGEvcmdiIGFyZSBvcHRpb25hbC5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeGFtcGxlIHVzYWdlOlxuLy8gaW9uLWNvbG9yKHByaW1hcnksIGJhc2UpID0+IHZhcigtLWlvbi1jb2xvci1wcmltYXJ5LCAjMzg4MGZmKVxuLy8gaW9uLWNvbG9yKHNlY29uZGFyeSwgY29udHJhc3QpID0+IHZhcigtLWlvbi1jb2xvci1zZWNvbmRhcnktY29udHJhc3QpXG4vLyBpb24tY29sb3IocHJpbWFyeSwgYmFzZSwgMC41KSA9PiByZ2JhKHZhcigtLWlvbi1jb2xvci1wcmltYXJ5LXJnYiwgNTYsIDEyOCwgMjU1KSwgMC41KVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBpb24tY29sb3IoJG5hbWUsICR2YXJpYXRpb24sICRhbHBoYTogbnVsbCwgJHJnYjogbnVsbCkge1xuICAkdmFsdWVzOiBtYXAtZ2V0KCRjb2xvcnMsICRuYW1lKTtcbiAgJHZhbHVlOiBtYXAtZ2V0KCR2YWx1ZXMsICR2YXJpYXRpb24pO1xuICAkdmFyaWFibGU6IC0taW9uLWNvbG9yLSN7JG5hbWV9LSN7JHZhcmlhdGlvbn07XG5cbiAgQGlmICgkdmFyaWF0aW9uID09IGJhc2UpIHtcbiAgICAkdmFyaWFibGU6IC0taW9uLWNvbG9yLSN7JG5hbWV9O1xuICB9XG5cbiAgQGlmICgkYWxwaGEpIHtcbiAgICAkdmFsdWU6IGNvbG9yLXRvLXJnYi1saXN0KCR2YWx1ZSk7XG4gICAgQHJldHVybiByZ2JhKHZhcigjeyR2YXJpYWJsZX0tcmdiLCAkdmFsdWUpLCAkYWxwaGEpO1xuICB9XG4gIEBpZiAoJHJnYikge1xuICAgICR2YWx1ZTogY29sb3ItdG8tcmdiLWxpc3QoJHZhbHVlKTtcbiAgICAkdmFyaWFibGU6ICN7JHZhcmlhYmxlfS1yZ2I7XG4gIH1cblxuICBAcmV0dXJuIHZhcigjeyR2YXJpYWJsZX0sICR2YWx1ZSk7XG59XG5cbi8vIE1peGVzIGEgY29sb3Igd2l0aCBibGFjayB0byBjcmVhdGUgaXRzIHNoYWRlLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBnZXQtY29sb3Itc2hhZGUoJGNvbG9yKSB7XG4gIEByZXR1cm4gbWl4KCMwMDAsICRjb2xvciwgMTIlKTtcbn1cblxuLy8gTWl4ZXMgYSBjb2xvciB3aXRoIHdoaXRlIHRvIGNyZWF0ZSBpdHMgdGludC5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZnVuY3Rpb24gZ2V0LWNvbG9yLXRpbnQoJGNvbG9yKSB7XG4gIEByZXR1cm4gbWl4KCNmZmYsICRjb2xvciwgMTAlKTtcbn1cblxuLy8gQ29udmVydHMgYSBjb2xvciB0byBhIGNvbW1hIHNlcGFyYXRlZCByZ2IuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIGNvbG9yLXRvLXJnYi1saXN0KCRjb2xvcikge1xuICBAcmV0dXJuICN7cmVkKCRjb2xvcil9LCN7Z3JlZW4oJGNvbG9yKX0sI3tibHVlKCRjb2xvcil9O1xufVxuIiwiLyoqXG4gKiBJbXBvcnRlZCBpb25pYyBtaXhpbnMgZm9yIFNDU1NcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEV4dHJhY3RlZCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvY29yZS9zcmMvdGhlbWVzL2lvbmljLm1peGlucy5zY3NzXG4gKi9cblxuQG1peGluIGlucHV0LWNvdmVyKCkge1xuICBAaW5jbHVkZSBwb3NpdGlvbigwLCBudWxsLCBudWxsLCAwKTtcbiAgQGluY2x1ZGUgbWFyZ2luKDApO1xuXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuXG4gIGJvcmRlcjogMDtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGN1cnNvcjogcG9pbnRlcjtcblxuICBhcHBlYXJhbmNlOiBub25lO1xuICBvdXRsaW5lOiBub25lO1xuXG4gICY6Oi1tb3otZm9jdXMtaW5uZXIge1xuICAgIGJvcmRlcjogMDtcbiAgfVxufVxuXG5AbWl4aW4gdmlzdWFsbHktaGlkZGVuKCkge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG5cbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuXG4gIGJvcmRlcjogMDtcbiAgb3V0bGluZTogMDtcbiAgY2xpcDogcmVjdCgwIDAgMCAwKTtcblxuICBvcGFjaXR5OiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xufVxuXG5AbWl4aW4gdGV4dC1pbmhlcml0KCkge1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgZm9udC1zaXplOiBpbmhlcml0O1xuICBmb250LXN0eWxlOiBpbmhlcml0O1xuICBmb250LXdlaWdodDogaW5oZXJpdDtcbiAgbGV0dGVyLXNwYWNpbmc6IGluaGVyaXQ7XG4gIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdDtcbiAgdGV4dC1pbmRlbnQ6IGluaGVyaXQ7XG4gIHRleHQtb3ZlcmZsb3c6IGluaGVyaXQ7XG4gIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0O1xuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xuICB3aGl0ZS1zcGFjZTogaW5oZXJpdDtcbiAgY29sb3I6IGluaGVyaXQ7XG59XG5cbkBtaXhpbiBidXR0b24tc3RhdGUoKSB7XG4gIEBpbmNsdWRlIHBvc2l0aW9uKDAsIDAsIDAsIDApO1xuXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblxuICBjb250ZW50OiBcIlwiO1xuXG4gIG9wYWNpdHk6IDA7XG59XG5cbi8vIEZvbnQgc21vb3RoaW5nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AbWl4aW4gZm9udC1zbW9vdGhpbmcoKSB7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xufVxuXG4vLyBHZXQgdGhlIGtleSBmcm9tIGEgbWFwIGJhc2VkIG9uIHRoZSBpbmRleFxuQGZ1bmN0aW9uIGluZGV4LXRvLWtleSgkbWFwLCAkaW5kZXgpIHtcbiAgJGtleXM6IG1hcC1rZXlzKCRtYXApO1xuXG4gIEByZXR1cm4gbnRoKCRrZXlzLCAkaW5kZXgpO1xufVxuXG5cbi8vIEJyZWFrcG9pbnQgTWl4aW5zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gQnJlYWtwb2ludCB2aWV3cG9ydCBzaXplcyBhbmQgbWVkaWEgcXVlcmllcy5cbi8vXG4vLyBCcmVha3BvaW50cyBhcmUgZGVmaW5lZCBhcyBhIG1hcCBvZiAobmFtZTogbWluaW11bSB3aWR0aCksIG9yZGVyIGZyb20gc21hbGwgdG8gbGFyZ2U6XG4vL1xuLy8gICAgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KVxuLy9cbi8vIFRoZSBtYXAgZGVmaW5lZCBpbiB0aGUgYCRzY3JlZW4tYnJlYWtwb2ludHNgIGdsb2JhbCB2YXJpYWJsZSBpcyB1c2VkIGFzIHRoZSBgJGJyZWFrcG9pbnRzYCBhcmd1bWVudCBieSBkZWZhdWx0LlxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gTWluaW11bSBicmVha3BvaW50IHdpZHRoLiBOdWxsIGZvciB0aGUgc21hbGxlc3QgKGZpcnN0KSBicmVha3BvaW50LlxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbWluKHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgNTc2cHhcbkBmdW5jdGlvbiBicmVha3BvaW50LW1pbigkbmFtZSwgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzKSB7XG4gICRtaW46IG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAkbmFtZSk7XG5cbiAgQHJldHVybiBpZigkbmFtZSAhPSBpbmRleC10by1rZXkoJGJyZWFrcG9pbnRzLCAxKSwgJG1pbiwgbnVsbCk7XG59XG5cbi8vIFJldHVybnMgYSBibGFuayBzdHJpbmcgaWYgc21hbGxlc3QgYnJlYWtwb2ludCwgb3RoZXJ3aXNlIHJldHVybnMgdGhlIG5hbWUgd2l0aCBhIGRhc2ggaW5mcm9udC5cbi8vIFVzZWZ1bCBmb3IgbWFraW5nIHJlc3BvbnNpdmUgdXRpbGl0aWVzLlxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtaW5maXgoeHMsICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweCkpXG4vLyAgICBcIlwiICAoUmV0dXJucyBhIGJsYW5rIHN0cmluZylcbi8vICAgID4+IGJyZWFrcG9pbnQtaW5maXgoc20sICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweCkpXG4vLyAgICBcIi1zbVwiXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1pbmZpeCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzKSB7XG4gIEByZXR1cm4gaWYoYnJlYWtwb2ludC1taW4oJG5hbWUsICRicmVha3BvaW50cykgPT0gbnVsbCwgXCJcIiwgXCItI3skbmFtZX1cIik7XG59XG5cbi8vIE1lZGlhIG9mIGF0IGxlYXN0IHRoZSBtaW5pbXVtIGJyZWFrcG9pbnQgd2lkdGguIE5vIHF1ZXJ5IGZvciB0aGUgc21hbGxlc3QgYnJlYWtwb2ludC5cbi8vIE1ha2VzIHRoZSBAY29udGVudCBhcHBseSB0byB0aGUgZ2l2ZW4gYnJlYWtwb2ludCBhbmQgd2lkZXIuXG5AbWl4aW4gbWVkaWEtYnJlYWtwb2ludC11cCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzKSB7XG4gICRtaW46IGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICBAaWYgJG1pbiB7XG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICRtaW4pIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gTmFtZSBvZiB0aGUgbmV4dCBicmVha3BvaW50LCBvciBudWxsIGZvciB0aGUgbGFzdCBicmVha3BvaW50LlxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbmV4dChzbSlcbi8vICAgIG1kXG4vLyAgICA+PiBicmVha3BvaW50LW5leHQoc20sICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweCkpXG4vLyAgICBtZFxuLy8gICAgPj4gYnJlYWtwb2ludC1uZXh0KHNtLCAkYnJlYWtwb2ludC1uYW1lczogKHhzIHNtIG1kIGxnIHhsKSlcbi8vICAgIG1kXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1uZXh0KCRuYW1lLCAkYnJlYWtwb2ludHM6ICRzY3JlZW4tYnJlYWtwb2ludHMsICRicmVha3BvaW50LW5hbWVzOiBtYXAta2V5cygkYnJlYWtwb2ludHMpKSB7XG4gICRuOiBpbmRleCgkYnJlYWtwb2ludC1uYW1lcywgJG5hbWUpO1xuICBAcmV0dXJuIGlmKCRuIDwgbGVuZ3RoKCRicmVha3BvaW50LW5hbWVzKSwgbnRoKCRicmVha3BvaW50LW5hbWVzLCAkbiArIDEpLCBudWxsKTtcbn1cblxuLy8gTWF4aW11bSBicmVha3BvaW50IHdpZHRoLiBOdWxsIGZvciB0aGUgc21hbGxlc3QgKGZpcnN0KSBicmVha3BvaW50LlxuLy8gVGhlIG1heGltdW0gdmFsdWUgaXMgcmVkdWNlZCBieSAwLjAycHggdG8gd29yayBhcm91bmQgdGhlIGxpbWl0YXRpb25zIG9mXG4vLyBgbWluLWAgYW5kIGBtYXgtYCBwcmVmaXhlcyBhbmQgdmlld3BvcnRzIHdpdGggZnJhY3Rpb25hbCB3aWR0aHMuXG4vL1xuLy8gU2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9tZWRpYXF1ZXJpZXMtNC8jbXEtbWluLW1heFxuLy8gVXNlcyAwLjAycHggcmF0aGVyIHRoYW4gMC4wMXB4IHRvIHdvcmsgYXJvdW5kIGEgY3VycmVudCByb3VuZGluZyBidWcgaW4gU2FmYXJpLlx0Ly8gVXNlcyAwLjAycHggcmF0aGVyIHRoYW4gMC4wMXB4IHRvIHdvcmsgYXJvdW5kIGEgY3VycmVudCByb3VuZGluZyBidWcgaW4gU2FmYXJpLlxuLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNzgyNjFcdC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTc4MjYxXG4vL1xuLy8gICAgPj4gYnJlYWtwb2ludC1tYXgobWQsICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweCkpXG4vLyAgICA3NjcuOThweFxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtbWF4KCRuYW1lLCAkYnJlYWtwb2ludHM6ICRzY3JlZW4tYnJlYWtwb2ludHMpIHtcbiAgJG1heDogbWFwLWdldCgkYnJlYWtwb2ludHMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbWF4IGFuZCAkbWF4ID4gMCwgJG1heCAtIC4wMiwgbnVsbCk7XG59XG5cbi8vIE1lZGlhIG9mIGF0IG1vc3QgdGhlIG1heGltdW0gYnJlYWtwb2ludCB3aWR0aC4gTm8gcXVlcnkgZm9yIHRoZSBsYXJnZXN0IGJyZWFrcG9pbnQuXG4vLyBNYWtlcyB0aGUgQGNvbnRlbnQgYXBwbHkgdG8gdGhlIGdpdmVuIGJyZWFrcG9pbnQgYW5kIG5hcnJvd2VyLlxuQG1peGluIG1lZGlhLWJyZWFrcG9pbnQtZG93bigkbmFtZSwgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzKSB7XG4gICRtYXg6IGJyZWFrcG9pbnQtbWF4KCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICBAaWYgJG1heCB7XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtYXgpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuXG4vLyBUZXh0IERpcmVjdGlvbiAtIGx0ciAvIHJ0bFxuLy9cbi8vIENTUyBkZWZhdWx0cyB0byB1c2UgdGhlIGx0ciBjc3MsIGFuZCBhZGRzIFtkaXI9cnRsXSBzZWxlY3RvcnNcbi8vIHRvIG92ZXJyaWRlIGx0ciBkZWZhdWx0cy5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQG1peGluIG11bHRpLWRpcigpIHtcbiAgQGNvbnRlbnQ7XG5cbiAgLy8gJHJvb3Q6ICN7Jn07XG4gIC8vIEBhdC1yb290IFtkaXJdIHtcbiAgLy8gICAjeyRyb290fSB7XG4gIC8vICAgICBAY29udGVudDtcbiAgLy8gICB9XG4gIC8vIH1cbn1cblxuQG1peGluIHJ0bCgpIHtcbiAgJHJvb3Q6ICN7Jn07XG5cbiAgJHJvb3RTcGxpdDogc3RyLXNwbGl0KCRyb290LCBcIixcIik7XG4gICRzZWxlY3RvcnM6ICN7YWRkLXJvb3Qtc2VsZWN0b3IoJHJvb3QsIFwiW2Rpcj1ydGxdXCIpfTtcbiAgJHNlbGVjdG9yc1NwbGl0OiBzdHItc3BsaXQoJHNlbGVjdG9ycywgXCIsXCIpO1xuXG4gICRob3N0Q29udGV4dFNlbGVjdG9yczogKCk7XG4gICRyZXN0U2VsZWN0b3JzOiAoKTtcbiAgJGRpclNlbGVjdG9yczogKCk7XG5cbiAgLy8gU2VsZWN0b3JzIG11c3QgYmUgc3BsaXQgaW50byBpbmRpdmlkdWFsIHNlbGVjdG9ycyBpbiBjYXNlIHRoZSBicm93c2VyXG4gIC8vIGRvZXNuJ3Qgc3VwcG9ydCBhIHNwZWNpZmljIHNlbGVjdG9yLlxuICAvLyBGb3IgZXhhbXBsZSwgRmlyZWZveCBhbmQgU2FmYXJpIGRvZXNuJ3Qgc3VwcG9ydCBgOmhvc3QtY29udGV4dCgpYC5cbiAgLy8gSWYgYW4gaW52YWxpZCBzZWxlY3RvciBpcyB1c2VkLCB0aGVuIHRoZSBlbnRpcmUgZ3JvdXAgb2Ygc2VsZWN0b3JzXG4gIC8vIHdpbGwgYmUgaWdub3JlZC5cbiAgLy8gQGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy0zLyNncm91cGluZ1xuICBAZWFjaCAkc2VsZWN0b3IgaW4gJHNlbGVjdG9yc1NwbGl0IHtcbiAgICAvLyBHcm91cCB0aGUgc2VsZWN0b3JzIGJhY2sgaW50byBhIHNpbmdsZSBzZWxlY3RvciB0byBvcHRpbWl6ZSB0aGUgb3V0cHV0LlxuICAgIEBpZiBzdHItaW5kZXgoJHNlbGVjdG9yLCBcIjpob3N0LWNvbnRleHRcIikge1xuICAgICAgJGhvc3RDb250ZXh0U2VsZWN0b3JzOiBhcHBlbmQoJGhvc3RDb250ZXh0U2VsZWN0b3JzLCAkc2VsZWN0b3IsIGNvbW1hKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIC8vIEdyb3VwIHRoZSBzZWxlY3RvcnMgYmFjayBpbnRvIGEgc2luZ2xlIHNlbGVjdG9yIHRvIG9wdGltaXplIHRoZSBvdXRwdXQuXG4gICAgICAkcmVzdFNlbGVjdG9yczogYXBwZW5kKCRyZXN0U2VsZWN0b3JzLCAkc2VsZWN0b3IsIGNvbW1hKTtcbiAgICB9XG4gIH1cblxuICAvLyBTdXBwb3J0ZWQgYnkgQ2hyb21lLlxuICBAaWYgbGVuZ3RoKCRob3N0Q29udGV4dFNlbGVjdG9ycykgPiAwIHtcbiAgICBAYXQtcm9vdCAjeyRob3N0Q29udGV4dFNlbGVjdG9yc30ge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gU3VwcG9ydGVkIGJ5IGFsbCBicm93c2Vycy5cbiAgQGlmIGxlbmd0aCgkcmVzdFNlbGVjdG9ycykgPiAwIHtcbiAgICBAYXQtcm9vdCAjeyRyZXN0U2VsZWN0b3JzfSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cblxuICAvLyBJZiBicm93c2VyIGNhbiBzdXBwb3J0IGA6ZGlyKClgLCB0aGVuIGFkZCB0aGUgYDpkaXIoKWAgc2VsZWN0b3JzLlxuICAvLyBAc3VwcG9ydHMgc2VsZWN0b3IoOmRpcihydGwpKSB7IC8vIEAgSU1QT1RBTlQgTk9URTogVGhpcyBoYXMgYmVlbiByZW1vdmVkIGJlY2F1c2Ugc2VsZWN0b3IgZnVuY3Rpb24gaXMgbm90IHN1cHBvcnRlZCBpbiBjdXJyZW50IFNDU1NcbiAgLy8gQWRkaW5nIDpkaXIoKSBpbiBjYXNlIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBgOmhvc3QtY29udGV4dCgpYCBhbmQgZG9lcyBzdXBwb3J0IGA6ZGlyKClgLlxuICAvLyBgOmhvc3QtY29udGV4dCgpYCBpcyBhZGRlZDpcbiAgLy8gLSB0aHJvdWdoIHRoZSBgYWRkLXJvb3Qtc2VsZWN0b3IoKWAgZnVuY3Rpb24uXG4gIC8vIC0gZmlyc3Qgc28gdGhhdCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYDpkaXIoKWAuXG4gIC8vIEZvciBleGFtcGxlLFxuICAvLyAtIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IGA6aG9zdC1jb250ZXh0KClgLCBidXQgZG9lcyBzdXBwb3J0IGA6ZGlyKClgLlxuICAvLyAtIFNhZmFyaSBkb2Vzbid0IHN1cHBvcnQgYDpob3N0LWNvbnRleHQoKWAsIGJ1dCBTYWZhcmkgMTYuNCsgc3VwcG9ydHMgYDpkaXIoKWBcbiAgLy8gQGxpbmsgaHR0cHM6Ly93ZWJraXQub3JnL2Jsb2cvMTM5NjYvd2Via2l0LWZlYXR1cmVzLWluLXNhZmFyaS0xNi00L1xuICBAZWFjaCAkc2VsZWN0b3IgaW4gJHJvb3RTcGxpdCB7XG4gICAgJGRpclNlbGVjdG9yOiBcIiN7JHNlbGVjdG9yfTpkaXIocnRsKVwiO1xuICAgIC8vIEdyb3VwIHRoZSBzZWxlY3RvcnMgYmFjayBpbnRvIGEgc2luZ2xlIHNlbGVjdG9yIHRvIG9wdGltaXplIHRoZSBvdXRwdXQuXG4gICAgJGRpclNlbGVjdG9yczogYXBwZW5kKCRkaXJTZWxlY3RvcnMsICRkaXJTZWxlY3RvciwgY29tbWEpO1xuICB9XG5cbiAgLy8gU3VwcG9ydGVkIGJ5IEZpcmVmb3guXG4gIEBpZiBsZW5ndGgoJGRpclNlbGVjdG9ycykgPiAwIHtcbiAgICBAYXQtcm9vdCAjeyRkaXJTZWxlY3RvcnN9IHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICAvL31cbn1cblxuQG1peGluIGx0cigpIHtcbiAgQGNvbnRlbnQ7XG59XG5cblxuLy8gU1ZHIEJhY2tncm91bmQgSW1hZ2UgTWl4aW5cbi8vIEBwYXJhbSB7c3RyaW5nfSAkc3ZnXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gc3ZnLWJhY2tncm91bmQtaW1hZ2UoJHN2ZywgJGZsaXAtcnRsOiBmYWxzZSkge1xuICAkdXJsOiB1cmwtZW5jb2RlKCRzdmcpO1xuICAkdmlld0JveDogc3RyLXNwbGl0KHN0ci1leHRyYWN0KCRzdmcsIFwidmlld0JveD0nXCIsIFwiJ1wiKSwgXCIgXCIpO1xuXG4gIEBpZiAkZmxpcC1ydGwgIT0gdHJ1ZSBvciAkdmlld0JveCA9PSBudWxsIHtcbiAgICBAaW5jbHVkZSBtdWx0aS1kaXIoKSB7XG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwjeyR1cmx9XCIpO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgJHRyYW5zZm9ybTogXCJ0cmFuc2Zvcm09J3RyYW5zbGF0ZSgje250aCgkdmlld0JveCwgMyl9LCAwKSBzY2FsZSgtMSwgMSknXCI7XG4gICAgJGZsaXBwZWQtdXJsOiAkc3ZnO1xuICAgICRmbGlwcGVkLXVybDogc3RyLXJlcGxhY2UoJGZsaXBwZWQtdXJsLCBcIjxwYXRoXCIsIFwiPHBhdGggI3skdHJhbnNmb3JtfVwiKTtcbiAgICAkZmxpcHBlZC11cmw6IHN0ci1yZXBsYWNlKCRmbGlwcGVkLXVybCwgXCI8bGluZVwiLCBcIjxsaW5lICN7JHRyYW5zZm9ybX1cIik7XG4gICAgJGZsaXBwZWQtdXJsOiBzdHItcmVwbGFjZSgkZmxpcHBlZC11cmwsIFwiPHBvbHlnb25cIiwgXCI8cG9seWdvbiAjeyR0cmFuc2Zvcm19XCIpO1xuICAgICRmbGlwcGVkLXVybDogdXJsLWVuY29kZSgkZmxpcHBlZC11cmwpO1xuXG4gICAgQGluY2x1ZGUgbHRyICgpIHtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCN7JHVybH1cIik7XG4gICAgfVxuICAgIEBpbmNsdWRlIHJ0bCgpIHtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCN7JGZsaXBwZWQtdXJsfVwiKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gQWRkIHByb3BlcnR5IGhvcml6b250YWxcbi8vIEBwYXJhbSB7c3RyaW5nfSAkc3RhcnRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gcHJvcGVydHktaG9yaXpvbnRhbCgkcHJvcCwgJHN0YXJ0LCAkZW5kOiAkc3RhcnQpIHtcbiAgQGlmICRzdGFydCA9PSAwIGFuZCAkZW5kID09IDAge1xuICAgICN7JHByb3B9LWxlZnQ6ICRzdGFydDtcbiAgICAjeyRwcm9wfS1yaWdodDogJGVuZDtcblxuICB9IEBlbHNlIHtcbiAgICAtd2Via2l0LSN7JHByb3B9LXN0YXJ0OiAkc3RhcnQ7XG4gICAgI3skcHJvcH0taW5saW5lLXN0YXJ0OiAkc3RhcnQ7XG4gICAgLXdlYmtpdC0jeyRwcm9wfS1lbmQ6ICRlbmQ7XG4gICAgI3skcHJvcH0taW5saW5lLWVuZDogJGVuZDtcbiAgfVxufVxuXG4vLyBBZGQgcHJvcGVydHkgZm9yIGFsbCBkaXJlY3Rpb25zXG4vLyBAcGFyYW0ge3N0cmluZ30gJHByb3Bcbi8vIEBwYXJhbSB7c3RyaW5nfSAkdG9wXG4vLyBAcGFyYW0ge3N0cmluZ30gJGVuZFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRib3R0b21cbi8vIEBwYXJhbSB7c3RyaW5nfSAkc3RhcnRcbi8vIEBwYXJhbSB7Ym9vbGVhbn0gJGNvbnRlbnQgaW5jbHVkZSBjb250ZW50IG9yIHVzZSBkZWZhdWx0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gcHJvcGVydHkoJHByb3AsICR0b3AsICRlbmQ6ICR0b3AsICRib3R0b206ICR0b3AsICRzdGFydDogJGVuZCkge1xuICBAaW5jbHVkZSBwcm9wZXJ0eS1ob3Jpem9udGFsKCRwcm9wLCAkc3RhcnQsICRlbmQpO1xuICAjeyRwcm9wfS10b3A6ICR0b3A7XG4gICN7JHByb3B9LWJvdHRvbTogJGJvdHRvbTtcbn1cblxuLy8gQWRkIHBhZGRpbmcgaG9yaXpvbnRhbFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRzdGFydFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBtaXhpbiBwYWRkaW5nLWhvcml6b250YWwoJHN0YXJ0LCAkZW5kOiAkc3RhcnQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHktaG9yaXpvbnRhbChwYWRkaW5nLCAkc3RhcnQsICRlbmQpO1xufVxuXG4vLyBBZGQgcGFkZGluZyBmb3IgYWxsIGRpcmVjdGlvbnNcbi8vIEBwYXJhbSB7c3RyaW5nfSAkdG9wXG4vLyBAcGFyYW0ge3N0cmluZ30gJGVuZFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRib3R0b21cbi8vIEBwYXJhbSB7c3RyaW5nfSAkc3RhcnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBtaXhpbiBwYWRkaW5nKCR0b3AsICRlbmQ6ICR0b3AsICRib3R0b206ICR0b3AsICRzdGFydDogJGVuZCkge1xuICBAaW5jbHVkZSBwcm9wZXJ0eShwYWRkaW5nLCAkdG9wLCAkZW5kLCAkYm90dG9tLCAkc3RhcnQpO1xufVxuXG4vLyBBZGQgbWFyZ2luIGhvcml6b250YWxcbi8vIEBwYXJhbSB7c3RyaW5nfSAkc3RhcnRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gbWFyZ2luLWhvcml6b250YWwoJHN0YXJ0LCAkZW5kOiAkc3RhcnQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHktaG9yaXpvbnRhbChtYXJnaW4sICRzdGFydCwgJGVuZCk7XG59XG5cbi8vIEFkZCBtYXJnaW4gZm9yIGFsbCBkaXJlY3Rpb25zXG4vLyBAcGFyYW0ge3N0cmluZ30gJHRvcFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkYm90dG9tXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gbWFyZ2luKCR0b3AsICRlbmQ6ICR0b3AsICRib3R0b206ICR0b3AsICRzdGFydDogJGVuZCkge1xuICBAaW5jbHVkZSBwcm9wZXJ0eShtYXJnaW4sICR0b3AsICRlbmQsICRib3R0b20sICRzdGFydCk7XG59XG5cbi8vIEFkZCBwb3NpdGlvbiBob3Jpem9udGFsXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0IC0gYW1vdW50IHRvIHBvc2l0aW9uIHN0YXJ0XG4vLyBAcGFyYW0ge3N0cmluZ30gJGVuZCAtIGFtb3VudCB0byBsZWZ0OiAwOyBlbmRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBtaXhpbiBwb3NpdGlvbi1ob3Jpem9udGFsKCRzdGFydDogbnVsbCwgJGVuZDogbnVsbCkge1xuICBAaWYgJHN0YXJ0ID09ICRlbmQge1xuICAgIEBpbmNsdWRlIG11bHRpLWRpcigpIHtcbiAgICAgIGxlZnQ6ICRzdGFydDtcbiAgICAgIHJpZ2h0OiAkZW5kO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGF0LXJvb3Qge1xuICAgICAgQHN1cHBvcnRzIChpbnNldC1pbmxpbmUtc3RhcnQ6IDApIHtcbiAgICAgICAgJiB7XG4gICAgICAgICAgaW5zZXQtaW5saW5lLXN0YXJ0OiAkc3RhcnQ7XG4gICAgICAgICAgaW5zZXQtaW5saW5lLWVuZDogJGVuZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE8gRlctMzc2NlxuICAgIEBhdC1yb290IHtcbiAgICAgIEBzdXBwb3J0cyBub3QgKGluc2V0LWlubGluZS1zdGFydDogMCkge1xuICAgICAgICAmIHtcbiAgICAgICAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICAgICAgICBsZWZ0OiAkc3RhcnQ7XG4gICAgICAgICAgICByaWdodDogJGVuZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgICAgICAgbGVmdDogdW5zZXQ7XG4gICAgICAgICAgICByaWdodDogdW5zZXQ7XG5cbiAgICAgICAgICAgIGxlZnQ6ICRlbmQ7XG4gICAgICAgICAgICByaWdodDogJHN0YXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBZGQgcG9zaXRpb24gZm9yIGFsbCBkaXJlY3Rpb25zXG4vLyBAcGFyYW0ge3N0cmluZ30gJHRvcFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkYm90dG9tXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gcG9zaXRpb24oJHRvcDogbnVsbCwgJGVuZDogbnVsbCwgJGJvdHRvbTogbnVsbCwgJHN0YXJ0OiBudWxsKSB7XG4gIEBpbmNsdWRlIHBvc2l0aW9uLWhvcml6b250YWwoJHN0YXJ0LCAkZW5kKTtcbiAgdG9wOiAkdG9wO1xuICBib3R0b206ICRib3R0b207XG59XG5cbi8vIEFkZCBib3JkZXIgZm9yIGFsbCBkaXJlY3Rpb25zXG4vLyBAcGFyYW0ge3N0cmluZ30gJHRvcFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkYm90dG9tXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gYm9yZGVyKCR0b3AsICRlbmQ6ICR0b3AsICRib3R0b206ICR0b3AsICRzdGFydDogJGVuZCkge1xuICBAaW5jbHVkZSBwcm9wZXJ0eShib3JkZXIsICR0b3AsICRlbmQsICRib3R0b20sICRzdGFydCk7XG59XG5cbi8vIEFkZCBib3JkZXIgcmFkaXVzIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICR0b3Atc3RhcnRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkdG9wLWVuZFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRib3R0b20tZW5kXG4vLyBAcGFyYW0ge3N0cmluZ30gJGJvdHRvbS1zdGFydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIGJvcmRlci1yYWRpdXMoJHRvcC1zdGFydCwgJHRvcC1lbmQ6ICR0b3Atc3RhcnQsICRib3R0b20tZW5kOiAkdG9wLXN0YXJ0LCAkYm90dG9tLXN0YXJ0OiAkdG9wLWVuZCkge1xuICBAaWYgJHRvcC1zdGFydCA9PSAkdG9wLWVuZCBhbmQgJHRvcC1zdGFydCA9PSAkYm90dG9tLWVuZCBhbmQgJHRvcC1zdGFydCA9PSAkYm90dG9tLXN0YXJ0IHtcbiAgICBAaW5jbHVkZSBtdWx0aS1kaXIoKSB7XG4gICAgICBib3JkZXItcmFkaXVzOiAkdG9wLXN0YXJ0O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogJHRvcC1zdGFydDtcbiAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAkdG9wLWVuZDtcbiAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAkYm90dG9tLWVuZDtcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRib3R0b20tc3RhcnQ7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogJHRvcC1lbmQ7XG4gICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJHRvcC1zdGFydDtcbiAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAkYm90dG9tLXN0YXJ0O1xuICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJGJvdHRvbS1lbmQ7XG4gICAgfVxuICB9XG59XG5cbi8vIEFkZCBkaXJlY3Rpb24gZm9yIGFsbCBkaXJlY3Rpb25zXG4vLyBAcGFyYW0ge3N0cmluZ30gJGRpciAtIERpcmVjdGlvbiBvbiBMVFJcbkBtaXhpbiBkaXJlY3Rpb24oJGRpcikge1xuICAkb3RoZXItZGlyOiBudWxsO1xuXG4gIEBpZiAkZGlyID09IGx0ciB7XG4gICAgJG90aGVyLWRpcjogcnRsO1xuICB9IEBlbHNlIHtcbiAgICAkb3RoZXItZGlyOiBsdHI7XG4gIH1cblxuICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgZGlyZWN0aW9uOiAkZGlyO1xuICB9XG4gIEBpbmNsdWRlIHJ0bCgpIHtcbiAgICBkaXJlY3Rpb246ICRvdGhlci1kaXI7XG4gIH1cbn1cblxuLy8gQWRkIGZsb2F0IGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICRzaWRlXG4vLyBAcGFyYW0ge3N0cmluZ30gJGRlY29yYXRvciAtICFpbXBvcnRhbnRcbkBtaXhpbiBmbG9hdCgkc2lkZSwgJGRlY29yYXRvcjogbnVsbCkge1xuICBAaWYgJHNpZGUgPT0gc3RhcnQge1xuICAgIEBpbmNsdWRlIGx0cigpIHtcbiAgICAgIGZsb2F0OiBsZWZ0ICRkZWNvcmF0b3I7XG4gICAgfVxuICAgIEBpbmNsdWRlIHJ0bCgpIHtcbiAgICAgIGZsb2F0OiByaWdodCAkZGVjb3JhdG9yO1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkc2lkZSA9PSBlbmQge1xuICAgIEBpbmNsdWRlIGx0cigpIHtcbiAgICAgIGZsb2F0OiByaWdodCAkZGVjb3JhdG9yO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICBmbG9hdDogbGVmdCAkZGVjb3JhdG9yO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgbXVsdGktZGlyKCkge1xuICAgICAgZmxvYXQ6ICRzaWRlICRkZWNvcmF0b3I7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBiYWNrZ3JvdW5kLXBvc2l0aW9uKCRob3Jpem9udGFsLCAkaG9yaXpvbnRhbC1hbW91bnQ6IG51bGwsICR2ZXJ0aWNhbDogbnVsbCwgJHZlcnRpY2FsLWFtb3VudDogbnVsbCkge1xuICBAaWYgJGhvcml6b250YWwgPT0gc3RhcnQgb3IgJGhvcml6b250YWwgPT0gZW5kIHtcbiAgICAkaG9yaXpvbnRhbC1sdHI6IG51bGw7XG4gICAgJGhvcml6b250YWwtcnRsOiBudWxsO1xuICAgIEBpZiAkaG9yaXpvbnRhbCA9PSBzdGFydCB7XG4gICAgICAkaG9yaXpvbnRhbC1sdHI6IGxlZnQ7XG4gICAgICAkaG9yaXpvbnRhbC1ydGw6IHJpZ2h0O1xuICAgIH0gQGVsc2Uge1xuICAgICAgJGhvcml6b250YWwtbHRyOiByaWdodDtcbiAgICAgICRob3Jpem9udGFsLXJ0bDogbGVmdDtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAkaG9yaXpvbnRhbC1sdHIgJGhvcml6b250YWwtYW1vdW50ICR2ZXJ0aWNhbCAkdmVydGljYWwtYW1vdW50O1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAkaG9yaXpvbnRhbC1ydGwgJGhvcml6b250YWwtYW1vdW50ICR2ZXJ0aWNhbCAkdmVydGljYWwtYW1vdW50O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgbXVsdGktZGlyKCkge1xuICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogJGhvcml6b250YWwgJGhvcml6b250YWwtYW1vdW50ICR2ZXJ0aWNhbCAkdmVydGljYWwtYW1vdW50O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gdHJhbnNmb3JtLW9yaWdpbigkeC1heGlzLCAkeS1heGlzOiBudWxsKSB7XG4gIEBpZiAkeC1heGlzID09IHN0YXJ0IHtcbiAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0ICR5LWF4aXM7XG4gICAgfVxuICAgIEBpbmNsdWRlIHJ0bCgpIHtcbiAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0ICR5LWF4aXM7XG4gICAgfVxuICB9IEBlbHNlIGlmICR4LWF4aXMgPT0gZW5kIHtcbiAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCAkeS1heGlzO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0ICR5LWF4aXM7XG4gICAgfVxuICB9IEBlbHNlIGlmICR4LWF4aXMgPT0gbGVmdCBvciAkeC1heGlzID09IHJpZ2h0IHtcbiAgICBAaW5jbHVkZSBtdWx0aS1kaXIoKSB7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAkeC1heGlzICR5LWF4aXM7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAkeC1heGlzICR5LWF4aXM7XG4gICAgfVxuICAgIEBpbmNsdWRlIHJ0bCgpIHtcbiAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNhbGMoMTAwJSAtICN7JHgtYXhpc30pICR5LWF4aXM7XG4gICAgfVxuICB9XG59XG5cbi8vIEFkZCB0cmFuc2Zvcm0gZm9yIGFsbCBkaXJlY3Rpb25zXG4vLyBAcGFyYW0ge3N0cmluZ30gJHRyYW5zZm9ybXMgLSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiB0cmFuc2Zvcm1zXG5AbWl4aW4gdHJhbnNmb3JtKCR0cmFuc2Zvcm1zLi4uKSB7XG4gICRleHRyYTogbnVsbDtcblxuICAkeDogbnVsbDtcbiAgJGx0ci10cmFuc2xhdGU6IG51bGw7XG4gICRydGwtdHJhbnNsYXRlOiBudWxsO1xuXG4gIEBlYWNoICR0cmFuc2Zvcm0gaW4gJHRyYW5zZm9ybXMge1xuICAgIEBpZiAoc3RyLWluZGV4KCR0cmFuc2Zvcm0sIHRyYW5zbGF0ZTNkKSkge1xuICAgICAgJHRyYW5zZm9ybTogc3RyLXJlcGxhY2UoJHRyYW5zZm9ybSwgJ3RyYW5zbGF0ZTNkKCcpO1xuICAgICAgJHRyYW5zZm9ybTogc3RyLXJlcGxhY2UoJHRyYW5zZm9ybSwgJyknKTtcblxuICAgICAgJGNvb3JkaW5hdGVzOiBzdHItc3BsaXQoJHRyYW5zZm9ybSwgJywnKTtcblxuICAgICAgJHg6IG50aCgkY29vcmRpbmF0ZXMsIDEpO1xuICAgICAgJHk6IG50aCgkY29vcmRpbmF0ZXMsIDIpO1xuICAgICAgJHo6IG50aCgkY29vcmRpbmF0ZXMsIDMpO1xuXG4gICAgICAkbHRyLXRyYW5zbGF0ZTogdHJhbnNsYXRlM2QoJHgsICR5LCAkeik7XG4gICAgICAkcnRsLXRyYW5zbGF0ZTogdHJhbnNsYXRlM2QoY2FsYygtMSAqICN7JHh9KSwgJHksICR6KTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIEBpZiAkZXh0cmEgPT0gbnVsbCB7XG4gICAgICAgICRleHRyYTogJHRyYW5zZm9ybTtcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICAkZXh0cmE6ICRleHRyYSAkdHJhbnNmb3JtO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBpZiAkeCA9PSAnMCcgb3IgJHggPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbXVsdGktZGlyKCkge1xuICAgICAgdHJhbnNmb3JtOiAkbHRyLXRyYW5zbGF0ZSAkZXh0cmE7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICB0cmFuc2Zvcm06ICRsdHItdHJhbnNsYXRlICRleHRyYTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICB0cmFuc2Zvcm06ICRydGwtdHJhbnNsYXRlICRleHRyYTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogSW1wb3J0ZWQgaW9uaWMgbWl4aW5zIGZvciBTQ1NTIGZyb20gZGlmZmVyZW50IGNvbXBvbmVudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEV4dHJhY3RlZCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvY29yZS9zcmMvY29tcG9uZW50cy9ncmlkL2dyaWQubWl4aW5zLnNjc3NcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2lvbmljLWZyYW1ld29yay9ibG9iL21hc3Rlci9jb3JlL3NyYy9jb21wb25lbnRzL2l0ZW0vaXRlbS5taXhpbnMuc2Nzc1xuICovXG5cbi8vIFJlc3BvbnNpdmUgTWl4aW5zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbi8vIENyZWF0ZXMgYSBmaXhlZCB3aWR0aCBmb3IgdGhlIGdyaWQgYmFzZWQgb24gdGhlIHNjcmVlbiBzaXplXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQG1peGluIG1ha2UtZ3JpZC13aWR0aHMoJHdpZHRoczogJGdyaWQtd2lkdGhzLCAkYnJlYWtwb2ludHM6ICRzY3JlZW4tYnJlYWtwb2ludHMpIHtcbiAgQGVhY2ggJGJyZWFrcG9pbnQsICR3aWR0aCBpbiAkd2lkdGhzIHtcbiAgICBAaW5jbHVkZSBtZWRpYS1icmVha3BvaW50LXVwKCRicmVha3BvaW50LCAkYnJlYWtwb2ludHMpIHtcbiAgICAgIHdpZHRoOiAkd2lkdGg7XG4gICAgfVxuICB9XG5cbiAgbWF4LXdpZHRoOiAxMDAlO1xufVxuXG5cbi8vIEFkZHMgcGFkZGluZyB0byB0aGUgZWxlbWVudCBiYXNlZCBvbiBicmVha3BvaW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBtaXhpbiBtYWtlLWJyZWFrcG9pbnQtcGFkZGluZygkcGFkZGluZ3MpIHtcbiAgQGVhY2ggJGJyZWFrcG9pbnQgaW4gbWFwLWtleXMoJHBhZGRpbmdzKSB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC11cCgkYnJlYWtwb2ludCkge1xuICAgICAgJHBhZGRpbmc6IG1hcC1nZXQoJHBhZGRpbmdzLCAkYnJlYWtwb2ludCk7XG5cbiAgICAgIEBpbmNsdWRlIHBhZGRpbmcoJHBhZGRpbmcpO1xuICAgIH1cbiAgfVxufVxuXG5cbi8vIEl0ZW0gTWl4aW5zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AbWl4aW4gaXRlbS1wdXNoLXN2Zy11cmwoJGZpbGwpIHtcbiAgJGl0ZW0tZGV0YWlsLXB1c2gtc3ZnOiBcIjxzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgMTIgMjAnPjxwYXRoIGQ9J00yLDIwbC0yLTJsOC04TDAsMmwyLTJsMTAsMTBMMiwyMHonIGZpbGw9JyN7JGZpbGx9Jy8+PC9zdmc+XCI7XG5cbiAgQGluY2x1ZGUgc3ZnLWJhY2tncm91bmQtaW1hZ2UoJGl0ZW0tZGV0YWlsLXB1c2gtc3ZnLCB0cnVlKTtcbn1cbiIsIkB1c2UgXCJzYXNzOm1hdGhcIiBhcyBtYXRoO1xuXG4vKipcbiAqIEFwcCBjdXN0b20gbWl4aW5zIGZvciBTQ1NTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQbGFjZSBoZXJlIG91ciBjdXN0b20gbWl4aW5zLlxuICovXG5cbi8vIE1peGVzIGEgY29sb3Igd2l0aCBibGFjayB0byBjcmVhdGUgaXRzIHNoYWRlLlxuLy8gRGVmYXVsdCB0byBib290c3RyYXAgbGV2ZWwgNi5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZnVuY3Rpb24gZ2V0LWNvbG9yLXNoYWRlLXBlcmNlbnQoJGNvbG9yLCAkcGVyY2VudDogNDglKSB7XG4gICAgQHJldHVybiBtaXgoIzAwMCwgJGNvbG9yLCAkcGVyY2VudCk7XG59XG5cbi8vIE1peGVzIGEgY29sb3Igd2l0aCB3aGl0ZSB0byBjcmVhdGUgaXRzIHRpbnQuXG4vLyBEZWZhdWx0IHRvIGJvb3RzdHJhcCBsZXZlbCAtMTAuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIGdldC1jb2xvci10aW50LXBlcmNlbnQoJGNvbG9yLCAkcGVyY2VudDogODAlKSB7XG4gICAgQHJldHVybiBtaXgoI2ZmZiwgJGNvbG9yLCAkcGVyY2VudCk7XG59XG5cbi8vIElvbmljIENvbG9yc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEdlbmVyYXRlcyB0aGUgY29sb3IgY2xhc3NlcyBhbmQgdmFyaWFibGVzIGJhc2VkIG9uIHRoZVxuLy8gY29sb3JzIG1hcFxuXG5AbWl4aW4gZ2VuZXJhdGUtY29sb3IoJGNvbG9yLW5hbWUsICRjb2xvcnMsICR0aGVtZSkge1xuICAgICRjb2xvci10aGVtZXM6IG1hcC1nZXQoJGNvbG9ycywgJGNvbG9yLW5hbWUpO1xuICAgICRiYXNlOiBtYXAtZ2V0KCRjb2xvci10aGVtZXMsICR0aGVtZSk7XG5cbiAgICBAaWYgJHRoZW1lID09ICdkYXJrJyB7XG4gICAgICAgICRiYXNlOiBtaXgobWFwLWdldCgkY29sb3ItdGhlbWVzLCAnbGlnaHQnKSwgd2hpdGUsIDgwJSkgIWRlZmF1bHQ7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgZ2VuZXJhdGUtY29sb3ItdmFyaWFudHMoJGNvbG9yLW5hbWUsICRiYXNlKTtcbn1cblxuQG1peGluIGdlbmVyYXRlLWNvbG9yLXZhcmlhbnRzKCRjb2xvci1uYW1lLCAkYmFzZSkge1xuICAgICRjb250cmFzdDogZ2V0X2NvbnRyYXN0X2NvbG9yKCRiYXNlKTtcbiAgICAkc2hhZGU6IGdldC1jb2xvci1zaGFkZS1wZXJjZW50KCRiYXNlKTtcbiAgICAkdGludDogZ2V0LWNvbG9yLXRpbnQtcGVyY2VudCgkYmFzZSk7XG5cbiAgICAtLSN7JGNvbG9yLW5hbWV9OiAjeyRiYXNlfTtcbiAgICAtLSN7JGNvbG9yLW5hbWV9LXNoYWRlOiAjeyRzaGFkZX07XG4gICAgLS0jeyRjb2xvci1uYW1lfS10aW50OiAjeyR0aW50fTtcbiAgICAtLSN7JGNvbG9yLW5hbWV9LWNvbnRyYXN0OiAjeyRjb250cmFzdH07XG5cbiAgICAvLyBJbnRlcm5hbCBpb25pYyB1c2Ugb25seS5cbiAgICAtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfTogdmFyKC0tI3skY29sb3ItbmFtZX0pO1xuICAgIC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LWJhc2U6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfSk7XG4gICAgLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tcmdiOiAje2NvbG9yLXRvLXJnYi1saXN0KCRiYXNlKX07XG4gICAgLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tY29udHJhc3Q6ICN7JGNvbnRyYXN0fTtcbiAgICAtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS1jb250cmFzdC1yZ2I6ICN7Y29sb3ItdG8tcmdiLWxpc3QoJGNvbnRyYXN0KX07XG4gICAgLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tc2hhZGU6ICN7JHNoYWRlfTtcbiAgICAtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS10aW50OiAjeyR0aW50fTtcblxuICAgIC5pb24tY29sb3ItI3skY29sb3ItbmFtZX0ge1xuICAgICAgICAtLWlvbi1jb2xvcjogdmFyKC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9KTtcbiAgICAgICAgLS1pb24tY29sb3ItYmFzZTogdmFyKC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LWJhc2UpO1xuICAgICAgICAtLWlvbi1jb2xvci1yZ2I6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS1yZ2IpO1xuICAgICAgICAtLWlvbi1jb2xvci1jb250cmFzdDogdmFyKC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LWNvbnRyYXN0KTtcbiAgICAgICAgLS1pb24tY29sb3ItY29udHJhc3QtcmdiOiB2YXIoLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tY29udHJhc3QtcmdiKTtcbiAgICAgICAgLS1pb24tY29sb3Itc2hhZGU6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS1zaGFkZSk7XG4gICAgICAgIC0taW9uLWNvbG9yLXRpbnQ6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS10aW50KTtcbiAgICB9XG59XG5cbkBtaXhpbiBjb3JlLWZvY3VzKCkge1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICY6OmFmdGVyIHtcbiAgICAgICAgQGluY2x1ZGUgcG9zaXRpb24oMCwgMCwgMCwgMCk7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgQGluY2x1ZGUgY29yZS1mb2N1cy1zdHlsZSgpO1xuICAgIH1cbn1cblxuQG1peGluIGNvcmUtZm9jdXMtc3R5bGUoKSB7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIHZhcigtLWExMXktZm9jdXMtd2lkdGgpIDFweCB2YXIoLS1hMTF5LWZvY3VzLWNvbG9yKTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTtcbiAgICAvLyBUaGlja2VyIG9wdGlvbjpcbiAgICAvLyBib3JkZXI6IHZhcigtLWExMXktZm9jdXMtd2lkdGgpIHNvbGlkIHZhcigtLWExMXktZm9jdXMtY29sb3IpO1xufVxuXG5AbWl4aW4gY29yZS10cmFuc2l0aW9uKCRwcm9wZXJ0aWVzOiBhbGwsICRkdXJhdGlvbjogNTAwbXMsICR0aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0KSB7XG4gICAgJHRyYW5zaXRpb25zOiAoKTtcbiAgICBAZWFjaCAkcHJvcGVydHkgaW4gJHByb3BlcnRpZXMge1xuICAgICAgJHRyYW5zaXRpb25zOiBhcHBlbmQoJHRyYW5zaXRpb25zLCAkcHJvcGVydHkgJGR1cmF0aW9uICR0aW1pbmctZnVuY3Rpb24sIGNvbW1hKTtcbiAgICB9XG5cbiAgICAtd2Via2l0LXRyYW5zaXRpb246ICR0cmFuc2l0aW9ucztcbiAgICB0cmFuc2l0aW9uOiAkdHJhbnNpdGlvbnM7XG59XG5cbkBtaXhpbiBzci1vbmx5KCkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMXB4O1xuICAgIGhlaWdodDogMXB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAtMXB4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIGJvcmRlcjogMDtcbn1cblxuLyoqXG4gKiBTYW1lIGFzIGl0ZW0tcHVzaC1zdmctdXJsIGJ1dCBhZG1pdHMgZmxpcC1ydGxcbiAqL1xuQG1peGluIHB1c2gtYXJyb3ctY29sb3IoJGZpbGw6IDYyNjI2MiwgJGZsaXAtcnRsOiBmYWxzZSkge1xuICAgICRpdGVtLWRldGFpbC1wdXNoLXN2ZzogXCI8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDEyIDIwJz48cGF0aCBkPSdNMiwyMGwtMi0ybDgtOEwwLDJsMi0ybDEwLDEwTDIsMjB6JyBmaWxsPScjeyRmaWxsfScvPjwvc3ZnPlwiO1xuXG4gICAgQGluY2x1ZGUgc3ZnLWJhY2tncm91bmQtaW1hZ2UoJGl0ZW0tZGV0YWlsLXB1c2gtc3ZnLCAkZmxpcC1ydGwpO1xufVxuXG5AbWl4aW4gYm9yZGVyLXN0YXJ0KCRweCwgJHR5cGU6IG51bGwsICRjb2xvcjogbnVsbCkge1xuICAgIEBpbmNsdWRlIHByb3BlcnR5LWhvcml6b250YWwoYm9yZGVyLCAkcHggJHR5cGUgJGNvbG9yLCBudWxsKTtcbn1cblxuQG1peGluIGJvcmRlci1lbmQoJHB4LCAkdHlwZTogbnVsbCwgJGNvbG9yOiBudWxsKSB7XG4gICAgQGluY2x1ZGUgcHJvcGVydHktaG9yaXpvbnRhbChib3JkZXIsIG51bGwsICRweCAkdHlwZSAkY29sb3IpO1xufVxuXG5AbWl4aW4gc2FmZS1hcmVhLWJvcmRlci1zdGFydCgkcHgsICR0eXBlLCAkY29sb3IpIHtcbiAgICAkc2FmZS1hcmVhLXBvc2l0aW9uOiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtbGVmdCkgKyAjeyRweH0pO1xuXG4gICAgQGluY2x1ZGUgYm9yZGVyLXN0YXJ0KCRzYWZlLWFyZWEtcG9zaXRpb24sICR0eXBlLCAkY29sb3IpO1xufVxuXG5AbWl4aW4gc2FmZS1hcmVhLWJvcmRlci1lbmQoJHB4LCAkdHlwZSwgJGNvbG9yKSB7XG4gICAgJHNhZmUtYXJlYS1wb3NpdGlvbjogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLXJpZ2h0KSArICN7JHB4fSk7XG5cbiAgICBAaW5jbHVkZSBib3JkZXItZW5kKCRzYWZlLWFyZWEtcG9zaXRpb24sICR0eXBlLCAkY29sb3IpO1xufVxuXG5AbWl4aW4gc2FmZS1hcmVhLW1hcmdpbi1ob3Jpem9udGFsKCRzdGFydCwgJGVuZDogJHN0YXJ0KSB7XG4gICAgJHNhZmUtYXJlYS1lbmQ6IG51bGw7XG4gICAgJHNhZmUtYXJlYS1zdGFydDogbnVsbDtcblxuICAgIEBpZiAoJGVuZCkge1xuICAgICAgICAkc2FmZS1hcmVhLWVuZDogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLXJpZ2h0KSArICN7JGVuZH0pO1xuICAgIH1cbiAgICBAaWYgKCRzdGFydCkge1xuICAgICAgICAkc2FmZS1hcmVhLXN0YXJ0OiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtbGVmdCkgKyAjeyRzdGFydH0pO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIG1hcmdpbi1ob3Jpem9udGFsKCRzYWZlLWFyZWEtc3RhcnQsICRzYWZlLWFyZWEtZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1tYXJnaW4tc3RhcnQoJHN0YXJ0LCAkZW5kKSB7XG4gICAgJHNhZmUtYXJlYS1zdGFydDogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLWxlZnQpICsgI3skc3RhcnR9KTtcblxuICAgIEBpbmNsdWRlIG1hcmdpbi1ob3Jpem9udGFsKCRzYWZlLWFyZWEtc3RhcnQsICRlbmQpO1xufVxuXG5AbWl4aW4gc2FmZS1hcmVhLW1hcmdpbi1lbmQoJHN0YXJ0LCAkZW5kKSB7XG4gICAgJHNhZmUtYXJlYS1lbmQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCkgKyAjeyRlbmR9KTtcblxuICAgIEBpbmNsdWRlIG1hcmdpbi1ob3Jpem9udGFsKCRzdGFydCwgJHNhZmUtYXJlYS1lbmQpO1xufVxuXG5AbWl4aW4gc2FmZS1hcmVhLXBhZGRpbmctaG9yaXpvbnRhbCgkc3RhcnQsICRlbmQ6ICRzdGFydCkge1xuICAgICRzYWZlLWFyZWEtZW5kOiBudWxsO1xuICAgICRzYWZlLWFyZWEtc3RhcnQ6IG51bGw7XG5cbiAgICBAaWYgKCRlbmQpIHtcbiAgICAgICAgJHNhZmUtYXJlYS1lbmQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCkgKyAjeyRlbmR9KTtcbiAgICB9XG4gICAgQGlmICgkc3RhcnQpIHtcbiAgICAgICAgJHNhZmUtYXJlYS1zdGFydDogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLWxlZnQpICsgI3skc3RhcnR9KTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBwYWRkaW5nLWhvcml6b250YWwoJHNhZmUtYXJlYS1zdGFydCwgJHNhZmUtYXJlYS1lbmQpO1xufVxuXG5AbWl4aW4gc2FmZS1hcmVhLXBhZGRpbmctc3RhcnQoJHN0YXJ0LCAkZW5kKSB7XG4gICAgJHNhZmUtYXJlYS1zdGFydDogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLWxlZnQpICsgI3skc3RhcnR9KTtcblxuICAgIEBpbmNsdWRlIHBhZGRpbmctaG9yaXpvbnRhbCgkc2FmZS1hcmVhLXN0YXJ0LCAkZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1wYWRkaW5nLWVuZCgkc3RhcnQsICRlbmQpIHtcbiAgICAkc2FmZS1hcmVhLWVuZDogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLXJpZ2h0KSArICN7JGVuZH0pO1xuXG4gICAgQGluY2x1ZGUgcGFkZGluZy1ob3Jpem9udGFsKCRzdGFydCwgJHNhZmUtYXJlYS1lbmQpO1xufVxuXG5AbWl4aW4gc2FmZS1hcmVhLXBvc2l0aW9uKCR0b3A6IG51bGwsICRlbmQ6IG51bGwsICRib3R0b206IG51bGwsICRzdGFydDogbnVsbCkge1xuICAgICRzYWZlLWFyZWEtc3RhcnQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0KSArICN7JHN0YXJ0fSk7XG4gICAgJHNhZmUtYXJlYS1lbmQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCkgKyAjeyRlbmR9KTtcblxuICAgIEBpbmNsdWRlIHBvc2l0aW9uKCR0b3AsICRzYWZlLWFyZWEtZW5kLCAkYm90dG9tLCAkc2FmZS1hcmVhLXN0YXJ0KTtcbn1cblxuQG1peGluIGNvcmUtaGVhZGluZ3MoKSB7XG4gICAgaDEge1xuICAgICAgICBmb250LXNpemU6IDI2cHg7XG4gICAgfVxuICAgIGgyLCAuaXRlbS1oZWFkaW5nIHtcbiAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgIH1cbiAgICBoMyB7XG4gICAgICAgIGZvbnQtc2l6ZTogMjJweDtcbiAgICB9XG4gICAgaDQge1xuICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgfVxuICAgIGg1IHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgIH1cbiAgICBoNiB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB9XG59XG5cbkBtaXhpbiBkYXJrbW9kZSgpIHtcbiAgICAkcm9vdDogI3smfTtcblxuICAgIEBhdC1yb290ICN7YWRkLXJvb3Qtc2VsZWN0b3IoJHJvb3QsIFwiaHRtbC5kYXJrXCIpfSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbn1cblxuQG1peGluIGhvcml6b250YWxfc2Nyb2xsX2l0ZW0oJHdpZHRoLCAkbWluLXdpZHRoLCAkbWF4LXdpZHRoKSB7XG4gICAgZmxleDogMCAwICR3aWR0aDtcbiAgICBtaW4td2lkdGg6ICRtaW4td2lkdGg7XG4gICAgbWF4LXdpZHRoOiAkbWF4LXdpZHRoO1xuICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICBpb24tY2FyZCB7XG4gICAgICAgIC0tdmVydGljYWwtbWFyZ2luOiAxMHB4O1xuICAgICAgICAtLWhvcml6b250YWwtbWFyZ2luOiAxMHB4O1xuXG4gICAgICAgIHdpZHRoOiBjYWxjKDEwMCUgLSB2YXIoLS1ob3Jpem9udGFsLW1hcmdpbikgLSB2YXIoLS1ob3Jpem9udGFsLW1hcmdpbikpO1xuICAgICAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIHZhcigtLXZlcnRpY2FsLW1hcmdpbikgLSB2YXIoLS12ZXJ0aWNhbC1tYXJnaW4pKTtcbiAgICAgICAgbWFyZ2luOiB2YXIoLS12ZXJ0aWNhbC1tYXJnaW4pIHZhcigtLWhvcml6b250YWwtbWFyZ2luKTtcblxuICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogMzYwcHgpIHtcbiAgICAgICAgICAgIC0taG9yaXpvbnRhbC1tYXJnaW46IDZweDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gQ29sb3IgbWl4aW5zLlxuQGZ1bmN0aW9uIGdldF9icmlnaHRuZXNzKCRjb2xvcikge1xuICAgIEByZXR1cm4gbWF0aC5kaXYocmVkKCRjb2xvcikgKyBncmVlbigkY29sb3IpICsgYmx1ZSgkY29sb3IpLCAzKTtcbn1cblxuLy8gR2V0IHRoZSBiZXR0ZXIgY29sb3IgY29udHJhc3QgdXNpbmcgV0NBRyBhbGdvcnl0aG0uXG5AZnVuY3Rpb24gZ2V0X2NvbnRyYXN0X2NvbG9yKCRjb2xvcikge1xuICAgICRsdW1pYW5jZTogbHVtaW5hbmNlKCRjb2xvcik7XG5cbiAgICAvLyBXaGl0ZSBsdW1pYW5jZSBpcyAxLlxuICAgICR3aGl0ZUNvbnRyYXN0OiBtYXRoLmRpdigkbHVtaWFuY2UgKyAwLjA1LCAxICsgMC4wNSk7XG4gICAgLy8gV2hpdGUgbHVtaWFuY2UgaXMgMC5cbiAgICAkYmxhY2tDb250cmFzdDogbWF0aC5kaXYoMC4wNSwgJGx1bWlhbmNlICsgMC4wNSk7XG5cbiAgICBAcmV0dXJuIGlmKCR3aGl0ZUNvbnRyYXN0IDwgJGJsYWNrQ29udHJhc3QsIHdoaXRlLCBibGFjayk7XG59XG5cbi8vIENvbG9yIGNvbnRyYXN0IHVzaW5nIHlpcSBhcHJveGltYXRpb24gd2l0aCAxNTAgdGhyZXNob2xkLlxuQGZ1bmN0aW9uIGdldF9jb250cmFzdF9jb2xvcl95aXEoJGNvbG9yLCAkZGFyazogYmxhY2ssICRsaWdodDogd2hpdGUpIHtcbiAgICAkcjogcmVkKCRjb2xvcik7XG4gICAgJGc6IGdyZWVuKCRjb2xvcik7XG4gICAgJGI6IGJsdWUoJGNvbG9yKTtcblxuICAgICR5aXE6IG1hdGguZGl2KCgkciAqIDI5OSkgKyAoJGcgKiA1ODcpICsgKCRiICogMTE0KSwgMTAwMCk7XG5cbiAgICBAcmV0dXJuIGlmKCR5aXEgPj0gMTI4LCAkZGFyaywgJGxpZ2h0KTtcbn1cblxuLy8gV0NBRyBjb250cmFzdCBhbGdvcml0aG1cbkBmdW5jdGlvbiBjaGVjay1jb250cmFzdCgkZm9yZWdyb3VuZCwgJGJhY2tncm91bmQpIHtcbiAgICAkZm9yZWdyb3VuZEx1bWlhbmNlOiBsdW1pbmFuY2UoJGZvcmVncm91bmQpO1xuICAgICRiYWNrZ3JvdW5kTHVtaW5hbmNlOiBsdW1pbmFuY2UoJGJhY2tncm91bmQpO1xuXG4gICAgQGlmICgkYmFja2dyb3VuZEx1bWluYW5jZSA8ICRmb3JlZ3JvdW5kTHVtaWFuY2UpIHtcbiAgICAgICAgQHJldHVybiBtYXRoLmRpdigkYmFja2dyb3VuZEx1bWluYW5jZSArIDAuMDUsICRmb3JlZ3JvdW5kTHVtaWFuY2UgKyAwLjA1KTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICAgQHJldHVybiBtYXRoLmRpdigkZm9yZWdyb3VuZEx1bWlhbmNlICsgMC4wNSwgJGJhY2tncm91bmRMdW1pbmFuY2UgKyAwLjA1KTtcbiAgICB9XG59XG5cbkBmdW5jdGlvbiBsdW1pbmFuY2UoJGNvbG9yKSB7XG4gICAgJHI6IHJlZCgkY29sb3IpO1xuICAgICRnOiBncmVlbigkY29sb3IpO1xuICAgICRiOiBibHVlKCRjb2xvcik7XG5cbiAgICAkcjogY29tcG9uZW50LWx1bWluYW5jZSgkcik7XG4gICAgJGc6IGNvbXBvbmVudC1sdW1pbmFuY2UoJGcpO1xuICAgICRiOiBjb21wb25lbnQtbHVtaW5hbmNlKCRiKTtcblxuICAgIEByZXR1cm4gJHIgKiAwLjIxMjYgKyAkZyAqIDAuNzE1MiArICRiICogMC4wNzIyO1xufVxuXG5AZnVuY3Rpb24gY29tcG9uZW50LWx1bWluYW5jZSgkdmFsdWUpIHtcbiAgICAkdmFsdWU6IG1hdGguZGl2KCR2YWx1ZSwgMjU1KTtcblxuICAgIEBpZiAoJHZhbHVlIDw9IDAuMDM5MjgpIHtcbiAgICAgICAgQHJldHVybiBtYXRoLmRpdigkdmFsdWUsIDEyLjkyKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICAgQHJldHVybiBtYXRoLnBvdyhtYXRoLmRpdigkdmFsdWUgKyAwLjA1NSwgMS4wNTUpLCAyLjQpO1xuICAgIH1cbn1cbiIsIi8qXG4gKiBBcHAgQ3VzdG9tIEFwcCB2YXJpYWJsZXMgU0NTU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUGxhY2UgaGVyZSBhbGwgY3VzdG9tIGFwcCB2YXJpYWJsZXMuXG4gKi9cbiIsIi8qXG4gKiBBcHAgR2xvYmFsIHZhcmlhYmxlcyBTQ1NTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQbGFjZSBoZXJlIGFsbCBnbG9iYWwgdmFyaWFibGVzLlxuICovXG5cbiR3aGl0ZTogICAgICAgI2ZmZmZmZiAhZGVmYXVsdDtcbiRncmF5LTEwMDogICAgI2Y4ZjlmYSAhZGVmYXVsdDtcbiRncmF5LTIwMDogICAgI2U5ZWNlZiAhZGVmYXVsdDtcbiRncmF5LTMwMDogICAgI2RlZTJlNiAhZGVmYXVsdDsgLy8gU3Ryb2tlXG4kZ3JheS00MDA6ICAgICNjZWQ0ZGEgIWRlZmF1bHQ7XG4kZ3JheS01MDA6ICAgICM4Zjk1OWUgIWRlZmF1bHQ7IC8vIFN0cm9rZSBvbiBpbnB1dHNcbiRncmF5LTYwMDogICAgIzZhNzM3YiAhZGVmYXVsdDtcbiRncmF5LTcwMDogICAgIzQ5NTA1NyAhZGVmYXVsdDtcbiRncmF5LTgwMDogICAgIzM0M2E0MCAhZGVmYXVsdDtcbiRncmF5LTkwMDogICAgIzI4MjgyOCAhZGVmYXVsdDsgLy8gQ29weSB0ZXh0XG4kYmxhY2s6ICAgICAgICMwMDAwMDAgIWRlZmF1bHQ7IC8vIEF2b2lkIHVzYWdlXG5cbiRibHVlOiAgICAgICAgIzBmNmNiZiAhZGVmYXVsdDtcbiRjeWFuOiAgICAgICAgIzAwODE5NiAhZGVmYXVsdDsgLy8gTm90IHVzZWQuXG4kZ3JlZW46ICAgICAgICMzNTdhMzIgIWRlZmF1bHQ7XG4kcmVkOiAgICAgICAgICNjYTMxMjAgIWRlZmF1bHQ7XG4keWVsbG93OiAgICAgICNmMGFkNGUgIWRlZmF1bHQ7XG5cbiRicmFuZC1jb2xvcjogI2Y5ODAxMiAhZGVmYXVsdDtcblxuJHRleHQtY29sb3I6ICAgICAgICAgICAgICAgJGdyYXktOTAwICFkZWZhdWx0O1xuJHRleHQtY29sb3ItcmdiOiAgICAgICAgICAgY29sb3ItdG8tcmdiLWxpc3QoJHRleHQtY29sb3IpICFkZWZhdWx0O1xuJHRleHQtY29sb3ItZGFyazogICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJHRleHQtY29sb3ItZGFyay1yZ2I6ICAgICAgY29sb3ItdG8tcmdiLWxpc3QoJHRleHQtY29sb3ItZGFyaykgIWRlZmF1bHQ7XG5cbiRiYWNrZ3JvdW5kLWNvbG9yOiAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kYmFja2dyb3VuZC1jb2xvci1yZ2I6ICAgICAgY29sb3ItdG8tcmdiLWxpc3QoJGJhY2tncm91bmQtY29sb3IpICFkZWZhdWx0O1xuJGJhY2tncm91bmQtY29sb3ItZGFyazogICAgICRncmF5LTkwMCAhZGVmYXVsdDsgLy8gIzFhMWExYVxuJGJhY2tncm91bmQtY29sb3ItZGFyay1yZ2I6IGNvbG9yLXRvLXJnYi1saXN0KCRiYWNrZ3JvdW5kLWNvbG9yLWRhcmspICFkZWZhdWx0O1xuXG4kaW9uLWl0ZW0tYmFja2dyb3VuZDogICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kaW9uLWl0ZW0tYmFja2dyb3VuZC1yZ2I6ICBjb2xvci10by1yZ2ItbGlzdCgkaW9uLWl0ZW0tYmFja2dyb3VuZCkgIWRlZmF1bHQ7XG4kaW9uLWl0ZW0tYmFja2dyb3VuZC1kYXJrOiAkZ3JheS05MDAgIWRlZmF1bHQ7XG4kaW9uLWl0ZW0tYmFja2dyb3VuZC1kYXJrLXJnYjogY29sb3ItdG8tcmdiLWxpc3QoJGlvbi1pdGVtLWJhY2tncm91bmQtZGFyaykgIWRlZmF1bHQ7XG5cbiRwcmltYXJ5OiAgICAkYnJhbmQtY29sb3IgIWRlZmF1bHQ7XG4kc2Vjb25kYXJ5OiAgJGdyYXktMzAwICFkZWZhdWx0O1xuJGRhbmdlcjogICAgICRyZWQgIWRlZmF1bHQ7XG4kd2FybmluZzogICAgJHllbGxvdyAhZGVmYXVsdDtcbiRzdWNjZXNzOiAgICAkZ3JlZW4gIWRlZmF1bHQ7XG4kaW5mbzogICAgICAgJGJsdWUgIWRlZmF1bHQ7XG4kbGlnaHQ6ICAgICAgJGdyYXktMTAwICFkZWZhdWx0O1xuJG1lZGl1bTogICAgICRncmF5LTcwMCAhZGVmYXVsdDtcbiRkYXJrOiAgICAgICAkZ3JheS05MDAgIWRlZmF1bHQ7XG5cbiRjb2xvcnM6ICAoXG4gICAgcHJpbWFyeTogKGxpZ2h0OiAkcHJpbWFyeSwgZGFyazogJHByaW1hcnkpLFxuICAgIHNlY29uZGFyeTogKGxpZ2h0OiAkc2Vjb25kYXJ5LCBkYXJrOiAkZ3JheS03MDApLFxuICAgIHN1Y2Nlc3M6IChsaWdodDogJHN1Y2Nlc3MpLFxuICAgIHdhcm5pbmc6IChsaWdodDogJHdhcm5pbmcpLFxuICAgIGRhbmdlcjogIChsaWdodDogJGRhbmdlciksXG4gICAgaW5mbzogKGxpZ2h0OiAkaW5mbyksXG4gICAgbGlnaHQ6IChsaWdodDogJGxpZ2h0LCBkYXJrOiAkZGFyayksXG4gICAgbWVkaXVtOiAobGlnaHQ6ICRtZWRpdW0sIGRhcms6ICRncmF5LTIwMCksXG4gICAgZGFyazogKGxpZ2h0OiAkZGFyaywgZGFyazogJGxpZ2h0KSxcbikgIWRlZmF1bHQ7XG5cbi8qKlxuICogTGF5b3V0IEJyZWFrcG9pbnRzXG4gKlxuICogaHR0cHM6Ly9pb25pY2ZyYW1ld29yay5jb20vZG9jcy9sYXlvdXQvZ3JpZCNkZWZhdWx0LWJyZWFrcG9pbnRzXG4gKi9cblxuLy8gVGhlIG1pbmltdW0gZGltZW5zaW9ucyBhdCB3aGljaCB5b3VyIGxheW91dCB3aWxsIGNoYW5nZSxcbi8vIGFkYXB0aW5nIHRvIGRpZmZlcmVudCBzY3JlZW4gc2l6ZXMsIGZvciB1c2UgaW4gbWVkaWEgcXVlcmllc1xuJHNjcmVlbi1icmVha3BvaW50czogKFxuICAgIHhzOiAwcHgsXG4gICAgc206IDU3NnB4LFxuICAgIG1kOiA3NjhweCxcbiAgICBsZzogOTkycHgsXG4gICAgdGFibGV0OiA5OTJweCxcbiAgICB4bDogMTIwMHB4XG4pICFkZWZhdWx0O1xuXG4kY29yZS1jb3Vyc2UtaW1hZ2UtYmFja2dyb3VuZDogIzgxZWNlYywgIzc0YjlmZiwgI2EyOWJmZSwgI2RmZTZlOSwgIzAwYjg5NCwgIzA5ODRlMywgI2IyYmVjMywgI2ZkY2I2ZSwgI2ZkNzlhOCwgIzZjNWNlNyAhZGVmYXVsdDtcbiRjb3JlLWRkLXF1ZXN0aW9uLWNvbG9yczogI0ZGRkZGRiwgI0IwQzRERSwgI0RDRENEQywgI0Q4QkZEOCwgIzg3Q0VGQSwgI0RBQTUyMCwgI0ZGRDcwMCwgI0YwRTY4QyAhZGVmYXVsdDtcbiRjb3JlLXRleHQtaGlnaHRsaWdodC1iYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGVuKCRibHVlLCA0MCUpICFkZWZhdWx0O1xuXG4kY29yZS1maXhlZC11cmw6IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtZGFzaGJvYXJkLWxvZ286IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtYWx3YXlzLXNob3ctbWFpbi1tZW51OiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWZvcm1hdC10ZXh0LW5ldmVyLXNob3J0ZW46IGZhbHNlICFkZWZhdWx0O1xuXG4kY29yZS1oaWRlLWNvdXJzZWltYWdlLW9uLWNvdXJzZTogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1oaWRlLXByb2dyZXNzLW9uLWNvdXJzZTogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1oaWRlLXByb2dyZXNzLW9uLXNlY3Rpb24tc2VsZWN0b3I6IGZhbHNlICFkZWZhdWx0O1xuXG4kY29yZS1jb3Vyc2UtaGlkZS10aHVtYi1vbi1jYXJkczogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1jb3Vyc2UtdGh1bWItb24tY2FyZHMtYmFja2dyb3VuZDogbnVsbCAhZGVmYXVsdDtcbiRjb3JlLWNvdXJzZS1oaWRlLXByb2dyZXNzLW9uLWNhcmRzOiBmYWxzZSAhZGVmYXVsdDtcblxuLy8gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBsb2dpbiBwYWdlLlxuJGNvcmUtbG9naW4tYnV0dG9uLW91dGxpbmU6IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtbG9naW4tYnV0dG9uLW91dGxpbmUtZGFyazogJGNvcmUtbG9naW4tYnV0dG9uLW91dGxpbmUgIWRlZmF1bHQ7XG4kY29yZS1sb2dpbi1sb2FkaW5nLWNvbG9yOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWxvZ2luLWxvYWRpbmctY29sb3ItZGFyazogJHRleHQtY29sb3ItZGFyayAhZGVmYXVsdDtcbiRjb3JlLWxvZ2luLWhpZGUtZm9yZ290LXBhc3N3b3JkOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWxvZ2luLWhpZGUtbmVlZC1oZWxwOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWxvZ2luLWhpZGUtcXJjb2RlOiBmYWxzZSAhZGVmYXVsdDtcblxuLy8gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBtb3JlIHBhZ2UuIChkZXByZWNhdGVkIG9uIDQuMClcbiRjb3JlLW1vcmUtaGlkZS1zaXRlaW5mbzogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1tb3JlLWhpZGUtc2l0ZW5hbWU6IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtbW9yZS1oaWRlLXNpdGV1cmw6IGZhbHNlICFkZWZhdWx0O1xuXG4vLyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHVzZXIgcGFnZS5cbiRjb3JlLXVzZXItaGlkZS1zaXRlaW5mbzogJGNvcmUtbW9yZS1oaWRlLXNpdGVpbmZvICFkZWZhdWx0O1xuJGNvcmUtdXNlci1oaWRlLXNpdGVuYW1lOiAkY29yZS1tb3JlLWhpZGUtc2l0ZW5hbWUgIWRlZmF1bHQ7XG4kY29yZS11c2VyLWhpZGUtc2l0ZXVybDogJGNvcmUtbW9yZS1oaWRlLXNpdGV1cmwgIWRlZmF1bHQ7XG5cbi8vIEFjdGl2aXR5IGljb24gYmFja2dyb3VuZCBjb2xvcnMuXG4kYWN0aXZpdHktaWNvbi1jb2xvcnM6IChcbiAgICBhZG1pbmlzdHJhdGlvbjogIzVkNjNmNixcbiAgICBhc3Nlc3NtZW50OiAjZWI2NmEyLFxuICAgIGNvbGxhYm9yYXRpb246ICNmNzYzNGQsXG4gICAgY29tbXVuaWNhdGlvbjogIzExYTY3NixcbiAgICBjb250ZW50OiAjMzk5YmUyLFxuICAgIGludGVyZmFjZTogI2EzNzhmZlxuKSAhZGVmYXVsdDtcblxuJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LWNhdGVnb3J5OiAjOGUyNGFhICFkZWZhdWx0O1xuJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LWNvdXJzZTogJHJlZCAhZGVmYXVsdDtcbiRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1ncm91cDogJHllbGxvdyAhZGVmYXVsdDtcbiRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS11c2VyOiAkYmx1ZSAhZGVmYXVsdDtcbiRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1zaXRlOiAkZ3JlZW4gIWRlZmF1bHQ7XG5cbi8vIENhbGVuZGFyIGV2ZW50IGNhdGVnb3J5IGJhY2tncm91bmQgY29sb3JzLlxuJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LWNvbG9yczogKFxuICAgIGNhdGVnb3J5OiAkY2FsZW5kYXItZXZlbnQtY2F0ZWdvcnktY2F0ZWdvcnksXG4gICAgY291cnNlOiAkY2FsZW5kYXItZXZlbnQtY2F0ZWdvcnktY291cnNlLFxuICAgIGdyb3VwOiAkY2FsZW5kYXItZXZlbnQtY2F0ZWdvcnktZ3JvdXAsXG4gICAgdXNlcjogJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LXVzZXIsXG4gICAgc2l0ZTogJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LXNpdGUsXG4pICFkZWZhdWx0O1xuIiwiQHVzZSBcInRoZW1lL2dsb2JhbHNcIiBhcyAqO1xuXG46aG9zdCB7XG4gICAgaW9uLWNvbnRlbnQsXG4gICAgaW9uLWxpc3Qge1xuICAgICAgICAtLWJhY2tncm91bmQ6IHZhcigtLWNvcmUtbG9naW4tYmFja2dyb3VuZCk7XG4gICAgICAgIC0taW9uLWl0ZW0tYmFja2dyb3VuZDogdmFyKC0tY29yZS1sb2dpbi1iYWNrZ3JvdW5kKTtcbiAgICAgICAgLS1jb2xvcjogdmFyKC0tY29yZS1sb2dpbi10ZXh0LWNvbG9yKTtcbiAgICB9XG5cbiAgICBpb24taXRlbSBpb24tbGFiZWwge1xuICAgICAgICAtLWNvbG9yOiB2YXIoLS1jb3JlLWxvZ2luLXRleHQtY29sb3IpO1xuXG4gICAgICAgIHAsIGgyLCBoMywgLmNvcmUtb2F1dGgtaWNvbiB7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tY29sb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW9uLWJ1dHRvbi5jb3JlLWJ1dHRvbi1hcy1saW5rIHtcbiAgICAgICAgLS1jb2xvcjogdmFyKC0tY29yZS1sb2dpbi10ZXh0LWNvbG9yKTtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiB2YXIoLS1jb3JlLWxvZ2luLXRleHQtY29sb3IpO1xuXG4gICAgICAgIGlvbi1sYWJlbCB7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tY29yZS1sb2dpbi10ZXh0LWNvbG9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICAuY29yZS1sb2dpbi1yZWNvbm5lY3Qtd2FybmluZyB7XG4gICAgICAgIG1hcmdpbjogMHB4IDBweCAzMnB4IDBweDtcbiAgICB9XG5cbiAgICAuY29yZS1sb2dpbi1pbmZvLWJveCB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDMycHg7XG5cbiAgICAgICAgLmNvcmUtbG9naW4tc2l0ZSB7XG4gICAgICAgICAgICAuY29yZS1sb2dpbi1zaXRlLWxvZ28ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiA5MCU7XG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAzMDBweDtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDBweCBhdXRvO1xuXG4gICAgICAgICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAxMDRweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5jb3JlLXNpdGVuYW1lIHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4cHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5jb3JlLXNpdGV1cmwge1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDhweDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAuY29yZS1sb2dpbi1zaXRlICsgLmNvcmUtbG9naW4tdXNlciB7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyNHB4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29yZS11c2VyLWF2YXRhci5sYXJnZS1hdmF0YXIge1xuICAgICAgICAtLWNvcmUtYXZhdGFyLXNpemU6IHZhcigtLWNvcmUtbGFyZ2UtYXZhdGFyLXNpemUpO1xuICAgIH1cblxuICAgIC5jb3JlLWxvZ2luLWZ1bGxuYW1lIHtcbiAgICAgICAgbWFyZ2luLXRvcDogOHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gICAgfVxuXG4gICAgLmNvcmUtbG9naW4tbWV0aG9kcyB7XG4gICAgICAgIGZvcm0gLml0ZW0uaXRlbS1pbnB1dCB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybSAuaXRlbSxcbiAgICAgICAgZm9ybSAuaXRlbSBpb24tbGFiZWwge1xuICAgICAgICAgICAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1jb3JlLWxvZ2luLWlucHV0LWJhY2tncm91bmQpO1xuICAgICAgICAgICAgLS1jb2xvcjogdmFyKC0tY29yZS1sb2dpbi1pbnB1dC1jb2xvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpb24tYnV0dG9uIHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuXG4gICAgLmNvcmUtbG9naW4tZm9yZ290dGVuLXBhc3N3b3JkIHtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgfVxuXG4gICAgQGlmICgkY29yZS1sb2dpbi1oaWRlLWZvcmdvdC1wYXNzd29yZCkge1xuICAgICAgICAuY29yZS1sb2dpbi1mb3Jnb3R0ZW4tcGFzc3dvcmQge1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBpZiAoJGNvcmUtZml4ZWQtdXJsKSB7XG4gICAgICAgIC5jb3JlLXNpdGVuYW1lLCAuY29yZS1zaXRldXJsIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAaWYgKCRjb3JlLWxvZ2luLWJ1dHRvbi1vdXRsaW5lKSB7XG4gICAgICAgIGZvcm0gaW9uLWJ1dHRvbiB7XG4gICAgICAgICAgICAtLWJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgICAgICAgLS1jb2xvcjogdmFyKC0tY29yZS1sb2dpbi1iYWNrZ3JvdW5kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBpZiAoJGNvcmUtbG9naW4tbG9hZGluZy1jb2xvcikge1xuICAgICAgICBjb3JlLWxvYWRpbmcge1xuICAgICAgICAgICAgLS1sb2FkaW5nLWJhY2tncm91bmQ6IHZhcigtLWNvcmUtbG9naW4tYmFja2dyb3VuZCk7XG4gICAgICAgICAgICAtLWxvYWRpbmctdGV4dC1jb2xvcjogI3skY29yZS1sb2dpbi1sb2FkaW5nLWNvbG9yfTtcbiAgICAgICAgICAgIC0tbG9hZGluZy1zcGlubmVyOiAjeyRjb3JlLWxvZ2luLWxvYWRpbmctY29sb3J9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLmNvcmUtbG9naW4tbWV0aG9kcy1zZXBhcmF0b3Ige1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHBhZGRpbmc6IDhweCAwO1xuXG4gICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29yZS1sb2dpbi1iYWNrZ3JvdW5kKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgOHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgICAgIGhlaWdodDogMXB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgICBsZWZ0OiAwcHg7XG4gICAgICAgICAgICByaWdodDogMHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWdyYXktMzAwKTtcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICAgICAgICB6LWluZGV4OiAtMTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgQGlmICgkY29yZS1sb2dpbi1oaWRlLXFyY29kZSkge1xuICAgICAgICAuY29yZS1sb2dpbi1zaXRlLXFyY29kZSxcbiAgICAgICAgLmNvcmUtbG9naW4tbWV0aG9kcy1zZXBhcmF0b3Ige1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5jb3JlLWxvZ2luLWxvZ2luLWJ1dHRvbiB7XG4gICAgICAgIG1hcmdpbi10b3A6IDMycHg7XG4gICAgfVxuXG4gICAgLmNvcmUtbG9naW4tbG9naW4taW5icm93c2VyLWJ1dHRvbiB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgICB9XG5cbiAgICBwLmNvcmUtbG9naW4taW5icm93c2VyIHtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICBtYXJnaW4tdG9wOiA4cHg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgICB9XG5cbiAgICAuY29yZS1sb2dpbi1zaWduLXVwIHtcbiAgICAgICAgbWFyZ2luLXRvcDogOHB4O1xuICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tZ3JheS0zMDApO1xuICAgIH1cblxuICAgIC5jb3JlLWxvZ2luLWlkZW50aXR5LXByb3ZpZGVycyBoMixcbiAgICAuY29yZS1sb2dpbi1zaWduLXVwIGgyIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMTZweDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG59XG5cbjpob3N0LWNvbnRleHQoaHRtbC5kYXJrKSB7XG4gICAgQGlmICgkY29yZS1sb2dpbi1idXR0b24tb3V0bGluZS1kYXJrKSB7XG4gICAgICAgIGZvcm0gaW9uLWJ1dHRvbiB7XG4gICAgICAgICAgICAtLWJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgICAgICAgLS1jb2xvcjogdmFyKC0tY29yZS1sb2dpbi1iYWNrZ3JvdW5kLWRhcmspO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGlmICgkY29yZS1sb2dpbi1sb2FkaW5nLWNvbG9yLWRhcmspIHtcbiAgICAgICAgY29yZS1sb2FkaW5nIHtcbiAgICAgICAgICAgIC0tbG9hZGluZy1iYWNrZ3JvdW5kOiB2YXIoLS1jb3JlLWxvZ2luLWJhY2tncm91bmQtZGFyayk7XG4gICAgICAgICAgICAtLWxvYWRpbmctdGV4dC1jb2xvcjogI3skY29yZS1sb2dpbi1sb2FkaW5nLWNvbG9yLWRhcmt9O1xuICAgICAgICAgICAgLS1sb2FkaW5nLXNwaW5uZXI6ICN7JGNvcmUtbG9naW4tbG9hZGluZy1jb2xvci1kYXJrfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"names":["CoreLoginHelper","CoreSites","CoreSitesFactory","CoreDomUtils","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","ɵɵelement","ɵɵproperty","method_r5","icon","ɵɵlistener","CoreLoginMethodsComponent_div_1_ion_button_1_Template_ion_button_click_0_listener","restoredCtx","ɵɵrestoreView","_r9","$implicit","ɵɵresetView","action","ɵɵtemplate","CoreLoginMethodsComponent_div_1_ion_button_1_ion_icon_1_Template","ɵɵattribute","name","CoreLoginMethodsComponent_div_1_ion_button_1_Template","ctx_r1","loginMethods","ɵɵelementContainerStart","CoreLoginMethodsComponent_ng_container_2_Template_ion_button_click_1_listener","_r11","ctx_r10","ɵɵnextContext","showInstructionsAndScanQR","ɵɵelementContainerEnd","ɵɵtextInterpolate1","provider_r13","iconurl","ɵɵsanitizeUrl","CoreLoginMethodsComponent_ion_list_3_ion_button_4_Template_ion_button_click_0_listener","_r17","ctx_r16","oauthClicked","CoreLoginMethodsComponent_ion_list_3_ion_button_4_img_1_Template","CoreLoginMethodsComponent_ion_list_3_ion_button_4_Template","ctx_r3","identityProviders","CoreLoginMethodsComponent","constructor","reconnect","siteUrl","isBrowserSSO","showScanQR","ngOnInit","_this","_asyncToGenerator","getLoginMethods","currentSite","getCurrentSite","defaultMethod","getDefaultLoginMethod","isLoggedOut","siteConfig","isSSOLoginNeeded","typeoflogin","getValidIdentityProvidersForSite","makeUnauthenticatedSite","displayQRInSiteScreen","displayQRInCredentialsScreen","tool_mobile_qrcodetype","showScanQRInstructions","scanQR","_unused","provider","_this$siteConfig","result","openBrowserForOAuthLogin","launchurl","redirectData","showErrorModal","selectors","inputs","decls","vars","consts","template","CoreLoginMethodsComponent_Template","rf","ctx","CoreLoginMethodsComponent_div_0_Template","CoreLoginMethodsComponent_div_1_Template","CoreLoginMethodsComponent_ng_container_2_Template","CoreLoginMethodsComponent_ion_list_3_Template","length"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/login/components/login-methods/login-methods.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/login/components/login-methods/login-methods.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { CoreSiteIdentityProvider, CoreSitePublicConfigResponse } from '@classes/sites/unauthenticated-site';\nimport { CoreLoginHelper, CoreLoginMethod } from '@features/login/services/login-helper';\nimport { CoreRedirectPayload } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreSitesFactory } from '@services/sites-factory';\nimport { CoreDomUtils } from '@services/utils/dom';\n\n@Component({\n    selector: 'core-login-methods',\n    templateUrl: 'login-methods.html',\n    styleUrls: ['../../login.scss'],\n})\nexport class CoreLoginMethodsComponent implements OnInit {\n\n    @Input() reconnect = false;\n    @Input() siteUrl = '';\n    @Input() siteConfig?: CoreSitePublicConfigResponse;\n    @Input() redirectData?: CoreRedirectPayload;\n\n    isBrowserSSO  = false;\n    showScanQR  = false;\n    loginMethods: CoreLoginMethod[] = [];\n    identityProviders: CoreSiteIdentityProvider[] = [];\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        if (this.reconnect) {\n            this.loginMethods = await CoreLoginHelper.getLoginMethods();\n\n            const currentSite = CoreSites.getCurrentSite();\n            const defaultMethod = await CoreLoginHelper.getDefaultLoginMethod();\n            if (currentSite?.isLoggedOut() && defaultMethod) {\n                await defaultMethod.action();\n            }\n        }\n\n        if (this.siteConfig) {\n            this.isBrowserSSO = CoreLoginHelper.isSSOLoginNeeded(this.siteConfig.typeoflogin);\n\n            // Identity providers won't be shown if login on browser.\n            if (!this.isBrowserSSO) {\n                this.identityProviders = await CoreLoginHelper.getValidIdentityProvidersForSite(\n                    CoreSitesFactory.makeUnauthenticatedSite(this.siteUrl, this.siteConfig),\n                );\n            }\n\n            if (this.reconnect) {\n                this.showScanQR = CoreLoginHelper.displayQRInSiteScreen();\n            }\n\n            // If still false or credentials screen.\n            if (!this.reconnect || !this.showScanQR) {\n                this.showScanQR = await CoreLoginHelper.displayQRInCredentialsScreen(this.siteConfig.tool_mobile_qrcodetype);\n            }\n        }\n    }\n\n    /**\n     * Show instructions and scan QR code.\n     *\n     * @returns Promise resolved when done.\n     */\n    async showInstructionsAndScanQR(): Promise<void> {\n        try {\n            await CoreLoginHelper.showScanQRInstructions();\n\n            await CoreLoginHelper.scanQR();\n        } catch {\n            // Ignore errors.\n        }\n    }\n\n    /**\n     * An OAuth button was clicked.\n     *\n     * @param provider The provider that was clicked.\n     */\n    oauthClicked(provider: CoreSiteIdentityProvider): void {\n        const result = CoreLoginHelper.openBrowserForOAuthLogin(\n            this.siteUrl,\n            provider,\n            this.siteConfig?.launchurl,\n            this.redirectData,\n        );\n\n        if (!result) {\n            CoreDomUtils.showErrorModal('Invalid data.');\n        }\n    }\n\n}\n","<div *ngIf=\"loginMethods.length || identityProviders.length || showScanQR\" class=\"ion-text-center ion-padding core-login-methods-separator\">\n    <span>{{ 'core.login.or' | translate }}</span>\n</div>\n\n<div class=\"core-login-methods\" *ngIf=\"loginMethods.length\">\n    <ion-button [fill]=\"'outline'\" class=\"ion-text-wrap ion-margin\" *ngFor=\"let method of loginMethods\" (click)=\"method.action()\"\n        [attr.aria-label]=\"method.name\" expand=\"block\">\n        <ion-icon *ngIf=\"method.icon\" [name]=\"method.icon\" slot=\"start\" />\n        <ion-label>{{ method.name }}</ion-label>\n    </ion-button>\n</div>\n\n<ng-container *ngIf=\"showScanQR\">\n    <ion-button expand=\"block\" fill=\"outline\" class=\"ion-margin core-login-site-qrcode\" (click)=\"showInstructionsAndScanQR()\">\n        <ion-icon slot=\"start\" name=\"fas-qrcode\" aria-hidden=\"true\" />\n        {{ 'core.scanqr' | translate }}\n    </ion-button>\n</ng-container>\n\n<!-- Identity providers. -->\n<ion-list *ngIf=\"identityProviders.length\" class=\"core-login-identity-providers\">\n    <h2 class=\"item-heading\">{{ 'core.login.potentialidps' | translate }}</h2>\n    <ion-button [fill]=\"'outline'\" *ngFor=\"let provider of identityProviders\" class=\"ion-text-wrap ion-margin core-oauth-provider\"\n        (click)=\"oauthClicked(provider)\" [attr.aria-label]=\"provider.name\" expand=\"block\">\n        <img *ngIf=\"provider.iconurl\" [src]=\"provider.iconurl\" alt=\"\" width=\"32\" height=\"32\" slot=\"start\" aria-hidden=\"true\">\n        <ion-label>{{ provider.name }}</ion-label>\n    </ion-button>\n</ion-list>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}