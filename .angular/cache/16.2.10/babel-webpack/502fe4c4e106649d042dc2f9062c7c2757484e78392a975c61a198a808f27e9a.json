{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreConstants } from '@/core/constants';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseModulePrefetchDelegate } from '@features/course/services/module-prefetch-delegate';\nimport { CoreNetwork } from '@services/network';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { AddonModImscpTocComponent } from '../../components/toc/toc';\nimport { AddonModImscp } from '../../services/imscp';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../../../../core/components/iframe/iframe\";\nimport * as i3 from \"../../../../../core/components/loading/loading\";\nimport * as i4 from \"../../../../../core/components/navigation-bar/navigation-bar\";\nimport * as i5 from \"../../../../../core/directives/fa-icon\";\nimport * as i6 from \"../../../../../core/directives/format-text\";\nimport * as i7 from \"../../../../../core/directives/collapsible-footer\";\nimport * as i8 from \"../../../../../core/directives/content\";\nimport * as i9 from \"../../../../../core/directives/update-non-reactive-attributes\";\nimport * as i10 from \"@ionic/angular\";\nimport * as i11 from \"@ngx-translate/core\";\nfunction AddonModImscpViewPage_ion_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 9);\n    i0.ɵɵlistener(\"click\", function AddonModImscpViewPage_ion_button_9_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.showToc());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelement(2, \"ion-icon\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 1, \"addon.mod_imscp.toc\"));\n  }\n}\nfunction AddonModImscpViewPage_ion_card_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 11)(1, \"ion-item\");\n    i0.ɵɵelement(2, \"ion-icon\", 12);\n    i0.ɵɵelementStart(3, \"ion-label\");\n    i0.ɵɵelement(4, \"span\", 13);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.warning, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction AddonModImscpViewPage_core_iframe_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-iframe\", 14);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r2.src)(\"showFullscreenOnToolbar\", true)(\"autoFullscreenOnRotate\", true);\n  }\n}\nfunction AddonModImscpViewPage_core_navigation_bar_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"core-navigation-bar\", 15);\n    i0.ɵɵlistener(\"action\", function AddonModImscpViewPage_core_navigation_bar_14_Template_core_navigation_bar_action_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.loadItem($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"items\", ctx_r3.navigationItems);\n  }\n}\n/**\n * Page that displays a IMSCP content.\n */\nexport class AddonModImscpViewPage {\n  constructor() {\n    this.title = '';\n    this.src = '';\n    this.warning = '';\n    this.navigationItems = [];\n    this.loaded = false;\n    this.items = [];\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    try {\n      this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n      this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n      this.initialItemHref = CoreNavigator.getRouteParam('initialHref');\n    } catch (error) {\n      CoreDomUtils.showErrorModal(error);\n      CoreNavigator.back();\n      return;\n    }\n    this.fetchContent();\n  }\n  /**\n   * Download IMSCP contents and load the current item.\n   *\n   * @param refresh Whether we're refreshing data.\n   * @returns Promise resolved when done.\n   */\n  fetchContent(refresh = false) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          module,\n          imscp\n        } = yield _this.loadImscpData();\n        _this.title = imscp.name;\n        const downloadResult = yield _this.downloadResourceIfNeeded(module, refresh);\n        // Get contents. No need to refresh, it has been done in downloadResourceIfNeeded.\n        const contents = yield CoreCourse.getModuleContents(module, _this.courseId);\n        _this.items = AddonModImscp.createItemList(contents);\n        if (_this.items.length) {\n          if (_this.initialItemHref) {\n            // Check it's valid.\n            if (_this.items.some(item => item.href === _this.initialItemHref)) {\n              _this.currentHref = _this.initialItemHref;\n            }\n          }\n          if (_this.currentHref === undefined) {\n            // Get last viewed.\n            const lastViewedHref = yield AddonModImscp.getLastItemViewed(imscp.id);\n            if (lastViewedHref !== undefined) {\n              _this.currentHref = lastViewedHref;\n            } else {\n              // Use first one.\n              _this.currentHref = _this.items[0].href;\n            }\n          }\n        }\n        if (_this.currentHref === undefined) {\n          throw new CoreError('Empty TOC');\n        }\n        try {\n          yield _this.loadItemHref(_this.currentHref);\n        } catch (error) {\n          CoreDomUtils.showErrorModalDefault(error, 'addon.mod_imscp.deploymenterror', true);\n          return;\n        }\n        if (downloadResult !== null && downloadResult !== void 0 && downloadResult.failed) {\n          const error = CoreTextUtils.getErrorMessageFromError(downloadResult.error) || downloadResult.error;\n          _this.warning = Translate.instant('core.errordownloadingsomefiles') + (error ? ' ' + error : '');\n        } else {\n          _this.warning = '';\n        }\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n      } finally {\n        _this.loaded = true;\n      }\n    })();\n  }\n  /**\n   * Load IMSCP data from WS.\n   *\n   * @returns Promise resolved when done.\n   */\n  loadImscpData() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.module = yield CoreCourse.getModule(_this2.cmId, _this2.courseId);\n      _this2.imscp = yield AddonModImscp.getImscp(_this2.courseId, _this2.cmId);\n      return {\n        module: _this2.module,\n        imscp: _this2.imscp\n      };\n    })();\n  }\n  /**\n   * Download a resource if needed.\n   * If the download call fails the promise won't be rejected, but the error will be included in the returned object.\n   * If module.contents cannot be loaded then the Promise will be rejected.\n   *\n   * @param module Module data.\n   * @param refresh Whether we're refreshing data.\n   * @returns Promise resolved when done.\n   */\n  downloadResourceIfNeeded(module, refresh = false) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _module$contents;\n      const result = {\n        failed: false\n      };\n      let contentsAlreadyLoaded = false;\n      // Get module status to determine if it needs to be downloaded.\n      const status = yield CoreCourseModulePrefetchDelegate.getModuleStatus(module, _this3.courseId, undefined, refresh);\n      if (status !== CoreConstants.DOWNLOADED) {\n        // Download content. This function also loads module contents if needed.\n        try {\n          yield CoreCourseModulePrefetchDelegate.downloadModule(module, _this3.courseId);\n          // If we reach here it means the download process already loaded the contents, no need to do it again.\n          contentsAlreadyLoaded = true;\n        } catch (error) {\n          // Mark download as failed but go on since the main files could have been downloaded.\n          result.failed = true;\n          result.error = error;\n        }\n      }\n      if (!((_module$contents = module.contents) !== null && _module$contents !== void 0 && _module$contents.length) || refresh && !contentsAlreadyLoaded) {\n        // Try to load the contents.\n        const ignoreCache = refresh && CoreNetwork.isOnline();\n        try {\n          yield CoreCourse.loadModuleContents(module, undefined, undefined, false, ignoreCache);\n        } catch (error) {\n          // Error loading contents. If we ignored cache, try to get the cached value.\n          if (ignoreCache && !module.contents) {\n            yield CoreCourse.loadModuleContents(module);\n          } else if (!module.contents) {\n            // Not able to load contents, throw the error.\n            throw error;\n          }\n        }\n      }\n      return result;\n    })();\n  }\n  /**\n   * Refresh the data.\n   *\n   * @param refresher Refresher.\n   * @returns Promise resolved when done.\n   */\n  doRefresh(refresher) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreUtils.ignoreErrors(Promise.all([AddonModImscp.invalidateContent(_this4.cmId, _this4.courseId), CoreCourseModulePrefetchDelegate.invalidateCourseUpdates(_this4.courseId) // To detect if IMSCP was updated.\n      ]));\n\n      yield CoreUtils.ignoreErrors(_this4.fetchContent(true));\n      refresher === null || refresher === void 0 || refresher.complete();\n    })();\n  }\n  /**\n   * Loads an item.\n   *\n   * @param itemHref Item Href.\n   * @returns Promise resolved when done.\n   */\n  loadItemHref(itemHref) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this5.module) {\n        return;\n      }\n      const src = yield AddonModImscp.getIframeSrc(_this5.module, itemHref);\n      _this5.currentHref = itemHref;\n      _this5.navigationItems = _this5.items.map(item => ({\n        item: item,\n        current: item.href == _this5.currentHref,\n        enabled: !!item.href\n      }));\n      if (_this5.src && src == _this5.src) {\n        // Re-loading same page. Set it to empty and then re-set the src in the next digest so it detects it has changed.\n        _this5.src = '';\n        setTimeout(() => {\n          _this5.src = src;\n        });\n      } else {\n        _this5.src = src;\n      }\n      if (_this5.imscp) {\n        AddonModImscp.storeLastItemViewed(_this5.imscp.id, itemHref, _this5.courseId);\n      }\n    })();\n  }\n  /**\n   * Loads an item.\n   *\n   * @param item Item.\n   */\n  loadItem(item) {\n    this.loadItemHref(item.href);\n  }\n  /**\n   * Show the TOC.\n   */\n  showToc() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // Create the toc modal.\n      const itemHref = yield CoreDomUtils.openSideModal({\n        component: AddonModImscpTocComponent,\n        componentProps: {\n          items: _this6.items,\n          selected: _this6.currentHref\n        }\n      });\n      if (itemHref) {\n        _this6.loadItemHref(itemHref);\n      }\n    })();\n  }\n}\n_class = AddonModImscpViewPage;\n_class.ɵfac = function AddonModImscpViewPage_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-mod-imscp-view\"]],\n  decls: 15,\n  vars: 11,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [\"slot\", \"end\"], [\"aria-haspopup\", \"true\", 3, \"click\", 4, \"ngIf\"], [3, \"hideUntil\"], [\"class\", \"core-warning-card\", 4, \"ngIf\"], [3, \"src\", \"showFullscreenOnToolbar\", \"autoFullscreenOnRotate\", 4, \"ngIf\"], [\"collapsible-footer\", \"\", \"appearOnBottom\", \"\", 3, \"items\", \"action\", 4, \"ngIf\"], [\"aria-haspopup\", \"true\", 3, \"click\"], [\"name\", \"fas-bookmark\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [1, \"core-warning-card\"], [\"name\", \"fas-triangle-exclamation\", \"slot\", \"start\", \"aria-hidden\", \"true\"], [3, \"innerHTML\"], [3, \"src\", \"showFullscreenOnToolbar\", \"autoFullscreenOnRotate\"], [\"collapsible-footer\", \"\", \"appearOnBottom\", \"\", 3, \"items\", \"action\"]],\n  template: function AddonModImscpViewPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵelement(7, \"core-format-text\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"ion-buttons\", 3);\n      i0.ɵɵtemplate(9, AddonModImscpViewPage_ion_button_9_Template, 3, 3, \"ion-button\", 4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"ion-content\")(11, \"core-loading\", 5);\n      i0.ɵɵtemplate(12, AddonModImscpViewPage_ion_card_12_Template, 5, 1, \"ion-card\", 6);\n      i0.ɵɵtemplate(13, AddonModImscpViewPage_core_iframe_13_Template, 1, 3, \"core-iframe\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, AddonModImscpViewPage_core_navigation_bar_14_Template, 1, 1, \"core-navigation-bar\", 8);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 9, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"text\", ctx.title)(\"contextInstanceId\", ctx.cmId)(\"courseId\", ctx.courseId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.warning);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loaded && ctx.navigationItems.length > 1);\n    }\n  },\n  dependencies: [i1.NgIf, i2.CoreIframeComponent, i3.CoreLoadingComponent, i4.CoreNavigationBarComponent, i5.CoreFaIconDirective, i6.CoreFormatTextDirective, i7.CoreCollapsibleFooterDirective, i8.CoreContentDirective, i9.CoreUpdateNonReactiveAttributesDirective, i10.IonButton, i10.IonButtons, i10.IonCard, i10.IonContent, i10.IonHeader, i10.IonIcon, i10.IonItem, i10.IonLabel, i10.IonTitle, i10.IonToolbar, i10.IonBackButton, i11.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreConstants","CoreError","CoreCourse","CoreCourseModulePrefetchDelegate","CoreNetwork","CoreNavigator","CoreDomUtils","CoreTextUtils","CoreUtils","Translate","AddonModImscpTocComponent","AddonModImscp","i0","ɵɵelementStart","ɵɵlistener","AddonModImscpViewPage_ion_button_9_Template_ion_button_click_0_listener","ɵɵrestoreView","_r5","ctx_r4","ɵɵnextContext","ɵɵresetView","showToc","ɵɵelement","ɵɵelementEnd","ɵɵattribute","ɵɵpipeBind1","ɵɵadvance","ɵɵproperty","ctx_r1","warning","ɵɵsanitizeHtml","ctx_r2","src","AddonModImscpViewPage_core_navigation_bar_14_Template_core_navigation_bar_action_0_listener","$event","_r7","ctx_r6","loadItem","ctx_r3","navigationItems","AddonModImscpViewPage","constructor","title","loaded","items","ngOnInit","cmId","getRequiredRouteNumberParam","courseId","initialItemHref","getRouteParam","error","showErrorModal","back","fetchContent","refresh","_this","_asyncToGenerator","module","imscp","loadImscpData","name","downloadResult","downloadResourceIfNeeded","contents","getModuleContents","createItemList","length","some","item","href","currentHref","undefined","lastViewedHref","getLastItemViewed","id","loadItemHref","showErrorModalDefault","failed","getErrorMessageFromError","instant","_this2","getModule","getImscp","_this3","_module$contents","result","contentsAlreadyLoaded","status","getModuleStatus","DOWNLOADED","downloadModule","ignoreCache","isOnline","loadModuleContents","doRefresh","refresher","_this4","ignoreErrors","Promise","all","invalidateContent","invalidateCourseUpdates","complete","itemHref","_this5","getIframeSrc","map","current","enabled","setTimeout","storeLastItemViewed","_this6","openSideModal","component","componentProps","selected","selectors","decls","vars","consts","template","AddonModImscpViewPage_Template","rf","ctx","ɵɵtemplate","AddonModImscpViewPage_ion_button_9_Template","AddonModImscpViewPage_ion_card_12_Template","AddonModImscpViewPage_core_iframe_13_Template","AddonModImscpViewPage_core_navigation_bar_14_Template"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/imscp/pages/view/view.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/imscp/pages/view/view.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreConstants } from '@/core/constants';\nimport { Component, OnInit } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreNavigationBarItem } from '@components/navigation-bar/navigation-bar';\nimport { CoreCourseResourceDownloadResult } from '@features/course/classes/main-resource-component';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseModuleData } from '@features/course/services/course-helper';\nimport { CoreCourseModulePrefetchDelegate } from '@features/course/services/module-prefetch-delegate';\nimport { CoreNetwork } from '@services/network';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { AddonModImscpTocComponent } from '../../components/toc/toc';\nimport { AddonModImscp, AddonModImscpImscp, AddonModImscpTocItem } from '../../services/imscp';\n\n/**\n * Page that displays a IMSCP content.\n */\n@Component({\n    selector: 'page-addon-mod-imscp-view',\n    templateUrl: 'view.html',\n})\nexport class AddonModImscpViewPage implements OnInit {\n\n    title = '';\n    cmId!: number;\n    courseId!: number;\n    initialItemHref?: string;\n    src = '';\n    warning = '';\n    navigationItems: CoreNavigationBarItem<AddonModImscpTocItem>[] = [];\n    loaded = false;\n\n    protected module?: CoreCourseModuleData;\n    protected imscp?: AddonModImscpImscp;\n    protected items: AddonModImscpTocItem[] = [];\n    protected currentHref?: string;\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        try {\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.initialItemHref = CoreNavigator.getRouteParam('initialHref');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.fetchContent();\n    }\n\n    /**\n     * Download IMSCP contents and load the current item.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @returns Promise resolved when done.\n     */\n    protected async fetchContent(refresh = false): Promise<void> {\n        try {\n            const { module, imscp } = await this.loadImscpData();\n\n            this.title = imscp.name;\n\n            const downloadResult = await this.downloadResourceIfNeeded(module, refresh);\n\n            // Get contents. No need to refresh, it has been done in downloadResourceIfNeeded.\n            const contents = await CoreCourse.getModuleContents(module, this.courseId);\n\n            this.items = AddonModImscp.createItemList(contents);\n\n            if (this.items.length) {\n                if (this.initialItemHref) {\n                    // Check it's valid.\n                    if (this.items.some(item => item.href === this.initialItemHref)) {\n                        this.currentHref = this.initialItemHref;\n                    }\n                }\n\n                if (this.currentHref === undefined) {\n                    // Get last viewed.\n                    const lastViewedHref = await AddonModImscp.getLastItemViewed(imscp.id);\n\n                    if (lastViewedHref !== undefined) {\n                        this.currentHref = lastViewedHref;\n                    } else {\n                        // Use first one.\n                        this.currentHref = this.items[0].href;\n                    }\n                }\n            }\n\n            if (this.currentHref === undefined) {\n                throw new CoreError('Empty TOC');\n            }\n\n            try {\n                await this.loadItemHref(this.currentHref);\n            } catch (error) {\n                CoreDomUtils.showErrorModalDefault(error, 'addon.mod_imscp.deploymenterror', true);\n\n                return;\n            }\n\n            if (downloadResult?.failed) {\n                const error = CoreTextUtils.getErrorMessageFromError(downloadResult.error) || downloadResult.error;\n                this.warning = Translate.instant('core.errordownloadingsomefiles') + (error ? ' ' + error : '');\n            } else {\n                this.warning = '';\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Load IMSCP data from WS.\n     *\n     * @returns Promise resolved when done.\n     */\n    async loadImscpData(): Promise<{ module: CoreCourseModuleData; imscp: AddonModImscpImscp }> {\n        this.module = await CoreCourse.getModule(this.cmId, this.courseId);\n        this.imscp = await AddonModImscp.getImscp(this.courseId, this.cmId);\n\n        return {\n            module: this.module,\n            imscp: this.imscp,\n        };\n    }\n\n    /**\n     * Download a resource if needed.\n     * If the download call fails the promise won't be rejected, but the error will be included in the returned object.\n     * If module.contents cannot be loaded then the Promise will be rejected.\n     *\n     * @param module Module data.\n     * @param refresh Whether we're refreshing data.\n     * @returns Promise resolved when done.\n     */\n    protected async downloadResourceIfNeeded(\n        module: CoreCourseModuleData,\n        refresh = false,\n    ): Promise<CoreCourseResourceDownloadResult> {\n\n        const result: CoreCourseResourceDownloadResult = {\n            failed: false,\n        };\n        let contentsAlreadyLoaded = false;\n\n        // Get module status to determine if it needs to be downloaded.\n        const status = await CoreCourseModulePrefetchDelegate.getModuleStatus(module, this.courseId, undefined, refresh);\n\n        if (status !== CoreConstants.DOWNLOADED) {\n            // Download content. This function also loads module contents if needed.\n            try {\n                await CoreCourseModulePrefetchDelegate.downloadModule(module, this.courseId);\n\n                // If we reach here it means the download process already loaded the contents, no need to do it again.\n                contentsAlreadyLoaded = true;\n            } catch (error) {\n                // Mark download as failed but go on since the main files could have been downloaded.\n                result.failed = true;\n                result.error = error;\n            }\n        }\n\n        if (!module.contents?.length || (refresh && !contentsAlreadyLoaded)) {\n            // Try to load the contents.\n            const ignoreCache = refresh && CoreNetwork.isOnline();\n\n            try {\n                await CoreCourse.loadModuleContents(module, undefined, undefined, false, ignoreCache);\n            } catch (error) {\n                // Error loading contents. If we ignored cache, try to get the cached value.\n                if (ignoreCache && !module.contents) {\n                    await CoreCourse.loadModuleContents(module);\n                } else if (!module.contents) {\n                    // Not able to load contents, throw the error.\n                    throw error;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @returns Promise resolved when done.\n     */\n    async doRefresh(refresher?: HTMLIonRefresherElement): Promise<void> {\n        await CoreUtils.ignoreErrors(Promise.all([\n            AddonModImscp.invalidateContent(this.cmId, this.courseId),\n            CoreCourseModulePrefetchDelegate.invalidateCourseUpdates(this.courseId), // To detect if IMSCP was updated.\n        ]));\n\n        await CoreUtils.ignoreErrors(this.fetchContent(true));\n\n        refresher?.complete();\n    }\n\n    /**\n     * Loads an item.\n     *\n     * @param itemHref Item Href.\n     * @returns Promise resolved when done.\n     */\n    async loadItemHref(itemHref: string): Promise<void> {\n        if (!this.module) {\n            return;\n        }\n\n        const src = await AddonModImscp.getIframeSrc(this.module, itemHref);\n        this.currentHref = itemHref;\n\n        this.navigationItems = this.items.map((item) => ({\n            item: item,\n            current: item.href == this.currentHref,\n            enabled: !!item.href,\n        }));\n\n        if (this.src && src == this.src) {\n            // Re-loading same page. Set it to empty and then re-set the src in the next digest so it detects it has changed.\n            this.src = '';\n            setTimeout(() => {\n                this.src = src;\n            });\n        } else {\n            this.src = src;\n        }\n\n        if (this.imscp) {\n            AddonModImscp.storeLastItemViewed(this.imscp.id, itemHref, this.courseId);\n        }\n    }\n\n    /**\n     * Loads an item.\n     *\n     * @param item Item.\n     */\n    loadItem(item: AddonModImscpTocItem): void {\n        this.loadItemHref(item.href);\n    }\n\n    /**\n     * Show the TOC.\n     */\n    async showToc(): Promise<void> {\n        // Create the toc modal.\n        const itemHref = await CoreDomUtils.openSideModal<string>({\n            component: AddonModImscpTocComponent,\n            componentProps: {\n                items: this.items,\n                selected: this.currentHref,\n            },\n        });\n\n        if (itemHref) {\n            this.loadItemHref(itemHref);\n        }\n    }\n\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>\n                <core-format-text [text]=\"title\" contextLevel=\"module\" [contextInstanceId]=\"cmId\" [courseId]=\"courseId\" />\n            </h1>\n        </ion-title>\n\n        <ion-buttons slot=\"end\">\n            <ion-button *ngIf=\"loaded\" (click)=\"showToc()\" aria-haspopup=\"true\" [attr.aria-label]=\"'addon.mod_imscp.toc' | translate\">\n                <ion-icon name=\"fas-bookmark\" slot=\"icon-only\" aria-hidden=\"true\" />\n            </ion-button>\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <!-- Content. -->\n    <core-loading [hideUntil]=\"loaded\">\n\n        <ion-card class=\"core-warning-card\" *ngIf=\"warning\">\n            <ion-item>\n                <ion-icon name=\"fas-triangle-exclamation\" slot=\"start\" aria-hidden=\"true\" />\n                <ion-label><span [innerHTML]=\"warning\"></span></ion-label>\n            </ion-item>\n        </ion-card>\n\n        <core-iframe *ngIf=\"loaded\" [src]=\"src\" [showFullscreenOnToolbar]=\"true\" [autoFullscreenOnRotate]=\"true\" />\n    </core-loading>\n\n    <core-navigation-bar collapsible-footer appearOnBottom *ngIf=\"loaded && navigationItems.length > 1\" [items]=\"navigationItems\"\n        (action)=\"loadItem($event)\" />\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}