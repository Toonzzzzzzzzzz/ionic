{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { AddonModGlossary, AddonModGlossaryProvider } from '../services/glossary';\nimport { AddonModGlossaryOffline } from '../services/glossary-offline';\n/**\n * Provides a collection of glossary entries.\n */\nexport class AddonModGlossaryEntriesSource extends CoreRoutedItemsManagerSource {\n  constructor(courseId, cmId, glossaryPathPrefix) {\n    super();\n    this.isSearch = false;\n    this.hasSearched = false;\n    this.onlineEntries = [];\n    this.offlineEntries = [];\n    this.COURSE_ID = courseId;\n    this.CM_ID = cmId;\n    this.GLOSSARY_PATH_PREFIX = glossaryPathPrefix;\n  }\n  /**\n   * Type guard to infer entry objects.\n   *\n   * @param entry Item to check.\n   * @returns Whether the item is an offline entry.\n   */\n  isOnlineEntry(entry) {\n    return 'id' in entry;\n  }\n  /**\n   * Type guard to infer entry objects.\n   *\n   * @param entry Item to check.\n   * @returns Whether the item is an offline entry.\n   */\n  isOfflineEntry(entry) {\n    return !this.isOnlineEntry(entry);\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemPath(entry) {\n    if (this.isOfflineEntry(entry)) {\n      return `${this.GLOSSARY_PATH_PREFIX}entry/new-${entry.timecreated}`;\n    }\n    return `${this.GLOSSARY_PATH_PREFIX}entry/${entry.id}`;\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemQueryParams() {\n    return {\n      cmId: this.CM_ID,\n      courseId: this.COURSE_ID\n    };\n  }\n  /**\n   * @inheritdoc\n   */\n  getPagesLoaded() {\n    if (this.items === null) {\n      return 0;\n    }\n    return Math.ceil(this.onlineEntries.length / this.getPageLength());\n  }\n  /**\n   * Start searching.\n   */\n  startSearch() {\n    this.isSearch = true;\n    this.setDirty(true);\n  }\n  /**\n   * Stop searching and restore unfiltered collection.\n   *\n   * @param cachedOnlineEntries Cached online entries.\n   * @param hasMoreOnlineEntries Whether there were more online entries.\n   */\n  stopSearch(cachedOnlineEntries, hasMoreOnlineEntries) {\n    if (!this.fetchMode) {\n      return;\n    }\n    this.isSearch = false;\n    this.hasSearched = false;\n    this.onlineEntries = cachedOnlineEntries;\n    this.hasMoreItems = hasMoreOnlineEntries;\n    this.setDirty(true);\n  }\n  /**\n   * Set search query.\n   *\n   * @param query Search query.\n   */\n  search(query) {\n    if (!this.glossary) {\n      return;\n    }\n    const glossaryId = this.glossary.id;\n    this.fetchFunction = options => AddonModGlossary.getEntriesBySearch(glossaryId, query, true, options);\n    this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesBySearch(glossaryId, query, true);\n    this.hasSearched = true;\n    this.setDirty(true);\n  }\n  /**\n   * Load glossary.\n   */\n  loadGlossary() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.glossary = yield AddonModGlossary.getGlossary(_this.COURSE_ID, _this.CM_ID);\n    })();\n  }\n  /**\n   * Invalidate glossary cache.\n   *\n   * @param invalidateGlossary Whether to invalidate the entire glossary or not\n   */\n  invalidateCache(invalidateGlossary = true) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield Promise.all([_this2.fetchInvalidate && _this2.fetchInvalidate(), invalidateGlossary && AddonModGlossary.invalidateCourseGlossaries(_this2.COURSE_ID), invalidateGlossary && _this2.glossary && AddonModGlossary.invalidateCategories(_this2.glossary.id)]);\n    })();\n  }\n  /**\n   * Change fetch mode.\n   *\n   * @param mode New mode.\n   */\n  switchMode(mode) {\n    if (!this.glossary) {\n      throw new Error('Can\\'t switch entries mode without a glossary!');\n    }\n    const glossaryId = this.glossary.id;\n    this.fetchMode = mode;\n    this.isSearch = false;\n    this.setDirty(true);\n    switch (mode) {\n      case 'author_all':\n        // Browse by author.\n        this.viewMode = 'author';\n        this.fetchFunction = options => AddonModGlossary.getEntriesByAuthor(glossaryId, options);\n        this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByAuthor(glossaryId);\n        break;\n      case 'cat_all':\n        // Browse by category.\n        this.viewMode = 'cat';\n        this.fetchFunction = options => AddonModGlossary.getEntriesByCategory(glossaryId, options);\n        this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByCategory(glossaryId);\n        break;\n      case 'newest_first':\n        // Newest first.\n        this.viewMode = 'date';\n        this.fetchFunction = options => AddonModGlossary.getEntriesByDate(glossaryId, 'CREATION', options);\n        this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByDate(glossaryId, 'CREATION');\n        break;\n      case 'recently_updated':\n        // Recently updated.\n        this.viewMode = 'date';\n        this.fetchFunction = options => AddonModGlossary.getEntriesByDate(glossaryId, 'UPDATE', options);\n        this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByDate(glossaryId, 'UPDATE');\n        break;\n      case 'letter_all':\n      default:\n        // Consider it is 'letter_all'.\n        this.viewMode = 'letter';\n        this.fetchMode = 'letter_all';\n        this.fetchFunction = options => AddonModGlossary.getEntriesByLetter(glossaryId, options);\n        this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByLetter(glossaryId);\n        break;\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  loadPageItems(page) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const glossary = _this3.glossary;\n      const fetchFunction = _this3.fetchFunction;\n      if (!glossary || !fetchFunction) {\n        throw new Error('Can\\'t load entries without glossary or fetch function');\n      }\n      const entries = [];\n      if (page === 0) {\n        const offlineEntries = yield AddonModGlossaryOffline.getGlossaryOfflineEntries(glossary.id);\n        offlineEntries.sort((a, b) => a.concept.localeCompare(b.concept));\n        entries.push(...offlineEntries);\n      }\n      const from = page * _this3.getPageLength();\n      const pageEntries = yield fetchFunction({\n        from,\n        cmId: _this3.CM_ID\n      });\n      entries.push(...pageEntries.entries);\n      return {\n        items: entries,\n        hasMoreItems: from + pageEntries.entries.length < pageEntries.count\n      };\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getPageLength() {\n    return AddonModGlossaryProvider.LIMIT_ENTRIES;\n  }\n  /**\n   * @inheritdoc\n   */\n  setItems(entries, hasMoreItems) {\n    this.onlineEntries = [];\n    this.offlineEntries = [];\n    entries.forEach(entry => {\n      this.isOnlineEntry(entry) && this.onlineEntries.push(entry);\n      this.isOfflineEntry(entry) && this.offlineEntries.push(entry);\n    });\n    super.setItems(entries, hasMoreItems);\n  }\n  /**\n   * @inheritdoc\n   */\n  reset() {\n    this.onlineEntries = [];\n    this.offlineEntries = [];\n    super.reset();\n  }\n}","map":{"version":3,"names":["CoreRoutedItemsManagerSource","AddonModGlossary","AddonModGlossaryProvider","AddonModGlossaryOffline","AddonModGlossaryEntriesSource","constructor","courseId","cmId","glossaryPathPrefix","isSearch","hasSearched","onlineEntries","offlineEntries","COURSE_ID","CM_ID","GLOSSARY_PATH_PREFIX","isOnlineEntry","entry","isOfflineEntry","getItemPath","timecreated","id","getItemQueryParams","getPagesLoaded","items","Math","ceil","length","getPageLength","startSearch","setDirty","stopSearch","cachedOnlineEntries","hasMoreOnlineEntries","fetchMode","hasMoreItems","search","query","glossary","glossaryId","fetchFunction","options","getEntriesBySearch","fetchInvalidate","invalidateEntriesBySearch","loadGlossary","_this","_asyncToGenerator","getGlossary","invalidateCache","invalidateGlossary","_this2","Promise","all","invalidateCourseGlossaries","invalidateCategories","switchMode","mode","Error","viewMode","getEntriesByAuthor","invalidateEntriesByAuthor","getEntriesByCategory","invalidateEntriesByCategory","getEntriesByDate","invalidateEntriesByDate","getEntriesByLetter","invalidateEntriesByLetter","loadPageItems","page","_this3","entries","getGlossaryOfflineEntries","sort","a","b","concept","localeCompare","push","from","pageEntries","count","LIMIT_ENTRIES","setItems","forEach","reset"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/classes/glossary-entries-source.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Params } from '@angular/router';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport {\n    AddonModGlossary,\n    AddonModGlossaryEntry,\n    AddonModGlossaryGetEntriesOptions,\n    AddonModGlossaryGetEntriesWSResponse,\n    AddonModGlossaryGlossary,\n    AddonModGlossaryProvider,\n} from '../services/glossary';\nimport { AddonModGlossaryOffline, AddonModGlossaryOfflineEntry } from '../services/glossary-offline';\n\n/**\n * Provides a collection of glossary entries.\n */\nexport class AddonModGlossaryEntriesSource extends CoreRoutedItemsManagerSource<AddonModGlossaryEntryItem> {\n\n    readonly COURSE_ID: number;\n    readonly CM_ID: number;\n    readonly GLOSSARY_PATH_PREFIX: string;\n\n    isSearch = false;\n    hasSearched = false;\n    fetchMode?: AddonModGlossaryFetchMode;\n    viewMode?: string;\n    glossary?: AddonModGlossaryGlossary;\n    onlineEntries: AddonModGlossaryEntry[] = [];\n    offlineEntries: AddonModGlossaryOfflineEntry[] = [];\n\n    protected fetchFunction?: (options?: AddonModGlossaryGetEntriesOptions) => Promise<AddonModGlossaryGetEntriesWSResponse>;\n    protected fetchInvalidate?: () => Promise<void>;\n\n    constructor(courseId: number, cmId: number, glossaryPathPrefix: string) {\n        super();\n\n        this.COURSE_ID = courseId;\n        this.CM_ID = cmId;\n        this.GLOSSARY_PATH_PREFIX = glossaryPathPrefix;\n    }\n\n    /**\n     * Type guard to infer entry objects.\n     *\n     * @param entry Item to check.\n     * @returns Whether the item is an offline entry.\n     */\n    isOnlineEntry(entry: AddonModGlossaryEntryItem): entry is AddonModGlossaryEntry {\n        return 'id' in entry;\n    }\n\n    /**\n     * Type guard to infer entry objects.\n     *\n     * @param entry Item to check.\n     * @returns Whether the item is an offline entry.\n     */\n    isOfflineEntry(entry: AddonModGlossaryEntryItem): entry is AddonModGlossaryOfflineEntry {\n        return !this.isOnlineEntry(entry);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(entry: AddonModGlossaryEntryItem): string {\n        if (this.isOfflineEntry(entry)) {\n            return `${this.GLOSSARY_PATH_PREFIX}entry/new-${entry.timecreated}`;\n        }\n\n        return `${this.GLOSSARY_PATH_PREFIX}entry/${entry.id}`;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemQueryParams(): Params {\n        return {\n            cmId: this.CM_ID,\n            courseId: this.COURSE_ID,\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getPagesLoaded(): number {\n        if (this.items === null) {\n            return 0;\n        }\n\n        return Math.ceil(this.onlineEntries.length / this.getPageLength());\n    }\n\n    /**\n     * Start searching.\n     */\n    startSearch(): void {\n        this.isSearch = true;\n        this.setDirty(true);\n    }\n\n    /**\n     * Stop searching and restore unfiltered collection.\n     *\n     * @param cachedOnlineEntries Cached online entries.\n     * @param hasMoreOnlineEntries Whether there were more online entries.\n     */\n    stopSearch(cachedOnlineEntries: AddonModGlossaryEntry[], hasMoreOnlineEntries: boolean): void {\n        if (!this.fetchMode) {\n            return;\n        }\n\n        this.isSearch = false;\n        this.hasSearched = false;\n        this.onlineEntries = cachedOnlineEntries;\n        this.hasMoreItems = hasMoreOnlineEntries;\n        this.setDirty(true);\n    }\n\n    /**\n     * Set search query.\n     *\n     * @param query Search query.\n     */\n    search(query: string): void {\n        if (!this.glossary) {\n            return;\n        }\n\n        const glossaryId = this.glossary.id;\n\n        this.fetchFunction = (options) => AddonModGlossary.getEntriesBySearch(glossaryId, query, true, options);\n        this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesBySearch(glossaryId, query, true);\n        this.hasSearched = true;\n        this.setDirty(true);\n    }\n\n    /**\n     * Load glossary.\n     */\n    async loadGlossary(): Promise<void> {\n        this.glossary = await AddonModGlossary.getGlossary(this.COURSE_ID, this.CM_ID);\n    }\n\n    /**\n     * Invalidate glossary cache.\n     *\n     * @param invalidateGlossary Whether to invalidate the entire glossary or not\n     */\n    async invalidateCache(invalidateGlossary: boolean = true): Promise<void> {\n        await Promise.all<unknown>([\n            this.fetchInvalidate && this.fetchInvalidate(),\n            invalidateGlossary && AddonModGlossary.invalidateCourseGlossaries(this.COURSE_ID),\n            invalidateGlossary && this.glossary && AddonModGlossary.invalidateCategories(this.glossary.id),\n        ]);\n    }\n\n    /**\n     * Change fetch mode.\n     *\n     * @param mode New mode.\n     */\n    switchMode(mode: AddonModGlossaryFetchMode): void {\n        if (!this.glossary) {\n            throw new Error('Can\\'t switch entries mode without a glossary!');\n        }\n\n        const glossaryId = this.glossary.id;\n        this.fetchMode = mode;\n        this.isSearch = false;\n        this.setDirty(true);\n\n        switch (mode) {\n            case 'author_all':\n                // Browse by author.\n                this.viewMode = 'author';\n                this.fetchFunction = (options) => AddonModGlossary.getEntriesByAuthor(glossaryId, options);\n                this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByAuthor(glossaryId);\n                break;\n\n            case 'cat_all':\n                // Browse by category.\n                this.viewMode = 'cat';\n                this.fetchFunction = (options) => AddonModGlossary.getEntriesByCategory(glossaryId, options);\n                this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByCategory(glossaryId);\n                break;\n\n            case 'newest_first':\n                // Newest first.\n                this.viewMode = 'date';\n                this.fetchFunction = (options) => AddonModGlossary.getEntriesByDate(glossaryId, 'CREATION', options);\n                this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByDate(glossaryId, 'CREATION');\n                break;\n\n            case 'recently_updated':\n                // Recently updated.\n                this.viewMode = 'date';\n                this.fetchFunction = (options) => AddonModGlossary.getEntriesByDate(glossaryId, 'UPDATE', options);\n                this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByDate(glossaryId, 'UPDATE');\n                break;\n\n            case 'letter_all':\n            default:\n                // Consider it is 'letter_all'.\n                this.viewMode = 'letter';\n                this.fetchMode = 'letter_all';\n                this.fetchFunction = (options) => AddonModGlossary.getEntriesByLetter(glossaryId, options);\n                this.fetchInvalidate = () => AddonModGlossary.invalidateEntriesByLetter(glossaryId);\n                break;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(page: number): Promise<{ items: AddonModGlossaryEntryItem[]; hasMoreItems: boolean }> {\n        const glossary = this.glossary;\n        const fetchFunction = this.fetchFunction;\n\n        if (!glossary || !fetchFunction) {\n            throw new Error('Can\\'t load entries without glossary or fetch function');\n        }\n\n        const entries: AddonModGlossaryEntryItem[] = [];\n\n        if (page === 0) {\n            const offlineEntries = await AddonModGlossaryOffline.getGlossaryOfflineEntries(glossary.id);\n\n            offlineEntries.sort((a, b) => a.concept.localeCompare(b.concept));\n\n            entries.push(...offlineEntries);\n        }\n\n        const from = page * this.getPageLength();\n        const pageEntries = await fetchFunction({ from, cmId: this.CM_ID });\n\n        entries.push(...pageEntries.entries);\n\n        return {\n            items: entries,\n            hasMoreItems: from + pageEntries.entries.length < pageEntries.count,\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getPageLength(): number {\n        return AddonModGlossaryProvider.LIMIT_ENTRIES;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected setItems(entries: AddonModGlossaryEntryItem[], hasMoreItems: boolean): void {\n        this.onlineEntries = [];\n        this.offlineEntries = [];\n\n        entries.forEach(entry => {\n            this.isOnlineEntry(entry) && this.onlineEntries.push(entry);\n            this.isOfflineEntry(entry) && this.offlineEntries.push(entry);\n        });\n\n        super.setItems(entries, hasMoreItems);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    reset(): void {\n        this.onlineEntries = [];\n        this.offlineEntries = [];\n\n        super.reset();\n    }\n\n}\n\n/**\n * Type of items that can be held by the entries manager.\n */\nexport type AddonModGlossaryEntryItem = AddonModGlossaryEntry | AddonModGlossaryOfflineEntry;\n\n/**\n * Fetch mode to sort entries.\n */\nexport type AddonModGlossaryFetchMode = 'author_all' | 'cat_all' | 'newest_first' | 'recently_updated' | 'letter_all';\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,4BAA4B,QAAQ,uDAAuD;AACpG,SACIC,gBAAgB,EAKhBC,wBAAwB,QACrB,sBAAsB;AAC7B,SAASC,uBAAuB,QAAsC,8BAA8B;AAEpG;;;AAGA,OAAM,MAAOC,6BAA8B,SAAQJ,4BAAuD;EAiBtGK,YAAYC,QAAgB,EAAEC,IAAY,EAAEC,kBAA0B;IAClE,KAAK,EAAE;IAZX,KAAAC,QAAQ,GAAG,KAAK;IAChB,KAAAC,WAAW,GAAG,KAAK;IAInB,KAAAC,aAAa,GAA4B,EAAE;IAC3C,KAAAC,cAAc,GAAmC,EAAE;IAQ/C,IAAI,CAACC,SAAS,GAAGP,QAAQ;IACzB,IAAI,CAACQ,KAAK,GAAGP,IAAI;IACjB,IAAI,CAACQ,oBAAoB,GAAGP,kBAAkB;EAClD;EAEA;;;;;;EAMAQ,aAAaA,CAACC,KAAgC;IAC1C,OAAO,IAAI,IAAIA,KAAK;EACxB;EAEA;;;;;;EAMAC,cAAcA,CAACD,KAAgC;IAC3C,OAAO,CAAC,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC;EACrC;EAEA;;;EAGAE,WAAWA,CAACF,KAAgC;IACxC,IAAI,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,EAAE;MAC5B,OAAO,GAAG,IAAI,CAACF,oBAAoB,aAAaE,KAAK,CAACG,WAAW,EAAE;;IAGvE,OAAO,GAAG,IAAI,CAACL,oBAAoB,SAASE,KAAK,CAACI,EAAE,EAAE;EAC1D;EAEA;;;EAGAC,kBAAkBA,CAAA;IACd,OAAO;MACHf,IAAI,EAAE,IAAI,CAACO,KAAK;MAChBR,QAAQ,EAAE,IAAI,CAACO;KAClB;EACL;EAEA;;;EAGAU,cAAcA,CAAA;IACV,IAAI,IAAI,CAACC,KAAK,KAAK,IAAI,EAAE;MACrB,OAAO,CAAC;;IAGZ,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACf,aAAa,CAACgB,MAAM,GAAG,IAAI,CAACC,aAAa,EAAE,CAAC;EACtE;EAEA;;;EAGAC,WAAWA,CAAA;IACP,IAAI,CAACpB,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACqB,QAAQ,CAAC,IAAI,CAAC;EACvB;EAEA;;;;;;EAMAC,UAAUA,CAACC,mBAA4C,EAAEC,oBAA6B;IAClF,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACjB;;IAGJ,IAAI,CAACzB,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,aAAa,GAAGqB,mBAAmB;IACxC,IAAI,CAACG,YAAY,GAAGF,oBAAoB;IACxC,IAAI,CAACH,QAAQ,CAAC,IAAI,CAAC;EACvB;EAEA;;;;;EAKAM,MAAMA,CAACC,KAAa;IAChB,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MAChB;;IAGJ,MAAMC,UAAU,GAAG,IAAI,CAACD,QAAQ,CAACjB,EAAE;IAEnC,IAAI,CAACmB,aAAa,GAAIC,OAAO,IAAKxC,gBAAgB,CAACyC,kBAAkB,CAACH,UAAU,EAAEF,KAAK,EAAE,IAAI,EAAEI,OAAO,CAAC;IACvG,IAAI,CAACE,eAAe,GAAG,MAAM1C,gBAAgB,CAAC2C,yBAAyB,CAACL,UAAU,EAAEF,KAAK,EAAE,IAAI,CAAC;IAChG,IAAI,CAAC3B,WAAW,GAAG,IAAI;IACvB,IAAI,CAACoB,QAAQ,CAAC,IAAI,CAAC;EACvB;EAEA;;;EAGMe,YAAYA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACdD,KAAI,CAACR,QAAQ,SAASrC,gBAAgB,CAAC+C,WAAW,CAACF,KAAI,CAACjC,SAAS,EAAEiC,KAAI,CAAChC,KAAK,CAAC;IAAC;EACnF;EAEA;;;;;EAKMmC,eAAeA,CAACC,kBAAA,GAA8B,IAAI;IAAA,IAAAC,MAAA;IAAA,OAAAJ,iBAAA;MACpD,MAAMK,OAAO,CAACC,GAAG,CAAU,CACvBF,MAAI,CAACR,eAAe,IAAIQ,MAAI,CAACR,eAAe,EAAE,EAC9CO,kBAAkB,IAAIjD,gBAAgB,CAACqD,0BAA0B,CAACH,MAAI,CAACtC,SAAS,CAAC,EACjFqC,kBAAkB,IAAIC,MAAI,CAACb,QAAQ,IAAIrC,gBAAgB,CAACsD,oBAAoB,CAACJ,MAAI,CAACb,QAAQ,CAACjB,EAAE,CAAC,CACjG,CAAC;IAAC;EACP;EAEA;;;;;EAKAmC,UAAUA,CAACC,IAA+B;IACtC,IAAI,CAAC,IAAI,CAACnB,QAAQ,EAAE;MAChB,MAAM,IAAIoB,KAAK,CAAC,gDAAgD,CAAC;;IAGrE,MAAMnB,UAAU,GAAG,IAAI,CAACD,QAAQ,CAACjB,EAAE;IACnC,IAAI,CAACa,SAAS,GAAGuB,IAAI;IACrB,IAAI,CAAChD,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACqB,QAAQ,CAAC,IAAI,CAAC;IAEnB,QAAQ2B,IAAI;MACR,KAAK,YAAY;QACb;QACA,IAAI,CAACE,QAAQ,GAAG,QAAQ;QACxB,IAAI,CAACnB,aAAa,GAAIC,OAAO,IAAKxC,gBAAgB,CAAC2D,kBAAkB,CAACrB,UAAU,EAAEE,OAAO,CAAC;QAC1F,IAAI,CAACE,eAAe,GAAG,MAAM1C,gBAAgB,CAAC4D,yBAAyB,CAACtB,UAAU,CAAC;QACnF;MAEJ,KAAK,SAAS;QACV;QACA,IAAI,CAACoB,QAAQ,GAAG,KAAK;QACrB,IAAI,CAACnB,aAAa,GAAIC,OAAO,IAAKxC,gBAAgB,CAAC6D,oBAAoB,CAACvB,UAAU,EAAEE,OAAO,CAAC;QAC5F,IAAI,CAACE,eAAe,GAAG,MAAM1C,gBAAgB,CAAC8D,2BAA2B,CAACxB,UAAU,CAAC;QACrF;MAEJ,KAAK,cAAc;QACf;QACA,IAAI,CAACoB,QAAQ,GAAG,MAAM;QACtB,IAAI,CAACnB,aAAa,GAAIC,OAAO,IAAKxC,gBAAgB,CAAC+D,gBAAgB,CAACzB,UAAU,EAAE,UAAU,EAAEE,OAAO,CAAC;QACpG,IAAI,CAACE,eAAe,GAAG,MAAM1C,gBAAgB,CAACgE,uBAAuB,CAAC1B,UAAU,EAAE,UAAU,CAAC;QAC7F;MAEJ,KAAK,kBAAkB;QACnB;QACA,IAAI,CAACoB,QAAQ,GAAG,MAAM;QACtB,IAAI,CAACnB,aAAa,GAAIC,OAAO,IAAKxC,gBAAgB,CAAC+D,gBAAgB,CAACzB,UAAU,EAAE,QAAQ,EAAEE,OAAO,CAAC;QAClG,IAAI,CAACE,eAAe,GAAG,MAAM1C,gBAAgB,CAACgE,uBAAuB,CAAC1B,UAAU,EAAE,QAAQ,CAAC;QAC3F;MAEJ,KAAK,YAAY;MACjB;QACI;QACA,IAAI,CAACoB,QAAQ,GAAG,QAAQ;QACxB,IAAI,CAACzB,SAAS,GAAG,YAAY;QAC7B,IAAI,CAACM,aAAa,GAAIC,OAAO,IAAKxC,gBAAgB,CAACiE,kBAAkB,CAAC3B,UAAU,EAAEE,OAAO,CAAC;QAC1F,IAAI,CAACE,eAAe,GAAG,MAAM1C,gBAAgB,CAACkE,yBAAyB,CAAC5B,UAAU,CAAC;QACnF;;EAEZ;EAEA;;;EAGgB6B,aAAaA,CAACC,IAAY;IAAA,IAAAC,MAAA;IAAA,OAAAvB,iBAAA;MACtC,MAAMT,QAAQ,GAAGgC,MAAI,CAAChC,QAAQ;MAC9B,MAAME,aAAa,GAAG8B,MAAI,CAAC9B,aAAa;MAExC,IAAI,CAACF,QAAQ,IAAI,CAACE,aAAa,EAAE;QAC7B,MAAM,IAAIkB,KAAK,CAAC,wDAAwD,CAAC;;MAG7E,MAAMa,OAAO,GAAgC,EAAE;MAE/C,IAAIF,IAAI,KAAK,CAAC,EAAE;QACZ,MAAMzD,cAAc,SAAST,uBAAuB,CAACqE,yBAAyB,CAAClC,QAAQ,CAACjB,EAAE,CAAC;QAE3FT,cAAc,CAAC6D,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,OAAO,CAACC,aAAa,CAACF,CAAC,CAACC,OAAO,CAAC,CAAC;QAEjEL,OAAO,CAACO,IAAI,CAAC,GAAGlE,cAAc,CAAC;;MAGnC,MAAMmE,IAAI,GAAGV,IAAI,GAAGC,MAAI,CAAC1C,aAAa,EAAE;MACxC,MAAMoD,WAAW,SAASxC,aAAa,CAAC;QAAEuC,IAAI;QAAExE,IAAI,EAAE+D,MAAI,CAACxD;MAAK,CAAE,CAAC;MAEnEyD,OAAO,CAACO,IAAI,CAAC,GAAGE,WAAW,CAACT,OAAO,CAAC;MAEpC,OAAO;QACH/C,KAAK,EAAE+C,OAAO;QACdpC,YAAY,EAAE4C,IAAI,GAAGC,WAAW,CAACT,OAAO,CAAC5C,MAAM,GAAGqD,WAAW,CAACC;OACjE;IAAC;EACN;EAEA;;;EAGUrD,aAAaA,CAAA;IACnB,OAAO1B,wBAAwB,CAACgF,aAAa;EACjD;EAEA;;;EAGUC,QAAQA,CAACZ,OAAoC,EAAEpC,YAAqB;IAC1E,IAAI,CAACxB,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,cAAc,GAAG,EAAE;IAExB2D,OAAO,CAACa,OAAO,CAACnE,KAAK,IAAG;MACpB,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,IAAI,IAAI,CAACN,aAAa,CAACmE,IAAI,CAAC7D,KAAK,CAAC;MAC3D,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,IAAI,IAAI,CAACL,cAAc,CAACkE,IAAI,CAAC7D,KAAK,CAAC;IACjE,CAAC,CAAC;IAEF,KAAK,CAACkE,QAAQ,CAACZ,OAAO,EAAEpC,YAAY,CAAC;EACzC;EAEA;;;EAGAkD,KAAKA,CAAA;IACD,IAAI,CAAC1E,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,cAAc,GAAG,EAAE;IAExB,KAAK,CAACyE,KAAK,EAAE;EACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}