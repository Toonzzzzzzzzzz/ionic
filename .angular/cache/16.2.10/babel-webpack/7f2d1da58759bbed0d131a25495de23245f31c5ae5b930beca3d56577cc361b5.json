{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreWSError } from '@classes/errors/wserror';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCoursesProvider } from '@features/courses/services/courses';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides some features to manage self enrolment.\n */\nexport class AddonEnrolSelfService {\n  /**\n   * Get info from a course self enrolment method.\n   *\n   * @param instanceId Self instance ID.\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved when the info is retrieved.\n   */\n  getSelfEnrolmentInfo(instanceId, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        instanceid: instanceId\n      };\n      const preSets = {\n        cacheKey: _this.getSelfEnrolmentInfoCacheKey(instanceId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      };\n      return yield site.read('enrol_self_get_instance_info', params, preSets);\n    })();\n  }\n  /**\n   * Get cache key for get course self enrolment methods WS call.\n   *\n   * @param instanceId Self instance ID.\n   * @returns Cache key.\n   */\n  getSelfEnrolmentInfoCacheKey(instanceId) {\n    return AddonEnrolSelfService.ROOT_CACHE_KEY + instanceId;\n  }\n  /**\n   * Invalidates get course self enrolment info WS call.\n   *\n   * @param instanceId Self instance ID.\n   * @param siteId Site Id. If not defined, use current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateSelfEnrolmentInfo(instanceId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this2.getSelfEnrolmentInfoCacheKey(instanceId));\n    })();\n  }\n  /**\n   * Self enrol current user in a certain course.\n   *\n   * @param courseId Course ID.\n   * @param password Password to use.\n   * @param instanceId Enrol instance ID.\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved if the user is enrolled. If the password is invalid, the promise is rejected\n   *         with an object with errorcode = CoreCoursesProvider.ENROL_INVALID_KEY.\n   */\n  selfEnrol(courseId, password = '', instanceId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        courseid: courseId,\n        password: password\n      };\n      if (instanceId) {\n        params.instanceid = instanceId;\n      }\n      const response = yield site.write('enrol_self_enrol_user', params);\n      if (!response) {\n        throw Error('WS enrol_self_enrol_user failed');\n      }\n      if (response.status) {\n        return true;\n      }\n      if (response.warnings && response.warnings.length) {\n        // Invalid password warnings.\n        const warning = response.warnings.find(warning => warning.warningcode == '2' || warning.warningcode == '3' || warning.warningcode == '4');\n        if (warning) {\n          throw new CoreWSError({\n            errorcode: CoreCoursesProvider.ENROL_INVALID_KEY,\n            message: warning.message\n          });\n        } else {\n          throw new CoreWSError(response.warnings[0]);\n        }\n      }\n      throw Error('WS enrol_self_enrol_user failed without warnings');\n    })();\n  }\n}\n_class = AddonEnrolSelfService;\n_class.ROOT_CACHE_KEY = 'AddonEnrolSelf:';\n_class.ɵfac = function AddonEnrolSelfService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonEnrolSelf = makeSingleton(AddonEnrolSelfService);","map":{"version":3,"names":["CoreWSError","CoreSite","CoreCoursesProvider","CoreSites","makeSingleton","AddonEnrolSelfService","getSelfEnrolmentInfo","instanceId","siteId","_this","_asyncToGenerator","site","getSite","params","instanceid","preSets","cacheKey","getSelfEnrolmentInfoCacheKey","updateFrequency","FREQUENCY_RARELY","read","ROOT_CACHE_KEY","invalidateSelfEnrolmentInfo","_this2","invalidateWsCacheForKey","selfEnrol","courseId","password","courseid","response","write","Error","status","warnings","length","warning","find","warningcode","errorcode","ENROL_INVALID_KEY","message","_class","factory","ɵfac","providedIn","AddonEnrolSelf"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/enrol/self/services/self.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreWSError } from '@classes/errors/wserror';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCoursesProvider } from '@features/courses/services/courses';\nimport { CoreSites } from '@services/sites';\nimport { CoreStatusWithWarningsWSResponse } from '@services/ws';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Service that provides some features to manage self enrolment.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonEnrolSelfService {\n\n    protected static readonly ROOT_CACHE_KEY = 'AddonEnrolSelf:';\n\n    /**\n     * Get info from a course self enrolment method.\n     *\n     * @param instanceId Self instance ID.\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved when the info is retrieved.\n     */\n    async getSelfEnrolmentInfo(instanceId: number, siteId?: string): Promise<AddonEnrolSelfGetInstanceInfoWSResponse> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonEnrolSelfGetInstanceInfoWSParams = {\n            instanceid: instanceId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getSelfEnrolmentInfoCacheKey(instanceId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n        };\n\n        return await site.read<AddonEnrolSelfGetInstanceInfoWSResponse>('enrol_self_get_instance_info', params, preSets);\n    }\n\n    /**\n     * Get cache key for get course self enrolment methods WS call.\n     *\n     * @param instanceId Self instance ID.\n     * @returns Cache key.\n     */\n    protected getSelfEnrolmentInfoCacheKey(instanceId: number): string {\n        return AddonEnrolSelfService.ROOT_CACHE_KEY + instanceId;\n    }\n\n    /**\n     * Invalidates get course self enrolment info WS call.\n     *\n     * @param instanceId Self instance ID.\n     * @param siteId Site Id. If not defined, use current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateSelfEnrolmentInfo(instanceId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getSelfEnrolmentInfoCacheKey(instanceId));\n    }\n\n    /**\n     * Self enrol current user in a certain course.\n     *\n     * @param courseId Course ID.\n     * @param password Password to use.\n     * @param instanceId Enrol instance ID.\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved if the user is enrolled. If the password is invalid, the promise is rejected\n     *         with an object with errorcode = CoreCoursesProvider.ENROL_INVALID_KEY.\n     */\n    async selfEnrol(courseId: number, password: string = '', instanceId?: number, siteId?: string): Promise<boolean> {\n\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonEnrolSelfEnrolUserWSParams = {\n            courseid: courseId,\n            password: password,\n        };\n        if (instanceId) {\n            params.instanceid = instanceId;\n        }\n\n        const response = await site.write<CoreStatusWithWarningsWSResponse>('enrol_self_enrol_user', params);\n\n        if (!response) {\n            throw Error('WS enrol_self_enrol_user failed');\n        }\n\n        if (response.status) {\n            return true;\n        }\n\n        if (response.warnings && response.warnings.length) {\n            // Invalid password warnings.\n            const warning = response.warnings.find((warning) =>\n                warning.warningcode == '2' || warning.warningcode == '3' || warning.warningcode == '4');\n\n            if (warning) {\n                throw new CoreWSError({ errorcode: CoreCoursesProvider.ENROL_INVALID_KEY, message: warning.message });\n            } else {\n                throw new CoreWSError(response.warnings[0]);\n            }\n        }\n\n        throw Error('WS enrol_self_enrol_user failed without warnings');\n    }\n\n}\nexport const AddonEnrolSelf = makeSingleton(AddonEnrolSelfService);\n\n/**\n * Params of enrol_self_get_instance_info WS.\n */\ntype AddonEnrolSelfGetInstanceInfoWSParams = {\n    instanceid: number; // Instance id of self enrolment plugin.\n};\n\n/**\n * Data returned by enrol_self_get_instance_info WS.\n */\nexport type AddonEnrolSelfGetInstanceInfoWSResponse = {\n    id: number; // Id of course enrolment instance.\n    courseid: number; // Id of course.\n    type: string; // Type of enrolment plugin.\n    name: string; // Name of enrolment plugin.\n    status: string; // Status of enrolment plugin.\n    enrolpassword?: string; // Password required for enrolment.\n};\n\n/**\n * Params of enrol_self_enrol_user WS.\n */\ntype AddonEnrolSelfEnrolUserWSParams = {\n    courseid: number; // Id of the course.\n    password?: string; // Enrolment key.\n    instanceid?: number; // Instance id of self enrolment plugin.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}