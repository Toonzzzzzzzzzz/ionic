{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreForms } from '@singletons/form';\nimport { ModalController } from '@singletons';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"passwordForm\"];\nfunction CorePasswordModalComponent_ion_item_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 12);\n    i0.ɵɵelement(1, \"core-format-text\", 13);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(2, 1, ctx_r1.error));\n  }\n}\n/**\n * Modal that asks the password.\n *\n * WARNING: This component is not loaded with components.module.ts.\n */\nexport class CorePasswordModalComponent {\n  constructor() {\n    this.title = 'core.login.password'; // Translatable string to be shown on modal title.\n    this.placeholder = 'core.login.password'; // Translatable string to be shown on password input as placeholder.\n    this.submit = 'core.submit'; // Translatable string to be shown on submit button.\n    this.password = ''; // Previous entered password.\n  }\n  /**\n   * Send the password back.\n   *\n   * @param e Event.\n   */\n  submitPassword(e) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      e.preventDefault();\n      e.stopPropagation();\n      CoreForms.triggerFormSubmittedEvent(_this.formElement, false, CoreSites.getCurrentSiteId());\n      const response = yield _this.validatePassword(_this.password);\n      if (response.validated === undefined) {\n        ModalController.dismiss(response);\n      }\n      if (response.validated) {\n        ModalController.dismiss(response);\n      }\n      if (typeof response.error === 'string') {\n        _this.error = response.error;\n      } else if (response.error) {\n        ModalController.dismiss(response.error);\n      }\n    })();\n  }\n  /**\n   * Validates the entered password if validator is available.\n   *\n   * @param password Entered password.\n   * @returns Response of the modal.\n   */\n  validatePassword(password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const response = {\n        password\n      };\n      if (!_this2.validator) {\n        return response;\n      }\n      const modal = yield CoreDomUtils.showModalLoading('core.loading', true);\n      try {\n        return yield _this2.validator(password);\n      } catch (error) {\n        response.validated = false;\n        response.error = error;\n      } finally {\n        modal.dismiss();\n      }\n      return response;\n    })();\n  }\n  /**\n   * Close modal.\n   */\n  closeModal() {\n    CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n    ModalController.dismiss();\n  }\n}\n_class = CorePasswordModalComponent;\n_class.ɵfac = function CorePasswordModalComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-password-modal\"]],\n  viewQuery: function CorePasswordModalComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formElement = _t.first);\n    }\n  },\n  inputs: {\n    title: \"title\",\n    placeholder: \"placeholder\",\n    submit: \"submit\",\n    validator: \"validator\"\n  },\n  decls: 26,\n  vars: 19,\n  consts: [[\"slot\", \"end\"], [\"fill\", \"clear\", 3, \"click\"], [\"slot\", \"icon-only\", \"name\", \"fas-xmark\", \"aria-hidden\", \"true\"], [1, \"ion-padding\"], [3, \"ngSubmit\"], [\"passwordForm\", \"\"], [1, \"sr-only\"], [\"name\", \"password\"], [\"name\", \"password\", \"type\", \"password\", \"core-auto-focus\", \"\", 1, \"ion-text-wrap\", \"core-ioninput-password\", 3, \"placeholder\", \"ngModel\", \"clearOnEdit\", \"ngModelChange\"], [\"class\", \"ion-text-wrap ion-padding-top text-danger\", 4, \"ngIf\"], [\"expand\", \"block\", \"type\", \"submit\", 3, \"disabled\"], [\"type\", \"submit\", 1, \"core-submit-hidden-enter\"], [1, \"ion-text-wrap\", \"ion-padding-top\", \"text-danger\"], [3, \"text\"]],\n  template: function CorePasswordModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\")(3, \"h1\");\n      i0.ɵɵtext(4);\n      i0.ɵɵpipe(5, \"translate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"ion-buttons\", 0)(7, \"ion-button\", 1);\n      i0.ɵɵlistener(\"click\", function CorePasswordModalComponent_Template_ion_button_click_7_listener() {\n        return ctx.closeModal();\n      });\n      i0.ɵɵpipe(8, \"translate\");\n      i0.ɵɵelement(9, \"ion-icon\", 2);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(10, \"ion-content\", 3)(11, \"form\", 4, 5);\n      i0.ɵɵlistener(\"ngSubmit\", function CorePasswordModalComponent_Template_form_ngSubmit_11_listener($event) {\n        return ctx.submitPassword($event);\n      });\n      i0.ɵɵelementStart(13, \"div\")(14, \"ion-item\")(15, \"ion-label\", 6);\n      i0.ɵɵtext(16);\n      i0.ɵɵpipe(17, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"core-show-password\", 7)(19, \"ion-input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function CorePasswordModalComponent_Template_ion_input_ngModelChange_19_listener($event) {\n        return ctx.password = $event;\n      });\n      i0.ɵɵpipe(20, \"translate\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(21, CorePasswordModalComponent_ion_item_21_Template, 3, 3, \"ion-item\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"ion-button\", 10);\n      i0.ɵɵtext(23);\n      i0.ɵɵpipe(24, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"input\", 11);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 9, ctx.title));\n      i0.ɵɵadvance(3);\n      i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(8, 11, \"core.close\"));\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(17, 13, ctx.placeholder));\n      i0.ɵɵadvance(3);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(20, 15, ctx.placeholder));\n      i0.ɵɵproperty(\"ngModel\", ctx.password)(\"clearOnEdit\", false);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.error);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.password);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(24, 17, ctx.submit), \" \");\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreSites","CoreForms","ModalController","CoreDomUtils","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ɵɵpipeBind1","ctx_r1","error","CorePasswordModalComponent","constructor","title","placeholder","submit","password","submitPassword","e","_this","_asyncToGenerator","preventDefault","stopPropagation","triggerFormSubmittedEvent","formElement","getCurrentSiteId","response","validatePassword","validated","undefined","dismiss","_this2","validator","modal","showModalLoading","closeModal","triggerFormCancelledEvent","selectors","viewQuery","CorePasswordModalComponent_Query","rf","ctx","ɵɵtext","ɵɵlistener","CorePasswordModalComponent_Template_ion_button_click_7_listener","CorePasswordModalComponent_Template_form_ngSubmit_11_listener","$event","CorePasswordModalComponent_Template_ion_input_ngModelChange_19_listener","ɵɵtemplate","CorePasswordModalComponent_ion_item_21_Template","ɵɵtextInterpolate","ɵɵattribute","ɵɵpropertyInterpolate","ɵɵtextInterpolate1"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/password-modal/password-modal.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/password-modal/password-modal.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, ViewChild, ElementRef, Input } from '@angular/core';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreForms } from '@singletons/form';\nimport { ModalController } from '@singletons';\nimport { CoreDomUtils } from '@services/utils/dom';\n\n/**\n * Modal that asks the password.\n *\n * WARNING: This component is not loaded with components.module.ts.\n */\n@Component({\n    selector: 'core-password-modal',\n    templateUrl: 'password-modal.html',\n})\nexport class CorePasswordModalComponent {\n\n    @ViewChild('passwordForm') formElement?: ElementRef;\n\n    @Input() title = 'core.login.password'; // Translatable string to be shown on modal title.\n    @Input() placeholder =  'core.login.password'; // Translatable string to be shown on password input as placeholder.\n    @Input() submit = 'core.submit'; // Translatable string to be shown on submit button.\n    @Input() validator?: (password?: string) => Promise<CorePasswordModalResponse>; // Function to validate the password.\n\n    password = ''; // Previous entered password.\n    error?: string; // Error message to be shown.\n\n    /**\n     * Send the password back.\n     *\n     * @param e Event.\n     */\n    async submitPassword(e: Event): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        CoreForms.triggerFormSubmittedEvent(this.formElement, false, CoreSites.getCurrentSiteId());\n\n        const response = await this.validatePassword(this.password);\n\n        if (response.validated === undefined) {\n            ModalController.dismiss(response);\n        }\n\n        if (response.validated) {\n            ModalController.dismiss(response);\n        }\n\n        if (typeof response.error === 'string') {\n            this.error = response.error;\n        } else if (response.error) {\n            ModalController.dismiss(response.error);\n        }\n\n    }\n\n    /**\n     * Validates the entered password if validator is available.\n     *\n     * @param password Entered password.\n     * @returns Response of the modal.\n     */\n    protected async validatePassword(password: string): Promise<CorePasswordModalResponse> {\n        const response: CorePasswordModalResponse = { password };\n\n        if (!this.validator) {\n            return response;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.loading', true);\n        try {\n            return await this.validator(password);\n        } catch (error) {\n            response.validated = false;\n            response.error = error;\n        } finally {\n            modal.dismiss();\n        }\n\n        return response;\n\n    }\n\n    /**\n     * Close modal.\n     */\n    closeModal(): void {\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n\n        ModalController.dismiss();\n    }\n\n}\n\nexport type CorePasswordModalParams = Partial<Pick<CorePasswordModalComponent, 'title' | 'placeholder' | 'submit' | 'validator'>>;\n\nexport type CorePasswordModalResponse = {\n    password: string;\n    validated?: boolean;\n    error?: string;\n};\n","<ion-header>\n    <ion-toolbar>\n        <ion-title>\n            <h1>{{ title | translate }}</h1>\n        </ion-title>\n        <ion-buttons slot=\"end\">\n            <ion-button fill=\"clear\" (click)=\"closeModal()\" [attr.aria-label]=\"'core.close' | translate\">\n                <ion-icon slot=\"icon-only\" name=\"fas-xmark\" aria-hidden=\"true\" />\n            </ion-button>\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content class=\"ion-padding\">\n    <form (ngSubmit)=\"submitPassword($event)\" #passwordForm>\n        <div>\n            <ion-item>\n                <ion-label class=\"sr-only\">{{ placeholder | translate }}</ion-label>\n                <core-show-password name=\"password\">\n                    <ion-input class=\"ion-text-wrap core-ioninput-password\" name=\"password\" type=\"password\"\n                        placeholder=\"{{ placeholder | translate }}\" [(ngModel)]=\"password\" core-auto-focus [clearOnEdit]=\"false\" />\n                </core-show-password>\n            </ion-item>\n            <ion-item *ngIf=\"error\" class=\"ion-text-wrap ion-padding-top text-danger\">\n                <core-format-text [text]=\"error | translate\" />\n            </ion-item>\n        </div>\n        <ion-button expand=\"block\" type=\"submit\" [disabled]=\"!password\">\n            {{ submit | translate }}\n        </ion-button>\n        <!-- Remove this once Ionic fixes this bug: https://github.com/ionic-team/ionic-framework/issues/19368 -->\n        <input type=\"submit\" class=\"core-submit-hidden-enter\" />\n    </form>\n</ion-content>\n"],"mappings":";;AAgBA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,eAAe,QAAQ,aAAa;AAC7C,SAASC,YAAY,QAAQ,qBAAqB;;;;;ICGtCC,EAAA,CAAAC,cAAA,mBAA0E;IACtED,EAAA,CAAAE,SAAA,2BAA+C;;IACnDF,EAAA,CAAAG,YAAA,EAAW;;;;IADWH,EAAA,CAAAI,SAAA,GAA0B;IAA1BJ,EAAA,CAAAK,UAAA,SAAAL,EAAA,CAAAM,WAAA,OAAAC,MAAA,CAAAC,KAAA,EAA0B;;;ADF5D;;;;;AASA,OAAM,MAAOC,0BAA0B;EAJvCC,YAAA;IAQa,KAAAC,KAAK,GAAG,qBAAqB,CAAC,CAAC;IAC/B,KAAAC,WAAW,GAAI,qBAAqB,CAAC,CAAC;IACtC,KAAAC,MAAM,GAAG,aAAa,CAAC,CAAC;IAGjC,KAAAC,QAAQ,GAAG,EAAE,CAAC,CAAC;;EAGf;;;;;EAKMC,cAAcA,CAACC,CAAQ;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACzBF,CAAC,CAACG,cAAc,EAAE;MAClBH,CAAC,CAACI,eAAe,EAAE;MAEnBvB,SAAS,CAACwB,yBAAyB,CAACJ,KAAI,CAACK,WAAW,EAAE,KAAK,EAAE1B,SAAS,CAAC2B,gBAAgB,EAAE,CAAC;MAE1F,MAAMC,QAAQ,SAASP,KAAI,CAACQ,gBAAgB,CAACR,KAAI,CAACH,QAAQ,CAAC;MAE3D,IAAIU,QAAQ,CAACE,SAAS,KAAKC,SAAS,EAAE;QAClC7B,eAAe,CAAC8B,OAAO,CAACJ,QAAQ,CAAC;;MAGrC,IAAIA,QAAQ,CAACE,SAAS,EAAE;QACpB5B,eAAe,CAAC8B,OAAO,CAACJ,QAAQ,CAAC;;MAGrC,IAAI,OAAOA,QAAQ,CAAChB,KAAK,KAAK,QAAQ,EAAE;QACpCS,KAAI,CAACT,KAAK,GAAGgB,QAAQ,CAAChB,KAAK;OAC9B,MAAM,IAAIgB,QAAQ,CAAChB,KAAK,EAAE;QACvBV,eAAe,CAAC8B,OAAO,CAACJ,QAAQ,CAAChB,KAAK,CAAC;;IAC1C;EAEL;EAEA;;;;;;EAMgBiB,gBAAgBA,CAACX,QAAgB;IAAA,IAAAe,MAAA;IAAA,OAAAX,iBAAA;MAC7C,MAAMM,QAAQ,GAA8B;QAAEV;MAAQ,CAAE;MAExD,IAAI,CAACe,MAAI,CAACC,SAAS,EAAE;QACjB,OAAON,QAAQ;;MAGnB,MAAMO,KAAK,SAAShC,YAAY,CAACiC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC;MACvE,IAAI;QACA,aAAaH,MAAI,CAACC,SAAS,CAAChB,QAAQ,CAAC;OACxC,CAAC,OAAON,KAAK,EAAE;QACZgB,QAAQ,CAACE,SAAS,GAAG,KAAK;QAC1BF,QAAQ,CAAChB,KAAK,GAAGA,KAAK;OACzB,SAAS;QACNuB,KAAK,CAACH,OAAO,EAAE;;MAGnB,OAAOJ,QAAQ;IAAC;EAEpB;EAEA;;;EAGAS,UAAUA,CAAA;IACNpC,SAAS,CAACqC,yBAAyB,CAAC,IAAI,CAACZ,WAAW,EAAE1B,SAAS,CAAC2B,gBAAgB,EAAE,CAAC;IAEnFzB,eAAe,CAAC8B,OAAO,EAAE;EAC7B;;SA3ESnB,0BAA0B;;mBAA1BA,MAA0B;AAAA;;QAA1BA,MAA0B;EAAA0B,SAAA;EAAAC,SAAA,WAAAC,iCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;;;;;;;;;;;;;;;;;;MC9BvCtC,EAAA,CAAAC,cAAA,iBAAY;MAGID,EAAA,CAAAwC,MAAA,GAAuB;;MAAAxC,EAAA,CAAAG,YAAA,EAAK;MAEpCH,EAAA,CAAAC,cAAA,qBAAwB;MACKD,EAAA,CAAAyC,UAAA,mBAAAC,gEAAA;QAAA,OAASH,GAAA,CAAAN,UAAA,EAAY;MAAA,EAAC;;MAC3CjC,EAAA,CAAAE,SAAA,kBAAiE;MACrEF,EAAA,CAAAG,YAAA,EAAa;MAIzBH,EAAA,CAAAC,cAAA,sBAAiC;MACvBD,EAAA,CAAAyC,UAAA,sBAAAE,8DAAAC,MAAA;QAAA,OAAYL,GAAA,CAAAxB,cAAA,CAAA6B,MAAA,CAAsB;MAAA,EAAC;MACrC5C,EAAA,CAAAC,cAAA,WAAK;MAE8BD,EAAA,CAAAwC,MAAA,IAA6B;;MAAAxC,EAAA,CAAAG,YAAA,EAAY;MACpEH,EAAA,CAAAC,cAAA,6BAAoC;MAEgBD,EAAA,CAAAyC,UAAA,2BAAAI,wEAAAD,MAAA;QAAA,OAAAL,GAAA,CAAAzB,QAAA,GAAA8B,MAAA;MAAA,EAAsB;;MADtE5C,EAAA,CAAAG,YAAA,EAC+G;MAGvHH,EAAA,CAAA8C,UAAA,KAAAC,+CAAA,sBAEW;MACf/C,EAAA,CAAAG,YAAA,EAAM;MACNH,EAAA,CAAAC,cAAA,sBAAgE;MAC5DD,EAAA,CAAAwC,MAAA,IACJ;;MAAAxC,EAAA,CAAAG,YAAA,EAAa;MAEbH,EAAA,CAAAE,SAAA,iBAAwD;MAC5DF,EAAA,CAAAG,YAAA,EAAO;;;MA5BKH,EAAA,CAAAI,SAAA,GAAuB;MAAvBJ,EAAA,CAAAgD,iBAAA,CAAAhD,EAAA,CAAAM,WAAA,OAAAiC,GAAA,CAAA5B,KAAA,EAAuB;MAGqBX,EAAA,CAAAI,SAAA,GAA4C;MAA5CJ,EAAA,CAAAiD,WAAA,eAAAjD,EAAA,CAAAM,WAAA,sBAA4C;MAU7DN,EAAA,CAAAI,SAAA,GAA6B;MAA7BJ,EAAA,CAAAgD,iBAAA,CAAAhD,EAAA,CAAAM,WAAA,SAAAiC,GAAA,CAAA3B,WAAA,EAA6B;MAGhDZ,EAAA,CAAAI,SAAA,GAA2C;MAA3CJ,EAAA,CAAAkD,qBAAA,gBAAAlD,EAAA,CAAAM,WAAA,SAAAiC,GAAA,CAAA3B,WAAA,EAA2C;MAACZ,EAAA,CAAAK,UAAA,YAAAkC,GAAA,CAAAzB,QAAA,CAAsB;MAGnEd,EAAA,CAAAI,SAAA,GAAW;MAAXJ,EAAA,CAAAK,UAAA,SAAAkC,GAAA,CAAA/B,KAAA,CAAW;MAIeR,EAAA,CAAAI,SAAA,GAAsB;MAAtBJ,EAAA,CAAAK,UAAA,cAAAkC,GAAA,CAAAzB,QAAA,CAAsB;MAC3Dd,EAAA,CAAAI,SAAA,GACJ;MADIJ,EAAA,CAAAmD,kBAAA,MAAAnD,EAAA,CAAAM,WAAA,SAAAiC,GAAA,CAAA1B,MAAA,OACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}