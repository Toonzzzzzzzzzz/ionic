{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreUserAuthenticatedSupportConfig } from '@features/user/classes/support/authenticated-support-config';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSubscriptions } from '@singletons/subscriptions';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreLang } from '@services/lang';\nimport { CoreUserNullSupportConfig } from '@features/user/classes/support/null-support-config';\nimport * as i0 from \"@angular/core\";\n/**\n * Handle site support.\n */\nexport class CoreUserSupportService {\n  /**\n   * Contact site support.\n   *\n   * @param options Options to configure the interaction with support.\n   */\n  contact(options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _options$supportConfi, _CoreSites$getCurrent;\n      const supportConfig = (_options$supportConfi = options.supportConfig) !== null && _options$supportConfi !== void 0 ? _options$supportConfi : CoreUserAuthenticatedSupportConfig.forCurrentSite();\n      const supportPageUrl = supportConfig.getSupportPageUrl();\n      const autoLoginUrl = yield (_CoreSites$getCurrent = CoreSites.getCurrentSite()) === null || _CoreSites$getCurrent === void 0 ? void 0 : _CoreSites$getCurrent.getAutoLoginUrl(supportPageUrl, false);\n      const browser = CoreUtils.openInApp(autoLoginUrl !== null && autoLoginUrl !== void 0 ? autoLoginUrl : supportPageUrl);\n      if (supportPageUrl.endsWith('/user/contactsitesupport.php')) {\n        _this.populateSupportForm(browser, options.subject, options.message);\n        _this.listenSupportFormSubmission(browser, supportConfig.getSupportPageLang());\n      }\n      yield CoreEvents.waitUntil(CoreEvents.IAB_EXIT);\n    })();\n  }\n  /**\n   * Show a help modal that suggests contacting support if available.\n   *\n   * @param message Help message.\n   * @param supportSubject Support subject.\n   */\n  showHelp(message, supportSubject, supportConfig) {\n    const buttons = [];\n    if (!supportConfig) {\n      const site = CoreSites.getCurrentSite();\n      supportConfig = site ? new CoreUserAuthenticatedSupportConfig(site) : new CoreUserNullSupportConfig();\n    }\n    if (supportConfig.canContactSupport()) {\n      buttons.push({\n        text: Translate.instant('core.contactsupport'),\n        handler: () => CoreUserSupport.contact({\n          supportConfig,\n          subject: supportSubject\n        })\n      });\n    }\n    buttons.push(Translate.instant('core.close'));\n    CoreDomUtils.showAlertWithOptions({\n      header: Translate.instant('core.help'),\n      message,\n      buttons\n    });\n  }\n  /**\n   * Inject error details into contact support form.\n   *\n   * @param browser In App browser containing the support form.\n   * @param subject Title to fill into the form.\n   * @param message Details to fill into the form.\n   */\n  populateSupportForm(browser, subject, message) {\n    if (!CorePlatform.isMobile()) {\n      return;\n    }\n    if (subject) {\n      subject = Translate.instant('core.user.supportsubject', {\n        subject\n      });\n    }\n    const unsubscribe = CoreSubscriptions.once(browser.on('loadstop'), () => {\n      var _subject;\n      browser.executeScript({\n        code: `\n                    document.querySelector('#id_subject').value = ${JSON.stringify((_subject = subject) !== null && _subject !== void 0 ? _subject : '')};\n                    document.querySelector('#id_message').value = ${JSON.stringify(message !== null && message !== void 0 ? message : '')};\n                `\n      });\n    });\n    CoreEvents.once(CoreEvents.IAB_EXIT, () => unsubscribe());\n  }\n  /**\n   * Set up listeners to close the browser when the contact form has been submitted.\n   *\n   * @param browser In App browser.\n   * @param lang Language used in the support page.\n   */\n  listenSupportFormSubmission(browser, lang) {\n    return _asyncToGenerator(function* () {\n      const appSuccessMessage = Translate.instant('core.user.supportmessagesent');\n      const lmsSuccessMessage = lang && (yield CoreLang.getMessage('core.user.supportmessagesent', lang));\n      const subscription = browser.on('loadstop').subscribe( /*#__PURE__*/_asyncToGenerator(function* () {\n        const result = yield browser.executeScript({\n          code: `\n                    [...document.querySelectorAll('.alert-success')].some(\n                        div =>\n                            div.textContent?.includes(${JSON.stringify(lmsSuccessMessage)}) ||\n                            div.textContent?.includes(${JSON.stringify(appSuccessMessage)})\n                    )\n                `\n        });\n        if (!Array.isArray(result) || result[0] !== true) {\n          return;\n        }\n        browser.close();\n        CoreDomUtils.showAlert(undefined, appSuccessMessage);\n      }));\n      CoreEvents.once(CoreEvents.IAB_EXIT, () => subscription.unsubscribe());\n    })();\n  }\n}\n_class = CoreUserSupportService;\n_class.ɵfac = function CoreUserSupportService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreUserSupport = makeSingleton(CoreUserSupportService);","map":{"version":3,"names":["CoreUserAuthenticatedSupportConfig","CorePlatform","CoreSites","CoreUtils","makeSingleton","Translate","CoreEvents","CoreSubscriptions","CoreDomUtils","CoreLang","CoreUserNullSupportConfig","CoreUserSupportService","contact","options","_this","_asyncToGenerator","_options$supportConfi","_CoreSites$getCurrent","supportConfig","forCurrentSite","supportPageUrl","getSupportPageUrl","autoLoginUrl","getCurrentSite","getAutoLoginUrl","browser","openInApp","endsWith","populateSupportForm","subject","message","listenSupportFormSubmission","getSupportPageLang","waitUntil","IAB_EXIT","showHelp","supportSubject","buttons","site","canContactSupport","push","text","instant","handler","CoreUserSupport","showAlertWithOptions","header","isMobile","unsubscribe","once","on","_subject","executeScript","code","JSON","stringify","lang","appSuccessMessage","lmsSuccessMessage","getMessage","subscription","subscribe","result","Array","isArray","close","showAlert","undefined","factory","ɵfac","providedIn"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/user/services/support.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreUserSupportConfig } from '@features/user/classes/support/support-config';\nimport { CoreUserAuthenticatedSupportConfig } from '@features/user/classes/support/authenticated-support-config';\nimport { InAppBrowserObject } from '@awesome-cordova-plugins/in-app-browser';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSubscriptions } from '@singletons/subscriptions';\nimport { AlertButton } from '@ionic/angular';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreLang } from '@services/lang';\nimport { CoreUserNullSupportConfig } from '@features/user/classes/support/null-support-config';\n\n/**\n * Handle site support.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreUserSupportService {\n\n    /**\n     * Contact site support.\n     *\n     * @param options Options to configure the interaction with support.\n     */\n    async contact(options: CoreUserSupportContactOptions = {}): Promise<void> {\n        const supportConfig = options.supportConfig ?? CoreUserAuthenticatedSupportConfig.forCurrentSite();\n        const supportPageUrl = supportConfig.getSupportPageUrl();\n        const autoLoginUrl = await CoreSites.getCurrentSite()?.getAutoLoginUrl(supportPageUrl, false);\n        const browser = CoreUtils.openInApp(autoLoginUrl ?? supportPageUrl);\n\n        if (supportPageUrl.endsWith('/user/contactsitesupport.php')) {\n            this.populateSupportForm(browser, options.subject, options.message);\n            this.listenSupportFormSubmission(browser, supportConfig.getSupportPageLang());\n        }\n\n        await CoreEvents.waitUntil(CoreEvents.IAB_EXIT);\n    }\n\n    /**\n     * Show a help modal that suggests contacting support if available.\n     *\n     * @param message Help message.\n     * @param supportSubject Support subject.\n     */\n    showHelp(message: string, supportSubject: string, supportConfig?: CoreUserSupportConfig): void {\n        const buttons: (AlertButton | string)[] = [];\n\n        if (!supportConfig) {\n            const site = CoreSites.getCurrentSite();\n\n            supportConfig = site ? new CoreUserAuthenticatedSupportConfig(site) : new CoreUserNullSupportConfig();\n        }\n\n        if (supportConfig.canContactSupport()) {\n            buttons.push({\n                text: Translate.instant('core.contactsupport'),\n                handler: () => CoreUserSupport.contact({\n                    supportConfig,\n                    subject: supportSubject,\n                }),\n            });\n        }\n\n        buttons.push(Translate.instant('core.close'));\n\n        CoreDomUtils.showAlertWithOptions({\n            header: Translate.instant('core.help'),\n            message,\n            buttons,\n        });\n    }\n\n    /**\n     * Inject error details into contact support form.\n     *\n     * @param browser In App browser containing the support form.\n     * @param subject Title to fill into the form.\n     * @param message Details to fill into the form.\n     */\n    protected populateSupportForm(browser: InAppBrowserObject, subject?: string | null, message?: string | null): void {\n        if (!CorePlatform.isMobile()) {\n            return;\n        }\n\n        if (subject) {\n            subject = Translate.instant('core.user.supportsubject', { subject });\n        }\n\n        const unsubscribe = CoreSubscriptions.once(browser.on('loadstop'), () => {\n            browser.executeScript({\n                code: `\n                    document.querySelector('#id_subject').value = ${JSON.stringify(subject ?? '')};\n                    document.querySelector('#id_message').value = ${JSON.stringify(message ?? '')};\n                `,\n            });\n        });\n\n        CoreEvents.once(CoreEvents.IAB_EXIT, () => unsubscribe());\n    }\n\n    /**\n     * Set up listeners to close the browser when the contact form has been submitted.\n     *\n     * @param browser In App browser.\n     * @param lang Language used in the support page.\n     */\n    protected async listenSupportFormSubmission(browser: InAppBrowserObject, lang: string | null): Promise<void> {\n        const appSuccessMessage = Translate.instant('core.user.supportmessagesent');\n        const lmsSuccessMessage = lang && await CoreLang.getMessage('core.user.supportmessagesent', lang);\n        const subscription = browser.on('loadstop').subscribe(async () => {\n            const result = await browser.executeScript({\n                code: `\n                    [...document.querySelectorAll('.alert-success')].some(\n                        div =>\n                            div.textContent?.includes(${JSON.stringify(lmsSuccessMessage)}) ||\n                            div.textContent?.includes(${JSON.stringify(appSuccessMessage)})\n                    )\n                `,\n            });\n\n            if (!Array.isArray(result) || result[0] !== true) {\n                return;\n            }\n\n            browser.close();\n            CoreDomUtils.showAlert(undefined, appSuccessMessage);\n        });\n\n        CoreEvents.once(CoreEvents.IAB_EXIT, () => subscription.unsubscribe());\n    }\n\n}\n\nexport const CoreUserSupport = makeSingleton(CoreUserSupportService);\n\n/**\n * Options to configure interaction with support.\n */\nexport interface CoreUserSupportContactOptions {\n    supportConfig?: CoreUserSupportConfig | null;\n    subject?: string | null;\n    message?: string | null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}