{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { IonRouterOutlet } from '@ionic/angular';\nimport { CoreLang } from '@services/lang';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreEvents } from '@singletons/events';\nimport { NgZone, SplashScreen } from '@singletons';\nimport { CoreNetwork } from '@services/network';\nimport { CoreApp } from '@services/app';\nimport { CoreSites } from '@services/sites';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSubscriptions } from '@singletons/subscriptions';\nimport { CoreWindow } from '@singletons/window';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreSitePlugins } from '@features/siteplugins/services/siteplugins';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreDom } from '@singletons/dom';\nimport { CorePlatform } from '@services/platform';\nimport { CoreUrl } from '@singletons/url';\nimport { CoreLogger } from '@singletons/logger';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { register } from 'swiper/element/bundle';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nconst MOODLE_SITE_URL_PREFIX = 'url-';\nconst MOODLE_VERSION_PREFIX = 'version-';\nconst MOODLEAPP_VERSION_PREFIX = 'moodleapp-';\nregister();\nexport class AppComponent {\n  constructor() {\n    this.logger = CoreLogger.getInstance('AppComponent');\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const win = window;\n    CoreDomUtils.toggleModeClass('ionic5', true, {\n      includeLegacy: true\n    });\n    this.addVersionClass(MOODLEAPP_VERSION_PREFIX, CoreConstants.CONFIG.versionname.replace('-dev', ''));\n    CoreEvents.on(CoreEvents.LOGOUT, /*#__PURE__*/_asyncToGenerator(function* () {\n      // Unload lang custom strings.\n      CoreLang.clearCustomStrings();\n      // Remove version classes from body.\n      _this.removeModeClasses([MOODLE_VERSION_PREFIX, MOODLE_SITE_URL_PREFIX]);\n      // Go to sites page when user is logged out.\n      yield CoreNavigator.navigate('/login/sites', {\n        reset: true\n      });\n      if (CoreSitePlugins.hasSitePluginsLoaded) {\n        // Temporary fix. Reload the page to unload all plugins.\n        window.location.reload();\n      }\n    }));\n    // Listen to scroll to add style when scroll is not 0.\n    win.addEventListener('ionScroll', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* ({\n        detail,\n        target\n      }) {\n        var _page$querySelector;\n        if (target.tagName != 'ION-CONTENT') {\n          return;\n        }\n        const content = target;\n        const page = content.closest('.ion-page');\n        if (!page) {\n          return;\n        }\n        (_page$querySelector = page.querySelector('ion-header')) === null || _page$querySelector === void 0 || _page$querySelector.classList.toggle('core-header-shadow', detail.scrollTop > 0);\n        const scrollElement = yield content.getScrollElement();\n        content.classList.toggle('core-footer-shadow', !CoreDom.scrollIsBottom(scrollElement));\n      });\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    CorePlatform.resume.subscribe(() => {\n      // Wait a second before setting it to false since in iOS there could be some frozen WS calls.\n      setTimeout(() => {\n        if (CoreLoginHelper.isWaitingForBrowser() && !CoreUtils.isInAppBrowserOpen()) {\n          CoreLoginHelper.stopWaitingForBrowser();\n          CoreLoginHelper.checkLogout();\n        }\n      }, 1000);\n    });\n    // \"Expose\" CoreWindow.open.\n    win.openWindowSafely = (url, name) => {\n      CoreWindow.open(url, name);\n    };\n    // Treat URLs that try to override the app.\n    win.onOverrideUrlLoading = url => {\n      CoreWindow.open(url);\n    };\n    CoreEvents.on(CoreEvents.LOGIN, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (data) {\n        if (data.siteId) {\n          const site = yield CoreSites.getSite(data.siteId);\n          const info = site.getInfo();\n          if (info) {\n            // Add version classes to body.\n            _this.removeModeClasses([MOODLE_VERSION_PREFIX, MOODLE_SITE_URL_PREFIX]);\n            _this.addVersionClass(MOODLE_VERSION_PREFIX, CoreSites.getReleaseNumber(info.release || ''));\n            _this.addSiteUrlClass(info.siteurl);\n          }\n        }\n        _this.loadCustomStrings();\n      });\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    // Site config is checked in login.\n    CoreEvents.on(CoreEvents.LOGIN_SITE_CHECKED, data => {\n      this.addSiteUrlClass(data.config.httpswwwroot);\n    });\n    CoreEvents.on(CoreEvents.SITE_UPDATED, /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (data) {\n        if (data.siteId === CoreSites.getCurrentSiteId()) {\n          _this.loadCustomStrings();\n          // Add version classes to body.\n          _this.removeModeClasses([MOODLE_VERSION_PREFIX, MOODLE_SITE_URL_PREFIX]);\n          _this.addVersionClass(MOODLE_VERSION_PREFIX, CoreSites.getReleaseNumber(data.release || ''));\n          _this.addSiteUrlClass(data.siteurl);\n        }\n      });\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    CoreEvents.on(CoreEvents.SITE_ADDED, data => {\n      if (data.siteId === CoreSites.getCurrentSiteId()) {\n        this.loadCustomStrings();\n        // Add version classes to body.\n        this.removeModeClasses([MOODLE_VERSION_PREFIX, MOODLE_SITE_URL_PREFIX]);\n        this.addVersionClass(MOODLE_VERSION_PREFIX, CoreSites.getReleaseNumber(data.release || ''));\n        this.addSiteUrlClass(data.siteurl);\n      }\n    });\n    this.onPlatformReady();\n    // Quit app with back button.\n    document.addEventListener('ionBackButton', event => {\n      // This callback should have the lowest priority in the app.\n      event.detail.register(-100, /*#__PURE__*/_asyncToGenerator(function* () {\n        const initialPath = CoreNavigator.getCurrentPath();\n        if (initialPath.startsWith('/main/')) {\n          // Main menu has its own callback to handle back. If this callback is called it means we should exit app.\n          CoreApp.closeApp();\n          return;\n        }\n        // This callback can be called at the same time as Ionic's back navigation callback.\n        // Check if the path changes due to the back navigation handler, to know if we're at root level.\n        // Ionic doc recommends IonRouterOutlet.canGoBack, but there's no easy way to get the current outlet from here.\n        // The path seems to change immediately (0 ms timeout), but use 50ms just in case.\n        yield CoreUtils.wait(50);\n        if (CoreNavigator.getCurrentPath() != initialPath) {\n          // Ionic has navigated back, nothing else to do.\n          return;\n        }\n        // Quit the app.\n        CoreApp.closeApp();\n      }));\n    });\n    // @todo Pause Youtube videos in Android when app is put in background or screen is locked?\n    // See: https://github.com/moodlehq/moodleapp/blob/ionic3/src/app/app.component.ts#L312\n  }\n  /**\n   * @inheritdoc\n   */\n  ngAfterViewInit() {\n    var _this2 = this;\n    if (!this.outlet) {\n      return;\n    }\n    this.logger.debug('App component initialized');\n    CoreSubscriptions.once(this.outlet.activateEvents, /*#__PURE__*/_asyncToGenerator(function* () {\n      yield CorePlatform.ready();\n      _this2.logger.debug('Hide splash screen');\n      SplashScreen.hide();\n      _this2.setSystemUIColorsAfterSplash();\n    }));\n  }\n  /**\n   * Set the system UI Colors after hiding the splash to ensure it's correct.\n   *\n   * @returns Promise resolved when done.\n   */\n  setSystemUIColorsAfterSplash() {\n    return _asyncToGenerator(function* () {\n      // When the app starts and the splash is hidden, the color of the bars changes from transparent to black.\n      // We have to set the current color but we don't know when the change will be made.\n      // This problem is only related to Android, so on iOS it will be only set once.\n      if (!CorePlatform.isAndroid()) {\n        CoreApp.setSystemUIColors();\n        return;\n      }\n      const promise = new CorePromisedValue();\n      const interval = window.setInterval(() => {\n        CoreApp.setSystemUIColors();\n      });\n      setTimeout(() => {\n        clearInterval(interval);\n        promise.resolve();\n      }, 1000);\n      return promise;\n    })();\n  }\n  /**\n   * Async init function on platform ready.\n   */\n  onPlatformReady() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield CorePlatform.ready();\n      _this3.logger.debug('Platform is ready');\n      // Refresh online status when changes.\n      CoreNetwork.onChange().subscribe(() => {\n        // Execute the callback in the Angular zone, so change detection doesn't stop working.\n        NgZone.run(() => {\n          const isOnline = CoreNetwork.isOnline();\n          const hadOfflineMessage = CoreDomUtils.hasModeClass('core-offline');\n          CoreDomUtils.toggleModeClass('core-offline', !isOnline, {\n            includeLegacy: true\n          });\n          if (isOnline && hadOfflineMessage) {\n            CoreDomUtils.toggleModeClass('core-online', true, {\n              includeLegacy: true\n            });\n            setTimeout(() => {\n              CoreDomUtils.toggleModeClass('core-online', false, {\n                includeLegacy: true\n              });\n            }, 3000);\n          } else if (!isOnline) {\n            CoreDomUtils.toggleModeClass('core-online', false, {\n              includeLegacy: true\n            });\n          }\n        });\n      });\n      const isOnline = CoreNetwork.isOnline();\n      CoreDomUtils.toggleModeClass('core-offline', !isOnline, {\n        includeLegacy: true\n      });\n    })();\n  }\n  /**\n   * Load custom lang strings. This cannot be done inside the lang provider because it causes circular dependencies.\n   */\n  loadCustomStrings() {\n    const currentSite = CoreSites.getCurrentSite();\n    if (currentSite) {\n      CoreLang.loadCustomStringsFromSite(currentSite);\n    }\n  }\n  /**\n   * Convenience function to add version to html classes.\n   *\n   * @param prefix Prefix to add to the class.\n   * @param release Current release number of the site.\n   */\n  addVersionClass(prefix, release) {\n    const parts = release.split('.', 3);\n    parts[1] = parts[1] || '0';\n    parts[2] = parts[2] || '0';\n    CoreDomUtils.toggleModeClass(prefix + parts[0], true, {\n      includeLegacy: true\n    });\n    CoreDomUtils.toggleModeClass(prefix + parts[0] + '-' + parts[1], true, {\n      includeLegacy: true\n    });\n    CoreDomUtils.toggleModeClass(prefix + parts[0] + '-' + parts[1] + '-' + parts[2], true, {\n      includeLegacy: true\n    });\n  }\n  /**\n   * Convenience function to remove all mode classes form body.\n   *\n   * @param prefixes Prefixes of the class mode to be removed.\n   */\n  removeModeClasses(prefixes) {\n    for (const modeClass of CoreDomUtils.getModeClasses()) {\n      if (!prefixes.some(prefix => modeClass.startsWith(prefix))) {\n        continue;\n      }\n      CoreDomUtils.toggleModeClass(modeClass, false, {\n        includeLegacy: true\n      });\n    }\n  }\n  /**\n   * Converts the provided URL into a CSS class that be used within the page.\n   * This is primarily used to add the siteurl to the body tag as a CSS class.\n   * Extracted from LMS url_to_class_name function.\n   *\n   * @param url Url.\n   * @returns Class name\n   */\n  urlToClassName(url) {\n    var _parsedUrl$domain;\n    const parsedUrl = CoreUrl.parse(url);\n    if (!parsedUrl) {\n      return '';\n    }\n    let className = ((_parsedUrl$domain = parsedUrl.domain) === null || _parsedUrl$domain === void 0 ? void 0 : _parsedUrl$domain.replace(/\\./g, '-')) || '';\n    if (parsedUrl.port) {\n      className += `--${parsedUrl.port}`;\n    }\n    if (parsedUrl.path) {\n      const leading = new RegExp('^/+');\n      const trailing = new RegExp('/+$');\n      const path = parsedUrl.path.replace(leading, '').replace(trailing, '');\n      if (path) {\n        className += '--' + path.replace(/\\//g, '-') || '';\n      }\n    }\n    return className;\n  }\n  /**\n   * Convenience function to add site url to html classes.\n   */\n  addSiteUrlClass(siteUrl) {\n    const className = this.urlToClassName(siteUrl);\n    CoreDomUtils.toggleModeClass(MOODLE_SITE_URL_PREFIX + className, true);\n  }\n}\n_class = AppComponent;\n_class.ɵfac = function AppComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-root\"]],\n  viewQuery: function AppComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(IonRouterOutlet, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.outlet = _t.first);\n    }\n  },\n  decls: 2,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-app\");\n      i0.ɵɵelement(1, \"ion-router-outlet\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  dependencies: [i1.IonApp, i1.IonRouterOutlet],\n  encapsulation: 2\n});","map":{"version":3,"names":["IonRouterOutlet","CoreLang","CoreLoginHelper","CoreEvents","NgZone","SplashScreen","CoreNetwork","CoreApp","CoreSites","CoreNavigator","CoreSubscriptions","CoreWindow","CoreUtils","CoreConstants","CoreSitePlugins","CoreDomUtils","CoreDom","CorePlatform","CoreUrl","CoreLogger","CorePromisedValue","register","MOODLE_SITE_URL_PREFIX","MOODLE_VERSION_PREFIX","MOODLEAPP_VERSION_PREFIX","AppComponent","constructor","logger","getInstance","ngOnInit","_this","win","window","toggleModeClass","includeLegacy","addVersionClass","CONFIG","versionname","replace","on","LOGOUT","_asyncToGenerator","clearCustomStrings","removeModeClasses","navigate","reset","hasSitePluginsLoaded","location","reload","addEventListener","_ref2","detail","target","_page$querySelector","tagName","content","page","closest","querySelector","classList","toggle","scrollTop","scrollElement","getScrollElement","scrollIsBottom","_x","apply","arguments","resume","subscribe","setTimeout","isWaitingForBrowser","isInAppBrowserOpen","stopWaitingForBrowser","checkLogout","openWindowSafely","url","name","open","onOverrideUrlLoading","LOGIN","_ref3","data","siteId","site","getSite","info","getInfo","getReleaseNumber","release","addSiteUrlClass","siteurl","loadCustomStrings","_x2","LOGIN_SITE_CHECKED","config","httpswwwroot","SITE_UPDATED","_ref4","getCurrentSiteId","_x3","SITE_ADDED","onPlatformReady","document","event","initialPath","getCurrentPath","startsWith","closeApp","wait","ngAfterViewInit","_this2","outlet","debug","once","activateEvents","ready","hide","setSystemUIColorsAfterSplash","isAndroid","setSystemUIColors","promise","interval","setInterval","clearInterval","resolve","_this3","onChange","run","isOnline","hadOfflineMessage","hasModeClass","currentSite","getCurrentSite","loadCustomStringsFromSite","prefix","parts","split","prefixes","modeClass","getModeClasses","some","urlToClassName","_parsedUrl$domain","parsedUrl","parse","className","domain","port","path","leading","RegExp","trailing","siteUrl","selectors","viewQuery","AppComponent_Query","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/app/app.component.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/app/app.component.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { IonRouterOutlet } from '@ionic/angular';\nimport { BackButtonEvent, ScrollDetail } from '@ionic/core';\n\nimport { CoreLang } from '@services/lang';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreEvents } from '@singletons/events';\nimport { NgZone, SplashScreen } from '@singletons';\nimport { CoreNetwork } from '@services/network';\nimport { CoreApp } from '@services/app';\nimport { CoreSites } from '@services/sites';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSubscriptions } from '@singletons/subscriptions';\nimport { CoreWindow } from '@singletons/window';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreSitePlugins } from '@features/siteplugins/services/siteplugins';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreDom } from '@singletons/dom';\nimport { CorePlatform } from '@services/platform';\nimport { CoreUrl } from '@singletons/url';\nimport { CoreLogger } from '@singletons/logger';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { register } from 'swiper/element/bundle';\n\nconst MOODLE_SITE_URL_PREFIX = 'url-';\nconst MOODLE_VERSION_PREFIX = 'version-';\nconst MOODLEAPP_VERSION_PREFIX = 'moodleapp-';\n\nregister();\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n})\nexport class AppComponent implements OnInit, AfterViewInit {\n\n    @ViewChild(IonRouterOutlet) outlet?: IonRouterOutlet;\n\n    protected logger = CoreLogger.getInstance('AppComponent');\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const win = <any> window;\n        CoreDomUtils.toggleModeClass('ionic5', true, { includeLegacy: true });\n        this.addVersionClass(MOODLEAPP_VERSION_PREFIX, CoreConstants.CONFIG.versionname.replace('-dev', ''));\n\n        CoreEvents.on(CoreEvents.LOGOUT, async () => {\n            // Unload lang custom strings.\n            CoreLang.clearCustomStrings();\n\n            // Remove version classes from body.\n            this.removeModeClasses([MOODLE_VERSION_PREFIX, MOODLE_SITE_URL_PREFIX]);\n\n            // Go to sites page when user is logged out.\n            await CoreNavigator.navigate('/login/sites', { reset: true });\n\n            if (CoreSitePlugins.hasSitePluginsLoaded) {\n                // Temporary fix. Reload the page to unload all plugins.\n                window.location.reload();\n            }\n        });\n\n        // Listen to scroll to add style when scroll is not 0.\n        win.addEventListener('ionScroll', async ({ detail, target }: CustomEvent<ScrollDetail>) => {\n            if ((target as HTMLElement).tagName != 'ION-CONTENT') {\n                return;\n            }\n            const content = (target as HTMLIonContentElement);\n\n            const page = content.closest('.ion-page');\n            if (!page) {\n                return;\n            }\n\n            page.querySelector<HTMLIonHeaderElement>('ion-header')?.classList.toggle('core-header-shadow', detail.scrollTop > 0);\n\n            const scrollElement = await content.getScrollElement();\n            content.classList.toggle('core-footer-shadow', !CoreDom.scrollIsBottom(scrollElement));\n        });\n\n        CorePlatform.resume.subscribe(() => {\n            // Wait a second before setting it to false since in iOS there could be some frozen WS calls.\n            setTimeout(() => {\n                if (CoreLoginHelper.isWaitingForBrowser() && !CoreUtils.isInAppBrowserOpen()) {\n                    CoreLoginHelper.stopWaitingForBrowser();\n                    CoreLoginHelper.checkLogout();\n                }\n            }, 1000);\n        });\n\n        // \"Expose\" CoreWindow.open.\n        win.openWindowSafely = (url: string, name?: string): void => {\n            CoreWindow.open(url, name);\n        };\n\n        // Treat URLs that try to override the app.\n        win.onOverrideUrlLoading = (url: string) => {\n            CoreWindow.open(url);\n        };\n\n        CoreEvents.on(CoreEvents.LOGIN, async (data) => {\n            if (data.siteId) {\n                const site = await CoreSites.getSite(data.siteId);\n                const info = site.getInfo();\n                if (info) {\n                    // Add version classes to body.\n                    this.removeModeClasses([MOODLE_VERSION_PREFIX, MOODLE_SITE_URL_PREFIX]);\n\n                    this.addVersionClass(MOODLE_VERSION_PREFIX, CoreSites.getReleaseNumber(info.release || ''));\n                    this.addSiteUrlClass(info.siteurl);\n                }\n            }\n\n            this.loadCustomStrings();\n        });\n\n        // Site config is checked in login.\n        CoreEvents.on(CoreEvents.LOGIN_SITE_CHECKED, (data) => {\n            this.addSiteUrlClass(data.config.httpswwwroot);\n        });\n\n        CoreEvents.on(CoreEvents.SITE_UPDATED, async (data) => {\n            if (data.siteId === CoreSites.getCurrentSiteId()) {\n                this.loadCustomStrings();\n\n                // Add version classes to body.\n                this.removeModeClasses([MOODLE_VERSION_PREFIX, MOODLE_SITE_URL_PREFIX]);\n\n                this.addVersionClass(MOODLE_VERSION_PREFIX, CoreSites.getReleaseNumber(data.release || ''));\n                this.addSiteUrlClass(data.siteurl);\n            }\n        });\n\n        CoreEvents.on(CoreEvents.SITE_ADDED, (data) => {\n            if (data.siteId === CoreSites.getCurrentSiteId()) {\n                this.loadCustomStrings();\n\n                // Add version classes to body.\n                this.removeModeClasses([MOODLE_VERSION_PREFIX, MOODLE_SITE_URL_PREFIX]);\n\n                this.addVersionClass(MOODLE_VERSION_PREFIX, CoreSites.getReleaseNumber(data.release || ''));\n                this.addSiteUrlClass(data.siteurl);\n            }\n        });\n\n        this.onPlatformReady();\n\n        // Quit app with back button.\n        document.addEventListener('ionBackButton', (event: BackButtonEvent) => {\n            // This callback should have the lowest priority in the app.\n            event.detail.register(-100, async () => {\n                const initialPath = CoreNavigator.getCurrentPath();\n                if (initialPath.startsWith('/main/')) {\n                    // Main menu has its own callback to handle back. If this callback is called it means we should exit app.\n                    CoreApp.closeApp();\n\n                    return;\n                }\n\n                // This callback can be called at the same time as Ionic's back navigation callback.\n                // Check if the path changes due to the back navigation handler, to know if we're at root level.\n                // Ionic doc recommends IonRouterOutlet.canGoBack, but there's no easy way to get the current outlet from here.\n                // The path seems to change immediately (0 ms timeout), but use 50ms just in case.\n                await CoreUtils.wait(50);\n\n                if (CoreNavigator.getCurrentPath() != initialPath) {\n                    // Ionic has navigated back, nothing else to do.\n                    return;\n                }\n\n                // Quit the app.\n                CoreApp.closeApp();\n            });\n        });\n\n        // @todo Pause Youtube videos in Android when app is put in background or screen is locked?\n        // See: https://github.com/moodlehq/moodleapp/blob/ionic3/src/app/app.component.ts#L312\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngAfterViewInit(): void {\n        if (!this.outlet) {\n            return;\n        }\n\n        this.logger.debug('App component initialized');\n\n        CoreSubscriptions.once(this.outlet.activateEvents, async () => {\n            await CorePlatform.ready();\n\n            this.logger.debug('Hide splash screen');\n            SplashScreen.hide();\n            this.setSystemUIColorsAfterSplash();\n        });\n    }\n\n    /**\n     * Set the system UI Colors after hiding the splash to ensure it's correct.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async setSystemUIColorsAfterSplash(): Promise<void> {\n        // When the app starts and the splash is hidden, the color of the bars changes from transparent to black.\n        // We have to set the current color but we don't know when the change will be made.\n        // This problem is only related to Android, so on iOS it will be only set once.\n        if (!CorePlatform.isAndroid()) {\n            CoreApp.setSystemUIColors();\n\n            return;\n        }\n\n        const promise = new CorePromisedValue<void>();\n\n        const interval = window.setInterval(() => {\n            CoreApp.setSystemUIColors();\n        });\n        setTimeout(() => {\n            clearInterval(interval);\n            promise.resolve();\n\n        }, 1000);\n\n        return promise;\n    }\n\n    /**\n     * Async init function on platform ready.\n     */\n    protected async onPlatformReady(): Promise<void> {\n        await CorePlatform.ready();\n\n        this.logger.debug('Platform is ready');\n\n        // Refresh online status when changes.\n        CoreNetwork.onChange().subscribe(() => {\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\n            NgZone.run(() => {\n                const isOnline = CoreNetwork.isOnline();\n                const hadOfflineMessage = CoreDomUtils.hasModeClass('core-offline');\n\n                CoreDomUtils.toggleModeClass('core-offline', !isOnline, { includeLegacy: true });\n\n                if (isOnline && hadOfflineMessage) {\n                    CoreDomUtils.toggleModeClass('core-online', true, { includeLegacy: true });\n\n                    setTimeout(() => {\n                        CoreDomUtils.toggleModeClass('core-online', false, { includeLegacy: true });\n                    }, 3000);\n                } else if (!isOnline) {\n                    CoreDomUtils.toggleModeClass('core-online', false, { includeLegacy: true });\n                }\n            });\n        });\n\n        const isOnline = CoreNetwork.isOnline();\n        CoreDomUtils.toggleModeClass('core-offline', !isOnline, { includeLegacy: true });\n    }\n\n    /**\n     * Load custom lang strings. This cannot be done inside the lang provider because it causes circular dependencies.\n     */\n    protected loadCustomStrings(): void {\n        const currentSite = CoreSites.getCurrentSite();\n\n        if (currentSite) {\n            CoreLang.loadCustomStringsFromSite(currentSite);\n        }\n    }\n\n    /**\n     * Convenience function to add version to html classes.\n     *\n     * @param prefix Prefix to add to the class.\n     * @param release Current release number of the site.\n     */\n    protected addVersionClass(prefix: string, release: string): void {\n        const parts = release.split('.', 3);\n\n        parts[1] = parts[1] || '0';\n        parts[2] = parts[2] || '0';\n\n        CoreDomUtils.toggleModeClass(prefix + parts[0], true, { includeLegacy: true });\n        CoreDomUtils.toggleModeClass(prefix + parts[0] + '-' + parts[1], true, { includeLegacy: true });\n        CoreDomUtils.toggleModeClass(prefix + parts[0] + '-' + parts[1] + '-' + parts[2], true, { includeLegacy: true });\n    }\n\n    /**\n     * Convenience function to remove all mode classes form body.\n     *\n     * @param prefixes Prefixes of the class mode to be removed.\n     */\n    protected removeModeClasses(prefixes: string[]): void {\n        for (const modeClass of CoreDomUtils.getModeClasses()) {\n            if (!prefixes.some((prefix) => modeClass.startsWith(prefix))) {\n                continue;\n            }\n\n            CoreDomUtils.toggleModeClass(modeClass, false, { includeLegacy: true });\n        }\n    }\n\n    /**\n     * Converts the provided URL into a CSS class that be used within the page.\n     * This is primarily used to add the siteurl to the body tag as a CSS class.\n     * Extracted from LMS url_to_class_name function.\n     *\n     * @param url Url.\n     * @returns Class name\n     */\n    protected urlToClassName(url: string): string {\n        const parsedUrl = CoreUrl.parse(url);\n\n        if (!parsedUrl) {\n            return '';\n        }\n\n        let className = parsedUrl.domain?.replace(/\\./g, '-') || '';\n\n        if (parsedUrl.port) {\n            className += `--${parsedUrl.port}`;\n        }\n        if (parsedUrl.path) {\n            const leading = new RegExp('^/+');\n            const trailing = new RegExp('/+$');\n            const path = parsedUrl.path.replace(leading, '').replace(trailing, '');\n            if (path) {\n                className += '--' + path.replace(/\\//g, '-') || '';\n            }\n        }\n\n        return className;\n    }\n\n    /**\n     * Convenience function to add site url to html classes.\n     */\n    protected addSiteUrlClass(siteUrl: string): void {\n        const className = this.urlToClassName(siteUrl);\n\n        CoreDomUtils.toggleModeClass(MOODLE_SITE_URL_PREFIX + className, true);\n    }\n\n}\n","<ion-app>\n    <ion-router-outlet></ion-router-outlet>\n</ion-app>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}