{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModFeedback, AddonModFeedbackProvider } from './feedback';\nimport { AddonModFeedbackModuleHandlerService } from './handlers/module';\nimport * as i0 from \"@angular/core\";\nconst MODE_RESPONSETIME = 1;\nconst MODE_COURSE = 2;\nconst MODE_CATEGORY = 3;\n/**\n * Service that provides helper functions for feedbacks.\n */\nexport class AddonModFeedbackHelperProvider {\n  /**\n   * Retrieves a list of students who didn't submit the feedback with extra info.\n   *\n   * @param feedbackId Feedback ID.\n   * @param options Other options.\n   * @returns Promise resolved when the info is retrieved.\n   */\n  getNonRespondents(feedbackId, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const responses = yield AddonModFeedback.getNonRespondents(feedbackId, options);\n      responses.users = yield _this.addImageProfile(responses.users);\n      return responses;\n    })();\n  }\n  /**\n   * Get page items responses to be sent.\n   *\n   * @param items Items where the values are.\n   * @returns Responses object to be sent.\n   */\n  getPageItemsResponses(items) {\n    const responses = {};\n    items.forEach(itemData => {\n      let answered = false;\n      itemData.hasError = false;\n      if (itemData.typ == 'captcha') {\n        const value = itemData.value || '';\n        const name = itemData.typ + '_' + itemData.id;\n        answered = !!value;\n        responses[name] = 1;\n        responses['g-recaptcha-response'] = value;\n        responses['recaptcha_element'] = 'dummyvalue';\n        if (itemData.required && !answered) {\n          // Check if it has any value.\n          itemData.isEmpty = true;\n        } else {\n          itemData.isEmpty = false;\n        }\n      } else if (itemData.hasvalue) {\n        let name;\n        let value;\n        const nameTemp = itemData.typ + '_' + itemData.id;\n        if (this.isMultiChoiceItem(itemData) && itemData.subtype == 'c') {\n          name = nameTemp + '[0]';\n          responses[name] = 0;\n          itemData.choices.forEach((choice, index) => {\n            name = nameTemp + '[' + (index + 1) + ']';\n            value = choice.checked ? choice.value : 0;\n            if (!answered && value) {\n              answered = true;\n            }\n            responses[name] = value;\n          });\n        } else {\n          if (this.isMultiChoiceItem(itemData) && itemData.subtype != 'r') {\n            name = nameTemp + '[0]';\n          } else {\n            name = nameTemp;\n          }\n          if (itemData.typ == 'multichoice' || itemData.typ == 'multichoicerated') {\n            value = itemData.value || 0;\n          } else if (this.isNumericItem(itemData)) {\n            value = itemData.value || itemData.value == 0 ? itemData.value : '';\n            if (value != '') {\n              if (itemData.rangefrom != '' && value < itemData.rangefrom || itemData.rangeto != '' && value > itemData.rangeto) {\n                itemData.hasError = true;\n              }\n            }\n          } else {\n            value = itemData.value || itemData.value == 0 ? itemData.value : '';\n          }\n          answered = !!value;\n          responses[name] = value;\n        }\n        if (itemData.required && !answered) {\n          // Check if it has any value.\n          itemData.isEmpty = true;\n        } else {\n          itemData.isEmpty = false;\n        }\n      }\n    });\n    return responses;\n  }\n  /**\n   * Returns the feedback user responses with extra info.\n   *\n   * @param feedbackId Feedback ID.\n   * @param options Other options.\n   * @returns Promise resolved when the info is retrieved.\n   */\n  getResponsesAnalysis(feedbackId, options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const responses = yield AddonModFeedback.getResponsesAnalysis(feedbackId, options);\n      responses.attempts = yield _this2.addImageProfile(responses.attempts);\n      return responses;\n    })();\n  }\n  /**\n   * Handle a show entries link.\n   *\n   * @param params URL params.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  handleShowEntriesLink(params, siteId) {\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const modal = yield CoreDomUtils.showModalLoading();\n      try {\n        const module = yield CoreCourse.getModuleBasicInfo(Number(params.id), {\n          siteId,\n          readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n        });\n        if (params.showcompleted === undefined) {\n          // Param showcompleted not defined. Show entry list.\n          yield CoreNavigator.navigateToSitePath(AddonModFeedbackModuleHandlerService.PAGE_NAME + `/${module.course}/${module.id}/attempts`, {\n            siteId\n          });\n          return;\n        }\n        const attempt = yield AddonModFeedback.getAttempt(module.instance, Number(params.showcompleted), {\n          cmId: module.id,\n          readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n          siteId\n        });\n        yield CoreNavigator.navigateToSitePath(AddonModFeedbackModuleHandlerService.PAGE_NAME + `/${module.course}/${module.id}/attempts/${attempt.id}`, {\n          params: {\n            feedbackId: module.instance,\n            attempt: attempt\n          },\n          siteId\n        });\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error opening link.');\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  addImageProfile(entries) {\n    return _asyncToGenerator(function* () {\n      return Promise.all(entries.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (entry) {\n          try {\n            const user = yield CoreUser.getProfile(entry.userid, entry.courseid, true);\n            entry.profileimageurl = user.profileimageurl;\n          } catch (_unused) {\n            // Error getting profile, resolve promise without adding any extra data.\n          }\n          return entry;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n  /**\n   * Helper funtion for item type Label.\n   *\n   * @param item Item to process.\n   * @returns Item processed to show form.\n   */\n  getItemFormLabel(item) {\n    item.name = '';\n    item.presentation = CoreTextUtils.replacePluginfileUrls(item.presentation, item.itemfiles);\n    return Object.assign(item, {\n      templateName: 'label',\n      value: '',\n      hasTextInput: false\n    });\n  }\n  /**\n   * Helper funtion for item type Info.\n   *\n   * @param item Item to process.\n   * @returns Item processed to show form.\n   */\n  getItemFormInfo(item) {\n    const formItem = Object.assign(item, {\n      templateName: 'label',\n      value: '',\n      hasTextInput: false\n    });\n    const type = parseInt(formItem.presentation, 10);\n    if (type == MODE_COURSE || type == MODE_CATEGORY) {\n      formItem.presentation = formItem.otherdata;\n      formItem.value = formItem.rawValue !== undefined ? formItem.rawValue : formItem.otherdata;\n    } else if (type == MODE_RESPONSETIME) {\n      formItem.value = '__CURRENT__TIMESTAMP__';\n      const rawValue = Number(formItem.rawValue);\n      const tempValue = isNaN(rawValue) ? Date.now() : rawValue * 1000;\n      formItem.presentation = CoreTimeUtils.userDate(tempValue);\n    } else {\n      // Errors on item, return false.\n      return undefined;\n    }\n    return formItem;\n  }\n  /**\n   * Helper funtion for item type Numeric.\n   *\n   * @param item Item to process.\n   * @returns Item processed to show form.\n   */\n  getItemFormNumeric(item) {\n    const range = item.presentation.split(AddonModFeedbackProvider.LINE_SEP) || [];\n    const rangeFrom = range.length > 0 ? parseInt(range[0], 10) : undefined;\n    const rangeTo = range.length > 1 ? parseInt(range[1], 10) : undefined;\n    const formItem = Object.assign(item, {\n      templateName: 'numeric',\n      value: item.rawValue !== undefined ? Number(item.rawValue) : '',\n      rangefrom: typeof rangeFrom == 'number' && !isNaN(rangeFrom) ? range[0] : '',\n      rangeto: typeof rangeTo == 'number' && !isNaN(rangeTo) ? rangeTo : '',\n      hasTextInput: true\n    });\n    formItem.postfix = this.getNumericBoundariesForDisplay(formItem.rangefrom, formItem.rangeto);\n    return formItem;\n  }\n  /**\n   * Helper funtion for item type Text field.\n   *\n   * @param item Item to process.\n   * @returns Item processed to show form.\n   */\n  getItemFormTextfield(item) {\n    return Object.assign(item, {\n      templateName: 'textfield',\n      length: Number(item.presentation.split(AddonModFeedbackProvider.LINE_SEP)[1]) || 255,\n      value: item.rawValue !== undefined ? item.rawValue : '',\n      hasTextInput: true\n    });\n  }\n  /**\n   * Helper funtion for item type Textarea.\n   *\n   * @param item Item to process.\n   * @returns Item processed to show form.\n   */\n  getItemFormTextarea(item) {\n    return Object.assign(item, {\n      templateName: 'textarea',\n      value: item.rawValue !== undefined ? item.rawValue : '',\n      hasTextInput: true\n    });\n  }\n  /**\n   * Helper funtion for item type Multichoice.\n   *\n   * @param item Item to process.\n   * @returns Item processed to show form.\n   */\n  getItemFormMultichoice(item) {\n    let parts = item.presentation.split(AddonModFeedbackProvider.MULTICHOICE_TYPE_SEP) || [];\n    const subType = parts.length > 0 && parts[0] ? parts[0] : 'r';\n    const formItem = Object.assign(item, {\n      templateName: 'multichoice-' + subType,\n      subtype: subType,\n      value: '',\n      choices: [],\n      hasTextInput: false\n    });\n    formItem.presentation = parts.length > 1 ? parts[1] : '';\n    if (formItem.subtype != 'd') {\n      parts = formItem.presentation.split(AddonModFeedbackProvider.MULTICHOICE_ADJUST_SEP) || [];\n      formItem.presentation = parts.length > 0 ? parts[0] : '';\n      // Horizontal are not supported right now. item.horizontal = parts.length > 1 && !!parts[1];\n    }\n\n    const choices = formItem.presentation.split(AddonModFeedbackProvider.LINE_SEP) || [];\n    formItem.choices = choices.map((choice, index) => {\n      const weightValue = choice.split(AddonModFeedbackProvider.MULTICHOICERATED_VALUE_SEP) || [''];\n      choice = weightValue.length == 1 ? weightValue[0] : '(' + weightValue[0] + ') ' + weightValue[1];\n      return {\n        value: index + 1,\n        label: choice\n      };\n    });\n    if (formItem.subtype === 'r' && formItem.options.search(AddonModFeedbackProvider.MULTICHOICE_HIDENOSELECT) == -1) {\n      formItem.choices.unshift({\n        value: 0,\n        label: Translate.instant('addon.mod_feedback.not_selected')\n      });\n      formItem.value = formItem.rawValue !== undefined ? Number(formItem.rawValue) : 0;\n    } else if (formItem.subtype === 'd') {\n      formItem.choices.unshift({\n        value: 0,\n        label: ''\n      });\n      formItem.value = formItem.rawValue !== undefined ? Number(formItem.rawValue) : 0;\n    } else if (formItem.subtype === 'c') {\n      if (formItem.rawValue !== undefined) {\n        formItem.rawValue = String(formItem.rawValue);\n        const values = formItem.rawValue.split(AddonModFeedbackProvider.LINE_SEP);\n        formItem.choices.forEach(choice => {\n          for (const x in values) {\n            if (choice.value == Number(values[x])) {\n              choice.checked = true;\n              return;\n            }\n          }\n        });\n      }\n    } else {\n      formItem.value = formItem.rawValue !== undefined ? Number(formItem.rawValue) : '';\n    }\n    return formItem;\n  }\n  /**\n   * Helper funtion for item type Captcha.\n   *\n   * @param item Item to process.\n   * @returns Item processed to show form.\n   */\n  getItemFormCaptcha(item) {\n    const formItem = Object.assign(item, {\n      templateName: 'captcha',\n      value: '',\n      hasTextInput: false\n    });\n    const data = CoreTextUtils.parseJSON(item.otherdata);\n    if (data && data.length > 3) {\n      formItem.captcha = {\n        recaptchapublickey: data[3]\n      };\n    }\n    return formItem;\n  }\n  /**\n   * Process and returns item to print form.\n   *\n   * @param item Item to process.\n   * @param preview Previewing options.\n   * @returns Item processed to show form.\n   */\n  getItemForm(item, preview) {\n    switch (item.typ) {\n      case 'label':\n        return this.getItemFormLabel(item);\n      case 'info':\n        return this.getItemFormInfo(item);\n      case 'numeric':\n        return this.getItemFormNumeric(item);\n      case 'textfield':\n        return this.getItemFormTextfield(item);\n      case 'textarea':\n        return this.getItemFormTextarea(item);\n      case 'multichoice':\n        return this.getItemFormMultichoice(item);\n      case 'multichoicerated':\n        return this.getItemFormMultichoice(item);\n      case 'pagebreak':\n        if (!preview) {\n          // Pagebreaks are only used on preview.\n          return undefined;\n        }\n        break;\n      case 'captcha':\n        // Captcha is not supported right now. However label will be shown.\n        return this.getItemFormCaptcha(item);\n      default:\n        return undefined;\n    }\n  }\n  /**\n   * Returns human-readable boundaries (min - max).\n   * Based on Moodle's get_boundaries_for_display.\n   *\n   * @param rangeFrom Range from.\n   * @param rangeTo Range to.\n   * @returns Human-readable boundaries.\n   */\n  getNumericBoundariesForDisplay(rangeFrom, rangeTo) {\n    const rangeFromSet = typeof rangeFrom == 'number';\n    const rangeToSet = typeof rangeTo == 'number';\n    if (!rangeFromSet && rangeToSet) {\n      return ' (' + Translate.instant('addon.mod_feedback.maximal') + ': ' + CoreUtils.formatFloat(rangeTo) + ')';\n    } else if (rangeFromSet && !rangeToSet) {\n      return ' (' + Translate.instant('addon.mod_feedback.minimal') + ': ' + CoreUtils.formatFloat(rangeFrom) + ')';\n    } else if (!rangeFromSet && !rangeToSet) {\n      return '';\n    }\n    return ' (' + CoreUtils.formatFloat(rangeFrom) + ' - ' + CoreUtils.formatFloat(rangeTo) + ')';\n  }\n  /**\n   * Check if a form item is multichoice.\n   *\n   * @param item Item.\n   * @returns Whether item is multichoice.\n   */\n  isMultiChoiceItem(item) {\n    return item.typ == 'multichoice';\n  }\n  /**\n   * Check if a form item is numeric.\n   *\n   * @param item Item.\n   * @returns Whether item is numeric.\n   */\n  isNumericItem(item) {\n    return item.typ == 'numeric';\n  }\n}\n_class = AddonModFeedbackHelperProvider;\n_class.ɵfac = function AddonModFeedbackHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModFeedbackHelper = makeSingleton(AddonModFeedbackHelperProvider);","map":{"version":3,"names":["CoreCourse","CoreUser","CoreNavigator","CoreSites","CoreDomUtils","CoreTextUtils","CoreTimeUtils","CoreUtils","makeSingleton","Translate","AddonModFeedback","AddonModFeedbackProvider","AddonModFeedbackModuleHandlerService","MODE_RESPONSETIME","MODE_COURSE","MODE_CATEGORY","AddonModFeedbackHelperProvider","getNonRespondents","feedbackId","options","_this","_asyncToGenerator","responses","users","addImageProfile","getPageItemsResponses","items","forEach","itemData","answered","hasError","typ","value","name","id","required","isEmpty","hasvalue","nameTemp","isMultiChoiceItem","subtype","choices","choice","index","checked","isNumericItem","rangefrom","rangeto","getResponsesAnalysis","_this2","attempts","handleShowEntriesLink","params","siteId","getCurrentSiteId","modal","showModalLoading","module","getModuleBasicInfo","Number","readingStrategy","showcompleted","undefined","navigateToSitePath","PAGE_NAME","course","attempt","getAttempt","instance","cmId","error","showErrorModalDefault","dismiss","entries","Promise","all","map","_ref","entry","user","getProfile","userid","courseid","profileimageurl","_unused","_x","apply","arguments","getItemFormLabel","item","presentation","replacePluginfileUrls","itemfiles","Object","assign","templateName","hasTextInput","getItemFormInfo","formItem","type","parseInt","otherdata","rawValue","tempValue","isNaN","Date","now","userDate","getItemFormNumeric","range","split","LINE_SEP","rangeFrom","length","rangeTo","postfix","getNumericBoundariesForDisplay","getItemFormTextfield","getItemFormTextarea","getItemFormMultichoice","parts","MULTICHOICE_TYPE_SEP","subType","MULTICHOICE_ADJUST_SEP","weightValue","MULTICHOICERATED_VALUE_SEP","label","search","MULTICHOICE_HIDENOSELECT","unshift","instant","String","values","x","getItemFormCaptcha","data","parseJSON","captcha","recaptchapublickey","getItemForm","preview","rangeFromSet","rangeToSet","formatFloat","factory","ɵfac","providedIn","AddonModFeedbackHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/feedback/services/feedback-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport {\n    AddonModFeedback,\n    AddonModFeedbackGetNonRespondentsWSResponse,\n    AddonModFeedbackGetResponsesAnalysisWSResponse,\n    AddonModFeedbackGroupPaginatedOptions,\n    AddonModFeedbackItem,\n    AddonModFeedbackProvider,\n    AddonModFeedbackResponseValue,\n    AddonModFeedbackWSAttempt,\n    AddonModFeedbackWSNonRespondent,\n} from './feedback';\nimport { AddonModFeedbackModuleHandlerService } from './handlers/module';\n\nconst MODE_RESPONSETIME = 1;\nconst MODE_COURSE = 2;\nconst MODE_CATEGORY = 3;\n\n/**\n * Service that provides helper functions for feedbacks.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModFeedbackHelperProvider {\n\n    /**\n     * Retrieves a list of students who didn't submit the feedback with extra info.\n     *\n     * @param feedbackId Feedback ID.\n     * @param options Other options.\n     * @returns Promise resolved when the info is retrieved.\n     */\n    async getNonRespondents(\n        feedbackId: number,\n        options: AddonModFeedbackGroupPaginatedOptions = {},\n    ): Promise<AddonModFeedbackGetNonRespondents> {\n        const responses: AddonModFeedbackGetNonRespondents = await AddonModFeedback.getNonRespondents(feedbackId, options);\n\n        responses.users = await this.addImageProfile(responses.users);\n\n        return responses;\n    }\n\n    /**\n     * Get page items responses to be sent.\n     *\n     * @param items Items where the values are.\n     * @returns Responses object to be sent.\n     */\n    getPageItemsResponses(items: AddonModFeedbackFormItem[]): Record<string, AddonModFeedbackResponseValue> {\n        const responses: Record<string, AddonModFeedbackResponseValue> = {};\n\n        items.forEach((itemData) => {\n            let answered = false;\n            itemData.hasError = false;\n\n            if (itemData.typ == 'captcha') {\n                const value = itemData.value || '';\n                const name = itemData.typ + '_' + itemData.id;\n\n                answered = !!value;\n                responses[name] = 1;\n                responses['g-recaptcha-response'] = value;\n                responses['recaptcha_element'] = 'dummyvalue';\n\n                if (itemData.required && !answered) {\n                    // Check if it has any value.\n                    itemData.isEmpty = true;\n                } else {\n                    itemData.isEmpty = false;\n                }\n            } else if (itemData.hasvalue) {\n                let name: string;\n                let value: AddonModFeedbackResponseValue;\n                const nameTemp = itemData.typ + '_' + itemData.id;\n\n                if (this.isMultiChoiceItem(itemData) && itemData.subtype == 'c') {\n                    name = nameTemp + '[0]';\n                    responses[name] = 0;\n                    itemData.choices.forEach((choice, index) => {\n                        name = nameTemp + '[' + (index + 1) + ']';\n                        value = choice.checked ? choice.value : 0;\n                        if (!answered && value) {\n                            answered = true;\n                        }\n                        responses[name] = value;\n                    });\n                } else {\n                    if (this.isMultiChoiceItem(itemData) && itemData.subtype != 'r') {\n                        name = nameTemp + '[0]';\n                    } else {\n                        name = nameTemp;\n                    }\n\n                    if (itemData.typ == 'multichoice' || itemData.typ == 'multichoicerated') {\n                        value = itemData.value || 0;\n                    } else if (this.isNumericItem(itemData)) {\n                        value = itemData.value || itemData.value == 0 ? itemData.value : '';\n\n                        if (value != '') {\n                            if ((itemData.rangefrom != '' && value < itemData.rangefrom) ||\n                                    (itemData.rangeto != '' && value > itemData.rangeto)) {\n                                itemData.hasError = true;\n                            }\n                        }\n                    } else {\n                        value = itemData.value || itemData.value == 0 ? itemData.value : '';\n                    }\n\n                    answered = !!value;\n                    responses[name] = value;\n                }\n\n                if (itemData.required && !answered) {\n                    // Check if it has any value.\n                    itemData.isEmpty = true;\n                } else {\n                    itemData.isEmpty = false;\n                }\n            }\n        });\n\n        return responses;\n    }\n\n    /**\n     * Returns the feedback user responses with extra info.\n     *\n     * @param feedbackId Feedback ID.\n     * @param options Other options.\n     * @returns Promise resolved when the info is retrieved.\n     */\n    async getResponsesAnalysis(\n        feedbackId: number,\n        options: AddonModFeedbackGroupPaginatedOptions = {},\n    ): Promise<AddonModFeedbackResponsesAnalysis> {\n        const responses: AddonModFeedbackResponsesAnalysis = await AddonModFeedback.getResponsesAnalysis(feedbackId, options);\n\n        responses.attempts = await this.addImageProfile(responses.attempts);\n\n        return responses;\n    }\n\n    /**\n     * Handle a show entries link.\n     *\n     * @param params URL params.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async handleShowEntriesLink(params: Record<string, string>, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            const module = await CoreCourse.getModuleBasicInfo(\n                Number(params.id),\n                { siteId, readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE },\n            );\n\n            if (params.showcompleted === undefined) {\n                // Param showcompleted not defined. Show entry list.\n                await CoreNavigator.navigateToSitePath(\n                    AddonModFeedbackModuleHandlerService.PAGE_NAME + `/${module.course}/${module.id}/attempts`,\n                    { siteId },\n                );\n\n                return;\n            }\n\n            const attempt = await AddonModFeedback.getAttempt(module.instance, Number(params.showcompleted), {\n                cmId: module.id,\n                readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n                siteId,\n            });\n\n            await CoreNavigator.navigateToSitePath(\n                AddonModFeedbackModuleHandlerService.PAGE_NAME + `/${module.course}/${module.id}/attempts/${attempt.id}`,\n                {\n                    params: {\n                        feedbackId: module.instance,\n                        attempt: attempt,\n                    },\n                    siteId,\n                },\n            );\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error opening link.');\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Add Image profile url field on some entries.\n     *\n     * @param entries Entries array to get profile from.\n     * @returns Returns the same array with the profileimageurl added if found.\n     */\n    async addImageProfile(entries: AddonModFeedbackWSAttempt[]): Promise<AddonModFeedbackAttempt[]>;\n    async addImageProfile(entries: AddonModFeedbackWSNonRespondent[]): Promise<AddonModFeedbackNonRespondent[]>;\n    async addImageProfile(\n        entries: (AddonModFeedbackWSAttempt | AddonModFeedbackWSNonRespondent)[],\n    ): Promise<(AddonModFeedbackAttempt | AddonModFeedbackNonRespondent)[]> {\n        return Promise.all(entries.map(async (entry: AddonModFeedbackAttempt | AddonModFeedbackNonRespondent) => {\n            try {\n                const user = await CoreUser.getProfile(entry.userid, entry.courseid, true);\n\n                entry.profileimageurl = user.profileimageurl;\n            } catch {\n                // Error getting profile, resolve promise without adding any extra data.\n            }\n\n            return entry;\n        }));\n    }\n\n    /**\n     * Helper funtion for item type Label.\n     *\n     * @param item Item to process.\n     * @returns Item processed to show form.\n     */\n    protected getItemFormLabel(item: AddonModFeedbackItem): AddonModFeedbackFormBasicItem {\n        item.name = '';\n        item.presentation = CoreTextUtils.replacePluginfileUrls(item.presentation, item.itemfiles);\n\n        return Object.assign(item, {\n            templateName: 'label',\n            value: '',\n            hasTextInput: false,\n        });\n    }\n\n    /**\n     * Helper funtion for item type Info.\n     *\n     * @param item Item to process.\n     * @returns Item processed to show form.\n     */\n    protected getItemFormInfo(item: AddonModFeedbackItem): AddonModFeedbackFormBasicItem | undefined {\n        const formItem: AddonModFeedbackFormBasicItem = Object.assign(item, {\n            templateName: 'label',\n            value: '',\n            hasTextInput: false,\n        });\n\n        const type = parseInt(formItem.presentation, 10);\n\n        if (type == MODE_COURSE || type == MODE_CATEGORY) {\n            formItem.presentation = formItem.otherdata;\n            formItem.value = formItem.rawValue !== undefined ? formItem.rawValue : formItem.otherdata;\n        } else if (type == MODE_RESPONSETIME) {\n            formItem.value = '__CURRENT__TIMESTAMP__';\n\n            const rawValue = Number(formItem.rawValue);\n            const tempValue = isNaN(rawValue) ? Date.now() : rawValue * 1000;\n            formItem.presentation = CoreTimeUtils.userDate(tempValue);\n        } else {\n            // Errors on item, return false.\n            return undefined;\n        }\n\n        return formItem;\n    }\n\n    /**\n     * Helper funtion for item type Numeric.\n     *\n     * @param item Item to process.\n     * @returns Item processed to show form.\n     */\n    protected getItemFormNumeric(item: AddonModFeedbackItem): AddonModFeedbackNumericItem {\n\n        const range = item.presentation.split(AddonModFeedbackProvider.LINE_SEP) || [];\n        const rangeFrom = range.length > 0 ? parseInt(range[0], 10) : undefined;\n        const rangeTo = range.length > 1 ? parseInt(range[1], 10) : undefined;\n\n        const formItem: AddonModFeedbackNumericItem = Object.assign(item, {\n            templateName: 'numeric',\n            value: item.rawValue !== undefined ? Number(item.rawValue) : '',\n            rangefrom: typeof rangeFrom == 'number' && !isNaN(rangeFrom) ? range[0] : '',\n            rangeto: typeof rangeTo == 'number' && !isNaN(rangeTo) ? rangeTo : '',\n            hasTextInput: true,\n        });\n        formItem.postfix = this.getNumericBoundariesForDisplay(formItem.rangefrom, formItem.rangeto);\n\n        return formItem;\n    }\n\n    /**\n     * Helper funtion for item type Text field.\n     *\n     * @param item Item to process.\n     * @returns Item processed to show form.\n     */\n    protected getItemFormTextfield(item: AddonModFeedbackItem): AddonModFeedbackTextItem {\n        return Object.assign(item, {\n            templateName: 'textfield',\n            length: Number(item.presentation.split(AddonModFeedbackProvider.LINE_SEP)[1]) || 255,\n            value: item.rawValue !== undefined ? item.rawValue : '',\n            hasTextInput: true,\n        });\n    }\n\n    /**\n     * Helper funtion for item type Textarea.\n     *\n     * @param item Item to process.\n     * @returns Item processed to show form.\n     */\n    protected getItemFormTextarea(item: AddonModFeedbackItem): AddonModFeedbackFormBasicItem {\n        return Object.assign(item, {\n            templateName: 'textarea',\n            value: item.rawValue !== undefined ? item.rawValue : '',\n            hasTextInput: true,\n        });\n    }\n\n    /**\n     * Helper funtion for item type Multichoice.\n     *\n     * @param item Item to process.\n     * @returns Item processed to show form.\n     */\n    protected getItemFormMultichoice(item: AddonModFeedbackItem): AddonModFeedbackMultichoiceItem {\n\n        let parts = item.presentation.split(AddonModFeedbackProvider.MULTICHOICE_TYPE_SEP) || [];\n        const subType = parts.length > 0 && parts[0] ? parts[0] : 'r';\n\n        const formItem: AddonModFeedbackMultichoiceItem = Object.assign(item, {\n            templateName: 'multichoice-' + subType,\n            subtype: subType,\n            value: '',\n            choices: [],\n            hasTextInput: false,\n        });\n\n        formItem.presentation = parts.length > 1 ? parts[1] : '';\n        if (formItem.subtype != 'd') {\n            parts = formItem.presentation.split(AddonModFeedbackProvider.MULTICHOICE_ADJUST_SEP) || [];\n            formItem.presentation = parts.length > 0 ? parts[0] : '';\n            // Horizontal are not supported right now. item.horizontal = parts.length > 1 && !!parts[1];\n        }\n\n        const choices = formItem.presentation.split(AddonModFeedbackProvider.LINE_SEP) || [];\n        formItem.choices = choices.map((choice, index) => {\n            const weightValue = choice.split(AddonModFeedbackProvider.MULTICHOICERATED_VALUE_SEP) || [''];\n            choice = weightValue.length == 1 ? weightValue[0] : '(' + weightValue[0] + ') ' + weightValue[1];\n\n            return { value: index + 1, label: choice };\n        });\n\n        if (formItem.subtype === 'r' && formItem.options.search(AddonModFeedbackProvider.MULTICHOICE_HIDENOSELECT) == -1) {\n            formItem.choices.unshift({ value: 0, label: Translate.instant('addon.mod_feedback.not_selected') });\n            formItem.value = formItem.rawValue !== undefined ? Number(formItem.rawValue) : 0;\n        } else if (formItem.subtype === 'd') {\n            formItem.choices.unshift({ value: 0, label: '' });\n            formItem.value = formItem.rawValue !== undefined ? Number(formItem.rawValue) : 0;\n        } else if (formItem.subtype === 'c') {\n            if (formItem.rawValue !== undefined) {\n                formItem.rawValue = String(formItem.rawValue);\n                const values = formItem.rawValue.split(AddonModFeedbackProvider.LINE_SEP);\n                formItem.choices.forEach((choice) => {\n                    for (const x in values) {\n                        if (choice.value == Number(values[x])) {\n                            choice.checked = true;\n\n                            return;\n                        }\n                    }\n                });\n            }\n        } else {\n            formItem.value = formItem.rawValue !== undefined ? Number(formItem.rawValue) : '';\n        }\n\n        return formItem;\n    }\n\n    /**\n     * Helper funtion for item type Captcha.\n     *\n     * @param item Item to process.\n     * @returns Item processed to show form.\n     */\n    protected getItemFormCaptcha(item: AddonModFeedbackItem): AddonModFeedbackCaptchaItem {\n        const formItem: AddonModFeedbackCaptchaItem = Object.assign(item, {\n            templateName: 'captcha',\n            value: '',\n            hasTextInput: false,\n        });\n\n        const data = <string[]> CoreTextUtils.parseJSON(item.otherdata);\n        if (data && data.length > 3) {\n            formItem.captcha = {\n                recaptchapublickey: data[3],\n            };\n        }\n\n        return formItem;\n    }\n\n    /**\n     * Process and returns item to print form.\n     *\n     * @param item Item to process.\n     * @param preview Previewing options.\n     * @returns Item processed to show form.\n     */\n    getItemForm(item: AddonModFeedbackItem, preview: boolean): AddonModFeedbackFormItem | undefined {\n        switch (item.typ) {\n            case 'label':\n                return this.getItemFormLabel(item);\n            case 'info':\n                return this.getItemFormInfo(item);\n            case 'numeric':\n                return this.getItemFormNumeric(item);\n            case 'textfield':\n                return this.getItemFormTextfield(item);\n            case 'textarea':\n                return this.getItemFormTextarea(item);\n            case 'multichoice':\n                return this.getItemFormMultichoice(item);\n            case 'multichoicerated':\n                return this.getItemFormMultichoice(item);\n            case 'pagebreak':\n                if (!preview) {\n                    // Pagebreaks are only used on preview.\n                    return undefined;\n                }\n                break;\n            case 'captcha':\n                // Captcha is not supported right now. However label will be shown.\n                return this.getItemFormCaptcha(item);\n            default:\n                return undefined;\n        }\n    }\n\n    /**\n     * Returns human-readable boundaries (min - max).\n     * Based on Moodle's get_boundaries_for_display.\n     *\n     * @param rangeFrom Range from.\n     * @param rangeTo Range to.\n     * @returns Human-readable boundaries.\n     */\n    protected getNumericBoundariesForDisplay(rangeFrom: number | string, rangeTo: number | string): string {\n        const rangeFromSet = typeof rangeFrom == 'number';\n        const rangeToSet = typeof rangeTo == 'number';\n\n        if (!rangeFromSet && rangeToSet) {\n            return ' (' + Translate.instant('addon.mod_feedback.maximal') + ': ' + CoreUtils.formatFloat(rangeTo) + ')';\n        } else if (rangeFromSet && !rangeToSet) {\n            return ' (' + Translate.instant('addon.mod_feedback.minimal') + ': ' + CoreUtils.formatFloat(rangeFrom) + ')';\n        } else if (!rangeFromSet && !rangeToSet) {\n            return '';\n        }\n\n        return ' (' + CoreUtils.formatFloat(rangeFrom) + ' - ' + CoreUtils.formatFloat(rangeTo) + ')';\n    }\n\n    /**\n     * Check if a form item is multichoice.\n     *\n     * @param item Item.\n     * @returns Whether item is multichoice.\n     */\n    protected isMultiChoiceItem(item: AddonModFeedbackFormItem): item is AddonModFeedbackMultichoiceItem {\n        return item.typ == 'multichoice';\n    }\n\n    /**\n     * Check if a form item is numeric.\n     *\n     * @param item Item.\n     * @returns Whether item is numeric.\n     */\n    protected isNumericItem(item: AddonModFeedbackFormItem): item is AddonModFeedbackNumericItem {\n        return item.typ == 'numeric';\n    }\n\n}\n\nexport const AddonModFeedbackHelper = makeSingleton(AddonModFeedbackHelperProvider);\n\n/**\n * Attempt with some calculated data.\n */\nexport type AddonModFeedbackAttempt = AddonModFeedbackWSAttempt & {\n    profileimageurl?: string;\n};\n\n/**\n * Non respondent with some calculated data.\n */\nexport type AddonModFeedbackNonRespondent = AddonModFeedbackWSNonRespondent & {\n    profileimageurl?: string;\n};\n\n/**\n * Non respondents with some calculated data.\n */\nexport type AddonModFeedbackResponsesAnalysis = Omit<AddonModFeedbackGetResponsesAnalysisWSResponse, 'attempts'> & {\n    attempts: AddonModFeedbackAttempt[];\n};\n\n/**\n * Non respondents with some calculated data.\n */\nexport type AddonModFeedbackGetNonRespondents = Omit<AddonModFeedbackGetNonRespondentsWSResponse, 'users'> & {\n    users: AddonModFeedbackNonRespondent[];\n};\n\n/**\n * Item with form data.\n */\nexport type AddonModFeedbackFormItem =\n    AddonModFeedbackFormBasicItem | AddonModFeedbackNumericItem | AddonModFeedbackTextItem | AddonModFeedbackMultichoiceItem |\n    AddonModFeedbackCaptchaItem;\n\n/**\n * Common calculated data for all form items.\n */\nexport type AddonModFeedbackFormBasicItem = AddonModFeedbackItem & {\n    templateName: string;\n    value: AddonModFeedbackResponseValue;\n    hasTextInput: boolean;\n    isEmpty?: boolean;\n    hasError?: boolean;\n};\n\n/**\n * Numeric item.\n */\nexport type AddonModFeedbackNumericItem = AddonModFeedbackFormBasicItem & {\n    rangefrom: number | string;\n    rangeto: number | string;\n    postfix?: string;\n};\n\n/**\n * Text item.\n */\nexport type AddonModFeedbackTextItem = AddonModFeedbackFormBasicItem & {\n    length: number;\n};\n\n/**\n * Multichoice item.\n */\nexport type AddonModFeedbackMultichoiceItem = AddonModFeedbackFormBasicItem & {\n    subtype: string;\n    choices: { value: number; label: string; checked?: boolean }[];\n};\n\n/**\n * Captcha item.\n */\nexport type AddonModFeedbackCaptchaItem = AddonModFeedbackFormBasicItem & {\n    captcha?: {\n        recaptchapublickey: string;\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}