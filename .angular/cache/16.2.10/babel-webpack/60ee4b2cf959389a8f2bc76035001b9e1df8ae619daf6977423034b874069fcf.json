{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ElementRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreIframeUtils, CoreIframeUtilsProvider } from '@services/utils/iframe';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { NgZone, Translate } from '@singletons';\nimport { CoreExternalContentDirective } from './external-content';\nimport { CoreLinkDirective } from './link';\nimport { CoreFilter } from '@features/filter/services/filter';\nimport { CoreFilterDelegate } from '@features/filter/services/filter-delegate';\nimport { CoreFilterHelper } from '@features/filter/services/filter-helper';\nimport { CoreSubscriptions } from '@singletons/subscriptions';\nimport { CoreDirectivesRegistry } from '@singletons/directives-registry';\nimport { CoreCollapsibleItemDirective } from './collapsible-item';\nimport { CoreDom } from '@singletons/dom';\nimport { CoreEvents } from '@singletons/events';\nimport { CORE_REFRESH_CONTEXT } from '@/core/utils/refresh-context';\nimport { CorePlatform } from '@services/platform';\nimport { MediaElementController } from '@classes/element-controllers/MediaElementController';\nimport { FrameElementController } from '@classes/element-controllers/FrameElementController';\nimport { CoreUrl } from '@singletons/url';\nimport { CoreIcons } from '@singletons/icons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\n/**\n * Directive to format text rendered. It renders the HTML and treats all links and media, using CoreLinkDirective\n * and CoreExternalContentDirective. It also applies filters if needed.\n *\n * Please use this directive if your text needs to be filtered or it can contain links or media (images, audio, video).\n *\n * Example usage:\n * <core-format-text [text]=\"myText\" [component]=\"component\" [componentId]=\"componentId\"></core-format-text>\n */\nexport class CoreFormatTextDirective {\n  constructor(element, content, viewContainerRef, refreshContext) {\n    this.content = content;\n    this.viewContainerRef = viewContainerRef;\n    this.refreshContext = refreshContext;\n    this.adaptImg = true; // Whether to adapt images to screen width.\n    this.hideIfEmpty = false; // If true, the tag will contain nothing if text is empty.\n    this.onClick = new EventEmitter(); // Called when clicked.\n    this.elementControllers = [];\n    this.emptyText = '';\n    this.domPromises = [];\n    CoreDirectivesRegistry.register(element.nativeElement, this);\n    this.element = element.nativeElement;\n    this.element.classList.add('core-loading'); // Hide contents until they're treated.\n    this.emptyText = this.hideIfEmpty ? '' : '&nbsp;';\n    this.element.innerHTML = this.emptyText;\n    this.afterRender = new EventEmitter();\n    this.element.addEventListener('click', event => this.elementClicked(event));\n    this.siteId = this.siteId || CoreSites.getCurrentSiteId();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnChanges(changes) {\n    if (changes.text || changes.filter || changes.contextLevel || changes.contextInstanceId) {\n      this.formatAndRenderContents();\n      return;\n    }\n    if ('disabled' in changes) {\n      const disabled = changes['disabled'].currentValue;\n      this.elementControllers.forEach(controller => disabled ? controller.disable() : controller.enable());\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$domElementPromi;\n    (_this$domElementPromi = this.domElementPromise) === null || _this$domElementPromi === void 0 || _this$domElementPromi.cancel();\n    this.domPromises.forEach(promise => {\n      promise.cancel();\n    });\n    this.elementControllers.forEach(controller => controller.destroy());\n  }\n  /**\n   * @inheritdoc\n   */\n  ready() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.element.classList.contains('core-loading')) {\n        return;\n      }\n      yield new Promise(resolve => {\n        const subscription = _this.afterRender.subscribe(() => {\n          subscription.unsubscribe();\n          resolve();\n        });\n      });\n    })();\n  }\n  /**\n   * Apply CoreExternalContentDirective to a certain element.\n   *\n   * @param element Element to add the attributes to.\n   * @returns External content instance or undefined if siteId is not provided.\n   */\n  addExternalContent(element) {\n    if (!this.siteId) {\n      return;\n    }\n    // Angular doesn't let adding directives dynamically. Create the CoreExternalContentDirective manually.\n    const extContent = new CoreExternalContentDirective(new ElementRef(element));\n    extContent.component = this.component;\n    extContent.componentId = this.componentId;\n    extContent.siteId = this.siteId;\n    extContent.src = element.getAttribute('src') || undefined;\n    extContent.href = element.getAttribute('href') || element.getAttribute('xlink:href') || undefined;\n    extContent.targetSrc = element.getAttribute('target-src') || undefined;\n    extContent.poster = element.getAttribute('poster') || undefined;\n    extContent.ngAfterViewInit();\n    const changeDetectorRef = this.viewContainerRef.injector.get(ChangeDetectorRef);\n    changeDetectorRef.markForCheck();\n    return extContent;\n  }\n  /**\n   * Add class to adapt media to a certain element.\n   *\n   * @param element Element to add the class to.\n   */\n  addMediaAdaptClass(element) {\n    element.classList.add('core-media-adapt-width');\n  }\n  /**\n   * Wrap an image with a container to adapt its width.\n   *\n   * @param img Image to adapt.\n   */\n  adaptImage(img) {\n    // Element to wrap the image.\n    const container = document.createElement('span');\n    const originalWidth = img.attributes.getNamedItem('width');\n    const forcedWidth = Number(originalWidth === null || originalWidth === void 0 ? void 0 : originalWidth.value);\n    if (originalWidth && !isNaN(forcedWidth)) {\n      if (originalWidth.value.indexOf('%') < 0) {\n        img.style.width = forcedWidth + 'px';\n      } else {\n        img.style.width = forcedWidth + '%';\n      }\n    }\n    container.classList.add('core-adapted-img-container');\n    container.style.cssFloat = img.style.cssFloat; // Copy the float to correctly position the search icon.\n    if (img.classList.contains('atto_image_button_right')) {\n      container.classList.add('atto_image_button_right');\n    } else if (img.classList.contains('atto_image_button_left')) {\n      container.classList.add('atto_image_button_left');\n    } else if (img.classList.contains('atto_image_button_text-top')) {\n      container.classList.add('atto_image_button_text-top');\n    } else if (img.classList.contains('atto_image_button_middle')) {\n      container.classList.add('atto_image_button_middle');\n    } else if (img.classList.contains('atto_image_button_text-bottom')) {\n      container.classList.add('atto_image_button_text-bottom');\n    }\n    CoreDomUtils.wrapElement(img, container);\n  }\n  /**\n   * Add magnifying glass icons to view adapted images at full size.\n   */\n  addMagnifyingGlasses() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const imgs = Array.from(_this2.element.querySelectorAll('.core-adapted-img-container > img'));\n      if (!imgs.length) {\n        return;\n      }\n      // If cannot calculate element's width, use viewport width to avoid false adapt image icons appearing.\n      const elWidth = yield _this2.getElementWidth();\n      imgs.forEach(img => {\n        var _img$parentNode;\n        // Skip image if it's inside a link.\n        if (img.closest('a')) {\n          return;\n        }\n        let imgWidth = Number(img.getAttribute('width'));\n        if (!imgWidth) {\n          // No width attribute, use real size.\n          imgWidth = img.naturalWidth;\n        }\n        if (imgWidth <= elWidth) {\n          return;\n        }\n        const imgSrc = CoreTextUtils.escapeHTML(img.getAttribute('data-original-src') || img.getAttribute('src'));\n        const label = Translate.instant('core.openfullimage');\n        const button = document.createElement('button');\n        button.classList.add('core-image-viewer-icon');\n        button.classList.add('hidden');\n        button.setAttribute('aria-label', label);\n        const iconName = 'up-right-and-down-left-from-center';\n        const src = CoreIcons.getIconSrc('font-awesome', 'solid', iconName);\n        // Add an ion-icon item to apply the right styles, but the ion-icon component won't be executed.\n        button.innerHTML = `<ion-icon name=\"fas-${iconName}\" aria-hidden=\"true\" src=\"${src}\"></ion-icon>`;\n        button.addEventListener('click', e => {\n          e.preventDefault();\n          e.stopPropagation();\n          CoreDomUtils.viewImage(imgSrc, img.getAttribute('alt'), _this2.component, _this2.componentId);\n        });\n        (_img$parentNode = img.parentNode) === null || _img$parentNode === void 0 || _img$parentNode.appendChild(button);\n        if (img.complete && img.naturalWidth > 0) {\n          // Image has already loaded, show the button.\n          button.classList.remove('hidden');\n        } else {\n          // Show the button when the image is loaded.\n          img.onload = () => button.classList.remove('hidden');\n        }\n      });\n    })();\n  }\n  /**\n   * Listener to call when the element is clicked.\n   *\n   * @param e Click event.\n   */\n  elementClicked(e) {\n    var _this$collapsible;\n    if (e.defaultPrevented) {\n      // Ignore it if the event was prevented by some other listener.\n      return;\n    }\n    if (this.onClick.observed) {\n      this.onClick.emit();\n      return;\n    }\n    if (!this.text) {\n      return;\n    }\n    (_this$collapsible = this.collapsible) === null || _this$collapsible === void 0 || _this$collapsible.elementClicked(e);\n  }\n  /**\n   * Finish the rendering, displaying the element again and calling afterRender.\n   */\n  finishRender() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // Show the element again.\n      _this3.element.classList.remove('core-loading');\n      yield CoreUtils.nextTick();\n      // Emit the afterRender output.\n      _this3.afterRender.emit();\n    })();\n  }\n  /**\n   * Format contents and render.\n   */\n  formatAndRenderContents() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this4.text) {\n        _this4.element.innerHTML = _this4.emptyText; // Remove current contents.\n        yield _this4.finishRender();\n        return;\n      }\n      if (!_this4.element.getAttribute('singleLine')) {\n        _this4.element.setAttribute('singleLine', String(CoreUtils.isTrueOrOne(_this4.singleLine)));\n      }\n      _this4.text = _this4.text ? _this4.text.trim() : '';\n      const result = yield _this4.formatContents();\n      // Disable media adapt to correctly calculate the height.\n      _this4.element.classList.add('core-disable-media-adapt');\n      _this4.element.innerHTML = ''; // Remove current contents.\n      // Move the children to the current element to be able to calculate the height.\n      CoreDomUtils.moveChildren(result.div, _this4.element);\n      _this4.elementControllers.forEach(controller => controller.destroy());\n      _this4.elementControllers = result.elementControllers;\n      yield CoreUtils.nextTick();\n      // Add magnifying glasses to images.\n      _this4.addMagnifyingGlasses();\n      if (result.options.filter) {\n        // Let filters handle HTML. We do it here because we don't want them to block the render of the text.\n        CoreFilterDelegate.handleHtml(_this4.element, result.filters, _this4.viewContainerRef, result.options, [], _this4.component, _this4.componentId, result.siteId);\n      }\n      _this4.element.classList.remove('core-disable-media-adapt');\n      yield _this4.finishRender();\n    })();\n  }\n  /**\n   * Apply formatText and set sub-directives.\n   *\n   * @returns Promise resolved with a div element containing the code.\n   */\n  formatContents() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      // Retrieve the site since it might be needed later.\n      const site = yield CoreUtils.ignoreErrors(CoreSites.getSite(_this5.siteId));\n      const siteId = site === null || site === void 0 ? void 0 : site.getId();\n      if (site && _this5.contextLevel == 'course' && _this5.contextInstanceId !== undefined && _this5.contextInstanceId <= 0) {\n        _this5.contextInstanceId = site.getSiteHomeId();\n      }\n      if (_this5.contextLevel === 'course' && _this5.contextInstanceId === undefined && _this5.courseId !== undefined) {\n        _this5.contextInstanceId = _this5.courseId;\n      }\n      const filter = _this5.filter === undefined ? !!(_this5.contextLevel && _this5.contextInstanceId !== undefined) : CoreUtils.isTrueOrOne(_this5.filter);\n      const options = {\n        clean: CoreUtils.isTrueOrOne(_this5.clean),\n        singleLine: CoreUtils.isTrueOrOne(_this5.singleLine),\n        highlight: _this5.highlight,\n        courseId: _this5.courseId,\n        wsNotFiltered: CoreUtils.isTrueOrOne(_this5.wsNotFiltered)\n      };\n      let formatted;\n      let filters = [];\n      if (filter) {\n        var _this5$contextInstanc;\n        const filterResult = yield CoreFilterHelper.getFiltersAndFormatText(_this5.text || '', _this5.contextLevel || '', (_this5$contextInstanc = _this5.contextInstanceId) !== null && _this5$contextInstanc !== void 0 ? _this5$contextInstanc : -1, options, siteId);\n        filters = filterResult.filters;\n        formatted = filterResult.text;\n      } else {\n        formatted = yield CoreFilter.formatText(_this5.text || '', options, [], siteId);\n      }\n      formatted = _this5.treatWindowOpen(formatted);\n      const div = document.createElement('div');\n      div.innerHTML = formatted;\n      const elementControllers = _this5.treatHTMLElements(div, site);\n      return {\n        div,\n        filters,\n        options,\n        siteId,\n        elementControllers\n      };\n    })();\n  }\n  /**\n   * Treat HTML elements when formatting contents.\n   *\n   * @param div Div element.\n   * @param site Site instance.\n   * @returns Promise resolved when done.\n   */\n  treatHTMLElements(div, site) {\n    const images = Array.from(div.querySelectorAll('img'));\n    const anchors = Array.from(div.querySelectorAll('a'));\n    const audios = Array.from(div.querySelectorAll('audio'));\n    const videos = Array.from(div.querySelectorAll('video'));\n    const iframes = Array.from(div.querySelectorAll('iframe'));\n    const buttons = Array.from(div.querySelectorAll('.button'));\n    const icons = Array.from(div.querySelectorAll('i.fa,i.fas,i.far,i.fab'));\n    const elementsWithInlineStyles = Array.from(div.querySelectorAll('*[style]'));\n    const stopClicksElements = Array.from(div.querySelectorAll('button,input,select,textarea'));\n    const frames = Array.from(div.querySelectorAll(CoreIframeUtilsProvider.FRAME_TAGS.join(',').replace(/iframe,?/, '')));\n    const svgImages = Array.from(div.querySelectorAll('image'));\n    const promises = [];\n    this.treatAppUrlElements(div, site);\n    // Walk through the content to find the links and add our directive to it.\n    // Important: We need to look for links first because in 'img' we add new links without core-link.\n    anchors.forEach(anchor => {\n      var _this$captureLinks;\n      if (anchor.dataset.appUrl) {\n        // Link already treated in treatAppUrlElements, ignore it.\n        return;\n      }\n      // Angular 2 doesn't let adding directives dynamically. Create the CoreLinkDirective manually.\n      const linkDir = new CoreLinkDirective(new ElementRef(anchor), this.content);\n      linkDir.capture = (_this$captureLinks = this.captureLinks) !== null && _this$captureLinks !== void 0 ? _this$captureLinks : true;\n      linkDir.inApp = this.openLinksInApp;\n      linkDir.ngOnInit();\n      this.addExternalContent(anchor);\n    });\n    const externalImages = [];\n    if (images && images.length > 0) {\n      // Walk through the content to find images, and add our directive.\n      images.forEach(img => {\n        this.addMediaAdaptClass(img);\n        const externalImage = this.addExternalContent(img);\n        if (externalImage && !externalImage.invalid) {\n          externalImages.push(externalImage);\n        }\n        if (CoreUtils.isTrueOrOne(this.adaptImg) && !img.classList.contains('icon')) {\n          this.adaptImage(img);\n        }\n      });\n    }\n    const audioControllers = audios.map(audio => {\n      this.treatMedia(audio);\n      return new MediaElementController(audio, !this.disabled);\n    });\n    const videoControllers = videos.map(video => {\n      this.treatMedia(video, true);\n      return new MediaElementController(video, !this.disabled);\n    });\n    const iframeControllers = iframes.map(iframe => {\n      promises.push(this.treatIframe(iframe, site));\n      return new FrameElementController(iframe, !this.disabled);\n    });\n    svgImages.forEach(image => {\n      this.addExternalContent(image);\n    });\n    // Handle buttons with inner links.\n    buttons.forEach(button => {\n      // Check if it has a link inside.\n      if (button.querySelector('a')) {\n        button.classList.add('core-button-with-inner-link');\n      }\n    });\n    // Handle Font Awesome icons to be rendered by the app.\n    icons.forEach(icon => {\n      CoreIcons.replaceCSSIcon(icon);\n    });\n    // Handle inline styles.\n    elementsWithInlineStyles.forEach(el => {\n      // Only add external content for tags that haven't been treated already.\n      if (el.tagName != 'A' && el.tagName != 'IMG' && el.tagName != 'AUDIO' && el.tagName != 'VIDEO' && el.tagName != 'SOURCE' && el.tagName != 'TRACK') {\n        this.addExternalContent(el);\n      }\n    });\n    // Stop propagating click events.\n    stopClicksElements.forEach(element => {\n      element.addEventListener('click', e => {\n        e.stopPropagation();\n      });\n    });\n    // Handle all kind of frames.\n    const frameControllers = frames.map(frame => {\n      CoreIframeUtils.treatFrame(frame, false);\n      return new FrameElementController(frame, !this.disabled);\n    });\n    CoreDomUtils.handleBootstrapTooltips(div);\n    if (externalImages.length) {\n      // Wait for images to load.\n      const promise = CoreUtils.allPromises(externalImages.map(externalImage => {\n        if (externalImage.loaded) {\n          // Image has already been loaded, no need to wait.\n          return Promise.resolve();\n        }\n        return new Promise(resolve => CoreSubscriptions.once(externalImage.onLoad, resolve));\n      }));\n      // Automatically reject the promise after 5 seconds to prevent blocking the user forever.\n      promises.push(CoreUtils.ignoreErrors(CoreUtils.timeoutPromise(promise, 5000)));\n    }\n    // Run asynchronous operations in the background to avoid blocking rendering.\n    Promise.all(promises).catch(error => CoreUtils.logUnhandledError('Error treating format-text elements', error));\n    return [...videoControllers, ...audioControllers, ...iframeControllers, ...frameControllers];\n  }\n  /**\n   * Treat elements with an app-url data attribute.\n   *\n   * @param div Div containing the elements.\n   * @param site Site.\n   */\n  treatAppUrlElements(div, site) {\n    var _this6 = this;\n    const appUrlElements = Array.from(div.querySelectorAll('*[data-app-url]'));\n    appUrlElements.forEach(element => {\n      const url = element.dataset.appUrl;\n      if (!url) {\n        return;\n      }\n      CoreDom.initializeClickableElementA11y(element, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (event) {\n          event.preventDefault();\n          event.stopPropagation();\n          site = site || CoreSites.getCurrentSite();\n          if (!site) {\n            return;\n          }\n          const confirmMessage = element.dataset.appUrlConfirm;\n          const openInApp = element.dataset.openIn === 'app';\n          const refreshOnResume = element.dataset.appUrlResumeAction === 'refresh';\n          if (confirmMessage) {\n            try {\n              yield CoreDomUtils.showConfirm(Translate.instant(confirmMessage));\n            } catch (_unused) {\n              return;\n            }\n          }\n          if (openInApp) {\n            site.openInAppWithAutoLogin(url);\n            if (refreshOnResume && _this6.refreshContext) {\n              // Refresh the context when the IAB is closed.\n              CoreEvents.once(CoreEvents.IAB_EXIT, () => {\n                var _this6$refreshContext;\n                (_this6$refreshContext = _this6.refreshContext) === null || _this6$refreshContext === void 0 || _this6$refreshContext.refreshContext();\n              });\n            }\n          } else {\n            site.openInBrowserWithAutoLogin(url, undefined, {\n              showBrowserWarning: !confirmMessage\n            });\n            if (refreshOnResume && _this6.refreshContext) {\n              // Refresh the context when the app is resumed.\n              CoreSubscriptions.once(CorePlatform.resume, () => {\n                NgZone.run( /*#__PURE__*/_asyncToGenerator(function* () {\n                  var _this6$refreshContext2;\n                  (_this6$refreshContext2 = _this6.refreshContext) === null || _this6$refreshContext2 === void 0 || _this6$refreshContext2.refreshContext();\n                }));\n              });\n            }\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  }\n  /**\n   * Returns the element width in pixels.\n   *\n   * @returns The width of the element in pixels.\n   */\n  getElementWidth() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this7.domElementPromise) {\n        _this7.domElementPromise = CoreDom.waitToBeInDOM(_this7.element);\n      }\n      yield _this7.domElementPromise;\n      let width = _this7.element.getBoundingClientRect().width;\n      if (!width) {\n        // All elements inside are floating or inline. Change display mode to allow calculate the width.\n        const previousDisplay = getComputedStyle(_this7.element).display;\n        _this7.element.style.display = 'inline-block';\n        yield CoreUtils.nextTick();\n        width = _this7.element.getBoundingClientRect().width;\n        _this7.element.style.display = previousDisplay;\n      }\n      // Aproximate using parent elements.\n      let element = _this7.element;\n      while (!width && element.parentElement) {\n        element = element.parentElement;\n        const computedStyle = getComputedStyle(element);\n        const padding = CoreDomUtils.getComputedStyleMeasure(computedStyle, 'paddingLeft') + CoreDomUtils.getComputedStyleMeasure(computedStyle, 'paddingRight');\n        // Use parent width as an aproximation.\n        width = element.getBoundingClientRect().width - padding;\n      }\n      return width > 0 && width < window.innerWidth ? width : window.innerWidth;\n    })();\n  }\n  /**\n   * Add media adapt class and apply CoreExternalContentDirective to the media element and its sources and tracks.\n   *\n   * @param element Video or audio to treat.\n   * @param isVideo Whether it's a video.\n   */\n  treatMedia(element, isVideo = false) {\n    this.addMediaAdaptClass(element);\n    this.addExternalContent(element);\n    // Hide download button if not hidden already.\n    let controlsList = element.getAttribute('controlsList') || '';\n    if (!controlsList.includes('nodownload')) {\n      if (!controlsList.trim()) {\n        controlsList = 'nodownload';\n      } else {\n        controlsList = controlsList.split(' ').concat('nodownload').join(' ');\n      }\n      element.setAttribute('controlsList', controlsList);\n    }\n    const sources = Array.from(element.querySelectorAll('source'));\n    const tracks = Array.from(element.querySelectorAll('track'));\n    const hasPoster = isVideo && !!element.getAttribute('poster');\n    if (isVideo && !hasPoster) {\n      this.fixVideoSrcPlaceholder(element);\n    }\n    sources.forEach(source => {\n      if (isVideo && !hasPoster) {\n        this.fixVideoSrcPlaceholder(source);\n      }\n      source.setAttribute('target-src', source.getAttribute('src') || '');\n      source.removeAttribute('src');\n      this.addExternalContent(source);\n    });\n    tracks.forEach(track => {\n      this.addExternalContent(track);\n    });\n    // Stop propagating click events.\n    element.addEventListener('click', e => {\n      e.stopPropagation();\n    });\n  }\n  /**\n   * Try to fix the placeholder displayed when a video doesn't have a poster.\n   *\n   * @param element Element to fix.\n   */\n  fixVideoSrcPlaceholder(element) {\n    const src = element.getAttribute('src');\n    if (!src) {\n      return;\n    }\n    if (src.match(/#t=\\d/)) {\n      return;\n    }\n    element.setAttribute('src', src + '#t=0.001');\n  }\n  /**\n   * Add media adapt class and treat the iframe source.\n   *\n   * @param iframe Iframe to treat.\n   * @param site Site instance.\n   */\n  treatIframe(iframe, site) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const src = iframe.src;\n      const currentSite = CoreSites.getCurrentSite();\n      _this8.addMediaAdaptClass(iframe);\n      if (CoreIframeUtils.shouldDisplayHelpForUrl(src)) {\n        _this8.addIframeHelp(iframe);\n      }\n      if (currentSite !== null && currentSite !== void 0 && currentSite.containsUrl(src)) {\n        // URL points to current site, try to use auto-login.\n        // Remove iframe src, otherwise it can cause auto-login issues if there are several iframes with auto-login.\n        iframe.src = '';\n        const finalUrl = yield CoreIframeUtils.getAutoLoginUrlForIframe(iframe, src);\n        yield CoreIframeUtils.fixIframeCookies(finalUrl);\n        iframe.src = finalUrl;\n        CoreIframeUtils.treatFrame(iframe, false);\n        return;\n      }\n      yield CoreIframeUtils.fixIframeCookies(src);\n      if (site && src) {\n        let vimeoUrl = CoreUrl.getVimeoPlayerUrl(src, site);\n        if (vimeoUrl) {\n          var _iframe$parentElement;\n          const domPromise = CoreDom.waitToBeInDOM(iframe);\n          _this8.domPromises.push(domPromise);\n          yield domPromise;\n          // Width and height are mandatory, we need to calculate them.\n          let width;\n          let height;\n          if (iframe.width) {\n            width = iframe.width;\n          } else {\n            width = iframe.getBoundingClientRect().width;\n            if (!width) {\n              width = window.innerWidth;\n            }\n          }\n          if (iframe.height) {\n            height = iframe.height;\n          } else {\n            height = iframe.getBoundingClientRect().height;\n            if (!height) {\n              height = width;\n            }\n          }\n          // Width and height parameters are required in 3.6 and older sites.\n          if (site && !site.isVersionGreaterEqualThan('3.7')) {\n            vimeoUrl += '&width=' + width + '&height=' + height;\n          }\n          yield CoreIframeUtils.fixIframeCookies(vimeoUrl);\n          iframe.src = vimeoUrl;\n          if (!iframe.width) {\n            iframe.width = String(width);\n          }\n          if (!iframe.height) {\n            iframe.height = String(height);\n          }\n          // Do the iframe responsive.\n          if ((_iframe$parentElement = iframe.parentElement) !== null && _iframe$parentElement !== void 0 && _iframe$parentElement.classList.contains('embed-responsive')) {\n            iframe.addEventListener('load', () => {\n              if (iframe.contentDocument) {\n                const css = document.createElement('style');\n                css.setAttribute('type', 'text/css');\n                css.innerHTML = 'iframe {width: 100%;height: 100%;}';\n                iframe.contentDocument.head.appendChild(css);\n              }\n            });\n          }\n        }\n      }\n      CoreIframeUtils.treatFrame(iframe, false);\n    })();\n  }\n  /**\n   * Add iframe help option.\n   *\n   * @param iframe Iframe.\n   */\n  addIframeHelp(iframe) {\n    const helpDiv = document.createElement('div');\n    helpDiv.classList.add('ion-text-center', 'ion-text-wrap');\n    const button = document.createElement('ion-button');\n    button.setAttribute('fill', 'clear');\n    button.setAttribute('aria-haspopup', 'dialog');\n    button.classList.add('core-iframe-help', 'core-button-as-link');\n    button.innerHTML = Translate.instant('core.iframehelp');\n    button.addEventListener('click', () => {\n      CoreIframeUtils.openIframeHelpModal();\n    });\n    helpDiv.appendChild(button);\n    iframe.after(helpDiv);\n  }\n  /**\n   * Convert window.open to window.openWindowSafely inside HTML tags.\n   *\n   * @param text Text to treat.\n   * @returns Treated text.\n   */\n  treatWindowOpen(text) {\n    // Get HTML tags that include window.open. Script tags aren't executed so there's no need to treat them.\n    const matches = text.match(/<[^>]+window\\.open\\([^)]*\\)[^>]*>/g);\n    if (matches) {\n      matches.forEach(match => {\n        // Replace all the window.open inside the tag.\n        const treated = match.replace(/window\\.open\\(/g, 'window.openWindowSafely(');\n        text = text.replace(match, treated);\n      });\n    }\n    return text;\n  }\n}\n_class = CoreFormatTextDirective;\n_class.ɵfac = function CoreFormatTextDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.IonContent, 8), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CORE_REFRESH_CONTEXT, 8));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"core-format-text\"]],\n  viewQuery: function CoreFormatTextDirective_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CoreCollapsibleItemDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.collapsible = _t.first);\n    }\n  },\n  inputs: {\n    text: \"text\",\n    siteId: \"siteId\",\n    component: \"component\",\n    componentId: \"componentId\",\n    adaptImg: \"adaptImg\",\n    clean: \"clean\",\n    singleLine: \"singleLine\",\n    highlight: \"highlight\",\n    filter: \"filter\",\n    contextLevel: \"contextLevel\",\n    contextInstanceId: \"contextInstanceId\",\n    courseId: \"courseId\",\n    wsNotFiltered: \"wsNotFiltered\",\n    captureLinks: \"captureLinks\",\n    openLinksInApp: \"openLinksInApp\",\n    hideIfEmpty: \"hideIfEmpty\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    afterRender: \"afterRender\",\n    onClick: \"onClick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});","map":{"version":3,"names":["ElementRef","EventEmitter","ChangeDetectorRef","CoreSites","CoreDomUtils","CoreIframeUtils","CoreIframeUtilsProvider","CoreTextUtils","CoreUtils","NgZone","Translate","CoreExternalContentDirective","CoreLinkDirective","CoreFilter","CoreFilterDelegate","CoreFilterHelper","CoreSubscriptions","CoreDirectivesRegistry","CoreCollapsibleItemDirective","CoreDom","CoreEvents","CORE_REFRESH_CONTEXT","CorePlatform","MediaElementController","FrameElementController","CoreUrl","CoreIcons","CoreFormatTextDirective","constructor","element","content","viewContainerRef","refreshContext","adaptImg","hideIfEmpty","onClick","elementControllers","emptyText","domPromises","register","nativeElement","classList","add","innerHTML","afterRender","addEventListener","event","elementClicked","siteId","getCurrentSiteId","ngOnChanges","changes","text","filter","contextLevel","contextInstanceId","formatAndRenderContents","disabled","currentValue","forEach","controller","disable","enable","ngOnDestroy","_this$domElementPromi","domElementPromise","cancel","promise","destroy","ready","_this","_asyncToGenerator","contains","Promise","resolve","subscription","subscribe","unsubscribe","addExternalContent","extContent","component","componentId","src","getAttribute","undefined","href","targetSrc","poster","ngAfterViewInit","changeDetectorRef","injector","get","markForCheck","addMediaAdaptClass","adaptImage","img","container","document","createElement","originalWidth","attributes","getNamedItem","forcedWidth","Number","value","isNaN","indexOf","style","width","cssFloat","wrapElement","addMagnifyingGlasses","_this2","imgs","Array","from","querySelectorAll","length","elWidth","getElementWidth","_img$parentNode","closest","imgWidth","naturalWidth","imgSrc","escapeHTML","label","instant","button","setAttribute","iconName","getIconSrc","e","preventDefault","stopPropagation","viewImage","parentNode","appendChild","complete","remove","onload","_this$collapsible","defaultPrevented","observed","emit","collapsible","finishRender","_this3","nextTick","_this4","String","isTrueOrOne","singleLine","trim","result","formatContents","moveChildren","div","options","handleHtml","filters","_this5","site","ignoreErrors","getSite","getId","getSiteHomeId","courseId","clean","highlight","wsNotFiltered","formatted","_this5$contextInstanc","filterResult","getFiltersAndFormatText","formatText","treatWindowOpen","treatHTMLElements","images","anchors","audios","videos","iframes","buttons","icons","elementsWithInlineStyles","stopClicksElements","frames","FRAME_TAGS","join","replace","svgImages","promises","treatAppUrlElements","anchor","_this$captureLinks","dataset","appUrl","linkDir","capture","captureLinks","inApp","openLinksInApp","ngOnInit","externalImages","externalImage","invalid","push","audioControllers","map","audio","treatMedia","videoControllers","video","iframeControllers","iframe","treatIframe","image","querySelector","icon","replaceCSSIcon","el","tagName","frameControllers","frame","treatFrame","handleBootstrapTooltips","allPromises","loaded","once","onLoad","timeoutPromise","all","catch","error","logUnhandledError","_this6","appUrlElements","url","initializeClickableElementA11y","_ref","getCurrentSite","confirmMessage","appUrlConfirm","openInApp","openIn","refreshOnResume","appUrlResumeAction","showConfirm","_unused","openInAppWithAutoLogin","IAB_EXIT","_this6$refreshContext","openInBrowserWithAutoLogin","showBrowserWarning","resume","run","_this6$refreshContext2","_x","apply","arguments","_this7","waitToBeInDOM","getBoundingClientRect","previousDisplay","getComputedStyle","display","parentElement","computedStyle","padding","getComputedStyleMeasure","window","innerWidth","isVideo","controlsList","includes","split","concat","sources","tracks","hasPoster","fixVideoSrcPlaceholder","source","removeAttribute","track","match","_this8","currentSite","shouldDisplayHelpForUrl","addIframeHelp","containsUrl","finalUrl","getAutoLoginUrlForIframe","fixIframeCookies","vimeoUrl","getVimeoPlayerUrl","_iframe$parentElement","domPromise","height","isVersionGreaterEqualThan","contentDocument","css","head","helpDiv","openIframeHelpModal","after","matches","treated","i0","ɵɵdirectiveInject","i1","IonContent","ViewContainerRef","selectors","viewQuery","CoreFormatTextDirective_Query","rf","ctx"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/directives/format-text.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    Directive,\n    ElementRef,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    SimpleChange,\n    Optional,\n    ViewContainerRef,\n    ViewChild,\n    OnDestroy,\n    Inject,\n    ChangeDetectorRef,\n} from '@angular/core';\nimport { IonContent } from '@ionic/angular';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreIframeUtils, CoreIframeUtilsProvider } from '@services/utils/iframe';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSite } from '@classes/sites/site';\nimport { NgZone, Translate } from '@singletons';\nimport { CoreExternalContentDirective } from './external-content';\nimport { CoreLinkDirective } from './link';\nimport { CoreFilter, CoreFilterFilter, CoreFilterFormatTextOptions } from '@features/filter/services/filter';\nimport { CoreFilterDelegate } from '@features/filter/services/filter-delegate';\nimport { CoreFilterHelper } from '@features/filter/services/filter-helper';\nimport { CoreSubscriptions } from '@singletons/subscriptions';\nimport { CoreDirectivesRegistry } from '@singletons/directives-registry';\nimport { CoreCollapsibleItemDirective } from './collapsible-item';\nimport { CoreCancellablePromise } from '@classes/cancellable-promise';\nimport { AsyncDirective } from '@classes/async-directive';\nimport { CoreDom } from '@singletons/dom';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreRefreshContext, CORE_REFRESH_CONTEXT } from '@/core/utils/refresh-context';\nimport { CorePlatform } from '@services/platform';\nimport { ElementController } from '@classes/element-controllers/ElementController';\nimport { MediaElementController } from '@classes/element-controllers/MediaElementController';\nimport { FrameElement, FrameElementController } from '@classes/element-controllers/FrameElementController';\nimport { CoreUrl } from '@singletons/url';\nimport { CoreIcons } from '@singletons/icons';\n\n/**\n * Directive to format text rendered. It renders the HTML and treats all links and media, using CoreLinkDirective\n * and CoreExternalContentDirective. It also applies filters if needed.\n *\n * Please use this directive if your text needs to be filtered or it can contain links or media (images, audio, video).\n *\n * Example usage:\n * <core-format-text [text]=\"myText\" [component]=\"component\" [componentId]=\"componentId\"></core-format-text>\n */\n@Directive({\n    selector: 'core-format-text',\n})\nexport class CoreFormatTextDirective implements OnChanges, OnDestroy, AsyncDirective {\n\n    @ViewChild(CoreCollapsibleItemDirective) collapsible?: CoreCollapsibleItemDirective;\n\n    @Input() text?: string; // The text to format.\n    @Input() siteId?: string; // Site ID to use.\n    @Input() component?: string; // Component for CoreExternalContentDirective.\n    @Input() componentId?: string | number; // Component ID to use in conjunction with the component.\n    @Input() adaptImg?: boolean | string = true; // Whether to adapt images to screen width.\n    @Input() clean?: boolean | string; // Whether all the HTML tags should be removed.\n    @Input() singleLine?: boolean | string; // Whether new lines should be removed (all text in single line). Only if clean=true.\n    @Input() highlight?: string; // Text to highlight.\n    @Input() filter?: boolean | string; // Whether to filter the text. If not defined, true if contextLevel and instanceId are set.\n    @Input() contextLevel?: string; // The context level of the text.\n    @Input() contextInstanceId?: number; // The instance ID related to the context.\n    @Input() courseId?: number; // Course ID the text belongs to. It can be used to improve performance with filters.\n    @Input() wsNotFiltered?: boolean | string; // If true it means the WS didn't filter the text for some reason.\n    @Input() captureLinks?: boolean; // Whether links should tried to be opened inside the app. Defaults to true.\n    @Input() openLinksInApp?: boolean; // Whether links should be opened in InAppBrowser.\n    @Input() hideIfEmpty = false; // If true, the tag will contain nothing if text is empty.\n    @Input() disabled?: boolean; // If disabled, autoplay elements will be disabled.\n\n    @Output() afterRender: EventEmitter<void>; // Called when the data is rendered.\n    @Output() onClick: EventEmitter<void> = new EventEmitter(); // Called when clicked.\n\n    protected element: HTMLElement;\n    protected elementControllers: ElementController[] = [];\n    protected emptyText = '';\n    protected domPromises: CoreCancellablePromise<void>[] = [];\n    protected domElementPromise?: CoreCancellablePromise<void>;\n\n    constructor(\n        element: ElementRef,\n        @Optional() protected content: IonContent,\n        protected viewContainerRef: ViewContainerRef,\n        @Optional() @Inject(CORE_REFRESH_CONTEXT) protected refreshContext?: CoreRefreshContext,\n    ) {\n        CoreDirectivesRegistry.register(element.nativeElement, this);\n\n        this.element = element.nativeElement;\n        this.element.classList.add('core-loading'); // Hide contents until they're treated.\n\n        this.emptyText = this.hideIfEmpty ? '' : '&nbsp;';\n        this.element.innerHTML = this.emptyText;\n\n        this.afterRender = new EventEmitter<void>();\n\n        this.element.addEventListener('click', (event) => this.elementClicked(event));\n\n        this.siteId = this.siteId || CoreSites.getCurrentSiteId();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnChanges(changes: { [name: string]: SimpleChange }): void {\n        if (changes.text || changes.filter || changes.contextLevel || changes.contextInstanceId) {\n            this.formatAndRenderContents();\n\n            return;\n        }\n\n        if ('disabled' in changes) {\n            const disabled = changes['disabled'].currentValue;\n\n            this.elementControllers.forEach(controller => disabled ? controller.disable() : controller.enable());\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.domElementPromise?.cancel();\n        this.domPromises.forEach((promise) => { promise.cancel();});\n        this.elementControllers.forEach(controller => controller.destroy());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ready(): Promise<void> {\n        if (!this.element.classList.contains('core-loading')) {\n            return;\n        }\n\n        await new Promise<void>(resolve => {\n            const subscription = this.afterRender.subscribe(() => {\n                subscription.unsubscribe();\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Apply CoreExternalContentDirective to a certain element.\n     *\n     * @param element Element to add the attributes to.\n     * @returns External content instance or undefined if siteId is not provided.\n     */\n    protected addExternalContent(element: Element): CoreExternalContentDirective | undefined {\n        if (!this.siteId) {\n            return;\n        }\n\n        // Angular doesn't let adding directives dynamically. Create the CoreExternalContentDirective manually.\n        const extContent = new CoreExternalContentDirective(new ElementRef(element));\n\n        extContent.component = this.component;\n        extContent.componentId = this.componentId;\n        extContent.siteId = this.siteId;\n        extContent.src = element.getAttribute('src') || undefined;\n        extContent.href = element.getAttribute('href') || element.getAttribute('xlink:href') || undefined;\n        extContent.targetSrc = element.getAttribute('target-src') || undefined;\n        extContent.poster = element.getAttribute('poster') || undefined;\n\n        extContent.ngAfterViewInit();\n\n        const changeDetectorRef = this.viewContainerRef.injector.get(ChangeDetectorRef);\n        changeDetectorRef.markForCheck();\n\n        return extContent;\n    }\n\n    /**\n     * Add class to adapt media to a certain element.\n     *\n     * @param element Element to add the class to.\n     */\n    protected addMediaAdaptClass(element: HTMLElement): void {\n        element.classList.add('core-media-adapt-width');\n    }\n\n    /**\n     * Wrap an image with a container to adapt its width.\n     *\n     * @param img Image to adapt.\n     */\n    protected adaptImage(img: HTMLElement): void {\n        // Element to wrap the image.\n        const container = document.createElement('span');\n        const originalWidth = img.attributes.getNamedItem('width');\n\n        const forcedWidth = Number(originalWidth?.value);\n        if (originalWidth && !isNaN(forcedWidth)) {\n            if (originalWidth.value.indexOf('%') < 0) {\n                img.style.width = forcedWidth + 'px';\n            } else {\n                img.style.width = forcedWidth + '%';\n            }\n        }\n\n        container.classList.add('core-adapted-img-container');\n        container.style.cssFloat = img.style.cssFloat; // Copy the float to correctly position the search icon.\n        if (img.classList.contains('atto_image_button_right')) {\n            container.classList.add('atto_image_button_right');\n        } else if (img.classList.contains('atto_image_button_left')) {\n            container.classList.add('atto_image_button_left');\n        } else if (img.classList.contains('atto_image_button_text-top')) {\n            container.classList.add('atto_image_button_text-top');\n        } else if (img.classList.contains('atto_image_button_middle')) {\n            container.classList.add('atto_image_button_middle');\n        } else if (img.classList.contains('atto_image_button_text-bottom')) {\n            container.classList.add('atto_image_button_text-bottom');\n        }\n\n        CoreDomUtils.wrapElement(img, container);\n    }\n\n    /**\n     * Add magnifying glass icons to view adapted images at full size.\n     */\n    async addMagnifyingGlasses(): Promise<void> {\n        const imgs = Array.from(this.element.querySelectorAll('.core-adapted-img-container > img'));\n        if (!imgs.length) {\n            return;\n        }\n\n        // If cannot calculate element's width, use viewport width to avoid false adapt image icons appearing.\n        const elWidth = await this.getElementWidth();\n\n        imgs.forEach((img: HTMLImageElement) => {\n            // Skip image if it's inside a link.\n            if (img.closest('a')) {\n                return;\n            }\n\n            let imgWidth = Number(img.getAttribute('width'));\n            if (!imgWidth) {\n                // No width attribute, use real size.\n                imgWidth = img.naturalWidth;\n            }\n\n            if (imgWidth <= elWidth) {\n                return;\n            }\n\n            const imgSrc = CoreTextUtils.escapeHTML(img.getAttribute('data-original-src') || img.getAttribute('src'));\n            const label = Translate.instant('core.openfullimage');\n            const button = document.createElement('button');\n\n            button.classList.add('core-image-viewer-icon');\n            button.classList.add('hidden');\n            button.setAttribute('aria-label', label);\n            const iconName = 'up-right-and-down-left-from-center';\n            const src = CoreIcons.getIconSrc('font-awesome', 'solid', iconName);\n            // Add an ion-icon item to apply the right styles, but the ion-icon component won't be executed.\n            button.innerHTML = `<ion-icon name=\"fas-${iconName}\" aria-hidden=\"true\" src=\"${src}\"></ion-icon>`;\n\n            button.addEventListener('click', (e: Event) => {\n                e.preventDefault();\n                e.stopPropagation();\n                CoreDomUtils.viewImage(imgSrc, img.getAttribute('alt'), this.component, this.componentId);\n            });\n\n            img.parentNode?.appendChild(button);\n\n            if (img.complete && img.naturalWidth > 0) {\n                // Image has already loaded, show the button.\n                button.classList.remove('hidden');\n            } else {\n                // Show the button when the image is loaded.\n                img.onload = () => button.classList.remove('hidden');\n            }\n        });\n    }\n\n    /**\n     * Listener to call when the element is clicked.\n     *\n     * @param e Click event.\n     */\n    protected elementClicked(e: MouseEvent): void {\n        if (e.defaultPrevented) {\n            // Ignore it if the event was prevented by some other listener.\n            return;\n        }\n\n        if (this.onClick.observed) {\n            this.onClick.emit();\n\n            return;\n        }\n\n        if (!this.text) {\n            return;\n        }\n\n        this.collapsible?.elementClicked(e);\n    }\n\n    /**\n     * Finish the rendering, displaying the element again and calling afterRender.\n     */\n    protected async finishRender(): Promise<void> {\n        // Show the element again.\n        this.element.classList.remove('core-loading');\n\n        await CoreUtils.nextTick();\n\n        // Emit the afterRender output.\n        this.afterRender.emit();\n    }\n\n    /**\n     * Format contents and render.\n     */\n    protected async formatAndRenderContents(): Promise<void> {\n        if (!this.text) {\n            this.element.innerHTML = this.emptyText; // Remove current contents.\n\n            await this.finishRender();\n\n            return;\n        }\n\n        if (!this.element.getAttribute('singleLine')) {\n            this.element.setAttribute('singleLine', String(CoreUtils.isTrueOrOne(this.singleLine)));\n        }\n\n        this.text = this.text ? this.text.trim() : '';\n\n        const result = await this.formatContents();\n\n        // Disable media adapt to correctly calculate the height.\n        this.element.classList.add('core-disable-media-adapt');\n\n        this.element.innerHTML = ''; // Remove current contents.\n\n        // Move the children to the current element to be able to calculate the height.\n        CoreDomUtils.moveChildren(result.div, this.element);\n\n        this.elementControllers.forEach(controller => controller.destroy());\n        this.elementControllers = result.elementControllers;\n\n        await CoreUtils.nextTick();\n\n        // Add magnifying glasses to images.\n        this.addMagnifyingGlasses();\n\n        if (result.options.filter) {\n            // Let filters handle HTML. We do it here because we don't want them to block the render of the text.\n            CoreFilterDelegate.handleHtml(\n                this.element,\n                result.filters,\n                this.viewContainerRef,\n                result.options,\n                [],\n                this.component,\n                this.componentId,\n                result.siteId,\n            );\n        }\n\n        this.element.classList.remove('core-disable-media-adapt');\n        await this.finishRender();\n    }\n\n    /**\n     * Apply formatText and set sub-directives.\n     *\n     * @returns Promise resolved with a div element containing the code.\n     */\n    protected async formatContents(): Promise<FormatContentsResult> {\n        // Retrieve the site since it might be needed later.\n        const site = await CoreUtils.ignoreErrors(CoreSites.getSite(this.siteId));\n\n        const siteId = site?.getId();\n\n        if (site && this.contextLevel == 'course' && this.contextInstanceId !== undefined && this.contextInstanceId <= 0) {\n            this.contextInstanceId = site.getSiteHomeId();\n        }\n\n        if (this.contextLevel === 'course' && this.contextInstanceId === undefined && this.courseId !== undefined) {\n            this.contextInstanceId = this.courseId;\n        }\n\n        const filter = this.filter === undefined ?\n            !!(this.contextLevel && this.contextInstanceId !== undefined) : CoreUtils.isTrueOrOne(this.filter);\n\n        const options: CoreFilterFormatTextOptions = {\n            clean: CoreUtils.isTrueOrOne(this.clean),\n            singleLine: CoreUtils.isTrueOrOne(this.singleLine),\n            highlight: this.highlight,\n            courseId: this.courseId,\n            wsNotFiltered: CoreUtils.isTrueOrOne(this.wsNotFiltered),\n        };\n\n        let formatted: string;\n        let filters: CoreFilterFilter[] = [];\n\n        if (filter) {\n            const filterResult = await CoreFilterHelper.getFiltersAndFormatText(\n                this.text || '',\n                this.contextLevel || '',\n                this.contextInstanceId ?? -1,\n                options,\n                siteId,\n            );\n\n            filters = filterResult.filters;\n            formatted = filterResult.text;\n        } else {\n            formatted = await CoreFilter.formatText(this.text || '', options, [], siteId);\n        }\n\n        formatted = this.treatWindowOpen(formatted);\n\n        const div = document.createElement('div');\n\n        div.innerHTML = formatted;\n\n        const elementControllers = this.treatHTMLElements(div, site);\n\n        return {\n            div,\n            filters,\n            options,\n            siteId,\n            elementControllers,\n        };\n    }\n\n    /**\n     * Treat HTML elements when formatting contents.\n     *\n     * @param div Div element.\n     * @param site Site instance.\n     * @returns Promise resolved when done.\n     */\n    protected treatHTMLElements(div: HTMLElement, site?: CoreSite): ElementController[] {\n        const images = Array.from(div.querySelectorAll('img'));\n        const anchors = Array.from(div.querySelectorAll('a'));\n        const audios = Array.from(div.querySelectorAll('audio'));\n        const videos = Array.from(div.querySelectorAll('video'));\n        const iframes = Array.from(div.querySelectorAll('iframe'));\n        const buttons = Array.from(div.querySelectorAll<HTMLElement>('.button'));\n        const icons = Array.from(div.querySelectorAll('i.fa,i.fas,i.far,i.fab'));\n        const elementsWithInlineStyles = Array.from(div.querySelectorAll<HTMLElement>('*[style]'));\n        const stopClicksElements = Array.from(div.querySelectorAll<HTMLElement>('button,input,select,textarea'));\n        const frames = Array.from(\n            div.querySelectorAll<FrameElement>(CoreIframeUtilsProvider.FRAME_TAGS.join(',').replace(/iframe,?/, '')),\n        );\n        const svgImages = Array.from(div.querySelectorAll('image'));\n        const promises: Promise<void>[] = [];\n\n        this.treatAppUrlElements(div, site);\n\n        // Walk through the content to find the links and add our directive to it.\n        // Important: We need to look for links first because in 'img' we add new links without core-link.\n        anchors.forEach((anchor) => {\n            if (anchor.dataset.appUrl) {\n                // Link already treated in treatAppUrlElements, ignore it.\n                return;\n            }\n\n            // Angular 2 doesn't let adding directives dynamically. Create the CoreLinkDirective manually.\n            const linkDir = new CoreLinkDirective(new ElementRef(anchor), this.content);\n            linkDir.capture = this.captureLinks ?? true;\n            linkDir.inApp = this.openLinksInApp;\n            linkDir.ngOnInit();\n\n            this.addExternalContent(anchor);\n        });\n\n        const externalImages: CoreExternalContentDirective[] = [];\n        if (images && images.length > 0) {\n            // Walk through the content to find images, and add our directive.\n            images.forEach((img: HTMLElement) => {\n                this.addMediaAdaptClass(img);\n\n                const externalImage = this.addExternalContent(img);\n                if (externalImage && !externalImage.invalid) {\n                    externalImages.push(externalImage);\n                }\n\n                if (CoreUtils.isTrueOrOne(this.adaptImg) && !img.classList.contains('icon')) {\n                    this.adaptImage(img);\n                }\n            });\n        }\n\n        const audioControllers = audios.map(audio => {\n            this.treatMedia(audio);\n\n            return new MediaElementController(audio, !this.disabled);\n        });\n\n        const videoControllers = videos.map(video => {\n            this.treatMedia(video, true);\n\n            return new MediaElementController(video, !this.disabled);\n        });\n\n        const iframeControllers = iframes.map(iframe => {\n            promises.push(this.treatIframe(iframe, site));\n\n            return new FrameElementController(iframe, !this.disabled);\n        });\n\n        svgImages.forEach((image) => {\n            this.addExternalContent(image);\n        });\n\n        // Handle buttons with inner links.\n        buttons.forEach((button: HTMLElement) => {\n            // Check if it has a link inside.\n            if (button.querySelector('a')) {\n                button.classList.add('core-button-with-inner-link');\n            }\n        });\n\n        // Handle Font Awesome icons to be rendered by the app.\n        icons.forEach((icon) => {\n            CoreIcons.replaceCSSIcon(icon);\n        });\n\n        // Handle inline styles.\n        elementsWithInlineStyles.forEach((el: HTMLElement) => {\n            // Only add external content for tags that haven't been treated already.\n            if (el.tagName != 'A' && el.tagName != 'IMG' && el.tagName != 'AUDIO' && el.tagName != 'VIDEO'\n                    && el.tagName != 'SOURCE' && el.tagName != 'TRACK') {\n                this.addExternalContent(el);\n            }\n        });\n\n        // Stop propagating click events.\n        stopClicksElements.forEach((element: HTMLElement) => {\n            element.addEventListener('click', (e) => {\n                e.stopPropagation();\n            });\n        });\n\n        // Handle all kind of frames.\n        const frameControllers = frames.map<FrameElementController>((frame) => {\n            CoreIframeUtils.treatFrame(frame, false);\n\n            return new FrameElementController(frame, !this.disabled);\n        });\n\n        CoreDomUtils.handleBootstrapTooltips(div);\n\n        if (externalImages.length) {\n            // Wait for images to load.\n            const promise = CoreUtils.allPromises(externalImages.map((externalImage) => {\n                if (externalImage.loaded) {\n                    // Image has already been loaded, no need to wait.\n                    return Promise.resolve();\n                }\n\n                return new Promise(resolve => CoreSubscriptions.once(externalImage.onLoad, resolve));\n            }));\n\n            // Automatically reject the promise after 5 seconds to prevent blocking the user forever.\n            promises.push(CoreUtils.ignoreErrors(CoreUtils.timeoutPromise(promise, 5000)));\n        }\n\n        // Run asynchronous operations in the background to avoid blocking rendering.\n        Promise.all(promises).catch(error => CoreUtils.logUnhandledError('Error treating format-text elements', error));\n\n        return [\n            ...videoControllers,\n            ...audioControllers,\n            ...iframeControllers,\n            ...frameControllers,\n        ];\n    }\n\n    /**\n     * Treat elements with an app-url data attribute.\n     *\n     * @param div Div containing the elements.\n     * @param site Site.\n     */\n    protected treatAppUrlElements(div: HTMLElement, site?: CoreSite): void {\n        const appUrlElements = Array.from(div.querySelectorAll<HTMLElement>('*[data-app-url]'));\n\n        appUrlElements.forEach((element) => {\n            const url = element.dataset.appUrl;\n            if (!url) {\n                return;\n            }\n\n            CoreDom.initializeClickableElementA11y(element, async (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                site = site || CoreSites.getCurrentSite();\n                if (!site) {\n                    return;\n                }\n\n                const confirmMessage = element.dataset.appUrlConfirm;\n                const openInApp = element.dataset.openIn === 'app';\n                const refreshOnResume = element.dataset.appUrlResumeAction === 'refresh';\n\n                if (confirmMessage) {\n                    try {\n                        await CoreDomUtils.showConfirm(Translate.instant(confirmMessage));\n                    } catch {\n                        return;\n                    }\n                }\n\n                if (openInApp) {\n                    site.openInAppWithAutoLogin(url);\n\n                    if (refreshOnResume && this.refreshContext) {\n                        // Refresh the context when the IAB is closed.\n                        CoreEvents.once(CoreEvents.IAB_EXIT, () => {\n                            this.refreshContext?.refreshContext();\n                        });\n                    }\n                } else {\n                    site.openInBrowserWithAutoLogin(url, undefined, {\n                        showBrowserWarning: !confirmMessage,\n                    });\n\n                    if (refreshOnResume && this.refreshContext) {\n                        // Refresh the context when the app is resumed.\n                        CoreSubscriptions.once(CorePlatform.resume, () => {\n                            NgZone.run(async () => {\n                                this.refreshContext?.refreshContext();\n                            });\n                        });\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * Returns the element width in pixels.\n     *\n     * @returns The width of the element in pixels.\n     */\n    protected async getElementWidth(): Promise<number> {\n        if (!this.domElementPromise) {\n            this.domElementPromise = CoreDom.waitToBeInDOM(this.element);\n        }\n        await this.domElementPromise;\n\n        let width = this.element.getBoundingClientRect().width;\n        if (!width) {\n            // All elements inside are floating or inline. Change display mode to allow calculate the width.\n            const previousDisplay = getComputedStyle(this.element).display;\n\n            this.element.style.display = 'inline-block';\n            await CoreUtils.nextTick();\n\n            width = this.element.getBoundingClientRect().width;\n\n            this.element.style.display = previousDisplay;\n        }\n\n        // Aproximate using parent elements.\n        let element = this.element;\n        while (!width && element.parentElement) {\n            element = element.parentElement;\n            const computedStyle = getComputedStyle(element);\n\n            const padding = CoreDomUtils.getComputedStyleMeasure(computedStyle, 'paddingLeft') +\n                    CoreDomUtils.getComputedStyleMeasure(computedStyle, 'paddingRight');\n\n            // Use parent width as an aproximation.\n            width = element.getBoundingClientRect().width - padding;\n        }\n\n        return width > 0 && width < window.innerWidth\n            ? width\n            : window.innerWidth;\n    }\n\n    /**\n     * Add media adapt class and apply CoreExternalContentDirective to the media element and its sources and tracks.\n     *\n     * @param element Video or audio to treat.\n     * @param isVideo Whether it's a video.\n     */\n    protected treatMedia(element: HTMLElement, isVideo: boolean = false): void {\n        this.addMediaAdaptClass(element);\n        this.addExternalContent(element);\n\n        // Hide download button if not hidden already.\n        let controlsList = element.getAttribute('controlsList') || '';\n        if (!controlsList.includes('nodownload')) {\n            if (!controlsList.trim()) {\n                controlsList = 'nodownload';\n            } else {\n                controlsList = controlsList.split(' ').concat('nodownload').join(' ');\n            }\n\n            element.setAttribute('controlsList', controlsList);\n        }\n\n        const sources = Array.from(element.querySelectorAll('source'));\n        const tracks = Array.from(element.querySelectorAll('track'));\n        const hasPoster = isVideo && !!element.getAttribute('poster');\n\n        if (isVideo && !hasPoster) {\n            this.fixVideoSrcPlaceholder(element);\n        }\n\n        sources.forEach((source) => {\n            if (isVideo && !hasPoster) {\n                this.fixVideoSrcPlaceholder(source);\n            }\n            source.setAttribute('target-src', source.getAttribute('src') || '');\n            source.removeAttribute('src');\n            this.addExternalContent(source);\n        });\n\n        tracks.forEach((track) => {\n            this.addExternalContent(track);\n        });\n\n        // Stop propagating click events.\n        element.addEventListener('click', (e) => {\n            e.stopPropagation();\n        });\n    }\n\n    /**\n     * Try to fix the placeholder displayed when a video doesn't have a poster.\n     *\n     * @param element Element to fix.\n     */\n    protected fixVideoSrcPlaceholder(element: HTMLElement): void {\n        const src = element.getAttribute('src');\n        if (!src) {\n            return;\n        }\n\n        if (src.match(/#t=\\d/)) {\n            return;\n        }\n\n        element.setAttribute('src', src + '#t=0.001');\n    }\n\n    /**\n     * Add media adapt class and treat the iframe source.\n     *\n     * @param iframe Iframe to treat.\n     * @param site Site instance.\n     */\n    protected async treatIframe(iframe: HTMLIFrameElement, site: CoreSite | undefined): Promise<void> {\n        const src = iframe.src;\n        const currentSite = CoreSites.getCurrentSite();\n\n        this.addMediaAdaptClass(iframe);\n\n        if (CoreIframeUtils.shouldDisplayHelpForUrl(src)) {\n            this.addIframeHelp(iframe);\n        }\n\n        if (currentSite?.containsUrl(src)) {\n            // URL points to current site, try to use auto-login.\n            // Remove iframe src, otherwise it can cause auto-login issues if there are several iframes with auto-login.\n            iframe.src = '';\n\n            const finalUrl = await CoreIframeUtils.getAutoLoginUrlForIframe(iframe, src);\n            await CoreIframeUtils.fixIframeCookies(finalUrl);\n\n            iframe.src = finalUrl;\n            CoreIframeUtils.treatFrame(iframe, false);\n\n            return;\n        }\n\n        await CoreIframeUtils.fixIframeCookies(src);\n\n        if (site && src) {\n            let vimeoUrl = CoreUrl.getVimeoPlayerUrl(src, site);\n            if (vimeoUrl) {\n                const domPromise = CoreDom.waitToBeInDOM(iframe);\n                this.domPromises.push(domPromise);\n\n                await domPromise;\n\n                // Width and height are mandatory, we need to calculate them.\n                let width: string | number;\n                let height: string | number;\n\n                if (iframe.width) {\n                    width = iframe.width;\n                } else {\n                    width = iframe.getBoundingClientRect().width;\n                    if (!width) {\n                        width = window.innerWidth;\n                    }\n                }\n\n                if (iframe.height) {\n                    height = iframe.height;\n                } else {\n                    height = iframe.getBoundingClientRect().height;\n                    if (!height) {\n                        height = width;\n                    }\n                }\n\n                // Width and height parameters are required in 3.6 and older sites.\n                if (site && !site.isVersionGreaterEqualThan('3.7')) {\n                    vimeoUrl += '&width=' + width + '&height=' + height;\n                }\n\n                await CoreIframeUtils.fixIframeCookies(vimeoUrl);\n\n                iframe.src = vimeoUrl;\n\n                if (!iframe.width) {\n                    iframe.width = String(width);\n                }\n                if (!iframe.height) {\n                    iframe.height = String(height);\n                }\n\n                // Do the iframe responsive.\n                if (iframe.parentElement?.classList.contains('embed-responsive')) {\n                    iframe.addEventListener('load', () => {\n                        if (iframe.contentDocument) {\n                            const css = document.createElement('style');\n                            css.setAttribute('type', 'text/css');\n                            css.innerHTML = 'iframe {width: 100%;height: 100%;}';\n                            iframe.contentDocument.head.appendChild(css);\n                        }\n                    });\n                }\n            }\n        }\n\n        CoreIframeUtils.treatFrame(iframe, false);\n    }\n\n    /**\n     * Add iframe help option.\n     *\n     * @param iframe Iframe.\n     */\n    protected addIframeHelp(iframe: HTMLIFrameElement): void {\n        const helpDiv = document.createElement('div');\n\n        helpDiv.classList.add('ion-text-center', 'ion-text-wrap');\n\n        const button = document.createElement('ion-button');\n        button.setAttribute('fill', 'clear');\n        button.setAttribute('aria-haspopup', 'dialog');\n        button.classList.add('core-iframe-help', 'core-button-as-link');\n        button.innerHTML = Translate.instant('core.iframehelp');\n\n        button.addEventListener('click', () => {\n            CoreIframeUtils.openIframeHelpModal();\n        });\n\n        helpDiv.appendChild(button);\n\n        iframe.after(helpDiv);\n    }\n\n    /**\n     * Convert window.open to window.openWindowSafely inside HTML tags.\n     *\n     * @param text Text to treat.\n     * @returns Treated text.\n     */\n    protected treatWindowOpen(text: string): string {\n        // Get HTML tags that include window.open. Script tags aren't executed so there's no need to treat them.\n        const matches = text.match(/<[^>]+window\\.open\\([^)]*\\)[^>]*>/g);\n\n        if (matches) {\n            matches.forEach((match) => {\n                // Replace all the window.open inside the tag.\n                const treated = match.replace(/window\\.open\\(/g, 'window.openWindowSafely(');\n\n                text = text.replace(match, treated);\n            });\n        }\n\n        return text;\n    }\n\n}\n\ntype FormatContentsResult = {\n    div: HTMLElement;\n    filters: CoreFilterFilter[];\n    elementControllers: ElementController[];\n    options: CoreFilterFormatTextOptions;\n    siteId?: string;\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAEIA,UAAU,EAGVC,YAAY,EAQZC,iBAAiB,QACd,eAAe;AAGtB,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,eAAe,EAAEC,uBAAuB,QAAQ,wBAAwB;AACjF,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,MAAM,EAAEC,SAAS,QAAQ,aAAa;AAC/C,SAASC,4BAA4B,QAAQ,oBAAoB;AACjE,SAASC,iBAAiB,QAAQ,QAAQ;AAC1C,SAASC,UAAU,QAAuD,kCAAkC;AAC5G,SAASC,kBAAkB,QAAQ,2CAA2C;AAC9E,SAASC,gBAAgB,QAAQ,yCAAyC;AAC1E,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,SAASC,sBAAsB,QAAQ,iCAAiC;AACxE,SAASC,4BAA4B,QAAQ,oBAAoB;AAGjE,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAA6BC,oBAAoB,QAAQ,8BAA8B;AACvF,SAASC,YAAY,QAAQ,oBAAoB;AAEjD,SAASC,sBAAsB,QAAQ,qDAAqD;AAC5F,SAAuBC,sBAAsB,QAAQ,qDAAqD;AAC1G,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,SAAS,QAAQ,mBAAmB;;;AAE7C;;;;;;;;;AAYA,OAAM,MAAOC,uBAAuB;EA+BhCC,YACIC,OAAmB,EACGC,OAAmB,EAC/BC,gBAAkC,EACQC,cAAmC;IAFjE,KAAAF,OAAO,GAAPA,OAAO;IACnB,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAC0B,KAAAC,cAAc,GAAdA,cAAc;IA3B7D,KAAAC,QAAQ,GAAsB,IAAI,CAAC,CAAC;IAWpC,KAAAC,WAAW,GAAG,KAAK,CAAC,CAAC;IAIpB,KAAAC,OAAO,GAAuB,IAAIlC,YAAY,EAAE,CAAC,CAAC;IAGlD,KAAAmC,kBAAkB,GAAwB,EAAE;IAC5C,KAAAC,SAAS,GAAG,EAAE;IACd,KAAAC,WAAW,GAAmC,EAAE;IAStDrB,sBAAsB,CAACsB,QAAQ,CAACV,OAAO,CAACW,aAAa,EAAE,IAAI,CAAC;IAE5D,IAAI,CAACX,OAAO,GAAGA,OAAO,CAACW,aAAa;IACpC,IAAI,CAACX,OAAO,CAACY,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;IAE5C,IAAI,CAACL,SAAS,GAAG,IAAI,CAACH,WAAW,GAAG,EAAE,GAAG,QAAQ;IACjD,IAAI,CAACL,OAAO,CAACc,SAAS,GAAG,IAAI,CAACN,SAAS;IAEvC,IAAI,CAACO,WAAW,GAAG,IAAI3C,YAAY,EAAQ;IAE3C,IAAI,CAAC4B,OAAO,CAACgB,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,CAAC;IAE7E,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,IAAI7C,SAAS,CAAC8C,gBAAgB,EAAE;EAC7D;EAEA;;;EAGAC,WAAWA,CAACC,OAAyC;IACjD,IAAIA,OAAO,CAACC,IAAI,IAAID,OAAO,CAACE,MAAM,IAAIF,OAAO,CAACG,YAAY,IAAIH,OAAO,CAACI,iBAAiB,EAAE;MACrF,IAAI,CAACC,uBAAuB,EAAE;MAE9B;;IAGJ,IAAI,UAAU,IAAIL,OAAO,EAAE;MACvB,MAAMM,QAAQ,GAAGN,OAAO,CAAC,UAAU,CAAC,CAACO,YAAY;MAEjD,IAAI,CAACtB,kBAAkB,CAACuB,OAAO,CAACC,UAAU,IAAIH,QAAQ,GAAGG,UAAU,CAACC,OAAO,EAAE,GAAGD,UAAU,CAACE,MAAM,EAAE,CAAC;;EAE5G;EAEA;;;EAGAC,WAAWA,CAAA;IAAA,IAAAC,qBAAA;IACP,CAAAA,qBAAA,OAAI,CAACC,iBAAiB,cAAAD,qBAAA,eAAtBA,qBAAA,CAAwBE,MAAM,EAAE;IAChC,IAAI,CAAC5B,WAAW,CAACqB,OAAO,CAAEQ,OAAO,IAAI;MAAGA,OAAO,CAACD,MAAM,EAAE;IAAC,CAAC,CAAC;IAC3D,IAAI,CAAC9B,kBAAkB,CAACuB,OAAO,CAACC,UAAU,IAAIA,UAAU,CAACQ,OAAO,EAAE,CAAC;EACvE;EAEA;;;EAGMC,KAAKA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACP,IAAI,CAACD,KAAI,CAACzC,OAAO,CAACY,SAAS,CAAC+B,QAAQ,CAAC,cAAc,CAAC,EAAE;QAClD;;MAGJ,MAAM,IAAIC,OAAO,CAAOC,OAAO,IAAG;QAC9B,MAAMC,YAAY,GAAGL,KAAI,CAAC1B,WAAW,CAACgC,SAAS,CAAC,MAAK;UACjDD,YAAY,CAACE,WAAW,EAAE;UAC1BH,OAAO,EAAE;QACb,CAAC,CAAC;MACN,CAAC,CAAC;IAAC;EACP;EAEA;;;;;;EAMUI,kBAAkBA,CAACjD,OAAgB;IACzC,IAAI,CAAC,IAAI,CAACmB,MAAM,EAAE;MACd;;IAGJ;IACA,MAAM+B,UAAU,GAAG,IAAIpE,4BAA4B,CAAC,IAAIX,UAAU,CAAC6B,OAAO,CAAC,CAAC;IAE5EkD,UAAU,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS;IACrCD,UAAU,CAACE,WAAW,GAAG,IAAI,CAACA,WAAW;IACzCF,UAAU,CAAC/B,MAAM,GAAG,IAAI,CAACA,MAAM;IAC/B+B,UAAU,CAACG,GAAG,GAAGrD,OAAO,CAACsD,YAAY,CAAC,KAAK,CAAC,IAAIC,SAAS;IACzDL,UAAU,CAACM,IAAI,GAAGxD,OAAO,CAACsD,YAAY,CAAC,MAAM,CAAC,IAAItD,OAAO,CAACsD,YAAY,CAAC,YAAY,CAAC,IAAIC,SAAS;IACjGL,UAAU,CAACO,SAAS,GAAGzD,OAAO,CAACsD,YAAY,CAAC,YAAY,CAAC,IAAIC,SAAS;IACtEL,UAAU,CAACQ,MAAM,GAAG1D,OAAO,CAACsD,YAAY,CAAC,QAAQ,CAAC,IAAIC,SAAS;IAE/DL,UAAU,CAACS,eAAe,EAAE;IAE5B,MAAMC,iBAAiB,GAAG,IAAI,CAAC1D,gBAAgB,CAAC2D,QAAQ,CAACC,GAAG,CAACzF,iBAAiB,CAAC;IAC/EuF,iBAAiB,CAACG,YAAY,EAAE;IAEhC,OAAOb,UAAU;EACrB;EAEA;;;;;EAKUc,kBAAkBA,CAAChE,OAAoB;IAC7CA,OAAO,CAACY,SAAS,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACnD;EAEA;;;;;EAKUoD,UAAUA,CAACC,GAAgB;IACjC;IACA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IAChD,MAAMC,aAAa,GAAGJ,GAAG,CAACK,UAAU,CAACC,YAAY,CAAC,OAAO,CAAC;IAE1D,MAAMC,WAAW,GAAGC,MAAM,CAACJ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEK,KAAK,CAAC;IAChD,IAAIL,aAAa,IAAI,CAACM,KAAK,CAACH,WAAW,CAAC,EAAE;MACtC,IAAIH,aAAa,CAACK,KAAK,CAACE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACtCX,GAAG,CAACY,KAAK,CAACC,KAAK,GAAGN,WAAW,GAAG,IAAI;OACvC,MAAM;QACHP,GAAG,CAACY,KAAK,CAACC,KAAK,GAAGN,WAAW,GAAG,GAAG;;;IAI3CN,SAAS,CAACvD,SAAS,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACrDsD,SAAS,CAACW,KAAK,CAACE,QAAQ,GAAGd,GAAG,CAACY,KAAK,CAACE,QAAQ,CAAC,CAAC;IAC/C,IAAId,GAAG,CAACtD,SAAS,CAAC+B,QAAQ,CAAC,yBAAyB,CAAC,EAAE;MACnDwB,SAAS,CAACvD,SAAS,CAACC,GAAG,CAAC,yBAAyB,CAAC;KACrD,MAAM,IAAIqD,GAAG,CAACtD,SAAS,CAAC+B,QAAQ,CAAC,wBAAwB,CAAC,EAAE;MACzDwB,SAAS,CAACvD,SAAS,CAACC,GAAG,CAAC,wBAAwB,CAAC;KACpD,MAAM,IAAIqD,GAAG,CAACtD,SAAS,CAAC+B,QAAQ,CAAC,4BAA4B,CAAC,EAAE;MAC7DwB,SAAS,CAACvD,SAAS,CAACC,GAAG,CAAC,4BAA4B,CAAC;KACxD,MAAM,IAAIqD,GAAG,CAACtD,SAAS,CAAC+B,QAAQ,CAAC,0BAA0B,CAAC,EAAE;MAC3DwB,SAAS,CAACvD,SAAS,CAACC,GAAG,CAAC,0BAA0B,CAAC;KACtD,MAAM,IAAIqD,GAAG,CAACtD,SAAS,CAAC+B,QAAQ,CAAC,+BAA+B,CAAC,EAAE;MAChEwB,SAAS,CAACvD,SAAS,CAACC,GAAG,CAAC,+BAA+B,CAAC;;IAG5DtC,YAAY,CAAC0G,WAAW,CAACf,GAAG,EAAEC,SAAS,CAAC;EAC5C;EAEA;;;EAGMe,oBAAoBA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAzC,iBAAA;MACtB,MAAM0C,IAAI,GAAGC,KAAK,CAACC,IAAI,CAACH,MAAI,CAACnF,OAAO,CAACuF,gBAAgB,CAAC,mCAAmC,CAAC,CAAC;MAC3F,IAAI,CAACH,IAAI,CAACI,MAAM,EAAE;QACd;;MAGJ;MACA,MAAMC,OAAO,SAASN,MAAI,CAACO,eAAe,EAAE;MAE5CN,IAAI,CAACtD,OAAO,CAAEoC,GAAqB,IAAI;QAAA,IAAAyB,eAAA;QACnC;QACA,IAAIzB,GAAG,CAAC0B,OAAO,CAAC,GAAG,CAAC,EAAE;UAClB;;QAGJ,IAAIC,QAAQ,GAAGnB,MAAM,CAACR,GAAG,CAACZ,YAAY,CAAC,OAAO,CAAC,CAAC;QAChD,IAAI,CAACuC,QAAQ,EAAE;UACX;UACAA,QAAQ,GAAG3B,GAAG,CAAC4B,YAAY;;QAG/B,IAAID,QAAQ,IAAIJ,OAAO,EAAE;UACrB;;QAGJ,MAAMM,MAAM,GAAGrH,aAAa,CAACsH,UAAU,CAAC9B,GAAG,CAACZ,YAAY,CAAC,mBAAmB,CAAC,IAAIY,GAAG,CAACZ,YAAY,CAAC,KAAK,CAAC,CAAC;QACzG,MAAM2C,KAAK,GAAGpH,SAAS,CAACqH,OAAO,CAAC,oBAAoB,CAAC;QACrD,MAAMC,MAAM,GAAG/B,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAE/C8B,MAAM,CAACvF,SAAS,CAACC,GAAG,CAAC,wBAAwB,CAAC;QAC9CsF,MAAM,CAACvF,SAAS,CAACC,GAAG,CAAC,QAAQ,CAAC;QAC9BsF,MAAM,CAACC,YAAY,CAAC,YAAY,EAAEH,KAAK,CAAC;QACxC,MAAMI,QAAQ,GAAG,oCAAoC;QACrD,MAAMhD,GAAG,GAAGxD,SAAS,CAACyG,UAAU,CAAC,cAAc,EAAE,OAAO,EAAED,QAAQ,CAAC;QACnE;QACAF,MAAM,CAACrF,SAAS,GAAG,uBAAuBuF,QAAQ,6BAA6BhD,GAAG,eAAe;QAEjG8C,MAAM,CAACnF,gBAAgB,CAAC,OAAO,EAAGuF,CAAQ,IAAI;UAC1CA,CAAC,CAACC,cAAc,EAAE;UAClBD,CAAC,CAACE,eAAe,EAAE;UACnBlI,YAAY,CAACmI,SAAS,CAACX,MAAM,EAAE7B,GAAG,CAACZ,YAAY,CAAC,KAAK,CAAC,EAAE6B,MAAI,CAAChC,SAAS,EAAEgC,MAAI,CAAC/B,WAAW,CAAC;QAC7F,CAAC,CAAC;QAEF,CAAAuC,eAAA,GAAAzB,GAAG,CAACyC,UAAU,cAAAhB,eAAA,eAAdA,eAAA,CAAgBiB,WAAW,CAACT,MAAM,CAAC;QAEnC,IAAIjC,GAAG,CAAC2C,QAAQ,IAAI3C,GAAG,CAAC4B,YAAY,GAAG,CAAC,EAAE;UACtC;UACAK,MAAM,CAACvF,SAAS,CAACkG,MAAM,CAAC,QAAQ,CAAC;SACpC,MAAM;UACH;UACA5C,GAAG,CAAC6C,MAAM,GAAG,MAAMZ,MAAM,CAACvF,SAAS,CAACkG,MAAM,CAAC,QAAQ,CAAC;;MAE5D,CAAC,CAAC;IAAC;EACP;EAEA;;;;;EAKU5F,cAAcA,CAACqF,CAAa;IAAA,IAAAS,iBAAA;IAClC,IAAIT,CAAC,CAACU,gBAAgB,EAAE;MACpB;MACA;;IAGJ,IAAI,IAAI,CAAC3G,OAAO,CAAC4G,QAAQ,EAAE;MACvB,IAAI,CAAC5G,OAAO,CAAC6G,IAAI,EAAE;MAEnB;;IAGJ,IAAI,CAAC,IAAI,CAAC5F,IAAI,EAAE;MACZ;;IAGJ,CAAAyF,iBAAA,OAAI,CAACI,WAAW,cAAAJ,iBAAA,eAAhBA,iBAAA,CAAkB9F,cAAc,CAACqF,CAAC,CAAC;EACvC;EAEA;;;EAGgBc,YAAYA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAA5E,iBAAA;MACxB;MACA4E,MAAI,CAACtH,OAAO,CAACY,SAAS,CAACkG,MAAM,CAAC,cAAc,CAAC;MAE7C,MAAMnI,SAAS,CAAC4I,QAAQ,EAAE;MAE1B;MACAD,MAAI,CAACvG,WAAW,CAACoG,IAAI,EAAE;IAAC;EAC5B;EAEA;;;EAGgBxF,uBAAuBA,CAAA;IAAA,IAAA6F,MAAA;IAAA,OAAA9E,iBAAA;MACnC,IAAI,CAAC8E,MAAI,CAACjG,IAAI,EAAE;QACZiG,MAAI,CAACxH,OAAO,CAACc,SAAS,GAAG0G,MAAI,CAAChH,SAAS,CAAC,CAAC;QAEzC,MAAMgH,MAAI,CAACH,YAAY,EAAE;QAEzB;;MAGJ,IAAI,CAACG,MAAI,CAACxH,OAAO,CAACsD,YAAY,CAAC,YAAY,CAAC,EAAE;QAC1CkE,MAAI,CAACxH,OAAO,CAACoG,YAAY,CAAC,YAAY,EAAEqB,MAAM,CAAC9I,SAAS,CAAC+I,WAAW,CAACF,MAAI,CAACG,UAAU,CAAC,CAAC,CAAC;;MAG3FH,MAAI,CAACjG,IAAI,GAAGiG,MAAI,CAACjG,IAAI,GAAGiG,MAAI,CAACjG,IAAI,CAACqG,IAAI,EAAE,GAAG,EAAE;MAE7C,MAAMC,MAAM,SAASL,MAAI,CAACM,cAAc,EAAE;MAE1C;MACAN,MAAI,CAACxH,OAAO,CAACY,SAAS,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAEtD2G,MAAI,CAACxH,OAAO,CAACc,SAAS,GAAG,EAAE,CAAC,CAAC;MAE7B;MACAvC,YAAY,CAACwJ,YAAY,CAACF,MAAM,CAACG,GAAG,EAAER,MAAI,CAACxH,OAAO,CAAC;MAEnDwH,MAAI,CAACjH,kBAAkB,CAACuB,OAAO,CAACC,UAAU,IAAIA,UAAU,CAACQ,OAAO,EAAE,CAAC;MACnEiF,MAAI,CAACjH,kBAAkB,GAAGsH,MAAM,CAACtH,kBAAkB;MAEnD,MAAM5B,SAAS,CAAC4I,QAAQ,EAAE;MAE1B;MACAC,MAAI,CAACtC,oBAAoB,EAAE;MAE3B,IAAI2C,MAAM,CAACI,OAAO,CAACzG,MAAM,EAAE;QACvB;QACAvC,kBAAkB,CAACiJ,UAAU,CACzBV,MAAI,CAACxH,OAAO,EACZ6H,MAAM,CAACM,OAAO,EACdX,MAAI,CAACtH,gBAAgB,EACrB2H,MAAM,CAACI,OAAO,EACd,EAAE,EACFT,MAAI,CAACrE,SAAS,EACdqE,MAAI,CAACpE,WAAW,EAChByE,MAAM,CAAC1G,MAAM,CAChB;;MAGLqG,MAAI,CAACxH,OAAO,CAACY,SAAS,CAACkG,MAAM,CAAC,0BAA0B,CAAC;MACzD,MAAMU,MAAI,CAACH,YAAY,EAAE;IAAC;EAC9B;EAEA;;;;;EAKgBS,cAAcA,CAAA;IAAA,IAAAM,MAAA;IAAA,OAAA1F,iBAAA;MAC1B;MACA,MAAM2F,IAAI,SAAS1J,SAAS,CAAC2J,YAAY,CAAChK,SAAS,CAACiK,OAAO,CAACH,MAAI,CAACjH,MAAM,CAAC,CAAC;MAEzE,MAAMA,MAAM,GAAGkH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,KAAK,EAAE;MAE5B,IAAIH,IAAI,IAAID,MAAI,CAAC3G,YAAY,IAAI,QAAQ,IAAI2G,MAAI,CAAC1G,iBAAiB,KAAK6B,SAAS,IAAI6E,MAAI,CAAC1G,iBAAiB,IAAI,CAAC,EAAE;QAC9G0G,MAAI,CAAC1G,iBAAiB,GAAG2G,IAAI,CAACI,aAAa,EAAE;;MAGjD,IAAIL,MAAI,CAAC3G,YAAY,KAAK,QAAQ,IAAI2G,MAAI,CAAC1G,iBAAiB,KAAK6B,SAAS,IAAI6E,MAAI,CAACM,QAAQ,KAAKnF,SAAS,EAAE;QACvG6E,MAAI,CAAC1G,iBAAiB,GAAG0G,MAAI,CAACM,QAAQ;;MAG1C,MAAMlH,MAAM,GAAG4G,MAAI,CAAC5G,MAAM,KAAK+B,SAAS,GACpC,CAAC,EAAE6E,MAAI,CAAC3G,YAAY,IAAI2G,MAAI,CAAC1G,iBAAiB,KAAK6B,SAAS,CAAC,GAAG5E,SAAS,CAAC+I,WAAW,CAACU,MAAI,CAAC5G,MAAM,CAAC;MAEtG,MAAMyG,OAAO,GAAgC;QACzCU,KAAK,EAAEhK,SAAS,CAAC+I,WAAW,CAACU,MAAI,CAACO,KAAK,CAAC;QACxChB,UAAU,EAAEhJ,SAAS,CAAC+I,WAAW,CAACU,MAAI,CAACT,UAAU,CAAC;QAClDiB,SAAS,EAAER,MAAI,CAACQ,SAAS;QACzBF,QAAQ,EAAEN,MAAI,CAACM,QAAQ;QACvBG,aAAa,EAAElK,SAAS,CAAC+I,WAAW,CAACU,MAAI,CAACS,aAAa;OAC1D;MAED,IAAIC,SAAiB;MACrB,IAAIX,OAAO,GAAuB,EAAE;MAEpC,IAAI3G,MAAM,EAAE;QAAA,IAAAuH,qBAAA;QACR,MAAMC,YAAY,SAAS9J,gBAAgB,CAAC+J,uBAAuB,CAC/Db,MAAI,CAAC7G,IAAI,IAAI,EAAE,EACf6G,MAAI,CAAC3G,YAAY,IAAI,EAAE,GAAAsH,qBAAA,GACvBX,MAAI,CAAC1G,iBAAiB,cAAAqH,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAC,EAC5Bd,OAAO,EACP9G,MAAM,CACT;QAEDgH,OAAO,GAAGa,YAAY,CAACb,OAAO;QAC9BW,SAAS,GAAGE,YAAY,CAACzH,IAAI;OAChC,MAAM;QACHuH,SAAS,SAAS9J,UAAU,CAACkK,UAAU,CAACd,MAAI,CAAC7G,IAAI,IAAI,EAAE,EAAE0G,OAAO,EAAE,EAAE,EAAE9G,MAAM,CAAC;;MAGjF2H,SAAS,GAAGV,MAAI,CAACe,eAAe,CAACL,SAAS,CAAC;MAE3C,MAAMd,GAAG,GAAG5D,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAEzC2D,GAAG,CAAClH,SAAS,GAAGgI,SAAS;MAEzB,MAAMvI,kBAAkB,GAAG6H,MAAI,CAACgB,iBAAiB,CAACpB,GAAG,EAAEK,IAAI,CAAC;MAE5D,OAAO;QACHL,GAAG;QACHG,OAAO;QACPF,OAAO;QACP9G,MAAM;QACNZ;OACH;IAAC;EACN;EAEA;;;;;;;EAOU6I,iBAAiBA,CAACpB,GAAgB,EAAEK,IAAe;IACzD,MAAMgB,MAAM,GAAGhE,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACtD,MAAM+D,OAAO,GAAGjE,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACrD,MAAMgE,MAAM,GAAGlE,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACxD,MAAMiE,MAAM,GAAGnE,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACxD,MAAMkE,OAAO,GAAGpE,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC1D,MAAMmE,OAAO,GAAGrE,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAc,SAAS,CAAC,CAAC;IACxE,MAAMoE,KAAK,GAAGtE,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAC,wBAAwB,CAAC,CAAC;IACxE,MAAMqE,wBAAwB,GAAGvE,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAc,UAAU,CAAC,CAAC;IAC1F,MAAMsE,kBAAkB,GAAGxE,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAc,8BAA8B,CAAC,CAAC;IACxG,MAAMuE,MAAM,GAAGzE,KAAK,CAACC,IAAI,CACrB0C,GAAG,CAACzC,gBAAgB,CAAe9G,uBAAuB,CAACsL,UAAU,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAC3G;IACD,MAAMC,SAAS,GAAG7E,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC3D,MAAM4E,QAAQ,GAAoB,EAAE;IAEpC,IAAI,CAACC,mBAAmB,CAACpC,GAAG,EAAEK,IAAI,CAAC;IAEnC;IACA;IACAiB,OAAO,CAACxH,OAAO,CAAEuI,MAAM,IAAI;MAAA,IAAAC,kBAAA;MACvB,IAAID,MAAM,CAACE,OAAO,CAACC,MAAM,EAAE;QACvB;QACA;;MAGJ;MACA,MAAMC,OAAO,GAAG,IAAI1L,iBAAiB,CAAC,IAAIZ,UAAU,CAACkM,MAAM,CAAC,EAAE,IAAI,CAACpK,OAAO,CAAC;MAC3EwK,OAAO,CAACC,OAAO,IAAAJ,kBAAA,GAAG,IAAI,CAACK,YAAY,cAAAL,kBAAA,cAAAA,kBAAA,GAAI,IAAI;MAC3CG,OAAO,CAACG,KAAK,GAAG,IAAI,CAACC,cAAc;MACnCJ,OAAO,CAACK,QAAQ,EAAE;MAElB,IAAI,CAAC7H,kBAAkB,CAACoH,MAAM,CAAC;IACnC,CAAC,CAAC;IAEF,MAAMU,cAAc,GAAmC,EAAE;IACzD,IAAI1B,MAAM,IAAIA,MAAM,CAAC7D,MAAM,GAAG,CAAC,EAAE;MAC7B;MACA6D,MAAM,CAACvH,OAAO,CAAEoC,GAAgB,IAAI;QAChC,IAAI,CAACF,kBAAkB,CAACE,GAAG,CAAC;QAE5B,MAAM8G,aAAa,GAAG,IAAI,CAAC/H,kBAAkB,CAACiB,GAAG,CAAC;QAClD,IAAI8G,aAAa,IAAI,CAACA,aAAa,CAACC,OAAO,EAAE;UACzCF,cAAc,CAACG,IAAI,CAACF,aAAa,CAAC;;QAGtC,IAAIrM,SAAS,CAAC+I,WAAW,CAAC,IAAI,CAACtH,QAAQ,CAAC,IAAI,CAAC8D,GAAG,CAACtD,SAAS,CAAC+B,QAAQ,CAAC,MAAM,CAAC,EAAE;UACzE,IAAI,CAACsB,UAAU,CAACC,GAAG,CAAC;;MAE5B,CAAC,CAAC;;IAGN,MAAMiH,gBAAgB,GAAG5B,MAAM,CAAC6B,GAAG,CAACC,KAAK,IAAG;MACxC,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC;MAEtB,OAAO,IAAI3L,sBAAsB,CAAC2L,KAAK,EAAE,CAAC,IAAI,CAACzJ,QAAQ,CAAC;IAC5D,CAAC,CAAC;IAEF,MAAM2J,gBAAgB,GAAG/B,MAAM,CAAC4B,GAAG,CAACI,KAAK,IAAG;MACxC,IAAI,CAACF,UAAU,CAACE,KAAK,EAAE,IAAI,CAAC;MAE5B,OAAO,IAAI9L,sBAAsB,CAAC8L,KAAK,EAAE,CAAC,IAAI,CAAC5J,QAAQ,CAAC;IAC5D,CAAC,CAAC;IAEF,MAAM6J,iBAAiB,GAAGhC,OAAO,CAAC2B,GAAG,CAACM,MAAM,IAAG;MAC3CvB,QAAQ,CAACe,IAAI,CAAC,IAAI,CAACS,WAAW,CAACD,MAAM,EAAErD,IAAI,CAAC,CAAC;MAE7C,OAAO,IAAI1I,sBAAsB,CAAC+L,MAAM,EAAE,CAAC,IAAI,CAAC9J,QAAQ,CAAC;IAC7D,CAAC,CAAC;IAEFsI,SAAS,CAACpI,OAAO,CAAE8J,KAAK,IAAI;MACxB,IAAI,CAAC3I,kBAAkB,CAAC2I,KAAK,CAAC;IAClC,CAAC,CAAC;IAEF;IACAlC,OAAO,CAAC5H,OAAO,CAAEqE,MAAmB,IAAI;MACpC;MACA,IAAIA,MAAM,CAAC0F,aAAa,CAAC,GAAG,CAAC,EAAE;QAC3B1F,MAAM,CAACvF,SAAS,CAACC,GAAG,CAAC,6BAA6B,CAAC;;IAE3D,CAAC,CAAC;IAEF;IACA8I,KAAK,CAAC7H,OAAO,CAAEgK,IAAI,IAAI;MACnBjM,SAAS,CAACkM,cAAc,CAACD,IAAI,CAAC;IAClC,CAAC,CAAC;IAEF;IACAlC,wBAAwB,CAAC9H,OAAO,CAAEkK,EAAe,IAAI;MACjD;MACA,IAAIA,EAAE,CAACC,OAAO,IAAI,GAAG,IAAID,EAAE,CAACC,OAAO,IAAI,KAAK,IAAID,EAAE,CAACC,OAAO,IAAI,OAAO,IAAID,EAAE,CAACC,OAAO,IAAI,OAAO,IACnFD,EAAE,CAACC,OAAO,IAAI,QAAQ,IAAID,EAAE,CAACC,OAAO,IAAI,OAAO,EAAE;QACxD,IAAI,CAAChJ,kBAAkB,CAAC+I,EAAE,CAAC;;IAEnC,CAAC,CAAC;IAEF;IACAnC,kBAAkB,CAAC/H,OAAO,CAAE9B,OAAoB,IAAI;MAChDA,OAAO,CAACgB,gBAAgB,CAAC,OAAO,EAAGuF,CAAC,IAAI;QACpCA,CAAC,CAACE,eAAe,EAAE;MACvB,CAAC,CAAC;IACN,CAAC,CAAC;IAEF;IACA,MAAMyF,gBAAgB,GAAGpC,MAAM,CAACsB,GAAG,CAA0Be,KAAK,IAAI;MAClE3N,eAAe,CAAC4N,UAAU,CAACD,KAAK,EAAE,KAAK,CAAC;MAExC,OAAO,IAAIxM,sBAAsB,CAACwM,KAAK,EAAE,CAAC,IAAI,CAACvK,QAAQ,CAAC;IAC5D,CAAC,CAAC;IAEFrD,YAAY,CAAC8N,uBAAuB,CAACrE,GAAG,CAAC;IAEzC,IAAI+C,cAAc,CAACvF,MAAM,EAAE;MACvB;MACA,MAAMlD,OAAO,GAAG3D,SAAS,CAAC2N,WAAW,CAACvB,cAAc,CAACK,GAAG,CAAEJ,aAAa,IAAI;QACvE,IAAIA,aAAa,CAACuB,MAAM,EAAE;UACtB;UACA,OAAO3J,OAAO,CAACC,OAAO,EAAE;;QAG5B,OAAO,IAAID,OAAO,CAACC,OAAO,IAAI1D,iBAAiB,CAACqN,IAAI,CAACxB,aAAa,CAACyB,MAAM,EAAE5J,OAAO,CAAC,CAAC;MACxF,CAAC,CAAC,CAAC;MAEH;MACAsH,QAAQ,CAACe,IAAI,CAACvM,SAAS,CAAC2J,YAAY,CAAC3J,SAAS,CAAC+N,cAAc,CAACpK,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;;IAGlF;IACAM,OAAO,CAAC+J,GAAG,CAACxC,QAAQ,CAAC,CAACyC,KAAK,CAACC,KAAK,IAAIlO,SAAS,CAACmO,iBAAiB,CAAC,qCAAqC,EAAED,KAAK,CAAC,CAAC;IAE/G,OAAO,CACH,GAAGtB,gBAAgB,EACnB,GAAGJ,gBAAgB,EACnB,GAAGM,iBAAiB,EACpB,GAAGS,gBAAgB,CACtB;EACL;EAEA;;;;;;EAMU9B,mBAAmBA,CAACpC,GAAgB,EAAEK,IAAe;IAAA,IAAA0E,MAAA;IAC3D,MAAMC,cAAc,GAAG3H,KAAK,CAACC,IAAI,CAAC0C,GAAG,CAACzC,gBAAgB,CAAc,iBAAiB,CAAC,CAAC;IAEvFyH,cAAc,CAAClL,OAAO,CAAE9B,OAAO,IAAI;MAC/B,MAAMiN,GAAG,GAAGjN,OAAO,CAACuK,OAAO,CAACC,MAAM;MAClC,IAAI,CAACyC,GAAG,EAAE;QACN;;MAGJ3N,OAAO,CAAC4N,8BAA8B,CAAClN,OAAO;QAAA,IAAAmN,IAAA,GAAAzK,iBAAA,CAAE,WAAOzB,KAAK,EAAI;UAC5DA,KAAK,CAACuF,cAAc,EAAE;UACtBvF,KAAK,CAACwF,eAAe,EAAE;UAEvB4B,IAAI,GAAGA,IAAI,IAAI/J,SAAS,CAAC8O,cAAc,EAAE;UACzC,IAAI,CAAC/E,IAAI,EAAE;YACP;;UAGJ,MAAMgF,cAAc,GAAGrN,OAAO,CAACuK,OAAO,CAAC+C,aAAa;UACpD,MAAMC,SAAS,GAAGvN,OAAO,CAACuK,OAAO,CAACiD,MAAM,KAAK,KAAK;UAClD,MAAMC,eAAe,GAAGzN,OAAO,CAACuK,OAAO,CAACmD,kBAAkB,KAAK,SAAS;UAExE,IAAIL,cAAc,EAAE;YAChB,IAAI;cACA,MAAM9O,YAAY,CAACoP,WAAW,CAAC9O,SAAS,CAACqH,OAAO,CAACmH,cAAc,CAAC,CAAC;aACpE,CAAC,OAAAO,OAAA,EAAM;cACJ;;;UAIR,IAAIL,SAAS,EAAE;YACXlF,IAAI,CAACwF,sBAAsB,CAACZ,GAAG,CAAC;YAEhC,IAAIQ,eAAe,IAAIV,MAAI,CAAC5M,cAAc,EAAE;cACxC;cACAZ,UAAU,CAACiN,IAAI,CAACjN,UAAU,CAACuO,QAAQ,EAAE,MAAK;gBAAA,IAAAC,qBAAA;gBACtC,CAAAA,qBAAA,GAAAhB,MAAI,CAAC5M,cAAc,cAAA4N,qBAAA,eAAnBA,qBAAA,CAAqB5N,cAAc,EAAE;cACzC,CAAC,CAAC;;WAET,MAAM;YACHkI,IAAI,CAAC2F,0BAA0B,CAACf,GAAG,EAAE1J,SAAS,EAAE;cAC5C0K,kBAAkB,EAAE,CAACZ;aACxB,CAAC;YAEF,IAAII,eAAe,IAAIV,MAAI,CAAC5M,cAAc,EAAE;cACxC;cACAhB,iBAAiB,CAACqN,IAAI,CAAC/M,YAAY,CAACyO,MAAM,EAAE,MAAK;gBAC7CtP,MAAM,CAACuP,GAAG,eAAAzL,iBAAA,CAAC,aAAW;kBAAA,IAAA0L,sBAAA;kBAClB,CAAAA,sBAAA,GAAArB,MAAI,CAAC5M,cAAc,cAAAiO,sBAAA,eAAnBA,sBAAA,CAAqBjO,cAAc,EAAE;gBACzC,CAAC,EAAC;cACN,CAAC,CAAC;;;QAGd,CAAC;QAAA,iBAAAkO,EAAA;UAAA,OAAAlB,IAAA,CAAAmB,KAAA,OAAAC,SAAA;QAAA;MAAA,IAAC;IACN,CAAC,CAAC;EACN;EAEA;;;;;EAKgB7I,eAAeA,CAAA;IAAA,IAAA8I,MAAA;IAAA,OAAA9L,iBAAA;MAC3B,IAAI,CAAC8L,MAAI,CAACpM,iBAAiB,EAAE;QACzBoM,MAAI,CAACpM,iBAAiB,GAAG9C,OAAO,CAACmP,aAAa,CAACD,MAAI,CAACxO,OAAO,CAAC;;MAEhE,MAAMwO,MAAI,CAACpM,iBAAiB;MAE5B,IAAI2C,KAAK,GAAGyJ,MAAI,CAACxO,OAAO,CAAC0O,qBAAqB,EAAE,CAAC3J,KAAK;MACtD,IAAI,CAACA,KAAK,EAAE;QACR;QACA,MAAM4J,eAAe,GAAGC,gBAAgB,CAACJ,MAAI,CAACxO,OAAO,CAAC,CAAC6O,OAAO;QAE9DL,MAAI,CAACxO,OAAO,CAAC8E,KAAK,CAAC+J,OAAO,GAAG,cAAc;QAC3C,MAAMlQ,SAAS,CAAC4I,QAAQ,EAAE;QAE1BxC,KAAK,GAAGyJ,MAAI,CAACxO,OAAO,CAAC0O,qBAAqB,EAAE,CAAC3J,KAAK;QAElDyJ,MAAI,CAACxO,OAAO,CAAC8E,KAAK,CAAC+J,OAAO,GAAGF,eAAe;;MAGhD;MACA,IAAI3O,OAAO,GAAGwO,MAAI,CAACxO,OAAO;MAC1B,OAAO,CAAC+E,KAAK,IAAI/E,OAAO,CAAC8O,aAAa,EAAE;QACpC9O,OAAO,GAAGA,OAAO,CAAC8O,aAAa;QAC/B,MAAMC,aAAa,GAAGH,gBAAgB,CAAC5O,OAAO,CAAC;QAE/C,MAAMgP,OAAO,GAAGzQ,YAAY,CAAC0Q,uBAAuB,CAACF,aAAa,EAAE,aAAa,CAAC,GAC1ExQ,YAAY,CAAC0Q,uBAAuB,CAACF,aAAa,EAAE,cAAc,CAAC;QAE3E;QACAhK,KAAK,GAAG/E,OAAO,CAAC0O,qBAAqB,EAAE,CAAC3J,KAAK,GAAGiK,OAAO;;MAG3D,OAAOjK,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGmK,MAAM,CAACC,UAAU,GACvCpK,KAAK,GACLmK,MAAM,CAACC,UAAU;IAAC;EAC5B;EAEA;;;;;;EAMU7D,UAAUA,CAACtL,OAAoB,EAAEoP,OAAA,GAAmB,KAAK;IAC/D,IAAI,CAACpL,kBAAkB,CAAChE,OAAO,CAAC;IAChC,IAAI,CAACiD,kBAAkB,CAACjD,OAAO,CAAC;IAEhC;IACA,IAAIqP,YAAY,GAAGrP,OAAO,CAACsD,YAAY,CAAC,cAAc,CAAC,IAAI,EAAE;IAC7D,IAAI,CAAC+L,YAAY,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;MACtC,IAAI,CAACD,YAAY,CAACzH,IAAI,EAAE,EAAE;QACtByH,YAAY,GAAG,YAAY;OAC9B,MAAM;QACHA,YAAY,GAAGA,YAAY,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,YAAY,CAAC,CAACxF,IAAI,CAAC,GAAG,CAAC;;MAGzEhK,OAAO,CAACoG,YAAY,CAAC,cAAc,EAAEiJ,YAAY,CAAC;;IAGtD,MAAMI,OAAO,GAAGpK,KAAK,CAACC,IAAI,CAACtF,OAAO,CAACuF,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC9D,MAAMmK,MAAM,GAAGrK,KAAK,CAACC,IAAI,CAACtF,OAAO,CAACuF,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC5D,MAAMoK,SAAS,GAAGP,OAAO,IAAI,CAAC,CAACpP,OAAO,CAACsD,YAAY,CAAC,QAAQ,CAAC;IAE7D,IAAI8L,OAAO,IAAI,CAACO,SAAS,EAAE;MACvB,IAAI,CAACC,sBAAsB,CAAC5P,OAAO,CAAC;;IAGxCyP,OAAO,CAAC3N,OAAO,CAAE+N,MAAM,IAAI;MACvB,IAAIT,OAAO,IAAI,CAACO,SAAS,EAAE;QACvB,IAAI,CAACC,sBAAsB,CAACC,MAAM,CAAC;;MAEvCA,MAAM,CAACzJ,YAAY,CAAC,YAAY,EAAEyJ,MAAM,CAACvM,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;MACnEuM,MAAM,CAACC,eAAe,CAAC,KAAK,CAAC;MAC7B,IAAI,CAAC7M,kBAAkB,CAAC4M,MAAM,CAAC;IACnC,CAAC,CAAC;IAEFH,MAAM,CAAC5N,OAAO,CAAEiO,KAAK,IAAI;MACrB,IAAI,CAAC9M,kBAAkB,CAAC8M,KAAK,CAAC;IAClC,CAAC,CAAC;IAEF;IACA/P,OAAO,CAACgB,gBAAgB,CAAC,OAAO,EAAGuF,CAAC,IAAI;MACpCA,CAAC,CAACE,eAAe,EAAE;IACvB,CAAC,CAAC;EACN;EAEA;;;;;EAKUmJ,sBAAsBA,CAAC5P,OAAoB;IACjD,MAAMqD,GAAG,GAAGrD,OAAO,CAACsD,YAAY,CAAC,KAAK,CAAC;IACvC,IAAI,CAACD,GAAG,EAAE;MACN;;IAGJ,IAAIA,GAAG,CAAC2M,KAAK,CAAC,OAAO,CAAC,EAAE;MACpB;;IAGJhQ,OAAO,CAACoG,YAAY,CAAC,KAAK,EAAE/C,GAAG,GAAG,UAAU,CAAC;EACjD;EAEA;;;;;;EAMgBsI,WAAWA,CAACD,MAAyB,EAAErD,IAA0B;IAAA,IAAA4H,MAAA;IAAA,OAAAvN,iBAAA;MAC7E,MAAMW,GAAG,GAAGqI,MAAM,CAACrI,GAAG;MACtB,MAAM6M,WAAW,GAAG5R,SAAS,CAAC8O,cAAc,EAAE;MAE9C6C,MAAI,CAACjM,kBAAkB,CAAC0H,MAAM,CAAC;MAE/B,IAAIlN,eAAe,CAAC2R,uBAAuB,CAAC9M,GAAG,CAAC,EAAE;QAC9C4M,MAAI,CAACG,aAAa,CAAC1E,MAAM,CAAC;;MAG9B,IAAIwE,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEG,WAAW,CAAChN,GAAG,CAAC,EAAE;QAC/B;QACA;QACAqI,MAAM,CAACrI,GAAG,GAAG,EAAE;QAEf,MAAMiN,QAAQ,SAAS9R,eAAe,CAAC+R,wBAAwB,CAAC7E,MAAM,EAAErI,GAAG,CAAC;QAC5E,MAAM7E,eAAe,CAACgS,gBAAgB,CAACF,QAAQ,CAAC;QAEhD5E,MAAM,CAACrI,GAAG,GAAGiN,QAAQ;QACrB9R,eAAe,CAAC4N,UAAU,CAACV,MAAM,EAAE,KAAK,CAAC;QAEzC;;MAGJ,MAAMlN,eAAe,CAACgS,gBAAgB,CAACnN,GAAG,CAAC;MAE3C,IAAIgF,IAAI,IAAIhF,GAAG,EAAE;QACb,IAAIoN,QAAQ,GAAG7Q,OAAO,CAAC8Q,iBAAiB,CAACrN,GAAG,EAAEgF,IAAI,CAAC;QACnD,IAAIoI,QAAQ,EAAE;UAAA,IAAAE,qBAAA;UACV,MAAMC,UAAU,GAAGtR,OAAO,CAACmP,aAAa,CAAC/C,MAAM,CAAC;UAChDuE,MAAI,CAACxP,WAAW,CAACyK,IAAI,CAAC0F,UAAU,CAAC;UAEjC,MAAMA,UAAU;UAEhB;UACA,IAAI7L,KAAsB;UAC1B,IAAI8L,MAAuB;UAE3B,IAAInF,MAAM,CAAC3G,KAAK,EAAE;YACdA,KAAK,GAAG2G,MAAM,CAAC3G,KAAK;WACvB,MAAM;YACHA,KAAK,GAAG2G,MAAM,CAACgD,qBAAqB,EAAE,CAAC3J,KAAK;YAC5C,IAAI,CAACA,KAAK,EAAE;cACRA,KAAK,GAAGmK,MAAM,CAACC,UAAU;;;UAIjC,IAAIzD,MAAM,CAACmF,MAAM,EAAE;YACfA,MAAM,GAAGnF,MAAM,CAACmF,MAAM;WACzB,MAAM;YACHA,MAAM,GAAGnF,MAAM,CAACgD,qBAAqB,EAAE,CAACmC,MAAM;YAC9C,IAAI,CAACA,MAAM,EAAE;cACTA,MAAM,GAAG9L,KAAK;;;UAItB;UACA,IAAIsD,IAAI,IAAI,CAACA,IAAI,CAACyI,yBAAyB,CAAC,KAAK,CAAC,EAAE;YAChDL,QAAQ,IAAI,SAAS,GAAG1L,KAAK,GAAG,UAAU,GAAG8L,MAAM;;UAGvD,MAAMrS,eAAe,CAACgS,gBAAgB,CAACC,QAAQ,CAAC;UAEhD/E,MAAM,CAACrI,GAAG,GAAGoN,QAAQ;UAErB,IAAI,CAAC/E,MAAM,CAAC3G,KAAK,EAAE;YACf2G,MAAM,CAAC3G,KAAK,GAAG0C,MAAM,CAAC1C,KAAK,CAAC;;UAEhC,IAAI,CAAC2G,MAAM,CAACmF,MAAM,EAAE;YAChBnF,MAAM,CAACmF,MAAM,GAAGpJ,MAAM,CAACoJ,MAAM,CAAC;;UAGlC;UACA,KAAAF,qBAAA,GAAIjF,MAAM,CAACoD,aAAa,cAAA6B,qBAAA,eAApBA,qBAAA,CAAsB/P,SAAS,CAAC+B,QAAQ,CAAC,kBAAkB,CAAC,EAAE;YAC9D+I,MAAM,CAAC1K,gBAAgB,CAAC,MAAM,EAAE,MAAK;cACjC,IAAI0K,MAAM,CAACqF,eAAe,EAAE;gBACxB,MAAMC,GAAG,GAAG5M,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;gBAC3C2M,GAAG,CAAC5K,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC;gBACpC4K,GAAG,CAAClQ,SAAS,GAAG,oCAAoC;gBACpD4K,MAAM,CAACqF,eAAe,CAACE,IAAI,CAACrK,WAAW,CAACoK,GAAG,CAAC;;YAEpD,CAAC,CAAC;;;;MAKdxS,eAAe,CAAC4N,UAAU,CAACV,MAAM,EAAE,KAAK,CAAC;IAAC;EAC9C;EAEA;;;;;EAKU0E,aAAaA,CAAC1E,MAAyB;IAC7C,MAAMwF,OAAO,GAAG9M,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAE7C6M,OAAO,CAACtQ,SAAS,CAACC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC;IAEzD,MAAMsF,MAAM,GAAG/B,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;IACnD8B,MAAM,CAACC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC;IACpCD,MAAM,CAACC,YAAY,CAAC,eAAe,EAAE,QAAQ,CAAC;IAC9CD,MAAM,CAACvF,SAAS,CAACC,GAAG,CAAC,kBAAkB,EAAE,qBAAqB,CAAC;IAC/DsF,MAAM,CAACrF,SAAS,GAAGjC,SAAS,CAACqH,OAAO,CAAC,iBAAiB,CAAC;IAEvDC,MAAM,CAACnF,gBAAgB,CAAC,OAAO,EAAE,MAAK;MAClCxC,eAAe,CAAC2S,mBAAmB,EAAE;IACzC,CAAC,CAAC;IAEFD,OAAO,CAACtK,WAAW,CAACT,MAAM,CAAC;IAE3BuF,MAAM,CAAC0F,KAAK,CAACF,OAAO,CAAC;EACzB;EAEA;;;;;;EAMU/H,eAAeA,CAAC5H,IAAY;IAClC;IACA,MAAM8P,OAAO,GAAG9P,IAAI,CAACyO,KAAK,CAAC,oCAAoC,CAAC;IAEhE,IAAIqB,OAAO,EAAE;MACTA,OAAO,CAACvP,OAAO,CAAEkO,KAAK,IAAI;QACtB;QACA,MAAMsB,OAAO,GAAGtB,KAAK,CAAC/F,OAAO,CAAC,iBAAiB,EAAE,0BAA0B,CAAC;QAE5E1I,IAAI,GAAGA,IAAI,CAAC0I,OAAO,CAAC+F,KAAK,EAAEsB,OAAO,CAAC;MACvC,CAAC,CAAC;;IAGN,OAAO/P,IAAI;EACf;;SAx0BSzB,uBAAuB;;mBAAvBA,MAAuB,EAAAyR,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAApT,UAAA,GAAAoT,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,UAAA,MAAAH,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAI,gBAAA,GAAAJ,EAAA,CAAAC,iBAAA,CAmCRhS,oBAAoB;AAAA;;QAnCnCM,MAAuB;EAAA8R,SAAA;EAAAC,SAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;qBAErB1S,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}