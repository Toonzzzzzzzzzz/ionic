{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDB } from '@services/db';\nimport { CoreEvents } from '@singletons/events';\nimport { makeSingleton, Keyboard, StatusBar } from '@singletons';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreColors } from '@singletons/colors';\nimport { DBNAME, SCHEMA_VERSIONS_TABLE_NAME, SCHEMA_VERSIONS_TABLE_SCHEMA } from '@services/database/app';\nimport { CoreObject } from '@singletons/object';\nimport { CoreDatabaseCachingStrategy, CoreDatabaseTableProxy } from '@classes/database/database-table-proxy';\nimport { asyncInstance } from '../utils/async-instance';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CorePlatform } from '@services/platform';\nimport { CoreNetwork, CoreNetworkConnection } from '@services/network';\nimport { CoreMainMenuProvider } from '@features/mainmenu/services/mainmenu';\nimport * as i0 from \"@angular/core\";\n/**\n * Factory to provide some global functionalities, like access to the global app database.\n *\n * @description\n * Each service or component should be responsible of creating their own database tables. Example:\n *\n * ```ts\n * constructor(appProvider: CoreAppProvider) {\n *     this.appDB = appProvider.getDB();\n *     this.appDB.createTableFromSchema(this.tableSchema);\n * }\n * ```\n */\nexport class CoreAppProvider {\n  constructor() {\n    this.isKeyboardShown = false;\n    this.keyboardOpening = false;\n    this.keyboardClosing = false;\n    this.schemaVersionsTable = asyncInstance();\n    this.logger = CoreLogger.getInstance('CoreAppProvider');\n    if (CorePlatform.isAndroid()) {\n      this.mainMenuListener = CoreEvents.on(CoreMainMenuProvider.MAIN_MENU_VISIBILITY_UPDATED, () => this.setAndroidNavigationBarColor());\n    }\n  }\n  /**\n   * Returns whether the user agent is controlled by automation. I.e. Behat testing.\n   *\n   * @returns True if the user agent is controlled by automation, false otherwise.\n   */\n  static isAutomated() {\n    return !!navigator.webdriver;\n  }\n  /**\n   * Returns the forced timezone to use. Timezone is forced for automated tests.\n   *\n   * @returns Timezone. Undefined to use the user's timezone.\n   */\n  static getForcedTimezone() {\n    if (CoreAppProvider.isAutomated()) {\n      // Use the same timezone forced for LMS in tests.\n      return 'Australia/Perth';\n    }\n  }\n  /**\n   * Initialize database.\n   */\n  initializeDatabase() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const database = _this.getDB();\n      yield database.createTableFromSchema(SCHEMA_VERSIONS_TABLE_SCHEMA);\n      const schemaVersionsTable = new CoreDatabaseTableProxy({\n        cachingStrategy: CoreDatabaseCachingStrategy.Eager\n      }, database, SCHEMA_VERSIONS_TABLE_NAME, ['name']);\n      yield schemaVersionsTable.initialize();\n      _this.schemaVersionsTable.setInstance(schemaVersionsTable);\n    })();\n  }\n  /**\n   * Check if the browser supports mediaDevices.getUserMedia.\n   *\n   * @returns Whether the function is supported.\n   */\n  canGetUserMedia() {\n    return !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\n  }\n  /**\n   * Check if the browser supports MediaRecorder.\n   *\n   * @returns Whether the function is supported.\n   */\n  canRecordMedia() {\n    return !!window.MediaRecorder;\n  }\n  /**\n   * Closes the keyboard.\n   */\n  closeKeyboard() {\n    if (CorePlatform.isMobile()) {\n      Keyboard.hide();\n    }\n  }\n  /**\n   * Install and upgrade a certain schema.\n   *\n   * @param schema The schema to create.\n   * @returns Promise resolved when done.\n   */\n  createTablesFromSchema(schema) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.logger.debug(`Apply schema to app DB: ${schema.name}`);\n      const oldVersion = yield _this2.getInstalledSchemaVersion(schema);\n      if (oldVersion >= schema.version) {\n        // Version already installed, nothing else to do.\n        return;\n      }\n      _this2.logger.debug(`Migrating schema '${schema.name}' of app DB from version ${oldVersion} to ${schema.version}`);\n      if (schema.tables) {\n        yield _this2.getDB().createTablesFromSchema(schema.tables);\n      }\n      if (schema.install && oldVersion === 0) {\n        yield schema.install(_this2.getDB());\n      }\n      if (schema.migrate && oldVersion > 0) {\n        yield schema.migrate(_this2.getDB(), oldVersion);\n      }\n      // Set installed version.\n      yield _this2.schemaVersionsTable.insert({\n        name: schema.name,\n        version: schema.version\n      });\n    })();\n  }\n  /**\n   * Delete table schema.\n   *\n   * @param name Schema name.\n   */\n  deleteTableSchema(name) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield _this3.schemaVersionsTable.deleteByPrimaryKey({\n        name\n      });\n    })();\n  }\n  /**\n   * Get the application global database.\n   *\n   * @returns App's DB.\n   */\n  getDB() {\n    if (!this.db) {\n      this.db = CoreDB.getDB(DBNAME);\n    }\n    return this.db;\n  }\n  /**\n   * Get app store URL.\n   *\n   * @param storesConfig Config params to send the user to the right place.\n   * @returns Store URL.\n   */\n  getAppStoreUrl(storesConfig) {\n    if (CorePlatform.isIOS() && storesConfig.ios) {\n      return 'itms-apps://itunes.apple.com/app/' + storesConfig.ios;\n    }\n    if (CorePlatform.isAndroid() && storesConfig.android) {\n      return 'market://details?id=' + storesConfig.android;\n    }\n    if (CorePlatform.isMobile() && storesConfig.mobile) {\n      return storesConfig.mobile;\n    }\n    return storesConfig.default;\n  }\n  /**\n   * Get platform major version number.\n   *\n   * @returns The platform major number.\n   * @deprecated since 4.1.1. Use CorePlatform.getPlatformMajorVersion instead.\n   */\n  getPlatformMajorVersion() {\n    return CorePlatform.getPlatformMajorVersion();\n  }\n  /**\n   * Checks if the app is running in an Android mobile or tablet device.\n   *\n   * @returns Whether the app is running in an Android mobile or tablet device.\n   * @deprecated since 4.1.1. Use CorePlatform.isAndroid instead.\n   */\n  isAndroid() {\n    return CorePlatform.isAndroid();\n  }\n  /**\n   * Checks if the app is running in an iOS mobile or tablet device.\n   *\n   * @returns Whether the app is running in an iOS mobile or tablet device.\n   * @deprecated since 4.1.1. Use CorePlatform.isIOS instead.\n   */\n  isIOS() {\n    return CorePlatform.isIOS();\n  }\n  /**\n   * Check if the keyboard is closing.\n   *\n   * @returns Whether keyboard is closing (animating).\n   */\n  isKeyboardClosing() {\n    return this.keyboardClosing;\n  }\n  /**\n   * Check if the keyboard is being opened.\n   *\n   * @returns Whether keyboard is opening (animating).\n   */\n  isKeyboardOpening() {\n    return this.keyboardOpening;\n  }\n  /**\n   * Check if the keyboard is visible.\n   *\n   * @returns Whether keyboard is visible.\n   */\n  isKeyboardVisible() {\n    return this.isKeyboardShown;\n  }\n  /**\n   * Checks if the app is running in a mobile or tablet device (Cordova).\n   *\n   * @returns Whether the app is running in a mobile or tablet device.\n   * @deprecated since 4.1. Use CorePlatform instead.\n   */\n  isMobile() {\n    return CorePlatform.isMobile();\n  }\n  /**\n   * Checks if the current window is wider than a mobile.\n   *\n   * @returns Whether the app the current window is wider than a mobile.\n   */\n  isWide() {\n    return CorePlatform.width() > 768;\n  }\n  /**\n   * Returns whether we are online.\n   *\n   * @returns Whether the app is online.\n   * @deprecated since 4.1. Use CoreNetwork instead.\n   */\n  isOnline() {\n    return CoreNetwork.isOnline();\n  }\n  /**\n   * Check if device uses a limited connection.\n   *\n   * @returns Whether the device uses a limited connection.\n   * @deprecated since 4.1. Use CoreNetwork instead.\n   */\n  isNetworkAccessLimited() {\n    return CoreNetwork.isNetworkAccessLimited();\n  }\n  /**\n   * Check if device uses a wifi connection.\n   *\n   * @returns Whether the device uses a wifi connection.\n   * @deprecated since 4.1. Use CoreNetwork instead.\n   */\n  isWifi() {\n    return CoreNetwork.isWifi();\n  }\n  /**\n   * Open the keyboard.\n   */\n  openKeyboard() {\n    // Open keyboard is not supported in desktop and in iOS.\n    if (CorePlatform.isAndroid()) {\n      Keyboard.show();\n    }\n  }\n  /**\n   * Notify that Keyboard has been shown.\n   *\n   * @param keyboardHeight Keyboard height.\n   */\n  onKeyboardShow(keyboardHeight) {\n    document.body.classList.add('keyboard-is-open');\n    this.setKeyboardShown(true);\n    // Error on iOS calculating size.\n    // More info: https://github.com/ionic-team/ionic-plugin-keyboard/issues/276 .\n    CoreEvents.trigger(CoreEvents.KEYBOARD_CHANGE, keyboardHeight);\n  }\n  /**\n   * Notify that Keyboard has been hidden.\n   */\n  onKeyboardHide() {\n    document.body.classList.remove('keyboard-is-open');\n    this.setKeyboardShown(false);\n    CoreEvents.trigger(CoreEvents.KEYBOARD_CHANGE, 0);\n  }\n  /**\n   * Notify that Keyboard is about to be shown.\n   */\n  onKeyboardWillShow() {\n    this.keyboardOpening = true;\n    this.keyboardClosing = false;\n  }\n  /**\n   * Notify that Keyboard is about to be hidden.\n   */\n  onKeyboardWillHide() {\n    this.keyboardOpening = false;\n    this.keyboardClosing = true;\n  }\n  /**\n   * Set keyboard shown or hidden.\n   *\n   * @param shown Whether the keyboard is shown or hidden.\n   */\n  setKeyboardShown(shown) {\n    this.isKeyboardShown = shown;\n    this.keyboardOpening = false;\n    this.keyboardClosing = false;\n  }\n  /**\n   * Start an SSO authentication process.\n   * Please notice that this function should be called when the app receives the new token from the browser,\n   * NOT when the browser is opened.\n   */\n  startSSOAuthentication() {\n    this.ssoAuthenticationDeferred = new CorePromisedValue();\n    // Resolve it automatically after 10 seconds (it should never take that long).\n    const cancelTimeout = setTimeout(() => this.finishSSOAuthentication(), 10000);\n    // If the promise is resolved because finishSSOAuthentication is called, stop the cancel promise.\n    // eslint-disable-next-line promise/catch-or-return\n    this.ssoAuthenticationDeferred.then(() => clearTimeout(cancelTimeout));\n  }\n  /**\n   * Finish an SSO authentication process.\n   */\n  finishSSOAuthentication() {\n    if (this.ssoAuthenticationDeferred) {\n      this.ssoAuthenticationDeferred.resolve();\n      this.ssoAuthenticationDeferred = undefined;\n    }\n  }\n  /**\n   * Check if there's an ongoing SSO authentication process.\n   *\n   * @returns Whether there's a SSO authentication ongoing.\n   */\n  isSSOAuthenticationOngoing() {\n    return !!this.ssoAuthenticationDeferred;\n  }\n  /**\n   * Returns a promise that will be resolved once SSO authentication finishes.\n   *\n   * @returns Promise resolved once SSO authentication finishes.\n   */\n  waitForSSOAuthentication() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.ssoAuthenticationDeferred;\n    })();\n  }\n  /**\n   * Wait until the application is resumed.\n   *\n   * @param timeout Maximum time to wait, use null to wait forever.\n   */\n  waitForResume(timeout = null) {\n    return _asyncToGenerator(function* () {\n      let deferred = new CorePromisedValue();\n      let resumeSubscription = null;\n      let timeoutId = null;\n      const stopWaiting = () => {\n        var _resumeSubscription;\n        if (!deferred) {\n          return;\n        }\n        deferred.resolve();\n        (_resumeSubscription = resumeSubscription) === null || _resumeSubscription === void 0 || _resumeSubscription.unsubscribe();\n        timeoutId && clearTimeout(timeoutId);\n        deferred = null;\n      };\n      resumeSubscription = CorePlatform.resume.subscribe(stopWaiting);\n      timeoutId = timeout ? window.setTimeout(stopWaiting, timeout) : null;\n      yield deferred;\n    })();\n  }\n  /**\n   * Read redirect data from local storage and clear it if it existed.\n   */\n  consumeStorageRedirect() {\n    var _localStorage;\n    if (!((_localStorage = localStorage) !== null && _localStorage !== void 0 && _localStorage.getItem)) {\n      return;\n    }\n    try {\n      // Read data from storage.\n      const jsonData = localStorage.getItem('CoreRedirect');\n      if (!jsonData) {\n        return;\n      }\n      // Clear storage.\n      localStorage.removeItem('CoreRedirect');\n      // Remember redirect data.\n      const data = JSON.parse(jsonData);\n      if (!CoreObject.isEmpty(data)) {\n        this.redirect = data;\n      }\n    } catch (error) {\n      this.logger.error('Error loading redirect data:', error);\n    }\n  }\n  /**\n   * Retrieve and forget redirect data.\n   *\n   * @returns Redirect data if any.\n   */\n  consumeMemoryRedirect() {\n    const redirect = this.getRedirect();\n    this.forgetRedirect();\n    if (redirect && (!redirect.timemodified || Date.now() - redirect.timemodified > 300000)) {\n      // Redirect data is only valid for 5 minutes, discard it.\n      return null;\n    }\n    return redirect;\n  }\n  /**\n   * Close the app.\n   */\n  closeApp() {\n    var _nav$app;\n    const nav = window.navigator; // eslint-disable-line @typescript-eslint/no-explicit-any\n    (_nav$app = nav.app) === null || _nav$app === void 0 || _nav$app.exitApp();\n  }\n  /**\n   * Forget redirect data.\n   */\n  forgetRedirect() {\n    delete this.redirect;\n  }\n  /**\n   * Retrieve redirect data.\n   *\n   * @returns Redirect data if any.\n   */\n  getRedirect() {\n    return this.redirect || null;\n  }\n  /**\n   * Store redirect params.\n   *\n   * @param siteId Site ID.\n   * @param redirectData Redirect data.\n   */\n  storeRedirect(siteId, redirectData = {}) {\n    if (!redirectData.redirectPath && !redirectData.urlToOpen) {\n      return;\n    }\n    try {\n      const redirect = _objectSpread({\n        siteId,\n        timemodified: Date.now()\n      }, redirectData);\n      localStorage.setItem('CoreRedirect', JSON.stringify(redirect));\n    } catch (_unused) {\n      // Ignore errors.\n    }\n  }\n  /**\n   * Set System UI Colors.\n   */\n  setSystemUIColors() {\n    this.setStatusBarColor();\n    this.setAndroidNavigationBarColor();\n  }\n  /**\n   * Set StatusBar color depending on platform.\n   *\n   * @param color RGB color to use as status bar background. If not set the css variable will be read.\n   */\n  setStatusBarColor(color) {\n    if (!CorePlatform.isMobile()) {\n      return;\n    }\n    if (!color) {\n      // Get the default color to change it.\n      color = CoreColors.getToolbarBackgroundColor();\n    }\n    this.logger.debug(`Set status bar color ${color}`);\n    StatusBar.backgroundColorByHexString(color);\n  }\n  /**\n   * Set value of forceOffline flag. If true, the app will think the device is offline.\n   *\n   * @param value Value to set.\n   * @deprecated since 4.1. Use CoreNetwork.setForceConnectionMode instead.\n   */\n  setForceOffline(value) {\n    CoreNetwork.setForceConnectionMode(value ? CoreNetworkConnection.NONE : CoreNetworkConnection.WIFI);\n  }\n  /**\n   * Get the installed version for the given schema.\n   *\n   * @param schema App schema.\n   * @returns Installed version number, or 0 if the schema is not installed.\n   */\n  getInstalledSchemaVersion(schema) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Fetch installed version of the schema.\n        const entry = yield _this5.schemaVersionsTable.getOneByPrimaryKey({\n          name: schema.name\n        });\n        return entry.version;\n      } catch (_unused2) {\n        // No installed version yet.\n        return 0;\n      }\n    })();\n  }\n  /**\n   * Set NavigationBar color for Android\n   *\n   * @param color RGB color to use as background. If not set the css variable will be read.\n   */\n  setAndroidNavigationBarColor(color) {\n    if (!CorePlatform.isAndroid()) {\n      return;\n    }\n    if (!color) {\n      // Get the default color to change it.\n      color = CoreColors.getBottomPageBackgroundColor();\n    }\n    this.logger.debug(`Set navigation bar color ${color}`);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.StatusBar.navigationBackgroundColorByHexString(color);\n  }\n}\n_class = CoreAppProvider;\n_class.ɵfac = function CoreAppProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreApp = makeSingleton(CoreAppProvider);","map":{"version":3,"names":["CoreDB","CoreEvents","makeSingleton","Keyboard","StatusBar","CoreLogger","CoreColors","DBNAME","SCHEMA_VERSIONS_TABLE_NAME","SCHEMA_VERSIONS_TABLE_SCHEMA","CoreObject","CoreDatabaseCachingStrategy","CoreDatabaseTableProxy","asyncInstance","CorePromisedValue","CorePlatform","CoreNetwork","CoreNetworkConnection","CoreMainMenuProvider","CoreAppProvider","constructor","isKeyboardShown","keyboardOpening","keyboardClosing","schemaVersionsTable","logger","getInstance","isAndroid","mainMenuListener","on","MAIN_MENU_VISIBILITY_UPDATED","setAndroidNavigationBarColor","isAutomated","navigator","webdriver","getForcedTimezone","initializeDatabase","_this","_asyncToGenerator","database","getDB","createTableFromSchema","cachingStrategy","Eager","initialize","setInstance","canGetUserMedia","mediaDevices","getUserMedia","canRecordMedia","window","MediaRecorder","closeKeyboard","isMobile","hide","createTablesFromSchema","schema","_this2","debug","name","oldVersion","getInstalledSchemaVersion","version","tables","install","migrate","insert","deleteTableSchema","_this3","deleteByPrimaryKey","db","getAppStoreUrl","storesConfig","isIOS","ios","android","mobile","default","getPlatformMajorVersion","isKeyboardClosing","isKeyboardOpening","isKeyboardVisible","isWide","width","isOnline","isNetworkAccessLimited","isWifi","openKeyboard","show","onKeyboardShow","keyboardHeight","document","body","classList","add","setKeyboardShown","trigger","KEYBOARD_CHANGE","onKeyboardHide","remove","onKeyboardWillShow","onKeyboardWillHide","shown","startSSOAuthentication","ssoAuthenticationDeferred","cancelTimeout","setTimeout","finishSSOAuthentication","then","clearTimeout","resolve","undefined","isSSOAuthenticationOngoing","waitForSSOAuthentication","_this4","waitForResume","timeout","deferred","resumeSubscription","timeoutId","stopWaiting","_resumeSubscription","unsubscribe","resume","subscribe","consumeStorageRedirect","_localStorage","localStorage","getItem","jsonData","removeItem","data","JSON","parse","isEmpty","redirect","error","consumeMemoryRedirect","getRedirect","forgetRedirect","timemodified","Date","now","closeApp","_nav$app","nav","app","exitApp","storeRedirect","siteId","redirectData","redirectPath","urlToOpen","_objectSpread","setItem","stringify","_unused","setSystemUIColors","setStatusBarColor","color","getToolbarBackgroundColor","backgroundColorByHexString","setForceOffline","value","setForceConnectionMode","NONE","WIFI","_this5","entry","getOneByPrimaryKey","_unused2","getBottomPageBackgroundColor","navigationBackgroundColorByHexString","factory","ɵfac","providedIn","CoreApp"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/app.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreDB } from '@services/db';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { SQLiteDB, SQLiteDBTableSchema } from '@classes/sqlitedb';\n\nimport { makeSingleton, Keyboard, StatusBar } from '@singletons';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreColors } from '@singletons/colors';\nimport { DBNAME, SCHEMA_VERSIONS_TABLE_NAME, SCHEMA_VERSIONS_TABLE_SCHEMA, SchemaVersionsDBEntry } from '@services/database/app';\nimport { CoreObject } from '@singletons/object';\nimport { CoreRedirectPayload } from './navigator';\nimport { CoreDatabaseCachingStrategy, CoreDatabaseTableProxy } from '@classes/database/database-table-proxy';\nimport { asyncInstance } from '../utils/async-instance';\nimport { CoreDatabaseTable } from '@classes/database/database-table';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { Subscription } from 'rxjs';\nimport { CorePlatform } from '@services/platform';\nimport { CoreNetwork, CoreNetworkConnection } from '@services/network';\nimport { CoreMainMenuProvider } from '@features/mainmenu/services/mainmenu';\n\n/**\n * Factory to provide some global functionalities, like access to the global app database.\n *\n * @description\n * Each service or component should be responsible of creating their own database tables. Example:\n *\n * ```ts\n * constructor(appProvider: CoreAppProvider) {\n *     this.appDB = appProvider.getDB();\n *     this.appDB.createTableFromSchema(this.tableSchema);\n * }\n * ```\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreAppProvider {\n\n    protected db?: SQLiteDB;\n    protected logger: CoreLogger;\n    protected ssoAuthenticationDeferred?: CorePromisedValue<void>;\n    protected isKeyboardShown = false;\n    protected keyboardOpening = false;\n    protected keyboardClosing = false;\n    protected redirect?: CoreRedirectData;\n    protected schemaVersionsTable = asyncInstance<CoreDatabaseTable<SchemaVersionsDBEntry, 'name'>>();\n    protected mainMenuListener?: CoreEventObserver;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreAppProvider');\n        if (CorePlatform.isAndroid()) {\n            this.mainMenuListener =\n                CoreEvents.on(CoreMainMenuProvider.MAIN_MENU_VISIBILITY_UPDATED, () => this.setAndroidNavigationBarColor());\n        }\n    }\n\n    /**\n     * Returns whether the user agent is controlled by automation. I.e. Behat testing.\n     *\n     * @returns True if the user agent is controlled by automation, false otherwise.\n     */\n    static isAutomated(): boolean {\n        return !!navigator.webdriver;\n    }\n\n    /**\n     * Returns the forced timezone to use. Timezone is forced for automated tests.\n     *\n     * @returns Timezone. Undefined to use the user's timezone.\n     */\n    static getForcedTimezone(): string | undefined {\n        if (CoreAppProvider.isAutomated()) {\n            // Use the same timezone forced for LMS in tests.\n            return 'Australia/Perth';\n        }\n    }\n\n    /**\n     * Initialize database.\n     */\n    async initializeDatabase(): Promise<void> {\n        const database = this.getDB();\n\n        await database.createTableFromSchema(SCHEMA_VERSIONS_TABLE_SCHEMA);\n\n        const schemaVersionsTable = new CoreDatabaseTableProxy<SchemaVersionsDBEntry, 'name'>(\n            { cachingStrategy: CoreDatabaseCachingStrategy.Eager },\n            database,\n            SCHEMA_VERSIONS_TABLE_NAME,\n            ['name'],\n        );\n\n        await schemaVersionsTable.initialize();\n\n        this.schemaVersionsTable.setInstance(schemaVersionsTable);\n    }\n\n    /**\n     * Check if the browser supports mediaDevices.getUserMedia.\n     *\n     * @returns Whether the function is supported.\n     */\n    canGetUserMedia(): boolean {\n        return !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\n    }\n\n    /**\n     * Check if the browser supports MediaRecorder.\n     *\n     * @returns Whether the function is supported.\n     */\n    canRecordMedia(): boolean {\n        return !!window.MediaRecorder;\n    }\n\n    /**\n     * Closes the keyboard.\n     */\n    closeKeyboard(): void {\n        if (CorePlatform.isMobile()) {\n            Keyboard.hide();\n        }\n    }\n\n    /**\n     * Install and upgrade a certain schema.\n     *\n     * @param schema The schema to create.\n     * @returns Promise resolved when done.\n     */\n    async createTablesFromSchema(schema: CoreAppSchema): Promise<void> {\n        this.logger.debug(`Apply schema to app DB: ${schema.name}`);\n\n        const oldVersion = await this.getInstalledSchemaVersion(schema);\n\n        if (oldVersion >= schema.version) {\n            // Version already installed, nothing else to do.\n            return;\n        }\n\n        this.logger.debug(`Migrating schema '${schema.name}' of app DB from version ${oldVersion} to ${schema.version}`);\n\n        if (schema.tables) {\n            await this.getDB().createTablesFromSchema(schema.tables);\n        }\n        if (schema.install && oldVersion === 0) {\n            await schema.install(this.getDB());\n        }\n        if (schema.migrate && oldVersion > 0) {\n            await schema.migrate(this.getDB(), oldVersion);\n        }\n\n        // Set installed version.\n        await this.schemaVersionsTable.insert({ name: schema.name, version: schema.version });\n    }\n\n    /**\n     * Delete table schema.\n     *\n     * @param name Schema name.\n     */\n    async deleteTableSchema(name: string): Promise<void> {\n        await this.schemaVersionsTable.deleteByPrimaryKey({ name });\n    }\n\n    /**\n     * Get the application global database.\n     *\n     * @returns App's DB.\n     */\n    getDB(): SQLiteDB {\n        if (!this.db) {\n            this.db = CoreDB.getDB(DBNAME);\n        }\n\n        return this.db;\n    }\n\n    /**\n     * Get app store URL.\n     *\n     * @param storesConfig Config params to send the user to the right place.\n     * @returns Store URL.\n     */\n    getAppStoreUrl(storesConfig: CoreStoreConfig): string | undefined {\n        if (CorePlatform.isIOS() && storesConfig.ios) {\n            return 'itms-apps://itunes.apple.com/app/' + storesConfig.ios;\n        }\n\n        if (CorePlatform.isAndroid() && storesConfig.android) {\n            return 'market://details?id=' + storesConfig.android;\n        }\n\n        if (CorePlatform.isMobile() && storesConfig.mobile) {\n            return storesConfig.mobile;\n        }\n\n        return storesConfig.default;\n    }\n\n    /**\n     * Get platform major version number.\n     *\n     * @returns The platform major number.\n     * @deprecated since 4.1.1. Use CorePlatform.getPlatformMajorVersion instead.\n     */\n    getPlatformMajorVersion(): number {\n        return CorePlatform.getPlatformMajorVersion();\n    }\n\n    /**\n     * Checks if the app is running in an Android mobile or tablet device.\n     *\n     * @returns Whether the app is running in an Android mobile or tablet device.\n     * @deprecated since 4.1.1. Use CorePlatform.isAndroid instead.\n     */\n    isAndroid(): boolean {\n        return CorePlatform.isAndroid();\n    }\n\n    /**\n     * Checks if the app is running in an iOS mobile or tablet device.\n     *\n     * @returns Whether the app is running in an iOS mobile or tablet device.\n     * @deprecated since 4.1.1. Use CorePlatform.isIOS instead.\n     */\n    isIOS(): boolean {\n        return CorePlatform.isIOS();\n    }\n\n    /**\n     * Check if the keyboard is closing.\n     *\n     * @returns Whether keyboard is closing (animating).\n     */\n    isKeyboardClosing(): boolean {\n        return this.keyboardClosing;\n    }\n\n    /**\n     * Check if the keyboard is being opened.\n     *\n     * @returns Whether keyboard is opening (animating).\n     */\n    isKeyboardOpening(): boolean {\n        return this.keyboardOpening;\n    }\n\n    /**\n     * Check if the keyboard is visible.\n     *\n     * @returns Whether keyboard is visible.\n     */\n    isKeyboardVisible(): boolean {\n        return this.isKeyboardShown;\n    }\n\n    /**\n     * Checks if the app is running in a mobile or tablet device (Cordova).\n     *\n     * @returns Whether the app is running in a mobile or tablet device.\n     * @deprecated since 4.1. Use CorePlatform instead.\n     */\n    isMobile(): boolean {\n        return CorePlatform.isMobile();\n    }\n\n    /**\n     * Checks if the current window is wider than a mobile.\n     *\n     * @returns Whether the app the current window is wider than a mobile.\n     */\n    isWide(): boolean {\n        return CorePlatform.width() > 768;\n    }\n\n    /**\n     * Returns whether we are online.\n     *\n     * @returns Whether the app is online.\n     * @deprecated since 4.1. Use CoreNetwork instead.\n     */\n    isOnline(): boolean {\n        return CoreNetwork.isOnline();\n    }\n\n    /**\n     * Check if device uses a limited connection.\n     *\n     * @returns Whether the device uses a limited connection.\n     * @deprecated since 4.1. Use CoreNetwork instead.\n     */\n    isNetworkAccessLimited(): boolean {\n        return CoreNetwork.isNetworkAccessLimited();\n    }\n\n    /**\n     * Check if device uses a wifi connection.\n     *\n     * @returns Whether the device uses a wifi connection.\n     * @deprecated since 4.1. Use CoreNetwork instead.\n     */\n    isWifi(): boolean {\n        return CoreNetwork.isWifi();\n    }\n\n    /**\n     * Open the keyboard.\n     */\n    openKeyboard(): void {\n        // Open keyboard is not supported in desktop and in iOS.\n        if (CorePlatform.isAndroid()) {\n            Keyboard.show();\n        }\n    }\n\n    /**\n     * Notify that Keyboard has been shown.\n     *\n     * @param keyboardHeight Keyboard height.\n     */\n    onKeyboardShow(keyboardHeight: number): void {\n        document.body.classList.add('keyboard-is-open');\n        this.setKeyboardShown(true);\n        // Error on iOS calculating size.\n        // More info: https://github.com/ionic-team/ionic-plugin-keyboard/issues/276 .\n        CoreEvents.trigger(CoreEvents.KEYBOARD_CHANGE, keyboardHeight);\n    }\n\n    /**\n     * Notify that Keyboard has been hidden.\n     */\n    onKeyboardHide(): void {\n        document.body.classList.remove('keyboard-is-open');\n        this.setKeyboardShown(false);\n        CoreEvents.trigger(CoreEvents.KEYBOARD_CHANGE, 0);\n    }\n\n    /**\n     * Notify that Keyboard is about to be shown.\n     */\n    onKeyboardWillShow(): void {\n        this.keyboardOpening = true;\n        this.keyboardClosing = false;\n    }\n\n    /**\n     * Notify that Keyboard is about to be hidden.\n     */\n    onKeyboardWillHide(): void {\n        this.keyboardOpening = false;\n        this.keyboardClosing = true;\n    }\n\n    /**\n     * Set keyboard shown or hidden.\n     *\n     * @param shown Whether the keyboard is shown or hidden.\n     */\n    protected setKeyboardShown(shown: boolean): void {\n        this.isKeyboardShown = shown;\n        this.keyboardOpening = false;\n        this.keyboardClosing = false;\n    }\n\n    /**\n     * Start an SSO authentication process.\n     * Please notice that this function should be called when the app receives the new token from the browser,\n     * NOT when the browser is opened.\n     */\n    startSSOAuthentication(): void {\n        this.ssoAuthenticationDeferred = new CorePromisedValue();\n\n        // Resolve it automatically after 10 seconds (it should never take that long).\n        const cancelTimeout = setTimeout(() => this.finishSSOAuthentication(), 10000);\n\n        // If the promise is resolved because finishSSOAuthentication is called, stop the cancel promise.\n        // eslint-disable-next-line promise/catch-or-return\n        this.ssoAuthenticationDeferred.then(() => clearTimeout(cancelTimeout));\n    }\n\n    /**\n     * Finish an SSO authentication process.\n     */\n    finishSSOAuthentication(): void {\n        if (this.ssoAuthenticationDeferred) {\n            this.ssoAuthenticationDeferred.resolve();\n            this.ssoAuthenticationDeferred = undefined;\n        }\n    }\n\n    /**\n     * Check if there's an ongoing SSO authentication process.\n     *\n     * @returns Whether there's a SSO authentication ongoing.\n     */\n    isSSOAuthenticationOngoing(): boolean {\n        return !!this.ssoAuthenticationDeferred;\n    }\n\n    /**\n     * Returns a promise that will be resolved once SSO authentication finishes.\n     *\n     * @returns Promise resolved once SSO authentication finishes.\n     */\n    async waitForSSOAuthentication(): Promise<void> {\n        await this.ssoAuthenticationDeferred;\n    }\n\n    /**\n     * Wait until the application is resumed.\n     *\n     * @param timeout Maximum time to wait, use null to wait forever.\n     */\n    async waitForResume(timeout: number | null = null): Promise<void> {\n        let deferred: CorePromisedValue<void> | null = new CorePromisedValue();\n        let resumeSubscription: Subscription | null = null;\n        let timeoutId: number | null = null;\n\n        const stopWaiting = () => {\n            if (!deferred) {\n                return;\n            }\n\n            deferred.resolve();\n            resumeSubscription?.unsubscribe();\n            timeoutId && clearTimeout(timeoutId);\n\n            deferred = null;\n        };\n\n        resumeSubscription = CorePlatform.resume.subscribe(stopWaiting);\n        timeoutId = timeout ? window.setTimeout(stopWaiting, timeout) : null;\n\n        await deferred;\n    }\n\n    /**\n     * Read redirect data from local storage and clear it if it existed.\n     */\n    consumeStorageRedirect(): void {\n        if (!localStorage?.getItem) {\n            return;\n        }\n\n        try {\n            // Read data from storage.\n            const jsonData = localStorage.getItem('CoreRedirect');\n\n            if (!jsonData) {\n                return;\n            }\n\n            // Clear storage.\n            localStorage.removeItem('CoreRedirect');\n\n            // Remember redirect data.\n            const data: CoreRedirectData = JSON.parse(jsonData);\n\n            if (!CoreObject.isEmpty(data)) {\n                this.redirect = data;\n            }\n        } catch (error) {\n            this.logger.error('Error loading redirect data:', error);\n        }\n    }\n\n    /**\n     * Retrieve and forget redirect data.\n     *\n     * @returns Redirect data if any.\n     */\n    consumeMemoryRedirect(): CoreRedirectData | null {\n        const redirect = this.getRedirect();\n\n        this.forgetRedirect();\n\n        if (redirect && (!redirect.timemodified || Date.now() - redirect.timemodified > 300000)) {\n            // Redirect data is only valid for 5 minutes, discard it.\n            return null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Close the app.\n     */\n    closeApp(): void {\n        const nav = <any> window.navigator; // eslint-disable-line @typescript-eslint/no-explicit-any\n        nav.app?.exitApp();\n    }\n\n    /**\n     * Forget redirect data.\n     */\n    forgetRedirect(): void {\n        delete this.redirect;\n    }\n\n    /**\n     * Retrieve redirect data.\n     *\n     * @returns Redirect data if any.\n     */\n    getRedirect(): CoreRedirectData | null {\n        return this.redirect || null;\n    }\n\n    /**\n     * Store redirect params.\n     *\n     * @param siteId Site ID.\n     * @param redirectData Redirect data.\n     */\n    storeRedirect(siteId: string, redirectData: CoreRedirectPayload = {}): void {\n        if (!redirectData.redirectPath && !redirectData.urlToOpen) {\n            return;\n        }\n\n        try {\n            const redirect: CoreRedirectData = {\n                siteId,\n                timemodified: Date.now(),\n                ...redirectData,\n            };\n\n            localStorage.setItem('CoreRedirect', JSON.stringify(redirect));\n        } catch {\n            // Ignore errors.\n        }\n    }\n\n    /**\n     * Set System UI Colors.\n     */\n    setSystemUIColors(): void {\n        this.setStatusBarColor();\n        this.setAndroidNavigationBarColor();\n    }\n\n    /**\n     * Set StatusBar color depending on platform.\n     *\n     * @param color RGB color to use as status bar background. If not set the css variable will be read.\n     */\n    setStatusBarColor(color?: string): void {\n        if (!CorePlatform.isMobile()) {\n            return;\n        }\n\n        if (!color) {\n            // Get the default color to change it.\n            color = CoreColors.getToolbarBackgroundColor();\n        }\n\n        this.logger.debug(`Set status bar color ${color}`);\n\n        StatusBar.backgroundColorByHexString(color);\n    }\n\n    /**\n     * Set value of forceOffline flag. If true, the app will think the device is offline.\n     *\n     * @param value Value to set.\n     * @deprecated since 4.1. Use CoreNetwork.setForceConnectionMode instead.\n     */\n    setForceOffline(value: boolean): void {\n        CoreNetwork.setForceConnectionMode(value ? CoreNetworkConnection.NONE : CoreNetworkConnection.WIFI);\n    }\n\n    /**\n     * Get the installed version for the given schema.\n     *\n     * @param schema App schema.\n     * @returns Installed version number, or 0 if the schema is not installed.\n     */\n    protected async getInstalledSchemaVersion(schema: CoreAppSchema): Promise<number> {\n        try {\n            // Fetch installed version of the schema.\n            const entry = await this.schemaVersionsTable.getOneByPrimaryKey({ name: schema.name });\n\n            return entry.version;\n        } catch {\n            // No installed version yet.\n            return 0;\n        }\n    }\n\n    /**\n     * Set NavigationBar color for Android\n     *\n     * @param color RGB color to use as background. If not set the css variable will be read.\n     */\n    protected setAndroidNavigationBarColor(color?: string): void {\n        if (!CorePlatform.isAndroid()) {\n            return;\n        }\n\n        if (!color) {\n            // Get the default color to change it.\n            color = CoreColors.getBottomPageBackgroundColor();\n        }\n\n        this.logger.debug(`Set navigation bar color ${color}`);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (<any> window).StatusBar.navigationBackgroundColorByHexString(color);\n    }\n\n}\n\nexport const CoreApp = makeSingleton(CoreAppProvider);\n\n/**\n * Data stored for a redirect to another page/site.\n */\nexport type CoreRedirectData = CoreRedirectPayload & {\n    siteId?: string; // ID of the site to load.\n    timemodified?: number; // Timestamp when this redirect was last modified.\n};\n\n/**\n * Store config data.\n */\nexport type CoreStoreConfig = {\n    /**\n     * ID of the Apple store where the mobile iOS app is uploaded.\n     */\n    ios?: string;\n\n    /**\n     * ID of the Google play store where the android app is uploaded.\n     */\n    android?: string;\n\n    /**\n     * Fallback URL when the mobile options is not set.\n     */\n    mobile?: string;\n\n    /**\n     * Fallback URL when the other fallbacks options are not set.\n     */\n    default?: string;\n};\n\n/**\n * App DB schema and migration function.\n */\nexport type CoreAppSchema = {\n    /**\n     * Name of the schema.\n     */\n    name: string;\n\n    /**\n     * Latest version of the schema (integer greater than 0).\n     */\n    version: number;\n\n    /**\n     * Tables to create when installing or upgrading the schema.\n     */\n    tables?: SQLiteDBTableSchema[];\n\n    /**\n     * Migrates the schema to the latest version.\n     *\n     * Called when upgrading the schema, after creating the defined tables.\n     *\n     * @param db The affected DB.\n     * @param oldVersion Old version of the schema or 0 if not installed.\n     * @returns Promise resolved when done.\n     */\n    migrate?(db: SQLiteDB, oldVersion: number): Promise<void>;\n\n    /**\n     * Make changes to install the schema.\n     *\n     * Called when installing the schema, after creating the defined tables.\n     *\n     * @param db Site database.\n     * @returns Promise resolved when done.\n     */\n    install?(db: SQLiteDB): Promise<void> | void;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}