{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseModuleMainResourceComponent } from './main-resource-component';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreCourse } from '../services/course';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSites } from '@services/sites';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"../pages/contents/contents\";\n/**\n * Template class to easily create CoreCourseModuleMainComponent of activities.\n */\nexport class CoreCourseModuleMainActivityComponent extends CoreCourseModuleMainResourceComponent {\n  constructor(loggerName = 'CoreCourseModuleMainResourceComponent', content, courseContentsPage) {\n    super(loggerName, courseContentsPage);\n    this.content = content;\n    this.moduleName = ''; // Translated module name. Calculated from pluginName.\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _superprop_getNgOnInit = () => super.ngOnInit,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      yield _superprop_getNgOnInit().call(_this);\n      _this.hasOffline = false;\n      _this.moduleName = CoreCourse.translateModuleName(_this.pluginName || _this.moduleName || '');\n      if (_this.syncEventName) {\n        // Refresh data if this discussion is synchronized automatically.\n        _this.syncObserver = CoreEvents.on(_this.syncEventName, data => {\n          _this.autoSyncEventReceived(data);\n        }, _this.siteId);\n      }\n    })();\n  }\n  /**\n   * Compares sync event data with current data to check if refresh content is needed.\n   *\n   * @param syncEventData Data received on sync observer.\n   * @returns True if refresh is needed, false otherwise.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isRefreshSyncNeeded(syncEventData) {\n    return false;\n  }\n  /**\n   * An autosync event has been received, check if refresh is needed and update the view.\n   *\n   * @param syncEventData Data receiven on sync observer.\n   */\n  autoSyncEventReceived(syncEventData) {\n    if (this.isRefreshSyncNeeded(syncEventData)) {\n      // Refresh the data.\n      this.showLoadingAndRefresh(false);\n    }\n  }\n  /**\n   * Perform the refresh content function.\n   *\n   * @param sync If the refresh needs syncing.\n   * @param showErrors Wether to show errors to the user or hide them.\n   * @returns Resolved when done.\n   */\n  refreshContent(sync = false, showErrors = false) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.module) {\n        // This can happen if course format changes from single activity to weekly/topics.\n        return;\n      }\n      yield CoreUtils.ignoreErrors(Promise.all([_this2.invalidateContent(), _this2.showCompletion ? CoreCourse.invalidateModule(_this2.module.id) : undefined]));\n      yield _this2.loadContent(true, sync, showErrors);\n    })();\n  }\n  /**\n   * Show loading and perform the load content function.\n   *\n   * @param sync If the fetch needs syncing.\n   * @param showErrors Wether to show errors to the user or hide them.\n   * @returns Resolved when done.\n   */\n  showLoadingAndFetch(sync = false, showErrors = false) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _this3$content;\n      _this3.showLoading = true;\n      (_this3$content = _this3.content) === null || _this3$content === void 0 || _this3$content.scrollToTop();\n      yield _this3.loadContent(false, sync, showErrors);\n    })();\n  }\n  /**\n   * Show loading and perform the refresh content function.\n   *\n   * @param sync If the refresh needs syncing.\n   * @param showErrors Wether to show errors to the user or hide them.\n   * @returns Resolved when done.\n   */\n  showLoadingAndRefresh(sync = false, showErrors = false) {\n    var _this$content;\n    this.showLoading = true;\n    (_this$content = this.content) === null || _this$content === void 0 || _this$content.scrollToTop();\n    return this.refreshContent(sync, showErrors);\n  }\n  /**\n   * Download the component contents.\n   *\n   * @param refresh Whether we're refreshing data.\n   * @param sync If the refresh needs syncing.\n   * @param showErrors Wether to show errors to the user or hide them.\n   * @returns Promise resolved when done.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fetchContent(refresh = false, sync = false, showErrors = false) {\n    return _asyncToGenerator(function* () {\n      return;\n    })();\n  }\n  /**\n   * Loads the component contents and shows the corresponding error.\n   *\n   * @param refresh Whether we're refreshing data.\n   * @param sync If the refresh needs syncing.\n   * @param showErrors Wether to show errors to the user or hide them.\n   * @returns Promise resolved when done.\n   */\n  loadContent(refresh, sync = false, showErrors = false) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this4.module) {\n        // This can happen if course format changes from single activity to weekly/topics.\n        return;\n      }\n      try {\n        if (refresh && _this4.showCompletion) {\n          yield CoreUtils.ignoreErrors(_this4.fetchModule());\n        }\n        yield _this4.fetchContent(refresh, sync, showErrors);\n        _this4.finishSuccessfulFetch();\n      } catch (error) {\n        var _CoreSites$getCurrent;\n        if (!refresh && !((_CoreSites$getCurrent = CoreSites.getCurrentSite()) !== null && _CoreSites$getCurrent !== void 0 && _CoreSites$getCurrent.isOfflineDisabled()) && _this4.isNotFoundError(error)) {\n          // Module not found, retry without using cache.\n          return yield _this4.refreshContent(sync);\n        }\n        CoreDomUtils.showErrorModalDefault(error, _this4.fetchContentDefaultError, true);\n      } finally {\n        _this4.showLoading = false;\n      }\n    })();\n  }\n  /**\n   * Performs the sync of the activity.\n   *\n   * @returns Promise resolved when done.\n   */\n  sync() {\n    return _asyncToGenerator(function* () {\n      return {\n        updated: false,\n        warnings: []\n      };\n    })();\n  }\n  /**\n   * Checks if sync has updated data on the server.\n   *\n   * @param result Data returned on the sync function.\n   * @returns If data has been updated or not.\n   */\n  hasSyncSucceed(result) {\n    return result.updated;\n  }\n  /**\n   * Tries to synchronize the activity.\n   *\n   * @param showErrors If show errors to the user of hide them.\n   * @returns Promise resolved with true if sync hast updated data to the server, false otherwise.\n   */\n  syncActivity(showErrors = false) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield _this5.sync();\n        if (result.warnings.length) {\n          CoreDomUtils.showAlert(undefined, result.warnings[0]);\n        }\n        return _this5.hasSyncSucceed(result);\n      } catch (error) {\n        if (showErrors) {\n          CoreDomUtils.showErrorModalDefault(error, 'core.errorsync', true);\n        }\n        return false;\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$syncObserver;\n    super.ngOnDestroy();\n    (_this$syncObserver = this.syncObserver) === null || _this$syncObserver === void 0 || _this$syncObserver.off();\n  }\n}\n_class = CoreCourseModuleMainActivityComponent;\n_class.ɵfac = function CoreCourseModuleMainActivityComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject('', 8), i0.ɵɵdirectiveInject(i1.IonContent), i0.ɵɵdirectiveInject(i2.CoreCourseContentsPage));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    group: \"group\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function CoreCourseModuleMainActivityComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreCourseModuleMainResourceComponent","CoreEvents","CoreCourse","CoreUtils","CoreDomUtils","CoreSites","CoreCourseModuleMainActivityComponent","constructor","loggerName","content","courseContentsPage","moduleName","ngOnInit","_superprop_getNgOnInit","_this","_asyncToGenerator","call","hasOffline","translateModuleName","pluginName","syncEventName","syncObserver","on","data","autoSyncEventReceived","siteId","isRefreshSyncNeeded","syncEventData","showLoadingAndRefresh","refreshContent","sync","showErrors","_this2","module","ignoreErrors","Promise","all","invalidateContent","showCompletion","invalidateModule","id","undefined","loadContent","showLoadingAndFetch","_this3","_this3$content","showLoading","scrollToTop","_this$content","fetchContent","refresh","_this4","fetchModule","finishSuccessfulFetch","error","_CoreSites$getCurrent","getCurrentSite","isOfflineDisabled","isNotFoundError","showErrorModalDefault","fetchContentDefaultError","updated","warnings","hasSyncSucceed","result","syncActivity","_this5","length","showAlert","ngOnDestroy","_this$syncObserver","off","i0","ɵɵdirectiveInject","i1","IonContent","i2","CoreCourseContentsPage","selectors","inputs","group","features","ɵɵInheritDefinitionFeature","decls","vars","template","CoreCourseModuleMainActivityComponent_Template","rf","ctx","encapsulation"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/classes/main-activity-component.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core';\nimport { IonContent } from '@ionic/angular';\n\nimport { CoreCourseModuleMainResourceComponent } from './main-resource-component';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreCourse } from '../services/course';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreCourseContentsPage } from '../pages/contents/contents';\nimport { CoreSites } from '@services/sites';\nimport { CoreSyncResult } from '@services/sync';\n\n/**\n * Template class to easily create CoreCourseModuleMainComponent of activities.\n */\n@Component({\n    template: '',\n})\nexport class CoreCourseModuleMainActivityComponent extends CoreCourseModuleMainResourceComponent implements OnInit, OnDestroy {\n\n    @Input() group?: number; // Group ID the component belongs to.\n\n    moduleName = ''; // Translated module name. Calculated from pluginName.\n\n    protected syncObserver?: CoreEventObserver; // It will observe the sync auto event.\n    protected syncEventName?: string; // Auto sync event name.\n\n    constructor(\n        @Optional() @Inject('') loggerName: string = 'CoreCourseModuleMainResourceComponent',\n        protected content?: IonContent,\n        courseContentsPage?: CoreCourseContentsPage,\n    ) {\n        super(loggerName, courseContentsPage);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        await super.ngOnInit();\n\n        this.hasOffline = false;\n        this.moduleName = CoreCourse.translateModuleName(this.pluginName || this.moduleName || '');\n\n        if (this.syncEventName) {\n            // Refresh data if this discussion is synchronized automatically.\n            this.syncObserver = CoreEvents.on(this.syncEventName, (data) => {\n                this.autoSyncEventReceived(data);\n            }, this.siteId);\n        }\n    }\n\n    /**\n     * Compares sync event data with current data to check if refresh content is needed.\n     *\n     * @param syncEventData Data received on sync observer.\n     * @returns True if refresh is needed, false otherwise.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected isRefreshSyncNeeded(syncEventData: unknown): boolean {\n        return false;\n    }\n\n    /**\n     * An autosync event has been received, check if refresh is needed and update the view.\n     *\n     * @param syncEventData Data receiven on sync observer.\n     */\n    protected autoSyncEventReceived(syncEventData: unknown): void {\n        if (this.isRefreshSyncNeeded(syncEventData)) {\n            // Refresh the data.\n            this.showLoadingAndRefresh(false);\n        }\n    }\n\n    /**\n     * Perform the refresh content function.\n     *\n     * @param sync If the refresh needs syncing.\n     * @param showErrors Wether to show errors to the user or hide them.\n     * @returns Resolved when done.\n     */\n    protected async refreshContent(sync: boolean = false, showErrors: boolean = false): Promise<void> {\n        if (!this.module) {\n            // This can happen if course format changes from single activity to weekly/topics.\n            return;\n        }\n\n        await CoreUtils.ignoreErrors(Promise.all([\n            this.invalidateContent(),\n            this.showCompletion ? CoreCourse.invalidateModule(this.module.id) : undefined,\n        ]));\n\n        await this.loadContent(true, sync, showErrors);\n    }\n\n    /**\n     * Show loading and perform the load content function.\n     *\n     * @param sync If the fetch needs syncing.\n     * @param showErrors Wether to show errors to the user or hide them.\n     * @returns Resolved when done.\n     */\n    protected async showLoadingAndFetch(sync: boolean = false, showErrors: boolean = false): Promise<void> {\n        this.showLoading = true;\n        this.content?.scrollToTop();\n\n        await this.loadContent(false, sync, showErrors);\n    }\n\n    /**\n     * Show loading and perform the refresh content function.\n     *\n     * @param sync If the refresh needs syncing.\n     * @param showErrors Wether to show errors to the user or hide them.\n     * @returns Resolved when done.\n     */\n    protected showLoadingAndRefresh(sync: boolean = false, showErrors: boolean = false): Promise<void> {\n        this.showLoading = true;\n        this.content?.scrollToTop();\n\n        return this.refreshContent(sync, showErrors);\n    }\n\n    /**\n     * Download the component contents.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @param sync If the refresh needs syncing.\n     * @param showErrors Wether to show errors to the user or hide them.\n     * @returns Promise resolved when done.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected async fetchContent(refresh: boolean = false, sync: boolean = false, showErrors: boolean = false): Promise<void> {\n        return;\n    }\n\n    /**\n     * Loads the component contents and shows the corresponding error.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @param sync If the refresh needs syncing.\n     * @param showErrors Wether to show errors to the user or hide them.\n     * @returns Promise resolved when done.\n     */\n    protected async loadContent(refresh?: boolean, sync: boolean = false, showErrors: boolean = false): Promise<void> {\n        if (!this.module) {\n            // This can happen if course format changes from single activity to weekly/topics.\n            return;\n        }\n\n        try {\n            if (refresh && this.showCompletion) {\n                await CoreUtils.ignoreErrors(this.fetchModule());\n            }\n\n            await this.fetchContent(refresh, sync, showErrors);\n\n            this.finishSuccessfulFetch();\n        } catch (error) {\n            if (!refresh && !CoreSites.getCurrentSite()?.isOfflineDisabled() && this.isNotFoundError(error)) {\n                // Module not found, retry without using cache.\n                return await this.refreshContent(sync);\n            }\n\n            CoreDomUtils.showErrorModalDefault(error, this.fetchContentDefaultError, true);\n        } finally {\n            this.showLoading = false;\n        }\n    }\n\n    /**\n     * Performs the sync of the activity.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async sync(): Promise<CoreSyncResult> {\n        return {\n            updated: false,\n            warnings: [],\n        };\n    }\n\n    /**\n     * Checks if sync has updated data on the server.\n     *\n     * @param result Data returned on the sync function.\n     * @returns If data has been updated or not.\n     */\n    protected hasSyncSucceed(result: CoreSyncResult): boolean {\n        return result.updated;\n    }\n\n    /**\n     * Tries to synchronize the activity.\n     *\n     * @param showErrors If show errors to the user of hide them.\n     * @returns Promise resolved with true if sync hast updated data to the server, false otherwise.\n     */\n    protected async syncActivity(showErrors: boolean = false): Promise<boolean> {\n        try {\n            const result = await this.sync();\n\n            if (result.warnings.length) {\n                CoreDomUtils.showAlert(undefined, result.warnings[0]);\n            }\n\n            return this.hasSyncSucceed(result);\n        } catch (error) {\n            if (showErrors) {\n                CoreDomUtils.showErrorModalDefault(error, 'core.errorsync', true);\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.syncObserver?.off();\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}