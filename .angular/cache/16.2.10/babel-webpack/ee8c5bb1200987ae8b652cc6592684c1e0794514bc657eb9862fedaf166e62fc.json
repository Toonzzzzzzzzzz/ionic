{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreQuestion } from '@features/question/services/question';\nimport { CoreQuestionHelper } from '@features/question/services/question-helper';\nimport { makeSingleton } from '@singletons';\nimport { AddonQbehaviourInformationItemComponent } from '../../component/informationitem';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to support information item question behaviour.\n */\nexport class AddonQbehaviourInformationItemHandlerService {\n  constructor() {\n    this.name = 'AddonQbehaviourInformationItem';\n    this.type = 'informationitem';\n  }\n  /**\n   * @inheritdoc\n   */\n  determineNewState(component, attemptId, question) {\n    var _question$answers;\n    if ((_question$answers = question.answers) !== null && _question$answers !== void 0 && _question$answers['-seen']) {\n      return CoreQuestion.getState('complete');\n    }\n    return CoreQuestion.getState(question.state || 'todo');\n  }\n  /**\n   * @inheritdoc\n   */\n  handleQuestion(question) {\n    if (CoreQuestionHelper.extractQbehaviourSeenInput(question)) {\n      return [AddonQbehaviourInformationItemComponent];\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n}\n_class = AddonQbehaviourInformationItemHandlerService;\n_class.ɵfac = function AddonQbehaviourInformationItemHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonQbehaviourInformationItemHandler = makeSingleton(AddonQbehaviourInformationItemHandlerService);","map":{"version":3,"names":["CoreQuestion","CoreQuestionHelper","makeSingleton","AddonQbehaviourInformationItemComponent","AddonQbehaviourInformationItemHandlerService","constructor","name","type","determineNewState","component","attemptId","question","_question$answers","answers","getState","state","handleQuestion","extractQbehaviourSeenInput","isEnabled","_asyncToGenerator","factory","ɵfac","providedIn","AddonQbehaviourInformationItemHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/qbehaviour/informationitem/services/handlers/informationitem.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\n\nimport { CoreQuestionBehaviourHandler, CoreQuestionQuestionWithAnswers } from '@features/question/services/behaviour-delegate';\nimport { CoreQuestion, CoreQuestionQuestionParsed, CoreQuestionState } from '@features/question/services/question';\nimport { CoreQuestionHelper } from '@features/question/services/question-helper';\nimport { makeSingleton } from '@singletons';\nimport { AddonQbehaviourInformationItemComponent } from '../../component/informationitem';\n\n/**\n * Handler to support information item question behaviour.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonQbehaviourInformationItemHandlerService implements CoreQuestionBehaviourHandler {\n\n    name = 'AddonQbehaviourInformationItem';\n    type = 'informationitem';\n\n    /**\n     * @inheritdoc\n     */\n    determineNewState(\n        component: string,\n        attemptId: number,\n        question: CoreQuestionQuestionWithAnswers,\n    ): CoreQuestionState | Promise<CoreQuestionState> {\n        if (question.answers?.['-seen']) {\n            return CoreQuestion.getState('complete');\n        }\n\n        return CoreQuestion.getState(question.state || 'todo');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    handleQuestion(question: CoreQuestionQuestionParsed): void | Type<unknown>[] {\n        if (CoreQuestionHelper.extractQbehaviourSeenInput(question)) {\n            return [AddonQbehaviourInformationItemComponent];\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n}\n\nexport const AddonQbehaviourInformationItemHandler = makeSingleton(AddonQbehaviourInformationItemHandlerService);\n"],"mappings":";;AAiBA,SAASA,YAAY,QAAuD,sCAAsC;AAClH,SAASC,kBAAkB,QAAQ,6CAA6C;AAChF,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,uCAAuC,QAAQ,iCAAiC;;AAEzF;;;AAIA,OAAM,MAAOC,4CAA4C;EADzDC,YAAA;IAGI,KAAAC,IAAI,GAAG,gCAAgC;IACvC,KAAAC,IAAI,GAAG,iBAAiB;;EAExB;;;EAGAC,iBAAiBA,CACbC,SAAiB,EACjBC,SAAiB,EACjBC,QAAyC;IAAA,IAAAC,iBAAA;IAEzC,KAAAA,iBAAA,GAAID,QAAQ,CAACE,OAAO,cAAAD,iBAAA,eAAhBA,iBAAA,CAAmB,OAAO,CAAC,EAAE;MAC7B,OAAOZ,YAAY,CAACc,QAAQ,CAAC,UAAU,CAAC;;IAG5C,OAAOd,YAAY,CAACc,QAAQ,CAACH,QAAQ,CAACI,KAAK,IAAI,MAAM,CAAC;EAC1D;EAEA;;;EAGAC,cAAcA,CAACL,QAAoC;IAC/C,IAAIV,kBAAkB,CAACgB,0BAA0B,CAACN,QAAQ,CAAC,EAAE;MACzD,OAAO,CAACR,uCAAuC,CAAC;;EAExD;EAEA;;;EAGMe,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB;;SAlCSf,4CAA4C;;mBAA5CA,MAA4C;AAAA;;SAA5CA,MAA4C;EAAAgB,OAAA,EAA5ChB,MAA4C,CAAAiB,IAAA;EAAAC,UAAA,EAD/B;AAAM;AAuChC,OAAO,MAAMC,qCAAqC,GAAGrB,aAAa,CAACE,4CAA4C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}