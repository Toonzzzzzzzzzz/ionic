{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreGroups } from '@services/groups';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModChat, AddonModChatProvider } from '../chat';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to prefetch chats.\n */\nexport class AddonModChatPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModChat';\n    this.modName = 'chat';\n    this.component = AddonModChatProvider.COMPONENT;\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateContent(moduleId, courseId) {\n    return _asyncToGenerator(function* () {\n      const chat = yield AddonModChat.getChat(courseId, moduleId);\n      yield CoreUtils.allPromises([AddonModChat.invalidateAllSessions(chat.id), AddonModChat.invalidateAllSessionMessages(chat.id)]);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateModule(module, courseId) {\n    return _asyncToGenerator(function* () {\n      yield CoreUtils.allPromises([AddonModChat.invalidateChats(courseId), CoreCourse.invalidateModule(module.id)]);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  prefetch(module, courseId) {\n    return this.prefetchPackage(module, courseId, siteId => this.prefetchChat(module, courseId, siteId));\n  }\n  /**\n   * Prefetch a chat.\n   *\n   * @param module The module object returned by WS.\n   * @param courseId Course ID the module belongs to.\n   * @param siteId Site ID.\n   * @returns Promise resolved when done.\n   */\n  prefetchChat(module, courseId, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const options = {\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n        siteId\n      };\n      const modOptions = _objectSpread(_objectSpread({}, options), {}, {\n        cmId: module.id\n      });\n      // Prefetch chat and group info.\n      const [chat, groupInfo] = yield Promise.all([AddonModChat.getChat(courseId, module.id, options), CoreGroups.getActivityGroupInfo(module.id, false, undefined, siteId)]);\n      const promises = [];\n      let groupIds = [0];\n      if (groupInfo.groups && groupInfo.groups.length > 0) {\n        groupIds = groupInfo.groups.map(group => group.id);\n      }\n      groupIds.forEach(groupId => {\n        // Prefetch complete sessions.\n        promises.push(_this.prefetchSessions(chat.id, groupId, courseId, false, modOptions));\n        // Prefetch all sessions.\n        promises.push(_this.prefetchSessions(chat.id, groupId, courseId, true, modOptions));\n      });\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Prefetch chat sessions.\n   *\n   * @param chatId Chat ID.\n   * @param groupId Group ID, 0 means that the function will determine the user group.\n   * @param courseId Course ID.\n   * @param showAll Whether to include incomplete sessions or not.\n   * @param modOptions Other options.\n   * @returns Promise resolved with the list of sessions.\n   */\n  prefetchSessions(chatId, groupId, courseId, showAll, modOptions) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const sessions = yield AddonModChat.getSessions(chatId, groupId, showAll, modOptions);\n        if (showAll) {\n          // Prefetch each session data too.\n          yield Promise.all(sessions.map(session => _this2.prefetchSession(chatId, session, groupId, courseId, modOptions)));\n        }\n      } catch (error) {\n        // Ignore group error.\n        if (error && error.errorcode == 'notingroup') {\n          return;\n        }\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Prefetch chat session messages and user profiles.\n   *\n   * @param chatId Chat ID.\n   * @param session Session object.\n   * @param groupId Group ID.\n   * @param courseId Course ID the module belongs to.\n   * @param modOptions Other options.\n   * @returns Promise resolved when done.\n   */\n  prefetchSession(chatId, session, groupId, courseId, modOptions) {\n    return _asyncToGenerator(function* () {\n      const messages = yield AddonModChat.getSessionMessages(chatId, session.sessionstart, session.sessionend, groupId, modOptions);\n      const users = {};\n      session.sessionusers.forEach(user => {\n        users[user.userid] = user.userid;\n      });\n      messages.forEach(message => {\n        users[message.userid] = message.userid;\n      });\n      const userIds = Object.values(users);\n      yield CoreUser.prefetchProfiles(userIds, courseId, modOptions.siteId);\n    })();\n  }\n}\n_class = AddonModChatPrefetchHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModChatPrefetchHandlerService_BaseFactory;\n  return function AddonModChatPrefetchHandlerService_Factory(t) {\n    return (ɵAddonModChatPrefetchHandlerService_BaseFactory || (ɵAddonModChatPrefetchHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModChatPrefetchHandler = makeSingleton(AddonModChatPrefetchHandlerService);","map":{"version":3,"names":["CoreCourseActivityPrefetchHandlerBase","CoreCourse","CoreUser","CoreGroups","CoreUtils","makeSingleton","AddonModChat","AddonModChatProvider","AddonModChatPrefetchHandlerService","constructor","name","modName","component","COMPONENT","invalidateContent","moduleId","courseId","_asyncToGenerator","chat","getChat","allPromises","invalidateAllSessions","id","invalidateAllSessionMessages","invalidateModule","module","invalidateChats","prefetch","prefetchPackage","siteId","prefetchChat","_this","options","readingStrategy","modOptions","_objectSpread","cmId","groupInfo","Promise","all","getActivityGroupInfo","undefined","promises","groupIds","groups","length","map","group","forEach","groupId","push","prefetchSessions","chatId","showAll","_this2","sessions","getSessions","session","prefetchSession","error","errorcode","messages","getSessionMessages","sessionstart","sessionend","users","sessionusers","user","userid","message","userIds","Object","values","prefetchProfiles","t","factory","ɵfac","providedIn","AddonModChatPrefetchHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/chat/services/handlers/prefetch.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourse, CoreCourseAnyModuleData, CoreCourseCommonModWSOptions } from '@features/course/services/course';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreGroups } from '@services/groups';\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModChat, AddonModChatProvider, AddonModChatSession } from '../chat';\n\n/**\n * Handler to prefetch chats.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModChatPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n\n    name = 'AddonModChat';\n    modName = 'chat';\n    component = AddonModChatProvider.COMPONENT;\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateContent(moduleId: number, courseId: number): Promise<void> {\n        const chat = await AddonModChat.getChat(courseId, moduleId);\n\n        await CoreUtils.allPromises([\n            AddonModChat.invalidateAllSessions(chat.id),\n            AddonModChat.invalidateAllSessionMessages(chat.id),\n        ]);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateModule(module: CoreCourseAnyModuleData, courseId: number): Promise<void> {\n        await CoreUtils.allPromises([\n            AddonModChat.invalidateChats(courseId),\n            CoreCourse.invalidateModule(module.id),\n        ]);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    prefetch(module: CoreCourseAnyModuleData, courseId: number): Promise<void> {\n        return this.prefetchPackage(module, courseId, (siteId) => this.prefetchChat(module, courseId, siteId));\n    }\n\n    /**\n     * Prefetch a chat.\n     *\n     * @param module The module object returned by WS.\n     * @param courseId Course ID the module belongs to.\n     * @param siteId Site ID.\n     * @returns Promise resolved when done.\n     */\n    protected async prefetchChat(module: CoreCourseAnyModuleData, courseId: number, siteId: string): Promise<void> {\n        const options = {\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId,\n        };\n        const modOptions = {\n            ...options,\n            cmId: module.id,\n        };\n\n        // Prefetch chat and group info.\n        const [chat, groupInfo] = await Promise.all([\n            AddonModChat.getChat(courseId, module.id, options),\n            CoreGroups.getActivityGroupInfo(module.id, false, undefined, siteId),\n        ]);\n\n        const promises: Promise<void>[] = [];\n\n        let groupIds = [0];\n        if (groupInfo.groups && groupInfo.groups.length > 0) {\n            groupIds = groupInfo.groups.map((group) => group.id);\n        }\n\n        groupIds.forEach((groupId) => {\n            // Prefetch complete sessions.\n            promises.push(this.prefetchSessions(chat.id, groupId, courseId, false, modOptions));\n\n            // Prefetch all sessions.\n            promises.push(this.prefetchSessions(chat.id, groupId, courseId, true, modOptions));\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Prefetch chat sessions.\n     *\n     * @param chatId Chat ID.\n     * @param groupId Group ID, 0 means that the function will determine the user group.\n     * @param courseId Course ID.\n     * @param showAll Whether to include incomplete sessions or not.\n     * @param modOptions Other options.\n     * @returns Promise resolved with the list of sessions.\n     */\n    protected async prefetchSessions(\n        chatId: number,\n        groupId: number,\n        courseId: number,\n        showAll: boolean,\n        modOptions: CoreCourseCommonModWSOptions,\n    ): Promise<void> {\n        try {\n            const sessions = await AddonModChat.getSessions(chatId, groupId, showAll, modOptions);\n\n            if (showAll) {\n                // Prefetch each session data too.\n                await Promise.all(sessions.map((session) => this.prefetchSession(chatId, session, groupId, courseId, modOptions)));\n            }\n        } catch (error) {\n            // Ignore group error.\n            if (error && error.errorcode == 'notingroup') {\n                return;\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     * Prefetch chat session messages and user profiles.\n     *\n     * @param chatId Chat ID.\n     * @param session Session object.\n     * @param groupId Group ID.\n     * @param courseId Course ID the module belongs to.\n     * @param modOptions Other options.\n     * @returns Promise resolved when done.\n     */\n    protected async prefetchSession(\n        chatId: number,\n        session: AddonModChatSession,\n        groupId: number,\n        courseId: number,\n        modOptions: CoreCourseCommonModWSOptions,\n    ): Promise<void> {\n        const messages = await AddonModChat.getSessionMessages(\n            chatId,\n            session.sessionstart,\n            session.sessionend,\n            groupId,\n            modOptions,\n        );\n\n        const users: Record<number, number> = {};\n        session.sessionusers.forEach((user) => {\n            users[user.userid] = user.userid;\n        });\n        messages.forEach((message) => {\n            users[message.userid] = message.userid;\n        });\n        const userIds = Object.values(users);\n\n        await CoreUser.prefetchProfiles(userIds, courseId, modOptions.siteId);\n    }\n\n}\n\nexport const AddonModChatPrefetchHandler = makeSingleton(AddonModChatPrefetchHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}