{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaCompetency:';\n/**\n * Service to handle caompetency learning plans.\n */\nexport class AddonCompetencyProvider {\n  /**\n   * Check if all competencies features are disabled.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: whether all competency features are disabled.\n   */\n  allCompetenciesDisabled(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.isFeatureDisabled('CoreMainMenuDelegate_AddonCompetency') && site.isFeatureDisabled('CoreCourseOptionsDelegate_AddonCompetency') && site.isFeatureDisabled('CoreUserDelegate_AddonCompetency');\n    })();\n  }\n  /**\n   * Returns whether current user can see another user competencies in a course.\n   *\n   * @param courseId Course ID.\n   * @param userId User ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: whether the user can view the competencies.\n   */\n  canViewUserCompetenciesInCourse(courseId, userId, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!CoreSites.isLoggedIn()) {\n        return false;\n      }\n      try {\n        const response = yield _this.getCourseCompetenciesPage(courseId, siteId);\n        if (!response.competencies.length) {\n          // No competencies.\n          return false;\n        }\n        if (!userId || userId == CoreSites.getCurrentSiteUserId()) {\n          // Current user.\n          return true;\n        }\n        // Check if current user can view any competency of the user.\n        yield _this.getCompetencyInCourse(courseId, response.competencies[0].competency.id, userId, siteId);\n        return true;\n      } catch (_unused) {\n        return false;\n      }\n    })();\n  }\n  /**\n   * Get cache key for user learning plans data WS calls.\n   *\n   * @param userId User ID.\n   * @returns Cache key.\n   */\n  getLearningPlansCacheKey(userId) {\n    return ROOT_CACHE_KEY + 'userplans:' + userId;\n  }\n  /**\n   * Get cache key for learning plan data WS calls.\n   *\n   * @param planId Plan ID.\n   * @returns Cache key.\n   */\n  getLearningPlanCacheKey(planId) {\n    return ROOT_CACHE_KEY + 'learningplan:' + planId;\n  }\n  /**\n   * Get cache key for competency in plan data WS calls.\n   *\n   * @param planId Plan ID.\n   * @param competencyId Competency ID.\n   * @returns Cache key.\n   */\n  getCompetencyInPlanCacheKey(planId, competencyId) {\n    return ROOT_CACHE_KEY + 'plancompetency:' + planId + ':' + competencyId;\n  }\n  /**\n   * Get cache key for competency in course data WS calls.\n   *\n   * @param courseId Course ID.\n   * @param competencyId Competency ID.\n   * @param userId User ID.\n   * @returns Cache key.\n   */\n  getCompetencyInCourseCacheKey(courseId, competencyId, userId) {\n    return ROOT_CACHE_KEY + 'coursecompetency:' + userId + ':' + courseId + ':' + competencyId;\n  }\n  /**\n   * Get cache key for competency summary data WS calls.\n   *\n   * @param competencyId Competency ID.\n   * @param userId User ID.\n   * @returns Cache key.\n   */\n  getCompetencySummaryCacheKey(competencyId, userId) {\n    return ROOT_CACHE_KEY + 'competencysummary:' + userId + ':' + competencyId;\n  }\n  /**\n   * Get cache key for course competencies data WS calls.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getCourseCompetenciesCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'coursecompetencies:' + courseId;\n  }\n  /**\n   * Returns whether competencies are enabled.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns competencies if enabled for the given course, false otherwise.\n   */\n  isPluginForCourseEnabled(courseId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!CoreSites.isLoggedIn()) {\n        return false;\n      }\n      return CoreUtils.promiseWorks(_this2.getCourseCompetencies(courseId, undefined, siteId));\n    })();\n  }\n  /**\n   * Get plans for a certain user.\n   *\n   * @param userId ID of the user. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise to be resolved when the plans are retrieved.\n   */\n  getLearningPlans(userId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      const params = {\n        userid: userId\n      };\n      const preSets = {\n        cacheKey: _this3.getLearningPlansCacheKey(userId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      };\n      const response = yield site.read('tool_lp_data_for_plans_page', params, preSets);\n      return response.plans;\n    })();\n  }\n  /**\n   * Get a certain plan.\n   *\n   * @param planId ID of the plan.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise to be resolved when the plan is retrieved.\n   */\n  getLearningPlan(planId, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        planid: planId\n      };\n      const preSets = {\n        cacheKey: _this4.getLearningPlanCacheKey(planId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      };\n      return site.read('tool_lp_data_for_plan_page', params, preSets);\n    })();\n  }\n  /**\n   * Get a certain competency in a plan.\n   *\n   * @param planId ID of the plan.\n   * @param competencyId ID of the competency.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise to be resolved when the competency is retrieved.\n   */\n  getCompetencyInPlan(planId, competencyId, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        planid: planId,\n        competencyid: competencyId\n      };\n      const preSets = {\n        cacheKey: _this5.getCompetencyInPlanCacheKey(planId, competencyId),\n        updateFrequency: CoreSite.FREQUENCY_SOMETIMES\n      };\n      return site.read('tool_lp_data_for_user_competency_summary_in_plan', params, preSets);\n    })();\n  }\n  /**\n   * Get a certain competency in a course.\n   *\n   * @param courseId ID of the course.\n   * @param competencyId ID of the competency.\n   * @param userId ID of the user. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n   * @returns Promise to be resolved when the competency is retrieved.\n   */\n  getCompetencyInCourse(courseId, competencyId, userId, siteId, ignoreCache = false) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      const params = {\n        courseid: courseId,\n        competencyid: competencyId,\n        userid: userId\n      };\n      const preSets = {\n        cacheKey: _this6.getCompetencyInCourseCacheKey(courseId, competencyId, userId),\n        updateFrequency: CoreSite.FREQUENCY_SOMETIMES\n      };\n      if (ignoreCache) {\n        preSets.getFromCache = false;\n        preSets.emergencyCache = false;\n      }\n      return site.read('tool_lp_data_for_user_competency_summary_in_course', params, preSets);\n    })();\n  }\n  /**\n   * Get a certain competency summary.\n   *\n   * @param competencyId ID of the competency.\n   * @param userId ID of the user. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n   * @returns Promise to be resolved when the competency summary is retrieved.\n   */\n  getCompetencySummary(competencyId, userId, siteId, ignoreCache = false) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      const params = {\n        competencyid: competencyId,\n        userid: userId\n      };\n      const preSets = {\n        cacheKey: _this7.getCompetencySummaryCacheKey(competencyId, userId),\n        updateFrequency: CoreSite.FREQUENCY_SOMETIMES\n      };\n      if (ignoreCache) {\n        preSets.getFromCache = false;\n        preSets.emergencyCache = false;\n      }\n      return site.read('tool_lp_data_for_user_competency_summary', params, preSets);\n    })();\n  }\n  /**\n   * Get all competencies in a course for a certain user.\n   *\n   * @param courseId ID of the course.\n   * @param userId ID of the user.\n   * @param siteId Site ID. If not defined, current site.\n   * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n   * @returns Promise to be resolved when the course competencies are retrieved.\n   */\n  getCourseCompetencies(courseId, userId, siteId, ignoreCache = false) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const courseCompetencies = yield _this8.getCourseCompetenciesPage(courseId, siteId, ignoreCache);\n      if (!userId || userId == CoreSites.getCurrentSiteUserId()) {\n        return courseCompetencies;\n      }\n      const userCompetenciesSumaries = yield Promise.all(courseCompetencies.competencies.map(competency => _this8.getCompetencyInCourse(courseId, competency.competency.id, userId, siteId)));\n      userCompetenciesSumaries.forEach((userCompetenciesSumary, index) => {\n        courseCompetencies.competencies[index].usercompetencycourse = userCompetenciesSumary.usercompetencysummary.usercompetencycourse;\n      });\n      return courseCompetencies;\n    })();\n  }\n  /**\n   * Get all competencies in a course.\n   *\n   * @param courseId ID of the course.\n   * @param siteId Site ID. If not defined, current site.\n   * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n   * @returns Promise to be resolved when the course competencies are retrieved.\n   */\n  getCourseCompetenciesPage(courseId, siteId, ignoreCache = false) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        courseid: courseId\n      };\n      const preSets = {\n        cacheKey: _this9.getCourseCompetenciesCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_SOMETIMES\n      };\n      if (ignoreCache) {\n        preSets.getFromCache = false;\n        preSets.emergencyCache = false;\n      }\n      return site.read('tool_lp_data_for_course_competencies_page', params, preSets);\n    })();\n  }\n  /**\n   * Invalidates User Learning Plans data.\n   *\n   * @param userId ID of the user. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateLearningPlans(userId, siteId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      yield site.invalidateWsCacheForKey(_this10.getLearningPlansCacheKey(userId));\n    })();\n  }\n  /**\n   * Invalidates Learning Plan data.\n   *\n   * @param planId ID of the plan.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateLearningPlan(planId, siteId) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this11.getLearningPlanCacheKey(planId));\n    })();\n  }\n  /**\n   * Invalidates Competency in Plan data.\n   *\n   * @param planId ID of the plan.\n   * @param competencyId ID of the competency.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateCompetencyInPlan(planId, competencyId, siteId) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this12.getCompetencyInPlanCacheKey(planId, competencyId));\n    })();\n  }\n  /**\n   * Invalidates Competency in Course data.\n   *\n   * @param courseId ID of the course.\n   * @param competencyId ID of the competency.\n   * @param userId ID of the user. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateCompetencyInCourse(courseId, competencyId, userId, siteId) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      yield site.invalidateWsCacheForKey(_this13.getCompetencyInCourseCacheKey(courseId, competencyId, userId));\n    })();\n  }\n  /**\n   * Invalidates Competency Summary data.\n   *\n   * @param competencyId ID of the competency.\n   * @param userId ID of the user. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateCompetencySummary(competencyId, userId, siteId) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      yield site.invalidateWsCacheForKey(_this14.getCompetencySummaryCacheKey(competencyId, userId));\n    })();\n  }\n  /**\n   * Invalidates Course Competencies data.\n   *\n   * @param courseId ID of the course.\n   * @param userId ID of the user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateCourseCompetencies(courseId, userId, siteId) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this15.getCourseCompetenciesCacheKey(courseId));\n      if (!userId || userId == CoreSites.getCurrentSiteUserId()) {\n        return;\n      }\n      const competencies = yield _this15.getCourseCompetencies(courseId, 0, siteId);\n      const promises = competencies.competencies.map(competency => _this15.invalidateCompetencyInCourse(courseId, competency.competency.id, userId, siteId));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Report the competency as being viewed in plan.\n   *\n   * @param planId ID of the plan.\n   * @param competencyId ID of the competency.\n   * @param planStatus Current plan Status to decide what action should be logged.\n   * @param name Deprecated, not used anymore.\n   * @param userId User ID. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logCompetencyInPlanView(planId, competencyId, planStatus, name, userId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      const params = {\n        planid: planId,\n        competencyid: competencyId,\n        userid: userId\n      };\n      const preSets = {\n        typeExpected: 'boolean'\n      };\n      const wsName = planStatus == AddonCompetencyProvider.STATUS_COMPLETE ? 'core_competency_user_competency_plan_viewed' : 'core_competency_user_competency_viewed_in_plan';\n      yield site.write(wsName, params, preSets);\n    })();\n  }\n  /**\n   * Report the competency as being viewed in course.\n   *\n   * @param courseId ID of the course.\n   * @param competencyId ID of the competency.\n   * @param name Deprecated, not used anymore.\n   * @param userId User ID. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logCompetencyInCourseView(courseId, competencyId, name, userId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      const params = {\n        courseid: courseId,\n        competencyid: competencyId,\n        userid: userId\n      };\n      const preSets = {\n        typeExpected: 'boolean'\n      };\n      yield site.write('core_competency_user_competency_viewed_in_course', params, preSets);\n    })();\n  }\n  /**\n   * Report the competency as being viewed.\n   *\n   * @param competencyId ID of the competency.\n   * @param name Name of the competency.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logCompetencyView(competencyId, name, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        id: competencyId\n      };\n      const preSets = {\n        typeExpected: 'boolean'\n      };\n      yield site.write('core_competency_competency_viewed', params, preSets);\n    })();\n  }\n}\n_class = AddonCompetencyProvider;\n// Learning plan status.\n_class.STATUS_DRAFT = 0;\n_class.STATUS_ACTIVE = 1;\n_class.STATUS_COMPLETE = 2;\n_class.STATUS_WAITING_FOR_REVIEW = 3;\n_class.STATUS_IN_REVIEW = 4;\n// Competency status.\n_class.REVIEW_STATUS_IDLE = 0;\n_class.REVIEW_STATUS_WAITING_FOR_REVIEW = 1;\n_class.REVIEW_STATUS_IN_REVIEW = 2;\n_class.ɵfac = function AddonCompetencyProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonCompetency = makeSingleton(AddonCompetencyProvider);","map":{"version":3,"names":["CoreSite","CoreSites","CoreUtils","makeSingleton","ROOT_CACHE_KEY","AddonCompetencyProvider","allCompetenciesDisabled","siteId","_asyncToGenerator","site","getSite","isFeatureDisabled","canViewUserCompetenciesInCourse","courseId","userId","_this","isLoggedIn","response","getCourseCompetenciesPage","competencies","length","getCurrentSiteUserId","getCompetencyInCourse","competency","id","_unused","getLearningPlansCacheKey","getLearningPlanCacheKey","planId","getCompetencyInPlanCacheKey","competencyId","getCompetencyInCourseCacheKey","getCompetencySummaryCacheKey","getCourseCompetenciesCacheKey","isPluginForCourseEnabled","_this2","promiseWorks","getCourseCompetencies","undefined","getLearningPlans","_this3","getUserId","params","userid","preSets","cacheKey","updateFrequency","FREQUENCY_RARELY","read","plans","getLearningPlan","_this4","planid","getCompetencyInPlan","_this5","competencyid","FREQUENCY_SOMETIMES","ignoreCache","_this6","courseid","getFromCache","emergencyCache","getCompetencySummary","_this7","_this8","courseCompetencies","userCompetenciesSumaries","Promise","all","map","forEach","userCompetenciesSumary","index","usercompetencycourse","usercompetencysummary","_this9","invalidateLearningPlans","_this10","invalidateWsCacheForKey","invalidateLearningPlan","_this11","invalidateCompetencyInPlan","_this12","invalidateCompetencyInCourse","_this13","invalidateCompetencySummary","_this14","invalidateCourseCompetencies","_this15","promises","logCompetencyInPlanView","planStatus","name","typeExpected","wsName","STATUS_COMPLETE","write","logCompetencyInCourseView","logCompetencyView","_class","STATUS_DRAFT","STATUS_ACTIVE","STATUS_WAITING_FOR_REVIEW","STATUS_IN_REVIEW","REVIEW_STATUS_IDLE","REVIEW_STATUS_WAITING_FOR_REVIEW","REVIEW_STATUS_IN_REVIEW","factory","ɵfac","providedIn","AddonCompetency"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/competency/services/competency.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCommentsArea } from '@features/comments/services/comments';\nimport { CoreCourseSummary, CoreCourseModuleSummary } from '@features/course/services/course';\nimport { CoreUserSummary } from '@features/user/services/user';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\n\nconst ROOT_CACHE_KEY = 'mmaCompetency:';\n\n/**\n * Service to handle caompetency learning plans.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonCompetencyProvider {\n\n    // Learning plan status.\n    static readonly STATUS_DRAFT = 0;\n    static readonly STATUS_ACTIVE = 1;\n    static readonly STATUS_COMPLETE = 2;\n    static readonly STATUS_WAITING_FOR_REVIEW = 3;\n    static readonly STATUS_IN_REVIEW = 4;\n\n    // Competency status.\n    static readonly REVIEW_STATUS_IDLE = 0;\n    static readonly REVIEW_STATUS_WAITING_FOR_REVIEW = 1;\n    static readonly REVIEW_STATUS_IN_REVIEW = 2;\n\n    /**\n     * Check if all competencies features are disabled.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: whether all competency features are disabled.\n     */\n    async allCompetenciesDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.isFeatureDisabled('CoreMainMenuDelegate_AddonCompetency') &&\n            site.isFeatureDisabled('CoreCourseOptionsDelegate_AddonCompetency') &&\n            site.isFeatureDisabled('CoreUserDelegate_AddonCompetency');\n    }\n\n    /**\n     * Returns whether current user can see another user competencies in a course.\n     *\n     * @param courseId Course ID.\n     * @param userId User ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: whether the user can view the competencies.\n     */\n    async canViewUserCompetenciesInCourse(courseId: number, userId?: number, siteId?: string): Promise<boolean> {\n        if (!CoreSites.isLoggedIn()) {\n            return false;\n        }\n\n        try {\n            const response = await this.getCourseCompetenciesPage(courseId, siteId);\n\n            if (!response.competencies.length) {\n                // No competencies.\n                return false;\n            }\n\n            if (!userId || userId == CoreSites.getCurrentSiteUserId()) {\n                // Current user.\n                return true;\n            }\n\n            // Check if current user can view any competency of the user.\n            await this.getCompetencyInCourse(courseId, response.competencies[0].competency.id, userId, siteId);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Get cache key for user learning plans data WS calls.\n     *\n     * @param userId User ID.\n     * @returns Cache key.\n     */\n    protected getLearningPlansCacheKey(userId: number): string {\n        return ROOT_CACHE_KEY + 'userplans:' + userId;\n    }\n\n    /**\n     * Get cache key for learning plan data WS calls.\n     *\n     * @param planId Plan ID.\n     * @returns Cache key.\n     */\n    protected getLearningPlanCacheKey(planId: number): string {\n        return ROOT_CACHE_KEY + 'learningplan:' + planId;\n    }\n\n    /**\n     * Get cache key for competency in plan data WS calls.\n     *\n     * @param planId Plan ID.\n     * @param competencyId Competency ID.\n     * @returns Cache key.\n     */\n    protected getCompetencyInPlanCacheKey(planId: number, competencyId: number): string {\n        return ROOT_CACHE_KEY + 'plancompetency:' + planId + ':' + competencyId;\n    }\n\n    /**\n     * Get cache key for competency in course data WS calls.\n     *\n     * @param courseId Course ID.\n     * @param competencyId Competency ID.\n     * @param userId User ID.\n     * @returns Cache key.\n     */\n    protected getCompetencyInCourseCacheKey(courseId: number, competencyId: number, userId: number): string {\n        return ROOT_CACHE_KEY + 'coursecompetency:' + userId + ':' + courseId + ':' + competencyId;\n    }\n\n    /**\n     * Get cache key for competency summary data WS calls.\n     *\n     * @param competencyId Competency ID.\n     * @param userId User ID.\n     * @returns Cache key.\n     */\n    protected getCompetencySummaryCacheKey(competencyId: number, userId: number): string {\n        return ROOT_CACHE_KEY + 'competencysummary:' + userId + ':' + competencyId;\n    }\n\n    /**\n     * Get cache key for course competencies data WS calls.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getCourseCompetenciesCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'coursecompetencies:' + courseId;\n    }\n\n    /**\n     * Returns whether competencies are enabled.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns competencies if enabled for the given course, false otherwise.\n     */\n    async isPluginForCourseEnabled(courseId: number, siteId?: string): Promise<boolean> {\n        if (!CoreSites.isLoggedIn()) {\n            return false;\n        }\n\n        return CoreUtils.promiseWorks(this.getCourseCompetencies(courseId, undefined, siteId));\n    }\n\n    /**\n     * Get plans for a certain user.\n     *\n     * @param userId ID of the user. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise to be resolved when the plans are retrieved.\n     */\n    async getLearningPlans(userId?: number, siteId?: string): Promise<AddonCompetencyPlan[]> {\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        const params: AddonCompetencyDataForPlansPageWSParams = {\n            userid: userId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getLearningPlansCacheKey(userId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n        };\n\n        const response = await site.read<AddonCompetencyDataForPlansPageWSResponse>('tool_lp_data_for_plans_page', params, preSets);\n\n        return response.plans;\n    }\n\n    /**\n     * Get a certain plan.\n     *\n     * @param planId ID of the plan.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise to be resolved when the plan is retrieved.\n     */\n    async getLearningPlan(planId: number, siteId?: string): Promise<AddonCompetencyDataForPlanPageWSResponse> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonCompetencyDataForPlanPageWSParams = {\n            planid: planId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getLearningPlanCacheKey(planId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n        };\n\n        return site.read('tool_lp_data_for_plan_page', params, preSets);\n    }\n\n    /**\n     * Get a certain competency in a plan.\n     *\n     * @param planId ID of the plan.\n     * @param competencyId ID of the competency.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise to be resolved when the competency is retrieved.\n     */\n    async getCompetencyInPlan(\n        planId: number,\n        competencyId: number,\n        siteId?: string,\n    ): Promise<AddonCompetencyDataForUserCompetencySummaryInPlanWSResponse> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonCompetencyDataForUserCompetencySummaryInPlanWSParams = {\n            planid: planId,\n            competencyid: competencyId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getCompetencyInPlanCacheKey(planId, competencyId),\n            updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n        };\n\n        return site.read(\n            'tool_lp_data_for_user_competency_summary_in_plan',\n            params,\n            preSets,\n        );\n    }\n\n    /**\n     * Get a certain competency in a course.\n     *\n     * @param courseId ID of the course.\n     * @param competencyId ID of the competency.\n     * @param userId ID of the user. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n     * @returns Promise to be resolved when the competency is retrieved.\n     */\n    async getCompetencyInCourse(\n        courseId: number,\n        competencyId: number,\n        userId?: number,\n        siteId?: string,\n        ignoreCache = false,\n    ): Promise<AddonCompetencyDataForUserCompetencySummaryInCourseWSResponse> {\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        const params: AddonCompetencyDataForUserCompetencySummaryInCourseWSParams = {\n            courseid: courseId,\n            competencyid: competencyId,\n            userid: userId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getCompetencyInCourseCacheKey(courseId, competencyId, userId),\n            updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n        };\n\n        if (ignoreCache) {\n            preSets.getFromCache = false;\n            preSets.emergencyCache = false;\n        }\n\n        return site.read('tool_lp_data_for_user_competency_summary_in_course', params, preSets);\n    }\n\n    /**\n     * Get a certain competency summary.\n     *\n     * @param competencyId ID of the competency.\n     * @param userId ID of the user. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n     * @returns Promise to be resolved when the competency summary is retrieved.\n     */\n    async getCompetencySummary(\n        competencyId: number,\n        userId?: number,\n        siteId?: string,\n        ignoreCache = false,\n    ): Promise<AddonCompetencyDataForUserCompetencySummaryWSResponse> {\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        const params: AddonCompetencyDataForUserCompetencySummaryWSParams = {\n            competencyid: competencyId,\n            userid: userId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getCompetencySummaryCacheKey(competencyId, userId),\n            updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n        };\n\n        if (ignoreCache) {\n            preSets.getFromCache = false;\n            preSets.emergencyCache = false;\n        }\n\n        return site.read('tool_lp_data_for_user_competency_summary', params, preSets);\n    }\n\n    /**\n     * Get all competencies in a course for a certain user.\n     *\n     * @param courseId ID of the course.\n     * @param userId ID of the user.\n     * @param siteId Site ID. If not defined, current site.\n     * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n     * @returns Promise to be resolved when the course competencies are retrieved.\n     */\n    async getCourseCompetencies(\n        courseId: number,\n        userId?: number,\n        siteId?: string,\n        ignoreCache = false,\n    ): Promise<AddonCompetencyDataForCourseCompetenciesPageWSResponse> {\n\n        const courseCompetencies = await this.getCourseCompetenciesPage(courseId, siteId, ignoreCache);\n\n        if (!userId || userId == CoreSites.getCurrentSiteUserId()) {\n            return courseCompetencies;\n        }\n\n        const userCompetenciesSumaries: AddonCompetencyDataForUserCompetencySummaryInCourseWSResponse[] =\n            await Promise.all(courseCompetencies.competencies.map((competency) =>\n                this.getCompetencyInCourse(courseId, competency.competency.id, userId, siteId)));\n\n        userCompetenciesSumaries.forEach((userCompetenciesSumary, index) => {\n            courseCompetencies.competencies[index].usercompetencycourse =\n                userCompetenciesSumary.usercompetencysummary.usercompetencycourse;\n        });\n\n        return courseCompetencies;\n    }\n\n    /**\n     * Get all competencies in a course.\n     *\n     * @param courseId ID of the course.\n     * @param siteId Site ID. If not defined, current site.\n     * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n     * @returns Promise to be resolved when the course competencies are retrieved.\n     */\n    async getCourseCompetenciesPage(\n        courseId: number,\n        siteId?: string,\n        ignoreCache = false,\n    ): Promise<AddonCompetencyDataForCourseCompetenciesPageWSResponse> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonCompetencyDataForCourseCompetenciesPageWSParams = {\n            courseid: courseId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getCourseCompetenciesCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n        };\n\n        if (ignoreCache) {\n            preSets.getFromCache = false;\n            preSets.emergencyCache = false;\n        }\n\n        return site.read<AddonCompetencyDataForCourseCompetenciesPageWSResponse>(\n            'tool_lp_data_for_course_competencies_page',\n            params,\n            preSets,\n        );\n    }\n\n    /**\n     * Invalidates User Learning Plans data.\n     *\n     * @param userId ID of the user. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateLearningPlans(userId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        await site.invalidateWsCacheForKey(this.getLearningPlansCacheKey(userId));\n    }\n\n    /**\n     * Invalidates Learning Plan data.\n     *\n     * @param planId ID of the plan.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateLearningPlan(planId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getLearningPlanCacheKey(planId));\n    }\n\n    /**\n     * Invalidates Competency in Plan data.\n     *\n     * @param planId ID of the plan.\n     * @param competencyId ID of the competency.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateCompetencyInPlan(planId: number, competencyId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getCompetencyInPlanCacheKey(planId, competencyId));\n    }\n\n    /**\n     * Invalidates Competency in Course data.\n     *\n     * @param courseId ID of the course.\n     * @param competencyId ID of the competency.\n     * @param userId ID of the user. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateCompetencyInCourse(courseId: number, competencyId: number, userId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        await site.invalidateWsCacheForKey(this.getCompetencyInCourseCacheKey(courseId, competencyId, userId));\n    }\n\n    /**\n     * Invalidates Competency Summary data.\n     *\n     * @param competencyId ID of the competency.\n     * @param userId ID of the user. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateCompetencySummary(competencyId: number, userId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        await site.invalidateWsCacheForKey(this.getCompetencySummaryCacheKey(competencyId, userId));\n    }\n\n    /**\n     * Invalidates Course Competencies data.\n     *\n     * @param courseId ID of the course.\n     * @param userId ID of the user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateCourseCompetencies(courseId: number, userId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        await site.invalidateWsCacheForKey(this.getCourseCompetenciesCacheKey(courseId));\n\n        if (!userId || userId == CoreSites.getCurrentSiteUserId()) {\n            return;\n        }\n\n        const competencies = await this.getCourseCompetencies(courseId, 0, siteId);\n        const promises = competencies.competencies.map((competency) =>\n            this.invalidateCompetencyInCourse(courseId, competency.competency.id, userId, siteId));\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Report the competency as being viewed in plan.\n     *\n     * @param planId ID of the plan.\n     * @param competencyId ID of the competency.\n     * @param planStatus Current plan Status to decide what action should be logged.\n     * @param name Deprecated, not used anymore.\n     * @param userId User ID. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logCompetencyInPlanView(\n        planId: number,\n        competencyId: number,\n        planStatus: number,\n        name?: string,\n        userId?: number,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        const params: AddonCompetencyUserCompetencyPlanViewedWSParams = {\n            planid: planId,\n            competencyid: competencyId,\n            userid: userId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            typeExpected: 'boolean',\n        };\n\n        const wsName = planStatus == AddonCompetencyProvider.STATUS_COMPLETE\n            ? 'core_competency_user_competency_plan_viewed'\n            : 'core_competency_user_competency_viewed_in_plan';\n\n        await site.write(wsName, params, preSets);\n    }\n\n    /**\n     * Report the competency as being viewed in course.\n     *\n     * @param courseId ID of the course.\n     * @param competencyId ID of the competency.\n     * @param name Deprecated, not used anymore.\n     * @param userId User ID. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logCompetencyInCourseView(\n        courseId: number,\n        competencyId: number,\n        name?: string,\n        userId?: number,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        const params: AddonCompetencyUserCompetencyViewedInCourseWSParams = {\n            courseid: courseId,\n            competencyid: competencyId,\n            userid: userId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            typeExpected: 'boolean',\n        };\n\n        await site.write('core_competency_user_competency_viewed_in_course', params, preSets);\n    }\n\n    /**\n     * Report the competency as being viewed.\n     *\n     * @param competencyId ID of the competency.\n     * @param name Name of the competency.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logCompetencyView(competencyId: number, name?: string, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonCompetencyCompetencyViewedWSParams = {\n            id: competencyId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            typeExpected: 'boolean',\n        };\n\n        await site.write('core_competency_competency_viewed', params, preSets);\n    }\n\n}\nexport const AddonCompetency = makeSingleton(AddonCompetencyProvider);\n\n/**\n * Data returned by competency's plan_exporter.\n */\nexport type AddonCompetencyPlan = {\n    name: string; // Name.\n    description: string; // Description.\n    descriptionformat?: number; // Description format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    userid: number; // Userid.\n    templateid: number; // Templateid.\n    origtemplateid: number; // Origtemplateid.\n    status: number; // Status.\n    duedate: number; // Duedate.\n    reviewerid: number; // Reviewerid.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n    statusname: string; // Statusname.\n    isbasedontemplate: boolean; // Isbasedontemplate.\n    canmanage: boolean; // Canmanage.\n    canrequestreview: boolean; // Canrequestreview.\n    canreview: boolean; // Canreview.\n    canbeedited: boolean; // Canbeedited.\n    isactive: boolean; // Isactive.\n    isdraft: boolean; // Isdraft.\n    iscompleted: boolean; // Iscompleted.\n    isinreview: boolean; // Isinreview.\n    iswaitingforreview: boolean; // Iswaitingforreview.\n    isreopenallowed: boolean; // Isreopenallowed.\n    iscompleteallowed: boolean; // Iscompleteallowed.\n    isunlinkallowed: boolean; // Isunlinkallowed.\n    isrequestreviewallowed: boolean; // Isrequestreviewallowed.\n    iscancelreviewrequestallowed: boolean; // Iscancelreviewrequestallowed.\n    isstartreviewallowed: boolean; // Isstartreviewallowed.\n    isstopreviewallowed: boolean; // Isstopreviewallowed.\n    isapproveallowed: boolean; // Isapproveallowed.\n    isunapproveallowed: boolean; // Isunapproveallowed.\n    duedateformatted: string; // Duedateformatted.\n    commentarea: CoreCommentsArea;\n    reviewer?: CoreUserSummary;\n    template?: AddonCompetencyTemplate;\n    url: string; // Url.\n};\n\n/**\n * Data returned by competency's template_exporter.\n */\nexport type AddonCompetencyTemplate = {\n    shortname: string; // Shortname.\n    description: string; // Description.\n    descriptionformat?: number; // Description format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    duedate: number; // Duedate.\n    visible: boolean; // Visible.\n    contextid: number; // Contextid.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n    duedateformatted: string; // Duedateformatted.\n    cohortscount: number; // Cohortscount.\n    planscount: number; // Planscount.\n    canmanage: boolean; // Canmanage.\n    canread: boolean; // Canread.\n    contextname: string; // Contextname.\n    contextnamenoprefix: string; // Contextnamenoprefix.\n};\n\n/**\n * Data returned by competency's competency_exporter.\n */\nexport type AddonCompetencyCompetency = {\n    shortname: string; // Shortname.\n    idnumber: string; // Idnumber.\n    description: string; // Description.\n    descriptionformat: number; // Description format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    sortorder: number; // Sortorder.\n    parentid: number; // Parentid.\n    path: string; // Path.\n    ruleoutcome: number; // Ruleoutcome.\n    ruletype: string; // Ruletype.\n    ruleconfig: string; // Ruleconfig.\n    scaleid: number; // Scaleid.\n    scaleconfiguration: string; // Scaleconfiguration.\n    competencyframeworkid: number; // Competencyframeworkid.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n};\n\n/**\n * Data returned by competency's competency_path_exporter.\n */\nexport type AddonCompetencyPath = {\n    ancestors: AddonCompetencyPathNode[]; // Ancestors.\n    framework: AddonCompetencyPathNode;\n    pluginbaseurl: string; // Pluginbaseurl.\n    pagecontextid: number; // Pagecontextid.\n    showlinks: boolean; // @since 3.7. Showlinks.\n};\n\n/**\n * Data returned by competency's path_node_exporter.\n */\nexport type AddonCompetencyPathNode = {\n    id: number; // Id.\n    name: string; // Name.\n    first: boolean; // First.\n    last: boolean; // Last.\n    position: number; // Position.\n};\n\n/**\n * Data returned by competency's user_competency_exporter.\n */\nexport type AddonCompetencyUserCompetency = {\n    userid: number; // Userid.\n    competencyid: number; // Competencyid.\n    status: number; // Status.\n    reviewerid: number; // Reviewerid.\n    proficiency: boolean; // Proficiency.\n    grade: number; // Grade.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n    canrequestreview: boolean; // Canrequestreview.\n    canreview: boolean; // Canreview.\n    gradename: string; // Gradename.\n    isrequestreviewallowed: boolean; // Isrequestreviewallowed.\n    iscancelreviewrequestallowed: boolean; // Iscancelreviewrequestallowed.\n    isstartreviewallowed: boolean; // Isstartreviewallowed.\n    isstopreviewallowed: boolean; // Isstopreviewallowed.\n    isstatusidle: boolean; // Isstatusidle.\n    isstatusinreview: boolean; // Isstatusinreview.\n    isstatuswaitingforreview: boolean; // Isstatuswaitingforreview.\n    proficiencyname: string; // Proficiencyname.\n    reviewer?: CoreUserSummary;\n    statusname: string; // Statusname.\n    url: string; // Url.\n};\n\n/**\n * Data returned by competency's user_competency_plan_exporter.\n */\nexport type AddonCompetencyUserCompetencyPlan = {\n    userid: number; // Userid.\n    competencyid: number; // Competencyid.\n    proficiency: boolean; // Proficiency.\n    grade: number; // Grade.\n    planid: number; // Planid.\n    sortorder: number; // Sortorder.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n    gradename: string; // Gradename.\n    proficiencyname: string; // Proficiencyname.\n};\n\n/**\n * Params of tool_lp_data_for_user_competency_summary_in_plan WS.\n */\ntype AddonCompetencyDataForUserCompetencySummaryInPlanWSParams = {\n    competencyid: number; // Data base record id for the competency.\n    planid: number; // Data base record id for the plan.\n};\n\n/**\n * Data returned by competency's user_competency_summary_in_plan_exporter.\n */\nexport type AddonCompetencyDataForUserCompetencySummaryInPlanWSResponse = {\n    usercompetencysummary: AddonCompetencyDataForUserCompetencySummaryWSResponse;\n    plan: AddonCompetencyPlan;\n};\n\n/**\n * Params of tool_lp_data_for_user_competency_summary WS.\n */\ntype AddonCompetencyDataForUserCompetencySummaryWSParams = {\n    userid: number; // Data base record id for the user.\n    competencyid: number; // Data base record id for the competency.\n};\n\n/**\n * Data returned by competency's user_competency_summary_exporter.\n */\nexport type AddonCompetencyDataForUserCompetencySummaryWSResponse = {\n    showrelatedcompetencies: boolean; // Showrelatedcompetencies.\n    cangrade: boolean; // Cangrade.\n    competency: AddonCompetencySummary;\n    user: CoreUserSummary;\n    usercompetency?: AddonCompetencyUserCompetency;\n    usercompetencyplan?: AddonCompetencyUserCompetencyPlan;\n    usercompetencycourse?: AddonCompetencyUserCompetencyCourse;\n    evidence: AddonCompetencyEvidence[]; // Evidence.\n    commentarea?: CoreCommentsArea;\n};\n\n/**\n * Data returned by competency's competency_summary_exporter.\n */\nexport type AddonCompetencySummary = {\n    linkedcourses: CoreCourseSummary; // Linkedcourses.\n    relatedcompetencies: AddonCompetencyCompetency[]; // Relatedcompetencies.\n    competency: AddonCompetencyCompetency;\n    framework: AddonCompetencyFramework;\n    hascourses: boolean; // Hascourses.\n    hasrelatedcompetencies: boolean; // Hasrelatedcompetencies.\n    scaleid: number; // Scaleid.\n    scaleconfiguration: string; // Scaleconfiguration.\n    taxonomyterm: string; // Taxonomyterm.\n    comppath: AddonCompetencyPath;\n    pluginbaseurl: string; // @since 3.7. Pluginbaseurl.\n};\n\n/**\n * Data returned by competency's competency_framework_exporter.\n */\nexport type AddonCompetencyFramework = {\n    shortname: string; // Shortname.\n    idnumber: string; // Idnumber.\n    description: string; // Description.\n    descriptionformat: number; // Description format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    visible: boolean; // Visible.\n    scaleid: number; // Scaleid.\n    scaleconfiguration: string; // Scaleconfiguration.\n    contextid: number; // Contextid.\n    taxonomies: string; // Taxonomies.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n    canmanage: boolean; // Canmanage.\n    competenciescount: number; // Competenciescount.\n    contextname: string; // Contextname.\n    contextnamenoprefix: string; // Contextnamenoprefix.\n};\n\n/**\n * Data returned by competency's user_competency_course_exporter.\n */\nexport type AddonCompetencyUserCompetencyCourse = {\n    userid: number; // Userid.\n    courseid: number; // Courseid.\n    competencyid: number; // Competencyid.\n    proficiency: boolean; // Proficiency.\n    grade: number; // Grade.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n    gradename: string; // Gradename.\n    proficiencyname: string; // Proficiencyname.\n};\n\n/**\n * Data returned by competency's evidence_exporter.\n */\nexport type AddonCompetencyEvidence = {\n    usercompetencyid: number; // Usercompetencyid.\n    contextid: number; // Contextid.\n    action: number; // Action.\n    actionuserid: number; // Actionuserid.\n    descidentifier: string; // Descidentifier.\n    desccomponent: string; // Desccomponent.\n    desca: string; // Desca.\n    url: string; // Url.\n    grade: number; // Grade.\n    note: string; // Note.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n    actionuser?: CoreUserSummary;\n    description: string; // Description.\n    gradename: string; // Gradename.\n    userdate: string; // Userdate.\n    candelete: boolean; // Candelete.\n};\n\n/**\n * Params of tool_lp_data_for_user_competency_summary_in_course WS.\n */\ntype AddonCompetencyDataForUserCompetencySummaryInCourseWSParams = {\n    userid: number; // Data base record id for the user.\n    competencyid: number; // Data base record id for the competency.\n    courseid: number; // Data base record id for the course.\n};\n\n/**\n * Data returned by competency's user_competency_summary_in_course_exporter.\n */\nexport type AddonCompetencyDataForUserCompetencySummaryInCourseWSResponse = {\n    usercompetencysummary: AddonCompetencyDataForUserCompetencySummaryWSResponse;\n    course: CoreCourseSummary;\n    coursemodules: CoreCourseModuleSummary[]; // Coursemodules.\n    plans: AddonCompetencyPlan[]; // @since 3.7. Plans.\n    pluginbaseurl: string; // @since 3.7. Pluginbaseurl.\n};\n\n/**\n * Data returned by competency's course_competency_settings_exporter.\n */\nexport type AddonCompetencyCourseCompetencySettings = {\n    courseid: number; // Courseid.\n    pushratingstouserplans: boolean; // Pushratingstouserplans.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n};\n\n/**\n * Data returned by competency's course_competency_statistics_exporter.\n */\nexport type AddonCompetencyCourseCompetencyStatistics = {\n    competencycount: number; // Competencycount.\n    proficientcompetencycount: number; // Proficientcompetencycount.\n    proficientcompetencypercentage: number; // Proficientcompetencypercentage.\n    proficientcompetencypercentageformatted: string; // Proficientcompetencypercentageformatted.\n    leastproficient: AddonCompetencyCompetency[]; // Leastproficient.\n    leastproficientcount: number; // Leastproficientcount.\n    canbegradedincourse: boolean; // Canbegradedincourse.\n    canmanagecoursecompetencies: boolean; // Canmanagecoursecompetencies.\n};\n\n/**\n * Data returned by competency's course_competency_exporter.\n */\nexport type AddonCompetencyCourseCompetency = {\n    courseid: number; // Courseid.\n    competencyid: number; // Competencyid.\n    sortorder: number; // Sortorder.\n    ruleoutcome: number; // Ruleoutcome.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n};\n\n/**\n * Params of tool_lp_data_for_plans_page WS.\n */\ntype AddonCompetencyDataForPlansPageWSParams = {\n    userid: number; // The user id.\n};\n\n/**\n * Data returned by tool_lp_data_for_plans_page WS.\n */\nexport type AddonCompetencyDataForPlansPageWSResponse = {\n    userid: number; // The learning plan user id.\n    plans: AddonCompetencyPlan[];\n    pluginbaseurl: string; // Url to the tool_lp plugin folder on this Moodle site.\n    navigation: string[];\n    canreaduserevidence: boolean; // Can the current user view the user's evidence.\n    canmanageuserplans: boolean; // Can the current user manage the user's plans.\n};\n\n/**\n * Params of tool_lp_data_for_plan_page WS.\n */\ntype AddonCompetencyDataForPlanPageWSParams = {\n    planid: number; // The plan id.\n};\n\n/**\n * Data returned by tool_lp_data_for_plan_page WS.\n */\nexport type AddonCompetencyDataForPlanPageWSResponse = {\n    plan: AddonCompetencyPlan;\n    contextid: number; // Context ID.\n    pluginbaseurl: string; // Plugin base URL.\n    competencies: AddonCompetencyDataForPlanPageCompetency[];\n    competencycount: number; // Count of competencies.\n    proficientcompetencycount: number; // Count of proficientcompetencies.\n    proficientcompetencypercentage: number; // Percentage of competencies proficient.\n    proficientcompetencypercentageformatted: string; // Displayable percentage.\n};\n\n/**\n * Competency data returned by tool_lp_data_for_plan_page.\n */\nexport type AddonCompetencyDataForPlanPageCompetency = {\n    competency: AddonCompetencyCompetency;\n    comppath: AddonCompetencyPath;\n    usercompetency?: AddonCompetencyUserCompetency;\n    usercompetencyplan?: AddonCompetencyUserCompetencyPlan;\n};\n\n/**\n * Params of tool_lp_data_for_course_competencies_page WS.\n */\ntype AddonCompetencyDataForCourseCompetenciesPageWSParams = {\n    courseid: number; // The course id.\n    moduleid?: number; // The module id.\n};\n\n/**\n * Data returned by tool_lp_data_for_course_competencies_page WS.\n */\nexport type AddonCompetencyDataForCourseCompetenciesPageWSResponse = {\n    courseid: number; // The current course id.\n    pagecontextid: number; // The current page context ID.\n    gradableuserid?: number; // Current user id, if the user is a gradable user.\n    canmanagecompetencyframeworks: boolean; // User can manage competency frameworks.\n    canmanagecoursecompetencies: boolean; // User can manage linked course competencies.\n    canconfigurecoursecompetencies: boolean; // User can configure course competency settings.\n    cangradecompetencies: boolean; // User can grade competencies.\n    settings: AddonCompetencyCourseCompetencySettings;\n    statistics: AddonCompetencyCourseCompetencyStatistics;\n    competencies: AddonCompetencyDataForCourseCompetenciesPageCompetency[];\n    manageurl: string; // Url to the manage competencies page.\n    pluginbaseurl: string; // @since 3.6. Url to the course competencies page.\n};\n\n/**\n * Competency data returned by tool_lp_data_for_course_competencies_page.\n */\nexport type AddonCompetencyDataForCourseCompetenciesPageCompetency = {\n    competency: AddonCompetencyCompetency;\n    coursecompetency: AddonCompetencyCourseCompetency;\n    coursemodules: CoreCourseModuleSummary[];\n    usercompetencycourse?: AddonCompetencyUserCompetencyCourse;\n    ruleoutcomeoptions: {\n        value: number; // The option value.\n        text: string; // The name of the option.\n        selected: boolean; // If this is the currently selected option.\n    }[];\n    comppath: AddonCompetencyPath;\n    plans: AddonCompetencyPlan[]; // @since 3.7.\n};\n\n/**\n * Params of core_competency_user_competency_plan_viewed and core_competency_user_competency_viewed_in_plan WS.\n */\ntype AddonCompetencyUserCompetencyPlanViewedWSParams = {\n    competencyid: number; // The competency id.\n    userid: number; // The user id.\n    planid: number; // The plan id.\n};\n\n/**\n * Params of core_competency_user_competency_viewed_in_course WS.\n */\ntype AddonCompetencyUserCompetencyViewedInCourseWSParams = {\n    competencyid: number; // The competency id.\n    userid: number; // The user id.\n    courseid: number; // The course id.\n};\n\n/**\n * Params of core_competency_competency_viewed WS.\n */\ntype AddonCompetencyCompetencyViewedWSParams = {\n    id: number; // The competency id.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}