{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNetwork } from '@services/network';\nimport { CoreFile } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModForum, AddonModForumProvider } from './forum';\nimport { AddonModForumOffline } from './forum-offline';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides some features for forums.\n */\nexport class AddonModForumHelperProvider {\n  /**\n   * Add a new discussion.\n   *\n   * @param forumId Forum ID.\n   * @param name Forum name.\n   * @param courseId Course ID the forum belongs to.\n   * @param subject New discussion's subject.\n   * @param message New discussion's message.\n   * @param attachments New discussion's attachments.\n   * @param options Options (subscribe, pin, ...).\n   * @param groupIds Groups this discussion belongs to.\n   * @param timeCreated The time the discussion was created. Only used when editing discussion.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with ids of the created discussions or null if stored offline\n   */\n  addNewDiscussion(forumId, name, courseId, subject, message, attachments, options, groupIds = [], timeCreated, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      groupIds = groupIds && groupIds.length > 0 ? groupIds : [0];\n      let saveOffline = false;\n      const attachmentsIds = [];\n      let offlineAttachments;\n      // Convenience function to store a message to be synchronized later.\n      const storeOffline = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* () {\n          // Multiple groups, the discussion is being posted to all groups.\n          const groupId = groupIds.length > 1 ? AddonModForumProvider.ALL_GROUPS : groupIds[0];\n          if (offlineAttachments && options) {\n            options.attachmentsid = offlineAttachments;\n          }\n          yield AddonModForumOffline.addNewDiscussion(forumId, name, courseId, subject, message, options, groupId, timeCreated, siteId);\n        });\n        return function storeOffline() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      // First try to upload attachments, once per group.\n      if (attachments && attachments.length > 0) {\n        const promises = groupIds.map(() => _this.uploadOrStoreNewDiscussionFiles(forumId, timeCreated || 0, attachments, false).then(attach => attachmentsIds.push(attach)));\n        try {\n          yield Promise.all(promises);\n        } catch (error) {\n          if (CoreUtils.isWebServiceError(error)) {\n            throw error;\n          }\n          // Cannot upload them in online, save them in offline.\n          saveOffline = true;\n          const attach = yield _this.uploadOrStoreNewDiscussionFiles(forumId, timeCreated || 0, attachments, true);\n          offlineAttachments = attach;\n        }\n      }\n      // If we are editing an offline discussion, discard previous first.\n      if (timeCreated) {\n        yield AddonModForumOffline.deleteNewDiscussion(forumId, timeCreated, siteId);\n      }\n      if (saveOffline || !CoreNetwork.isOnline()) {\n        yield storeOffline();\n        return null;\n      }\n      const errors = [];\n      const discussionIds = [];\n      const promises = groupIds.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (groupId, index) {\n          const groupOptions = CoreUtils.clone(options);\n          if (groupOptions && attachmentsIds[index]) {\n            groupOptions.attachmentsid = attachmentsIds[index];\n          }\n          try {\n            const discussionId = yield AddonModForum.addNewDiscussionOnline(forumId, subject, message, groupOptions, groupId, siteId);\n            discussionIds.push(discussionId);\n          } catch (error) {\n            errors.push(error);\n          }\n        });\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      yield Promise.all(promises);\n      if (errors.length == groupIds.length) {\n        // All requests have failed.\n        for (let i = 0; i < errors.length; i++) {\n          if (CoreUtils.isWebServiceError(errors[i]) || attachments && attachments.length > 0) {\n            // The WebService has thrown an error or offline not supported, reject.\n            throw errors[i];\n          }\n        }\n        // Couldn't connect to server, store offline.\n        yield storeOffline();\n        return null;\n      }\n      return discussionIds;\n    })();\n  }\n  /**\n   * Convert offline reply to online format in order to be compatible with them.\n   *\n   * @param offlineReply Offline version of the reply.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the object converted to Online.\n   */\n  convertOfflineReplyToOnline(offlineReply, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var _offlineReply$options, _reply$attachments;\n      const reply = {\n        id: -offlineReply.timecreated,\n        discussionid: offlineReply.discussionid,\n        parentid: offlineReply.postid,\n        hasparent: !!offlineReply.postid,\n        author: {\n          id: offlineReply.userid\n        },\n        timecreated: false,\n        subject: offlineReply.subject,\n        message: offlineReply.message,\n        attachments: [],\n        capabilities: {\n          reply: false\n        },\n        unread: false,\n        isprivatereply: !!((_offlineReply$options = offlineReply.options) !== null && _offlineReply$options !== void 0 && _offlineReply$options.private)\n      };\n      const promises = [];\n      // Treat attachments if any.\n      if (offlineReply.options && offlineReply.options.attachmentsid) {\n        const attachments = offlineReply.options.attachmentsid;\n        reply.attachments = typeof attachments === 'object' && 'online' in attachments ? attachments.online : [];\n        if (typeof attachments === 'object' && attachments.offline) {\n          promises.push(_this2.getReplyStoredFiles(offlineReply.forumid, reply.parentid, siteId, offlineReply.userid).then(files => {\n            reply.attachments = reply.attachments.concat(files);\n            return;\n          }));\n        }\n      }\n      // Get user data.\n      promises.push(CoreUtils.ignoreErrors(CoreUser.instance.getProfile(offlineReply.userid, offlineReply.courseid, true).then(user => {\n        reply.author.fullname = user.fullname;\n        reply.author.urls = {\n          profileimage: user.profileimageurl\n        };\n        return;\n      })));\n      yield Promise.all(promises);\n      reply.attachment = (_reply$attachments = reply.attachments) !== null && _reply$attachments !== void 0 && _reply$attachments.length ? 1 : 0;\n      return reply;\n    })();\n  }\n  /**\n   * Delete stored attachment files for a new discussion.\n   *\n   * @param forumId Forum ID.\n   * @param timecreated The time the discussion was created.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when deleted.\n   */\n  deleteNewDiscussionStoredFiles(forumId, timecreated, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModForumOffline.getNewDiscussionFolder(forumId, timecreated, siteId);\n      // Ignore any errors, CoreFileProvider.removeDir fails if folder doesn't exist.\n      yield CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    })();\n  }\n  /**\n   * Delete stored attachment files for a reply.\n   *\n   * @param forumId Forum ID.\n   * @param postId ID of the post being replied.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the reply belongs to. If not defined, current user in site.\n   * @returns Promise resolved when deleted.\n   */\n  deleteReplyStoredFiles(forumId, postId, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModForumOffline.getReplyFolder(forumId, postId, siteId, userId);\n      // Ignore any errors, CoreFileProvider.removeDir fails if folder doesn't exist.\n      yield CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    })();\n  }\n  /**\n   * Returns the availability message of the given forum.\n   *\n   * @param forum Forum instance.\n   * @param getDueDateMessage Whether to get due date message. If false, only cutoff date message will be returned.\n   * @returns Message or null if the forum has no cut-off or due date.\n   */\n  getAvailabilityMessage(forum, getDueDateMessage = true) {\n    if (this.isCutoffDateReached(forum)) {\n      return Translate.instant('addon.mod_forum.cutoffdatereached');\n    }\n    if (getDueDateMessage) {\n      if (this.isDueDateReached(forum)) {\n        const dueDate = CoreTimeUtils.userDate(forum.duedate * 1000);\n        return Translate.instant('addon.mod_forum.thisforumisdue', {\n          $a: dueDate\n        });\n      }\n      if (forum.duedate && forum.duedate > 0) {\n        const dueDate = CoreTimeUtils.userDate(forum.duedate * 1000);\n        return Translate.instant('addon.mod_forum.thisforumhasduedate', {\n          $a: dueDate\n        });\n      }\n    }\n    return null;\n  }\n  /**\n   * Get a forum discussion by id.\n   *\n   * This function is inefficient because it needs to fetch all discussion pages in the worst case.\n   *\n   * @param forumId Forum ID.\n   * @param cmId Forum cmid\n   * @param discussionId Discussion ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the discussion data.\n   */\n  getDiscussionById(forumId, cmId, discussionId, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    const findDiscussion = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (page) {\n        const response = yield AddonModForum.getDiscussions(forumId, {\n          cmId,\n          page,\n          siteId\n        });\n        if (response.discussions && response.discussions.length > 0) {\n          // Note that discussion.id is the main post ID but discussion ID is discussion.discussion.\n          const discussion = response.discussions.find(discussion => discussion.discussion == discussionId);\n          if (discussion) {\n            return discussion;\n          }\n          if (response.canLoadMore) {\n            return findDiscussion(page + 1);\n          }\n        }\n        throw new Error('Discussion not found');\n      });\n      return function findDiscussion(_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    return findDiscussion(0);\n  }\n  /**\n   * Get a list of stored attachment files for a new discussion. See AddonModForumHelper#storeNewDiscussionFiles.\n   *\n   * @param forumId Forum ID.\n   * @param timecreated The time the discussion was created.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getNewDiscussionStoredFiles(forumId, timecreated, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModForumOffline.getNewDiscussionFolder(forumId, timecreated, siteId);\n      return CoreFileUploader.getStoredFiles(folderPath);\n    })();\n  }\n  /**\n   * Get a list of stored attachment files for a reply. See AddonModForumHelper#storeReplyFiles.\n   *\n   * @param forumId Forum ID.\n   * @param postId ID of the post being replied.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the reply belongs to. If not defined, current user in site.\n   * @returns Promise resolved with the files.\n   */\n  getReplyStoredFiles(forumId, postId, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModForumOffline.getReplyFolder(forumId, postId, siteId, userId);\n      return CoreFileUploader.getStoredFiles(folderPath);\n    })();\n  }\n  /**\n   * Check if the data of a post/discussion has changed.\n   *\n   * @param reply Current data.\n   * @param original Original ata.\n   * @returns True if data has changed, false otherwise.\n   */\n  hasPostDataChanged(reply, original) {\n    var _reply$files, _original$files;\n    if (!original || original.subject == null) {\n      // There is no original data, assume it hasn't changed.\n      return false;\n    }\n    if (reply.subject != original.subject || reply.message != original.message) {\n      return true;\n    }\n    if (reply.isprivatereply != original.isprivatereply) {\n      return true;\n    }\n    return CoreFileUploader.areFileListDifferent((_reply$files = reply.files) !== null && _reply$files !== void 0 ? _reply$files : [], (_original$files = original.files) !== null && _original$files !== void 0 ? _original$files : []);\n  }\n  /**\n   * Is the cutoff date for the forum reached?\n   *\n   * @param forum Forum instance.\n   * @returns If cut off date has been reached.\n   */\n  isCutoffDateReached(forum) {\n    const now = Date.now() / 1000;\n    return !!forum.cutoffdate && forum.cutoffdate > 0 && forum.cutoffdate < now;\n  }\n  /**\n   * Is the due date for the forum reached?\n   *\n   * @param forum Forum instance.\n   * @returns If due date has been reached.\n   */\n  isDueDateReached(forum) {\n    var _forum$duedate;\n    const now = Date.now() / 1000;\n    const duedate = (_forum$duedate = forum.duedate) !== null && _forum$duedate !== void 0 ? _forum$duedate : 0;\n    return duedate > 0 && duedate < now;\n  }\n  /**\n   * Given a list of files (either online files or local files), store the local files in a local folder\n   * to be submitted later.\n   *\n   * @param forumId Forum ID.\n   * @param timecreated The time the discussion was created.\n   * @param files List of files.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if success, rejected otherwise.\n   */\n  storeNewDiscussionFiles(forumId, timecreated, files, siteId) {\n    return _asyncToGenerator(function* () {\n      // Get the folder where to store the files.\n      const folderPath = yield AddonModForumOffline.getNewDiscussionFolder(forumId, timecreated, siteId);\n      return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    })();\n  }\n  /**\n   * Given a list of files (either online files or local files), store the local files in a local folder\n   * to be submitted later.\n   *\n   * @param forumId Forum ID.\n   * @param postId ID of the post being replied.\n   * @param files List of files.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the reply belongs to. If not defined, current user in site.\n   * @returns Promise resolved if success, rejected otherwise.\n   */\n  storeReplyFiles(forumId, postId, files, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      // Get the folder where to store the files.\n      const folderPath = yield AddonModForumOffline.getReplyFolder(forumId, postId, siteId, userId);\n      return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    })();\n  }\n  uploadOrStoreNewDiscussionFiles(forumId, timecreated, files, offline, siteId) {\n    if (offline) {\n      return this.storeNewDiscussionFiles(forumId, timecreated, files, siteId);\n    }\n    return CoreFileUploader.uploadOrReuploadFiles(files, AddonModForumProvider.COMPONENT, forumId, siteId);\n  }\n  uploadOrStoreReplyFiles(forumId, postId, files, offline, siteId, userId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (offline) {\n        return _this3.storeReplyFiles(forumId, postId, files, siteId, userId);\n      }\n      return CoreFileUploader.uploadOrReuploadFiles(files, AddonModForumProvider.COMPONENT, forumId, siteId);\n    })();\n  }\n}\n_class = AddonModForumHelperProvider;\n_class.ɵfac = function AddonModForumHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModForumHelper = makeSingleton(AddonModForumHelperProvider);","map":{"version":3,"names":["CoreFileUploader","CoreUser","CoreNetwork","CoreFile","CoreSites","CoreTimeUtils","CoreUtils","makeSingleton","Translate","AddonModForum","AddonModForumProvider","AddonModForumOffline","AddonModForumHelperProvider","addNewDiscussion","forumId","name","courseId","subject","message","attachments","options","groupIds","timeCreated","siteId","_this","_asyncToGenerator","getCurrentSiteId","length","saveOffline","attachmentsIds","offlineAttachments","storeOffline","_ref","groupId","ALL_GROUPS","attachmentsid","apply","arguments","promises","map","uploadOrStoreNewDiscussionFiles","then","attach","push","Promise","all","error","isWebServiceError","deleteNewDiscussion","isOnline","errors","discussionIds","_ref2","index","groupOptions","clone","discussionId","addNewDiscussionOnline","_x","_x2","i","convertOfflineReplyToOnline","offlineReply","_this2","_offlineReply$options","_reply$attachments","reply","id","timecreated","discussionid","parentid","postid","hasparent","author","userid","capabilities","unread","isprivatereply","private","online","offline","getReplyStoredFiles","forumid","files","concat","ignoreErrors","instance","getProfile","courseid","user","fullname","urls","profileimage","profileimageurl","attachment","deleteNewDiscussionStoredFiles","folderPath","getNewDiscussionFolder","removeDir","deleteReplyStoredFiles","postId","userId","getReplyFolder","getAvailabilityMessage","forum","getDueDateMessage","isCutoffDateReached","instant","isDueDateReached","dueDate","userDate","duedate","$a","getDiscussionById","cmId","findDiscussion","_ref3","page","response","getDiscussions","discussions","discussion","find","canLoadMore","Error","_x3","getNewDiscussionStoredFiles","getStoredFiles","hasPostDataChanged","original","_reply$files","_original$files","areFileListDifferent","now","Date","cutoffdate","_forum$duedate","storeNewDiscussionFiles","storeFilesToUpload","storeReplyFiles","uploadOrReuploadFiles","COMPONENT","uploadOrStoreReplyFiles","_this3","factory","ɵfac","providedIn","AddonModForumHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/forum/services/forum-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { FileEntry } from '@awesome-cordova-plugins/file/ngx';\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNetwork } from '@services/network';\nimport { CoreFile } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport {\n    AddonModForum,\n    AddonModForumAddDiscussionWSOptionsObject,\n    AddonModForumData,\n    AddonModForumDiscussion,\n    AddonModForumPost,\n    AddonModForumProvider,\n} from './forum';\nimport { AddonModForumDiscussionOptions, AddonModForumOffline, AddonModForumOfflineReply } from './forum-offline';\nimport { CoreFileEntry } from '@services/file-helper';\n\n/**\n * Service that provides some features for forums.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModForumHelperProvider {\n\n    /**\n     * Add a new discussion.\n     *\n     * @param forumId Forum ID.\n     * @param name Forum name.\n     * @param courseId Course ID the forum belongs to.\n     * @param subject New discussion's subject.\n     * @param message New discussion's message.\n     * @param attachments New discussion's attachments.\n     * @param options Options (subscribe, pin, ...).\n     * @param groupIds Groups this discussion belongs to.\n     * @param timeCreated The time the discussion was created. Only used when editing discussion.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with ids of the created discussions or null if stored offline\n     */\n    async addNewDiscussion(\n        forumId: number,\n        name: string,\n        courseId: number,\n        subject: string,\n        message: string,\n        attachments?: CoreFileEntry[],\n        options?: AddonModForumDiscussionOptions,\n        groupIds: number[] = [],\n        timeCreated?: number,\n        siteId?: string,\n    ): Promise<number[] | null> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n        groupIds = (groupIds && groupIds.length > 0) ? groupIds : [0];\n\n        let saveOffline = false;\n        const attachmentsIds: number[] = [];\n        let offlineAttachments: CoreFileUploaderStoreFilesResult;\n\n        // Convenience function to store a message to be synchronized later.\n        const storeOffline = async (): Promise<void> => {\n            // Multiple groups, the discussion is being posted to all groups.\n            const groupId = groupIds.length > 1 ? AddonModForumProvider.ALL_GROUPS : groupIds[0];\n\n            if (offlineAttachments && options) {\n                options.attachmentsid = offlineAttachments;\n            }\n\n            await AddonModForumOffline.addNewDiscussion(\n                forumId,\n                name,\n                courseId,\n                subject,\n                message,\n                options,\n                groupId,\n                timeCreated,\n                siteId,\n            );\n        };\n\n        // First try to upload attachments, once per group.\n        if (attachments && attachments.length > 0) {\n            const promises = groupIds.map(\n                () => this\n                    .uploadOrStoreNewDiscussionFiles(forumId, timeCreated || 0, attachments, false)\n                    .then(attach => attachmentsIds.push(attach)),\n            );\n\n            try {\n                await Promise.all(promises);\n            } catch (error) {\n                if (CoreUtils.isWebServiceError(error)) {\n                    throw error;\n                }\n\n                // Cannot upload them in online, save them in offline.\n                saveOffline = true;\n\n                const attach = await this.uploadOrStoreNewDiscussionFiles(forumId, timeCreated || 0, attachments, true);\n\n                offlineAttachments = attach;\n            }\n        }\n\n        // If we are editing an offline discussion, discard previous first.\n        if (timeCreated) {\n            await AddonModForumOffline.deleteNewDiscussion(forumId, timeCreated, siteId);\n        }\n\n        if (saveOffline || !CoreNetwork.isOnline()) {\n            await storeOffline();\n\n            return null;\n        }\n\n        const errors: Error[] = [];\n        const discussionIds: number[] = [];\n        const promises = groupIds.map(async (groupId, index) => {\n            const groupOptions = CoreUtils.clone(options);\n\n            if (groupOptions && attachmentsIds[index]) {\n                groupOptions.attachmentsid = attachmentsIds[index];\n            }\n\n            try {\n                const discussionId = await AddonModForum.addNewDiscussionOnline(\n                    forumId,\n                    subject,\n                    message,\n                    groupOptions as unknown as AddonModForumAddDiscussionWSOptionsObject,\n                    groupId,\n                    siteId,\n                );\n\n                discussionIds.push(discussionId);\n            } catch (error) {\n                errors.push(error);\n            }\n        });\n\n        await Promise.all(promises);\n\n        if (errors.length == groupIds.length) {\n            // All requests have failed.\n            for (let i = 0; i < errors.length; i++) {\n                if (CoreUtils.isWebServiceError(errors[i]) || (attachments && attachments.length > 0)) {\n                    // The WebService has thrown an error or offline not supported, reject.\n                    throw errors[i];\n                }\n            }\n\n            // Couldn't connect to server, store offline.\n            await storeOffline();\n\n            return null;\n        }\n\n        return discussionIds;\n    }\n\n    /**\n     * Convert offline reply to online format in order to be compatible with them.\n     *\n     * @param offlineReply Offline version of the reply.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the object converted to Online.\n     */\n    async convertOfflineReplyToOnline(offlineReply: AddonModForumOfflineReply, siteId?: string): Promise<AddonModForumPost> {\n        const reply: AddonModForumPost = {\n            id: -offlineReply.timecreated,\n            discussionid: offlineReply.discussionid,\n            parentid: offlineReply.postid,\n            hasparent: !!offlineReply.postid,\n            author: {\n                id: offlineReply.userid,\n            },\n            timecreated: false,\n            subject: offlineReply.subject,\n            message: offlineReply.message,\n            attachments: [],\n            capabilities: {\n                reply: false,\n            },\n            unread: false,\n            isprivatereply: !!offlineReply.options?.private,\n        };\n        const promises: Promise<void>[] = [];\n\n        // Treat attachments if any.\n        if (offlineReply.options && offlineReply.options.attachmentsid) {\n            const attachments = offlineReply.options.attachmentsid;\n\n            reply.attachments = typeof attachments === 'object' && 'online' in attachments ? attachments.online : [];\n\n            if (typeof attachments === 'object' && attachments.offline) {\n                promises.push(\n                    this\n                        .getReplyStoredFiles(offlineReply.forumid, reply.parentid!, siteId, offlineReply.userid)\n                        .then(files => {\n                            reply.attachments = reply.attachments!.concat(files as unknown as []);\n\n                            return;\n                        }),\n                );\n            }\n        }\n\n        // Get user data.\n        promises.push(\n            CoreUtils.ignoreErrors(\n                CoreUser.instance\n                    .getProfile(offlineReply.userid, offlineReply.courseid, true)\n                    .then(user => {\n                        reply.author.fullname = user.fullname;\n                        reply.author.urls = { profileimage: user.profileimageurl };\n\n                        return;\n                    }),\n            ),\n        );\n\n        await Promise.all(promises);\n\n        reply.attachment = reply.attachments?.length ? 1 : 0;\n\n        return reply;\n    }\n\n    /**\n     * Delete stored attachment files for a new discussion.\n     *\n     * @param forumId Forum ID.\n     * @param timecreated The time the discussion was created.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when deleted.\n     */\n    async deleteNewDiscussionStoredFiles(forumId: number, timecreated: number, siteId?: string): Promise<void> {\n        const folderPath = await AddonModForumOffline.getNewDiscussionFolder(forumId, timecreated, siteId);\n\n        // Ignore any errors, CoreFileProvider.removeDir fails if folder doesn't exist.\n        await CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    }\n\n    /**\n     * Delete stored attachment files for a reply.\n     *\n     * @param forumId Forum ID.\n     * @param postId ID of the post being replied.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the reply belongs to. If not defined, current user in site.\n     * @returns Promise resolved when deleted.\n     */\n    async deleteReplyStoredFiles(forumId: number, postId: number, siteId?: string, userId?: number): Promise<void> {\n        const folderPath = await AddonModForumOffline.getReplyFolder(forumId, postId, siteId, userId);\n\n        // Ignore any errors, CoreFileProvider.removeDir fails if folder doesn't exist.\n        await CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    }\n\n    /**\n     * Returns the availability message of the given forum.\n     *\n     * @param forum Forum instance.\n     * @param getDueDateMessage Whether to get due date message. If false, only cutoff date message will be returned.\n     * @returns Message or null if the forum has no cut-off or due date.\n     */\n    getAvailabilityMessage(forum: AddonModForumData, getDueDateMessage = true): string | null {\n        if (this.isCutoffDateReached(forum)) {\n            return Translate.instant('addon.mod_forum.cutoffdatereached');\n        }\n\n        if (getDueDateMessage) {\n            if (this.isDueDateReached(forum)) {\n                const dueDate = CoreTimeUtils.userDate(forum.duedate * 1000);\n\n                return Translate.instant('addon.mod_forum.thisforumisdue', { $a: dueDate });\n            }\n\n            if (forum.duedate && forum.duedate > 0) {\n                const dueDate = CoreTimeUtils.userDate(forum.duedate * 1000);\n\n                return Translate.instant('addon.mod_forum.thisforumhasduedate', { $a: dueDate });\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Get a forum discussion by id.\n     *\n     * This function is inefficient because it needs to fetch all discussion pages in the worst case.\n     *\n     * @param forumId Forum ID.\n     * @param cmId Forum cmid\n     * @param discussionId Discussion ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the discussion data.\n     */\n    getDiscussionById(forumId: number, cmId: number, discussionId: number, siteId?: string): Promise<AddonModForumDiscussion> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const findDiscussion = async (page: number): Promise<AddonModForumDiscussion> => {\n            const response = await AddonModForum.getDiscussions(forumId, {\n                cmId,\n                page,\n                siteId,\n            });\n\n            if (response.discussions && response.discussions.length > 0) {\n                // Note that discussion.id is the main post ID but discussion ID is discussion.discussion.\n                const discussion = response.discussions.find((discussion) => discussion.discussion == discussionId);\n\n                if (discussion) {\n                    return discussion;\n                }\n\n                if (response.canLoadMore) {\n                    return findDiscussion(page + 1);\n                }\n            }\n\n            throw new Error('Discussion not found');\n        };\n\n        return findDiscussion(0);\n    }\n\n    /**\n     * Get a list of stored attachment files for a new discussion. See AddonModForumHelper#storeNewDiscussionFiles.\n     *\n     * @param forumId Forum ID.\n     * @param timecreated The time the discussion was created.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getNewDiscussionStoredFiles(forumId: number, timecreated: number, siteId?: string): Promise<FileEntry[]> {\n        const folderPath = await AddonModForumOffline.getNewDiscussionFolder(forumId, timecreated, siteId);\n\n        return CoreFileUploader.getStoredFiles(folderPath);\n    }\n\n    /**\n     * Get a list of stored attachment files for a reply. See AddonModForumHelper#storeReplyFiles.\n     *\n     * @param forumId Forum ID.\n     * @param postId ID of the post being replied.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the reply belongs to. If not defined, current user in site.\n     * @returns Promise resolved with the files.\n     */\n    async getReplyStoredFiles(forumId: number, postId: number, siteId?: string, userId?: number): Promise<FileEntry[]> {\n        const folderPath = await AddonModForumOffline.getReplyFolder(forumId, postId, siteId, userId);\n\n        return CoreFileUploader.getStoredFiles(folderPath);\n    }\n\n    /**\n     * Check if the data of a post/discussion has changed.\n     *\n     * @param reply Current data.\n     * @param original Original ata.\n     * @returns True if data has changed, false otherwise.\n     */\n    hasPostDataChanged(reply: AddonModForumPostData, original?: AddonModForumPostData): boolean {\n        if (!original || original.subject == null) {\n            // There is no original data, assume it hasn't changed.\n            return false;\n        }\n\n        if (reply.subject != original.subject || reply.message != original.message) {\n            return true;\n        }\n\n        if (reply.isprivatereply != original.isprivatereply) {\n            return true;\n        }\n\n        return CoreFileUploader.areFileListDifferent(reply.files ?? [], original.files ?? []);\n    }\n\n    /**\n     * Is the cutoff date for the forum reached?\n     *\n     * @param forum Forum instance.\n     * @returns If cut off date has been reached.\n     */\n    isCutoffDateReached(forum: AddonModForumData): boolean {\n        const now = Date.now() / 1000;\n\n        return !!forum.cutoffdate && forum.cutoffdate > 0 && forum.cutoffdate < now;\n    }\n\n    /**\n     * Is the due date for the forum reached?\n     *\n     * @param forum Forum instance.\n     * @returns If due date has been reached.\n     */\n    isDueDateReached(forum: AddonModForumData): forum is AddonModForumData & { duedate: number } {\n        const now = Date.now() / 1000;\n        const duedate = forum.duedate ?? 0;\n\n        return duedate > 0 && duedate < now;\n    }\n\n    /**\n     * Given a list of files (either online files or local files), store the local files in a local folder\n     * to be submitted later.\n     *\n     * @param forumId Forum ID.\n     * @param timecreated The time the discussion was created.\n     * @param files List of files.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success, rejected otherwise.\n     */\n    async storeNewDiscussionFiles(\n        forumId: number,\n        timecreated: number,\n        files: CoreFileEntry[],\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult> {\n        // Get the folder where to store the files.\n        const folderPath = await AddonModForumOffline.getNewDiscussionFolder(forumId, timecreated, siteId);\n\n        return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    }\n\n    /**\n     * Given a list of files (either online files or local files), store the local files in a local folder\n     * to be submitted later.\n     *\n     * @param forumId Forum ID.\n     * @param postId ID of the post being replied.\n     * @param files List of files.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the reply belongs to. If not defined, current user in site.\n     * @returns Promise resolved if success, rejected otherwise.\n     */\n    async storeReplyFiles(\n        forumId: number,\n        postId: number,\n        files: CoreFileEntry[],\n        siteId?: string,\n        userId?: number,\n    ): Promise<CoreFileUploaderStoreFilesResult> {\n        // Get the folder where to store the files.\n        const folderPath = await AddonModForumOffline.getReplyFolder(forumId, postId, siteId, userId);\n\n        return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    }\n\n    /**\n     * Upload or store some files for a new discussion, depending if the user is offline or not.\n     *\n     * @param forumId Forum ID.\n     * @param timecreated The time the discussion was created.\n     * @param files List of files.\n     * @param offline True if files sould be stored for offline, false to upload them.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success.\n     */\n    uploadOrStoreNewDiscussionFiles(\n        forumId: number,\n        timecreated: number,\n        files: CoreFileEntry[],\n        offline: true,\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult>;\n    uploadOrStoreNewDiscussionFiles(\n        forumId: number,\n        timecreated: number,\n        files: CoreFileEntry[],\n        offline: false,\n        siteId?: string,\n    ): Promise<number>;\n    uploadOrStoreNewDiscussionFiles(\n        forumId: number,\n        timecreated: number,\n        files: CoreFileEntry[],\n        offline: boolean,\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult | number> {\n        if (offline) {\n            return this.storeNewDiscussionFiles(forumId, timecreated, files, siteId);\n        }\n\n        return CoreFileUploader.uploadOrReuploadFiles(files, AddonModForumProvider.COMPONENT, forumId, siteId);\n    }\n\n    /**\n     * Upload or store some files for a reply, depending if the user is offline or not.\n     *\n     * @param forumId Forum ID.\n     * @param postId ID of the post being replied.\n     * @param files List of files.\n     * @param offline True if files sould be stored for offline, false to upload them.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the reply belongs to. If not defined, current user in site.\n     * @returns Promise resolved if success.\n     */\n    async uploadOrStoreReplyFiles(\n        forumId: number,\n        postId: number,\n        files: CoreFileEntry[],\n        offline: true,\n        siteId?: string,\n        userId?: number,\n    ): Promise<CoreFileUploaderStoreFilesResult>;\n    async uploadOrStoreReplyFiles(\n        forumId: number,\n        postId: number,\n        files: CoreFileEntry[],\n        offline: false,\n        siteId?: string,\n        userId?: number,\n    ): Promise<number>;\n    async uploadOrStoreReplyFiles(\n        forumId: number,\n        postId: number,\n        files: CoreFileEntry[],\n        offline: boolean,\n        siteId?: string,\n        userId?: number,\n    ): Promise<CoreFileUploaderStoreFilesResult | number> {\n        if (offline) {\n            return this.storeReplyFiles(forumId, postId, files, siteId, userId);\n        }\n\n        return CoreFileUploader.uploadOrReuploadFiles(files, AddonModForumProvider.COMPONENT, forumId, siteId);\n    }\n\n}\n\nexport const AddonModForumHelper = makeSingleton(AddonModForumHelperProvider);\n\n/**\n * Forum post data used to check changes.\n */\ntype AddonModForumPostData = {\n    subject?: string | null;\n    message?: string | null;\n    isprivatereply?: boolean;\n    files?: CoreFileEntry[];\n};\n"],"mappings":";;AAgBA,SAASA,gBAAgB,QAA0C,8CAA8C;AACjH,SAASC,QAAQ,QAAQ,8BAA8B;AACvD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,EAAEC,SAAS,QAAQ,aAAa;AACtD,SACIC,aAAa,EAKbC,qBAAqB,QAClB,SAAS;AAChB,SAAyCC,oBAAoB,QAAmC,iBAAiB;;AAGjH;;;AAIA,OAAM,MAAOC,2BAA2B;EAEpC;;;;;;;;;;;;;;;EAeMC,gBAAgBA,CAClBC,OAAe,EACfC,IAAY,EACZC,QAAgB,EAChBC,OAAe,EACfC,OAAe,EACfC,WAA6B,EAC7BC,OAAwC,EACxCC,QAAA,GAAqB,EAAE,EACvBC,WAAoB,EACpBC,MAAe;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEfF,MAAM,GAAGA,MAAM,IAAInB,SAAS,CAACsB,gBAAgB,EAAE;MAC/CL,QAAQ,GAAIA,QAAQ,IAAIA,QAAQ,CAACM,MAAM,GAAG,CAAC,GAAIN,QAAQ,GAAG,CAAC,CAAC,CAAC;MAE7D,IAAIO,WAAW,GAAG,KAAK;MACvB,MAAMC,cAAc,GAAa,EAAE;MACnC,IAAIC,kBAAoD;MAExD;MACA,MAAMC,YAAY;QAAA,IAAAC,IAAA,GAAAP,iBAAA,CAAG,aAA0B;UAC3C;UACA,MAAMQ,OAAO,GAAGZ,QAAQ,CAACM,MAAM,GAAG,CAAC,GAAGjB,qBAAqB,CAACwB,UAAU,GAAGb,QAAQ,CAAC,CAAC,CAAC;UAEpF,IAAIS,kBAAkB,IAAIV,OAAO,EAAE;YAC/BA,OAAO,CAACe,aAAa,GAAGL,kBAAkB;;UAG9C,MAAMnB,oBAAoB,CAACE,gBAAgB,CACvCC,OAAO,EACPC,IAAI,EACJC,QAAQ,EACRC,OAAO,EACPC,OAAO,EACPE,OAAO,EACPa,OAAO,EACPX,WAAW,EACXC,MAAM,CACT;QACL,CAAC;QAAA,gBAnBKQ,YAAYA,CAAA;UAAA,OAAAC,IAAA,CAAAI,KAAA,OAAAC,SAAA;QAAA;MAAA,GAmBjB;MAED;MACA,IAAIlB,WAAW,IAAIA,WAAW,CAACQ,MAAM,GAAG,CAAC,EAAE;QACvC,MAAMW,QAAQ,GAAGjB,QAAQ,CAACkB,GAAG,CACzB,MAAMf,KAAI,CACLgB,+BAA+B,CAAC1B,OAAO,EAAEQ,WAAW,IAAI,CAAC,EAAEH,WAAW,EAAE,KAAK,CAAC,CAC9EsB,IAAI,CAACC,MAAM,IAAIb,cAAc,CAACc,IAAI,CAACD,MAAM,CAAC,CAAC,CACnD;QAED,IAAI;UACA,MAAME,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;SAC9B,CAAC,OAAOQ,KAAK,EAAE;UACZ,IAAIxC,SAAS,CAACyC,iBAAiB,CAACD,KAAK,CAAC,EAAE;YACpC,MAAMA,KAAK;;UAGf;UACAlB,WAAW,GAAG,IAAI;UAElB,MAAMc,MAAM,SAASlB,KAAI,CAACgB,+BAA+B,CAAC1B,OAAO,EAAEQ,WAAW,IAAI,CAAC,EAAEH,WAAW,EAAE,IAAI,CAAC;UAEvGW,kBAAkB,GAAGY,MAAM;;;MAInC;MACA,IAAIpB,WAAW,EAAE;QACb,MAAMX,oBAAoB,CAACqC,mBAAmB,CAAClC,OAAO,EAAEQ,WAAW,EAAEC,MAAM,CAAC;;MAGhF,IAAIK,WAAW,IAAI,CAAC1B,WAAW,CAAC+C,QAAQ,EAAE,EAAE;QACxC,MAAMlB,YAAY,EAAE;QAEpB,OAAO,IAAI;;MAGf,MAAMmB,MAAM,GAAY,EAAE;MAC1B,MAAMC,aAAa,GAAa,EAAE;MAClC,MAAMb,QAAQ,GAAGjB,QAAQ,CAACkB,GAAG;QAAA,IAAAa,KAAA,GAAA3B,iBAAA,CAAC,WAAOQ,OAAO,EAAEoB,KAAK,EAAI;UACnD,MAAMC,YAAY,GAAGhD,SAAS,CAACiD,KAAK,CAACnC,OAAO,CAAC;UAE7C,IAAIkC,YAAY,IAAIzB,cAAc,CAACwB,KAAK,CAAC,EAAE;YACvCC,YAAY,CAACnB,aAAa,GAAGN,cAAc,CAACwB,KAAK,CAAC;;UAGtD,IAAI;YACA,MAAMG,YAAY,SAAS/C,aAAa,CAACgD,sBAAsB,CAC3D3C,OAAO,EACPG,OAAO,EACPC,OAAO,EACPoC,YAAoE,EACpErB,OAAO,EACPV,MAAM,CACT;YAED4B,aAAa,CAACR,IAAI,CAACa,YAAY,CAAC;WACnC,CAAC,OAAOV,KAAK,EAAE;YACZI,MAAM,CAACP,IAAI,CAACG,KAAK,CAAC;;QAE1B,CAAC;QAAA,iBAAAY,EAAA,EAAAC,GAAA;UAAA,OAAAP,KAAA,CAAAhB,KAAA,OAAAC,SAAA;QAAA;MAAA,IAAC;MAEF,MAAMO,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;MAE3B,IAAIY,MAAM,CAACvB,MAAM,IAAIN,QAAQ,CAACM,MAAM,EAAE;QAClC;QACA,KAAK,IAAIiC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,MAAM,CAACvB,MAAM,EAAEiC,CAAC,EAAE,EAAE;UACpC,IAAItD,SAAS,CAACyC,iBAAiB,CAACG,MAAM,CAACU,CAAC,CAAC,CAAC,IAAKzC,WAAW,IAAIA,WAAW,CAACQ,MAAM,GAAG,CAAE,EAAE;YACnF;YACA,MAAMuB,MAAM,CAACU,CAAC,CAAC;;;QAIvB;QACA,MAAM7B,YAAY,EAAE;QAEpB,OAAO,IAAI;;MAGf,OAAOoB,aAAa;IAAC;EACzB;EAEA;;;;;;;EAOMU,2BAA2BA,CAACC,YAAuC,EAAEvC,MAAe;IAAA,IAAAwC,MAAA;IAAA,OAAAtC,iBAAA;MAAA,IAAAuC,qBAAA,EAAAC,kBAAA;MACtF,MAAMC,KAAK,GAAsB;QAC7BC,EAAE,EAAE,CAACL,YAAY,CAACM,WAAW;QAC7BC,YAAY,EAAEP,YAAY,CAACO,YAAY;QACvCC,QAAQ,EAAER,YAAY,CAACS,MAAM;QAC7BC,SAAS,EAAE,CAAC,CAACV,YAAY,CAACS,MAAM;QAChCE,MAAM,EAAE;UACJN,EAAE,EAAEL,YAAY,CAACY;SACpB;QACDN,WAAW,EAAE,KAAK;QAClBnD,OAAO,EAAE6C,YAAY,CAAC7C,OAAO;QAC7BC,OAAO,EAAE4C,YAAY,CAAC5C,OAAO;QAC7BC,WAAW,EAAE,EAAE;QACfwD,YAAY,EAAE;UACVT,KAAK,EAAE;SACV;QACDU,MAAM,EAAE,KAAK;QACbC,cAAc,EAAE,CAAC,GAAAb,qBAAA,GAACF,YAAY,CAAC1C,OAAO,cAAA4C,qBAAA,eAApBA,qBAAA,CAAsBc,OAAO;OAClD;MACD,MAAMxC,QAAQ,GAAoB,EAAE;MAEpC;MACA,IAAIwB,YAAY,CAAC1C,OAAO,IAAI0C,YAAY,CAAC1C,OAAO,CAACe,aAAa,EAAE;QAC5D,MAAMhB,WAAW,GAAG2C,YAAY,CAAC1C,OAAO,CAACe,aAAa;QAEtD+B,KAAK,CAAC/C,WAAW,GAAG,OAAOA,WAAW,KAAK,QAAQ,IAAI,QAAQ,IAAIA,WAAW,GAAGA,WAAW,CAAC4D,MAAM,GAAG,EAAE;QAExG,IAAI,OAAO5D,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAAC6D,OAAO,EAAE;UACxD1C,QAAQ,CAACK,IAAI,CACToB,MAAI,CACCkB,mBAAmB,CAACnB,YAAY,CAACoB,OAAO,EAAEhB,KAAK,CAACI,QAAS,EAAE/C,MAAM,EAAEuC,YAAY,CAACY,MAAM,CAAC,CACvFjC,IAAI,CAAC0C,KAAK,IAAG;YACVjB,KAAK,CAAC/C,WAAW,GAAG+C,KAAK,CAAC/C,WAAY,CAACiE,MAAM,CAACD,KAAsB,CAAC;YAErE;UACJ,CAAC,CAAC,CACT;;;MAIT;MACA7C,QAAQ,CAACK,IAAI,CACTrC,SAAS,CAAC+E,YAAY,CAClBpF,QAAQ,CAACqF,QAAQ,CACZC,UAAU,CAACzB,YAAY,CAACY,MAAM,EAAEZ,YAAY,CAAC0B,QAAQ,EAAE,IAAI,CAAC,CAC5D/C,IAAI,CAACgD,IAAI,IAAG;QACTvB,KAAK,CAACO,MAAM,CAACiB,QAAQ,GAAGD,IAAI,CAACC,QAAQ;QACrCxB,KAAK,CAACO,MAAM,CAACkB,IAAI,GAAG;UAAEC,YAAY,EAAEH,IAAI,CAACI;QAAe,CAAE;QAE1D;MACJ,CAAC,CAAC,CACT,CACJ;MAED,MAAMjD,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;MAE3B4B,KAAK,CAAC4B,UAAU,GAAG,CAAA7B,kBAAA,GAAAC,KAAK,CAAC/C,WAAW,cAAA8C,kBAAA,eAAjBA,kBAAA,CAAmBtC,MAAM,GAAG,CAAC,GAAG,CAAC;MAEpD,OAAOuC,KAAK;IAAC;EACjB;EAEA;;;;;;;;EAQM6B,8BAA8BA,CAACjF,OAAe,EAAEsD,WAAmB,EAAE7C,MAAe;IAAA,OAAAE,iBAAA;MACtF,MAAMuE,UAAU,SAASrF,oBAAoB,CAACsF,sBAAsB,CAACnF,OAAO,EAAEsD,WAAW,EAAE7C,MAAM,CAAC;MAElG;MACA,MAAMjB,SAAS,CAAC+E,YAAY,CAAClF,QAAQ,CAAC+F,SAAS,CAACF,UAAU,CAAC,CAAC;IAAC;EACjE;EAEA;;;;;;;;;EASMG,sBAAsBA,CAACrF,OAAe,EAAEsF,MAAc,EAAE7E,MAAe,EAAE8E,MAAe;IAAA,OAAA5E,iBAAA;MAC1F,MAAMuE,UAAU,SAASrF,oBAAoB,CAAC2F,cAAc,CAACxF,OAAO,EAAEsF,MAAM,EAAE7E,MAAM,EAAE8E,MAAM,CAAC;MAE7F;MACA,MAAM/F,SAAS,CAAC+E,YAAY,CAAClF,QAAQ,CAAC+F,SAAS,CAACF,UAAU,CAAC,CAAC;IAAC;EACjE;EAEA;;;;;;;EAOAO,sBAAsBA,CAACC,KAAwB,EAAEC,iBAAiB,GAAG,IAAI;IACrE,IAAI,IAAI,CAACC,mBAAmB,CAACF,KAAK,CAAC,EAAE;MACjC,OAAOhG,SAAS,CAACmG,OAAO,CAAC,mCAAmC,CAAC;;IAGjE,IAAIF,iBAAiB,EAAE;MACnB,IAAI,IAAI,CAACG,gBAAgB,CAACJ,KAAK,CAAC,EAAE;QAC9B,MAAMK,OAAO,GAAGxG,aAAa,CAACyG,QAAQ,CAACN,KAAK,CAACO,OAAO,GAAG,IAAI,CAAC;QAE5D,OAAOvG,SAAS,CAACmG,OAAO,CAAC,gCAAgC,EAAE;UAAEK,EAAE,EAAEH;QAAO,CAAE,CAAC;;MAG/E,IAAIL,KAAK,CAACO,OAAO,IAAIP,KAAK,CAACO,OAAO,GAAG,CAAC,EAAE;QACpC,MAAMF,OAAO,GAAGxG,aAAa,CAACyG,QAAQ,CAACN,KAAK,CAACO,OAAO,GAAG,IAAI,CAAC;QAE5D,OAAOvG,SAAS,CAACmG,OAAO,CAAC,qCAAqC,EAAE;UAAEK,EAAE,EAAEH;QAAO,CAAE,CAAC;;;IAIxF,OAAO,IAAI;EACf;EAEA;;;;;;;;;;;EAWAI,iBAAiBA,CAACnG,OAAe,EAAEoG,IAAY,EAAE1D,YAAoB,EAAEjC,MAAe;IAClFA,MAAM,GAAGA,MAAM,IAAInB,SAAS,CAACsB,gBAAgB,EAAE;IAE/C,MAAMyF,cAAc;MAAA,IAAAC,KAAA,GAAA3F,iBAAA,CAAG,WAAO4F,IAAY,EAAsC;QAC5E,MAAMC,QAAQ,SAAS7G,aAAa,CAAC8G,cAAc,CAACzG,OAAO,EAAE;UACzDoG,IAAI;UACJG,IAAI;UACJ9F;SACH,CAAC;QAEF,IAAI+F,QAAQ,CAACE,WAAW,IAAIF,QAAQ,CAACE,WAAW,CAAC7F,MAAM,GAAG,CAAC,EAAE;UACzD;UACA,MAAM8F,UAAU,GAAGH,QAAQ,CAACE,WAAW,CAACE,IAAI,CAAED,UAAU,IAAKA,UAAU,CAACA,UAAU,IAAIjE,YAAY,CAAC;UAEnG,IAAIiE,UAAU,EAAE;YACZ,OAAOA,UAAU;;UAGrB,IAAIH,QAAQ,CAACK,WAAW,EAAE;YACtB,OAAOR,cAAc,CAACE,IAAI,GAAG,CAAC,CAAC;;;QAIvC,MAAM,IAAIO,KAAK,CAAC,sBAAsB,CAAC;MAC3C,CAAC;MAAA,gBArBKT,cAAcA,CAAAU,GAAA;QAAA,OAAAT,KAAA,CAAAhF,KAAA,OAAAC,SAAA;MAAA;IAAA,GAqBnB;IAED,OAAO8E,cAAc,CAAC,CAAC,CAAC;EAC5B;EAEA;;;;;;;;EAQMW,2BAA2BA,CAAChH,OAAe,EAAEsD,WAAmB,EAAE7C,MAAe;IAAA,OAAAE,iBAAA;MACnF,MAAMuE,UAAU,SAASrF,oBAAoB,CAACsF,sBAAsB,CAACnF,OAAO,EAAEsD,WAAW,EAAE7C,MAAM,CAAC;MAElG,OAAOvB,gBAAgB,CAAC+H,cAAc,CAAC/B,UAAU,CAAC;IAAC;EACvD;EAEA;;;;;;;;;EASMf,mBAAmBA,CAACnE,OAAe,EAAEsF,MAAc,EAAE7E,MAAe,EAAE8E,MAAe;IAAA,OAAA5E,iBAAA;MACvF,MAAMuE,UAAU,SAASrF,oBAAoB,CAAC2F,cAAc,CAACxF,OAAO,EAAEsF,MAAM,EAAE7E,MAAM,EAAE8E,MAAM,CAAC;MAE7F,OAAOrG,gBAAgB,CAAC+H,cAAc,CAAC/B,UAAU,CAAC;IAAC;EACvD;EAEA;;;;;;;EAOAgC,kBAAkBA,CAAC9D,KAA4B,EAAE+D,QAAgC;IAAA,IAAAC,YAAA,EAAAC,eAAA;IAC7E,IAAI,CAACF,QAAQ,IAAIA,QAAQ,CAAChH,OAAO,IAAI,IAAI,EAAE;MACvC;MACA,OAAO,KAAK;;IAGhB,IAAIiD,KAAK,CAACjD,OAAO,IAAIgH,QAAQ,CAAChH,OAAO,IAAIiD,KAAK,CAAChD,OAAO,IAAI+G,QAAQ,CAAC/G,OAAO,EAAE;MACxE,OAAO,IAAI;;IAGf,IAAIgD,KAAK,CAACW,cAAc,IAAIoD,QAAQ,CAACpD,cAAc,EAAE;MACjD,OAAO,IAAI;;IAGf,OAAO7E,gBAAgB,CAACoI,oBAAoB,EAAAF,YAAA,GAAChE,KAAK,CAACiB,KAAK,cAAA+C,YAAA,cAAAA,YAAA,GAAI,EAAE,GAAAC,eAAA,GAAEF,QAAQ,CAAC9C,KAAK,cAAAgD,eAAA,cAAAA,eAAA,GAAI,EAAE,CAAC;EACzF;EAEA;;;;;;EAMAzB,mBAAmBA,CAACF,KAAwB;IACxC,MAAM6B,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE,GAAG,IAAI;IAE7B,OAAO,CAAC,CAAC7B,KAAK,CAAC+B,UAAU,IAAI/B,KAAK,CAAC+B,UAAU,GAAG,CAAC,IAAI/B,KAAK,CAAC+B,UAAU,GAAGF,GAAG;EAC/E;EAEA;;;;;;EAMAzB,gBAAgBA,CAACJ,KAAwB;IAAA,IAAAgC,cAAA;IACrC,MAAMH,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE,GAAG,IAAI;IAC7B,MAAMtB,OAAO,IAAAyB,cAAA,GAAGhC,KAAK,CAACO,OAAO,cAAAyB,cAAA,cAAAA,cAAA,GAAI,CAAC;IAElC,OAAOzB,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAGsB,GAAG;EACvC;EAEA;;;;;;;;;;EAUMI,uBAAuBA,CACzB3H,OAAe,EACfsD,WAAmB,EACnBe,KAAsB,EACtB5D,MAAe;IAAA,OAAAE,iBAAA;MAEf;MACA,MAAMuE,UAAU,SAASrF,oBAAoB,CAACsF,sBAAsB,CAACnF,OAAO,EAAEsD,WAAW,EAAE7C,MAAM,CAAC;MAElG,OAAOvB,gBAAgB,CAAC0I,kBAAkB,CAAC1C,UAAU,EAAEb,KAAK,CAAC;IAAC;EAClE;EAEA;;;;;;;;;;;EAWMwD,eAAeA,CACjB7H,OAAe,EACfsF,MAAc,EACdjB,KAAsB,EACtB5D,MAAe,EACf8E,MAAe;IAAA,OAAA5E,iBAAA;MAEf;MACA,MAAMuE,UAAU,SAASrF,oBAAoB,CAAC2F,cAAc,CAACxF,OAAO,EAAEsF,MAAM,EAAE7E,MAAM,EAAE8E,MAAM,CAAC;MAE7F,OAAOrG,gBAAgB,CAAC0I,kBAAkB,CAAC1C,UAAU,EAAEb,KAAK,CAAC;IAAC;EAClE;EA0BA3C,+BAA+BA,CAC3B1B,OAAe,EACfsD,WAAmB,EACnBe,KAAsB,EACtBH,OAAgB,EAChBzD,MAAe;IAEf,IAAIyD,OAAO,EAAE;MACT,OAAO,IAAI,CAACyD,uBAAuB,CAAC3H,OAAO,EAAEsD,WAAW,EAAEe,KAAK,EAAE5D,MAAM,CAAC;;IAG5E,OAAOvB,gBAAgB,CAAC4I,qBAAqB,CAACzD,KAAK,EAAEzE,qBAAqB,CAACmI,SAAS,EAAE/H,OAAO,EAAES,MAAM,CAAC;EAC1G;EA6BMuH,uBAAuBA,CACzBhI,OAAe,EACfsF,MAAc,EACdjB,KAAsB,EACtBH,OAAgB,EAChBzD,MAAe,EACf8E,MAAe;IAAA,IAAA0C,MAAA;IAAA,OAAAtH,iBAAA;MAEf,IAAIuD,OAAO,EAAE;QACT,OAAO+D,MAAI,CAACJ,eAAe,CAAC7H,OAAO,EAAEsF,MAAM,EAAEjB,KAAK,EAAE5D,MAAM,EAAE8E,MAAM,CAAC;;MAGvE,OAAOrG,gBAAgB,CAAC4I,qBAAqB,CAACzD,KAAK,EAAEzE,qBAAqB,CAACmI,SAAS,EAAE/H,OAAO,EAAES,MAAM,CAAC;IAAC;EAC3G;;SA5fSX,2BAA2B;;mBAA3BA,MAA2B;AAAA;;SAA3BA,MAA2B;EAAAoI,OAAA,EAA3BpI,MAA2B,CAAAqI,IAAA;EAAAC,UAAA,EADd;AAAM;AAigBhC,OAAO,MAAMC,mBAAmB,GAAG5I,aAAa,CAACK,2BAA2B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}