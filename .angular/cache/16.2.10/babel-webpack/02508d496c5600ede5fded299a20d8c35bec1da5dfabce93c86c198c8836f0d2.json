{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreUtils } from '@services/utils/utils';\nimport { CorePromisedValue } from './promised-value';\n/**\n * Class to watch requests from a page load (including requests from page sub-components).\n */\nexport class PageLoadWatcher {\n  constructor(loadsManager, updateInBackground) {\n    this.loadsManager = loadsManager;\n    this.updateInBackground = updateInBackground;\n    this.hasChanges = false;\n    this.ongoingRequests = 0;\n    this.components = new Set();\n    this.hasChangesPromises = [];\n  }\n  /**\n   * Whether this load watcher can update data in background.\n   *\n   * @returns Whether this load watcher can update data in background.\n   */\n  canUpdateInBackground() {\n    return this.updateInBackground;\n  }\n  /**\n   * Whether this load watcher had meaningful changes received in background.\n   *\n   * @returns Whether this load watcher had meaningful changes received in background.\n   */\n  hasMeaningfulChanges() {\n    return this.hasChanges;\n  }\n  /**\n   * Set has meaningful changes to true.\n   */\n  markMeaningfulChanges() {\n    this.hasChanges = true;\n  }\n  /**\n   * Watch a component, waiting for it to be ready.\n   *\n   * @param component Component instance.\n   */\n  watchComponent(component) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.components.add(component);\n      clearTimeout(_this.loadedTimeout);\n      try {\n        yield component.ready();\n      } finally {\n        _this.components.delete(component);\n        _this.checkHasLoaded();\n      }\n    })();\n  }\n  /**\n   * Get the reading strategy to use.\n   *\n   * @returns Reading strategy to use.\n   */\n  getReadingStrategy() {\n    return this.updateInBackground ? 4 /* CoreSitesReadingStrategy.STALE_WHILE_REVALIDATE */ : undefined;\n  }\n  /**\n   * Watch a WS request, handling the different values it can return, calling the hasMeaningfulChanges callback if needed to\n   * detect if there are new meaningful changes in the page load, and completing the page load when all requests have\n   * finished and all components are ready.\n   *\n   * @param observable Observable of the request.\n   * @param hasMeaningfulChanges Callback to check if there are meaningful changes if data was updated in background.\n   * @returns First value of the observable.\n   */\n  watchRequest(observable, hasMeaningfulChanges) {\n    var _this2 = this;\n    const promisedValue = new CorePromisedValue();\n    let subscription = null;\n    let firstValue;\n    this.ongoingRequests++;\n    clearTimeout(this.loadedTimeout);\n    const complete = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* () {\n        var _subscription;\n        _this2.ongoingRequests--;\n        _this2.checkHasLoaded();\n        // Subscription variable might not be set because the observable completed immediately. Wait for next tick.\n        yield CoreUtils.nextTick();\n        (_subscription = subscription) === null || _subscription === void 0 || _subscription.unsubscribe();\n      });\n      return function complete() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    subscription = observable.subscribe({\n      next: value => {\n        if (!firstValue) {\n          firstValue = value;\n          promisedValue.resolve(value);\n          return;\n        }\n        // Second value, it means data was updated in background. Compare data.\n        if (!hasMeaningfulChanges) {\n          return;\n        }\n        this.hasChangesPromises.push(CoreUtils.ignoreErrors(hasMeaningfulChanges(firstValue, value), false));\n      },\n      error: error => {\n        promisedValue.reject(error);\n        complete();\n      },\n      complete: () => complete()\n    });\n    return promisedValue;\n  }\n  /**\n   * Check if the load has finished.\n   */\n  checkHasLoaded() {\n    var _this3 = this;\n    if (this.ongoingRequests !== 0 || this.components.size !== 0) {\n      // Load not finished.\n      return;\n    }\n    // It seems load has finished. Wait to make sure no new component has been rendered and started loading.\n    // If a new component or a new request starts the timeout will be cancelled, no need to double check it.\n    clearTimeout(this.loadedTimeout);\n    this.loadedTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n      // Loading finished. Calculate has changes.\n      const values = yield Promise.all(_this3.hasChangesPromises);\n      _this3.hasChanges = _this3.hasChanges || values.includes(true);\n      _this3.loadsManager.onPageLoaded(_this3);\n    }), 100);\n  }\n}","map":{"version":3,"names":["CoreUtils","CorePromisedValue","PageLoadWatcher","constructor","loadsManager","updateInBackground","hasChanges","ongoingRequests","components","Set","hasChangesPromises","canUpdateInBackground","hasMeaningfulChanges","markMeaningfulChanges","watchComponent","component","_this","_asyncToGenerator","add","clearTimeout","loadedTimeout","ready","delete","checkHasLoaded","getReadingStrategy","undefined","watchRequest","observable","_this2","promisedValue","subscription","firstValue","complete","_ref","_subscription","nextTick","unsubscribe","apply","arguments","subscribe","next","value","resolve","push","ignoreErrors","error","reject","_this3","size","window","setTimeout","values","Promise","all","includes","onPageLoaded"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/page-load-watcher.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Subscription } from 'rxjs';\nimport { AsyncDirective } from './async-directive';\nimport { PageLoadsManager } from './page-loads-manager';\nimport { CorePromisedValue } from './promised-value';\nimport { WSObservable } from './sites/authenticated-site';\n\n/**\n * Class to watch requests from a page load (including requests from page sub-components).\n */\nexport class PageLoadWatcher {\n\n    protected hasChanges = false;\n    protected ongoingRequests = 0;\n    protected components = new Set<AsyncDirective>();\n    protected loadedTimeout?: number;\n    protected hasChangesPromises: Promise<boolean>[] = [];\n\n    constructor(\n        protected loadsManager: PageLoadsManager,\n        protected updateInBackground: boolean,\n    ) { }\n\n    /**\n     * Whether this load watcher can update data in background.\n     *\n     * @returns Whether this load watcher can update data in background.\n     */\n    canUpdateInBackground(): boolean {\n        return this.updateInBackground;\n    }\n\n    /**\n     * Whether this load watcher had meaningful changes received in background.\n     *\n     * @returns Whether this load watcher had meaningful changes received in background.\n     */\n    hasMeaningfulChanges(): boolean {\n        return this.hasChanges;\n    }\n\n    /**\n     * Set has meaningful changes to true.\n     */\n    markMeaningfulChanges(): void {\n        this.hasChanges = true;\n    }\n\n    /**\n     * Watch a component, waiting for it to be ready.\n     *\n     * @param component Component instance.\n     */\n    async watchComponent(component: AsyncDirective): Promise<void> {\n        this.components.add(component);\n        clearTimeout(this.loadedTimeout);\n\n        try {\n            await component.ready();\n        } finally {\n            this.components.delete(component);\n            this.checkHasLoaded();\n        }\n    }\n\n    /**\n     * Get the reading strategy to use.\n     *\n     * @returns Reading strategy to use.\n     */\n    getReadingStrategy(): CoreSitesReadingStrategy | undefined {\n        return this.updateInBackground ? CoreSitesReadingStrategy.STALE_WHILE_REVALIDATE : undefined;\n    }\n\n    /**\n     * Watch a WS request, handling the different values it can return, calling the hasMeaningfulChanges callback if needed to\n     * detect if there are new meaningful changes in the page load, and completing the page load when all requests have\n     * finished and all components are ready.\n     *\n     * @param observable Observable of the request.\n     * @param hasMeaningfulChanges Callback to check if there are meaningful changes if data was updated in background.\n     * @returns First value of the observable.\n     */\n    watchRequest<T>(\n        observable: WSObservable<T>,\n        hasMeaningfulChanges?: (previousValue: T, newValue: T) => Promise<boolean>,\n    ): Promise<T> {\n        const promisedValue = new CorePromisedValue<T>();\n        let subscription: Subscription | null = null;\n        let firstValue: T | undefined;\n        this.ongoingRequests++;\n        clearTimeout(this.loadedTimeout);\n\n        const complete = async () => {\n            this.ongoingRequests--;\n            this.checkHasLoaded();\n\n            // Subscription variable might not be set because the observable completed immediately. Wait for next tick.\n            await CoreUtils.nextTick();\n            subscription?.unsubscribe();\n        };\n\n        subscription = observable.subscribe({\n            next: value => {\n                if (!firstValue) {\n                    firstValue = value;\n                    promisedValue.resolve(value);\n\n                    return;\n                }\n\n                // Second value, it means data was updated in background. Compare data.\n                if (!hasMeaningfulChanges) {\n                    return;\n                }\n\n                this.hasChangesPromises.push(CoreUtils.ignoreErrors(hasMeaningfulChanges(firstValue, value), false));\n            },\n            error: (error) => {\n                promisedValue.reject(error);\n                complete();\n            },\n            complete: () => complete(),\n        });\n\n        return promisedValue;\n    }\n\n    /**\n     * Check if the load has finished.\n     */\n    protected checkHasLoaded(): void {\n        if (this.ongoingRequests !== 0 || this.components.size !== 0) {\n            // Load not finished.\n            return;\n        }\n\n        // It seems load has finished. Wait to make sure no new component has been rendered and started loading.\n        // If a new component or a new request starts the timeout will be cancelled, no need to double check it.\n        clearTimeout(this.loadedTimeout);\n        this.loadedTimeout = window.setTimeout(async () => {\n            // Loading finished. Calculate has changes.\n            const values = await Promise.all(this.hasChangesPromises);\n            this.hasChanges = this.hasChanges || values.includes(true);\n\n            this.loadsManager.onPageLoaded(this);\n        }, 100);\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}