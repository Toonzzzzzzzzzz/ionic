{"ast":null,"code":"var _class;\nimport { Geolocation } from '@awesome-cordova-plugins/geolocation/ngx';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n/**\n * Emulates the Cordova Geolocation plugin in desktop apps and in browser.\n */\nexport class GeolocationMock extends Geolocation {\n  /**\n   * Get the device's current position.\n   *\n   * @param options The geolocation options.\n   * @returns Returns a Promise that resolves with the position of the device, or rejects with an error.\n   */\n  getCurrentPosition(options) {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(position => {\n        // Convert to unknown first because some fields are incompatible due to null values.\n        resolve(position);\n      }, reject, options);\n    });\n  }\n  /**\n   * Watch the current device's position. Clear the watch by unsubscribing from\n   * Observable changes.\n   *\n   * @param options The geolocation options.\n   * @returns Returns an Observable that notifies with the position of the device, or errors.\n   */\n  watchPosition(options) {\n    return new Observable(subscriber => {\n      const watchId = navigator.geolocation.watchPosition(position => subscriber.next(position), error => subscriber.error(error), options);\n      return () => {\n        navigator.geolocation.clearWatch(watchId);\n      };\n    });\n  }\n}\n_class = GeolocationMock;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵGeolocationMock_BaseFactory;\n  return function GeolocationMock_Factory(t) {\n    return (ɵGeolocationMock_BaseFactory || (ɵGeolocationMock_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["Geolocation","Observable","GeolocationMock","getCurrentPosition","options","Promise","resolve","reject","navigator","geolocation","position","watchPosition","subscriber","watchId","next","error","clearWatch","t","factory","ɵfac"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/emulator/services/geolocation.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { Geolocation, GeolocationOptions, Geoposition } from '@awesome-cordova-plugins/geolocation/ngx';\nimport { Observable, Subscriber, TeardownLogic } from 'rxjs';\n\n/**\n * Emulates the Cordova Geolocation plugin in desktop apps and in browser.\n */\n@Injectable()\nexport class GeolocationMock extends Geolocation {\n\n    /**\n     * Get the device's current position.\n     *\n     * @param options The geolocation options.\n     * @returns Returns a Promise that resolves with the position of the device, or rejects with an error.\n     */\n    getCurrentPosition(options?: GeolocationOptions): Promise<Geoposition> {\n        return new Promise((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition((position) => {\n                // Convert to unknown first because some fields are incompatible due to null values.\n                resolve(<Geoposition> <unknown> position);\n            }, reject, options);\n        });\n    }\n\n    /**\n     * Watch the current device's position. Clear the watch by unsubscribing from\n     * Observable changes.\n     *\n     * @param options The geolocation options.\n     * @returns Returns an Observable that notifies with the position of the device, or errors.\n     */\n    watchPosition(options?: GeolocationOptions): Observable<Geoposition> {\n        return new Observable<Geoposition>((subscriber: Subscriber<Geoposition>): TeardownLogic => {\n            const watchId = navigator.geolocation.watchPosition(\n                position => subscriber.next(<Geoposition> <unknown> position),\n                error => subscriber.error(error),\n                options,\n            );\n\n            return (): void => {\n                navigator.geolocation.clearWatch(watchId);\n            };\n        });\n    }\n\n}\n"],"mappings":";AAeA,SAASA,WAAW,QAAyC,0CAA0C;AACvG,SAASC,UAAU,QAAmC,MAAM;;AAE5D;;;AAIA,OAAM,MAAOC,eAAgB,SAAQF,WAAW;EAE5C;;;;;;EAMAG,kBAAkBA,CAACC,OAA4B;IAC3C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnCC,SAAS,CAACC,WAAW,CAACN,kBAAkB,CAAEO,QAAQ,IAAI;QAClD;QACAJ,OAAO,CAAyBI,QAAQ,CAAC;MAC7C,CAAC,EAAEH,MAAM,EAAEH,OAAO,CAAC;IACvB,CAAC,CAAC;EACN;EAEA;;;;;;;EAOAO,aAAaA,CAACP,OAA4B;IACtC,OAAO,IAAIH,UAAU,CAAeW,UAAmC,IAAmB;MACtF,MAAMC,OAAO,GAAGL,SAAS,CAACC,WAAW,CAACE,aAAa,CAC/CD,QAAQ,IAAIE,UAAU,CAACE,IAAI,CAAyBJ,QAAQ,CAAC,EAC7DK,KAAK,IAAIH,UAAU,CAACG,KAAK,CAACA,KAAK,CAAC,EAChCX,OAAO,CACV;MAED,OAAO,MAAW;QACdI,SAAS,CAACC,WAAW,CAACO,UAAU,CAACH,OAAO,CAAC;MAC7C,CAAC;IACL,CAAC,CAAC;EACN;;SApCSX,eAAgB;;;;qGAAhBA,MAAe,IAAAe,CAAA,IAAff,MAAe;EAAA;AAAA;;SAAfA,MAAe;EAAAgB,OAAA,EAAfhB,MAAe,CAAAiB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}