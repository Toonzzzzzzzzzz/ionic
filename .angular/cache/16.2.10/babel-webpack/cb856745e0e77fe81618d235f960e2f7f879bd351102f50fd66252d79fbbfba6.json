{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreRoutedItemsManager } from './routed-items-manager';\nimport { CoreDom } from '@singletons/dom';\nimport { CoreTime } from '@singletons/time';\n/**\n * Helper class to manage the state and routing of a list of items in a page.\n */\nexport class CoreListItemsManager extends CoreRoutedItemsManager {\n  constructor(source, pageRouteLocator) {\n    super(source);\n    const debouncedScrollToCurrentElement = CoreUtils.debounce(() => this.scrollToCurrentElement(), 300);\n    this.pageRouteLocator = pageRouteLocator;\n    this.addListener({\n      onSelectedItemUpdated: debouncedScrollToCurrentElement\n    });\n    this.finishSuccessfulFetch = CoreTime.once(() => CoreUtils.ignoreErrors(this.logActivity()));\n  }\n  get items() {\n    return this.getSource().getItems() || [];\n  }\n  get loaded() {\n    return this.itemsMap !== null;\n  }\n  get completed() {\n    return this.getSource().isCompleted();\n  }\n  get empty() {\n    const items = this.getSource().getItems();\n    return items === null || items.length === 0;\n  }\n  /**\n   * Process page started operations.\n   *\n   * @param splitView Split view component.\n   */\n  start(splitView) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (splitView) {\n        _this.watchSplitViewOutlet(splitView);\n      }\n      // Calculate current selected item.\n      _this.updateSelectedItem();\n    })();\n  }\n  /**\n   * Process page destroyed operations.\n   */\n  destroy() {\n    var _this$splitViewOutlet;\n    super.destroy();\n    (_this$splitViewOutlet = this.splitViewOutletSubscription) === null || _this$splitViewOutlet === void 0 || _this$splitViewOutlet.unsubscribe();\n  }\n  /**\n   * Watch a split view outlet to keep track of the selected item.\n   *\n   * @param splitView Split view component.\n   */\n  watchSplitViewOutlet(splitView) {\n    var _this$getPageRouteFro;\n    this.splitView = splitView;\n    this.splitViewOutletSubscription = splitView.outletRouteObservable.subscribe(route => this.updateSelectedItem(this.getPageRouteFromSplitViewOutlet(route)));\n    this.updateSelectedItem((_this$getPageRouteFro = this.getPageRouteFromSplitViewOutlet(splitView.outletRoute)) !== null && _this$getPageRouteFro !== void 0 ? _this$getPageRouteFro : null);\n  }\n  /**\n   * Check whether the given item is selected or not.\n   *\n   * @param item Item.\n   * @returns Whether the given item is selected.\n   */\n  isSelected(item) {\n    return this.selectedItem === item;\n  }\n  /**\n   * Return the current aria value.\n   *\n   * @param item Item.\n   * @returns Will return the current value of the item if selected, false otherwise.\n   */\n  getItemAriaCurrent(item) {\n    return this.isSelected(item) ? 'page' : 'false';\n  }\n  /**\n   * Select an item.\n   *\n   * @param item Item.\n   */\n  select(item) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!item) {\n        yield _this2.navigateToIndex({\n          reset: _this2.resetNavigation()\n        });\n        return;\n      }\n      yield _this2.navigateToItem(item, {\n        reset: _this2.resetNavigation()\n      });\n    })();\n  }\n  /**\n   * Reset the list of items.\n   */\n  reset() {\n    this.getSource().reset();\n  }\n  /**\n   * Reload the list of items.\n   */\n  reload() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield _this3.getSource().reload();\n      _this3.finishSuccessfulFetch();\n    })();\n  }\n  /**\n   * Load more items, if any.\n   */\n  load() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.getSource().load();\n      _this4.finishSuccessfulFetch();\n    })();\n  }\n  /**\n   * Log activity when the page starts.\n   */\n  logActivity() {\n    return _asyncToGenerator(function* () {})();\n  } // Override to log activity.\n  /**\n   * Check whether to reset navigation when selecting an item.\n   *\n   * @returns boolean Whether navigation should be reset.\n   */\n  resetNavigation() {\n    var _this$splitView;\n    if (!CoreScreen.isTablet) {\n      return false;\n    }\n    return !!this.splitView && !((_this$splitView = this.splitView) !== null && _this$splitView !== void 0 && _this$splitView.isNested);\n  }\n  /**\n   * @inheritdoc\n   */\n  updateSelectedItem(route = null) {\n    super.updateSelectedItem(route);\n    const selectDefault = CoreScreen.isTablet && this.selectedItem === null && this.splitView && !this.splitView.isNested;\n    this.select(selectDefault ? this.getDefaultItem() : this.selectedItem);\n  }\n  /**\n   * Scroll to current element in split-view list.\n   */\n  scrollToCurrentElement() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var _this5$splitView$nati, _this5$splitView, _this5$splitView2;\n      if (CoreScreen.isMobile) {\n        return;\n      }\n      const element = (_this5$splitView$nati = (_this5$splitView = _this5.splitView) === null || _this5$splitView === void 0 ? void 0 : _this5$splitView.nativeElement) !== null && _this5$splitView$nati !== void 0 ? _this5$splitView$nati : document;\n      const currentItem = element.querySelector('[aria-current=\"page\"]');\n      if (!currentItem) {\n        return;\n      }\n      const isElementInViewport = CoreDom.isElementInViewport(currentItem, 1, (_this5$splitView2 = _this5.splitView) === null || _this5$splitView2 === void 0 ? void 0 : _this5$splitView2.nativeElement);\n      if (isElementInViewport) {\n        return;\n      }\n      currentItem.scrollIntoView({\n        behavior: 'smooth'\n      });\n    })();\n  }\n  /**\n   * Get the item that should be selected by default.\n   *\n   * @returns The default item or null if none.\n   */\n  getDefaultItem() {\n    return this.items[0] || null;\n  }\n  /**\n   * @inheritdoc\n   */\n  getCurrentPageRoute() {\n    if (this.pageRouteLocator instanceof ActivatedRoute) {\n      return CoreNavigator.isRouteActive(this.pageRouteLocator) ? this.pageRouteLocator : null;\n    }\n    return CoreNavigator.getCurrentRoute({\n      pageComponent: this.pageRouteLocator\n    });\n  }\n  /**\n   * @inheritdoc\n   */\n  getSelectedItemPathFromRoute(route) {\n    const segments = [];\n    while (route.firstChild) {\n      route = route.firstChild;\n      segments.push(...route.url);\n    }\n    return segments.map(segment => segment.path).join('/').replace(/\\/+/, '/').trim() || null;\n  }\n  /**\n   * Get the page route given a child route on the splitview outlet.\n   *\n   * @param route Child route.\n   * @returns Page route.\n   */\n  getPageRouteFromSplitViewOutlet(route) {\n    const isPageRoute = this.buildRouteMatcher();\n    while (route && !isPageRoute(route)) {\n      route = route.parent;\n    }\n    return route;\n  }\n  /**\n   * Build a function to check whether the given snapshot belongs to the page.\n   *\n   * @returns Route matcher.\n   */\n  buildRouteMatcher() {\n    if (this.pageRouteLocator instanceof ActivatedRoute) {\n      const pageRoutePath = CoreNavigator.getRouteFullPath(this.pageRouteLocator.snapshot);\n      return route => CoreNavigator.getRouteFullPath(route) === pageRoutePath;\n    }\n    return route => route.component === this.pageRouteLocator;\n  }\n}","map":{"version":3,"names":["ActivatedRoute","CoreNavigator","CoreScreen","CoreUtils","CoreRoutedItemsManager","CoreDom","CoreTime","CoreListItemsManager","constructor","source","pageRouteLocator","debouncedScrollToCurrentElement","debounce","scrollToCurrentElement","addListener","onSelectedItemUpdated","finishSuccessfulFetch","once","ignoreErrors","logActivity","items","getSource","getItems","loaded","itemsMap","completed","isCompleted","empty","length","start","splitView","_this","_asyncToGenerator","watchSplitViewOutlet","updateSelectedItem","destroy","_this$splitViewOutlet","splitViewOutletSubscription","unsubscribe","_this$getPageRouteFro","outletRouteObservable","subscribe","route","getPageRouteFromSplitViewOutlet","outletRoute","isSelected","item","selectedItem","getItemAriaCurrent","select","_this2","navigateToIndex","reset","resetNavigation","navigateToItem","reload","_this3","load","_this4","_this$splitView","isTablet","isNested","selectDefault","getDefaultItem","_this5","_this5$splitView$nati","_this5$splitView","_this5$splitView2","isMobile","element","nativeElement","document","currentItem","querySelector","isElementInViewport","scrollIntoView","behavior","getCurrentPageRoute","isRouteActive","getCurrentRoute","pageComponent","getSelectedItemPathFromRoute","segments","firstChild","push","url","map","segment","path","join","replace","trim","isPageRoute","buildRouteMatcher","parent","pageRoutePath","getRouteFullPath","snapshot","component"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/items-management/list-items-manager.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreUtils } from '@services/utils/utils';\n\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\nimport { CoreRoutedItemsManager } from './routed-items-manager';\nimport { CoreDom } from '@singletons/dom';\nimport { CoreTime } from '@singletons/time';\n\n/**\n * Helper class to manage the state and routing of a list of items in a page.\n */\nexport class CoreListItemsManager<\n    Item = unknown,\n    Source extends CoreRoutedItemsManagerSource<Item> = CoreRoutedItemsManagerSource<Item>\n> extends CoreRoutedItemsManager<Item, Source> {\n\n    protected pageRouteLocator?: unknown | ActivatedRoute;\n    protected splitView?: CoreSplitViewComponent;\n    protected splitViewOutletSubscription?: Subscription;\n    protected finishSuccessfulFetch: () => void;\n\n    constructor(source: Source, pageRouteLocator: unknown | ActivatedRoute) {\n        super(source);\n\n        const debouncedScrollToCurrentElement = CoreUtils.debounce(() => this.scrollToCurrentElement(), 300);\n\n        this.pageRouteLocator = pageRouteLocator;\n        this.addListener({ onSelectedItemUpdated: debouncedScrollToCurrentElement });\n        this.finishSuccessfulFetch = CoreTime.once(() => CoreUtils.ignoreErrors(this.logActivity()));\n    }\n\n    get items(): Item[] {\n        return this.getSource().getItems() || [];\n    }\n\n    get loaded(): boolean {\n        return this.itemsMap !== null;\n    }\n\n    get completed(): boolean {\n        return this.getSource().isCompleted();\n    }\n\n    get empty(): boolean {\n        const items = this.getSource().getItems();\n\n        return items === null || items.length === 0;\n    }\n\n    /**\n     * Process page started operations.\n     *\n     * @param splitView Split view component.\n     */\n    async start(splitView?: CoreSplitViewComponent): Promise<void> {\n        if (splitView) {\n            this.watchSplitViewOutlet(splitView);\n        }\n\n        // Calculate current selected item.\n        this.updateSelectedItem();\n    }\n\n    /**\n     * Process page destroyed operations.\n     */\n    destroy(): void {\n        super.destroy();\n        this.splitViewOutletSubscription?.unsubscribe();\n    }\n\n    /**\n     * Watch a split view outlet to keep track of the selected item.\n     *\n     * @param splitView Split view component.\n     */\n    watchSplitViewOutlet(splitView: CoreSplitViewComponent): void {\n        this.splitView = splitView;\n        this.splitViewOutletSubscription = splitView.outletRouteObservable.subscribe(\n            route => this.updateSelectedItem(this.getPageRouteFromSplitViewOutlet(route)),\n        );\n\n        this.updateSelectedItem(this.getPageRouteFromSplitViewOutlet(splitView.outletRoute) ?? null);\n    }\n\n    /**\n     * Check whether the given item is selected or not.\n     *\n     * @param item Item.\n     * @returns Whether the given item is selected.\n     */\n    isSelected(item: Item): boolean {\n        return this.selectedItem === item;\n    }\n\n    /**\n     * Return the current aria value.\n     *\n     * @param item Item.\n     * @returns Will return the current value of the item if selected, false otherwise.\n     */\n    getItemAriaCurrent(item: Item): string {\n        return this.isSelected(item) ? 'page' : 'false';\n    }\n\n    /**\n     * Select an item.\n     *\n     * @param item Item.\n     */\n    async select(item: Item | null): Promise<void> {\n        if (!item) {\n            await this.navigateToIndex({ reset: this.resetNavigation() });\n\n            return;\n        }\n\n        await this.navigateToItem(item, { reset: this.resetNavigation() });\n    }\n\n    /**\n     * Reset the list of items.\n     */\n    reset(): void {\n        this.getSource().reset();\n    }\n\n    /**\n     * Reload the list of items.\n     */\n    async reload(): Promise<void> {\n        await this.getSource().reload();\n\n        this.finishSuccessfulFetch();\n    }\n\n    /**\n     * Load more items, if any.\n     */\n    async load(): Promise<void> {\n        await this.getSource().load();\n\n        this.finishSuccessfulFetch();\n    }\n\n    /**\n     * Log activity when the page starts.\n     */\n    protected async logActivity(): Promise<void> {\n        // Override to log activity.\n    }\n\n    /**\n     * Check whether to reset navigation when selecting an item.\n     *\n     * @returns boolean Whether navigation should be reset.\n     */\n    protected resetNavigation(): boolean {\n        if (!CoreScreen.isTablet) {\n            return false;\n        }\n\n        return !!this.splitView && !this.splitView?.isNested;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected updateSelectedItem(route: ActivatedRouteSnapshot | null = null): void {\n        super.updateSelectedItem(route);\n\n        const selectDefault = CoreScreen.isTablet && this.selectedItem === null && this.splitView && !this.splitView.isNested;\n        this.select(selectDefault ? this.getDefaultItem() : this.selectedItem);\n    }\n\n    /**\n     * Scroll to current element in split-view list.\n     */\n    protected async scrollToCurrentElement(): Promise<void> {\n        if (CoreScreen.isMobile) {\n            return;\n        }\n\n        const element = this.splitView?.nativeElement ?? document;\n        const currentItem = element.querySelector<HTMLElement>('[aria-current=\"page\"]');\n\n        if (!currentItem) {\n            return;\n        }\n\n        const isElementInViewport = CoreDom.isElementInViewport(currentItem, 1, this.splitView?.nativeElement);\n\n        if (isElementInViewport) {\n            return;\n        }\n\n        currentItem.scrollIntoView({ behavior: 'smooth' });\n    }\n\n    /**\n     * Get the item that should be selected by default.\n     *\n     * @returns The default item or null if none.\n     */\n    protected getDefaultItem(): Item | null {\n        return this.items[0] || null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getCurrentPageRoute(): ActivatedRoute | null {\n        if (this.pageRouteLocator instanceof ActivatedRoute) {\n            return CoreNavigator.isRouteActive(this.pageRouteLocator) ? this.pageRouteLocator : null;\n        }\n\n        return CoreNavigator.getCurrentRoute({ pageComponent: this.pageRouteLocator });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        const segments: UrlSegment[] = [];\n\n        while (route.firstChild) {\n            route = route.firstChild;\n\n            segments.push(...route.url);\n        }\n\n        return segments.map(segment => segment.path).join('/').replace(/\\/+/, '/').trim() || null;\n    }\n\n    /**\n     * Get the page route given a child route on the splitview outlet.\n     *\n     * @param route Child route.\n     * @returns Page route.\n     */\n    private getPageRouteFromSplitViewOutlet(route: ActivatedRouteSnapshot | null): ActivatedRouteSnapshot | null {\n        const isPageRoute = this.buildRouteMatcher();\n\n        while (route && !isPageRoute(route)) {\n            route = route.parent;\n        }\n\n        return route;\n    }\n\n    /**\n     * Build a function to check whether the given snapshot belongs to the page.\n     *\n     * @returns Route matcher.\n     */\n    private buildRouteMatcher(): (route: ActivatedRouteSnapshot) => boolean {\n        if (this.pageRouteLocator instanceof ActivatedRoute) {\n            const pageRoutePath = CoreNavigator.getRouteFullPath(this.pageRouteLocator.snapshot);\n\n            return route => CoreNavigator.getRouteFullPath(route) === pageRoutePath;\n        }\n\n        return route => route.component === this.pageRouteLocator;\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}