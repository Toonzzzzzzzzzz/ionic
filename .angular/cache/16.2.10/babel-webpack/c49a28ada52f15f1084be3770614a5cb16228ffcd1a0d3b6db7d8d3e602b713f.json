{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreConstants } from '@/core/constants';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreFile } from '@services/file';\nimport { CoreFileHelper } from '@services/file-helper';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreMimetypeUtils } from '@services/utils/mimetype';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CorePath } from '@singletons/path';\nimport { AddonModResource, AddonModResourceProvider } from './resource';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides helper functions for resources.\n */\nexport class AddonModResourceHelperProvider {\n  /**\n   * Get the HTML to display an embedded resource.\n   *\n   * @param module The module object.\n   * @returns Promise resolved with the HTML.\n   */\n  getEmbeddedHtml(module) {\n    return _asyncToGenerator(function* () {\n      const contents = yield CoreCourse.getModuleContents(module);\n      const result = yield CoreCourseHelper.downloadModuleWithMainFileIfNeeded(module, module.course, AddonModResourceProvider.COMPONENT, module.id, contents);\n      return CoreMimetypeUtils.getEmbeddedHtml(contents[0], result.path);\n    })();\n  }\n  /**\n   * Download all the files needed and returns the src of the iframe.\n   *\n   * @param module The module object.\n   * @returns Promise resolved with the iframe src.\n   */\n  getIframeSrc(module) {\n    return _asyncToGenerator(function* () {\n      var _module$contents;\n      if (!((_module$contents = module.contents) !== null && _module$contents !== void 0 && _module$contents.length) || module.url === undefined) {\n        throw new CoreError('No contents available in module');\n      }\n      const mainFile = module.contents[0];\n      let mainFilePath = mainFile.filename;\n      if (mainFile.filepath !== '/') {\n        mainFilePath = mainFile.filepath.substring(1) + mainFilePath;\n      }\n      try {\n        const dirPath = yield CoreFilepool.getPackageDirUrlByUrl(CoreSites.getCurrentSiteId(), module.url);\n        // This URL is going to be injected in an iframe, we need trustAsResourceUrl to make it work in a browser.\n        return CorePath.concatenatePaths(dirPath, mainFilePath);\n      } catch (e) {\n        // Error getting directory, there was an error downloading or we're in browser. Return online URL.\n        if (CoreNetwork.isOnline() && mainFile.fileurl) {\n          // This URL is going to be injected in an iframe, we need this to make it work.\n          return CoreSites.getRequiredCurrentSite().checkAndFixPluginfileURL(mainFile.fileurl);\n        }\n        throw e;\n      }\n    })();\n  }\n  /**\n   * Whether the resource has to be displayed embedded.\n   *\n   * @param module The module object.\n   * @param display The display mode (if available).\n   * @returns Whether the resource should be displayed embeded.\n   */\n  isDisplayedEmbedded(module, display) {\n    var _module$contents2;\n    const currentSite = CoreSites.getCurrentSite();\n    if (!CoreFile.isAvailable() || currentSite && !currentSite.isVersionGreaterEqualThan('3.7') && this.isNextcloudFile(module)) {\n      return false;\n    }\n    let ext;\n    if (module.contentsinfo) {\n      ext = CoreMimetypeUtils.getExtension(module.contentsinfo.mimetypes[0]);\n    } else if ((_module$contents2 = module.contents) !== null && _module$contents2 !== void 0 && _module$contents2.length) {\n      ext = CoreMimetypeUtils.getFileExtension(module.contents[0].filename);\n    } else {\n      return false;\n    }\n    return (display == CoreConstants.RESOURCELIB_DISPLAY_EMBED || display == CoreConstants.RESOURCELIB_DISPLAY_AUTO) && CoreMimetypeUtils.canBeEmbedded(ext);\n  }\n  /**\n   * Whether the resource has to be displayed in an iframe.\n   *\n   * @param module The module object.\n   * @returns Whether the resource should be displayed in an iframe.\n   */\n  isDisplayedInIframe(module) {\n    if (!CoreFile.isAvailable()) {\n      return false;\n    }\n    let mimetype;\n    if (module.contentsinfo) {\n      mimetype = module.contentsinfo.mimetypes[0];\n    } else if (module.contents) {\n      const ext = CoreMimetypeUtils.getFileExtension(module.contents[0].filename);\n      mimetype = CoreMimetypeUtils.getMimeType(ext);\n    } else {\n      return false;\n    }\n    return mimetype == 'text/html' || mimetype == 'application/xhtml+xml';\n  }\n  /**\n   * Check if main file of resource is downloadable.\n   *\n   * @param module Module instance.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: whether main file is downloadable.\n   */\n  isMainFileDownloadable(module, siteId) {\n    return _asyncToGenerator(function* () {\n      const contents = yield CoreCourse.getModuleContents(module);\n      if (!contents.length) {\n        throw new CoreError(Translate.instant('core.filenotfound'));\n      }\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const mainFile = contents[0];\n      const timemodified = CoreFileHelper.getFileTimemodified(mainFile);\n      return CoreFilepool.isFileDownloadable(siteId, mainFile.fileurl, timemodified);\n    })();\n  }\n  /**\n   * Check if the resource is a Nextcloud file.\n   *\n   * @param module Module to check.\n   * @returns Whether it's a Nextcloud file.\n   */\n  isNextcloudFile(module) {\n    if ('contentsinfo' in module && module.contentsinfo) {\n      return module.contentsinfo.repositorytype == 'nextcloud';\n    }\n    return !!(module.contents && module.contents[0] && module.contents[0].repositorytype == 'nextcloud');\n  }\n  /**\n   * Opens a file of the resource activity.\n   *\n   * @param module Module where to get the contents.\n   * @param courseId Course Id, used for completion purposes.\n   * @param options Options to open the file.\n   * @returns Resolved when done.\n   */\n  openModuleFile(module, courseId, options = {}) {\n    return _asyncToGenerator(function* () {\n      const modal = yield CoreDomUtils.showModalLoading();\n      try {\n        // Download and open the file from the resource contents.\n        yield CoreCourseHelper.downloadModuleAndOpenFile(module, courseId, AddonModResourceProvider.COMPONENT, module.id, module.contents, undefined, options);\n        try {\n          yield AddonModResource.logView(module.instance, module.name);\n          CoreCourse.checkModuleCompletion(courseId, module.completiondata);\n        } catch (_unused) {\n          // Ignore errors.\n        }\n        CoreAnalytics.logEvent({\n          type: CoreAnalyticsEventType.VIEW_ITEM,\n          ws: 'mod_resource_view_resource',\n          name: module.name,\n          data: {\n            id: module.instance,\n            category: 'resource'\n          },\n          url: `/mod/resource/view.php?id=${module.id}`\n        });\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_resource.errorwhileloadingthecontent', true);\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  /**\n   * Get resource show options.\n   *\n   * @param module The module object.\n   * @param courseId The course ID.\n   * @returns Resource options.\n   */\n  getModuleOptions(module, courseId) {\n    return _asyncToGenerator(function* () {\n      var _module$contents3;\n      if (module.customdata !== undefined) {\n        const customData = CoreTextUtils.parseJSON(module.customdata);\n        const displayOptions = typeof customData === 'object' ? customData.displayoptions : customData;\n        return CoreTextUtils.unserialize(displayOptions);\n      }\n      // Get the resource data. Legacy version (from 3.5 to 3.6.6)\n      const info = yield AddonModResource.getResourceData(courseId, module.id);\n      const options = CoreTextUtils.unserialize(info.displayoptions);\n      if (!((_module$contents3 = module.contents) !== null && _module$contents3 !== void 0 && _module$contents3[0]) || options.filedetails !== undefined) {\n        // Contents attribute should be loaded at this point and it's needed to get mainFile.\n        // Filedetails won't be usually loaded, but if it's there's no need to check mainFile.\n        return options;\n      }\n      // Fill filedetails checking files in contents.\n      options.filedetails = {};\n      const files = module.contents;\n      const mainFile = files[0];\n      if (options.showsize) {\n        options.filedetails.size = files.reduce((result, file) => result + (file.filesize || 0), 0);\n      }\n      if (options.showtype) {\n        options.filedetails.type = CoreMimetypeUtils.getMimetypeDescription(mainFile);\n      }\n      if (options.showdate) {\n        const timecreated = 'timecreated' in mainFile ? mainFile.timecreated : 0;\n        if ((mainFile.timemodified || 0) > timecreated + CoreConstants.SECONDS_MINUTE * 5) {\n          /* Modified date may be up to several minutes later than uploaded date just because\n              teacher did not submit the form promptly. Give teacher up to 5 minutes to do it. */\n          options.filedetails.modifieddate = mainFile.timemodified || 0;\n        } else {\n          options.filedetails.uploadeddate = timecreated;\n        }\n      }\n      return options;\n    })();\n  }\n  /**\n   * Get afterlink details to be shown on the activity card.\n   *\n   * @param module The module object.\n   * @param courseId The course ID.\n   * @returns Description string to be shown on the activity card.\n   */\n  getAfterLinkDetails(module, courseId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const options = yield _this.getModuleOptions(module, courseId);\n      if (!options.filedetails) {\n        return '';\n      }\n      const details = options.filedetails;\n      const extra = [];\n      if (options.showsize && details.size) {\n        extra.push(CoreTextUtils.bytesToSize(details.size, 1));\n      }\n      if (options.showtype) {\n        // The order of this if conditions should not be changed.\n        if (details.extension) {\n          // From LMS 4.3 onwards only extension is shown.\n          extra.push(details.extension);\n        } else if (details.mimetype) {\n          // Mostly used from 3.7 to 4.2.\n          extra.push(CoreMimetypeUtils.getMimetypeDescription(details.mimetype));\n        } else if (details.type) {\n          // Used on 3.5 and 3.6 where mimetype populated on getModuleOptions using main file.\n          extra.push(details.type); // Already translated.\n        }\n      }\n\n      if (options.showdate) {\n        if (details.modifieddate) {\n          extra.push(Translate.instant('addon.mod_resource.modifieddate', {\n            $a: CoreTimeUtils.userDate(details.modifieddate * 1000, 'core.strftimedatetimeshort')\n          }));\n        } else if (details.uploadeddate) {\n          extra.push(Translate.instant('addon.mod_resource.uploadeddate', {\n            $a: CoreTimeUtils.userDate(details.uploadeddate * 1000, 'core.strftimedatetimeshort')\n          }));\n        }\n      }\n      return extra.join(' · ');\n    })();\n  }\n}\n_class = AddonModResourceHelperProvider;\n_class.ɵfac = function AddonModResourceHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModResourceHelper = makeSingleton(AddonModResourceHelperProvider);","map":{"version":3,"names":["CoreConstants","CoreError","CoreCourse","CoreCourseHelper","CoreNetwork","CoreFile","CoreFileHelper","CoreFilepool","CoreSites","CoreDomUtils","CoreMimetypeUtils","makeSingleton","Translate","CorePath","AddonModResource","AddonModResourceProvider","CoreAnalytics","CoreAnalyticsEventType","CoreTextUtils","CoreTimeUtils","AddonModResourceHelperProvider","getEmbeddedHtml","module","_asyncToGenerator","contents","getModuleContents","result","downloadModuleWithMainFileIfNeeded","course","COMPONENT","id","path","getIframeSrc","_module$contents","length","url","undefined","mainFile","mainFilePath","filename","filepath","substring","dirPath","getPackageDirUrlByUrl","getCurrentSiteId","concatenatePaths","e","isOnline","fileurl","getRequiredCurrentSite","checkAndFixPluginfileURL","isDisplayedEmbedded","display","_module$contents2","currentSite","getCurrentSite","isAvailable","isVersionGreaterEqualThan","isNextcloudFile","ext","contentsinfo","getExtension","mimetypes","getFileExtension","RESOURCELIB_DISPLAY_EMBED","RESOURCELIB_DISPLAY_AUTO","canBeEmbedded","isDisplayedInIframe","mimetype","getMimeType","isMainFileDownloadable","siteId","instant","timemodified","getFileTimemodified","isFileDownloadable","repositorytype","openModuleFile","courseId","options","modal","showModalLoading","downloadModuleAndOpenFile","logView","instance","name","checkModuleCompletion","completiondata","_unused","logEvent","type","VIEW_ITEM","ws","data","category","error","showErrorModalDefault","dismiss","getModuleOptions","_module$contents3","customdata","customData","parseJSON","displayOptions","displayoptions","unserialize","info","getResourceData","filedetails","files","showsize","size","reduce","file","filesize","showtype","getMimetypeDescription","showdate","timecreated","SECONDS_MINUTE","modifieddate","uploadeddate","getAfterLinkDetails","_this","details","extra","push","bytesToSize","extension","$a","userDate","join","factory","ɵfac","providedIn","AddonModResourceHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/resource/services/resource-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreConstants } from '@/core/constants';\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCourse, CoreCourseAnyModuleData } from '@features/course/services/course';\nimport { CoreCourseHelper, CoreCourseModuleData } from '@features/course/services/course-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreFile } from '@services/file';\nimport { CoreFileHelper } from '@services/file-helper';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreMimetypeUtils } from '@services/utils/mimetype';\nimport { CoreUtilsOpenFileOptions } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CorePath } from '@singletons/path';\nimport { AddonModResource, AddonModResourceCustomData, AddonModResourceProvider } from './resource';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreTimeUtils } from '@services/utils/time';\n\n/**\n * Service that provides helper functions for resources.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModResourceHelperProvider {\n\n    /**\n     * Get the HTML to display an embedded resource.\n     *\n     * @param module The module object.\n     * @returns Promise resolved with the HTML.\n     */\n    async getEmbeddedHtml(module: CoreCourseModuleData): Promise<string> {\n        const contents = await CoreCourse.getModuleContents(module);\n\n        const result = await CoreCourseHelper.downloadModuleWithMainFileIfNeeded(\n            module,\n            module.course,\n            AddonModResourceProvider.COMPONENT,\n            module.id,\n            contents,\n        );\n\n        return CoreMimetypeUtils.getEmbeddedHtml(contents[0], result.path);\n    }\n\n    /**\n     * Download all the files needed and returns the src of the iframe.\n     *\n     * @param module The module object.\n     * @returns Promise resolved with the iframe src.\n     */\n    async getIframeSrc(module: CoreCourseModuleData): Promise<string> {\n        if (!module.contents?.length || module.url === undefined) {\n            throw new CoreError('No contents available in module');\n        }\n\n        const mainFile = module.contents[0];\n        let mainFilePath = mainFile.filename;\n\n        if (mainFile.filepath !== '/') {\n            mainFilePath = mainFile.filepath.substring(1) + mainFilePath;\n        }\n\n        try {\n            const dirPath = await CoreFilepool.getPackageDirUrlByUrl(CoreSites.getCurrentSiteId(), module.url);\n\n            // This URL is going to be injected in an iframe, we need trustAsResourceUrl to make it work in a browser.\n            return CorePath.concatenatePaths(dirPath, mainFilePath);\n        } catch (e) {\n            // Error getting directory, there was an error downloading or we're in browser. Return online URL.\n            if (CoreNetwork.isOnline() && mainFile.fileurl) {\n                // This URL is going to be injected in an iframe, we need this to make it work.\n                return CoreSites.getRequiredCurrentSite().checkAndFixPluginfileURL(mainFile.fileurl);\n            }\n\n            throw e;\n        }\n    }\n\n    /**\n     * Whether the resource has to be displayed embedded.\n     *\n     * @param module The module object.\n     * @param display The display mode (if available).\n     * @returns Whether the resource should be displayed embeded.\n     */\n    isDisplayedEmbedded(module: CoreCourseModuleData, display: number): boolean {\n        const currentSite = CoreSites.getCurrentSite();\n\n        if (!CoreFile.isAvailable() ||\n                (currentSite && !currentSite.isVersionGreaterEqualThan('3.7') && this.isNextcloudFile(module))) {\n            return false;\n        }\n\n        let ext: string | undefined;\n        if (module.contentsinfo) {\n            ext = CoreMimetypeUtils.getExtension(module.contentsinfo.mimetypes[0]);\n        } else if (module.contents?.length) {\n            ext = CoreMimetypeUtils.getFileExtension(module.contents[0].filename);\n        } else {\n            return false;\n        }\n\n        return (display == CoreConstants.RESOURCELIB_DISPLAY_EMBED || display == CoreConstants.RESOURCELIB_DISPLAY_AUTO) &&\n            CoreMimetypeUtils.canBeEmbedded(ext);\n    }\n\n    /**\n     * Whether the resource has to be displayed in an iframe.\n     *\n     * @param module The module object.\n     * @returns Whether the resource should be displayed in an iframe.\n     */\n    isDisplayedInIframe(module: CoreCourseModuleData): boolean {\n        if (!CoreFile.isAvailable()) {\n            return false;\n        }\n\n        let mimetype: string | undefined;\n\n        if (module.contentsinfo) {\n            mimetype = module.contentsinfo.mimetypes[0];\n        } else if (module.contents) {\n            const ext = CoreMimetypeUtils.getFileExtension(module.contents[0].filename);\n            mimetype = CoreMimetypeUtils.getMimeType(ext);\n        } else {\n            return false;\n        }\n\n        return mimetype == 'text/html' || mimetype == 'application/xhtml+xml';\n    }\n\n    /**\n     * Check if main file of resource is downloadable.\n     *\n     * @param module Module instance.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: whether main file is downloadable.\n     */\n    async isMainFileDownloadable(module: CoreCourseModuleData, siteId?: string): Promise<boolean> {\n        const contents = await CoreCourse.getModuleContents(module);\n        if (!contents.length) {\n            throw new CoreError(Translate.instant('core.filenotfound'));\n        }\n\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const mainFile = contents[0];\n        const timemodified = CoreFileHelper.getFileTimemodified(mainFile);\n\n        return CoreFilepool.isFileDownloadable(siteId, mainFile.fileurl, timemodified);\n    }\n\n    /**\n     * Check if the resource is a Nextcloud file.\n     *\n     * @param module Module to check.\n     * @returns Whether it's a Nextcloud file.\n     */\n    isNextcloudFile(module: CoreCourseAnyModuleData): boolean {\n        if ('contentsinfo' in module && module.contentsinfo) {\n            return module.contentsinfo.repositorytype == 'nextcloud';\n        }\n\n        return !!(module.contents && module.contents[0] && module.contents[0].repositorytype == 'nextcloud');\n    }\n\n    /**\n     * Opens a file of the resource activity.\n     *\n     * @param module Module where to get the contents.\n     * @param courseId Course Id, used for completion purposes.\n     * @param options Options to open the file.\n     * @returns Resolved when done.\n     */\n    async openModuleFile(module: CoreCourseModuleData, courseId: number, options: CoreUtilsOpenFileOptions = {}): Promise<void> {\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            // Download and open the file from the resource contents.\n            await CoreCourseHelper.downloadModuleAndOpenFile(\n                module,\n                courseId,\n                AddonModResourceProvider.COMPONENT,\n                module.id,\n                module.contents,\n                undefined,\n                options,\n            );\n\n            try {\n                await AddonModResource.logView(module.instance, module.name);\n                CoreCourse.checkModuleCompletion(courseId, module.completiondata);\n            } catch {\n                // Ignore errors.\n            }\n\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM,\n                ws: 'mod_resource_view_resource',\n                name: module.name,\n                data: { id: module.instance, category: 'resource' },\n                url: `/mod/resource/view.php?id=${module.id}`,\n            });\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_resource.errorwhileloadingthecontent', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Get resource show options.\n     *\n     * @param module The module object.\n     * @param courseId The course ID.\n     * @returns Resource options.\n     */\n    protected async getModuleOptions(module: CoreCourseModuleData, courseId: number): Promise<AddonModResourceCustomData> {\n        if (module.customdata !== undefined) {\n            const customData: { displayoptions: string } | string = CoreTextUtils.parseJSON(module.customdata);\n            const displayOptions = typeof customData === 'object' ? customData.displayoptions : customData;\n\n            return CoreTextUtils.unserialize(displayOptions);\n        }\n\n        // Get the resource data. Legacy version (from 3.5 to 3.6.6)\n        const info = await AddonModResource.getResourceData(courseId, module.id);\n        const options: AddonModResourceCustomData = CoreTextUtils.unserialize(info.displayoptions);\n\n        if (!module.contents?.[0] || options.filedetails !== undefined) {\n            // Contents attribute should be loaded at this point and it's needed to get mainFile.\n            // Filedetails won't be usually loaded, but if it's there's no need to check mainFile.\n\n            return options;\n        }\n\n        // Fill filedetails checking files in contents.\n        options.filedetails = {};\n\n        const files = module.contents;\n        const mainFile = files[0];\n\n        if (options.showsize) {\n            options.filedetails.size = files.reduce((result, file) => result + (file.filesize || 0), 0);\n        }\n\n        if (options.showtype) {\n            options.filedetails.type = CoreMimetypeUtils.getMimetypeDescription(mainFile);\n        }\n\n        if (options.showdate) {\n            const timecreated = 'timecreated' in mainFile ? mainFile.timecreated : 0;\n\n            if ((mainFile.timemodified || 0) > timecreated + CoreConstants.SECONDS_MINUTE * 5) {\n                /* Modified date may be up to several minutes later than uploaded date just because\n                    teacher did not submit the form promptly. Give teacher up to 5 minutes to do it. */\n                options.filedetails.modifieddate = mainFile.timemodified || 0;\n            } else {\n                options.filedetails.uploadeddate = timecreated;\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * Get afterlink details to be shown on the activity card.\n     *\n     * @param module The module object.\n     * @param courseId The course ID.\n     * @returns Description string to be shown on the activity card.\n     */\n    async getAfterLinkDetails(\n        module: CoreCourseModuleData,\n        courseId: number,\n    ): Promise<string> {\n        const options = await this.getModuleOptions(module, courseId);\n\n        if (!options.filedetails) {\n            return '';\n        }\n\n        const details = options.filedetails;\n\n        const extra: string[] = [];\n\n        if (options.showsize && details.size) {\n            extra.push(CoreTextUtils.bytesToSize(details.size, 1));\n        }\n\n        if (options.showtype) {\n            // The order of this if conditions should not be changed.\n            if (details.extension) {\n                // From LMS 4.3 onwards only extension is shown.\n                extra.push(details.extension);\n            } else if (details.mimetype) {\n                // Mostly used from 3.7 to 4.2.\n                extra.push(CoreMimetypeUtils.getMimetypeDescription(details.mimetype));\n            } else if (details.type) {\n                // Used on 3.5 and 3.6 where mimetype populated on getModuleOptions using main file.\n                extra.push(details.type); // Already translated.\n            }\n        }\n\n        if (options.showdate) {\n            if (details.modifieddate) {\n                extra.push(Translate.instant(\n                    'addon.mod_resource.modifieddate',\n                    { $a: CoreTimeUtils.userDate(details.modifieddate * 1000, 'core.strftimedatetimeshort') },\n                ));\n            } else if (details.uploadeddate) {\n                extra.push(Translate.instant(\n                    'addon.mod_resource.uploadeddate',\n                    { $a: CoreTimeUtils.userDate(details.uploadeddate * 1000, 'core.strftimedatetimeshort') },\n                ));\n            }\n        }\n\n        return extra.join(' · ');\n    }\n\n}\nexport const AddonModResourceHelper = makeSingleton(AddonModResourceHelperProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}