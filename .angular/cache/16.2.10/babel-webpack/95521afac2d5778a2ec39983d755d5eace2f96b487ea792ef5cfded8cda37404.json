{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CorePlatform } from '@services/platform';\nimport { makeSingleton } from '@singletons';\nimport { CoreSharedFilesHelper } from '../sharedfiles-helper';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to upload files from the album.\n */\nexport class CoreSharedFilesUploadHandlerService {\n  constructor() {\n    this.name = 'CoreSharedFilesUpload';\n    this.priority = 1300;\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns True or promise resolved with true if enabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return CorePlatform.isIOS();\n    })();\n  }\n  /**\n   * Given a list of mimetypes, return the ones that are supported by the handler.\n   *\n   * @param mimetypes List of mimetypes.\n   * @returns Supported mimetypes.\n   */\n  getSupportedMimetypes(mimetypes) {\n    return mimetypes;\n  }\n  /**\n   * Get the data to display the handler.\n   *\n   * @returns Data.\n   */\n  getData() {\n    return {\n      title: 'core.sharedfiles.sharedfiles',\n      class: 'core-sharedfiles-fileuploader-handler',\n      icon: 'folder',\n      action: (maxSize, upload, allowOffline, mimetypes) => CoreSharedFilesHelper.pickSharedFile(mimetypes)\n    };\n  }\n}\n_class = CoreSharedFilesUploadHandlerService;\n_class.ɵfac = function CoreSharedFilesUploadHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreSharedFilesUploadHandler = makeSingleton(CoreSharedFilesUploadHandlerService);","map":{"version":3,"names":["CorePlatform","makeSingleton","CoreSharedFilesHelper","CoreSharedFilesUploadHandlerService","constructor","name","priority","isEnabled","_asyncToGenerator","isIOS","getSupportedMimetypes","mimetypes","getData","title","class","icon","action","maxSize","upload","allowOffline","pickSharedFile","factory","ɵfac","providedIn","CoreSharedFilesUploadHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/sharedfiles/services/handlers/upload.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport {\n    CoreFileUploaderHandler,\n    CoreFileUploaderHandlerData,\n    CoreFileUploaderHandlerResult,\n} from '@features/fileuploader/services/fileuploader-delegate';\nimport { CorePlatform } from '@services/platform';\nimport { makeSingleton } from '@singletons';\nimport { CoreSharedFilesHelper } from '../sharedfiles-helper';\n/**\n * Handler to upload files from the album.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreSharedFilesUploadHandlerService implements CoreFileUploaderHandler {\n\n    name = 'CoreSharedFilesUpload';\n    priority = 1300;\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns True or promise resolved with true if enabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        return CorePlatform.isIOS();\n    }\n\n    /**\n     * Given a list of mimetypes, return the ones that are supported by the handler.\n     *\n     * @param mimetypes List of mimetypes.\n     * @returns Supported mimetypes.\n     */\n    getSupportedMimetypes(mimetypes: string[]): string[] {\n        return mimetypes;\n    }\n\n    /**\n     * Get the data to display the handler.\n     *\n     * @returns Data.\n     */\n    getData(): CoreFileUploaderHandlerData {\n        return {\n            title: 'core.sharedfiles.sharedfiles',\n            class: 'core-sharedfiles-fileuploader-handler',\n            icon: 'folder', // Cannot use font-awesome in action sheet.\n            action: (\n                maxSize?: number,\n                upload?: boolean,\n                allowOffline?: boolean,\n                mimetypes?: string[],\n            ): Promise<CoreFileUploaderHandlerResult> => CoreSharedFilesHelper.pickSharedFile(mimetypes),\n        };\n    }\n\n}\n\nexport const CoreSharedFilesUploadHandler = makeSingleton(CoreSharedFilesUploadHandlerService);\n"],"mappings":";;AAqBA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,qBAAqB,QAAQ,uBAAuB;;AAC7D;;;AAIA,OAAM,MAAOC,mCAAmC;EADhDC,YAAA;IAGI,KAAAC,IAAI,GAAG,uBAAuB;IAC9B,KAAAC,QAAQ,GAAG,IAAI;;EAEf;;;;;EAKMC,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAOR,YAAY,CAACS,KAAK,EAAE;IAAC;EAChC;EAEA;;;;;;EAMAC,qBAAqBA,CAACC,SAAmB;IACrC,OAAOA,SAAS;EACpB;EAEA;;;;;EAKAC,OAAOA,CAAA;IACH,OAAO;MACHC,KAAK,EAAE,8BAA8B;MACrCC,KAAK,EAAE,uCAAuC;MAC9CC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAEA,CACJC,OAAgB,EAChBC,MAAgB,EAChBC,YAAsB,EACtBR,SAAoB,KACqBT,qBAAqB,CAACkB,cAAc,CAACT,SAAS;KAC9F;EACL;;SAzCSR,mCAAmC;;mBAAnCA,MAAmC;AAAA;;SAAnCA,MAAmC;EAAAkB,OAAA,EAAnClB,MAAmC,CAAAmB,IAAA;EAAAC,UAAA,EADtB;AAAM;AA8ChC,OAAO,MAAMC,4BAA4B,GAAGvB,aAAa,CAACE,mCAAmC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}