{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreContentLinksHandlerBase } from './base-handler';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\n/**\n * Handler to handle URLs pointing to the index of a module.\n */\nexport class CoreContentLinksModuleIndexHandler extends CoreContentLinksHandlerBase {\n  /**\n   * Construct the handler.\n   *\n   * @param addon Name of the addon as it's registered in course delegate. It'll be used to check if it's disabled.\n   * @param modName Name of the module (assign, book, ...).\n   * @param instanceIdParam Param name for instance ID gathering. Only if set.\n   */\n  constructor(addon, modName, instanceIdParam) {\n    super();\n    this.addon = addon;\n    this.modName = modName;\n    this.instanceIdParam = instanceIdParam;\n    /**\n     * If this boolean is set to true, the app will retrieve all modules with this modName with a single WS call.\n     * This reduces the number of WS calls, but it isn't recommended for modules that can return a lot of contents.\n     */\n    this.useModNameToGetModule = false;\n    // Match the view.php URL with an id or instance id param.\n    const pattern = instanceIdParam ? '/mod/' + modName + '/view.php.*([&?](' + instanceIdParam + '|id)=\\\\d+)' : '/mod/' + modName + '/view.php.*([&?]id=\\\\d+)';\n    this.pattern = new RegExp(pattern);\n    this.featureName = 'CoreCourseModuleDelegate_' + addon;\n  }\n  /**\n   * Get the navigation options to open the module.\n   *\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @param siteId The site ID.\n   * @param courseId Course ID related to the URL. Optional but recommended.\n   * @returns Navigation options to open the module.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getModNavOptions(url, params, siteId, courseId) {\n    return {};\n  }\n  /**\n   * Get the list of actions for a link (url).\n   *\n   * @param siteIds List of sites the URL belongs to.\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @param courseId Course ID related to the URL. Optional but recommended.\n   * @returns List of (or promise resolved with list of) actions.\n   */\n  getActions(siteIds, url, params, courseId) {\n    courseId = Number(courseId || params.courseid || params.cid);\n    if (this.instanceIdParam && params[this.instanceIdParam] !== undefined) {\n      const instanceId = parseInt(params[this.instanceIdParam], 10);\n      return [{\n        action: siteId => {\n          CoreCourseHelper.navigateToModuleByInstance(instanceId, this.modName, {\n            courseId,\n            useModNameToGetModule: this.useModNameToGetModule,\n            modNavOptions: this.getModNavOptions(url, params, siteId, courseId),\n            siteId\n          });\n        }\n      }];\n    }\n    return [{\n      action: siteId => {\n        CoreCourseHelper.navigateToModule(parseInt(params.id, 10), {\n          courseId,\n          modName: this.useModNameToGetModule ? this.modName : undefined,\n          modNavOptions: this.getModNavOptions(url, params, siteId, courseId),\n          siteId\n        });\n      }\n    }];\n  }\n}","map":{"version":3,"names":["CoreContentLinksHandlerBase","CoreCourseHelper","CoreContentLinksModuleIndexHandler","constructor","addon","modName","instanceIdParam","useModNameToGetModule","pattern","RegExp","featureName","getModNavOptions","url","params","siteId","courseId","getActions","siteIds","Number","courseid","cid","undefined","instanceId","parseInt","action","navigateToModuleByInstance","modNavOptions","navigateToModule","id"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/contentlinks/classes/module-index-handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreContentLinksHandlerBase } from './base-handler';\nimport { CoreContentLinksAction } from '../services/contentlinks-delegate';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreNavigationOptions } from '@services/navigator';\n\n/**\n * Handler to handle URLs pointing to the index of a module.\n */\nexport class CoreContentLinksModuleIndexHandler extends CoreContentLinksHandlerBase {\n\n    /**\n     * If this boolean is set to true, the app will retrieve all modules with this modName with a single WS call.\n     * This reduces the number of WS calls, but it isn't recommended for modules that can return a lot of contents.\n     */\n    protected useModNameToGetModule = false;\n\n    /**\n     * Construct the handler.\n     *\n     * @param addon Name of the addon as it's registered in course delegate. It'll be used to check if it's disabled.\n     * @param modName Name of the module (assign, book, ...).\n     * @param instanceIdParam Param name for instance ID gathering. Only if set.\n     */\n    constructor(\n        public addon: string,\n        public modName: string,\n        protected instanceIdParam?: string,\n    ) {\n        super();\n\n        // Match the view.php URL with an id or instance id param.\n        const pattern = instanceIdParam ?\n            '/mod/' + modName + '/view.php.*([&?](' + instanceIdParam + '|id)=\\\\d+)' :\n            '/mod/' + modName + '/view.php.*([&?]id=\\\\d+)';\n\n        this.pattern = new RegExp(pattern);\n        this.featureName = 'CoreCourseModuleDelegate_' + addon;\n    }\n\n    /**\n     * Get the navigation options to open the module.\n     *\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @param siteId The site ID.\n     * @param courseId Course ID related to the URL. Optional but recommended.\n     * @returns Navigation options to open the module.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getModNavOptions(url: string, params: Record<string, string>, siteId: string, courseId?: number): CoreNavigationOptions {\n        return {};\n    }\n\n    /**\n     * Get the list of actions for a link (url).\n     *\n     * @param siteIds List of sites the URL belongs to.\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @param courseId Course ID related to the URL. Optional but recommended.\n     * @returns List of (or promise resolved with list of) actions.\n     */\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Record<string, string>,\n        courseId?: number,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n\n        courseId = Number(courseId || params.courseid || params.cid);\n\n        if (this.instanceIdParam && params[this.instanceIdParam] !== undefined) {\n            const instanceId = parseInt(params[this.instanceIdParam], 10);\n\n            return [{\n                action: (siteId) => {\n                    CoreCourseHelper.navigateToModuleByInstance(\n                        instanceId,\n                        this.modName,\n                        {\n                            courseId,\n                            useModNameToGetModule: this.useModNameToGetModule,\n                            modNavOptions: this.getModNavOptions(url, params, siteId, courseId),\n                            siteId,\n                        },\n                    );\n                },\n            }];\n        }\n\n        return [{\n            action: (siteId) => {\n                CoreCourseHelper.navigateToModule(\n                    parseInt(params.id, 10),\n                    {\n                        courseId,\n                        modName: this.useModNameToGetModule ? this.modName : undefined,\n                        modNavOptions: this.getModNavOptions(url, params, siteId, courseId),\n                        siteId,\n                    },\n                );\n            },\n        }];\n    }\n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,2BAA2B,QAAQ,gBAAgB;AAE5D,SAASC,gBAAgB,QAAQ,yCAAyC;AAG1E;;;AAGA,OAAM,MAAOC,kCAAmC,SAAQF,2BAA2B;EAQ/E;;;;;;;EAOAG,YACWC,KAAa,EACbC,OAAe,EACZC,eAAwB;IAElC,KAAK,EAAE;IAJA,KAAAF,KAAK,GAALA,KAAK;IACL,KAAAC,OAAO,GAAPA,OAAO;IACJ,KAAAC,eAAe,GAAfA,eAAe;IAhB7B;;;;IAIU,KAAAC,qBAAqB,GAAG,KAAK;IAgBnC;IACA,MAAMC,OAAO,GAAGF,eAAe,GAC3B,OAAO,GAAGD,OAAO,GAAG,mBAAmB,GAAGC,eAAe,GAAG,YAAY,GACxE,OAAO,GAAGD,OAAO,GAAG,0BAA0B;IAElD,IAAI,CAACG,OAAO,GAAG,IAAIC,MAAM,CAACD,OAAO,CAAC;IAClC,IAAI,CAACE,WAAW,GAAG,2BAA2B,GAAGN,KAAK;EAC1D;EAEA;;;;;;;;;EASA;EACAO,gBAAgBA,CAACC,GAAW,EAAEC,MAA8B,EAAEC,MAAc,EAAEC,QAAiB;IAC3F,OAAO,EAAE;EACb;EAEA;;;;;;;;;EASAC,UAAUA,CACNC,OAAiB,EACjBL,GAAW,EACXC,MAA8B,EAC9BE,QAAiB;IAGjBA,QAAQ,GAAGG,MAAM,CAACH,QAAQ,IAAIF,MAAM,CAACM,QAAQ,IAAIN,MAAM,CAACO,GAAG,CAAC;IAE5D,IAAI,IAAI,CAACd,eAAe,IAAIO,MAAM,CAAC,IAAI,CAACP,eAAe,CAAC,KAAKe,SAAS,EAAE;MACpE,MAAMC,UAAU,GAAGC,QAAQ,CAACV,MAAM,CAAC,IAAI,CAACP,eAAe,CAAC,EAAE,EAAE,CAAC;MAE7D,OAAO,CAAC;QACJkB,MAAM,EAAGV,MAAM,IAAI;UACfb,gBAAgB,CAACwB,0BAA0B,CACvCH,UAAU,EACV,IAAI,CAACjB,OAAO,EACZ;YACIU,QAAQ;YACRR,qBAAqB,EAAE,IAAI,CAACA,qBAAqB;YACjDmB,aAAa,EAAE,IAAI,CAACf,gBAAgB,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,CAAC;YACnED;WACH,CACJ;QACL;OACH,CAAC;;IAGN,OAAO,CAAC;MACJU,MAAM,EAAGV,MAAM,IAAI;QACfb,gBAAgB,CAAC0B,gBAAgB,CAC7BJ,QAAQ,CAACV,MAAM,CAACe,EAAE,EAAE,EAAE,CAAC,EACvB;UACIb,QAAQ;UACRV,OAAO,EAAE,IAAI,CAACE,qBAAqB,GAAG,IAAI,CAACF,OAAO,GAAGgB,SAAS;UAC9DK,aAAa,EAAE,IAAI,CAACf,gBAAgB,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,CAAC;UACnED;SACH,CACJ;MACL;KACH,CAAC;EACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}