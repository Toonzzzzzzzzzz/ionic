{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { AddonModAssign } from '@addons/mod/assign/services/assign';\nimport { AddonModAssignOffline } from '@addons/mod/assign/services/assign-offline';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModAssignFeedbackCommentsComponent } from '../component/comments';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for comments feedback plugin.\n */\nexport class AddonModAssignFeedbackCommentsHandlerService {\n  constructor() {\n    this.name = 'AddonModAssignFeedbackCommentsHandler';\n    this.type = 'comments';\n    // Store the data in this service so it isn't lost if the user performs a PTR in the page.\n    this.drafts = {};\n  }\n  /**\n   * Get the text to submit.\n   *\n   * @param plugin Plugin.\n   * @param inputData Data entered in the feedback edit form.\n   * @returns Text to submit.\n   */\n  getTextFromInputData(plugin, inputData) {\n    if (inputData.assignfeedbackcomments_editor === undefined) {\n      return undefined;\n    }\n    const files = plugin.fileareas && plugin.fileareas[0] ? plugin.fileareas[0].files : [];\n    return CoreTextUtils.restorePluginfileUrls(inputData.assignfeedbackcomments_editor, files || []);\n  }\n  /**\n   * Discard the draft data of the feedback plugin.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  discardDraft(assignId, userId, siteId) {\n    const id = this.getDraftId(assignId, userId, siteId);\n    if (this.drafts[id] !== undefined) {\n      delete this.drafts[id];\n    }\n  }\n  /**\n   * Return the Component to use to display the plugin data.\n   * It's recommended to return the class of the component, but you can also return an instance of the component.\n   *\n   * @returns The component (or promise resolved with component) to use, undefined if not found.\n   */\n  getComponent() {\n    return AddonModAssignFeedbackCommentsComponent;\n  }\n  /**\n   * Return the draft saved data of the feedback plugin.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Data (or promise resolved with the data).\n   */\n  getDraft(assignId, userId, siteId) {\n    const id = this.getDraftId(assignId, userId, siteId);\n    if (this.drafts[id] !== undefined) {\n      return this.drafts[id];\n    }\n  }\n  /**\n   * Get a draft ID.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Draft ID.\n   */\n  getDraftId(assignId, userId, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    return siteId + '#' + assignId + '#' + userId;\n  }\n  /**\n   * Get files used by this plugin.\n   * The files returned by this function will be prefetched when the user prefetches the assign.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @returns The files (or promise resolved with the files).\n   */\n  getPluginFiles(assign, submission, plugin) {\n    return AddonModAssign.getSubmissionPluginAttachments(plugin);\n  }\n  /**\n   * Check if the feedback data has changed for this plugin.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param inputData Data entered by the user for the feedback.\n   * @param userId User ID of the submission.\n   * @returns Boolean (or promise resolved with boolean): whether the data has changed.\n   */\n  hasDataChanged(assign, submission, plugin, inputData, userId) {\n    return _asyncToGenerator(function* () {\n      var _offlineData$pluginda;\n      // Get it from plugin or offline.\n      const offlineData = yield CoreUtils.ignoreErrors(AddonModAssignOffline.getSubmissionGrade(assign.id, userId), undefined);\n      if (offlineData !== null && offlineData !== void 0 && (_offlineData$pluginda = offlineData.plugindata) !== null && _offlineData$pluginda !== void 0 && _offlineData$pluginda.assignfeedbackcomments_editor) {\n        const pluginData = offlineData.plugindata;\n        return !!pluginData.assignfeedbackcomments_editor.text;\n      }\n      // No offline data found, get text from plugin.\n      const initialText = AddonModAssign.getSubmissionPluginText(plugin);\n      const newText = AddonModAssignFeedbackCommentsHandler.getTextFromInputData(plugin, inputData);\n      if (newText === undefined) {\n        return false;\n      }\n      // Check if text has changed.\n      return initialText != newText;\n    })();\n  }\n  /**\n   * Check whether the plugin has draft data stored.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Boolean or promise resolved with boolean: whether the plugin has draft data.\n   */\n  hasDraftData(assignId, userId, siteId) {\n    const draft = this.getDraft(assignId, userId, siteId);\n    return !!draft;\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns True or promise resolved with true if enabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      // In here we should check if comments is not disabled in site.\n      // But due to this is not a common comments place and it can be disabled separately into Moodle (disabling the plugin).\n      // We are leaving it always enabled. It's also a teacher's feature.\n      return true;\n    })();\n  }\n  /**\n   * Prepare and add to pluginData the data to send to the server based on the draft data saved.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param plugin The plugin object.\n   * @param pluginData Object where to store the data to send.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  prepareFeedbackData(assignId, userId, plugin, pluginData, siteId) {\n    const draft = this.getDraft(assignId, userId, siteId);\n    if (draft) {\n      // Add some HTML to the text if needed.\n      draft.text = CoreTextUtils.formatHtmlLines(draft.text);\n      pluginData.assignfeedbackcomments_editor = draft;\n    }\n  }\n  /**\n   * Save draft data of the feedback plugin.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param plugin The plugin object.\n   * @param data The data to save.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  saveDraft(assignId, userId, plugin, data, siteId) {\n    if (data) {\n      this.drafts[this.getDraftId(assignId, userId, siteId)] = data;\n    }\n  }\n}\n_class = AddonModAssignFeedbackCommentsHandlerService;\n_class.ɵfac = function AddonModAssignFeedbackCommentsHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModAssignFeedbackCommentsHandler = makeSingleton(AddonModAssignFeedbackCommentsHandlerService);","map":{"version":3,"names":["AddonModAssign","AddonModAssignOffline","CoreSites","CoreTextUtils","CoreUtils","makeSingleton","AddonModAssignFeedbackCommentsComponent","AddonModAssignFeedbackCommentsHandlerService","constructor","name","type","drafts","getTextFromInputData","plugin","inputData","assignfeedbackcomments_editor","undefined","files","fileareas","restorePluginfileUrls","discardDraft","assignId","userId","siteId","id","getDraftId","getComponent","getDraft","getCurrentSiteId","getPluginFiles","assign","submission","getSubmissionPluginAttachments","hasDataChanged","_asyncToGenerator","_offlineData$pluginda","offlineData","ignoreErrors","getSubmissionGrade","plugindata","pluginData","text","initialText","getSubmissionPluginText","newText","AddonModAssignFeedbackCommentsHandler","hasDraftData","draft","isEnabled","prepareFeedbackData","formatHtmlLines","saveDraft","data","factory","ɵfac","providedIn"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/feedback/comments/services/handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type { IAddonModAssignFeedbackPluginComponent } from '@addons/mod/assign/classes/base-feedback-plugin-component';\nimport {\n    AddonModAssignPlugin,\n    AddonModAssignAssign,\n    AddonModAssignSubmission,\n    AddonModAssign,\n    AddonModAssignSavePluginData,\n} from '@addons/mod/assign/services/assign';\nimport { AddonModAssignOffline } from '@addons/mod/assign/services/assign-offline';\nimport { AddonModAssignFeedbackHandler } from '@addons/mod/assign/services/feedback-delegate';\nimport { Injectable, Type } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSFile } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { AddonModAssignFeedbackCommentsComponent } from '../component/comments';\n\n/**\n * Handler for comments feedback plugin.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonModAssignFeedbackCommentsHandlerService implements AddonModAssignFeedbackHandler {\n\n    name = 'AddonModAssignFeedbackCommentsHandler';\n    type = 'comments';\n\n    // Store the data in this service so it isn't lost if the user performs a PTR in the page.\n    protected drafts: { [draftId: string]: AddonModAssignFeedbackCommentsDraftData } = {};\n\n    /**\n     * Get the text to submit.\n     *\n     * @param plugin Plugin.\n     * @param inputData Data entered in the feedback edit form.\n     * @returns Text to submit.\n     */\n    getTextFromInputData(plugin: AddonModAssignPlugin, inputData: AddonModAssignFeedbackCommentsTextData): string | undefined {\n        if (inputData.assignfeedbackcomments_editor === undefined) {\n            return undefined;\n        }\n\n        const files = plugin.fileareas && plugin.fileareas[0] ? plugin.fileareas[0].files : [];\n\n        return CoreTextUtils.restorePluginfileUrls(inputData.assignfeedbackcomments_editor, files || []);\n    }\n\n    /**\n     * Discard the draft data of the feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    discardDraft(assignId: number, userId: number, siteId?: string): void {\n        const id = this.getDraftId(assignId, userId, siteId);\n        if (this.drafts[id] !== undefined) {\n            delete this.drafts[id];\n        }\n    }\n\n    /**\n     * Return the Component to use to display the plugin data.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     *\n     * @returns The component (or promise resolved with component) to use, undefined if not found.\n     */\n    getComponent(): Type<IAddonModAssignFeedbackPluginComponent> {\n        return AddonModAssignFeedbackCommentsComponent;\n    }\n\n    /**\n     * Return the draft saved data of the feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Data (or promise resolved with the data).\n     */\n    getDraft(assignId: number, userId: number, siteId?: string): AddonModAssignFeedbackCommentsDraftData | undefined {\n        const id = this.getDraftId(assignId, userId, siteId);\n\n        if (this.drafts[id] !== undefined) {\n            return this.drafts[id];\n        }\n    }\n\n    /**\n     * Get a draft ID.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Draft ID.\n     */\n    protected getDraftId(assignId: number, userId: number, siteId?: string): string {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        return siteId + '#' + assignId + '#' + userId;\n    }\n\n    /**\n     * Get files used by this plugin.\n     * The files returned by this function will be prefetched when the user prefetches the assign.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @returns The files (or promise resolved with the files).\n     */\n    getPluginFiles(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n    ): CoreWSFile[] {\n        return AddonModAssign.getSubmissionPluginAttachments(plugin);\n    }\n\n    /**\n     * Check if the feedback data has changed for this plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the feedback.\n     * @param userId User ID of the submission.\n     * @returns Boolean (or promise resolved with boolean): whether the data has changed.\n     */\n    async hasDataChanged(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: AddonModAssignFeedbackCommentsTextData,\n        userId: number,\n    ): Promise<boolean> {\n        // Get it from plugin or offline.\n        const offlineData = await CoreUtils.ignoreErrors(\n            AddonModAssignOffline.getSubmissionGrade(assign.id, userId),\n            undefined,\n        );\n\n        if (offlineData?.plugindata?.assignfeedbackcomments_editor) {\n            const pluginData = <AddonModAssignFeedbackCommentsPluginData>offlineData.plugindata;\n\n            return !!pluginData.assignfeedbackcomments_editor.text;\n        }\n\n        // No offline data found, get text from plugin.\n        const initialText = AddonModAssign.getSubmissionPluginText(plugin);\n        const newText = AddonModAssignFeedbackCommentsHandler.getTextFromInputData(plugin, inputData);\n\n        if (newText === undefined) {\n            return false;\n        }\n\n        // Check if text has changed.\n        return initialText != newText;\n    }\n\n    /**\n     * Check whether the plugin has draft data stored.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Boolean or promise resolved with boolean: whether the plugin has draft data.\n     */\n    hasDraftData(assignId: number, userId: number, siteId?: string): boolean | Promise<boolean> {\n        const draft = this.getDraft(assignId, userId, siteId);\n\n        return !!draft;\n    }\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns True or promise resolved with true if enabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        // In here we should check if comments is not disabled in site.\n        // But due to this is not a common comments place and it can be disabled separately into Moodle (disabling the plugin).\n        // We are leaving it always enabled. It's also a teacher's feature.\n        return true;\n    }\n\n    /**\n     * Prepare and add to pluginData the data to send to the server based on the draft data saved.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param plugin The plugin object.\n     * @param pluginData Object where to store the data to send.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    prepareFeedbackData(\n        assignId: number,\n        userId: number,\n        plugin: AddonModAssignPlugin,\n        pluginData: AddonModAssignSavePluginData,\n        siteId?: string,\n    ): void {\n\n        const draft = this.getDraft(assignId, userId, siteId);\n\n        if (draft) {\n            // Add some HTML to the text if needed.\n            draft.text = CoreTextUtils.formatHtmlLines(draft.text);\n\n            pluginData.assignfeedbackcomments_editor = draft;\n        }\n    }\n\n    /**\n     * Save draft data of the feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param plugin The plugin object.\n     * @param data The data to save.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    saveDraft(\n        assignId: number,\n        userId: number,\n        plugin: AddonModAssignPlugin,\n        data: AddonModAssignFeedbackCommentsDraftData,\n        siteId?: string,\n    ): void {\n\n        if (data) {\n            this.drafts[this.getDraftId(assignId, userId, siteId)] = data;\n        }\n    }\n\n}\nexport const AddonModAssignFeedbackCommentsHandler = makeSingleton(AddonModAssignFeedbackCommentsHandlerService);\n\nexport type AddonModAssignFeedbackCommentsTextData = {\n    // The text for this submission.\n    assignfeedbackcomments_editor: string; // eslint-disable-line @typescript-eslint/naming-convention\n};\n\nexport type AddonModAssignFeedbackCommentsDraftData = {\n    text: string; // The text for this feedback.\n    format: number; // The format for this feedback.\n};\n\nexport type AddonModAssignFeedbackCommentsPluginData = {\n    // Editor structure.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    assignfeedbackcomments_editor: AddonModAssignFeedbackCommentsDraftData;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}