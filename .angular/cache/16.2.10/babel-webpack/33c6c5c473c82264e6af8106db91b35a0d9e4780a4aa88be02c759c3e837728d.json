{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { BehaviorSubject } from 'rxjs';\nimport { CoreQuestionHelper } from '@features/question/services/question-helper';\nimport { CoreLogger } from '@singletons/logger';\nimport { AddonModQuizConnectionErrorComponent } from '../components/connection-error/connection-error';\nimport { AddonModQuiz } from '../services/quiz';\nimport { CoreDomUtils } from '@services/utils/dom';\n/**\n * Class to support auto-save in quiz. Every certain seconds, it will check if there are changes in the current page answers\n * and, if so, it will save them automatically.\n */\nexport class AddonModQuizAutoSave {\n  /**\n   * Constructor.\n   *\n   * @param formName Name of the form where the answers are stored.\n   * @param buttonSelector Selector to find the button to show the connection error.\n   */\n  constructor(formName, buttonSelector) {\n    this.formName = formName;\n    this.buttonSelector = buttonSelector;\n    this.CHECK_CHANGES_INTERVAL = 5000;\n    this.popoverShown = false; // Whether the popover is shown.\n    this.logger = CoreLogger.getInstance('AddonModQuizAutoSave');\n    // Create the observable to notify if an error happened.\n    this.errorObservable = new BehaviorSubject(false);\n  }\n  /**\n   * Cancel a pending auto save.\n   */\n  cancelAutoSave() {\n    clearTimeout(this.autoSaveTimeout);\n    this.autoSaveTimeout = undefined;\n  }\n  /**\n   * Check if the answers have changed in a page.\n   *\n   * @param quiz Quiz.\n   * @param attempt Attempt.\n   * @param preflightData Preflight data.\n   * @param offline Whether the quiz is being attempted in offline mode.\n   */\n  checkChanges(quiz, attempt, preflightData, offline) {\n    if (this.autoSaveTimeout) {\n      // We already have an auto save pending, no need to check changes.\n      return;\n    }\n    const answers = this.getAnswers();\n    if (!this.previousAnswers) {\n      // Previous answers isn't set, set it now.\n      this.previousAnswers = answers;\n      return;\n    }\n    // Check if answers have changed.\n    let equal = true;\n    for (const name in answers) {\n      if (this.previousAnswers[name] != answers[name]) {\n        equal = false;\n        break;\n      }\n    }\n    if (!equal) {\n      this.setAutoSaveTimer(quiz, attempt, preflightData, offline);\n    }\n    this.previousAnswers = answers;\n  }\n  /**\n   * Get answers from a form.\n   *\n   * @returns Answers.\n   */\n  getAnswers() {\n    return CoreQuestionHelper.getAnswersFromForm(document.forms[this.formName]);\n  }\n  /**\n   * Hide the auto save error.\n   */\n  hideAutoSaveError() {\n    var _this$popover;\n    this.errorObservable.next(false);\n    (_this$popover = this.popover) === null || _this$popover === void 0 || _this$popover.dismiss();\n  }\n  /**\n   * Returns an observable that will notify when an error happens or stops.\n   * It will send true when there's an error, and false when the error has been ammended.\n   *\n   * @returns Observable.\n   */\n  onError() {\n    return this.errorObservable;\n  }\n  /**\n   * Schedule an auto save process if it's not scheduled already.\n   *\n   * @param quiz Quiz.\n   * @param attempt Attempt.\n   * @param preflightData Preflight data.\n   * @param offline Whether the quiz is being attempted in offline mode.\n   */\n  setAutoSaveTimer(quiz, attempt, preflightData, offline) {\n    var _this = this;\n    // Don't schedule if already shceduled or quiz is almost closed.\n    if (!quiz.autosaveperiod || this.autoSaveTimeout || AddonModQuiz.isAttemptTimeNearlyOver(quiz, attempt)) {\n      return;\n    }\n    // Schedule save.\n    this.autoSaveTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n      const answers = _this.getAnswers();\n      _this.cancelAutoSave();\n      _this.previousAnswers = answers; // Update previous answers to match what we're sending to the server.\n      try {\n        yield AddonModQuiz.saveAttempt(quiz, attempt, answers, preflightData, offline);\n        // Save successful, we can hide the connection error if it was shown.\n        _this.hideAutoSaveError();\n      } catch (error) {\n        // Error auto-saving. Show error and set timer again.\n        _this.logger.warn('Error auto-saving data.', error);\n        // If there was no error already, show the error message.\n        if (!_this.errorObservable.getValue()) {\n          _this.errorObservable.next(true);\n          _this.showAutoSaveError();\n        }\n        // Try again.\n        _this.setAutoSaveTimer(quiz, attempt, preflightData, offline);\n      }\n    }), quiz.autosaveperiod * 1000);\n  }\n  /**\n   * Show an error popover due to an auto save error.\n   */\n  showAutoSaveError(ev) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Don't show popover if it was already shown.\n      if (_this2.popoverShown) {\n        return;\n      }\n      const event = ev || {\n        // Cannot use new Event() because event's target property is readonly\n        target: document.querySelector(_this2.buttonSelector),\n        stopPropagation: () => {},\n        preventDefault: () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n      };\n\n      _this2.popoverShown = true;\n      _this2.popover = yield CoreDomUtils.openPopover({\n        component: AddonModQuizConnectionErrorComponent,\n        event: event\n      });\n      _this2.popoverShown = false;\n    })();\n  }\n  /**\n   * Start a process to periodically check changes in answers.\n   *\n   * @param quiz Quiz.\n   * @param attempt Attempt.\n   * @param preflightData Preflight data.\n   * @param offline Whether the quiz is being attempted in offline mode.\n   */\n  startCheckChangesProcess(quiz, attempt, preflightData, offline) {\n    if (this.checkChangesInterval || !quiz.autosaveperiod) {\n      // We already have the interval in place or the quiz has autosave disabled.\n      return;\n    }\n    this.previousAnswers = undefined;\n    // Load initial answers in 2.5 seconds so the first check interval finds them already loaded.\n    this.loadPreviousAnswersTimeout = window.setTimeout(() => {\n      this.checkChanges(quiz, attempt, preflightData, offline);\n    }, 2500);\n    // Check changes every certain time.\n    this.checkChangesInterval = window.setInterval(() => {\n      this.checkChanges(quiz, attempt, preflightData, offline);\n    }, this.CHECK_CHANGES_INTERVAL);\n  }\n  /**\n   * Stops the periodical check for changes.\n   */\n  stopCheckChangesProcess() {\n    clearTimeout(this.loadPreviousAnswersTimeout);\n    clearInterval(this.checkChangesInterval);\n    this.loadPreviousAnswersTimeout = undefined;\n    this.checkChangesInterval = undefined;\n  }\n}","map":{"version":3,"names":["BehaviorSubject","CoreQuestionHelper","CoreLogger","AddonModQuizConnectionErrorComponent","AddonModQuiz","CoreDomUtils","AddonModQuizAutoSave","constructor","formName","buttonSelector","CHECK_CHANGES_INTERVAL","popoverShown","logger","getInstance","errorObservable","cancelAutoSave","clearTimeout","autoSaveTimeout","undefined","checkChanges","quiz","attempt","preflightData","offline","answers","getAnswers","previousAnswers","equal","name","setAutoSaveTimer","getAnswersFromForm","document","forms","hideAutoSaveError","_this$popover","next","popover","dismiss","onError","_this","autosaveperiod","isAttemptTimeNearlyOver","window","setTimeout","_asyncToGenerator","saveAttempt","error","warn","getValue","showAutoSaveError","ev","_this2","event","target","querySelector","stopPropagation","preventDefault","openPopover","component","startCheckChangesProcess","checkChangesInterval","loadPreviousAnswersTimeout","setInterval","stopCheckChangesProcess","clearInterval"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/quiz/classes/auto-save.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { CoreQuestionHelper } from '@features/question/services/question-helper';\nimport { CoreQuestionsAnswers } from '@features/question/services/question';\nimport { CoreLogger } from '@singletons/logger';\nimport { AddonModQuizConnectionErrorComponent } from '../components/connection-error/connection-error';\nimport { AddonModQuiz, AddonModQuizAttemptWSData, AddonModQuizQuizWSData } from '../services/quiz';\nimport { CoreDomUtils } from '@services/utils/dom';\n\n/**\n * Class to support auto-save in quiz. Every certain seconds, it will check if there are changes in the current page answers\n * and, if so, it will save them automatically.\n */\nexport class AddonModQuizAutoSave {\n\n    protected readonly CHECK_CHANGES_INTERVAL = 5000;\n\n    protected logger: CoreLogger;\n    protected checkChangesInterval?: number; // Interval to check if there are changes in the answers.\n    protected loadPreviousAnswersTimeout?: number; // Timeout to load previous answers.\n    protected autoSaveTimeout?: number; // Timeout to auto-save the answers.\n    protected popover?: HTMLIonPopoverElement; // Popover to display there's been an error.\n    protected popoverShown = false; // Whether the popover is shown.\n    protected previousAnswers?: CoreQuestionsAnswers; // The previous answers, to check if answers have changed.\n    protected errorObservable: BehaviorSubject<boolean>; // An observable to notify if there's been an error.\n\n    /**\n     * Constructor.\n     *\n     * @param formName Name of the form where the answers are stored.\n     * @param buttonSelector Selector to find the button to show the connection error.\n     */\n    constructor(\n        protected formName: string,\n        protected buttonSelector: string,\n    ) {\n        this.logger = CoreLogger.getInstance('AddonModQuizAutoSave');\n\n        // Create the observable to notify if an error happened.\n        this.errorObservable = new BehaviorSubject<boolean>(false);\n    }\n\n    /**\n     * Cancel a pending auto save.\n     */\n    cancelAutoSave(): void {\n        clearTimeout(this.autoSaveTimeout);\n        this.autoSaveTimeout = undefined;\n    }\n\n    /**\n     * Check if the answers have changed in a page.\n     *\n     * @param quiz Quiz.\n     * @param attempt Attempt.\n     * @param preflightData Preflight data.\n     * @param offline Whether the quiz is being attempted in offline mode.\n     */\n    checkChanges(\n        quiz: AddonModQuizQuizWSData,\n        attempt: AddonModQuizAttemptWSData,\n        preflightData: Record<string, string>,\n        offline?: boolean,\n    ): void {\n        if (this.autoSaveTimeout) {\n            // We already have an auto save pending, no need to check changes.\n            return;\n        }\n\n        const answers = this.getAnswers();\n\n        if (!this.previousAnswers) {\n            // Previous answers isn't set, set it now.\n            this.previousAnswers = answers;\n\n            return;\n        }\n\n        // Check if answers have changed.\n        let equal = true;\n\n        for (const name in answers) {\n            if (this.previousAnswers[name] != answers[name]) {\n                equal = false;\n                break;\n            }\n        }\n\n        if (!equal) {\n            this.setAutoSaveTimer(quiz, attempt, preflightData, offline);\n        }\n\n        this.previousAnswers = answers;\n    }\n\n    /**\n     * Get answers from a form.\n     *\n     * @returns Answers.\n     */\n    protected getAnswers(): CoreQuestionsAnswers {\n        return CoreQuestionHelper.getAnswersFromForm(document.forms[this.formName]);\n    }\n\n    /**\n     * Hide the auto save error.\n     */\n    hideAutoSaveError(): void {\n        this.errorObservable.next(false);\n        this.popover?.dismiss();\n    }\n\n    /**\n     * Returns an observable that will notify when an error happens or stops.\n     * It will send true when there's an error, and false when the error has been ammended.\n     *\n     * @returns Observable.\n     */\n    onError(): BehaviorSubject<boolean> {\n        return this.errorObservable;\n    }\n\n    /**\n     * Schedule an auto save process if it's not scheduled already.\n     *\n     * @param quiz Quiz.\n     * @param attempt Attempt.\n     * @param preflightData Preflight data.\n     * @param offline Whether the quiz is being attempted in offline mode.\n     */\n    setAutoSaveTimer(\n        quiz: AddonModQuizQuizWSData,\n        attempt: AddonModQuizAttemptWSData,\n        preflightData: Record<string, string>,\n        offline?: boolean,\n    ): void {\n        // Don't schedule if already shceduled or quiz is almost closed.\n        if (!quiz.autosaveperiod || this.autoSaveTimeout || AddonModQuiz.isAttemptTimeNearlyOver(quiz, attempt)) {\n            return;\n        }\n\n        // Schedule save.\n        this.autoSaveTimeout = window.setTimeout(async () => {\n            const answers = this.getAnswers();\n            this.cancelAutoSave();\n            this.previousAnswers = answers; // Update previous answers to match what we're sending to the server.\n\n            try {\n                await AddonModQuiz.saveAttempt(quiz, attempt, answers, preflightData, offline);\n\n                // Save successful, we can hide the connection error if it was shown.\n                this.hideAutoSaveError();\n            } catch (error) {\n                // Error auto-saving. Show error and set timer again.\n                this.logger.warn('Error auto-saving data.', error);\n\n                // If there was no error already, show the error message.\n                if (!this.errorObservable.getValue()) {\n                    this.errorObservable.next(true);\n                    this.showAutoSaveError();\n                }\n\n                // Try again.\n                this.setAutoSaveTimer(quiz, attempt, preflightData, offline);\n            }\n        }, quiz.autosaveperiod * 1000);\n    }\n\n    /**\n     * Show an error popover due to an auto save error.\n     */\n    async showAutoSaveError(ev?: Event): Promise<void> {\n        // Don't show popover if it was already shown.\n        if (this.popoverShown) {\n            return;\n        }\n\n        const event: unknown = ev || {\n            // Cannot use new Event() because event's target property is readonly\n            target: document.querySelector(this.buttonSelector),\n            stopPropagation: () => {}, // eslint-disable-line @typescript-eslint/no-empty-function\n            preventDefault: () => {}, // eslint-disable-line @typescript-eslint/no-empty-function\n        };\n        this.popoverShown = true;\n\n        this.popover = await CoreDomUtils.openPopover({\n            component: AddonModQuizConnectionErrorComponent,\n            event: <Event> event,\n        });\n\n        this.popoverShown = false;\n    }\n\n    /**\n     * Start a process to periodically check changes in answers.\n     *\n     * @param quiz Quiz.\n     * @param attempt Attempt.\n     * @param preflightData Preflight data.\n     * @param offline Whether the quiz is being attempted in offline mode.\n     */\n    startCheckChangesProcess(\n        quiz: AddonModQuizQuizWSData,\n        attempt: AddonModQuizAttemptWSData,\n        preflightData: Record<string, string>,\n        offline?: boolean,\n    ): void {\n        if (this.checkChangesInterval || !quiz.autosaveperiod) {\n            // We already have the interval in place or the quiz has autosave disabled.\n            return;\n        }\n\n        this.previousAnswers = undefined;\n\n        // Load initial answers in 2.5 seconds so the first check interval finds them already loaded.\n        this.loadPreviousAnswersTimeout = window.setTimeout(() => {\n            this.checkChanges(quiz, attempt, preflightData, offline);\n        }, 2500);\n\n        // Check changes every certain time.\n        this.checkChangesInterval = window.setInterval(() => {\n            this.checkChanges(quiz, attempt, preflightData, offline);\n        }, this.CHECK_CHANGES_INTERVAL);\n    }\n\n    /**\n     * Stops the periodical check for changes.\n     */\n    stopCheckChangesProcess(): void {\n        clearTimeout(this.loadPreviousAnswersTimeout);\n        clearInterval(this.checkChangesInterval);\n\n        this.loadPreviousAnswersTimeout = undefined;\n        this.checkChangesInterval = undefined;\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}