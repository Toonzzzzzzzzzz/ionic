{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { SecurityContext } from '@angular/core';\nimport { CoreFileHelper } from '@services/file-helper';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreContentLinksHelper } from '@features/contentlinks/services/contentlinks-helper';\nimport { CoreCustomURLSchemes } from '@services/urlschemes';\nimport { DomSanitizer } from '@singletons';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreUrl } from '@singletons/url';\nimport { CoreDom } from '@singletons/dom';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\n/**\n * Directive to open a link in external browser or in the app.\n */\nexport class CoreLinkDirective {\n  constructor(element, content) {\n    this.content = content;\n    this.autoLogin = true; // Whether to try to use auto-login. Values yes/no/check are deprecated.\n    this.showBrowserWarning = true; // Whether to show a warning before opening browser. Defaults to true.\n    this.element = element.nativeElement;\n  }\n  /**\n   * Function executed when the component is initialized.\n   */\n  ngOnInit() {\n    CoreDom.initializeClickableElementA11y(this.element, event => this.performAction(event));\n  }\n  /**\n   * Perform \"click\" action.\n   *\n   * @param event Event.\n   * @returns Resolved when done.\n   */\n  performAction(event) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (event.defaultPrevented) {\n        return; // Link already treated, stop.\n      }\n\n      let href = null;\n      if (_this.href) {\n        // Convert the URL back to string if needed.\n        href = typeof _this.href === 'string' ? _this.href : DomSanitizer.sanitize(SecurityContext.URL, _this.href);\n      }\n      href = href || _this.element.getAttribute('href') || _this.element.getAttribute('xlink:href');\n      if (!href || CoreUrlUtils.getUrlScheme(href) == 'javascript') {\n        return;\n      }\n      event.preventDefault();\n      event.stopPropagation();\n      const openIn = _this.element.getAttribute('data-open-in');\n      if (CoreUtils.isTrueOrOne(_this.capture)) {\n        const treated = yield CoreContentLinksHelper.handleLink(CoreTextUtils.decodeURI(href), undefined, true, true);\n        if (!treated) {\n          _this.navigate(href, openIn);\n        }\n      } else {\n        _this.navigate(href, openIn);\n      }\n    })();\n  }\n  /**\n   * Convenience function to correctly navigate, open file or url in the browser.\n   *\n   * @param href HREF to be opened.\n   * @param openIn Open In App value coming from data-open-in attribute.\n   * @returns Promise resolved when done.\n   */\n  navigate(href, openIn) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (CoreUrlUtils.isLocalFileUrl(href)) {\n        return _this2.openLocalFile(href);\n      }\n      if (href.charAt(0) === '#') {\n        // Look for id or name.\n        href = href.substring(1);\n        const container = _this2.element.closest('ion-content');\n        if (container) {\n          CoreDom.scrollToElement(container, `#${href}, [name='${href}']`);\n        }\n        return;\n      }\n      if (CoreCustomURLSchemes.isCustomURL(href)) {\n        try {\n          yield CoreCustomURLSchemes.handleCustomURL(href);\n        } catch (error) {\n          CoreCustomURLSchemes.treatHandleCustomURLError(error);\n        }\n        return;\n      }\n      return _this2.openExternalLink(href, openIn);\n    })();\n  }\n  /**\n   * Open a local file.\n   *\n   * @param path Path to the file.\n   * @returns Promise resolved when done.\n   */\n  openLocalFile(path) {\n    return _asyncToGenerator(function* () {\n      const filename = path.substring(path.lastIndexOf('/') + 1);\n      if (!CoreFileHelper.isOpenableInApp({\n        filename\n      })) {\n        try {\n          yield CoreFileHelper.showConfirmOpenUnsupportedFile(false, {\n            filename\n          });\n        } catch (error) {\n          return; // Cancelled, stop.\n        }\n      }\n\n      try {\n        yield CoreUtils.openFile(path);\n      } catch (error) {\n        CoreDomUtils.showErrorModal(error);\n      }\n    })();\n  }\n  /**\n   * Open an external link in the app or in browser.\n   *\n   * @param href HREF to be opened.\n   * @param openIn Open In App value coming from data-open-in attribute.\n   * @returns Promise resolved when done.\n   */\n  openExternalLink(href, openIn) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // Priority order is: core-link inApp attribute > forceOpenLinksIn setting > data-open-in HTML attribute.\n      const openInApp = _this3.inApp !== undefined ? CoreUtils.isTrueOrOne(_this3.inApp) : CoreConstants.CONFIG.forceOpenLinksIn !== 'browser' && (CoreConstants.CONFIG.forceOpenLinksIn === 'app' || openIn === 'app');\n      // Check if we need to auto-login.\n      if (!CoreSites.isLoggedIn()) {\n        // Not logged in, cannot auto-login.\n        if (openInApp) {\n          CoreUtils.openInApp(href);\n        } else {\n          CoreUtils.openInBrowser(href, {\n            showBrowserWarning: _this3.showBrowserWarning\n          });\n        }\n        return;\n      }\n      const currentSite = CoreSites.getRequiredCurrentSite();\n      // Make sure it's an absolute URL.\n      href = CoreUrl.toAbsoluteURL(currentSite.getURL(), href);\n      if (currentSite.isSitePluginFileUrl(href)) {\n        // It's a site file. Check if it's being downloaded right now.\n        const isDownloading = yield CoreFilepool.isFileDownloadingByUrl(currentSite.getId(), href);\n        if (isDownloading) {\n          // Wait for the download to finish before opening the file to prevent downloading it twice.\n          const modal = yield CoreDomUtils.showModalLoading();\n          try {\n            const path = yield CoreFilepool.downloadUrl(currentSite.getId(), href);\n            return _this3.openLocalFile(path);\n          } catch (_unused) {\n            // Error downloading, just open the original URL.\n          } finally {\n            modal.dismiss();\n          }\n        }\n      }\n      const autoLogin = typeof _this3.autoLogin === 'boolean' ? _this3.autoLogin : !CoreUtils.isFalseOrZero(_this3.autoLogin) && _this3.autoLogin !== 'no'; // Support deprecated values yes/no/check.\n      if (autoLogin) {\n        if (openInApp) {\n          yield currentSite.openInAppWithAutoLogin(href);\n        } else {\n          yield currentSite.openInBrowserWithAutoLogin(href, undefined, {\n            showBrowserWarning: _this3.showBrowserWarning\n          });\n        }\n      } else {\n        if (openInApp) {\n          CoreUtils.openInApp(href);\n        } else {\n          CoreUtils.openInBrowser(href, {\n            showBrowserWarning: _this3.showBrowserWarning\n          });\n        }\n      }\n    })();\n  }\n}\n_class = CoreLinkDirective;\n_class.ɵfac = function CoreLinkDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.IonContent, 8));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"\", \"core-link\", \"\"]],\n  inputs: {\n    href: \"href\",\n    capture: \"capture\",\n    inApp: \"inApp\",\n    autoLogin: \"autoLogin\",\n    showBrowserWarning: \"showBrowserWarning\"\n  }\n});","map":{"version":3,"names":["SecurityContext","CoreFileHelper","CoreSites","CoreDomUtils","CoreUrlUtils","CoreUtils","CoreTextUtils","CoreConstants","CoreContentLinksHelper","CoreCustomURLSchemes","DomSanitizer","CoreFilepool","CoreUrl","CoreDom","CoreLinkDirective","constructor","element","content","autoLogin","showBrowserWarning","nativeElement","ngOnInit","initializeClickableElementA11y","event","performAction","_this","_asyncToGenerator","defaultPrevented","href","sanitize","URL","getAttribute","getUrlScheme","preventDefault","stopPropagation","openIn","isTrueOrOne","capture","treated","handleLink","decodeURI","undefined","navigate","_this2","isLocalFileUrl","openLocalFile","charAt","substring","container","closest","scrollToElement","isCustomURL","handleCustomURL","error","treatHandleCustomURLError","openExternalLink","path","filename","lastIndexOf","isOpenableInApp","showConfirmOpenUnsupportedFile","openFile","showErrorModal","_this3","openInApp","inApp","CONFIG","forceOpenLinksIn","isLoggedIn","openInBrowser","currentSite","getRequiredCurrentSite","toAbsoluteURL","getURL","isSitePluginFileUrl","isDownloading","isFileDownloadingByUrl","getId","modal","showModalLoading","downloadUrl","_unused","dismiss","isFalseOrZero","openInAppWithAutoLogin","openInBrowserWithAutoLogin","i0","ɵɵdirectiveInject","ElementRef","i1","IonContent","selectors","inputs"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/directives/link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Directive, Input, OnInit, ElementRef, Optional, SecurityContext } from '@angular/core';\nimport { SafeUrl } from '@angular/platform-browser';\nimport { IonContent } from '@ionic/angular';\n\nimport { CoreFileHelper } from '@services/file-helper';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreContentLinksHelper } from '@features/contentlinks/services/contentlinks-helper';\nimport { CoreCustomURLSchemes } from '@services/urlschemes';\nimport { DomSanitizer } from '@singletons';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreUrl } from '@singletons/url';\nimport { CoreDom } from '@singletons/dom';\n\n/**\n * Directive to open a link in external browser or in the app.\n */\n@Directive({\n    selector: '[core-link]',\n})\nexport class CoreLinkDirective implements OnInit {\n\n    @Input() href?: string | SafeUrl; // Link URL.\n    @Input() capture?: boolean | string; // If the link needs to be captured by the app.\n    @Input() inApp?: boolean | string; // True to open in embedded browser, false to open in system browser.\n    @Input() autoLogin: boolean | string = true; // Whether to try to use auto-login. Values yes/no/check are deprecated.\n    @Input() showBrowserWarning = true; // Whether to show a warning before opening browser. Defaults to true.\n\n    protected element: HTMLElement;\n\n    constructor(\n        element: ElementRef,\n        @Optional() protected content: IonContent,\n    ) {\n        this.element = element.nativeElement;\n    }\n\n    /**\n     * Function executed when the component is initialized.\n     */\n    ngOnInit(): void {\n        CoreDom.initializeClickableElementA11y(this.element, (event) => this.performAction(event));\n    }\n\n    /**\n     * Perform \"click\" action.\n     *\n     * @param event Event.\n     * @returns Resolved when done.\n     */\n    protected async performAction(event: Event): Promise<void> {\n        if (event.defaultPrevented) {\n            return; // Link already treated, stop.\n        }\n\n        let href: string | null = null;\n        if (this.href) {\n            // Convert the URL back to string if needed.\n            href = typeof this.href === 'string' ? this.href : DomSanitizer.sanitize(SecurityContext.URL, this.href);\n        }\n\n        href = href || this.element.getAttribute('href') || this.element.getAttribute('xlink:href');\n\n        if (!href || CoreUrlUtils.getUrlScheme(href) == 'javascript') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        const openIn = this.element.getAttribute('data-open-in');\n\n        if (CoreUtils.isTrueOrOne(this.capture)) {\n            const treated = await CoreContentLinksHelper.handleLink(CoreTextUtils.decodeURI(href), undefined, true, true);\n\n            if (!treated) {\n                this.navigate(href, openIn);\n            }\n        } else {\n            this.navigate(href, openIn);\n        }\n    }\n\n    /**\n     * Convenience function to correctly navigate, open file or url in the browser.\n     *\n     * @param href HREF to be opened.\n     * @param openIn Open In App value coming from data-open-in attribute.\n     * @returns Promise resolved when done.\n     */\n    protected async navigate(href: string, openIn?: string | null): Promise<void> {\n\n        if (CoreUrlUtils.isLocalFileUrl(href)) {\n            return this.openLocalFile(href);\n        }\n\n        if (href.charAt(0) === '#') {\n            // Look for id or name.\n            href = href.substring(1);\n            const container = this.element.closest<HTMLIonContentElement>('ion-content');\n            if (container) {\n                CoreDom.scrollToElement(\n                    container,\n                    `#${href}, [name='${href}']`,\n                );\n            }\n\n            return;\n        }\n\n        if (CoreCustomURLSchemes.isCustomURL(href)) {\n            try {\n                await CoreCustomURLSchemes.handleCustomURL(href);\n            } catch (error) {\n                CoreCustomURLSchemes.treatHandleCustomURLError(error);\n            }\n\n            return;\n        }\n\n        return this.openExternalLink(href, openIn);\n    }\n\n    /**\n     * Open a local file.\n     *\n     * @param path Path to the file.\n     * @returns Promise resolved when done.\n     */\n    protected async openLocalFile(path: string): Promise<void> {\n        const filename = path.substring(path.lastIndexOf('/') + 1);\n\n        if (!CoreFileHelper.isOpenableInApp({ filename })) {\n            try {\n                await CoreFileHelper.showConfirmOpenUnsupportedFile(false, { filename });\n            } catch (error) {\n                return; // Cancelled, stop.\n            }\n        }\n\n        try {\n            await CoreUtils.openFile(path);\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n        }\n    }\n\n    /**\n     * Open an external link in the app or in browser.\n     *\n     * @param href HREF to be opened.\n     * @param openIn Open In App value coming from data-open-in attribute.\n     * @returns Promise resolved when done.\n     */\n    protected async openExternalLink(href: string, openIn?: string | null): Promise<void> {\n        // Priority order is: core-link inApp attribute > forceOpenLinksIn setting > data-open-in HTML attribute.\n        const openInApp = this.inApp !== undefined ?\n            CoreUtils.isTrueOrOne(this.inApp) :\n            (CoreConstants.CONFIG.forceOpenLinksIn !== 'browser' &&\n                (CoreConstants.CONFIG.forceOpenLinksIn === 'app' || openIn === 'app'));\n\n        // Check if we need to auto-login.\n        if (!CoreSites.isLoggedIn()) {\n            // Not logged in, cannot auto-login.\n            if (openInApp) {\n                CoreUtils.openInApp(href);\n            } else {\n                CoreUtils.openInBrowser(href, { showBrowserWarning: this.showBrowserWarning });\n            }\n\n            return;\n        }\n\n        const currentSite = CoreSites.getRequiredCurrentSite();\n\n        // Make sure it's an absolute URL.\n        href = CoreUrl.toAbsoluteURL(currentSite.getURL(), href);\n\n        if (currentSite.isSitePluginFileUrl(href)) {\n            // It's a site file. Check if it's being downloaded right now.\n            const isDownloading = await CoreFilepool.isFileDownloadingByUrl(currentSite.getId(), href);\n\n            if (isDownloading) {\n                // Wait for the download to finish before opening the file to prevent downloading it twice.\n                const modal = await CoreDomUtils.showModalLoading();\n\n                try {\n                    const path = await CoreFilepool.downloadUrl(currentSite.getId(), href);\n\n                    return this.openLocalFile(path);\n                } catch {\n                    // Error downloading, just open the original URL.\n                } finally {\n                    modal.dismiss();\n                }\n            }\n        }\n\n        const autoLogin = typeof this.autoLogin === 'boolean' ?\n            this.autoLogin :\n            !CoreUtils.isFalseOrZero(this.autoLogin) && this.autoLogin !== 'no'; // Support deprecated values yes/no/check.\n\n        if (autoLogin) {\n            if (openInApp) {\n                await currentSite.openInAppWithAutoLogin(href);\n            } else {\n                await currentSite.openInBrowserWithAutoLogin(href, undefined, { showBrowserWarning: this.showBrowserWarning });\n            }\n        } else {\n            if (openInApp) {\n                CoreUtils.openInApp(href);\n            } else {\n                CoreUtils.openInBrowser(href, { showBrowserWarning: this.showBrowserWarning });\n            }\n        }\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}