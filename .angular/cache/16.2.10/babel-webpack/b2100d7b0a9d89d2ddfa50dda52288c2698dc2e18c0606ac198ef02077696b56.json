{"ast":null,"code":"var _class;\nimport { TranslatePipe } from '@ngx-translate/core';\nimport * as i0 from \"@angular/core\";\n/**\n * Copy of translate pipe to use when compiling a dynamic component.\n * For some reason, when compiling a dynamic component the original translate pipe isn't found so we use this copy instead.\n */\nexport class TranslatePipeForCompile extends TranslatePipe {}\n_class = TranslatePipeForCompile;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵTranslatePipeForCompile_BaseFactory;\n  return function TranslatePipeForCompile_Factory(t) {\n    return (ɵTranslatePipeForCompile_BaseFactory || (ɵTranslatePipeForCompile_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"translate\",\n  type: _class,\n  pure: false,\n  standalone: true\n});\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["TranslatePipe","TranslatePipeForCompile","t","pure","standalone","factory","ɵfac"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/compile/pipes/translate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { TranslatePipe } from '@ngx-translate/core';\n\n/**\n * Copy of translate pipe to use when compiling a dynamic component.\n * For some reason, when compiling a dynamic component the original translate pipe isn't found so we use this copy instead.\n */\n@Injectable()\n@Pipe({\n  name: 'translate',\n  pure: false, // required to update the value when the promise is resolved\n  standalone: true,\n})\nexport class TranslatePipeForCompile extends TranslatePipe implements PipeTransform {}\n"],"mappings":";AAeA,SAASA,aAAa,QAAQ,qBAAqB;;AAEnD;;;;AAUA,OAAM,MAAOC,uBAAwB,SAAQD,aAAa;SAA7CC,uBAAwB;;;;qHAAxBA,MAAuB,IAAAC,CAAA,IAAvBD,MAAuB;EAAA;AAAA;;;QAAvBA,MAAuB;EAAAE,IAAA;EAAAC,UAAA;AAAA;;SAAvBH,MAAuB;EAAAI,OAAA,EAAvBJ,MAAuB,CAAAK;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}