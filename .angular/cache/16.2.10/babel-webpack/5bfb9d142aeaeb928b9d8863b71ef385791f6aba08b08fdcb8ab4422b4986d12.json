{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreQuestion } from '@features/question/services/question';\n/**\n * Base handler for question behaviours.\n *\n * This class is needed because parent classes cannot have @Injectable in Angular v6, so the default handler cannot be a\n * parent class.\n */\nexport class CoreQuestionBehaviourBaseHandler {\n  constructor() {\n    this.name = 'CoreQuestionBehaviourBase';\n    this.type = 'base';\n  }\n  /**\n   * Determine a question new state based on its answer(s).\n   *\n   * @param component Component the question belongs to.\n   * @param attemptId Attempt ID the question belongs to.\n   * @param question The question.\n   * @param componentId Component ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns New state (or promise resolved with state).\n   */\n  determineNewState(component, attemptId, question, componentId,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  siteId) {\n    // Return the current state.\n    return CoreQuestion.getState(question.state);\n  }\n  /**\n   * Handle a question behaviour.\n   * If the behaviour requires a submit button, it should add it to question.behaviourButtons.\n   * If the behaviour requires to show some extra data, it should return the components to render it.\n   *\n   * @param question The question.\n   * @returns Components (or promise resolved with components) to render some extra data in the question\n   *         (e.g. certainty options). Don't return anything if no extra data is required.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  handleQuestion(question) {\n    // Nothing to do.\n    return undefined;\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns True or promise resolved with true if enabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n}","map":{"version":3,"names":["CoreQuestion","CoreQuestionBehaviourBaseHandler","constructor","name","type","determineNewState","component","attemptId","question","componentId","siteId","getState","state","handleQuestion","undefined","isEnabled","_asyncToGenerator"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/question/classes/base-behaviour-handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Type } from '@angular/core';\n\nimport { CoreQuestion, CoreQuestionState } from '@features/question/services/question';\nimport { CoreQuestionBehaviourHandler } from '../services/behaviour-delegate';\nimport { CoreQuestionQuestionParsed } from '../services/question';\n\n/**\n * Base handler for question behaviours.\n *\n * This class is needed because parent classes cannot have @Injectable in Angular v6, so the default handler cannot be a\n * parent class.\n */\nexport class CoreQuestionBehaviourBaseHandler implements CoreQuestionBehaviourHandler {\n\n    name = 'CoreQuestionBehaviourBase';\n    type = 'base';\n\n    /**\n     * Determine a question new state based on its answer(s).\n     *\n     * @param component Component the question belongs to.\n     * @param attemptId Attempt ID the question belongs to.\n     * @param question The question.\n     * @param componentId Component ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns New state (or promise resolved with state).\n     */\n    determineNewState(\n        component: string,\n        attemptId: number,\n        question: CoreQuestionQuestionParsed,\n        componentId: string | number, // eslint-disable-line @typescript-eslint/no-unused-vars\n        siteId?: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): CoreQuestionState | Promise<CoreQuestionState> {\n        // Return the current state.\n        return CoreQuestion.getState(question.state);\n    }\n\n    /**\n     * Handle a question behaviour.\n     * If the behaviour requires a submit button, it should add it to question.behaviourButtons.\n     * If the behaviour requires to show some extra data, it should return the components to render it.\n     *\n     * @param question The question.\n     * @returns Components (or promise resolved with components) to render some extra data in the question\n     *         (e.g. certainty options). Don't return anything if no extra data is required.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    handleQuestion(question: CoreQuestionQuestionParsed): undefined | Type<unknown>[] | Promise<Type<unknown>[]> {\n        // Nothing to do.\n        return undefined;\n    }\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns True or promise resolved with true if enabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAASA,YAAY,QAA2B,sCAAsC;AAItF;;;;;;AAMA,OAAM,MAAOC,gCAAgC;EAA7CC,YAAA;IAEI,KAAAC,IAAI,GAAG,2BAA2B;IAClC,KAAAC,IAAI,GAAG,MAAM;EA+CjB;EA7CI;;;;;;;;;;EAUAC,iBAAiBA,CACbC,SAAiB,EACjBC,SAAiB,EACjBC,QAAoC,EACpCC,WAA4B;EAAE;EAC9BC,MAAe;IAEf;IACA,OAAOV,YAAY,CAACW,QAAQ,CAACH,QAAQ,CAACI,KAAK,CAAC;EAChD;EAEA;;;;;;;;;EASA;EACAC,cAAcA,CAACL,QAAoC;IAC/C;IACA,OAAOM,SAAS;EACpB;EAEA;;;;;EAKMC,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}