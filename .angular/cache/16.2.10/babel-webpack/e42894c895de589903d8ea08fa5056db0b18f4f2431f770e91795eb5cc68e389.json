{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _class;\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CorePlatform } from '@services/platform';\nimport * as i0 from \"@angular/core\";\n/**\n * Screen breakpoints.\n *\n * @see https://ionicframework.com/docs/layout/grid#default-breakpoints\n */\nvar Breakpoint;\n(function (Breakpoint) {\n  Breakpoint[\"EXTRA_SMALL\"] = \"xs\";\n  Breakpoint[\"SMALL\"] = \"sm\";\n  Breakpoint[\"MEDIUM\"] = \"md\";\n  Breakpoint[\"LARGE\"] = \"lg\";\n  Breakpoint[\"EXTRA_LARGE\"] = \"xl\";\n})(Breakpoint || (Breakpoint = {}));\nconst BREAKPOINT_NAMES = Object.values(Breakpoint);\nconst BREAKPOINT_WIDTHS = {\n  [Breakpoint.EXTRA_SMALL]: 0,\n  [Breakpoint.SMALL]: 576,\n  [Breakpoint.MEDIUM]: 768,\n  [Breakpoint.LARGE]: 992,\n  [Breakpoint.EXTRA_LARGE]: 1200\n};\n/**\n * Screen layouts.\n */\nexport var CoreScreenLayout;\n(function (CoreScreenLayout) {\n  CoreScreenLayout[\"MOBILE\"] = \"mobile\";\n  CoreScreenLayout[\"TABLET\"] = \"tablet\";\n})(CoreScreenLayout || (CoreScreenLayout = {}));\n/**\n * Screen orientation.\n */\nexport var CoreScreenOrientation;\n(function (CoreScreenOrientation) {\n  CoreScreenOrientation[\"LANDSCAPE\"] = \"landscape\";\n  CoreScreenOrientation[\"PORTRAIT\"] = \"portrait\";\n})(CoreScreenOrientation || (CoreScreenOrientation = {}));\n/**\n * Manage application screen.\n */\nexport class CoreScreenService {\n  constructor() {\n    this.breakpointsSubject = new BehaviorSubject(BREAKPOINT_NAMES.reduce((breakpoints, breakpoint) => _objectSpread(_objectSpread({}, breakpoints), {}, {\n      [breakpoint]: false\n    }), {}));\n    this._layoutObservable = this.breakpointsObservable.pipe(map(breakpoints => this.calculateLayout(breakpoints)), distinctUntilChanged());\n  }\n  get breakpoints() {\n    return this.breakpointsSubject.value;\n  }\n  get breakpointsObservable() {\n    return this.breakpointsSubject.asObservable();\n  }\n  get layout() {\n    return this.calculateLayout(this.breakpointsSubject.value);\n  }\n  get layoutObservable() {\n    return this._layoutObservable;\n  }\n  get isMobile() {\n    return this.layout === CoreScreenLayout.MOBILE;\n  }\n  get isTablet() {\n    return this.layout === CoreScreenLayout.TABLET;\n  }\n  get orientation() {\n    return screen.orientation.type.startsWith(CoreScreenOrientation.LANDSCAPE) ? CoreScreenOrientation.LANDSCAPE : CoreScreenOrientation.PORTRAIT;\n  }\n  get isPortrait() {\n    return this.orientation === CoreScreenOrientation.PORTRAIT;\n  }\n  get isLandscape() {\n    return this.orientation === CoreScreenOrientation.LANDSCAPE;\n  }\n  /**\n   * Watch orientation changes.\n   */\n  watchOrientation() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield CorePlatform.ready();\n      screen.orientation.addEventListener('change', () => {\n        CoreEvents.trigger(CoreEvents.ORIENTATION_CHANGE, {\n          orientation: _this.orientation\n        });\n      });\n    })();\n  }\n  /**\n   * Watch viewport changes.\n   */\n  watchViewport() {\n    for (const breakpoint of BREAKPOINT_NAMES) {\n      const width = BREAKPOINT_WIDTHS[breakpoint];\n      const mediaQuery = window.matchMedia(`(min-width: ${width}px)`);\n      this.updateBreakpointVisibility(breakpoint, mediaQuery.matches);\n      mediaQuery.onchange = ({\n        matches\n      }) => this.updateBreakpointVisibility(breakpoint, matches);\n    }\n  }\n  /**\n   * Update breakpoint visibility.\n   *\n   * @param breakpoint Breakpoint.\n   * @param visible Visible.\n   */\n  updateBreakpointVisibility(breakpoint, visible) {\n    if (this.breakpoints[breakpoint] === visible) {\n      return;\n    }\n    this.breakpointsSubject.next(_objectSpread(_objectSpread({}, this.breakpoints), {}, {\n      [breakpoint]: visible\n    }));\n  }\n  /**\n   * Calculate the layout given the current breakpoints.\n   *\n   * @param breakpoints Breakpoints visibility.\n   * @returns Active layout.\n   */\n  calculateLayout(breakpoints) {\n    if (breakpoints[Breakpoint.MEDIUM]) {\n      return CoreScreenLayout.TABLET;\n    }\n    return CoreScreenLayout.MOBILE;\n  }\n}\n_class = CoreScreenService;\n_class.ɵfac = function CoreScreenService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreScreen = makeSingleton(CoreScreenService);","map":{"version":3,"names":["BehaviorSubject","distinctUntilChanged","map","makeSingleton","CoreEvents","CorePlatform","Breakpoint","BREAKPOINT_NAMES","Object","values","BREAKPOINT_WIDTHS","EXTRA_SMALL","SMALL","MEDIUM","LARGE","EXTRA_LARGE","CoreScreenLayout","CoreScreenOrientation","CoreScreenService","constructor","breakpointsSubject","reduce","breakpoints","breakpoint","_objectSpread","_layoutObservable","breakpointsObservable","pipe","calculateLayout","value","asObservable","layout","layoutObservable","isMobile","MOBILE","isTablet","TABLET","orientation","screen","type","startsWith","LANDSCAPE","PORTRAIT","isPortrait","isLandscape","watchOrientation","_this","_asyncToGenerator","ready","addEventListener","trigger","ORIENTATION_CHANGE","watchViewport","width","mediaQuery","window","matchMedia","updateBreakpointVisibility","matches","onchange","visible","next","factory","ɵfac","providedIn","CoreScreen"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/screen.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CorePlatform } from '@services/platform';\n\n/**\n * Screen breakpoints.\n *\n * @see https://ionicframework.com/docs/layout/grid#default-breakpoints\n */\nenum Breakpoint {\n    EXTRA_SMALL = 'xs',\n    SMALL = 'sm',\n    MEDIUM = 'md',\n    LARGE = 'lg',\n    EXTRA_LARGE = 'xl',\n}\n\nconst BREAKPOINT_NAMES = Object.values(Breakpoint);\nconst BREAKPOINT_WIDTHS: Record<Breakpoint, number> = {\n    [Breakpoint.EXTRA_SMALL]: 0,\n    [Breakpoint.SMALL]: 576,\n    [Breakpoint.MEDIUM]: 768,\n    [Breakpoint.LARGE]: 992,\n    [Breakpoint.EXTRA_LARGE]: 1200,\n};\n\n/**\n * Screen layouts.\n */\nexport enum CoreScreenLayout {\n    MOBILE = 'mobile',\n    TABLET = 'tablet',\n}\n\n/**\n * Screen orientation.\n */\nexport enum CoreScreenOrientation {\n    LANDSCAPE = 'landscape',\n    PORTRAIT = 'portrait',\n}\n\n/**\n * Manage application screen.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreScreenService {\n\n    protected breakpointsSubject: BehaviorSubject<Record<Breakpoint, boolean>>;\n    private _layoutObservable: Observable<CoreScreenLayout>;\n\n    constructor() {\n        this.breakpointsSubject = new BehaviorSubject(BREAKPOINT_NAMES.reduce((breakpoints, breakpoint) => ({\n            ...breakpoints,\n            [breakpoint]: false,\n        }), {} as Record<Breakpoint, boolean>));\n\n        this._layoutObservable = this.breakpointsObservable.pipe(\n            map(breakpoints => this.calculateLayout(breakpoints)),\n            distinctUntilChanged<CoreScreenLayout>(),\n        );\n    }\n\n    get breakpoints(): Record<Breakpoint, boolean> {\n        return this.breakpointsSubject.value;\n    }\n\n    get breakpointsObservable(): Observable<Record<Breakpoint, boolean>> {\n        return this.breakpointsSubject.asObservable();\n    }\n\n    get layout(): CoreScreenLayout {\n        return this.calculateLayout(this.breakpointsSubject.value);\n    }\n\n    get layoutObservable(): Observable<CoreScreenLayout> {\n        return this._layoutObservable;\n    }\n\n    get isMobile(): boolean {\n        return this.layout === CoreScreenLayout.MOBILE;\n    }\n\n    get isTablet(): boolean {\n        return this.layout === CoreScreenLayout.TABLET;\n    }\n\n    get orientation(): CoreScreenOrientation {\n        return screen.orientation.type.startsWith(CoreScreenOrientation.LANDSCAPE)\n            ? CoreScreenOrientation.LANDSCAPE\n            : CoreScreenOrientation.PORTRAIT;\n    }\n\n    get isPortrait(): boolean {\n        return this.orientation === CoreScreenOrientation.PORTRAIT;\n    }\n\n    get isLandscape(): boolean {\n        return this.orientation === CoreScreenOrientation.LANDSCAPE;\n    }\n\n    /**\n     * Watch orientation changes.\n     */\n    async watchOrientation(): Promise<void> {\n        await CorePlatform.ready();\n\n        screen.orientation.addEventListener('change', () => {\n            CoreEvents.trigger(CoreEvents.ORIENTATION_CHANGE, { orientation: this.orientation });\n        });\n    }\n\n    /**\n     * Watch viewport changes.\n     */\n    watchViewport(): void {\n        for (const breakpoint of BREAKPOINT_NAMES) {\n            const width = BREAKPOINT_WIDTHS[breakpoint];\n            const mediaQuery = window.matchMedia(`(min-width: ${width}px)`);\n\n            this.updateBreakpointVisibility(breakpoint, mediaQuery.matches);\n\n            mediaQuery.onchange = (({ matches }) => this.updateBreakpointVisibility(breakpoint, matches));\n        }\n    }\n\n    /**\n     * Update breakpoint visibility.\n     *\n     * @param breakpoint Breakpoint.\n     * @param visible Visible.\n     */\n    protected updateBreakpointVisibility(breakpoint: Breakpoint, visible: boolean): void {\n        if (this.breakpoints[breakpoint] === visible) {\n            return;\n        }\n\n        this.breakpointsSubject.next({\n            ...this.breakpoints,\n            [breakpoint]: visible,\n        });\n    }\n\n    /**\n     * Calculate the layout given the current breakpoints.\n     *\n     * @param breakpoints Breakpoints visibility.\n     * @returns Active layout.\n     */\n    protected calculateLayout(breakpoints: Record<Breakpoint, boolean>): CoreScreenLayout {\n        if (breakpoints[Breakpoint.MEDIUM]) {\n            return CoreScreenLayout.TABLET;\n        }\n\n        return CoreScreenLayout.MOBILE;\n    }\n\n}\n\nexport const CoreScreen = makeSingleton(CoreScreenService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}