{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreLoadingComponent } from '@components/loading/loading';\nimport { CoreTabsOutletComponent } from '@components/tabs-outlet/tabs-outlet';\nimport { CoreTabsComponent } from '@components/tabs/tabs';\nimport { CoreSettingsHelper } from '@features/settings/services/settings-helper';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDirectivesRegistry } from '@singletons/directives-registry';\nimport { CoreDom } from '@singletons/dom';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreMath } from '@singletons/math';\nimport { CoreFormatTextDirective } from './format-text';\nimport * as i0 from \"@angular/core\";\nexport const COLLAPSIBLE_HEADER_UPDATED = 'collapsible_header_updated';\n/**\n * Directive to make <ion-header> collapsible.\n *\n * This directive expects h1 titles to be duplicated in a header and an item inside the page, and it will transition\n * from one state to another listening to the scroll in the page content. The item to be used as the expanded form\n * should also have the [collapsed] attribute.\n *\n * Example usage:\n *\n * <ion-header collapsible>\n *     <ion-toolbar>\n *         <ion-title>\n *             <h1>Title</h1>\n *         </ion-title>\n *     </ion-toolbar>\n * </ion-header>\n *\n * <ion-content>\n *     <ion-item collapsible>\n *         <ion-label>\n *             <h1>Title</h1>\n *         </ion-label>\n *     </ion-item>\n *     ...\n * </ion-content>\n */\nexport class CoreCollapsibleHeaderDirective {\n  constructor(el) {\n    this.collapsible = true;\n    this.subscriptions = [];\n    this.enabled = true;\n    this.isWithinContent = false;\n    this.enteredPromise = new CorePromisedValue();\n    this.loadingFloatingTitle = false;\n    this.collapsedHeader = el.nativeElement;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    this.collapsible = !CoreUtils.isFalseOrZero(this.collapsible);\n    if (CoreDom.closest(this.collapsedHeader, 'core-tabs-outlet')) {\n      this.collapsible = false;\n    }\n    this.init();\n  }\n  /**\n   * Init function.\n   */\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.collapsible || _this.expandedHeader) {\n        return;\n      }\n      _this.initializePage();\n      yield Promise.all([_this.initializeCollapsedHeader(), _this.initializeExpandedHeader(), yield _this.enteredPromise]);\n      _this.listenEvents();\n      yield _this.initializeFloatingTitle();\n      _this.initializeContent();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnChanges(changes) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (changes.collapsible && !changes.collapsible.firstChange) {\n        _this2.collapsible = !CoreUtils.isFalseOrZero(changes.collapsible.currentValue);\n        _this2.enabled = _this2.collapsible;\n        yield _this2.init();\n        setTimeout(() => {\n          _this2.setEnabled(_this2.enabled);\n        }, 200);\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$resizeListener, _this$mutationObserve, _this$visiblePromise;\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    if (this.content && this.contentScrollListener) {\n      this.content.removeEventListener('ionScroll', this.contentScrollListener);\n    }\n    if (this.content && this.endContentScrollListener) {\n      this.content.removeEventListener('ionScrollEnd', this.endContentScrollListener);\n    }\n    if (this.page && this.pageDidEnterListener) {\n      this.page.removeEventListener('ionViewDidEnter', this.pageDidEnterListener);\n    }\n    (_this$resizeListener = this.resizeListener) === null || _this$resizeListener === void 0 || _this$resizeListener.off();\n    (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.disconnect();\n    (_this$visiblePromise = this.visiblePromise) === null || _this$visiblePromise === void 0 || _this$visiblePromise.cancel();\n  }\n  /**\n   * Update collapsed status of the header.\n   *\n   * @param collapsed Whether header is collapsed or not.\n   */\n  setCollapsed(collapsed) {\n    if (!this.page) {\n      return;\n    }\n    const isCollapsed = this.page.classList.contains('collapsible-header-page-is-collapsed');\n    if (isCollapsed === collapsed) {\n      return;\n    }\n    this.page.classList.toggle('collapsible-header-page-is-collapsed', collapsed);\n    CoreEvents.trigger(COLLAPSIBLE_HEADER_UPDATED, {\n      collapsed\n    });\n  }\n  /**\n   * Listen to changing events.\n   */\n  listenEvents() {\n    this.resizeListener = CoreDom.onWindowResize(() => {\n      this.initializeFloatingTitle();\n    }, 50);\n    this.subscriptions.push(CoreSettingsHelper.onDarkModeChange().subscribe(() => {\n      this.initializeFloatingTitle();\n    }));\n    this.mutationObserver = new MutationObserver(() => {\n      if (!this.expandedHeader) {\n        return;\n      }\n      const originalTitle = this.expandedHeader.querySelector('h1.collapsible-header-original-title') || this.expandedHeader.querySelector('h1');\n      const floatingTitleWrapper = originalTitle.parentElement;\n      const floatingTitle = floatingTitleWrapper.querySelector('.collapsible-header-floating-title');\n      if (!floatingTitle || !originalTitle) {\n        return;\n      }\n      // Original title changed, change the contents.\n      const newFloatingTitle = originalTitle.cloneNode(true);\n      newFloatingTitle.classList.add('collapsible-header-floating-title');\n      newFloatingTitle.classList.remove('collapsible-header-original-title');\n      floatingTitleWrapper.replaceChild(newFloatingTitle, floatingTitle);\n      this.initializeFloatingTitle();\n    });\n  }\n  /**\n   * Search the page element, initialize it, and wait until it's ready for the transition to trigger on scroll.\n   */\n  initializePage() {\n    if (!this.collapsedHeader.parentElement) {\n      throw new Error('[collapsible-header] Couldn\\'t get page');\n    }\n    // Find element and prepare classes.\n    this.page = this.collapsedHeader.parentElement;\n    this.page.classList.add('collapsible-header-page');\n    this.page.addEventListener('ionViewDidEnter', this.pageDidEnterListener = () => {\n      clearTimeout(timeout);\n      this.enteredPromise.resolve();\n      if (this.page && this.pageDidEnterListener) {\n        this.page.removeEventListener('ionViewDidEnter', this.pageDidEnterListener);\n      }\n    });\n    // Timeout in case event is never fired.\n    const timeout = window.setTimeout(() => {\n      this.enteredPromise.reject(new Error('[collapsible-header] Waiting for ionViewDidEnter timeout reached'));\n    }, 5000);\n  }\n  /**\n   * Search the collapsed header element, initialize it, and wait until it's ready for the transition to trigger on scroll.\n   */\n  initializeCollapsedHeader() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.collapsedHeader.classList.add('collapsible-header-collapsed');\n      yield _this3.waitFormatTextsRendered(_this3.collapsedHeader);\n    })();\n  }\n  /**\n   * Search the expanded header element, initialize it, and wait until it's ready for the transition to trigger on scroll.\n   */\n  initializeExpandedHeader() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      var _this4$page$querySele, _this4$page;\n      yield _this4.waitLoadingsDone();\n      _this4.expandedHeader = (_this4$page$querySele = (_this4$page = _this4.page) === null || _this4$page === void 0 ? void 0 : _this4$page.querySelector('ion-item[collapsible]')) !== null && _this4$page$querySele !== void 0 ? _this4$page$querySele : undefined;\n      if (!_this4.expandedHeader) {\n        _this4.enabled = false;\n        _this4.setEnabled(_this4.enabled);\n        throw new Error('[collapsible-header] Couldn\\'t initialize expanded header');\n      }\n      _this4.expandedHeader.classList.add('collapsible-header-expanded');\n      yield _this4.waitFormatTextsRendered(_this4.expandedHeader);\n    })();\n  }\n  /**\n   * Search the page content, initialize it, and wait until it's ready for the transition to trigger on scroll.\n   */\n  initializeContent() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this5.page) {\n        return;\n      }\n      // Initialize from tabs.\n      const tabs = CoreDirectivesRegistry.resolve(_this5.page.querySelector('core-tabs-outlet'), CoreTabsOutletComponent);\n      if (tabs) {\n        const outlet = tabs.getOutlet();\n        const onOutletUpdated = () => {\n          const activePage = outlet.nativeEl.querySelector('.ion-page:not(.ion-page-hidden)');\n          _this5.updateContent(activePage === null || activePage === void 0 ? void 0 : activePage.querySelector('ion-content:not(.disable-scroll-y)'));\n        };\n        _this5.subscriptions.push(outlet.activateEvents.subscribe(onOutletUpdated));\n        onOutletUpdated();\n        return;\n      }\n      // Initialize from page content.\n      const content = _this5.page.querySelector('ion-content:not(.disable-scroll-y)');\n      if (!content) {\n        throw new Error('[collapsible-header] Couldn\\'t get content');\n      }\n      _this5.trackContentScroll(content);\n    })();\n  }\n  /**\n   * Initialize a floating title to mimic transitioning the title from one state to the other.\n   */\n  initializeFloatingTitle() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this6.page || !_this6.expandedHeader) {\n        return;\n      }\n      if (_this6.loadingFloatingTitle) {\n        // Already calculating, return.\n        return;\n      }\n      _this6.loadingFloatingTitle = true;\n      _this6.visiblePromise = CoreDom.waitToBeVisible(_this6.expandedHeader);\n      yield _this6.visiblePromise;\n      _this6.page.classList.remove('collapsible-header-page-is-active');\n      yield CoreUtils.nextTick();\n      // Add floating title and measure initial position.\n      const collapsedHeaderTitle = _this6.collapsedHeader.querySelector('h1');\n      const originalTitle = _this6.expandedHeader.querySelector('h1.collapsible-header-original-title') || _this6.expandedHeader.querySelector('h1');\n      const floatingTitleWrapper = originalTitle.parentElement;\n      let floatingTitle = floatingTitleWrapper.querySelector('.collapsible-header-floating-title');\n      if (!floatingTitle) {\n        var _this6$mutationObserv;\n        // First time, create it.\n        floatingTitle = originalTitle.cloneNode(true);\n        floatingTitle.classList.add('collapsible-header-floating-title');\n        floatingTitleWrapper.classList.add('collapsible-header-floating-title-wrapper');\n        floatingTitleWrapper.insertBefore(floatingTitle, originalTitle);\n        originalTitle.classList.add('collapsible-header-original-title');\n        (_this6$mutationObserv = _this6.mutationObserver) === null || _this6$mutationObserv === void 0 || _this6$mutationObserv.observe(originalTitle, {\n          childList: true,\n          subtree: true\n        });\n      }\n      const floatingTitleBoundingBox = floatingTitle.getBoundingClientRect();\n      // Prepare styles variables.\n      const collapsedHeaderTitleBoundingBox = collapsedHeaderTitle.getBoundingClientRect();\n      const collapsedTitleStyles = getComputedStyle(collapsedHeaderTitle);\n      const expandedHeaderHeight = _this6.expandedHeader.clientHeight;\n      const expandedTitleStyles = getComputedStyle(originalTitle);\n      const originalTitleBoundingBox = originalTitle.getBoundingClientRect();\n      const textProperties = ['overflow', 'white-space', 'text-overflow', 'color'];\n      const [collapsedFontStyles, expandedFontStyles] = Array.from(collapsedTitleStyles).filter(property => property.startsWith('font-') || property.startsWith('letter-') || textProperties.includes(property)).reduce((styles, property) => {\n        styles[0][property] = CoreDom.getCSSPropertyValue(collapsedTitleStyles, property);\n        styles[1][property] = CoreDom.getCSSPropertyValue(expandedTitleStyles, property);\n        return styles;\n      }, [{}, {}]);\n      const cssVariables = {\n        '--collapsible-header-collapsed-height': `${_this6.collapsedHeader.clientHeight}px`,\n        '--collapsible-header-expanded-y-delta': `-${_this6.collapsedHeader.clientHeight}px`,\n        '--collapsible-header-expanded-height': `${expandedHeaderHeight}px`,\n        '--collapsible-header-floating-title-top': `${originalTitleBoundingBox.top - floatingTitleBoundingBox.top}px`,\n        '--collapsible-header-floating-title-left': `${originalTitleBoundingBox.left - floatingTitleBoundingBox.left}px`,\n        '--collapsible-header-floating-title-width': `${originalTitle.clientWidth}px`,\n        '--collapsible-header-floating-title-x-delta': `${collapsedHeaderTitleBoundingBox.left - originalTitleBoundingBox.left}px`,\n        '--collapsible-header-floating-title-width-delta': `${collapsedHeaderTitle.clientWidth - originalTitle.clientWidth}px`\n      };\n      Object.entries(cssVariables).forEach(([property, value]) => {\n        var _this6$page;\n        return (_this6$page = _this6.page) === null || _this6$page === void 0 ? void 0 : _this6$page.style.setProperty(property, value);\n      });\n      Object.entries(expandedFontStyles).forEach(([property, value]) => floatingTitle.style.setProperty(property, value));\n      // Activate styles.\n      _this6.page.classList.add('collapsible-header-page-is-active');\n      _this6.floatingTitle = floatingTitle;\n      _this6.scrollingHeight = originalTitleBoundingBox.top - collapsedHeaderTitleBoundingBox.top;\n      _this6.collapsedFontStyles = collapsedFontStyles;\n      _this6.expandedFontStyles = expandedFontStyles;\n      _this6.expandedHeaderHeight = expandedHeaderHeight;\n      _this6.loadingFloatingTitle = false;\n    })();\n  }\n  /**\n   * Wait until all <core-loading> children inside the page.\n   */\n  waitLoadingsDone() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this7.page) {\n        return;\n      }\n      // Make sure elements have been added to the DOM.\n      yield CoreUtils.nextTick();\n      // Wait all loadings and tabs to finish loading.\n      yield CoreDirectivesRegistry.waitMultipleDirectivesReady(_this7.page, [{\n        selector: 'core-loading',\n        class: CoreLoadingComponent\n      }, {\n        selector: 'core-tabs',\n        class: CoreTabsComponent\n      }, {\n        selector: 'core-tabs-outlet',\n        class: CoreTabsOutletComponent\n      }]);\n    })();\n  }\n  /**\n   * Wait until all <core-format-text> children inside the element are done rendering.\n   *\n   * @param element Element.\n   * @returns Promise resolved when texts are rendered.\n   */\n  waitFormatTextsRendered(element) {\n    return _asyncToGenerator(function* () {\n      yield CoreDirectivesRegistry.waitDirectivesReady(element, 'core-format-text', CoreFormatTextDirective);\n    })();\n  }\n  /**\n   * Update content element whos scroll is being tracked.\n   *\n   * @param content Content element.\n   */\n  updateContent(content) {\n    var _this$content;\n    if (content === ((_this$content = this.content) !== null && _this$content !== void 0 ? _this$content : null)) {\n      return;\n    }\n    if (this.content) {\n      if (this.contentScrollListener) {\n        this.content.removeEventListener('ionScroll', this.contentScrollListener);\n        delete this.contentScrollListener;\n      }\n      if (this.endContentScrollListener) {\n        this.content.removeEventListener('ionScrollEnd', this.endContentScrollListener);\n        delete this.endContentScrollListener;\n      }\n      delete this.content;\n    }\n    content && this.trackContentScroll(content);\n  }\n  /**\n   * Set collapsed/expanded based on properties.\n   *\n   * @param enable True to enable, false otherwise\n   */\n  setEnabled(enable) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this8.page) {\n        return;\n      }\n      if (enable && _this8.content) {\n        const contentScroll = yield _this8.content.getScrollElement();\n        // Do nothing, since scroll has already started on the page.\n        if (contentScroll.scrollTop > 0) {\n          return;\n        }\n      }\n      _this8.setCollapsed(!enable);\n      _this8.page.style.setProperty('--collapsible-header-progress', enable ? '0' : '1');\n    })();\n  }\n  /**\n   * Listen to a content element for scroll events that will control the header state transition.\n   *\n   * @param content Content element.\n   */\n  trackContentScroll(content) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      if (content === _this9.content) {\n        return;\n      }\n      _this9.content = content;\n      const page = _this9.page;\n      const scrollingHeight = _this9.scrollingHeight;\n      const expandedHeader = _this9.expandedHeader;\n      const expandedHeaderHeight = _this9.expandedHeaderHeight;\n      const expandedFontStyles = _this9.expandedFontStyles;\n      const collapsedFontStyles = _this9.collapsedFontStyles;\n      const floatingTitle = _this9.floatingTitle;\n      const contentScroll = yield _this9.content.getScrollElement();\n      if (!page || !scrollingHeight || !expandedHeader || !expandedHeaderHeight || !expandedFontStyles || !collapsedFontStyles || !floatingTitle) {\n        page === null || page === void 0 || page.classList.remove('collapsible-header-page-is-active');\n        throw new Error('[collapsible-header] Couldn\\'t set up scrolling');\n      }\n      _this9.isWithinContent = content.contains(expandedHeader);\n      page.classList.toggle('collapsible-header-page-is-within-content', _this9.isWithinContent);\n      _this9.setEnabled(_this9.enabled);\n      Object.entries(expandedFontStyles).forEach(([property, value]) => floatingTitle.style.setProperty(property, value));\n      _this9.content.scrollEvents = true;\n      _this9.content.addEventListener('ionScroll', _this9.contentScrollListener = ({\n        target\n      }) => {\n        if (target !== _this9.content || !_this9.enabled) {\n          return;\n        }\n        const scrollableHeight = contentScroll.scrollHeight - contentScroll.clientHeight;\n        let frozen = false;\n        if (_this9.isWithinContent) {\n          frozen = scrollableHeight <= scrollingHeight;\n        } else {\n          var _expandedHeader$clien;\n          const collapsedHeight = expandedHeaderHeight - ((_expandedHeader$clien = expandedHeader.clientHeight) !== null && _expandedHeader$clien !== void 0 ? _expandedHeader$clien : 0);\n          frozen = scrollableHeight + collapsedHeight <= 2 * expandedHeaderHeight;\n        }\n        const progress = frozen ? 0 : CoreMath.clamp(contentScroll.scrollTop / scrollingHeight, 0, 1);\n        _this9.setCollapsed(progress === 1);\n        page.style.setProperty('--collapsible-header-progress', `${progress}`);\n        page.classList.toggle('collapsible-header-page-is-frozen', frozen);\n        Object.entries(progress > .5 ? collapsedFontStyles : expandedFontStyles).forEach(([property, value]) => floatingTitle.style.setProperty(property, value));\n      });\n      _this9.content.addEventListener('ionScrollEnd', _this9.endContentScrollListener = ({\n        target\n      }) => {\n        if (target !== _this9.content || !_this9.enabled) {\n          return;\n        }\n        if (page.classList.contains('collapsible-header-page-is-frozen')) {\n          return;\n        }\n        const progress = parseFloat(page.style.getPropertyValue('--collapsible-header-progress'));\n        const scrollTop = contentScroll.scrollTop;\n        const collapse = progress > 0.5;\n        _this9.setCollapsed(collapse);\n        page.style.setProperty('--collapsible-header-progress', collapse ? '1' : '0');\n        if (collapse && _this9.scrollingHeight && _this9.scrollingHeight > 0 && scrollTop < _this9.scrollingHeight) {\n          var _this9$content;\n          (_this9$content = _this9.content) === null || _this9$content === void 0 || _this9$content.scrollToPoint(null, _this9.scrollingHeight);\n        }\n        if (!collapse && _this9.scrollingHeight && _this9.scrollingHeight > 0 && scrollTop > 0) {\n          var _this9$content2;\n          (_this9$content2 = _this9.content) === null || _this9$content2 === void 0 || _this9$content2.scrollToPoint(null, 0);\n        }\n      });\n    })();\n  }\n}\n_class = CoreCollapsibleHeaderDirective;\n_class.ɵfac = function CoreCollapsibleHeaderDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"ion-header\", \"collapsible\", \"\"]],\n  inputs: {\n    collapsible: \"collapsible\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});","map":{"version":3,"names":["CorePromisedValue","CoreLoadingComponent","CoreTabsOutletComponent","CoreTabsComponent","CoreSettingsHelper","CoreUtils","CoreDirectivesRegistry","CoreDom","CoreEvents","CoreMath","CoreFormatTextDirective","COLLAPSIBLE_HEADER_UPDATED","CoreCollapsibleHeaderDirective","constructor","el","collapsible","subscriptions","enabled","isWithinContent","enteredPromise","loadingFloatingTitle","collapsedHeader","nativeElement","ngOnInit","isFalseOrZero","closest","init","_this","_asyncToGenerator","expandedHeader","initializePage","Promise","all","initializeCollapsedHeader","initializeExpandedHeader","listenEvents","initializeFloatingTitle","initializeContent","ngOnChanges","changes","_this2","firstChange","currentValue","setTimeout","setEnabled","ngOnDestroy","_this$resizeListener","_this$mutationObserve","_this$visiblePromise","forEach","subscription","unsubscribe","content","contentScrollListener","removeEventListener","endContentScrollListener","page","pageDidEnterListener","resizeListener","off","mutationObserver","disconnect","visiblePromise","cancel","setCollapsed","collapsed","isCollapsed","classList","contains","toggle","trigger","onWindowResize","push","onDarkModeChange","subscribe","MutationObserver","originalTitle","querySelector","floatingTitleWrapper","parentElement","floatingTitle","newFloatingTitle","cloneNode","add","remove","replaceChild","Error","addEventListener","clearTimeout","timeout","resolve","window","reject","_this3","waitFormatTextsRendered","_this4","_this4$page$querySele","_this4$page","waitLoadingsDone","undefined","_this5","tabs","outlet","getOutlet","onOutletUpdated","activePage","nativeEl","updateContent","activateEvents","trackContentScroll","_this6","waitToBeVisible","nextTick","collapsedHeaderTitle","_this6$mutationObserv","insertBefore","observe","childList","subtree","floatingTitleBoundingBox","getBoundingClientRect","collapsedHeaderTitleBoundingBox","collapsedTitleStyles","getComputedStyle","expandedHeaderHeight","clientHeight","expandedTitleStyles","originalTitleBoundingBox","textProperties","collapsedFontStyles","expandedFontStyles","Array","from","filter","property","startsWith","includes","reduce","styles","getCSSPropertyValue","cssVariables","top","left","clientWidth","Object","entries","value","_this6$page","style","setProperty","scrollingHeight","_this7","waitMultipleDirectivesReady","selector","class","element","waitDirectivesReady","_this$content","enable","_this8","contentScroll","getScrollElement","scrollTop","_this9","scrollEvents","target","scrollableHeight","scrollHeight","frozen","_expandedHeader$clien","collapsedHeight","progress","clamp","parseFloat","getPropertyValue","collapse","_this9$content","scrollToPoint","_this9$content2","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs","features","ɵɵNgOnChangesFeature"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/directives/collapsible-header.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';\nimport { CoreCancellablePromise } from '@classes/cancellable-promise';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreLoadingComponent } from '@components/loading/loading';\nimport { CoreTabsOutletComponent } from '@components/tabs-outlet/tabs-outlet';\nimport { CoreTabsComponent } from '@components/tabs/tabs';\nimport { CoreSettingsHelper } from '@features/settings/services/settings-helper';\nimport { ScrollDetail } from '@ionic/core';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDirectivesRegistry } from '@singletons/directives-registry';\nimport { CoreDom } from '@singletons/dom';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreMath } from '@singletons/math';\nimport { Subscription } from 'rxjs';\nimport { CoreFormatTextDirective } from './format-text';\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [COLLAPSIBLE_HEADER_UPDATED]: { collapsed: boolean };\n    }\n\n}\n\nexport const COLLAPSIBLE_HEADER_UPDATED = 'collapsible_header_updated';\n\n/**\n * Directive to make <ion-header> collapsible.\n *\n * This directive expects h1 titles to be duplicated in a header and an item inside the page, and it will transition\n * from one state to another listening to the scroll in the page content. The item to be used as the expanded form\n * should also have the [collapsed] attribute.\n *\n * Example usage:\n *\n * <ion-header collapsible>\n *     <ion-toolbar>\n *         <ion-title>\n *             <h1>Title</h1>\n *         </ion-title>\n *     </ion-toolbar>\n * </ion-header>\n *\n * <ion-content>\n *     <ion-item collapsible>\n *         <ion-label>\n *             <h1>Title</h1>\n *         </ion-label>\n *     </ion-item>\n *     ...\n * </ion-content>\n */\n@Directive({\n    selector: 'ion-header[collapsible]',\n})\nexport class CoreCollapsibleHeaderDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input() collapsible = true;\n\n    protected page?: HTMLElement;\n    protected collapsedHeader: HTMLIonHeaderElement;\n    protected collapsedFontStyles?: Partial<CSSStyleDeclaration>;\n    protected expandedHeader?: HTMLIonItemElement;\n    protected expandedHeaderHeight?: number;\n    protected expandedFontStyles?: Partial<CSSStyleDeclaration>;\n    protected content?: HTMLIonContentElement;\n    protected contentScrollListener?: EventListener;\n    protected endContentScrollListener?: EventListener;\n    protected pageDidEnterListener?: EventListener;\n    protected resizeListener?: CoreEventObserver;\n    protected floatingTitle?: HTMLHeadingElement;\n    protected scrollingHeight?: number;\n    protected subscriptions: Subscription[] = [];\n    protected enabled = true;\n    protected isWithinContent = false;\n    protected enteredPromise = new CorePromisedValue<void>();\n    protected mutationObserver?: MutationObserver;\n    protected loadingFloatingTitle = false;\n    protected visiblePromise?: CoreCancellablePromise<void>;\n\n    constructor(el: ElementRef) {\n        this.collapsedHeader = el.nativeElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.collapsible = !CoreUtils.isFalseOrZero(this.collapsible);\n\n        if (CoreDom.closest(this.collapsedHeader, 'core-tabs-outlet')) {\n            this.collapsible = false;\n        }\n\n        this.init();\n    }\n\n    /**\n     * Init function.\n     */\n    async init(): Promise<void> {\n        if (!this.collapsible || this.expandedHeader) {\n            return;\n        }\n\n        this.initializePage();\n\n        await Promise.all([\n            this.initializeCollapsedHeader(),\n            this.initializeExpandedHeader(),\n            await this.enteredPromise,\n        ]);\n\n        this.listenEvents();\n\n        await this.initializeFloatingTitle();\n        this.initializeContent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnChanges(changes: {[name: string]: SimpleChange}): Promise<void> {\n        if (changes.collapsible && !changes.collapsible.firstChange) {\n            this.collapsible = !CoreUtils.isFalseOrZero(changes.collapsible.currentValue);\n            this.enabled = this.collapsible;\n\n            await this.init();\n\n            setTimeout(() => {\n                this.setEnabled(this.enabled);\n            }, 200);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n\n        if (this.content && this.contentScrollListener) {\n            this.content.removeEventListener('ionScroll', this.contentScrollListener);\n        }\n        if (this.content && this.endContentScrollListener) {\n            this.content.removeEventListener('ionScrollEnd', this.endContentScrollListener);\n        }\n        if (this.page && this.pageDidEnterListener) {\n            this.page.removeEventListener('ionViewDidEnter', this.pageDidEnterListener);\n        }\n\n        this.resizeListener?.off();\n        this.mutationObserver?.disconnect();\n        this.visiblePromise?.cancel();\n    }\n\n    /**\n     * Update collapsed status of the header.\n     *\n     * @param collapsed Whether header is collapsed or not.\n     */\n    protected setCollapsed(collapsed: boolean): void {\n        if (!this.page) {\n            return;\n        }\n\n        const isCollapsed = this.page.classList.contains('collapsible-header-page-is-collapsed');\n\n        if (isCollapsed === collapsed) {\n            return;\n        }\n\n        this.page.classList.toggle('collapsible-header-page-is-collapsed', collapsed);\n\n        CoreEvents.trigger(COLLAPSIBLE_HEADER_UPDATED, { collapsed });\n    }\n\n    /**\n     * Listen to changing events.\n     */\n    protected listenEvents(): void {\n        this.resizeListener = CoreDom.onWindowResize(() => {\n            this.initializeFloatingTitle();\n        }, 50);\n\n        this.subscriptions.push(CoreSettingsHelper.onDarkModeChange().subscribe(() => {\n            this.initializeFloatingTitle();\n        }));\n\n        this.mutationObserver = new MutationObserver(() => {\n            if (!this.expandedHeader) {\n                return;\n            }\n\n            const originalTitle = this.expandedHeader.querySelector('h1.collapsible-header-original-title') ||\n                this.expandedHeader.querySelector('h1') as HTMLHeadingElement;\n\n            const floatingTitleWrapper = originalTitle.parentElement as HTMLElement;\n            const floatingTitle = floatingTitleWrapper.querySelector('.collapsible-header-floating-title') as HTMLHeadingElement;\n\n            if (!floatingTitle || !originalTitle) {\n                return;\n            }\n\n            // Original title changed, change the contents.\n            const newFloatingTitle = originalTitle.cloneNode(true) as HTMLHeadingElement;\n            newFloatingTitle.classList.add('collapsible-header-floating-title');\n            newFloatingTitle.classList.remove('collapsible-header-original-title');\n\n            floatingTitleWrapper.replaceChild(newFloatingTitle, floatingTitle);\n\n            this.initializeFloatingTitle();\n        });\n    }\n\n    /**\n     * Search the page element, initialize it, and wait until it's ready for the transition to trigger on scroll.\n     */\n    protected initializePage(): void {\n        if (!this.collapsedHeader.parentElement) {\n            throw new Error('[collapsible-header] Couldn\\'t get page');\n        }\n\n        // Find element and prepare classes.\n        this.page = this.collapsedHeader.parentElement;\n        this.page.classList.add('collapsible-header-page');\n\n        this.page.addEventListener(\n            'ionViewDidEnter',\n            this.pageDidEnterListener = () => {\n                clearTimeout(timeout);\n                this.enteredPromise.resolve();\n                if (this.page && this.pageDidEnterListener) {\n                    this.page.removeEventListener('ionViewDidEnter', this.pageDidEnterListener);\n                }\n            },\n        );\n\n        // Timeout in case event is never fired.\n        const timeout = window.setTimeout(() => {\n            this.enteredPromise.reject(new Error('[collapsible-header] Waiting for ionViewDidEnter timeout reached'));\n        }, 5000);\n    }\n\n    /**\n     * Search the collapsed header element, initialize it, and wait until it's ready for the transition to trigger on scroll.\n     */\n    protected async initializeCollapsedHeader(): Promise<void> {\n        this.collapsedHeader.classList.add('collapsible-header-collapsed');\n\n        await this.waitFormatTextsRendered(this.collapsedHeader);\n    }\n\n    /**\n     * Search the expanded header element, initialize it, and wait until it's ready for the transition to trigger on scroll.\n     */\n    protected async initializeExpandedHeader(): Promise<void> {\n        await this.waitLoadingsDone();\n\n        this.expandedHeader = this.page?.querySelector('ion-item[collapsible]') ?? undefined;\n\n        if (!this.expandedHeader) {\n            this.enabled = false;\n            this.setEnabled(this.enabled);\n\n            throw new Error('[collapsible-header] Couldn\\'t initialize expanded header');\n\n        }\n        this.expandedHeader.classList.add('collapsible-header-expanded');\n\n        await this.waitFormatTextsRendered(this.expandedHeader);\n    }\n\n    /**\n     * Search the page content, initialize it, and wait until it's ready for the transition to trigger on scroll.\n     */\n    protected async initializeContent(): Promise<void> {\n        if (!this.page) {\n            return;\n        }\n\n        // Initialize from tabs.\n        const tabs = CoreDirectivesRegistry.resolve(this.page.querySelector('core-tabs-outlet'), CoreTabsOutletComponent);\n\n        if (tabs) {\n            const outlet = tabs.getOutlet();\n            const onOutletUpdated = () => {\n                const activePage = outlet.nativeEl.querySelector('.ion-page:not(.ion-page-hidden)');\n\n                this.updateContent(activePage?.querySelector('ion-content:not(.disable-scroll-y)') as HTMLIonContentElement);\n            };\n\n            this.subscriptions.push(outlet.activateEvents.subscribe(onOutletUpdated));\n\n            onOutletUpdated();\n\n            return;\n        }\n\n        // Initialize from page content.\n        const content = this.page.querySelector('ion-content:not(.disable-scroll-y)');\n\n        if (!content) {\n            throw new Error('[collapsible-header] Couldn\\'t get content');\n        }\n\n        this.trackContentScroll(content as HTMLIonContentElement);\n    }\n\n    /**\n     * Initialize a floating title to mimic transitioning the title from one state to the other.\n     */\n    protected async initializeFloatingTitle(): Promise<void> {\n        if (!this.page || !this.expandedHeader) {\n            return;\n        }\n\n        if (this.loadingFloatingTitle) {\n            // Already calculating, return.\n            return;\n        }\n        this.loadingFloatingTitle = true;\n\n        this.visiblePromise = CoreDom.waitToBeVisible(this.expandedHeader);\n        await this.visiblePromise;\n\n        this.page.classList.remove('collapsible-header-page-is-active');\n        await CoreUtils.nextTick();\n\n        // Add floating title and measure initial position.\n        const collapsedHeaderTitle = this.collapsedHeader.querySelector('h1') as HTMLHeadingElement;\n        const originalTitle = this.expandedHeader.querySelector('h1.collapsible-header-original-title') ||\n            this.expandedHeader.querySelector('h1') as HTMLHeadingElement;\n\n        const floatingTitleWrapper = originalTitle.parentElement as HTMLElement;\n        let floatingTitle = floatingTitleWrapper.querySelector('.collapsible-header-floating-title') as HTMLHeadingElement;\n        if (!floatingTitle) {\n            // First time, create it.\n            floatingTitle = originalTitle.cloneNode(true) as HTMLHeadingElement;\n            floatingTitle.classList.add('collapsible-header-floating-title');\n\n            floatingTitleWrapper.classList.add('collapsible-header-floating-title-wrapper');\n            floatingTitleWrapper.insertBefore(floatingTitle, originalTitle);\n\n            originalTitle.classList.add('collapsible-header-original-title');\n            this.mutationObserver?.observe(originalTitle, { childList: true, subtree: true });\n        }\n\n        const floatingTitleBoundingBox = floatingTitle.getBoundingClientRect();\n\n        // Prepare styles variables.\n        const collapsedHeaderTitleBoundingBox = collapsedHeaderTitle.getBoundingClientRect();\n        const collapsedTitleStyles = getComputedStyle(collapsedHeaderTitle);\n        const expandedHeaderHeight = this.expandedHeader.clientHeight;\n        const expandedTitleStyles = getComputedStyle(originalTitle);\n        const originalTitleBoundingBox = originalTitle.getBoundingClientRect();\n        const textProperties = ['overflow', 'white-space', 'text-overflow', 'color'];\n        const [collapsedFontStyles, expandedFontStyles] = Array\n            .from(collapsedTitleStyles)\n            .filter(\n                property =>\n                    property.startsWith('font-') ||\n                    property.startsWith('letter-') ||\n                    textProperties.includes(property),\n            )\n            .reduce((styles, property) => {\n                styles[0][property] = CoreDom.getCSSPropertyValue(collapsedTitleStyles, property);\n                styles[1][property] = CoreDom.getCSSPropertyValue(expandedTitleStyles, property);\n\n                return styles;\n            }, [{}, {}]);\n        const cssVariables = {\n            '--collapsible-header-collapsed-height': `${this.collapsedHeader.clientHeight}px`,\n            '--collapsible-header-expanded-y-delta': `-${this.collapsedHeader.clientHeight}px`,\n            '--collapsible-header-expanded-height': `${expandedHeaderHeight}px`,\n            '--collapsible-header-floating-title-top': `${originalTitleBoundingBox.top - floatingTitleBoundingBox.top}px`,\n            '--collapsible-header-floating-title-left': `${originalTitleBoundingBox.left - floatingTitleBoundingBox.left}px`,\n            '--collapsible-header-floating-title-width': `${originalTitle.clientWidth}px`,\n            '--collapsible-header-floating-title-x-delta':\n                `${collapsedHeaderTitleBoundingBox.left - originalTitleBoundingBox.left}px`,\n            '--collapsible-header-floating-title-width-delta': `${collapsedHeaderTitle.clientWidth - originalTitle.clientWidth}px`,\n        };\n\n        Object\n            .entries(cssVariables)\n            .forEach(([property, value]) => this.page?.style.setProperty(property, value));\n\n        Object\n            .entries(expandedFontStyles)\n            .forEach(([property, value]) => floatingTitle.style.setProperty(property, value as string));\n\n        // Activate styles.\n        this.page.classList.add('collapsible-header-page-is-active');\n\n        this.floatingTitle = floatingTitle;\n        this.scrollingHeight = originalTitleBoundingBox.top - collapsedHeaderTitleBoundingBox.top;\n        this.collapsedFontStyles = collapsedFontStyles;\n        this.expandedFontStyles = expandedFontStyles;\n        this.expandedHeaderHeight = expandedHeaderHeight;\n\n        this.loadingFloatingTitle = false;\n    }\n\n    /**\n     * Wait until all <core-loading> children inside the page.\n     */\n    protected async waitLoadingsDone(): Promise<void> {\n        if (!this.page) {\n            return;\n        }\n\n        // Make sure elements have been added to the DOM.\n        await CoreUtils.nextTick();\n\n        // Wait all loadings and tabs to finish loading.\n        await CoreDirectivesRegistry.waitMultipleDirectivesReady(this.page, [\n            { selector: 'core-loading', class: CoreLoadingComponent },\n            { selector: 'core-tabs', class: CoreTabsComponent },\n            { selector: 'core-tabs-outlet', class: CoreTabsOutletComponent },\n        ]);\n    }\n\n    /**\n     * Wait until all <core-format-text> children inside the element are done rendering.\n     *\n     * @param element Element.\n     * @returns Promise resolved when texts are rendered.\n     */\n    protected async waitFormatTextsRendered(element: Element): Promise<void> {\n        await CoreDirectivesRegistry.waitDirectivesReady(element, 'core-format-text', CoreFormatTextDirective);\n    }\n\n    /**\n     * Update content element whos scroll is being tracked.\n     *\n     * @param content Content element.\n     */\n    protected updateContent(content?: HTMLIonContentElement | null): void {\n        if (content === (this.content ?? null)) {\n            return;\n        }\n\n        if (this.content) {\n            if (this.contentScrollListener) {\n                this.content.removeEventListener('ionScroll', this.contentScrollListener);\n                delete this.contentScrollListener;\n            }\n\n            if (this.endContentScrollListener) {\n                this.content.removeEventListener('ionScrollEnd', this.endContentScrollListener);\n                delete this.endContentScrollListener;\n            }\n\n            delete this.content;\n        }\n\n        content && this.trackContentScroll(content);\n    }\n\n    /**\n     * Set collapsed/expanded based on properties.\n     *\n     * @param enable True to enable, false otherwise\n     */\n    async setEnabled(enable: boolean): Promise<void> {\n        if (!this.page) {\n            return;\n        }\n\n        if (enable && this.content) {\n            const contentScroll = await this.content.getScrollElement();\n\n            // Do nothing, since scroll has already started on the page.\n            if (contentScroll.scrollTop > 0) {\n                return;\n            }\n        }\n\n        this.setCollapsed(!enable);\n        this.page.style.setProperty('--collapsible-header-progress', enable ? '0' : '1');\n    }\n\n    /**\n     * Listen to a content element for scroll events that will control the header state transition.\n     *\n     * @param content Content element.\n     */\n    protected async trackContentScroll(content: HTMLIonContentElement): Promise<void> {\n        if (content === this.content) {\n            return;\n        }\n\n        this.content = content;\n\n        const page = this.page;\n        const scrollingHeight = this.scrollingHeight;\n        const expandedHeader = this.expandedHeader;\n        const expandedHeaderHeight = this.expandedHeaderHeight;\n        const expandedFontStyles = this.expandedFontStyles;\n        const collapsedFontStyles = this.collapsedFontStyles;\n        const floatingTitle = this.floatingTitle;\n        const contentScroll = await this.content.getScrollElement();\n\n        if (\n            !page ||\n            !scrollingHeight ||\n            !expandedHeader ||\n            !expandedHeaderHeight ||\n            !expandedFontStyles ||\n            !collapsedFontStyles ||\n            !floatingTitle\n        ) {\n            page?.classList.remove('collapsible-header-page-is-active');\n            throw new Error('[collapsible-header] Couldn\\'t set up scrolling');\n        }\n\n        this.isWithinContent = content.contains(expandedHeader);\n        page.classList.toggle('collapsible-header-page-is-within-content', this.isWithinContent);\n        this.setEnabled(this.enabled);\n\n        Object\n            .entries(expandedFontStyles)\n            .forEach(([property, value]) => floatingTitle.style.setProperty(property, value as string));\n\n        this.content.scrollEvents = true;\n        this.content.addEventListener('ionScroll', this.contentScrollListener = ({ target }: CustomEvent<ScrollDetail>): void => {\n            if (target !== this.content || !this.enabled) {\n                return;\n            }\n\n            const scrollableHeight = contentScroll.scrollHeight - contentScroll.clientHeight;\n\n            let frozen = false;\n            if (this.isWithinContent) {\n                frozen = scrollableHeight <= scrollingHeight;\n            } else {\n                const collapsedHeight = expandedHeaderHeight - (expandedHeader.clientHeight ?? 0);\n                frozen = scrollableHeight + collapsedHeight <= 2 * expandedHeaderHeight;\n            }\n            const progress = frozen\n                ? 0\n                : CoreMath.clamp(contentScroll.scrollTop / scrollingHeight, 0, 1);\n\n            this.setCollapsed(progress === 1);\n            page.style.setProperty('--collapsible-header-progress', `${progress}`);\n            page.classList.toggle('collapsible-header-page-is-frozen', frozen);\n\n            Object\n                .entries(progress > .5 ? collapsedFontStyles : expandedFontStyles)\n                .forEach(([property, value]) => floatingTitle.style.setProperty(property, value as string));\n        });\n\n        this.content.addEventListener(\n            'ionScrollEnd',\n            this.endContentScrollListener = ({ target }: CustomEvent<ScrollDetail>): void => {\n                if (target !== this.content || !this.enabled) {\n                    return;\n                }\n\n                if (page.classList.contains('collapsible-header-page-is-frozen')) {\n                    return;\n                }\n\n                const progress = parseFloat(page.style.getPropertyValue('--collapsible-header-progress'));\n                const scrollTop = contentScroll.scrollTop;\n                const collapse = progress > 0.5;\n\n                this.setCollapsed(collapse);\n                page.style.setProperty('--collapsible-header-progress', collapse ? '1' : '0');\n\n                if (collapse && this.scrollingHeight && this.scrollingHeight > 0 && scrollTop < this.scrollingHeight) {\n                    this.content?.scrollToPoint(null, this.scrollingHeight);\n                }\n\n                if (!collapse && this.scrollingHeight && this.scrollingHeight > 0 && scrollTop > 0) {\n                    this.content?.scrollToPoint(null, 0);\n                }\n            },\n        );\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}