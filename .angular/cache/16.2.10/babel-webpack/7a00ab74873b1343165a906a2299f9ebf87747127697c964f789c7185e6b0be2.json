{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseActivitySyncBaseProvider } from '@features/course/classes/activity-sync';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreRatingSync } from '@features/rating/services/rating-sync';\nimport { CoreNetwork } from '@services/network';\nimport { CoreGroups } from '@services/groups';\nimport { CoreSites } from '@services/sites';\nimport { CoreSync } from '@services/sync';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModForum, AddonModForumProvider } from './forum';\nimport { AddonModForumHelper } from './forum-helper';\nimport { AddonModForumOffline } from './forum-offline';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to sync forums.\n */\nexport class AddonModForumSyncProvider extends CoreCourseActivitySyncBaseProvider {\n  constructor() {\n    super('AddonModForumSyncProvider');\n    this.componentTranslatableString = 'forum';\n  }\n  /**\n   * Try to synchronize all the forums in a certain site or in all sites.\n   *\n   * @param siteId Site ID to sync. If not defined, sync all sites.\n   * @param force Wether to force sync not depending on last execution.\n   * @returns Promise resolved if sync is successful, rejected if sync fails.\n   */\n  syncAllForums(siteId, force) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.syncOnSites('all forums', siteId => _this.syncAllForumsFunc(!!force, siteId), siteId);\n    })();\n  }\n  /**\n   * Sync all forums on a site.\n   *\n   * @param force Wether to force sync not depending on last execution.\n   * @param siteId Site ID to sync.\n   * @returns Promise resolved if sync is successful, rejected if sync fails.\n   */\n  syncAllForumsFunc(force, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const sitePromises = [];\n      // Sync all new discussions.\n      const syncDiscussions = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (discussions) {\n          // Do not sync same forum twice.\n          const syncedForumIds = [];\n          const promises = discussions.map( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (discussion) {\n              if (syncedForumIds.includes(discussion.forumid)) {\n                return;\n              }\n              syncedForumIds.push(discussion.forumid);\n              const result = force ? yield _this2.syncForumDiscussions(discussion.forumid, discussion.userid, siteId) : yield _this2.syncForumDiscussionsIfNeeded(discussion.forumid, discussion.userid, siteId);\n              if (result && result.updated) {\n                // Sync successful, send event.\n                CoreEvents.trigger(AddonModForumSyncProvider.AUTO_SYNCED, {\n                  forumId: discussion.forumid,\n                  userId: discussion.userid,\n                  warnings: result.warnings\n                }, siteId);\n              }\n            });\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n          yield Promise.all(Object.values(promises));\n        });\n        return function syncDiscussions(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      sitePromises.push(AddonModForumOffline.instance.getAllNewDiscussions(siteId).then(discussions => syncDiscussions(discussions)));\n      // Sync all discussion replies.\n      const syncReplies = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (replies) {\n          // Do not sync same discussion twice.\n          const syncedDiscussionIds = [];\n          const promises = replies.map( /*#__PURE__*/function () {\n            var _ref4 = _asyncToGenerator(function* (reply) {\n              if (syncedDiscussionIds.includes(reply.discussionid)) {\n                return;\n              }\n              syncedDiscussionIds.push(reply.discussionid);\n              const result = force ? yield _this2.syncDiscussionReplies(reply.discussionid, reply.userid, siteId) : yield _this2.syncDiscussionRepliesIfNeeded(reply.discussionid, reply.userid, siteId);\n              if (result && result.updated) {\n                // Sync successful, send event.\n                CoreEvents.trigger(AddonModForumSyncProvider.AUTO_SYNCED, {\n                  forumId: reply.forumid,\n                  discussionId: reply.discussionid,\n                  userId: reply.userid,\n                  warnings: result.warnings\n                }, siteId);\n              }\n            });\n            return function (_x4) {\n              return _ref4.apply(this, arguments);\n            };\n          }());\n          yield Promise.all(promises);\n        });\n        return function syncReplies(_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n      sitePromises.push(AddonModForumOffline.instance.getAllReplies(siteId).then(replies => syncReplies(replies)));\n      // Sync ratings.\n      sitePromises.push(_this2.syncRatings(undefined, undefined, force, siteId));\n      yield Promise.all(sitePromises);\n    })();\n  }\n  /**\n   * Sync a forum only if a certain time has passed since the last time.\n   *\n   * @param forumId Forum ID.\n   * @param userId User the discussion belong to.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the forum is synced or if it doesn't need to be synced.\n   */\n  syncForumDiscussionsIfNeeded(forumId, userId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const syncId = _this3.getForumSyncId(forumId, userId);\n      const needed = yield _this3.isSyncNeeded(syncId, siteId);\n      if (needed) {\n        return _this3.syncForumDiscussions(forumId, userId, siteId);\n      }\n    })();\n  }\n  /**\n   * Synchronize all offline discussions of a forum.\n   *\n   * @param forumId Forum ID to be synced.\n   * @param userId User the discussions belong to.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  syncForumDiscussions(forumId, userId, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      userId = userId || CoreSites.getCurrentSiteUserId();\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const syncId = _this4.getForumSyncId(forumId, userId);\n      const currentSyncPromise = _this4.getOngoingSync(syncId, siteId);\n      if (currentSyncPromise) {\n        // There's already a sync ongoing for this discussion, return the promise.\n        return currentSyncPromise;\n      }\n      // Verify that forum isn't blocked.\n      if (CoreSync.isBlocked(AddonModForumProvider.COMPONENT, syncId, siteId)) {\n        _this4.logger.debug('Cannot sync forum ' + forumId + ' because it is blocked.');\n        throw new Error(Translate.instant('core.errorsyncblocked', {\n          $a: _this4.componentTranslate\n        }));\n      }\n      _this4.logger.debug('Try to sync forum ' + forumId + ' for user ' + userId);\n      const result = {\n        warnings: [],\n        updated: false\n      };\n      // Sync offline logs.\n      const syncDiscussions = /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* () {\n          yield CoreUtils.ignoreErrors(CoreCourseLogHelper.syncActivity(AddonModForumProvider.COMPONENT, forumId, siteId));\n          // Get offline responses to be sent.\n          const discussions = yield CoreUtils.ignoreErrors(AddonModForumOffline.getNewDiscussions(forumId, siteId, userId), []);\n          if (discussions.length !== 0 && !CoreNetwork.isOnline()) {\n            throw new Error('cannot sync in offline');\n          }\n          const promises = discussions.map( /*#__PURE__*/function () {\n            var _ref6 = _asyncToGenerator(function* (discussion) {\n              const errors = [];\n              const groupIds = discussion.groupid === AddonModForumProvider.ALL_GROUPS ? yield AddonModForum.instance.getForumById(discussion.courseid, discussion.forumid, {\n                siteId\n              }).then(forum => CoreGroups.getActivityAllowedGroups(forum.cmid)).then(result => result.groups.map(group => group.id)) : [discussion.groupid];\n              yield Promise.all(groupIds.map( /*#__PURE__*/function () {\n                var _ref7 = _asyncToGenerator(function* (groupId) {\n                  try {\n                    // First of all upload the attachments (if any).\n                    const itemId = yield _this4.uploadAttachments(forumId, discussion, true, siteId, userId);\n                    // Now try to add the discussion.\n                    const options = CoreUtils.clone(discussion.options || {});\n                    options.attachmentsid = itemId;\n                    yield AddonModForum.addNewDiscussionOnline(forumId, discussion.subject, discussion.message, options, groupId, siteId);\n                  } catch (error) {\n                    errors.push(error);\n                  }\n                });\n                return function (_x6) {\n                  return _ref7.apply(this, arguments);\n                };\n              }()));\n              if (errors.length === groupIds.length) {\n                // All requests have failed, reject if errors were not returned by WS.\n                for (const error of errors) {\n                  if (!CoreUtils.isWebServiceError(error)) {\n                    throw error;\n                  }\n                }\n              }\n              // All requests succeeded, some failed or all failed with a WS error.\n              result.updated = true;\n              yield _this4.deleteNewDiscussion(forumId, discussion.timecreated, siteId, userId);\n              if (errors.length === groupIds.length) {\n                // All requests failed with WS error.\n                _this4.addOfflineDataDeletedWarning(result.warnings, discussion.name, errors[0]);\n              }\n            });\n            return function (_x5) {\n              return _ref6.apply(this, arguments);\n            };\n          }());\n          yield Promise.all(promises);\n          if (result.updated) {\n            // Data has been sent to server. Now invalidate the WS calls.\n            const promises = [AddonModForum.invalidateDiscussionsList(forumId, siteId), AddonModForum.invalidateCanAddDiscussion(forumId, siteId)];\n            yield CoreUtils.ignoreErrors(Promise.all(promises));\n          }\n          // Sync finished, set sync time.\n          yield CoreUtils.ignoreErrors(_this4.setSyncTime(syncId, siteId));\n          return result;\n        });\n        return function syncDiscussions() {\n          return _ref5.apply(this, arguments);\n        };\n      }();\n      return _this4.addOngoingSync(syncId, syncDiscussions(), siteId);\n    })();\n  }\n  /**\n   * Synchronize forum offline ratings.\n   *\n   * @param cmId Course module to be synced. If not defined, sync all forums.\n   * @param discussionId Discussion id to be synced. If not defined, sync all discussions.\n   * @param force Wether to force sync not depending on last execution.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  syncRatings(cmId, discussionId, force, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const results = yield CoreRatingSync.syncRatings('mod_forum', 'post', \"module\" /* ContextLevel.MODULE */, cmId, discussionId, force, siteId);\n      let updated = false;\n      const warnings = [];\n      const promises = [];\n      results.forEach(result => {\n        if (result.updated.length) {\n          updated = true;\n          // Invalidate discussions of updated ratings.\n          promises.push(AddonModForum.invalidateDiscussionPosts(result.itemSet.itemSetId, undefined, siteId));\n        }\n        if (result.warnings.length) {\n          // Fetch forum to construct the warning message.\n          promises.push(AddonModForum.getForum(result.itemSet.courseId, result.itemSet.instanceId, {\n            siteId\n          }).then(forum => {\n            result.warnings.forEach(warning => {\n              _this5.addOfflineDataDeletedWarning(warnings, forum.name, warning);\n            });\n            return;\n          }));\n        }\n      });\n      yield CoreUtils.allPromises(promises);\n      return {\n        updated,\n        warnings\n      };\n    })();\n  }\n  /**\n   * Synchronize all offline discussion replies of a forum.\n   *\n   * @param forumId Forum ID to be synced.\n   * @param userId User the discussions belong to.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  syncForumReplies(forumId, userId, siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // Get offline forum replies to be sent.\n      const replies = yield CoreUtils.ignoreErrors(AddonModForumOffline.getForumReplies(forumId, siteId, userId), []);\n      if (!replies.length) {\n        // Nothing to sync.\n        return {\n          warnings: [],\n          updated: false\n        };\n      } else if (!CoreNetwork.isOnline()) {\n        // Cannot sync in offline.\n        return Promise.reject(null);\n      }\n      const promises = {};\n      // Do not sync same discussion twice.\n      replies.forEach(reply => {\n        if (promises[reply.discussionid] !== undefined) {\n          return;\n        }\n        promises[reply.discussionid] = _this6.syncDiscussionReplies(reply.discussionid, userId, siteId);\n      });\n      const results = yield Promise.all(Object.values(promises));\n      return results.reduce((a, b) => ({\n        warnings: a.warnings.concat(b.warnings),\n        updated: a.updated || b.updated\n      }), {\n        warnings: [],\n        updated: false\n      });\n    })();\n  }\n  /**\n   * Sync a forum discussion replies only if a certain time has passed since the last time.\n   *\n   * @param discussionId Discussion ID to be synced.\n   * @param userId User the posts belong to.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the forum discussion is synced or if it doesn't need to be synced.\n   */\n  syncDiscussionRepliesIfNeeded(discussionId, userId, siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const syncId = _this7.getDiscussionSyncId(discussionId, userId);\n      const needed = yield _this7.isSyncNeeded(syncId, siteId);\n      if (needed) {\n        return _this7.syncDiscussionReplies(discussionId, userId, siteId);\n      }\n    })();\n  }\n  /**\n   * Synchronize all offline replies from a discussion.\n   *\n   * @param discussionId Discussion ID to be synced.\n   * @param userId User the posts belong to.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  syncDiscussionReplies(discussionId, userId, siteId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      userId = userId || CoreSites.getCurrentSiteUserId();\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const syncId = _this8.getDiscussionSyncId(discussionId, userId);\n      const currentSyncPromise = _this8.getOngoingSync(syncId, siteId);\n      if (currentSyncPromise) {\n        // There's already a sync ongoing for this discussion, return the promise.\n        return currentSyncPromise;\n      }\n      // Verify that forum isn't blocked.\n      if (CoreSync.isBlocked(AddonModForumProvider.COMPONENT, syncId, siteId)) {\n        _this8.logger.debug('Cannot sync forum discussion ' + discussionId + ' because it is blocked.');\n        throw new Error(Translate.instant('core.errorsyncblocked', {\n          $a: _this8.componentTranslate\n        }));\n      }\n      _this8.logger.debug('Try to sync forum discussion ' + discussionId + ' for user ' + userId);\n      let forumId;\n      const result = {\n        warnings: [],\n        updated: false\n      };\n      // Get offline responses to be sent.\n      const syncReplies = /*#__PURE__*/function () {\n        var _ref8 = _asyncToGenerator(function* () {\n          const replies = yield CoreUtils.ignoreErrors(AddonModForumOffline.getDiscussionReplies(discussionId, siteId, userId), []);\n          if (replies.length !== 0 && !CoreNetwork.isOnline()) {\n            throw new Error('Cannot sync in offline');\n          }\n          const promises = replies.map( /*#__PURE__*/function () {\n            var _ref9 = _asyncToGenerator(function* (reply) {\n              forumId = reply.forumid;\n              reply.options = reply.options || {};\n              try {\n                // First of all upload the attachments (if any).\n                yield _this8.uploadAttachments(forumId, reply, false, siteId, userId).then(itemId => {\n                  // Now try to send the reply.\n                  reply.options.attachmentsid = itemId;\n                  return AddonModForum.replyPostOnline(reply.postid, reply.subject, reply.message, reply.options, siteId);\n                });\n                result.updated = true;\n                yield _this8.deleteReply(forumId, reply.postid, siteId, userId);\n              } catch (error) {\n                if (!CoreUtils.isWebServiceError(error)) {\n                  throw error;\n                }\n                // The WebService has thrown an error, this means that responses cannot be submitted. Delete them.\n                result.updated = true;\n                yield _this8.deleteReply(forumId, reply.postid, siteId, userId);\n                // Responses deleted, add a warning.\n                _this8.addOfflineDataDeletedWarning(result.warnings, reply.name, error);\n              }\n            });\n            return function (_x7) {\n              return _ref9.apply(this, arguments);\n            };\n          }());\n          yield Promise.all(promises);\n          // Data has been sent to server. Now invalidate the WS calls.\n          const invalidationPromises = [];\n          if (forumId) {\n            invalidationPromises.push(AddonModForum.invalidateDiscussionsList(forumId, siteId));\n          }\n          invalidationPromises.push(AddonModForum.invalidateDiscussionPosts(discussionId, forumId, siteId));\n          yield CoreUtils.ignoreErrors(CoreUtils.allPromises(invalidationPromises));\n          // Sync finished, set sync time.\n          yield CoreUtils.ignoreErrors(_this8.setSyncTime(syncId, siteId));\n          // All done, return the warnings.\n          return result;\n        });\n        return function syncReplies() {\n          return _ref8.apply(this, arguments);\n        };\n      }();\n      return _this8.addOngoingSync(syncId, syncReplies(), siteId);\n    })();\n  }\n  /**\n   * Delete a new discussion.\n   *\n   * @param forumId Forum ID the discussion belongs to.\n   * @param timecreated The timecreated of the discussion.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the discussion belongs to. If not defined, current user in site.\n   * @returns Promise resolved when deleted.\n   */\n  deleteNewDiscussion(forumId, timecreated, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      yield Promise.all([AddonModForumOffline.deleteNewDiscussion(forumId, timecreated, siteId, userId), CoreUtils.ignoreErrors(AddonModForumHelper.deleteNewDiscussionStoredFiles(forumId, timecreated, siteId))]);\n    })();\n  }\n  /**\n   * Delete a new discussion.\n   *\n   * @param forumId Forum ID the discussion belongs to.\n   * @param postId ID of the post being replied.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the discussion belongs to. If not defined, current user in site.\n   * @returns Promise resolved when deleted.\n   */\n  deleteReply(forumId, postId, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      yield Promise.all([AddonModForumOffline.deleteReply(postId, siteId, userId), CoreUtils.ignoreErrors(AddonModForumHelper.deleteReplyStoredFiles(forumId, postId, siteId, userId))]);\n    })();\n  }\n  /**\n   * Upload attachments of an offline post/discussion.\n   *\n   * @param forumId Forum ID the post belongs to.\n   * @param post Offline post or discussion.\n   * @param isDiscussion True if it's a new discussion, false if it's a reply.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the reply belongs to. If not defined, current user in site.\n   * @returns Promise resolved with draftid if uploaded, resolved with undefined if nothing to upload.\n   */\n  uploadAttachments(forumId, post, isDiscussion, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      const attachments = post && post.options && post.options.attachmentsid;\n      if (!attachments) {\n        return;\n      }\n      // Has some attachments to sync.\n      let files = typeof attachments === 'object' && attachments.online ? attachments.online : [];\n      if (typeof attachments === 'object' && attachments.offline) {\n        // Has offline files.\n        try {\n          const postAttachments = isDiscussion ? yield AddonModForumHelper.getNewDiscussionStoredFiles(forumId, post.timecreated, siteId) : yield AddonModForumHelper.getReplyStoredFiles(forumId, post.postid, siteId, userId);\n          files = files.concat(postAttachments);\n        } catch (error) {\n          // Folder not found, no files to add.\n        }\n      }\n      return CoreFileUploader.uploadOrReuploadFiles(files, AddonModForumProvider.COMPONENT, forumId, siteId);\n    })();\n  }\n  /**\n   * Get the ID of a forum sync.\n   *\n   * @param forumId Forum ID.\n   * @param userId User the responses belong to.. If not defined, current user.\n   * @returns Sync ID.\n   */\n  getForumSyncId(forumId, userId) {\n    userId = userId || CoreSites.getCurrentSiteUserId();\n    return 'forum#' + forumId + '#' + userId;\n  }\n  /**\n   * Get the ID of a discussion sync.\n   *\n   * @param discussionId Discussion ID.\n   * @param userId User the responses belong to.. If not defined, current user.\n   * @returns Sync ID.\n   */\n  getDiscussionSyncId(discussionId, userId) {\n    userId = userId || CoreSites.getCurrentSiteUserId();\n    return 'discussion#' + discussionId + '#' + userId;\n  }\n}\n_class = AddonModForumSyncProvider;\n_class.AUTO_SYNCED = 'addon_mod_forum_autom_synced';\n_class.MANUAL_SYNCED = 'addon_mod_forum_manual_synced';\n_class.ɵfac = function AddonModForumSyncProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModForumSync = makeSingleton(AddonModForumSyncProvider);","map":{"version":3,"names":["CoreCourseActivitySyncBaseProvider","CoreCourseLogHelper","CoreFileUploader","CoreRatingSync","CoreNetwork","CoreGroups","CoreSites","CoreSync","CoreUtils","makeSingleton","Translate","CoreEvents","AddonModForum","AddonModForumProvider","AddonModForumHelper","AddonModForumOffline","AddonModForumSyncProvider","constructor","componentTranslatableString","syncAllForums","siteId","force","_this","_asyncToGenerator","syncOnSites","syncAllForumsFunc","_this2","sitePromises","syncDiscussions","_ref","discussions","syncedForumIds","promises","map","_ref2","discussion","includes","forumid","push","result","syncForumDiscussions","userid","syncForumDiscussionsIfNeeded","updated","trigger","AUTO_SYNCED","forumId","userId","warnings","_x2","apply","arguments","Promise","all","Object","values","_x","instance","getAllNewDiscussions","then","syncReplies","_ref3","replies","syncedDiscussionIds","_ref4","reply","discussionid","syncDiscussionReplies","syncDiscussionRepliesIfNeeded","discussionId","_x4","_x3","getAllReplies","syncRatings","undefined","_this3","getCurrentSiteId","syncId","getForumSyncId","needed","isSyncNeeded","_this4","getCurrentSiteUserId","currentSyncPromise","getOngoingSync","isBlocked","COMPONENT","logger","debug","Error","instant","$a","componentTranslate","_ref5","ignoreErrors","syncActivity","getNewDiscussions","length","isOnline","_ref6","errors","groupIds","groupid","ALL_GROUPS","getForumById","courseid","forum","getActivityAllowedGroups","cmid","groups","group","id","_ref7","groupId","itemId","uploadAttachments","options","clone","attachmentsid","addNewDiscussionOnline","subject","message","error","_x6","isWebServiceError","deleteNewDiscussion","timecreated","addOfflineDataDeletedWarning","name","_x5","invalidateDiscussionsList","invalidateCanAddDiscussion","setSyncTime","addOngoingSync","cmId","_this5","results","forEach","invalidateDiscussionPosts","itemSet","itemSetId","getForum","courseId","instanceId","warning","allPromises","syncForumReplies","_this6","getForumReplies","reject","reduce","a","b","concat","_this7","getDiscussionSyncId","_this8","_ref8","getDiscussionReplies","_ref9","replyPostOnline","postid","deleteReply","_x7","invalidationPromises","deleteNewDiscussionStoredFiles","postId","deleteReplyStoredFiles","post","isDiscussion","attachments","files","online","offline","postAttachments","getNewDiscussionStoredFiles","getReplyStoredFiles","uploadOrReuploadFiles","_class","MANUAL_SYNCED","factory","ɵfac","providedIn","AddonModForumSync"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/forum/services/forum-sync.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ContextLevel } from '@/core/constants';\nimport { Injectable } from '@angular/core';\nimport { CoreCourseActivitySyncBaseProvider } from '@features/course/classes/activity-sync';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreRatingSync } from '@features/rating/services/rating-sync';\nimport { CoreNetwork } from '@services/network';\nimport { CoreGroups } from '@services/groups';\nimport { CoreSites } from '@services/sites';\nimport { CoreSync, CoreSyncResult } from '@services/sync';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport {\n    AddonModForum,\n    AddonModForumAddDiscussionPostWSOptionsObject,\n    AddonModForumAddDiscussionWSOptionsObject,\n    AddonModForumProvider,\n} from './forum';\nimport { AddonModForumHelper } from './forum-helper';\nimport { AddonModForumOffline, AddonModForumOfflineDiscussion, AddonModForumOfflineReply } from './forum-offline';\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [AddonModForumSyncProvider.AUTO_SYNCED]: AddonModForumAutoSyncData;\n        [AddonModForumSyncProvider.MANUAL_SYNCED]: AddonModForumManualSyncData;\n    }\n\n}\n\n/**\n * Service to sync forums.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModForumSyncProvider extends CoreCourseActivitySyncBaseProvider<AddonModForumSyncResult> {\n\n    static readonly AUTO_SYNCED = 'addon_mod_forum_autom_synced';\n    static readonly MANUAL_SYNCED = 'addon_mod_forum_manual_synced';\n\n    protected componentTranslatableString = 'forum';\n\n    constructor() {\n        super('AddonModForumSyncProvider');\n    }\n\n    /**\n     * Try to synchronize all the forums in a certain site or in all sites.\n     *\n     * @param siteId Site ID to sync. If not defined, sync all sites.\n     * @param force Wether to force sync not depending on last execution.\n     * @returns Promise resolved if sync is successful, rejected if sync fails.\n     */\n    async syncAllForums(siteId?: string, force?: boolean): Promise<void> {\n        await this.syncOnSites('all forums', (siteId) => this.syncAllForumsFunc(!!force, siteId), siteId);\n    }\n\n    /**\n     * Sync all forums on a site.\n     *\n     * @param force Wether to force sync not depending on last execution.\n     * @param siteId Site ID to sync.\n     * @returns Promise resolved if sync is successful, rejected if sync fails.\n     */\n    protected async syncAllForumsFunc(force: boolean, siteId: string): Promise<void> {\n        const sitePromises: Promise<unknown>[] = [];\n\n        // Sync all new discussions.\n        const syncDiscussions = async (discussions: AddonModForumOfflineDiscussion[]) => {\n            // Do not sync same forum twice.\n            const syncedForumIds: number[] = [];\n            const promises = discussions.map(async discussion => {\n                if (syncedForumIds.includes(discussion.forumid)) {\n                    return;\n                }\n\n                syncedForumIds.push(discussion.forumid);\n                const result = force\n                    ? await this.syncForumDiscussions(discussion.forumid, discussion.userid, siteId)\n                    : await this.syncForumDiscussionsIfNeeded(discussion.forumid, discussion.userid, siteId);\n\n                if (result && result.updated) {\n                    // Sync successful, send event.\n                    CoreEvents.trigger(AddonModForumSyncProvider.AUTO_SYNCED, {\n                        forumId: discussion.forumid,\n                        userId: discussion.userid,\n                        warnings: result.warnings,\n                    }, siteId);\n                }\n            });\n\n            await Promise.all(Object.values(promises));\n        };\n\n        sitePromises.push(\n            AddonModForumOffline.instance\n                .getAllNewDiscussions(siteId)\n                .then(discussions => syncDiscussions(discussions)),\n        );\n\n        // Sync all discussion replies.\n        const syncReplies = async (replies: AddonModForumOfflineReply[]) => {\n            // Do not sync same discussion twice.\n            const syncedDiscussionIds: number[] = [];\n            const promises = replies.map(async reply => {\n                if (syncedDiscussionIds.includes(reply.discussionid)) {\n                    return;\n                }\n\n                syncedDiscussionIds.push(reply.discussionid);\n\n                const result = force\n                    ? await this.syncDiscussionReplies(reply.discussionid, reply.userid, siteId)\n                    : await this.syncDiscussionRepliesIfNeeded(reply.discussionid, reply.userid, siteId);\n\n                if (result && result.updated) {\n                    // Sync successful, send event.\n                    CoreEvents.trigger(AddonModForumSyncProvider.AUTO_SYNCED, {\n                        forumId: reply.forumid,\n                        discussionId: reply.discussionid,\n                        userId: reply.userid,\n                        warnings: result.warnings,\n                    }, siteId);\n                }\n            });\n\n            await Promise.all(promises);\n        };\n\n        sitePromises.push(\n            AddonModForumOffline.instance\n                .getAllReplies(siteId)\n                .then(replies => syncReplies(replies)),\n        );\n\n        // Sync ratings.\n        sitePromises.push(this.syncRatings(undefined, undefined, force, siteId));\n\n        await Promise.all(sitePromises);\n    }\n\n    /**\n     * Sync a forum only if a certain time has passed since the last time.\n     *\n     * @param forumId Forum ID.\n     * @param userId User the discussion belong to.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the forum is synced or if it doesn't need to be synced.\n     */\n    async syncForumDiscussionsIfNeeded(\n        forumId: number,\n        userId: number,\n        siteId?: string,\n    ): Promise<AddonModForumSyncResult | void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const syncId = this.getForumSyncId(forumId, userId);\n\n        const needed = await this.isSyncNeeded(syncId, siteId);\n\n        if (needed) {\n            return this.syncForumDiscussions(forumId, userId, siteId);\n        }\n    }\n\n    /**\n     * Synchronize all offline discussions of a forum.\n     *\n     * @param forumId Forum ID to be synced.\n     * @param userId User the discussions belong to.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    async syncForumDiscussions(\n        forumId: number,\n        userId?: number,\n        siteId?: string,\n    ): Promise<AddonModForumSyncResult> {\n        userId = userId || CoreSites.getCurrentSiteUserId();\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const syncId = this.getForumSyncId(forumId, userId);\n        const currentSyncPromise = this.getOngoingSync(syncId, siteId);\n\n        if (currentSyncPromise) {\n            // There's already a sync ongoing for this discussion, return the promise.\n            return currentSyncPromise;\n        }\n\n        // Verify that forum isn't blocked.\n        if (CoreSync.isBlocked(AddonModForumProvider.COMPONENT, syncId, siteId)) {\n            this.logger.debug('Cannot sync forum ' + forumId + ' because it is blocked.');\n\n            throw new Error(Translate.instant('core.errorsyncblocked', { $a: this.componentTranslate }));\n        }\n\n        this.logger.debug('Try to sync forum ' + forumId + ' for user ' + userId);\n\n        const result: AddonModForumSyncResult = {\n            warnings: [],\n            updated: false,\n        };\n\n        // Sync offline logs.\n        const syncDiscussions = async (): Promise<AddonModForumSyncResult> => {\n            await CoreUtils.ignoreErrors(\n                CoreCourseLogHelper.syncActivity(AddonModForumProvider.COMPONENT, forumId, siteId),\n            );\n\n            // Get offline responses to be sent.\n            const discussions = await CoreUtils.ignoreErrors(\n                AddonModForumOffline.getNewDiscussions(forumId, siteId, userId),\n                [] as AddonModForumOfflineDiscussion[],\n            );\n\n            if (discussions.length !== 0 && !CoreNetwork.isOnline()) {\n                throw new Error('cannot sync in offline');\n            }\n\n            const promises = discussions.map(async discussion => {\n                const errors: Error[] = [];\n                const groupIds = discussion.groupid === AddonModForumProvider.ALL_GROUPS\n                    ? await AddonModForum.instance\n                        .getForumById(discussion.courseid, discussion.forumid, { siteId })\n                        .then(forum => CoreGroups.getActivityAllowedGroups(forum.cmid))\n                        .then(result => result.groups.map((group) => group.id))\n                    : [discussion.groupid];\n\n                await Promise.all(groupIds.map(async groupId => {\n                    try {\n                        // First of all upload the attachments (if any).\n                        const itemId = await this.uploadAttachments(forumId, discussion, true, siteId, userId);\n\n                        // Now try to add the discussion.\n                        const options = CoreUtils.clone(discussion.options || {});\n                        options.attachmentsid = itemId!;\n\n                        await AddonModForum.addNewDiscussionOnline(\n                            forumId,\n                            discussion.subject,\n                            discussion.message,\n                            options as unknown as AddonModForumAddDiscussionWSOptionsObject,\n                            groupId,\n                            siteId,\n                        );\n                    } catch (error) {\n                        errors.push(error);\n                    }\n                }));\n\n                if (errors.length === groupIds.length) {\n                    // All requests have failed, reject if errors were not returned by WS.\n                    for (const error of errors) {\n                        if (!CoreUtils.isWebServiceError(error)) {\n                            throw error;\n                        }\n                    }\n                }\n\n                // All requests succeeded, some failed or all failed with a WS error.\n                result.updated = true;\n\n                await this.deleteNewDiscussion(forumId, discussion.timecreated, siteId, userId);\n\n                if (errors.length === groupIds.length) {\n                    // All requests failed with WS error.\n                    this.addOfflineDataDeletedWarning(result.warnings, discussion.name, errors[0]);\n                }\n            });\n\n            await Promise.all(promises);\n\n            if (result.updated) {\n                // Data has been sent to server. Now invalidate the WS calls.\n                const promises = [\n                    AddonModForum.invalidateDiscussionsList(forumId, siteId),\n                    AddonModForum.invalidateCanAddDiscussion(forumId, siteId),\n                ];\n\n                await CoreUtils.ignoreErrors(Promise.all(promises));\n            }\n\n            // Sync finished, set sync time.\n            await CoreUtils.ignoreErrors(this.setSyncTime(syncId, siteId));\n\n            return result;\n        };\n\n        return this.addOngoingSync(syncId, syncDiscussions(), siteId);\n    }\n\n    /**\n     * Synchronize forum offline ratings.\n     *\n     * @param cmId Course module to be synced. If not defined, sync all forums.\n     * @param discussionId Discussion id to be synced. If not defined, sync all discussions.\n     * @param force Wether to force sync not depending on last execution.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    async syncRatings(cmId?: number, discussionId?: number, force?: boolean, siteId?: string): Promise<AddonModForumSyncResult> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const results =\n            await CoreRatingSync.syncRatings('mod_forum', 'post', ContextLevel.MODULE, cmId, discussionId, force, siteId);\n\n        let updated = false;\n        const warnings: string[] = [];\n        const promises: Promise<void>[] = [];\n\n        results.forEach((result) => {\n            if (result.updated.length) {\n                updated = true;\n\n                // Invalidate discussions of updated ratings.\n                promises.push(AddonModForum.invalidateDiscussionPosts(result.itemSet.itemSetId, undefined, siteId));\n            }\n\n            if (result.warnings.length) {\n                // Fetch forum to construct the warning message.\n                promises.push(AddonModForum.getForum(result.itemSet.courseId, result.itemSet.instanceId, { siteId })\n                    .then((forum) => {\n                        result.warnings.forEach((warning) => {\n                            this.addOfflineDataDeletedWarning(warnings, forum.name, warning);\n                        });\n\n                        return;\n                    }));\n            }\n        });\n\n        await CoreUtils.allPromises(promises);\n\n        return { updated, warnings };\n    }\n\n    /**\n     * Synchronize all offline discussion replies of a forum.\n     *\n     * @param forumId Forum ID to be synced.\n     * @param userId User the discussions belong to.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    async syncForumReplies(forumId: number, userId?: number, siteId?: string): Promise<AddonModForumSyncResult> {\n        // Get offline forum replies to be sent.\n        const replies = await CoreUtils.ignoreErrors(\n            AddonModForumOffline.getForumReplies(forumId, siteId, userId),\n            [] as AddonModForumOfflineReply[],\n        );\n\n        if (!replies.length) {\n            // Nothing to sync.\n            return { warnings: [], updated: false };\n        } else if (!CoreNetwork.isOnline()) {\n            // Cannot sync in offline.\n            return Promise.reject(null);\n        }\n\n        const promises: Record<string, Promise<AddonModForumSyncResult>> = {};\n\n        // Do not sync same discussion twice.\n        replies.forEach((reply) => {\n            if (promises[reply.discussionid] !== undefined) {\n                return;\n            }\n            promises[reply.discussionid] = this.syncDiscussionReplies(reply.discussionid, userId, siteId);\n        });\n\n        const results = await Promise.all(Object.values(promises));\n\n        return results.reduce((a, b) => ({\n            warnings: a.warnings.concat(b.warnings),\n            updated: a.updated || b.updated,\n        }), { warnings: [], updated: false } as AddonModForumSyncResult);\n    }\n\n    /**\n     * Sync a forum discussion replies only if a certain time has passed since the last time.\n     *\n     * @param discussionId Discussion ID to be synced.\n     * @param userId User the posts belong to.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the forum discussion is synced or if it doesn't need to be synced.\n     */\n    async syncDiscussionRepliesIfNeeded(\n        discussionId: number,\n        userId?: number,\n        siteId?: string,\n    ): Promise<AddonModForumSyncResult | void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const syncId = this.getDiscussionSyncId(discussionId, userId);\n\n        const needed = await this.isSyncNeeded(syncId, siteId);\n\n        if (needed) {\n            return this.syncDiscussionReplies(discussionId, userId, siteId);\n        }\n    }\n\n    /**\n     * Synchronize all offline replies from a discussion.\n     *\n     * @param discussionId Discussion ID to be synced.\n     * @param userId User the posts belong to.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    async syncDiscussionReplies(discussionId: number, userId?: number, siteId?: string): Promise<AddonModForumSyncResult> {\n        userId = userId || CoreSites.getCurrentSiteUserId();\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const syncId = this.getDiscussionSyncId(discussionId, userId);\n        const currentSyncPromise = this.getOngoingSync(syncId, siteId);\n\n        if (currentSyncPromise) {\n            // There's already a sync ongoing for this discussion, return the promise.\n            return currentSyncPromise;\n        }\n\n        // Verify that forum isn't blocked.\n        if (CoreSync.isBlocked(AddonModForumProvider.COMPONENT, syncId, siteId)) {\n            this.logger.debug('Cannot sync forum discussion ' + discussionId + ' because it is blocked.');\n\n            throw new Error(Translate.instant('core.errorsyncblocked', { $a: this.componentTranslate }));\n        }\n\n        this.logger.debug('Try to sync forum discussion ' + discussionId + ' for user ' + userId);\n\n        let forumId;\n        const result: AddonModForumSyncResult = {\n            warnings: [],\n            updated: false,\n        };\n\n        // Get offline responses to be sent.\n        const syncReplies = async () => {\n            const replies = await CoreUtils.ignoreErrors(\n                AddonModForumOffline.getDiscussionReplies(discussionId, siteId, userId),\n                [] as AddonModForumOfflineReply[],\n            );\n\n            if (replies.length !== 0 && !CoreNetwork.isOnline()) {\n                throw new Error('Cannot sync in offline');\n            }\n\n            const promises = replies.map(async reply => {\n                forumId = reply.forumid;\n                reply.options = reply.options || {};\n\n                try {\n                    // First of all upload the attachments (if any).\n                    await this.uploadAttachments(forumId, reply, false, siteId, userId).then((itemId) => {\n                        // Now try to send the reply.\n                        reply.options.attachmentsid = itemId;\n\n                        return AddonModForum.replyPostOnline(\n                            reply.postid,\n                            reply.subject,\n                            reply.message,\n                            reply.options as unknown as AddonModForumAddDiscussionPostWSOptionsObject,\n                            siteId,\n                        );\n                    });\n\n                    result.updated = true;\n\n                    await this.deleteReply(forumId, reply.postid, siteId, userId);\n                } catch (error) {\n                    if (!CoreUtils.isWebServiceError(error)) {\n                        throw error;\n                    }\n\n                    // The WebService has thrown an error, this means that responses cannot be submitted. Delete them.\n                    result.updated = true;\n\n                    await this.deleteReply(forumId, reply.postid, siteId, userId);\n\n                    // Responses deleted, add a warning.\n                    this.addOfflineDataDeletedWarning(result.warnings, reply.name, error);\n\n                }\n            });\n\n            await Promise.all(promises);\n\n            // Data has been sent to server. Now invalidate the WS calls.\n            const invalidationPromises: Promise<void>[] = [];\n\n            if (forumId) {\n                invalidationPromises.push(AddonModForum.invalidateDiscussionsList(forumId, siteId));\n            }\n\n            invalidationPromises.push(AddonModForum.invalidateDiscussionPosts(discussionId, forumId, siteId));\n\n            await CoreUtils.ignoreErrors(CoreUtils.allPromises(invalidationPromises));\n\n            // Sync finished, set sync time.\n            await CoreUtils.ignoreErrors(this.setSyncTime(syncId, siteId));\n\n            // All done, return the warnings.\n            return result;\n        };\n\n        return this.addOngoingSync(syncId, syncReplies(), siteId);\n    }\n\n    /**\n     * Delete a new discussion.\n     *\n     * @param forumId Forum ID the discussion belongs to.\n     * @param timecreated The timecreated of the discussion.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the discussion belongs to. If not defined, current user in site.\n     * @returns Promise resolved when deleted.\n     */\n    protected async deleteNewDiscussion(forumId: number, timecreated: number, siteId?: string, userId?: number): Promise<void> {\n        await Promise.all([\n            AddonModForumOffline.deleteNewDiscussion(forumId, timecreated, siteId, userId),\n            CoreUtils.ignoreErrors(\n                AddonModForumHelper.deleteNewDiscussionStoredFiles(forumId, timecreated, siteId),\n            ),\n        ]);\n    }\n\n    /**\n     * Delete a new discussion.\n     *\n     * @param forumId Forum ID the discussion belongs to.\n     * @param postId ID of the post being replied.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the discussion belongs to. If not defined, current user in site.\n     * @returns Promise resolved when deleted.\n     */\n    protected async deleteReply(forumId: number, postId: number, siteId?: string, userId?: number): Promise<void> {\n        await Promise.all([\n            AddonModForumOffline.deleteReply(postId, siteId, userId),\n            CoreUtils.ignoreErrors(AddonModForumHelper.deleteReplyStoredFiles(forumId, postId, siteId, userId)),\n        ]);\n    }\n\n    /**\n     * Upload attachments of an offline post/discussion.\n     *\n     * @param forumId Forum ID the post belongs to.\n     * @param post Offline post or discussion.\n     * @param isDiscussion True if it's a new discussion, false if it's a reply.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the reply belongs to. If not defined, current user in site.\n     * @returns Promise resolved with draftid if uploaded, resolved with undefined if nothing to upload.\n     */\n    protected async uploadAttachments(\n        forumId: number,\n        post: AddonModForumOfflineDiscussion | AddonModForumOfflineReply,\n        isDiscussion: boolean,\n        siteId?: string,\n        userId?: number,\n    ): Promise<number | undefined> {\n        const attachments = post && post.options && post.options.attachmentsid;\n\n        if (!attachments) {\n            return;\n        }\n\n        // Has some attachments to sync.\n        let files = typeof attachments === 'object' && attachments.online ? attachments.online : [];\n\n        if (typeof attachments === 'object' && attachments.offline) {\n            // Has offline files.\n            try {\n                const postAttachments = isDiscussion\n                    ? await AddonModForumHelper.getNewDiscussionStoredFiles(\n                        forumId,\n                        (post as AddonModForumOfflineDiscussion).timecreated,\n                        siteId,\n                    )\n                    : await AddonModForumHelper.getReplyStoredFiles(\n                        forumId,\n                        (post as AddonModForumOfflineReply).postid,\n                        siteId,\n                        userId,\n                    );\n\n                files = files.concat(postAttachments as unknown as []);\n            } catch (error) {\n                // Folder not found, no files to add.\n            }\n        }\n\n        return CoreFileUploader.uploadOrReuploadFiles(files, AddonModForumProvider.COMPONENT, forumId, siteId);\n    }\n\n    /**\n     * Get the ID of a forum sync.\n     *\n     * @param forumId Forum ID.\n     * @param userId User the responses belong to.. If not defined, current user.\n     * @returns Sync ID.\n     */\n    getForumSyncId(forumId: number, userId?: number): string {\n        userId = userId || CoreSites.getCurrentSiteUserId();\n\n        return 'forum#' + forumId + '#' + userId;\n    }\n\n    /**\n     * Get the ID of a discussion sync.\n     *\n     * @param discussionId Discussion ID.\n     * @param userId User the responses belong to.. If not defined, current user.\n     * @returns Sync ID.\n     */\n    getDiscussionSyncId(discussionId: number, userId?: number): string {\n        userId = userId || CoreSites.getCurrentSiteUserId();\n\n        return 'discussion#' + discussionId + '#' + userId;\n    }\n\n}\n\nexport const AddonModForumSync = makeSingleton(AddonModForumSyncProvider);\n\n/**\n * Result of forum sync.\n */\nexport type AddonModForumSyncResult = CoreSyncResult;\n\n/**\n * Data passed to AUTO_SYNCED event.\n */\nexport type AddonModForumAutoSyncData = {\n    forumId: number;\n    userId: number;\n    warnings: string[];\n    discussionId?: number;\n};\n\n/**\n * Data passed to MANUAL_SYNCED event.\n */\nexport type AddonModForumManualSyncData = {\n    forumId: number;\n    userId: number;\n    source: string;\n    discussionId?: number;\n};\n"],"mappings":";;AAgBA,SAASA,kCAAkC,QAAQ,wCAAwC;AAC3F,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,SAASC,gBAAgB,QAAQ,8CAA8C;AAC/E,SAASC,cAAc,QAAQ,uCAAuC;AACtE,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,QAAQ,QAAwB,gBAAgB;AACzD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,EAAEC,SAAS,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SACIC,aAAa,EAGbC,qBAAqB,QAClB,SAAS;AAChB,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,SAASC,oBAAoB,QAAmE,iBAAiB;;AAgBjH;;;AAIA,OAAM,MAAOC,yBAA0B,SAAQhB,kCAA2D;EAOtGiB,YAAA;IACI,KAAK,CAAC,2BAA2B,CAAC;IAH5B,KAAAC,2BAA2B,GAAG,OAAO;EAI/C;EAEA;;;;;;;EAOMC,aAAaA,CAACC,MAAe,EAAEC,KAAe;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAChD,MAAMD,KAAI,CAACE,WAAW,CAAC,YAAY,EAAGJ,MAAM,IAAKE,KAAI,CAACG,iBAAiB,CAAC,CAAC,CAACJ,KAAK,EAAED,MAAM,CAAC,EAAEA,MAAM,CAAC;IAAC;EACtG;EAEA;;;;;;;EAOgBK,iBAAiBA,CAACJ,KAAc,EAAED,MAAc;IAAA,IAAAM,MAAA;IAAA,OAAAH,iBAAA;MAC5D,MAAMI,YAAY,GAAuB,EAAE;MAE3C;MACA,MAAMC,eAAe;QAAA,IAAAC,IAAA,GAAAN,iBAAA,CAAG,WAAOO,WAA6C,EAAI;UAC5E;UACA,MAAMC,cAAc,GAAa,EAAE;UACnC,MAAMC,QAAQ,GAAGF,WAAW,CAACG,GAAG;YAAA,IAAAC,KAAA,GAAAX,iBAAA,CAAC,WAAMY,UAAU,EAAG;cAChD,IAAIJ,cAAc,CAACK,QAAQ,CAACD,UAAU,CAACE,OAAO,CAAC,EAAE;gBAC7C;;cAGJN,cAAc,CAACO,IAAI,CAACH,UAAU,CAACE,OAAO,CAAC;cACvC,MAAME,MAAM,GAAGlB,KAAK,SACRK,MAAI,CAACc,oBAAoB,CAACL,UAAU,CAACE,OAAO,EAAEF,UAAU,CAACM,MAAM,EAAErB,MAAM,CAAC,SACxEM,MAAI,CAACgB,4BAA4B,CAACP,UAAU,CAACE,OAAO,EAAEF,UAAU,CAACM,MAAM,EAAErB,MAAM,CAAC;cAE5F,IAAImB,MAAM,IAAIA,MAAM,CAACI,OAAO,EAAE;gBAC1B;gBACAhC,UAAU,CAACiC,OAAO,CAAC5B,yBAAyB,CAAC6B,WAAW,EAAE;kBACtDC,OAAO,EAAEX,UAAU,CAACE,OAAO;kBAC3BU,MAAM,EAAEZ,UAAU,CAACM,MAAM;kBACzBO,QAAQ,EAAET,MAAM,CAACS;iBACpB,EAAE5B,MAAM,CAAC;;YAElB,CAAC;YAAA,iBAAA6B,GAAA;cAAA,OAAAf,KAAA,CAAAgB,KAAA,OAAAC,SAAA;YAAA;UAAA,IAAC;UAEF,MAAMC,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,MAAM,CAACvB,QAAQ,CAAC,CAAC;QAC9C,CAAC;QAAA,gBAxBKJ,eAAeA,CAAA4B,EAAA;UAAA,OAAA3B,IAAA,CAAAqB,KAAA,OAAAC,SAAA;QAAA;MAAA,GAwBpB;MAEDxB,YAAY,CAACW,IAAI,CACbvB,oBAAoB,CAAC0C,QAAQ,CACxBC,oBAAoB,CAACtC,MAAM,CAAC,CAC5BuC,IAAI,CAAC7B,WAAW,IAAIF,eAAe,CAACE,WAAW,CAAC,CAAC,CACzD;MAED;MACA,MAAM8B,WAAW;QAAA,IAAAC,KAAA,GAAAtC,iBAAA,CAAG,WAAOuC,OAAoC,EAAI;UAC/D;UACA,MAAMC,mBAAmB,GAAa,EAAE;UACxC,MAAM/B,QAAQ,GAAG8B,OAAO,CAAC7B,GAAG;YAAA,IAAA+B,KAAA,GAAAzC,iBAAA,CAAC,WAAM0C,KAAK,EAAG;cACvC,IAAIF,mBAAmB,CAAC3B,QAAQ,CAAC6B,KAAK,CAACC,YAAY,CAAC,EAAE;gBAClD;;cAGJH,mBAAmB,CAACzB,IAAI,CAAC2B,KAAK,CAACC,YAAY,CAAC;cAE5C,MAAM3B,MAAM,GAAGlB,KAAK,SACRK,MAAI,CAACyC,qBAAqB,CAACF,KAAK,CAACC,YAAY,EAAED,KAAK,CAACxB,MAAM,EAAErB,MAAM,CAAC,SACpEM,MAAI,CAAC0C,6BAA6B,CAACH,KAAK,CAACC,YAAY,EAAED,KAAK,CAACxB,MAAM,EAAErB,MAAM,CAAC;cAExF,IAAImB,MAAM,IAAIA,MAAM,CAACI,OAAO,EAAE;gBAC1B;gBACAhC,UAAU,CAACiC,OAAO,CAAC5B,yBAAyB,CAAC6B,WAAW,EAAE;kBACtDC,OAAO,EAAEmB,KAAK,CAAC5B,OAAO;kBACtBgC,YAAY,EAAEJ,KAAK,CAACC,YAAY;kBAChCnB,MAAM,EAAEkB,KAAK,CAACxB,MAAM;kBACpBO,QAAQ,EAAET,MAAM,CAACS;iBACpB,EAAE5B,MAAM,CAAC;;YAElB,CAAC;YAAA,iBAAAkD,GAAA;cAAA,OAAAN,KAAA,CAAAd,KAAA,OAAAC,SAAA;YAAA;UAAA,IAAC;UAEF,MAAMC,OAAO,CAACC,GAAG,CAACrB,QAAQ,CAAC;QAC/B,CAAC;QAAA,gBA1BK4B,WAAWA,CAAAW,GAAA;UAAA,OAAAV,KAAA,CAAAX,KAAA,OAAAC,SAAA;QAAA;MAAA,GA0BhB;MAEDxB,YAAY,CAACW,IAAI,CACbvB,oBAAoB,CAAC0C,QAAQ,CACxBe,aAAa,CAACpD,MAAM,CAAC,CACrBuC,IAAI,CAACG,OAAO,IAAIF,WAAW,CAACE,OAAO,CAAC,CAAC,CAC7C;MAED;MACAnC,YAAY,CAACW,IAAI,CAACZ,MAAI,CAAC+C,WAAW,CAACC,SAAS,EAAEA,SAAS,EAAErD,KAAK,EAAED,MAAM,CAAC,CAAC;MAExE,MAAMgC,OAAO,CAACC,GAAG,CAAC1B,YAAY,CAAC;IAAC;EACpC;EAEA;;;;;;;;EAQMe,4BAA4BA,CAC9BI,OAAe,EACfC,MAAc,EACd3B,MAAe;IAAA,IAAAuD,MAAA;IAAA,OAAApD,iBAAA;MAEfH,MAAM,GAAGA,MAAM,IAAId,SAAS,CAACsE,gBAAgB,EAAE;MAE/C,MAAMC,MAAM,GAAGF,MAAI,CAACG,cAAc,CAAChC,OAAO,EAAEC,MAAM,CAAC;MAEnD,MAAMgC,MAAM,SAASJ,MAAI,CAACK,YAAY,CAACH,MAAM,EAAEzD,MAAM,CAAC;MAEtD,IAAI2D,MAAM,EAAE;QACR,OAAOJ,MAAI,CAACnC,oBAAoB,CAACM,OAAO,EAAEC,MAAM,EAAE3B,MAAM,CAAC;;IAC5D;EACL;EAEA;;;;;;;;EAQMoB,oBAAoBA,CACtBM,OAAe,EACfC,MAAe,EACf3B,MAAe;IAAA,IAAA6D,MAAA;IAAA,OAAA1D,iBAAA;MAEfwB,MAAM,GAAGA,MAAM,IAAIzC,SAAS,CAAC4E,oBAAoB,EAAE;MACnD9D,MAAM,GAAGA,MAAM,IAAId,SAAS,CAACsE,gBAAgB,EAAE;MAE/C,MAAMC,MAAM,GAAGI,MAAI,CAACH,cAAc,CAAChC,OAAO,EAAEC,MAAM,CAAC;MACnD,MAAMoC,kBAAkB,GAAGF,MAAI,CAACG,cAAc,CAACP,MAAM,EAAEzD,MAAM,CAAC;MAE9D,IAAI+D,kBAAkB,EAAE;QACpB;QACA,OAAOA,kBAAkB;;MAG7B;MACA,IAAI5E,QAAQ,CAAC8E,SAAS,CAACxE,qBAAqB,CAACyE,SAAS,EAAET,MAAM,EAAEzD,MAAM,CAAC,EAAE;QACrE6D,MAAI,CAACM,MAAM,CAACC,KAAK,CAAC,oBAAoB,GAAG1C,OAAO,GAAG,yBAAyB,CAAC;QAE7E,MAAM,IAAI2C,KAAK,CAAC/E,SAAS,CAACgF,OAAO,CAAC,uBAAuB,EAAE;UAAEC,EAAE,EAAEV,MAAI,CAACW;QAAkB,CAAE,CAAC,CAAC;;MAGhGX,MAAI,CAACM,MAAM,CAACC,KAAK,CAAC,oBAAoB,GAAG1C,OAAO,GAAG,YAAY,GAAGC,MAAM,CAAC;MAEzE,MAAMR,MAAM,GAA4B;QACpCS,QAAQ,EAAE,EAAE;QACZL,OAAO,EAAE;OACZ;MAED;MACA,MAAMf,eAAe;QAAA,IAAAiE,KAAA,GAAAtE,iBAAA,CAAG,aAA6C;UACjE,MAAMf,SAAS,CAACsF,YAAY,CACxB7F,mBAAmB,CAAC8F,YAAY,CAAClF,qBAAqB,CAACyE,SAAS,EAAExC,OAAO,EAAE1B,MAAM,CAAC,CACrF;UAED;UACA,MAAMU,WAAW,SAAStB,SAAS,CAACsF,YAAY,CAC5C/E,oBAAoB,CAACiF,iBAAiB,CAAClD,OAAO,EAAE1B,MAAM,EAAE2B,MAAM,CAAC,EAC/D,EAAsC,CACzC;UAED,IAAIjB,WAAW,CAACmE,MAAM,KAAK,CAAC,IAAI,CAAC7F,WAAW,CAAC8F,QAAQ,EAAE,EAAE;YACrD,MAAM,IAAIT,KAAK,CAAC,wBAAwB,CAAC;;UAG7C,MAAMzD,QAAQ,GAAGF,WAAW,CAACG,GAAG;YAAA,IAAAkE,KAAA,GAAA5E,iBAAA,CAAC,WAAMY,UAAU,EAAG;cAChD,MAAMiE,MAAM,GAAY,EAAE;cAC1B,MAAMC,QAAQ,GAAGlE,UAAU,CAACmE,OAAO,KAAKzF,qBAAqB,CAAC0F,UAAU,SAC5D3F,aAAa,CAAC6C,QAAQ,CACzB+C,YAAY,CAACrE,UAAU,CAACsE,QAAQ,EAAEtE,UAAU,CAACE,OAAO,EAAE;gBAAEjB;cAAM,CAAE,CAAC,CACjEuC,IAAI,CAAC+C,KAAK,IAAIrG,UAAU,CAACsG,wBAAwB,CAACD,KAAK,CAACE,IAAI,CAAC,CAAC,CAC9DjD,IAAI,CAACpB,MAAM,IAAIA,MAAM,CAACsE,MAAM,CAAC5E,GAAG,CAAE6E,KAAK,IAAKA,KAAK,CAACC,EAAE,CAAC,CAAC,GACzD,CAAC5E,UAAU,CAACmE,OAAO,CAAC;cAE1B,MAAMlD,OAAO,CAACC,GAAG,CAACgD,QAAQ,CAACpE,GAAG;gBAAA,IAAA+E,KAAA,GAAAzF,iBAAA,CAAC,WAAM0F,OAAO,EAAG;kBAC3C,IAAI;oBACA;oBACA,MAAMC,MAAM,SAASjC,MAAI,CAACkC,iBAAiB,CAACrE,OAAO,EAAEX,UAAU,EAAE,IAAI,EAAEf,MAAM,EAAE2B,MAAM,CAAC;oBAEtF;oBACA,MAAMqE,OAAO,GAAG5G,SAAS,CAAC6G,KAAK,CAAClF,UAAU,CAACiF,OAAO,IAAI,EAAE,CAAC;oBACzDA,OAAO,CAACE,aAAa,GAAGJ,MAAO;oBAE/B,MAAMtG,aAAa,CAAC2G,sBAAsB,CACtCzE,OAAO,EACPX,UAAU,CAACqF,OAAO,EAClBrF,UAAU,CAACsF,OAAO,EAClBL,OAA+D,EAC/DH,OAAO,EACP7F,MAAM,CACT;mBACJ,CAAC,OAAOsG,KAAK,EAAE;oBACZtB,MAAM,CAAC9D,IAAI,CAACoF,KAAK,CAAC;;gBAE1B,CAAC;gBAAA,iBAAAC,GAAA;kBAAA,OAAAX,KAAA,CAAA9D,KAAA,OAAAC,SAAA;gBAAA;cAAA,IAAC,CAAC;cAEH,IAAIiD,MAAM,CAACH,MAAM,KAAKI,QAAQ,CAACJ,MAAM,EAAE;gBACnC;gBACA,KAAK,MAAMyB,KAAK,IAAItB,MAAM,EAAE;kBACxB,IAAI,CAAC5F,SAAS,CAACoH,iBAAiB,CAACF,KAAK,CAAC,EAAE;oBACrC,MAAMA,KAAK;;;;cAKvB;cACAnF,MAAM,CAACI,OAAO,GAAG,IAAI;cAErB,MAAMsC,MAAI,CAAC4C,mBAAmB,CAAC/E,OAAO,EAAEX,UAAU,CAAC2F,WAAW,EAAE1G,MAAM,EAAE2B,MAAM,CAAC;cAE/E,IAAIqD,MAAM,CAACH,MAAM,KAAKI,QAAQ,CAACJ,MAAM,EAAE;gBACnC;gBACAhB,MAAI,CAAC8C,4BAA4B,CAACxF,MAAM,CAACS,QAAQ,EAAEb,UAAU,CAAC6F,IAAI,EAAE5B,MAAM,CAAC,CAAC,CAAC,CAAC;;YAEtF,CAAC;YAAA,iBAAA6B,GAAA;cAAA,OAAA9B,KAAA,CAAAjD,KAAA,OAAAC,SAAA;YAAA;UAAA,IAAC;UAEF,MAAMC,OAAO,CAACC,GAAG,CAACrB,QAAQ,CAAC;UAE3B,IAAIO,MAAM,CAACI,OAAO,EAAE;YAChB;YACA,MAAMX,QAAQ,GAAG,CACbpB,aAAa,CAACsH,yBAAyB,CAACpF,OAAO,EAAE1B,MAAM,CAAC,EACxDR,aAAa,CAACuH,0BAA0B,CAACrF,OAAO,EAAE1B,MAAM,CAAC,CAC5D;YAED,MAAMZ,SAAS,CAACsF,YAAY,CAAC1C,OAAO,CAACC,GAAG,CAACrB,QAAQ,CAAC,CAAC;;UAGvD;UACA,MAAMxB,SAAS,CAACsF,YAAY,CAACb,MAAI,CAACmD,WAAW,CAACvD,MAAM,EAAEzD,MAAM,CAAC,CAAC;UAE9D,OAAOmB,MAAM;QACjB,CAAC;QAAA,gBAlFKX,eAAeA,CAAA;UAAA,OAAAiE,KAAA,CAAA3C,KAAA,OAAAC,SAAA;QAAA;MAAA,GAkFpB;MAED,OAAO8B,MAAI,CAACoD,cAAc,CAACxD,MAAM,EAAEjD,eAAe,EAAE,EAAER,MAAM,CAAC;IAAC;EAClE;EAEA;;;;;;;;;EASMqD,WAAWA,CAAC6D,IAAa,EAAEjE,YAAqB,EAAEhD,KAAe,EAAED,MAAe;IAAA,IAAAmH,MAAA;IAAA,OAAAhH,iBAAA;MACpFH,MAAM,GAAGA,MAAM,IAAId,SAAS,CAACsE,gBAAgB,EAAE;MAE/C,MAAM4D,OAAO,SACHrI,cAAc,CAACsE,WAAW,CAAC,WAAW,EAAE,MAAM,sCAAuB6D,IAAI,EAAEjE,YAAY,EAAEhD,KAAK,EAAED,MAAM,CAAC;MAEjH,IAAIuB,OAAO,GAAG,KAAK;MACnB,MAAMK,QAAQ,GAAa,EAAE;MAC7B,MAAMhB,QAAQ,GAAoB,EAAE;MAEpCwG,OAAO,CAACC,OAAO,CAAElG,MAAM,IAAI;QACvB,IAAIA,MAAM,CAACI,OAAO,CAACsD,MAAM,EAAE;UACvBtD,OAAO,GAAG,IAAI;UAEd;UACAX,QAAQ,CAACM,IAAI,CAAC1B,aAAa,CAAC8H,yBAAyB,CAACnG,MAAM,CAACoG,OAAO,CAACC,SAAS,EAAElE,SAAS,EAAEtD,MAAM,CAAC,CAAC;;QAGvG,IAAImB,MAAM,CAACS,QAAQ,CAACiD,MAAM,EAAE;UACxB;UACAjE,QAAQ,CAACM,IAAI,CAAC1B,aAAa,CAACiI,QAAQ,CAACtG,MAAM,CAACoG,OAAO,CAACG,QAAQ,EAAEvG,MAAM,CAACoG,OAAO,CAACI,UAAU,EAAE;YAAE3H;UAAM,CAAE,CAAC,CAC/FuC,IAAI,CAAE+C,KAAK,IAAI;YACZnE,MAAM,CAACS,QAAQ,CAACyF,OAAO,CAAEO,OAAO,IAAI;cAChCT,MAAI,CAACR,4BAA4B,CAAC/E,QAAQ,EAAE0D,KAAK,CAACsB,IAAI,EAAEgB,OAAO,CAAC;YACpE,CAAC,CAAC;YAEF;UACJ,CAAC,CAAC,CAAC;;MAEf,CAAC,CAAC;MAEF,MAAMxI,SAAS,CAACyI,WAAW,CAACjH,QAAQ,CAAC;MAErC,OAAO;QAAEW,OAAO;QAAEK;MAAQ,CAAE;IAAC;EACjC;EAEA;;;;;;;;EAQMkG,gBAAgBA,CAACpG,OAAe,EAAEC,MAAe,EAAE3B,MAAe;IAAA,IAAA+H,MAAA;IAAA,OAAA5H,iBAAA;MACpE;MACA,MAAMuC,OAAO,SAAStD,SAAS,CAACsF,YAAY,CACxC/E,oBAAoB,CAACqI,eAAe,CAACtG,OAAO,EAAE1B,MAAM,EAAE2B,MAAM,CAAC,EAC7D,EAAiC,CACpC;MAED,IAAI,CAACe,OAAO,CAACmC,MAAM,EAAE;QACjB;QACA,OAAO;UAAEjD,QAAQ,EAAE,EAAE;UAAEL,OAAO,EAAE;QAAK,CAAE;OAC1C,MAAM,IAAI,CAACvC,WAAW,CAAC8F,QAAQ,EAAE,EAAE;QAChC;QACA,OAAO9C,OAAO,CAACiG,MAAM,CAAC,IAAI,CAAC;;MAG/B,MAAMrH,QAAQ,GAAqD,EAAE;MAErE;MACA8B,OAAO,CAAC2E,OAAO,CAAExE,KAAK,IAAI;QACtB,IAAIjC,QAAQ,CAACiC,KAAK,CAACC,YAAY,CAAC,KAAKQ,SAAS,EAAE;UAC5C;;QAEJ1C,QAAQ,CAACiC,KAAK,CAACC,YAAY,CAAC,GAAGiF,MAAI,CAAChF,qBAAqB,CAACF,KAAK,CAACC,YAAY,EAAEnB,MAAM,EAAE3B,MAAM,CAAC;MACjG,CAAC,CAAC;MAEF,MAAMoH,OAAO,SAASpF,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,MAAM,CAACvB,QAAQ,CAAC,CAAC;MAE1D,OAAOwG,OAAO,CAACc,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM;QAC7BxG,QAAQ,EAAEuG,CAAC,CAACvG,QAAQ,CAACyG,MAAM,CAACD,CAAC,CAACxG,QAAQ,CAAC;QACvCL,OAAO,EAAE4G,CAAC,CAAC5G,OAAO,IAAI6G,CAAC,CAAC7G;OAC3B,CAAC,EAAE;QAAEK,QAAQ,EAAE,EAAE;QAAEL,OAAO,EAAE;MAAK,CAA6B,CAAC;IAAC;EACrE;EAEA;;;;;;;;EAQMyB,6BAA6BA,CAC/BC,YAAoB,EACpBtB,MAAe,EACf3B,MAAe;IAAA,IAAAsI,MAAA;IAAA,OAAAnI,iBAAA;MAEfH,MAAM,GAAGA,MAAM,IAAId,SAAS,CAACsE,gBAAgB,EAAE;MAE/C,MAAMC,MAAM,GAAG6E,MAAI,CAACC,mBAAmB,CAACtF,YAAY,EAAEtB,MAAM,CAAC;MAE7D,MAAMgC,MAAM,SAAS2E,MAAI,CAAC1E,YAAY,CAACH,MAAM,EAAEzD,MAAM,CAAC;MAEtD,IAAI2D,MAAM,EAAE;QACR,OAAO2E,MAAI,CAACvF,qBAAqB,CAACE,YAAY,EAAEtB,MAAM,EAAE3B,MAAM,CAAC;;IAClE;EACL;EAEA;;;;;;;;EAQM+C,qBAAqBA,CAACE,YAAoB,EAAEtB,MAAe,EAAE3B,MAAe;IAAA,IAAAwI,MAAA;IAAA,OAAArI,iBAAA;MAC9EwB,MAAM,GAAGA,MAAM,IAAIzC,SAAS,CAAC4E,oBAAoB,EAAE;MACnD9D,MAAM,GAAGA,MAAM,IAAId,SAAS,CAACsE,gBAAgB,EAAE;MAE/C,MAAMC,MAAM,GAAG+E,MAAI,CAACD,mBAAmB,CAACtF,YAAY,EAAEtB,MAAM,CAAC;MAC7D,MAAMoC,kBAAkB,GAAGyE,MAAI,CAACxE,cAAc,CAACP,MAAM,EAAEzD,MAAM,CAAC;MAE9D,IAAI+D,kBAAkB,EAAE;QACpB;QACA,OAAOA,kBAAkB;;MAG7B;MACA,IAAI5E,QAAQ,CAAC8E,SAAS,CAACxE,qBAAqB,CAACyE,SAAS,EAAET,MAAM,EAAEzD,MAAM,CAAC,EAAE;QACrEwI,MAAI,CAACrE,MAAM,CAACC,KAAK,CAAC,+BAA+B,GAAGnB,YAAY,GAAG,yBAAyB,CAAC;QAE7F,MAAM,IAAIoB,KAAK,CAAC/E,SAAS,CAACgF,OAAO,CAAC,uBAAuB,EAAE;UAAEC,EAAE,EAAEiE,MAAI,CAAChE;QAAkB,CAAE,CAAC,CAAC;;MAGhGgE,MAAI,CAACrE,MAAM,CAACC,KAAK,CAAC,+BAA+B,GAAGnB,YAAY,GAAG,YAAY,GAAGtB,MAAM,CAAC;MAEzF,IAAID,OAAO;MACX,MAAMP,MAAM,GAA4B;QACpCS,QAAQ,EAAE,EAAE;QACZL,OAAO,EAAE;OACZ;MAED;MACA,MAAMiB,WAAW;QAAA,IAAAiG,KAAA,GAAAtI,iBAAA,CAAG,aAAW;UAC3B,MAAMuC,OAAO,SAAStD,SAAS,CAACsF,YAAY,CACxC/E,oBAAoB,CAAC+I,oBAAoB,CAACzF,YAAY,EAAEjD,MAAM,EAAE2B,MAAM,CAAC,EACvE,EAAiC,CACpC;UAED,IAAIe,OAAO,CAACmC,MAAM,KAAK,CAAC,IAAI,CAAC7F,WAAW,CAAC8F,QAAQ,EAAE,EAAE;YACjD,MAAM,IAAIT,KAAK,CAAC,wBAAwB,CAAC;;UAG7C,MAAMzD,QAAQ,GAAG8B,OAAO,CAAC7B,GAAG;YAAA,IAAA8H,KAAA,GAAAxI,iBAAA,CAAC,WAAM0C,KAAK,EAAG;cACvCnB,OAAO,GAAGmB,KAAK,CAAC5B,OAAO;cACvB4B,KAAK,CAACmD,OAAO,GAAGnD,KAAK,CAACmD,OAAO,IAAI,EAAE;cAEnC,IAAI;gBACA;gBACA,MAAMwC,MAAI,CAACzC,iBAAiB,CAACrE,OAAO,EAAEmB,KAAK,EAAE,KAAK,EAAE7C,MAAM,EAAE2B,MAAM,CAAC,CAACY,IAAI,CAAEuD,MAAM,IAAI;kBAChF;kBACAjD,KAAK,CAACmD,OAAO,CAACE,aAAa,GAAGJ,MAAM;kBAEpC,OAAOtG,aAAa,CAACoJ,eAAe,CAChC/F,KAAK,CAACgG,MAAM,EACZhG,KAAK,CAACuD,OAAO,EACbvD,KAAK,CAACwD,OAAO,EACbxD,KAAK,CAACmD,OAAmE,EACzEhG,MAAM,CACT;gBACL,CAAC,CAAC;gBAEFmB,MAAM,CAACI,OAAO,GAAG,IAAI;gBAErB,MAAMiH,MAAI,CAACM,WAAW,CAACpH,OAAO,EAAEmB,KAAK,CAACgG,MAAM,EAAE7I,MAAM,EAAE2B,MAAM,CAAC;eAChE,CAAC,OAAO2E,KAAK,EAAE;gBACZ,IAAI,CAAClH,SAAS,CAACoH,iBAAiB,CAACF,KAAK,CAAC,EAAE;kBACrC,MAAMA,KAAK;;gBAGf;gBACAnF,MAAM,CAACI,OAAO,GAAG,IAAI;gBAErB,MAAMiH,MAAI,CAACM,WAAW,CAACpH,OAAO,EAAEmB,KAAK,CAACgG,MAAM,EAAE7I,MAAM,EAAE2B,MAAM,CAAC;gBAE7D;gBACA6G,MAAI,CAAC7B,4BAA4B,CAACxF,MAAM,CAACS,QAAQ,EAAEiB,KAAK,CAAC+D,IAAI,EAAEN,KAAK,CAAC;;YAG7E,CAAC;YAAA,iBAAAyC,GAAA;cAAA,OAAAJ,KAAA,CAAA7G,KAAA,OAAAC,SAAA;YAAA;UAAA,IAAC;UAEF,MAAMC,OAAO,CAACC,GAAG,CAACrB,QAAQ,CAAC;UAE3B;UACA,MAAMoI,oBAAoB,GAAoB,EAAE;UAEhD,IAAItH,OAAO,EAAE;YACTsH,oBAAoB,CAAC9H,IAAI,CAAC1B,aAAa,CAACsH,yBAAyB,CAACpF,OAAO,EAAE1B,MAAM,CAAC,CAAC;;UAGvFgJ,oBAAoB,CAAC9H,IAAI,CAAC1B,aAAa,CAAC8H,yBAAyB,CAACrE,YAAY,EAAEvB,OAAO,EAAE1B,MAAM,CAAC,CAAC;UAEjG,MAAMZ,SAAS,CAACsF,YAAY,CAACtF,SAAS,CAACyI,WAAW,CAACmB,oBAAoB,CAAC,CAAC;UAEzE;UACA,MAAM5J,SAAS,CAACsF,YAAY,CAAC8D,MAAI,CAACxB,WAAW,CAACvD,MAAM,EAAEzD,MAAM,CAAC,CAAC;UAE9D;UACA,OAAOmB,MAAM;QACjB,CAAC;QAAA,gBAlEKqB,WAAWA,CAAA;UAAA,OAAAiG,KAAA,CAAA3G,KAAA,OAAAC,SAAA;QAAA;MAAA,GAkEhB;MAED,OAAOyG,MAAI,CAACvB,cAAc,CAACxD,MAAM,EAAEjB,WAAW,EAAE,EAAExC,MAAM,CAAC;IAAC;EAC9D;EAEA;;;;;;;;;EASgByG,mBAAmBA,CAAC/E,OAAe,EAAEgF,WAAmB,EAAE1G,MAAe,EAAE2B,MAAe;IAAA,OAAAxB,iBAAA;MACtG,MAAM6B,OAAO,CAACC,GAAG,CAAC,CACdtC,oBAAoB,CAAC8G,mBAAmB,CAAC/E,OAAO,EAAEgF,WAAW,EAAE1G,MAAM,EAAE2B,MAAM,CAAC,EAC9EvC,SAAS,CAACsF,YAAY,CAClBhF,mBAAmB,CAACuJ,8BAA8B,CAACvH,OAAO,EAAEgF,WAAW,EAAE1G,MAAM,CAAC,CACnF,CACJ,CAAC;IAAC;EACP;EAEA;;;;;;;;;EASgB8I,WAAWA,CAACpH,OAAe,EAAEwH,MAAc,EAAElJ,MAAe,EAAE2B,MAAe;IAAA,OAAAxB,iBAAA;MACzF,MAAM6B,OAAO,CAACC,GAAG,CAAC,CACdtC,oBAAoB,CAACmJ,WAAW,CAACI,MAAM,EAAElJ,MAAM,EAAE2B,MAAM,CAAC,EACxDvC,SAAS,CAACsF,YAAY,CAAChF,mBAAmB,CAACyJ,sBAAsB,CAACzH,OAAO,EAAEwH,MAAM,EAAElJ,MAAM,EAAE2B,MAAM,CAAC,CAAC,CACtG,CAAC;IAAC;EACP;EAEA;;;;;;;;;;EAUgBoE,iBAAiBA,CAC7BrE,OAAe,EACf0H,IAAgE,EAChEC,YAAqB,EACrBrJ,MAAe,EACf2B,MAAe;IAAA,OAAAxB,iBAAA;MAEf,MAAMmJ,WAAW,GAAGF,IAAI,IAAIA,IAAI,CAACpD,OAAO,IAAIoD,IAAI,CAACpD,OAAO,CAACE,aAAa;MAEtE,IAAI,CAACoD,WAAW,EAAE;QACd;;MAGJ;MACA,IAAIC,KAAK,GAAG,OAAOD,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAACE,MAAM,GAAGF,WAAW,CAACE,MAAM,GAAG,EAAE;MAE3F,IAAI,OAAOF,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAACG,OAAO,EAAE;QACxD;QACA,IAAI;UACA,MAAMC,eAAe,GAAGL,YAAY,SACxB3J,mBAAmB,CAACiK,2BAA2B,CACnDjI,OAAO,EACN0H,IAAuC,CAAC1C,WAAW,EACpD1G,MAAM,CACT,SACON,mBAAmB,CAACkK,mBAAmB,CAC3ClI,OAAO,EACN0H,IAAkC,CAACP,MAAM,EAC1C7I,MAAM,EACN2B,MAAM,CACT;UAEL4H,KAAK,GAAGA,KAAK,CAAClB,MAAM,CAACqB,eAAgC,CAAC;SACzD,CAAC,OAAOpD,KAAK,EAAE;UACZ;QAAA;;MAIR,OAAOxH,gBAAgB,CAAC+K,qBAAqB,CAACN,KAAK,EAAE9J,qBAAqB,CAACyE,SAAS,EAAExC,OAAO,EAAE1B,MAAM,CAAC;IAAC;EAC3G;EAEA;;;;;;;EAOA0D,cAAcA,CAAChC,OAAe,EAAEC,MAAe;IAC3CA,MAAM,GAAGA,MAAM,IAAIzC,SAAS,CAAC4E,oBAAoB,EAAE;IAEnD,OAAO,QAAQ,GAAGpC,OAAO,GAAG,GAAG,GAAGC,MAAM;EAC5C;EAEA;;;;;;;EAOA4G,mBAAmBA,CAACtF,YAAoB,EAAEtB,MAAe;IACrDA,MAAM,GAAGA,MAAM,IAAIzC,SAAS,CAAC4E,oBAAoB,EAAE;IAEnD,OAAO,aAAa,GAAGb,YAAY,GAAG,GAAG,GAAGtB,MAAM;EACtD;;SAtkBS/B,yBAA0B;AAEnBkK,MAAA,CAAArI,WAAW,GAAG,8BAA8B;AAC5CqI,MAAA,CAAAC,aAAa,GAAG,+BAA+B;;mBAHtDnK,MAAyB;AAAA;;SAAzBA,MAAyB;EAAAoK,OAAA,EAAzBpK,MAAyB,CAAAqK,IAAA;EAAAC,UAAA,EADZ;AAAM;AA2kBhC,OAAO,MAAMC,iBAAiB,GAAG9K,aAAa,CAACO,yBAAyB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}