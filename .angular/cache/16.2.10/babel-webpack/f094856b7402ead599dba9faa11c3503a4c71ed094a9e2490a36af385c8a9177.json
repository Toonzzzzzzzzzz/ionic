{"ast":null,"code":"var _class;\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreConstants } from '@/core/constants';\nimport * as i0 from \"@angular/core\";\n/**\n * Pipe to convert a number of seconds to Hours:Minutes:Seconds.\n *\n * This converts a number of seconds to Hours:Minutes:Seconds. If the number of seconds is negative, returns 00:00:00.\n */\nexport class CoreSecondsToHMSPipe {\n  constructor() {\n    this.logger = CoreLogger.getInstance('CoreSecondsToHMSPipe');\n  }\n  /**\n   * Convert a number of seconds to Hours:Minutes:Seconds.\n   *\n   * @param seconds Number of seconds.\n   * @returns Formatted seconds.\n   */\n  transform(seconds, showHours = true) {\n    if (typeof seconds === 'string') {\n      // Convert the value to a number.\n      const numberSeconds = parseInt(seconds, 10);\n      if (isNaN(numberSeconds)) {\n        this.logger.error('Invalid value received', seconds);\n        return seconds;\n      }\n      seconds = numberSeconds;\n    } else if (!seconds || seconds < 0) {\n      seconds = 0;\n    }\n    // Don't allow decimals.\n    seconds = Math.floor(seconds);\n    const hours = Math.floor(seconds / CoreConstants.SECONDS_HOUR);\n    seconds -= hours * CoreConstants.SECONDS_HOUR;\n    const minutes = Math.floor(seconds / CoreConstants.SECONDS_MINUTE);\n    seconds -= minutes * CoreConstants.SECONDS_MINUTE;\n    return showHours ? CoreTextUtils.twoDigits(hours) + ':' + CoreTextUtils.twoDigits(minutes) + ':' + CoreTextUtils.twoDigits(seconds) : CoreTextUtils.twoDigits(minutes) + ':' + CoreTextUtils.twoDigits(seconds);\n  }\n}\n_class = CoreSecondsToHMSPipe;\n_class.ɵfac = function CoreSecondsToHMSPipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"coreSecondsToHMS\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["CoreTextUtils","CoreLogger","CoreConstants","CoreSecondsToHMSPipe","constructor","logger","getInstance","transform","seconds","showHours","numberSeconds","parseInt","isNaN","error","Math","floor","hours","SECONDS_HOUR","minutes","SECONDS_MINUTE","twoDigits","pure"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/pipes/seconds-to-hms.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreConstants } from '@/core/constants';\n\n/**\n * Pipe to convert a number of seconds to Hours:Minutes:Seconds.\n *\n * This converts a number of seconds to Hours:Minutes:Seconds. If the number of seconds is negative, returns 00:00:00.\n */\n@Pipe({\n    name: 'coreSecondsToHMS',\n})\nexport class CoreSecondsToHMSPipe implements PipeTransform {\n\n    protected logger: CoreLogger;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreSecondsToHMSPipe');\n    }\n\n    /**\n     * Convert a number of seconds to Hours:Minutes:Seconds.\n     *\n     * @param seconds Number of seconds.\n     * @returns Formatted seconds.\n     */\n    transform(seconds: string | number, showHours: boolean = true): string {\n        if (typeof seconds === 'string') {\n            // Convert the value to a number.\n            const numberSeconds = parseInt(seconds, 10);\n            if (isNaN(numberSeconds)) {\n                this.logger.error('Invalid value received', seconds);\n\n                return seconds;\n            }\n            seconds = numberSeconds;\n        } else if (!seconds || seconds < 0) {\n            seconds = 0;\n        }\n\n        // Don't allow decimals.\n        seconds = Math.floor(seconds);\n\n        const hours = Math.floor(seconds / CoreConstants.SECONDS_HOUR);\n        seconds -= hours * CoreConstants.SECONDS_HOUR;\n        const minutes = Math.floor(seconds / CoreConstants.SECONDS_MINUTE);\n        seconds -= minutes * CoreConstants.SECONDS_MINUTE;\n\n        return showHours\n            ? CoreTextUtils.twoDigits(hours) + ':' + CoreTextUtils.twoDigits(minutes) + ':' + CoreTextUtils.twoDigits(seconds)\n            : CoreTextUtils.twoDigits(minutes) + ':' + CoreTextUtils.twoDigits(seconds);\n    }\n\n}\n"],"mappings":";AAgBA,SAASA,aAAa,QAAQ,sBAAsB;AACpD,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;;;;;AAQA,OAAM,MAAOC,oBAAoB;EAI7BC,YAAA;IACI,IAAI,CAACC,MAAM,GAAGJ,UAAU,CAACK,WAAW,CAAC,sBAAsB,CAAC;EAChE;EAEA;;;;;;EAMAC,SAASA,CAACC,OAAwB,EAAEC,SAAA,GAAqB,IAAI;IACzD,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;MAC7B;MACA,MAAME,aAAa,GAAGC,QAAQ,CAACH,OAAO,EAAE,EAAE,CAAC;MAC3C,IAAII,KAAK,CAACF,aAAa,CAAC,EAAE;QACtB,IAAI,CAACL,MAAM,CAACQ,KAAK,CAAC,wBAAwB,EAAEL,OAAO,CAAC;QAEpD,OAAOA,OAAO;;MAElBA,OAAO,GAAGE,aAAa;KAC1B,MAAM,IAAI,CAACF,OAAO,IAAIA,OAAO,GAAG,CAAC,EAAE;MAChCA,OAAO,GAAG,CAAC;;IAGf;IACAA,OAAO,GAAGM,IAAI,CAACC,KAAK,CAACP,OAAO,CAAC;IAE7B,MAAMQ,KAAK,GAAGF,IAAI,CAACC,KAAK,CAACP,OAAO,GAAGN,aAAa,CAACe,YAAY,CAAC;IAC9DT,OAAO,IAAIQ,KAAK,GAAGd,aAAa,CAACe,YAAY;IAC7C,MAAMC,OAAO,GAAGJ,IAAI,CAACC,KAAK,CAACP,OAAO,GAAGN,aAAa,CAACiB,cAAc,CAAC;IAClEX,OAAO,IAAIU,OAAO,GAAGhB,aAAa,CAACiB,cAAc;IAEjD,OAAOV,SAAS,GACVT,aAAa,CAACoB,SAAS,CAACJ,KAAK,CAAC,GAAG,GAAG,GAAGhB,aAAa,CAACoB,SAAS,CAACF,OAAO,CAAC,GAAG,GAAG,GAAGlB,aAAa,CAACoB,SAAS,CAACZ,OAAO,CAAC,GAChHR,aAAa,CAACoB,SAAS,CAACF,OAAO,CAAC,GAAG,GAAG,GAAGlB,aAAa,CAACoB,SAAS,CAACZ,OAAO,CAAC;EACnF;;SAvCSL,oBAAoB;;mBAApBA,MAAoB;AAAA;;;QAApBA,MAAoB;EAAAkB,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}