{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreConstants } from '@/core/constants';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreWS } from '@services/ws';\nimport { CorePath } from '@singletons/path';\n/**\n * Class that represents a Moodle site where the user still hasn't authenticated.\n */\nexport class CoreUnauthenticatedSite {\n  /**\n   * Create a site.\n   *\n   * @param siteUrl Site URL.\n   * @param publicConfig Site public config.\n   */\n  constructor(siteUrl, publicConfig) {\n    this.siteUrl = CoreUrlUtils.removeUrlParams(siteUrl); // Make sure the URL doesn't have params.\n    if (publicConfig) {\n      this.setPublicConfig(publicConfig);\n    }\n  }\n  /**\n   * Get site URL.\n   *\n   * @returns Site URL.\n   */\n  getURL() {\n    return this.siteUrl;\n  }\n  /**\n   * Set site URL.\n   *\n   * @param url Site URL.\n   */\n  setURL(url) {\n    this.siteUrl = url;\n  }\n  /**\n   * Get site info.\n   *\n   * @returns Site info.\n   */\n  getInfo() {\n    // Cannot retrieve info for unauthenticated sites.\n    return undefined;\n  }\n  /**\n   * Check if the site has info with the given key and it doesn't contain an empty value.\n   *\n   * @param key Info key.\n   * @returns Whether the key is filled within site info.\n   */\n  hasInfo(key) {\n    var _this$getInfo$key, _this$getInfo;\n    const info = (_this$getInfo$key = (_this$getInfo = this.getInfo()) === null || _this$getInfo === void 0 ? void 0 : _this$getInfo[key]) !== null && _this$getInfo$key !== void 0 ? _this$getInfo$key : null;\n    return info === false || info === 0 || !!info;\n  }\n  /**\n   * Get site name.\n   *\n   * @returns Site name.\n   */\n  getSiteName() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _this$getInfo2, _this$publicConfig;\n      if (_this.isDemoModeSite()) {\n        return CoreConstants.CONFIG.appname;\n      }\n      const siteName = ((_this$getInfo2 = _this.getInfo()) === null || _this$getInfo2 === void 0 ? void 0 : _this$getInfo2.sitename) || ((_this$publicConfig = _this.publicConfig) === null || _this$publicConfig === void 0 ? void 0 : _this$publicConfig.sitename);\n      if (siteName) {\n        return siteName;\n      }\n      // Fallback.\n      const isSingleFixedSite = yield CoreLoginHelper.isSingleFixedSite();\n      if (isSingleFixedSite) {\n        const sites = yield CoreLoginHelper.getAvailableSites();\n        return sites[0].name;\n      }\n      return '';\n    })();\n  }\n  /**\n   * Check whether the app should use the local logo instead of the remote one.\n   *\n   * @returns Whether local logo is forced.\n   */\n  forcesLocalLogo() {\n    return CoreConstants.CONFIG.forceLoginLogo || this.isDemoModeSite();\n  }\n  /**\n   * Get logo URL from a site public config.\n   *\n   * @param config Site public config.\n   * @returns Logo URL.\n   */\n  getLogoUrl(config) {\n    var _config;\n    config = (_config = config) !== null && _config !== void 0 ? _config : this.publicConfig;\n    if (!config || this.forcesLocalLogo()) {\n      return 'assets/img/login_logo.png';\n    }\n    return config.logourl || config.compactlogourl || 'assets/img/login_logo.png';\n  }\n  /**\n   * Returns a url to link an specific page on the site.\n   *\n   * @param path Path of the url to go to.\n   * @param params Object with the params to add.\n   * @param anchor Anchor text if needed.\n   * @returns URL with params.\n   */\n  createSiteUrl(path, params, anchor) {\n    return CoreUrlUtils.addParamsToUrl(CorePath.concatenatePaths(this.siteUrl, path), params, anchor);\n  }\n  /**\n   * Check if a URL belongs to this site.\n   *\n   * @param url URL to check.\n   * @returns Whether the URL belongs to this site.\n   */\n  containsUrl(url) {\n    if (!url) {\n      return false;\n    }\n    const siteUrl = CoreTextUtils.addEndingSlash(CoreUrlUtils.removeProtocolAndWWW(this.siteUrl));\n    url = CoreTextUtils.addEndingSlash(CoreUrlUtils.removeProtocolAndWWW(url));\n    return url.indexOf(siteUrl) == 0;\n  }\n  /**\n   * Get the public config of this site.\n   *\n   * @param options Options.\n   * @returns Promise resolved with public config. Rejected with an object if error, see CoreWSProvider.callAjax.\n   */\n  getPublicConfig(options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const ignoreCache = options.readingStrategy === 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */ || options.readingStrategy === 3 /* CoreSitesReadingStrategy.PREFER_NETWORK */;\n      if (!ignoreCache && _this2.publicConfig) {\n        return _this2.publicConfig;\n      }\n      if (options.readingStrategy === 0 /* CoreSitesReadingStrategy.ONLY_CACHE */) {\n        throw new CoreError('Cache not available to read public config');\n      }\n      try {\n        const config = yield _this2.requestPublicConfig();\n        _this2.setPublicConfig(config);\n        return config;\n      } catch (error) {\n        if (options.readingStrategy === 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */ || !_this2.publicConfig) {\n          throw error;\n        }\n        return _this2.publicConfig;\n      }\n    })();\n  }\n  /**\n   * Set public config.\n   *\n   * @param publicConfig Public config.\n   */\n  setPublicConfig(publicConfig) {\n    var _publicConfig$tool_mo;\n    publicConfig.tool_mobile_disabledfeatures = CoreTextUtils.treatDisabledFeatures((_publicConfig$tool_mo = publicConfig.tool_mobile_disabledfeatures) !== null && _publicConfig$tool_mo !== void 0 ? _publicConfig$tool_mo : '');\n    this.publicConfig = publicConfig;\n  }\n  /**\n   * Perform a request to the server to get the public config of this site.\n   *\n   * @returns Promise resolved with public config.\n   */\n  requestPublicConfig() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const preSets = {\n        siteUrl: _this3.siteUrl\n      };\n      let config;\n      try {\n        config = yield CoreWS.callAjax('tool_mobile_get_public_config', {}, preSets);\n      } catch (error) {\n        if (!error || error.errorcode !== 'codingerror' || _this3.getInfo() && !_this3.isAjaxGetSupported()) {\n          throw error;\n        }\n        // This error probably means that there is a redirect in the site. Try to use a GET request.\n        preSets.noLogin = true;\n        preSets.useGet = true;\n        try {\n          config = yield CoreWS.callAjax('tool_mobile_get_public_config', {}, preSets);\n        } catch (error2) {\n          if (_this3.isAjaxGetSupported()) {\n            // GET is supported, return the second error.\n            throw error2;\n          } else {\n            // GET not supported or we don't know if it's supported. Return first error.\n            throw error;\n          }\n        }\n      }\n      // Use the wwwroot returned by the server.\n      if (config.httpswwwroot) {\n        _this3.siteUrl = CoreUrlUtils.removeUrlParams(config.httpswwwroot); // Make sure the URL doesn't have params.\n      }\n\n      return config;\n    })();\n  }\n  /**\n   * Check if GET method is supported for AJAX calls.\n   *\n   * @returns Whether it's supported.\n   * @since Moodle 3.8\n   */\n  isAjaxGetSupported() {\n    // We don't know if it's supported, assume it's not.\n    return false;\n  }\n  /**\n   * Check if a URL to a file belongs to the site and uses the pluginfileurl or tokenpluginfileurl endpoints.\n   *\n   * @param url File URL to check.\n   * @returns Whether it's a site file URL.\n   */\n  isSitePluginFileUrl(url) {\n    const isPluginFileUrl = CoreUrlUtils.isPluginFileUrl(url) || CoreUrlUtils.isTokenPluginFileUrl(url);\n    if (!isPluginFileUrl) {\n      return false;\n    }\n    return this.containsUrl(url);\n  }\n  /**\n   * Check if a URL to a file belongs to the site and is a theme image file.\n   *\n   * @param url File URL to check.\n   * @returns Whether it's a site theme image URL.\n   */\n  isSiteThemeImageUrl(url) {\n    if (!CoreUrlUtils.isThemeImageUrl(url)) {\n      return false;\n    }\n    return this.containsUrl(url);\n  }\n  /**\n   * Check if the site is a demo mode site.\n   *\n   * @returns Whether the site is a demo mode site.\n   */\n  isDemoModeSite() {\n    const demoSiteData = CoreLoginHelper.getDemoModeSiteInfo();\n    return this.containsUrl(demoSiteData === null || demoSiteData === void 0 ? void 0 : demoSiteData.url);\n  }\n  /**\n   * Check whether informative links should be displayed for this site.\n   *\n   * @returns Whether informative links should be displayed.\n   */\n  shouldDisplayInformativeLinks() {\n    return !CoreConstants.CONFIG.hideInformativeLinks && !this.isDemoModeSite();\n  }\n  /**\n   * Check if a certain feature is disabled in the site.\n   *\n   * @param name Name of the feature to check.\n   * @returns Whether it's disabled.\n   */\n  isFeatureDisabled(name) {\n    const disabledFeatures = this.getDisabledFeatures();\n    if (!disabledFeatures) {\n      return false;\n    }\n    const regEx = new RegExp('(,|^)' + CoreTextUtils.escapeForRegex(name) + '(,|$)', 'g');\n    return !!disabledFeatures.match(regEx);\n  }\n  /**\n   * Get disabled features string.\n   *\n   * @returns Disabled features.\n   */\n  getDisabledFeatures() {\n    var _this$publicConfig2;\n    return (_this$publicConfig2 = this.publicConfig) === null || _this$publicConfig2 === void 0 ? void 0 : _this$publicConfig2.tool_mobile_disabledfeatures;\n  }\n}\n/**\n * Enum constants that define default user home page.\n */\nexport var CoreSiteInfoUserHomepage;\n(function (CoreSiteInfoUserHomepage) {\n  CoreSiteInfoUserHomepage[CoreSiteInfoUserHomepage[\"HOMEPAGE_SITE\"] = 0] = \"HOMEPAGE_SITE\";\n  CoreSiteInfoUserHomepage[CoreSiteInfoUserHomepage[\"HOMEPAGE_MY\"] = 1] = \"HOMEPAGE_MY\";\n  CoreSiteInfoUserHomepage[CoreSiteInfoUserHomepage[\"HOMEPAGE_MYCOURSES\"] = 3] = \"HOMEPAGE_MYCOURSES\";\n})(CoreSiteInfoUserHomepage || (CoreSiteInfoUserHomepage = {}));\n/**\n * QR Code type enumeration.\n */\nexport var CoreSiteQRCodeType;\n(function (CoreSiteQRCodeType) {\n  CoreSiteQRCodeType[CoreSiteQRCodeType[\"QR_CODE_DISABLED\"] = 0] = \"QR_CODE_DISABLED\";\n  CoreSiteQRCodeType[CoreSiteQRCodeType[\"QR_CODE_URL\"] = 1] = \"QR_CODE_URL\";\n  CoreSiteQRCodeType[CoreSiteQRCodeType[\"QR_CODE_LOGIN\"] = 2] = \"QR_CODE_LOGIN\";\n})(CoreSiteQRCodeType || (CoreSiteQRCodeType = {}));\n/**\n * The type of login. 1 for app, 2 for browser, 3 for embedded.\n */\nexport var TypeOfLogin;\n(function (TypeOfLogin) {\n  TypeOfLogin[TypeOfLogin[\"APP\"] = 1] = \"APP\";\n  TypeOfLogin[TypeOfLogin[\"BROWSER\"] = 2] = \"BROWSER\";\n  TypeOfLogin[TypeOfLogin[\"EMBEDDED\"] = 3] = \"EMBEDDED\";\n})(TypeOfLogin || (TypeOfLogin = {}));","map":{"version":3,"names":["CoreConstants","CoreError","CoreLoginHelper","CoreTextUtils","CoreUrlUtils","CoreWS","CorePath","CoreUnauthenticatedSite","constructor","siteUrl","publicConfig","removeUrlParams","setPublicConfig","getURL","setURL","url","getInfo","undefined","hasInfo","key","_this$getInfo$key","_this$getInfo","info","getSiteName","_this","_asyncToGenerator","_this$getInfo2","_this$publicConfig","isDemoModeSite","CONFIG","appname","siteName","sitename","isSingleFixedSite","sites","getAvailableSites","name","forcesLocalLogo","forceLoginLogo","getLogoUrl","config","_config","logourl","compactlogourl","createSiteUrl","path","params","anchor","addParamsToUrl","concatenatePaths","containsUrl","addEndingSlash","removeProtocolAndWWW","indexOf","getPublicConfig","options","_this2","ignoreCache","readingStrategy","requestPublicConfig","error","_publicConfig$tool_mo","tool_mobile_disabledfeatures","treatDisabledFeatures","_this3","preSets","callAjax","errorcode","isAjaxGetSupported","noLogin","useGet","error2","httpswwwroot","isSitePluginFileUrl","isPluginFileUrl","isTokenPluginFileUrl","isSiteThemeImageUrl","isThemeImageUrl","demoSiteData","getDemoModeSiteInfo","shouldDisplayInformativeLinks","hideInformativeLinks","isFeatureDisabled","disabledFeatures","getDisabledFeatures","regEx","RegExp","escapeForRegex","match","_this$publicConfig2","CoreSiteInfoUserHomepage","CoreSiteQRCodeType","TypeOfLogin"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/sites/unauthenticated-site.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreConstants } from '@/core/constants';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreWS, CoreWSAjaxPreSets, CoreWSExternalWarning } from '@services/ws';\nimport { CorePath } from '@singletons/path';\n\n/**\n * Class that represents a Moodle site where the user still hasn't authenticated.\n */\nexport class CoreUnauthenticatedSite {\n\n    siteUrl: string;\n\n    protected publicConfig?: CoreSitePublicConfigResponse;\n\n    /**\n     * Create a site.\n     *\n     * @param siteUrl Site URL.\n     * @param publicConfig Site public config.\n     */\n    constructor(siteUrl: string, publicConfig?: CoreSitePublicConfigResponse) {\n        this.siteUrl = CoreUrlUtils.removeUrlParams(siteUrl); // Make sure the URL doesn't have params.\n        if (publicConfig) {\n            this.setPublicConfig(publicConfig);\n        }\n    }\n\n    /**\n     * Get site URL.\n     *\n     * @returns Site URL.\n     */\n    getURL(): string {\n        return this.siteUrl;\n    }\n\n    /**\n     * Set site URL.\n     *\n     * @param url Site URL.\n     */\n    setURL(url: string): void {\n        this.siteUrl = url;\n    }\n\n    /**\n     * Get site info.\n     *\n     * @returns Site info.\n     */\n    getInfo(): CoreSiteInfo | undefined {\n        // Cannot retrieve info for unauthenticated sites.\n        return undefined;\n    }\n\n    /**\n     * Check if the site has info with the given key and it doesn't contain an empty value.\n     *\n     * @param key Info key.\n     * @returns Whether the key is filled within site info.\n     */\n    hasInfo(key: string): boolean {\n        const info = this.getInfo()?.[key] ?? null;\n\n        return info === false || info === 0 || !!info;\n    }\n\n    /**\n     * Get site name.\n     *\n     * @returns Site name.\n     */\n    async getSiteName(): Promise<string> {\n        if (this.isDemoModeSite()) {\n            return CoreConstants.CONFIG.appname;\n        }\n\n        const siteName = this.getInfo()?.sitename || this.publicConfig?.sitename;\n        if (siteName) {\n            return siteName;\n        }\n\n        // Fallback.\n        const isSingleFixedSite = await CoreLoginHelper.isSingleFixedSite();\n\n        if (isSingleFixedSite) {\n            const sites = await CoreLoginHelper.getAvailableSites();\n\n            return sites[0].name;\n        }\n\n        return '';\n    }\n\n    /**\n     * Check whether the app should use the local logo instead of the remote one.\n     *\n     * @returns Whether local logo is forced.\n     */\n    forcesLocalLogo(): boolean {\n        return CoreConstants.CONFIG.forceLoginLogo || this.isDemoModeSite();\n    }\n\n    /**\n     * Get logo URL from a site public config.\n     *\n     * @param config Site public config.\n     * @returns Logo URL.\n     */\n    getLogoUrl(config?: CoreSitePublicConfigResponse): string | undefined {\n        config = config ?? this.publicConfig;\n        if (!config || this.forcesLocalLogo()) {\n            return 'assets/img/login_logo.png';\n        }\n\n        return config.logourl || config.compactlogourl || 'assets/img/login_logo.png';\n    }\n\n    /**\n     * Returns a url to link an specific page on the site.\n     *\n     * @param path Path of the url to go to.\n     * @param params Object with the params to add.\n     * @param anchor Anchor text if needed.\n     * @returns URL with params.\n     */\n    createSiteUrl(path: string, params?: Record<string, unknown>, anchor?: string): string {\n        return CoreUrlUtils.addParamsToUrl(CorePath.concatenatePaths(this.siteUrl, path), params, anchor);\n    }\n\n    /**\n     * Check if a URL belongs to this site.\n     *\n     * @param url URL to check.\n     * @returns Whether the URL belongs to this site.\n     */\n    containsUrl(url?: string): boolean {\n        if (!url) {\n            return false;\n        }\n\n        const siteUrl = CoreTextUtils.addEndingSlash(CoreUrlUtils.removeProtocolAndWWW(this.siteUrl));\n        url = CoreTextUtils.addEndingSlash(CoreUrlUtils.removeProtocolAndWWW(url));\n\n        return url.indexOf(siteUrl) == 0;\n    }\n\n    /**\n     * Get the public config of this site.\n     *\n     * @param options Options.\n     * @returns Promise resolved with public config. Rejected with an object if error, see CoreWSProvider.callAjax.\n     */\n    async getPublicConfig(options: { readingStrategy?: CoreSitesReadingStrategy } = {}): Promise<CoreSitePublicConfigResponse> {\n        const ignoreCache = options.readingStrategy === CoreSitesReadingStrategy.ONLY_NETWORK ||\n            options.readingStrategy ===  CoreSitesReadingStrategy.PREFER_NETWORK;\n        if (!ignoreCache && this.publicConfig) {\n            return this.publicConfig;\n        }\n\n        if (options.readingStrategy === CoreSitesReadingStrategy.ONLY_CACHE) {\n            throw new CoreError('Cache not available to read public config');\n        }\n\n        try {\n            const config = await this.requestPublicConfig();\n\n            this.setPublicConfig(config);\n\n            return config;\n        } catch (error) {\n            if (options.readingStrategy === CoreSitesReadingStrategy.ONLY_NETWORK || !this.publicConfig) {\n                throw error;\n            }\n\n            return this.publicConfig;\n        }\n    }\n\n    /**\n     * Set public config.\n     *\n     * @param publicConfig Public config.\n     */\n    setPublicConfig(publicConfig: CoreSitePublicConfigResponse): void {\n        publicConfig.tool_mobile_disabledfeatures =\n            CoreTextUtils.treatDisabledFeatures(publicConfig.tool_mobile_disabledfeatures ?? '');\n        this.publicConfig = publicConfig;\n    }\n\n    /**\n     * Perform a request to the server to get the public config of this site.\n     *\n     * @returns Promise resolved with public config.\n     */\n    protected async requestPublicConfig(): Promise<CoreSitePublicConfigResponse> {\n        const preSets: CoreWSAjaxPreSets = {\n            siteUrl: this.siteUrl,\n        };\n\n        let config: CoreSitePublicConfigResponse;\n\n        try {\n            config = await CoreWS.callAjax<CoreSitePublicConfigResponse>('tool_mobile_get_public_config', {}, preSets);\n        } catch (error) {\n            if (!error || error.errorcode !== 'codingerror' || (this.getInfo() && !this.isAjaxGetSupported())) {\n                throw error;\n            }\n\n            // This error probably means that there is a redirect in the site. Try to use a GET request.\n            preSets.noLogin = true;\n            preSets.useGet = true;\n\n            try {\n                config = await CoreWS.callAjax<CoreSitePublicConfigResponse>('tool_mobile_get_public_config', {}, preSets);\n            } catch (error2) {\n                if (this.isAjaxGetSupported()) {\n                    // GET is supported, return the second error.\n                    throw error2;\n                } else {\n                    // GET not supported or we don't know if it's supported. Return first error.\n                    throw error;\n                }\n            }\n        }\n\n        // Use the wwwroot returned by the server.\n        if (config.httpswwwroot) {\n            this.siteUrl = CoreUrlUtils.removeUrlParams(config.httpswwwroot); // Make sure the URL doesn't have params.\n        }\n\n        return config;\n    }\n\n    /**\n     * Check if GET method is supported for AJAX calls.\n     *\n     * @returns Whether it's supported.\n     * @since Moodle 3.8\n     */\n    protected isAjaxGetSupported(): boolean {\n        // We don't know if it's supported, assume it's not.\n        return false;\n    }\n\n    /**\n     * Check if a URL to a file belongs to the site and uses the pluginfileurl or tokenpluginfileurl endpoints.\n     *\n     * @param url File URL to check.\n     * @returns Whether it's a site file URL.\n     */\n    isSitePluginFileUrl(url: string): boolean {\n        const isPluginFileUrl = CoreUrlUtils.isPluginFileUrl(url) || CoreUrlUtils.isTokenPluginFileUrl(url);\n        if (!isPluginFileUrl) {\n            return false;\n        }\n\n        return this.containsUrl(url);\n    }\n\n    /**\n     * Check if a URL to a file belongs to the site and is a theme image file.\n     *\n     * @param url File URL to check.\n     * @returns Whether it's a site theme image URL.\n     */\n    isSiteThemeImageUrl(url: string): boolean {\n        if (!CoreUrlUtils.isThemeImageUrl(url)) {\n            return false;\n        }\n\n        return this.containsUrl(url);\n    }\n\n    /**\n     * Check if the site is a demo mode site.\n     *\n     * @returns Whether the site is a demo mode site.\n     */\n    isDemoModeSite(): boolean {\n        const demoSiteData = CoreLoginHelper.getDemoModeSiteInfo();\n\n        return this.containsUrl(demoSiteData?.url);\n    }\n\n    /**\n     * Check whether informative links should be displayed for this site.\n     *\n     * @returns Whether informative links should be displayed.\n     */\n    shouldDisplayInformativeLinks(): boolean {\n        return !CoreConstants.CONFIG.hideInformativeLinks && !this.isDemoModeSite();\n    }\n\n    /**\n     * Check if a certain feature is disabled in the site.\n     *\n     * @param name Name of the feature to check.\n     * @returns Whether it's disabled.\n     */\n    isFeatureDisabled(name: string): boolean {\n        const disabledFeatures = this.getDisabledFeatures();\n        if (!disabledFeatures) {\n            return false;\n        }\n\n        const regEx = new RegExp('(,|^)' + CoreTextUtils.escapeForRegex(name) + '(,|$)', 'g');\n\n        return !!disabledFeatures.match(regEx);\n    }\n\n    /**\n     * Get disabled features string.\n     *\n     * @returns Disabled features.\n     */\n    protected getDisabledFeatures(): string | undefined {\n        return this.publicConfig?.tool_mobile_disabledfeatures;\n    }\n\n}\n\n/**\n * Result of WS core_webservice_get_site_info.\n */\nexport type CoreSiteInfoResponse = {\n    sitename: string; // Site name.\n    username: string; // Username.\n    firstname: string; // First name.\n    lastname: string; // Last name.\n    fullname: string; // User full name.\n    lang: string; // Current language.\n    userid: number; // User id.\n    siteurl: string; // Site url.\n    userpictureurl: string; // The user profile picture.\n    functions: {\n        name: string; // Function name.\n        version: string; // The version number of the component to which the function belongs.\n    }[];\n    downloadfiles?: number; // 1 if users are allowed to download files, 0 if not.\n    uploadfiles?: number; // 1 if users are allowed to upload files, 0 if not.\n    release?: string; // Moodle release number.\n    version?: string; // Moodle version number.\n    mobilecssurl?: string; // Mobile custom CSS theme.\n    advancedfeatures?: { // Advanced features availability.\n        name: string; // Feature name.\n        value: number; // Feature value. Usually 1 means enabled.\n    }[];\n    usercanmanageownfiles?: boolean; // True if the user can manage his own files.\n    userquota?: number; // User quota (bytes). 0 means user can ignore the quota.\n    usermaxuploadfilesize?: number; // User max upload file size (bytes). -1 means the user can ignore the upload file size.\n    userhomepage?: CoreSiteInfoUserHomepage; // The default home page for the user.\n    userprivateaccesskey?: string; // Private user access key for fetching files.\n    siteid?: number; // Site course ID.\n    sitecalendartype?: string; // Calendar type set in the site.\n    usercalendartype?: string; // Calendar typed used by the user.\n    userissiteadmin?: boolean; // Whether the user is a site admin or not.\n    theme?: string; // Current theme for the user.\n};\n\n/**\n * Site info, including some calculated data.\n */\nexport type CoreSiteInfo = CoreSiteInfoResponse & {\n    functionsByName?: {\n        [name: string]: {\n            name: string; // Function name.\n            version: string; // The version number of the component to which the function belongs.\n        };\n    };\n};\n\n/**\n * Enum constants that define default user home page.\n */\nexport enum CoreSiteInfoUserHomepage {\n    HOMEPAGE_SITE = 0, // Site home.\n    HOMEPAGE_MY = 1, // Dashboard.\n    HOMEPAGE_MYCOURSES = 3, // My courses.\n}\n\n/**\n * Possible values for 'supportavailability' config.\n */\nexport const enum CoreSiteConfigSupportAvailability {\n    Disabled = 0,\n    Authenticated = 1,\n    Anyone = 2,\n}\n\n/**\n * Result of WS tool_mobile_get_public_config.\n */\nexport type CoreSitePublicConfigResponse = {\n    wwwroot: string; // Site URL.\n    httpswwwroot: string; // Site https URL (if httpslogin is enabled).\n    sitename: string; // Site name.\n    guestlogin: number; // Whether guest login is enabled.\n    rememberusername: number; // Values: 0 for No, 1 for Yes, 2 for optional.\n    authloginviaemail: number; // Whether log in via email is enabled.\n    registerauth: string; // Authentication method for user registration.\n    forgottenpasswordurl: string; // Forgotten password URL.\n    authinstructions: string; // Authentication instructions.\n    authnoneenabled: number; // Whether auth none is enabled.\n    enablewebservices: number; // Whether Web Services are enabled.\n    enablemobilewebservice: number; // Whether the Mobile service is enabled.\n    maintenanceenabled: number; // Whether site maintenance is enabled.\n    maintenancemessage: string; // Maintenance message.\n    logourl?: string; // The site logo URL.\n    compactlogourl?: string; // The site compact logo URL.\n    typeoflogin: TypeOfLogin; // The type of login. 1 for app, 2 for browser, 3 for embedded.\n    launchurl?: string; // SSO login launch URL.\n    mobilecssurl?: string; // Mobile custom CSS theme.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    tool_mobile_disabledfeatures?: string; // Disabled features in the app.\n    identityproviders?: CoreSiteIdentityProvider[]; // Identity providers.\n    country?: string; // Default site country.\n    agedigitalconsentverification?: boolean; // Whether age digital consent verification is enabled.\n    supportname?: string; // Site support contact name (only if age verification is enabled).\n    supportemail?: string; // Site support contact email (only if age verification is enabled).\n    supportavailability?: CoreSiteConfigSupportAvailability;\n    supportpage?: string; // Site support contact url.\n    autolang?: number; // Whether to detect default language from browser setting.\n    lang?: string; // Default language for the site.\n    langmenu?: number; // Whether the language menu should be displayed.\n    langlist?: string; // Languages on language menu.\n    locale?: string; // Sitewide locale.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    tool_mobile_minimumversion?: string; // Minimum required version to access.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    tool_mobile_iosappid?: string; // IOS app's unique identifier.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    tool_mobile_androidappid?: string; // Android app's unique identifier.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    tool_mobile_setuplink?: string; // App download page.\n    tool_mobile_qrcodetype?: CoreSiteQRCodeType; // eslint-disable-line @typescript-eslint/naming-convention\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * QR Code type enumeration.\n */\nexport enum CoreSiteQRCodeType {\n    QR_CODE_DISABLED = 0, // QR code disabled value\n    QR_CODE_URL = 1, // QR code type URL value\n    QR_CODE_LOGIN = 2, // QR code type login value\n}\n\n/**\n * Identity provider.\n */\nexport type CoreSiteIdentityProvider = {\n    name: string; // The identity provider name.\n    iconurl: string; // The icon URL for the provider.\n    url: string; // The URL of the provider.\n};\n\n/**\n * The type of login. 1 for app, 2 for browser, 3 for embedded.\n */\nexport enum TypeOfLogin {\n    APP = 1,\n    BROWSER = 2, // SSO in browser window is required.\n    EMBEDDED = 3, // SSO in embedded browser is required.\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}