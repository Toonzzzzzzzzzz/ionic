{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreConstants } from '@/core/constants';\nimport { EventEmitter } from '@angular/core';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreCourseModuleSummaryComponent } from '../components/module-summary/module-summary';\nimport { CoreCourse } from '../services/course';\nimport { CoreCourseHelper } from '../services/course-helper';\nimport { CoreCourseModuleDelegate } from '../services/module-delegate';\nimport { CoreCourseModulePrefetchDelegate } from '../services/module-prefetch-delegate';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreTime } from '@singletons/time';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../pages/contents/contents\";\n/**\n * Template class to easily create CoreCourseModuleMainComponent of resources (or activities without syncing).\n */\nexport class CoreCourseModuleMainResourceComponent {\n  constructor(loggerName = 'CoreCourseModuleMainResourceComponent', courseContentsPage) {\n    this.courseContentsPage = courseContentsPage;\n    this.dataRetrieved = new EventEmitter(); // Called to notify changes the index page from the main component.\n    this.showLoading = true; // Whether to show loading.\n    this.hasOffline = false; // Resources don't have any data to sync.\n    this.fetchContentDefaultError = 'core.course.errorgetmodule'; // Default error to show when loading contents.\n    this.isCurrentView = false; // Whether the component is in the current view.\n    this.showCompletion = false; // Whether to show completion inside the activity.\n    this.displayDescription = true; // Wether to show Module description on module page, and not on summary or the contrary.\n    this.isDestroyed = false; // Whether the component is destroyed.\n    this.checkCompletionAfterLog = true; // Whether to check if completion has changed after calling logActivity.\n    this.logger = CoreLogger.getInstance(loggerName);\n    this.finishSuccessfulFetch = CoreTime.once(() => this.performFinishSuccessfulFetch());\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.siteId = CoreSites.getCurrentSiteId();\n      _this.description = _this.module.description;\n      _this.componentId = _this.module.id;\n      _this.courseId = _this.courseId || _this.module.course;\n      _this.showCompletion = !!CoreSites.getRequiredCurrentSite().isVersionGreaterEqualThan('3.11');\n      if (_this.showCompletion) {\n        CoreCourseHelper.loadModuleOfflineCompletion(_this.courseId, _this.module);\n        _this.completionObserver = CoreEvents.on(CoreEvents.COMPLETION_MODULE_VIEWED, /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (data) {\n            if (data && data.cmId == _this.module.id) {\n              yield CoreCourse.invalidateModule(_this.module.id);\n              _this.fetchModule();\n            }\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n        _this.debouncedUpdateModule = CoreUtils.debounce(() => {\n          _this.fetchModule();\n        }, 10000);\n      }\n    })();\n  }\n  /**\n   * Refresh the data.\n   *\n   * @param refresher Refresher.\n   * @param showErrors If show errors to the user of hide them.\n   * @returns Promise resolved when done.\n   */\n  doRefresh(refresher, showErrors = false) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.module) {\n        // Module can be undefined if course format changes from single activity to weekly/topics.\n        return;\n      }\n      // If it's a single activity course and the refresher is displayed within the component,\n      // call doRefresh on the section page to refresh the course data.\n      if (_this2.courseContentsPage && !CoreCourseModuleDelegate.displayRefresherInSingleActivity(_this2.module.modname)) {\n        yield CoreUtils.ignoreErrors(_this2.courseContentsPage.doRefresh());\n      }\n      yield CoreUtils.ignoreErrors(_this2.refreshContent(true, showErrors));\n      refresher === null || refresher === void 0 || refresher.complete();\n    })();\n  }\n  /**\n   * Perform the refresh content function.\n   *\n   * @param sync If the refresh needs syncing.\n   * @param showErrors Wether to show errors to the user or hide them.\n   * @returns Resolved when done.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshContent(sync = false, showErrors = false) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.module) {\n        // This can happen if course format changes from single activity to weekly/topics.\n        return;\n      }\n      yield CoreUtils.ignoreErrors(Promise.all([_this3.invalidateContent(), _this3.showCompletion ? CoreCourse.invalidateModule(_this3.module.id) : undefined]));\n      if (_this3.showCompletion) {\n        _this3.fetchModule();\n      }\n      yield _this3.loadContent(true);\n    })();\n  }\n  /**\n   * Perform the invalidate content function.\n   *\n   * @returns Resolved when done.\n   */\n  invalidateContent() {\n    return _asyncToGenerator(function* () {\n      return;\n    })();\n  }\n  /**\n   * Download the component contents.\n   *\n   * @param refresh Whether we're refreshing data.\n   * @returns Promise resolved when done.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fetchContent(refresh) {\n    return _asyncToGenerator(function* () {\n      return;\n    })();\n  }\n  /**\n   * Loads the component contents and shows the corresponding error.\n   *\n   * @param refresh Whether we're refreshing data.\n   * @returns Promise resolved when done.\n   */\n  loadContent(refresh) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this4.module) {\n        // This can happen if course format changes from single activity to weekly/topics.\n        return;\n      }\n      try {\n        yield _this4.fetchContent(refresh);\n        _this4.finishSuccessfulFetch();\n      } catch (error) {\n        var _CoreSites$getCurrent;\n        if (!refresh && !((_CoreSites$getCurrent = CoreSites.getCurrentSite()) !== null && _CoreSites$getCurrent !== void 0 && _CoreSites$getCurrent.isOfflineDisabled()) && _this4.isNotFoundError(error)) {\n          // Module not found, retry without using cache.\n          return yield _this4.refreshContent();\n        }\n        CoreDomUtils.showErrorModalDefault(error, _this4.fetchContentDefaultError, true);\n      } finally {\n        _this4.showLoading = false;\n      }\n    })();\n  }\n  /**\n   * Check if an error is a \"module not found\" error.\n   *\n   * @param error Error.\n   * @returns Whether the error is a \"module not found\" error.\n   */\n  isNotFoundError(error) {\n    return CoreTextUtils.getErrorMessageFromError(error) === Translate.instant('core.course.modulenotfound');\n  }\n  /**\n   * Updage package last downloaded.\n   */\n  getPackageLastDownloaded() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this5.module) {\n        return;\n      }\n      const lastDownloaded = yield CoreCourseHelper.getModulePackageLastDownloaded(_this5.module, _this5.component);\n      _this5.downloadTimeReadable = CoreTextUtils.ucFirst(lastDownloaded.downloadTimeReadable);\n    })();\n  }\n  /**\n   * Check if the module is prefetched or being prefetched.\n   * To make it faster, just use the data calculated by setStatusListener.\n   *\n   * @returns If module has been prefetched.\n   */\n  isPrefetched() {\n    return this.currentStatus != CoreConstants.NOT_DOWNLOADABLE && this.currentStatus != CoreConstants.NOT_DOWNLOADED;\n  }\n  /**\n   * Get message about an error occurred while downloading files.\n   *\n   * @param error The specific error.\n   * @param multiLine Whether to put each message in a different paragraph or in a single line.\n   * @returns Error text message.\n   */\n  getErrorDownloadingSomeFilesMessage(error, multiLine) {\n    if (multiLine) {\n      return CoreTextUtils.buildSeveralParagraphsMessage([Translate.instant('core.errordownloadingsomefiles'), error]);\n    } else {\n      error = CoreTextUtils.getErrorMessageFromError(error) || '';\n      return Translate.instant('core.errordownloadingsomefiles') + (error ? ' ' + error : '');\n    }\n  }\n  /**\n   * Show an error occurred while downloading files.\n   *\n   * @param error The specific error.\n   */\n  showErrorDownloadingSomeFiles(error) {\n    CoreDomUtils.showErrorModal(this.getErrorDownloadingSomeFilesMessage(error, true));\n  }\n  /**\n   * Displays some data based on the current status.\n   *\n   * @param status The current status.\n   * @param previousStatus The previous status. If not defined, there is no previous status.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  showStatus(status, previousStatus) {\n    // To be overridden.\n  }\n  /**\n   * Watch for changes on the status.\n   *\n   * @param refresh Whether we're refreshing data.\n   * @returns Promise resolved when done.\n   */\n  setStatusListener(refresh) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (_this6.statusObserver === undefined) {\n        // Listen for changes on this module status.\n        _this6.statusObserver = CoreEvents.on(CoreEvents.PACKAGE_STATUS_CHANGED, data => {\n          if (data.componentId != _this6.module.id || data.component != _this6.component) {\n            return;\n          }\n          // The status has changed, update it.\n          const previousStatus = _this6.currentStatus;\n          _this6.currentStatus = data.status;\n          _this6.getPackageLastDownloaded();\n          _this6.showStatus(_this6.currentStatus, previousStatus);\n        }, _this6.siteId);\n      } else if (!refresh) {\n        return;\n      }\n      if (refresh) {\n        yield CoreUtils.ignoreErrors(CoreCourseModulePrefetchDelegate.invalidateCourseUpdates(_this6.courseId));\n      }\n      // Also, get the current status.\n      const status = yield CoreCourseModulePrefetchDelegate.getModuleStatus(_this6.module, _this6.courseId, undefined, refresh);\n      _this6.currentStatus = status;\n      _this6.getPackageLastDownloaded();\n      _this6.showStatus(status);\n    })();\n  }\n  /**\n   * Download a resource if needed.\n   * If the download call fails the promise won't be rejected, but the error will be included in the returned object.\n   * If module.contents cannot be loaded then the Promise will be rejected.\n   *\n   * @param refresh Whether we're refreshing data.\n   * @returns Promise resolved when done.\n   */\n  downloadResourceIfNeeded(refresh, contentsAlreadyLoaded) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      var _this7$module$content;\n      const result = {\n        failed: false\n      };\n      // Get module status to determine if it needs to be downloaded.\n      yield _this7.setStatusListener(refresh);\n      if (_this7.currentStatus != CoreConstants.DOWNLOADED) {\n        // Download content. This function also loads module contents if needed.\n        try {\n          yield CoreCourseModulePrefetchDelegate.downloadModule(_this7.module, _this7.courseId);\n          // If we reach here it means the download process already loaded the contents, no need to do it again.\n          contentsAlreadyLoaded = true;\n        } catch (error) {\n          // Mark download as failed but go on since the main files could have been downloaded.\n          result.failed = true;\n          result.error = error;\n        }\n      }\n      if (!((_this7$module$content = _this7.module.contents) !== null && _this7$module$content !== void 0 && _this7$module$content.length) || refresh && !contentsAlreadyLoaded) {\n        // Try to load the contents.\n        const ignoreCache = refresh && CoreNetwork.isOnline();\n        try {\n          yield CoreCourse.loadModuleContents(_this7.module, undefined, undefined, false, ignoreCache);\n        } catch (error) {\n          // Error loading contents. If we ignored cache, try to get the cached value.\n          if (ignoreCache && !_this7.module.contents) {\n            yield CoreCourse.loadModuleContents(_this7.module);\n          } else if (!_this7.module.contents) {\n            // Not able to load contents, throw the error.\n            throw error;\n          }\n        }\n      }\n      return result;\n    })();\n  }\n  /**\n   * The completion of the modules has changed.\n   *\n   * @returns Promise resolved when done.\n   */\n  onCompletionChange() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      var _this8$debouncedUpdat;\n      // Update the module data after a while.\n      (_this8$debouncedUpdat = _this8.debouncedUpdateModule) === null || _this8$debouncedUpdat === void 0 || _this8$debouncedUpdat.call(_this8);\n    })();\n  }\n  /**\n   * Fetch module.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchModule() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const previousCompletion = _this9.module.completiondata;\n      const module = yield CoreCourse.getModule(_this9.module.id, _this9.courseId);\n      yield CoreCourseHelper.loadModuleOfflineCompletion(_this9.courseId, module);\n      _this9.module = module;\n      // @todo: Temporary fix to update course page completion. This should be refactored in MOBILE-4326.\n      if (previousCompletion && module.completiondata && previousCompletion.state !== module.completiondata.state) {\n        yield CoreUtils.ignoreErrors(CoreCourse.invalidateSections(_this9.courseId));\n        CoreEvents.trigger(CoreEvents.COMPLETION_MODULE_VIEWED, {\n          courseId: _this9.courseId,\n          cmId: module.completiondata.cmid\n        });\n      }\n    })();\n  }\n  /**\n   * Opens a module summary page.\n   */\n  openModuleSummary() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this10.module) {\n        return;\n      }\n      const data = yield CoreDomUtils.openSideModal({\n        component: CoreCourseModuleSummaryComponent,\n        componentProps: {\n          moduleId: _this10.module.id,\n          module: _this10.module,\n          description: _this10.description,\n          component: _this10.component,\n          courseId: _this10.courseId,\n          hasOffline: _this10.hasOffline,\n          displayOptions: {\n            // Show description on summary if not shown on the page.\n            displayDescription: !_this10.displayDescription\n          }\n        }\n      });\n      if (data) {\n        if (!_this10.showLoading && (data.action == 'refresh' || data.action == 'sync')) {\n          _this10.showLoading = true;\n          try {\n            yield _this10.doRefresh(undefined, data.action == 'sync');\n          } finally {\n            _this10.showLoading = false;\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * Finish first successful fetch.\n   *\n   * @returns Promise resolved when done.\n   */\n  performFinishSuccessfulFetch() {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      _this11.storeModuleViewed();\n      // Log activity now.\n      try {\n        yield _this11.logActivity();\n        if (_this11.checkCompletionAfterLog) {\n          _this11.checkCompletion();\n        }\n      } catch (_unused) {\n        // Ignore errors.\n      }\n    })();\n  }\n  /**\n   * Store module as viewed.\n   *\n   * @returns Promise resolved when done.\n   */\n  storeModuleViewed() {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreCourse.storeModuleViewed(_this12.courseId, _this12.module.id, {\n        sectionId: _this12.module.section\n      });\n    })();\n  }\n  /**\n   * Log activity.\n   *\n   * @returns Promise resolved when done.\n   */\n  logActivity() {\n    return _asyncToGenerator(function* () {})();\n  } // To be overridden.\n  /**\n   * Log activity view in analytics.\n   *\n   * @param wsName Name of the WS used.\n   * @param options Other data to send.\n   * @returns Promise resolved when done.\n   */\n  analyticsLogEvent(wsName, options = {}) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      let url;\n      if (options.sendUrl === true || options.sendUrl === undefined) {\n        if (typeof options.url === 'string') {\n          url = options.url;\n        } else if (_this13.pluginName) {\n          // Use default value.\n          url = CoreUrlUtils.addParamsToUrl(`/mod/${_this13.pluginName}/view.php?id=${_this13.module.id}`, options.data);\n        }\n      }\n      yield CoreAnalytics.logEvent({\n        type: CoreAnalyticsEventType.VIEW_ITEM,\n        ws: wsName,\n        name: options.name || _this13.module.name,\n        data: _objectSpread({\n          id: _this13.module.instance,\n          category: _this13.pluginName\n        }, options.data),\n        url\n      });\n    })();\n  }\n  /**\n   * Check the module completion.\n   */\n  checkCompletion() {\n    CoreCourse.checkModuleCompletion(this.courseId, this.module.completiondata);\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$statusObserver, _this$completionObser;\n    this.isDestroyed = true;\n    (_this$statusObserver = this.statusObserver) === null || _this$statusObserver === void 0 || _this$statusObserver.off();\n    (_this$completionObser = this.completionObserver) === null || _this$completionObser === void 0 || _this$completionObser.off();\n  }\n  /**\n   * User entered the page that contains the component. This function should be called by the page that contains this component.\n   */\n  ionViewDidEnter() {\n    this.isCurrentView = true;\n  }\n  /**\n   * User left the page that contains the component. This function should be called by the page that contains this component.\n   */\n  ionViewDidLeave() {\n    this.isCurrentView = false;\n  }\n  /**\n   * User will enter the page that contains the component. This function should be called by the page that contains the component.\n   */\n  ionViewWillEnter() {\n    // To be overridden.\n  }\n  /**\n   * User will leave the page that contains the component. This function should be called by the page that contains the component.\n   */\n  ionViewWillLeave() {\n    // To be overridden.\n  }\n}\n_class = CoreCourseModuleMainResourceComponent;\n_class.ɵfac = function CoreCourseModuleMainResourceComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject('', 8), i0.ɵɵdirectiveInject(i1.CoreCourseContentsPage));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    module: \"module\",\n    courseId: \"courseId\"\n  },\n  outputs: {\n    dataRetrieved: \"dataRetrieved\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function CoreCourseModuleMainResourceComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreConstants","EventEmitter","CoreNetwork","CoreSites","CoreDomUtils","CoreTextUtils","CoreUtils","Translate","CoreEvents","CoreLogger","CoreCourseModuleSummaryComponent","CoreCourse","CoreCourseHelper","CoreCourseModuleDelegate","CoreCourseModulePrefetchDelegate","CoreAnalytics","CoreAnalyticsEventType","CoreUrlUtils","CoreTime","CoreCourseModuleMainResourceComponent","constructor","loggerName","courseContentsPage","dataRetrieved","showLoading","hasOffline","fetchContentDefaultError","isCurrentView","showCompletion","displayDescription","isDestroyed","checkCompletionAfterLog","logger","getInstance","finishSuccessfulFetch","once","performFinishSuccessfulFetch","ngOnInit","_this","_asyncToGenerator","siteId","getCurrentSiteId","description","module","componentId","id","courseId","course","getRequiredCurrentSite","isVersionGreaterEqualThan","loadModuleOfflineCompletion","completionObserver","on","COMPLETION_MODULE_VIEWED","_ref","data","cmId","invalidateModule","fetchModule","_x","apply","arguments","debouncedUpdateModule","debounce","doRefresh","refresher","showErrors","_this2","displayRefresherInSingleActivity","modname","ignoreErrors","refreshContent","complete","sync","_this3","Promise","all","invalidateContent","undefined","loadContent","fetchContent","refresh","_this4","error","_CoreSites$getCurrent","getCurrentSite","isOfflineDisabled","isNotFoundError","showErrorModalDefault","getErrorMessageFromError","instant","getPackageLastDownloaded","_this5","lastDownloaded","getModulePackageLastDownloaded","component","downloadTimeReadable","ucFirst","isPrefetched","currentStatus","NOT_DOWNLOADABLE","NOT_DOWNLOADED","getErrorDownloadingSomeFilesMessage","multiLine","buildSeveralParagraphsMessage","showErrorDownloadingSomeFiles","showErrorModal","showStatus","status","previousStatus","setStatusListener","_this6","statusObserver","PACKAGE_STATUS_CHANGED","invalidateCourseUpdates","getModuleStatus","downloadResourceIfNeeded","contentsAlreadyLoaded","_this7","_this7$module$content","result","failed","DOWNLOADED","downloadModule","contents","length","ignoreCache","isOnline","loadModuleContents","onCompletionChange","_this8","_this8$debouncedUpdat","call","_this9","previousCompletion","completiondata","getModule","state","invalidateSections","trigger","cmid","openModuleSummary","_this10","openSideModal","componentProps","moduleId","displayOptions","action","_this11","storeModuleViewed","logActivity","checkCompletion","_unused","_this12","sectionId","section","analyticsLogEvent","wsName","options","_this13","url","sendUrl","pluginName","addParamsToUrl","logEvent","type","VIEW_ITEM","ws","name","_objectSpread","instance","category","checkModuleCompletion","ngOnDestroy","_this$statusObserver","_this$completionObser","off","ionViewDidEnter","ionViewDidLeave","ionViewWillEnter","ionViewWillLeave","i0","ɵɵdirectiveInject","i1","CoreCourseContentsPage","selectors","inputs","outputs","decls","vars","template","CoreCourseModuleMainResourceComponent_Template","rf","ctx","encapsulation"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/classes/main-resource-component.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreConstants } from '@/core/constants';\nimport { OnInit, OnDestroy, Input, Output, EventEmitter, Component, Optional, Inject } from '@angular/core';\nimport { CoreAnyError } from '@classes/errors/error';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\n\nimport { CoreTextErrorObject, CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreCourseModuleSummaryComponent, CoreCourseModuleSummaryResult } from '../components/module-summary/module-summary';\nimport { CoreCourseContentsPage } from '../pages/contents/contents';\nimport { CoreCourse } from '../services/course';\nimport { CoreCourseHelper, CoreCourseModuleData } from '../services/course-helper';\nimport { CoreCourseModuleDelegate, CoreCourseModuleMainComponent } from '../services/module-delegate';\nimport { CoreCourseModulePrefetchDelegate } from '../services/module-prefetch-delegate';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreTime } from '@singletons/time';\n\n/**\n * Result of a resource download.\n */\nexport type CoreCourseResourceDownloadResult = {\n    failed?: boolean; // Whether the download has failed.\n    error?: string | CoreTextErrorObject; // The error in case it failed.\n};\n\n/**\n * Template class to easily create CoreCourseModuleMainComponent of resources (or activities without syncing).\n */\n@Component({\n    template: '',\n})\nexport class CoreCourseModuleMainResourceComponent implements OnInit, OnDestroy, CoreCourseModuleMainComponent {\n\n    @Input() module!: CoreCourseModuleData; // The module of the component.\n    @Input() courseId!: number; // Course ID the component belongs to.\n    @Output() dataRetrieved = new EventEmitter<unknown>(); // Called to notify changes the index page from the main component.\n\n    showLoading = true; // Whether to show loading.\n    component?: string; // Component name.\n    componentId?: number; // Component ID.\n    hasOffline = false; // Resources don't have any data to sync.\n    description?: string; // Module description.\n    pluginName?: string; // The plugin name without \"mod_\", e.g. assign or book.\n\n    protected fetchContentDefaultError = 'core.course.errorgetmodule'; // Default error to show when loading contents.\n    protected isCurrentView = false; // Whether the component is in the current view.\n    protected siteId?: string; // Current Site ID.\n    protected statusObserver?: CoreEventObserver; // Observer of package status. Only if setStatusListener is called.\n    currentStatus?: string; // The current status of the module. Only if setStatusListener is called.\n    downloadTimeReadable?: string; // Last download time in a readable format. Only if setStatusListener is called.\n\n    protected completionObserver?: CoreEventObserver;\n    protected logger: CoreLogger;\n    protected debouncedUpdateModule?: () => void; // Update the module after a certain time.\n    protected showCompletion = false; // Whether to show completion inside the activity.\n    protected displayDescription = true; // Wether to show Module description on module page, and not on summary or the contrary.\n    protected isDestroyed = false; // Whether the component is destroyed.\n    protected checkCompletionAfterLog = true; // Whether to check if completion has changed after calling logActivity.\n    protected finishSuccessfulFetch: () => void;\n\n    constructor(\n        @Optional() @Inject('') loggerName: string = 'CoreCourseModuleMainResourceComponent',\n        protected courseContentsPage?: CoreCourseContentsPage,\n    ) {\n        this.logger = CoreLogger.getInstance(loggerName);\n\n        this.finishSuccessfulFetch = CoreTime.once(() => this.performFinishSuccessfulFetch());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.description = this.module.description;\n        this.componentId = this.module.id;\n        this.courseId = this.courseId || this.module.course;\n        this.showCompletion = !!CoreSites.getRequiredCurrentSite().isVersionGreaterEqualThan('3.11');\n\n        if (this.showCompletion) {\n            CoreCourseHelper.loadModuleOfflineCompletion(this.courseId, this.module);\n\n            this.completionObserver = CoreEvents.on(CoreEvents.COMPLETION_MODULE_VIEWED, async (data) => {\n                if (data && data.cmId == this.module.id) {\n                    await CoreCourse.invalidateModule(this.module.id);\n\n                    this.fetchModule();\n                }\n            });\n\n            this.debouncedUpdateModule = CoreUtils.debounce(() => {\n                this.fetchModule();\n            }, 10000);\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @param showErrors If show errors to the user of hide them.\n     * @returns Promise resolved when done.\n     */\n    async doRefresh(refresher?: HTMLIonRefresherElement | null, showErrors = false): Promise<void> {\n        if (!this.module) {\n            // Module can be undefined if course format changes from single activity to weekly/topics.\n            return;\n        }\n\n        // If it's a single activity course and the refresher is displayed within the component,\n        // call doRefresh on the section page to refresh the course data.\n        if (this.courseContentsPage && !CoreCourseModuleDelegate.displayRefresherInSingleActivity(this.module.modname)) {\n            await CoreUtils.ignoreErrors(this.courseContentsPage.doRefresh());\n        }\n\n        await CoreUtils.ignoreErrors(this.refreshContent(true, showErrors));\n\n        refresher?.complete();\n    }\n\n    /**\n     * Perform the refresh content function.\n     *\n     * @param sync If the refresh needs syncing.\n     * @param showErrors Wether to show errors to the user or hide them.\n     * @returns Resolved when done.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected async refreshContent(sync: boolean = false, showErrors: boolean = false): Promise<void> {\n        if (!this.module) {\n            // This can happen if course format changes from single activity to weekly/topics.\n            return;\n        }\n\n        await CoreUtils.ignoreErrors(Promise.all([\n            this.invalidateContent(),\n            this.showCompletion ? CoreCourse.invalidateModule(this.module.id) : undefined,\n        ]));\n\n        if (this.showCompletion) {\n            this.fetchModule();\n        }\n\n        await this.loadContent(true);\n    }\n\n    /**\n     * Perform the invalidate content function.\n     *\n     * @returns Resolved when done.\n     */\n    protected async invalidateContent(): Promise<void> {\n        return;\n    }\n\n    /**\n     * Download the component contents.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @returns Promise resolved when done.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected async fetchContent(refresh?: boolean): Promise<void> {\n        return;\n    }\n\n    /**\n     * Loads the component contents and shows the corresponding error.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @returns Promise resolved when done.\n     */\n    protected async loadContent(refresh?: boolean): Promise<void> {\n        if (!this.module) {\n            // This can happen if course format changes from single activity to weekly/topics.\n            return;\n        }\n\n        try {\n            await this.fetchContent(refresh);\n\n            this.finishSuccessfulFetch();\n        } catch (error) {\n            if (!refresh && !CoreSites.getCurrentSite()?.isOfflineDisabled() && this.isNotFoundError(error)) {\n                // Module not found, retry without using cache.\n                return await this.refreshContent();\n            }\n\n            CoreDomUtils.showErrorModalDefault(error, this.fetchContentDefaultError, true);\n        } finally {\n            this.showLoading = false;\n        }\n    }\n\n    /**\n     * Check if an error is a \"module not found\" error.\n     *\n     * @param error Error.\n     * @returns Whether the error is a \"module not found\" error.\n     */\n    protected isNotFoundError(error: CoreAnyError): boolean {\n        return CoreTextUtils.getErrorMessageFromError(error) === Translate.instant('core.course.modulenotfound');\n    }\n\n    /**\n     * Updage package last downloaded.\n     */\n    protected async getPackageLastDownloaded(): Promise<void> {\n        if (!this.module) {\n            return;\n        }\n\n        const lastDownloaded =\n                await CoreCourseHelper.getModulePackageLastDownloaded(this.module, this.component);\n\n        this.downloadTimeReadable = CoreTextUtils.ucFirst(lastDownloaded.downloadTimeReadable);\n    }\n\n    /**\n     * Check if the module is prefetched or being prefetched.\n     * To make it faster, just use the data calculated by setStatusListener.\n     *\n     * @returns If module has been prefetched.\n     */\n    protected isPrefetched(): boolean {\n        return this.currentStatus != CoreConstants.NOT_DOWNLOADABLE && this.currentStatus != CoreConstants.NOT_DOWNLOADED;\n    }\n\n    /**\n     * Get message about an error occurred while downloading files.\n     *\n     * @param error The specific error.\n     * @param multiLine Whether to put each message in a different paragraph or in a single line.\n     * @returns Error text message.\n     */\n    protected getErrorDownloadingSomeFilesMessage(error: string | CoreTextErrorObject, multiLine?: boolean): string {\n        if (multiLine) {\n            return CoreTextUtils.buildSeveralParagraphsMessage([\n                Translate.instant('core.errordownloadingsomefiles'),\n                error,\n            ]);\n        } else {\n            error = CoreTextUtils.getErrorMessageFromError(error) || '';\n\n            return Translate.instant('core.errordownloadingsomefiles') + (error ? ' ' + error : '');\n        }\n    }\n\n    /**\n     * Show an error occurred while downloading files.\n     *\n     * @param error The specific error.\n     */\n    protected showErrorDownloadingSomeFiles(error: string | CoreTextErrorObject): void {\n        CoreDomUtils.showErrorModal(this.getErrorDownloadingSomeFilesMessage(error, true));\n    }\n\n    /**\n     * Displays some data based on the current status.\n     *\n     * @param status The current status.\n     * @param previousStatus The previous status. If not defined, there is no previous status.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected showStatus(status: string, previousStatus?: string): void {\n        // To be overridden.\n    }\n\n    /**\n     * Watch for changes on the status.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @returns Promise resolved when done.\n     */\n    protected async setStatusListener(refresh?: boolean): Promise<void> {\n        if (this.statusObserver === undefined) {\n            // Listen for changes on this module status.\n            this.statusObserver = CoreEvents.on(CoreEvents.PACKAGE_STATUS_CHANGED, (data) => {\n                if (data.componentId != this.module.id || data.component != this.component) {\n                    return;\n                }\n\n                // The status has changed, update it.\n                const previousStatus = this.currentStatus;\n                this.currentStatus = data.status;\n\n                this.getPackageLastDownloaded();\n\n                this.showStatus(this.currentStatus, previousStatus);\n            }, this.siteId);\n        } else if (!refresh) {\n            return;\n        }\n\n        if (refresh) {\n            await CoreUtils.ignoreErrors(CoreCourseModulePrefetchDelegate.invalidateCourseUpdates(this.courseId));\n        }\n\n        // Also, get the current status.\n        const status = await CoreCourseModulePrefetchDelegate.getModuleStatus(this.module, this.courseId, undefined, refresh);\n\n        this.currentStatus = status;\n\n        this.getPackageLastDownloaded();\n\n        this.showStatus(status);\n    }\n\n    /**\n     * Download a resource if needed.\n     * If the download call fails the promise won't be rejected, but the error will be included in the returned object.\n     * If module.contents cannot be loaded then the Promise will be rejected.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @returns Promise resolved when done.\n     */\n    protected async downloadResourceIfNeeded(\n        refresh?: boolean,\n        contentsAlreadyLoaded?: boolean,\n    ): Promise<CoreCourseResourceDownloadResult> {\n\n        const result: CoreCourseResourceDownloadResult = {\n            failed: false,\n        };\n\n        // Get module status to determine if it needs to be downloaded.\n        await this.setStatusListener(refresh);\n\n        if (this.currentStatus != CoreConstants.DOWNLOADED) {\n            // Download content. This function also loads module contents if needed.\n            try {\n                await CoreCourseModulePrefetchDelegate.downloadModule(this.module, this.courseId);\n\n                // If we reach here it means the download process already loaded the contents, no need to do it again.\n                contentsAlreadyLoaded = true;\n            } catch (error) {\n                // Mark download as failed but go on since the main files could have been downloaded.\n                result.failed = true;\n                result.error = error;\n            }\n        }\n\n        if (!this.module.contents?.length || (refresh && !contentsAlreadyLoaded)) {\n            // Try to load the contents.\n            const ignoreCache = refresh && CoreNetwork.isOnline();\n\n            try {\n                await CoreCourse.loadModuleContents(this.module, undefined, undefined, false, ignoreCache);\n            } catch (error) {\n                // Error loading contents. If we ignored cache, try to get the cached value.\n                if (ignoreCache && !this.module.contents) {\n                    await CoreCourse.loadModuleContents(this.module);\n                } else if (!this.module.contents) {\n                    // Not able to load contents, throw the error.\n                    throw error;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * The completion of the modules has changed.\n     *\n     * @returns Promise resolved when done.\n     */\n    async onCompletionChange(): Promise<void> {\n        // Update the module data after a while.\n        this.debouncedUpdateModule?.();\n    }\n\n    /**\n     * Fetch module.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchModule(): Promise<void> {\n        const previousCompletion = this.module.completiondata;\n\n        const module = await CoreCourse.getModule(this.module.id, this.courseId);\n\n        await CoreCourseHelper.loadModuleOfflineCompletion(this.courseId, module);\n\n        this.module = module;\n\n        // @todo: Temporary fix to update course page completion. This should be refactored in MOBILE-4326.\n        if (previousCompletion && module.completiondata && previousCompletion.state !== module.completiondata.state) {\n            await CoreUtils.ignoreErrors(CoreCourse.invalidateSections(this.courseId));\n\n            CoreEvents.trigger(CoreEvents.COMPLETION_MODULE_VIEWED, {\n                courseId: this.courseId,\n                cmId: module.completiondata.cmid,\n            });\n        }\n    }\n\n    /**\n     * Opens a module summary page.\n     */\n    async openModuleSummary(): Promise<void> {\n        if (!this.module) {\n            return;\n        }\n\n        const data = await CoreDomUtils.openSideModal<CoreCourseModuleSummaryResult>({\n            component: CoreCourseModuleSummaryComponent,\n            componentProps: {\n                moduleId: this.module.id,\n                module: this.module,\n                description: this.description,\n                component: this.component,\n                courseId: this.courseId,\n                hasOffline: this.hasOffline,\n                displayOptions: {\n                    // Show description on summary if not shown on the page.\n                    displayDescription: !this.displayDescription,\n                },\n            },\n        });\n\n        if (data) {\n            if (!this.showLoading && (data.action == 'refresh' || data.action == 'sync')) {\n                this.showLoading = true;\n                try {\n                    await this.doRefresh(undefined, data.action == 'sync');\n                } finally {\n                    this.showLoading = false;\n                }\n            }\n        }\n    }\n\n    /**\n     * Finish first successful fetch.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async performFinishSuccessfulFetch(): Promise<void> {\n        this.storeModuleViewed();\n\n        // Log activity now.\n        try {\n            await this.logActivity();\n\n            if (this.checkCompletionAfterLog) {\n                this.checkCompletion();\n            }\n        } catch {\n            // Ignore errors.\n        }\n    }\n\n    /**\n     * Store module as viewed.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async storeModuleViewed(): Promise<void> {\n        await CoreCourse.storeModuleViewed(this.courseId, this.module.id, { sectionId: this.module.section });\n    }\n\n    /**\n     * Log activity.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async logActivity(): Promise<void> {\n        // To be overridden.\n    }\n\n    /**\n     * Log activity view in analytics.\n     *\n     * @param wsName Name of the WS used.\n     * @param options Other data to send.\n     * @returns Promise resolved when done.\n     */\n    async analyticsLogEvent(\n        wsName: string,\n        options: AnalyticsLogEventOptions = {},\n    ): Promise<void> {\n        let url: string | undefined;\n        if (options.sendUrl === true || options.sendUrl === undefined) {\n            if (typeof options.url === 'string') {\n                url = options.url;\n            } else if (this.pluginName) {\n                // Use default value.\n                url = CoreUrlUtils.addParamsToUrl(`/mod/${this.pluginName}/view.php?id=${this.module.id}`, options.data);\n            }\n        }\n\n        await CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: wsName,\n            name: options.name || this.module.name,\n            data: { id: this.module.instance, category: this.pluginName, ...options.data },\n            url,\n        });\n    }\n\n    /**\n     * Check the module completion.\n     */\n    protected checkCompletion(): void {\n        CoreCourse.checkModuleCompletion(this.courseId, this.module.completiondata);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.isDestroyed = true;\n        this.statusObserver?.off();\n        this.completionObserver?.off();\n    }\n\n    /**\n     * User entered the page that contains the component. This function should be called by the page that contains this component.\n     */\n    ionViewDidEnter(): void {\n        this.isCurrentView = true;\n    }\n\n    /**\n     * User left the page that contains the component. This function should be called by the page that contains this component.\n     */\n    ionViewDidLeave(): void {\n        this.isCurrentView = false;\n    }\n\n    /**\n     * User will enter the page that contains the component. This function should be called by the page that contains the component.\n     */\n    ionViewWillEnter(): void {\n        // To be overridden.\n    }\n\n    /**\n     * User will leave the page that contains the component. This function should be called by the page that contains the component.\n     */\n    ionViewWillLeave(): void {\n        // To be overridden.\n    }\n\n}\n\ntype AnalyticsLogEventOptions = {\n    data?: Record<string, unknown>; // Other data to send.\n    name?: string; // Name to send, defaults to activity name.\n    url?: string; // URL to use. If not set and sendUrl is true, a default value will be used.\n    sendUrl?: boolean; // Whether to pass a URL to analytics. Defaults to true.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}