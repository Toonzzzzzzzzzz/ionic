{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Tracks CoreRoutedItemsManagerSource instances to reuse between pages.\n */\nexport class CoreRoutedItemsManagerSourcesTracker {\n  /**\n   * Retrieve an instance given the constructor arguments or id.\n   *\n   * @param constructor Source constructor.\n   * @param constructorArgumentsOrId Arguments to create a new instance, or the id if it's known.\n   * @returns Source.\n   */\n  static getSource(constructor, constructorArgumentsOrId) {\n    var _constructorInstances, _constructorInstances2;\n    const id = typeof constructorArgumentsOrId === 'string' ? constructorArgumentsOrId : constructor.getSourceId(...constructorArgumentsOrId);\n    const constructorInstances = this.getConstructorInstances(constructor);\n    return (_constructorInstances = (_constructorInstances2 = constructorInstances[id]) === null || _constructorInstances2 === void 0 ? void 0 : _constructorInstances2.instance) !== null && _constructorInstances !== void 0 ? _constructorInstances : null;\n  }\n  /**\n   * Create an instance of the given source or retrieve one if it's already in use.\n   *\n   * @param constructor Source constructor.\n   * @param constructorArguments Arguments to create a new instance, used to find out if an instance already exists.\n   * @returns Source.\n   */\n  static getOrCreateSource(constructor, constructorArguments) {\n    var _this$getSource;\n    const id = constructor.getSourceId(...constructorArguments);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (_this$getSource = this.getSource(constructor, id)) !== null && _this$getSource !== void 0 ? _this$getSource : this.createInstance(id, constructor, constructorArguments);\n  }\n  /**\n   * Track an object referencing a source.\n   *\n   * @param source Source.\n   * @param reference Object referncing this source.\n   */\n  static addReference(source, reference) {\n    const constructorInstances = this.getConstructorInstances(source.constructor);\n    const instanceId = this.instanceIds.get(source);\n    if (instanceId === undefined) {\n      return;\n    }\n    if (!(instanceId in constructorInstances)) {\n      constructorInstances[instanceId] = {\n        instance: source,\n        references: []\n      };\n    }\n    constructorInstances[instanceId].references.push(reference);\n  }\n  /**\n   * Remove a reference to an existing source, freeing it from memory if it's not referenced elsewhere.\n   *\n   * @param source Source.\n   * @param reference Object that was referncing this source.\n   */\n  static removeReference(source, reference) {\n    var _constructorInstances3, _constructorInstances4;\n    const constructorInstances = this.instances.get(source.constructor);\n    const instanceId = this.instanceIds.get(source);\n    const index = (_constructorInstances3 = constructorInstances === null || constructorInstances === void 0 || (_constructorInstances4 = constructorInstances[instanceId !== null && instanceId !== void 0 ? instanceId : '']) === null || _constructorInstances4 === void 0 ? void 0 : _constructorInstances4.references.indexOf(reference)) !== null && _constructorInstances3 !== void 0 ? _constructorInstances3 : -1;\n    if (!constructorInstances || instanceId === undefined || index === -1) {\n      return;\n    }\n    constructorInstances[instanceId].references.splice(index, 1);\n    if (constructorInstances[instanceId].references.length === 0) {\n      delete constructorInstances[instanceId];\n    }\n  }\n  /**\n   * Get instances for a given constructor.\n   *\n   * @param constructor Source constructor.\n   * @returns Constructor instances.\n   */\n  static getConstructorInstances(constructor) {\n    var _this$instances$get;\n    return (_this$instances$get = this.instances.get(constructor)) !== null && _this$instances$get !== void 0 ? _this$instances$get : this.initialiseConstructorInstances(constructor);\n  }\n  /**\n   * Initialise instances for a given constructor.\n   *\n   * @param constructor Source constructor.\n   * @returns Constructor instances.\n   */\n  static initialiseConstructorInstances(constructor) {\n    const constructorInstances = {};\n    this.instances.set(constructor, constructorInstances);\n    return constructorInstances;\n  }\n  /**\n   * Create a new source instance.\n   *\n   * @param id Source id.\n   * @param constructor Source constructor.\n   * @param constructorArguments Source constructor arguments.\n   * @returns Source instance.\n   */\n  static createInstance(id, constructor, constructorArguments) {\n    const instance = new constructor(...constructorArguments);\n    this.instanceIds.set(instance, id);\n    return instance;\n  }\n}\n_class = CoreRoutedItemsManagerSourcesTracker;\n_class.instances = new WeakMap();\n_class.instanceIds = new WeakMap();","map":{"version":3,"names":["CoreRoutedItemsManagerSourcesTracker","getSource","constructor","constructorArgumentsOrId","_constructorInstances","_constructorInstances2","id","getSourceId","constructorInstances","getConstructorInstances","instance","getOrCreateSource","constructorArguments","_this$getSource","createInstance","addReference","source","reference","instanceId","instanceIds","get","undefined","references","push","removeReference","_constructorInstances3","_constructorInstances4","instances","index","indexOf","splice","length","_this$instances$get","initialiseConstructorInstances","set","_class","WeakMap"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/items-management/routed-items-manager-sources-tracker.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\n\ntype SourceConstructor<T extends CoreRoutedItemsManagerSource = CoreRoutedItemsManagerSource> = {\n    getSourceId(...args: unknown[]): string;\n    new (...args: unknown[]): T;\n};\ntype SourceConstuctorInstance<T> = T extends { new(...args: unknown[]): infer P } ? P : never;\ntype InstanceTracking = { instance: CoreRoutedItemsManagerSource; references: unknown[] };\ntype Instances = Record<string, InstanceTracking>;\n\n/**\n * Tracks CoreRoutedItemsManagerSource instances to reuse between pages.\n */\nexport class CoreRoutedItemsManagerSourcesTracker {\n\n    private static instances: WeakMap<SourceConstructor, Instances> = new WeakMap();\n    private static instanceIds: WeakMap<CoreRoutedItemsManagerSource, string> = new WeakMap();\n\n    /**\n     * Retrieve an instance given the constructor arguments or id.\n     *\n     * @param constructor Source constructor.\n     * @param constructorArgumentsOrId Arguments to create a new instance, or the id if it's known.\n     * @returns Source.\n     */\n    static getSource<T extends CoreRoutedItemsManagerSource, C extends SourceConstructor<T>>(\n        constructor: C,\n        constructorArgumentsOrId: ConstructorParameters<C> | string,\n    ): SourceConstuctorInstance<C> | null {\n        const id = typeof constructorArgumentsOrId === 'string'\n            ? constructorArgumentsOrId\n            : constructor.getSourceId(...constructorArgumentsOrId);\n        const constructorInstances = this.getConstructorInstances(constructor);\n\n        return constructorInstances[id]?.instance as SourceConstuctorInstance<C>\n            ?? null;\n    }\n\n    /**\n     * Create an instance of the given source or retrieve one if it's already in use.\n     *\n     * @param constructor Source constructor.\n     * @param constructorArguments Arguments to create a new instance, used to find out if an instance already exists.\n     * @returns Source.\n     */\n    static getOrCreateSource<T extends CoreRoutedItemsManagerSource, C extends SourceConstructor<T>>(\n        constructor: C,\n        constructorArguments: ConstructorParameters<C>,\n    ): SourceConstuctorInstance<C> {\n        const id = constructor.getSourceId(...constructorArguments);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return this.getSource(constructor, id) as any\n            ?? this.createInstance(id, constructor, constructorArguments);\n    }\n\n    /**\n     * Track an object referencing a source.\n     *\n     * @param source Source.\n     * @param reference Object referncing this source.\n     */\n    static addReference(source: CoreRoutedItemsManagerSource, reference: unknown): void {\n        const constructorInstances = this.getConstructorInstances(source.constructor as SourceConstructor);\n        const instanceId = this.instanceIds.get(source);\n\n        if (instanceId === undefined) {\n            return;\n        }\n\n        if (!(instanceId in constructorInstances)) {\n            constructorInstances[instanceId] = {\n                instance: source,\n                references: [],\n            };\n        }\n\n        constructorInstances[instanceId].references.push(reference);\n    }\n\n    /**\n     * Remove a reference to an existing source, freeing it from memory if it's not referenced elsewhere.\n     *\n     * @param source Source.\n     * @param reference Object that was referncing this source.\n     */\n    static removeReference(source: CoreRoutedItemsManagerSource, reference: unknown): void {\n        const constructorInstances = this.instances.get(source.constructor as SourceConstructor);\n        const instanceId = this.instanceIds.get(source);\n        const index = constructorInstances?.[instanceId ?? '']?.references.indexOf(reference) ?? -1;\n\n        if (!constructorInstances || instanceId === undefined || index === -1) {\n            return;\n        }\n\n        constructorInstances[instanceId].references.splice(index, 1);\n\n        if (constructorInstances[instanceId].references.length === 0) {\n            delete constructorInstances[instanceId];\n        }\n    }\n\n    /**\n     * Get instances for a given constructor.\n     *\n     * @param constructor Source constructor.\n     * @returns Constructor instances.\n     */\n    private static getConstructorInstances(constructor: SourceConstructor): Instances {\n        return this.instances.get(constructor)\n            ?? this.initialiseConstructorInstances(constructor);\n    }\n\n    /**\n     * Initialise instances for a given constructor.\n     *\n     * @param constructor Source constructor.\n     * @returns Constructor instances.\n     */\n    private static initialiseConstructorInstances(constructor: SourceConstructor): Instances {\n        const constructorInstances = {};\n\n        this.instances.set(constructor, constructorInstances);\n\n        return constructorInstances;\n    }\n\n    /**\n     * Create a new source instance.\n     *\n     * @param id Source id.\n     * @param constructor Source constructor.\n     * @param constructorArguments Source constructor arguments.\n     * @returns Source instance.\n     */\n    private static createInstance<T extends CoreRoutedItemsManagerSource>(\n        id: string,\n        constructor: SourceConstructor<T>,\n        constructorArguments: ConstructorParameters<SourceConstructor<T>>,\n    ): T {\n        const instance = new constructor(...constructorArguments);\n\n        this.instanceIds.set(instance, id);\n\n        return instance;\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}