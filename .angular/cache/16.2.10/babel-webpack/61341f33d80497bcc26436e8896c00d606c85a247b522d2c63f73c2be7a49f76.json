{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreNavigator } from '@services/navigator';\nimport { makeSingleton } from '@singletons';\nimport { AddonBadges } from '../badges';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to treat links to user badges page.\n */\nexport class AddonBadgesMyBadgesLinkHandlerService extends CoreContentLinksHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonBadgesMyBadgesLinkHandler';\n    this.featureName = 'CoreUserDelegate_AddonBadges';\n    this.pattern = /\\/badges\\/mybadges\\.php/;\n  }\n  /**\n   * Get the list of actions for a link (url).\n   *\n   * @returns List of (or promise resolved with list of) actions.\n   */\n  getActions() {\n    return [{\n      action: siteId => {\n        CoreNavigator.navigateToSitePath('/badges', {\n          siteId\n        });\n      }\n    }];\n  }\n  /**\n   * Check if the handler is enabled for a certain site (site + user) and a URL.\n   * If not defined, defaults to true.\n   *\n   * @param siteId The site ID.\n   * @returns Whether the handler is enabled for the URL and site.\n   */\n  isEnabled(siteId) {\n    return _asyncToGenerator(function* () {\n      return AddonBadges.isPluginEnabled(siteId);\n    })();\n  }\n}\n_class = AddonBadgesMyBadgesLinkHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonBadgesMyBadgesLinkHandlerService_BaseFactory;\n  return function AddonBadgesMyBadgesLinkHandlerService_Factory(t) {\n    return (ɵAddonBadgesMyBadgesLinkHandlerService_BaseFactory || (ɵAddonBadgesMyBadgesLinkHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonBadgesMyBadgesLinkHandler = makeSingleton(AddonBadgesMyBadgesLinkHandlerService);","map":{"version":3,"names":["CoreContentLinksHandlerBase","CoreNavigator","makeSingleton","AddonBadges","AddonBadgesMyBadgesLinkHandlerService","constructor","name","featureName","pattern","getActions","action","siteId","navigateToSitePath","isEnabled","_asyncToGenerator","isPluginEnabled","t","factory","ɵfac","providedIn","AddonBadgesMyBadgesLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/badges/services/handlers/mybadges-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreNavigator } from '@services/navigator';\nimport { makeSingleton } from '@singletons';\nimport { AddonBadges } from '../badges';\n\n/**\n * Handler to treat links to user badges page.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonBadgesMyBadgesLinkHandlerService extends CoreContentLinksHandlerBase {\n\n    name = 'AddonBadgesMyBadgesLinkHandler';\n    featureName = 'CoreUserDelegate_AddonBadges';\n    pattern = /\\/badges\\/mybadges\\.php/;\n\n    /**\n     * Get the list of actions for a link (url).\n     *\n     * @returns List of (or promise resolved with list of) actions.\n     */\n    getActions(): CoreContentLinksAction[] {\n        return [{\n            action: (siteId: string): void => {\n                CoreNavigator.navigateToSitePath('/badges', { siteId });\n            },\n        }];\n    }\n\n    /**\n     * Check if the handler is enabled for a certain site (site + user) and a URL.\n     * If not defined, defaults to true.\n     *\n     * @param siteId The site ID.\n     * @returns Whether the handler is enabled for the URL and site.\n     */\n    async isEnabled(siteId: string): Promise<boolean> {\n        return AddonBadges.isPluginEnabled(siteId);\n    }\n\n}\n\nexport const AddonBadgesMyBadgesLinkHandler = makeSingleton(AddonBadgesMyBadgesLinkHandlerService);\n"],"mappings":";;AAeA,SAASA,2BAA2B,QAAQ,6CAA6C;AAEzF,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,WAAW,QAAQ,WAAW;;AAEvC;;;AAIA,OAAM,MAAOC,qCAAsC,SAAQJ,2BAA2B;EADtFK,YAAA;;IAGI,KAAAC,IAAI,GAAG,gCAAgC;IACvC,KAAAC,WAAW,GAAG,8BAA8B;IAC5C,KAAAC,OAAO,GAAG,yBAAyB;;EAEnC;;;;;EAKAC,UAAUA,CAAA;IACN,OAAO,CAAC;MACJC,MAAM,EAAGC,MAAc,IAAU;QAC7BV,aAAa,CAACW,kBAAkB,CAAC,SAAS,EAAE;UAAED;QAAM,CAAE,CAAC;MAC3D;KACH,CAAC;EACN;EAEA;;;;;;;EAOME,SAASA,CAACF,MAAc;IAAA,OAAAG,iBAAA;MAC1B,OAAOX,WAAW,CAACY,eAAe,CAACJ,MAAM,CAAC;IAAC;EAC/C;;SA5BSP,qCAAsC;;;;iJAAtCA,MAAqC,IAAAY,CAAA,IAArCZ,MAAqC;EAAA;AAAA;;SAArCA,MAAqC;EAAAa,OAAA,EAArCb,MAAqC,CAAAc,IAAA;EAAAC,UAAA,EADxB;AAAM;AAiChC,OAAO,MAAMC,8BAA8B,GAAGlB,aAAa,CAACE,qCAAqC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}