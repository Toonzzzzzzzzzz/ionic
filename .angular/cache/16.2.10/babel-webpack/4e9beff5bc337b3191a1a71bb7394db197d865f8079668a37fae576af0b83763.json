{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreGroups } from '@services/groups';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreIonicColorNames } from '@singletons/colors';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModAssign, AddonModAssignGradingStates, AddonModAssignSubmissionStatusValues } from '../services/assign';\nimport { AddonModAssignHelper } from '../services/assign-helper';\nimport { AddonModAssignOffline } from '../services/assign-offline';\nimport { AddonModAssignSync, AddonModAssignSyncProvider } from '../services/assign-sync';\n/**\n * Provides a collection of assignment submissions.\n */\nexport class AddonModAssignSubmissionsSource extends CoreRoutedItemsManagerSource {\n  /**\n   * @inheritdoc\n   */\n  static getSourceId(courseId, moduleId, selectedStatus) {\n    const statusId = selectedStatus !== null && selectedStatus !== void 0 ? selectedStatus : '__empty__';\n    return `submissions-${courseId}-${moduleId}-${statusId}`;\n  }\n  constructor(courseId, moduleId, selectedStatus) {\n    super();\n    this.groupId = 0;\n    this.groupInfo = {\n      groups: [],\n      separateGroups: false,\n      visibleGroups: false,\n      defaultGroupId: 0,\n      canAccessAllGroups: false\n    };\n    this.submissionsData = {\n      canviewsubmissions: false\n    };\n    this.COURSE_ID = courseId;\n    this.MODULE_ID = moduleId;\n    this.SELECTED_STATUS = selectedStatus;\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemPath(submission) {\n    return String(submission.submitid);\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemQueryParams(submission) {\n    return {\n      blindId: submission.blindid,\n      groupId: this.groupId,\n      selectedStatus: this.SELECTED_STATUS\n    };\n  }\n  /**\n   * Invalidate assignment cache.\n   */\n  invalidateCache() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield Promise.all([AddonModAssign.invalidateAssignmentData(_this.COURSE_ID), _this.assign && AddonModAssign.invalidateAllSubmissionData(_this.assign.id), _this.assign && AddonModAssign.invalidateAssignmentUserMappingsData(_this.assign.id), _this.assign && AddonModAssign.invalidateAssignmentGradesData(_this.assign.id), _this.assign && AddonModAssign.invalidateListParticipantsData(_this.assign.id)]);\n    })();\n  }\n  /**\n   * Load assignment.\n   */\n  loadAssignment(sync = false) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Get assignment data.\n      _this2.assign = yield AddonModAssign.getAssignment(_this2.COURSE_ID, _this2.MODULE_ID);\n      if (sync) {\n        try {\n          // Try to synchronize data.\n          const result = yield AddonModAssignSync.syncAssign(_this2.assign.id);\n          if (result && result.updated) {\n            CoreEvents.trigger(AddonModAssignSyncProvider.MANUAL_SYNCED, {\n              assignId: _this2.assign.id,\n              warnings: result.warnings,\n              gradesBlocked: result.gradesBlocked,\n              context: 'submission-list'\n            }, CoreSites.getCurrentSiteId());\n          }\n        } catch (_unused) {\n          // Ignore errors, probably user is offline or sync is blocked.\n        }\n      }\n      // Get assignment submissions.\n      _this2.submissionsData = yield AddonModAssign.getSubmissions(_this2.assign.id, {\n        cmId: _this2.assign.cmid\n      });\n      if (!_this2.submissionsData.canviewsubmissions) {\n        // User shouldn't be able to reach here.\n        throw new Error('Cannot view submissions.');\n      }\n      // Check if groupmode is enabled to avoid showing wrong numbers.\n      _this2.groupInfo = yield CoreGroups.getActivityGroupInfo(_this2.assign.cmid, false);\n      _this2.groupId = CoreGroups.validateGroupId(_this2.groupId, _this2.groupInfo);\n      yield _this2.reload();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  loadPageItems() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const assign = _this3.assign;\n      if (!assign) {\n        throw new Error('Can\\'t load submissions without assignment');\n      }\n      // Fetch submissions and grades.\n      let submissions = yield AddonModAssignHelper.getSubmissionsUserData(assign, _this3.submissionsData.submissions, _this3.groupId);\n      // Get assignment grades only if workflow is not enabled to check grading date.\n      let grades = !assign.markingworkflow ? yield AddonModAssign.getAssignmentGrades(assign.id, {\n        cmId: assign.cmid\n      }) : [];\n      // Remove grades (not graded) and sort by timemodified DESC to allow finding quicker.\n      grades = grades.filter(grade => parseInt(grade.grade, 10) >= 0).sort((a, b) => b.timemodified - a.timemodified);\n      // Filter the submissions to get only the ones with the right status and add some extra data.\n      if (_this3.SELECTED_STATUS == AddonModAssignListFilterName.NEED_GRADING) {\n        const promises = submissions.map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (submission) {\n            // Only show the submissions that need to be graded.\n            submission.needsGrading = yield AddonModAssign.needsSubmissionToBeGraded(submission, assign.id);\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n        yield Promise.all(promises);\n        submissions = submissions.filter(submission => submission.needsGrading);\n      } else if (_this3.SELECTED_STATUS) {\n        const searchStatus = _this3.SELECTED_STATUS == AddonModAssignListFilterName.DRAFT ? AddonModAssignSubmissionStatusValues.DRAFT : AddonModAssignSubmissionStatusValues.SUBMITTED;\n        submissions = submissions.filter(submission => submission.status == searchStatus);\n      }\n      const showSubmissions = yield Promise.all(submissions.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (submission) {\n          const gradeData = yield CoreUtils.ignoreErrors(AddonModAssignOffline.getSubmissionGrade(assign.id, submission.userid));\n          // Load offline grades.\n          const notSynced = !!gradeData && submission.timemodified < gradeData.timemodified;\n          if (!assign.markingworkflow) {\n            // Get the last grade of the submission.\n            const grade = grades.find(grade => grade.userid == submission.userid);\n            if (grade) {\n              // Override status if grade is found.\n              submission.gradingstatus = grade.timemodified < submission.timemodified ? AddonModAssignGradingStates.GRADED_FOLLOWUP_SUBMIT : AddonModAssignGradingStates.GRADED;\n            }\n          } else if (assign.teamsubmission) {\n            var _this3$submissionsDat, _individualSubmission;\n            // Try to use individual grading status instead of the group one.\n            const individualSubmission = (_this3$submissionsDat = _this3.submissionsData.submissions) === null || _this3$submissionsDat === void 0 ? void 0 : _this3$submissionsDat.find(subm => submission.userid === subm.userid);\n            submission.gradingstatus = (_individualSubmission = individualSubmission === null || individualSubmission === void 0 ? void 0 : individualSubmission.gradingstatus) !== null && _individualSubmission !== void 0 ? _individualSubmission : submission.gradingstatus;\n          }\n          submission.statusColor = AddonModAssign.getSubmissionStatusColor(submission.status);\n          submission.gradingColor = AddonModAssign.getSubmissionGradingStatusColor(submission.gradingstatus);\n          submission.statusTranslated = Translate.instant('addon.mod_assign.submissionstatus_' + submission.status);\n          if (notSynced) {\n            submission.gradingStatusTranslationId = 'addon.mod_assign.gradenotsynced';\n            submission.gradingColor = '';\n          } else if (submission.statusColor != CoreIonicColorNames.DANGER || submission.gradingColor != CoreIonicColorNames.DANGER) {\n            // Show grading status if one of the statuses is not done.\n            submission.gradingStatusTranslationId = AddonModAssign.getSubmissionGradingStatusTranslationId(submission.gradingstatus);\n          } else {\n            submission.gradingStatusTranslationId = '';\n          }\n          return submission;\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      return {\n        items: showSubmissions\n      };\n    })();\n  }\n}\n/**\n * List filter by status name.\n */\nexport var AddonModAssignListFilterName;\n(function (AddonModAssignListFilterName) {\n  AddonModAssignListFilterName[\"ALL\"] = \"\";\n  AddonModAssignListFilterName[\"NEED_GRADING\"] = \"needgrading\";\n  AddonModAssignListFilterName[\"DRAFT\"] = \"draft\";\n  AddonModAssignListFilterName[\"SUBMITTED\"] = \"submitted\";\n})(AddonModAssignListFilterName || (AddonModAssignListFilterName = {}));","map":{"version":3,"names":["CoreRoutedItemsManagerSource","CoreGroups","CoreSites","CoreUtils","Translate","CoreIonicColorNames","CoreEvents","AddonModAssign","AddonModAssignGradingStates","AddonModAssignSubmissionStatusValues","AddonModAssignHelper","AddonModAssignOffline","AddonModAssignSync","AddonModAssignSyncProvider","AddonModAssignSubmissionsSource","getSourceId","courseId","moduleId","selectedStatus","statusId","constructor","groupId","groupInfo","groups","separateGroups","visibleGroups","defaultGroupId","canAccessAllGroups","submissionsData","canviewsubmissions","COURSE_ID","MODULE_ID","SELECTED_STATUS","getItemPath","submission","String","submitid","getItemQueryParams","blindId","blindid","invalidateCache","_this","_asyncToGenerator","Promise","all","invalidateAssignmentData","assign","invalidateAllSubmissionData","id","invalidateAssignmentUserMappingsData","invalidateAssignmentGradesData","invalidateListParticipantsData","loadAssignment","sync","_this2","getAssignment","result","syncAssign","updated","trigger","MANUAL_SYNCED","assignId","warnings","gradesBlocked","context","getCurrentSiteId","_unused","getSubmissions","cmId","cmid","Error","getActivityGroupInfo","validateGroupId","reload","loadPageItems","_this3","submissions","getSubmissionsUserData","grades","markingworkflow","getAssignmentGrades","filter","grade","parseInt","sort","a","b","timemodified","AddonModAssignListFilterName","NEED_GRADING","promises","map","_ref","needsGrading","needsSubmissionToBeGraded","_x","apply","arguments","searchStatus","DRAFT","SUBMITTED","status","showSubmissions","_ref2","gradeData","ignoreErrors","getSubmissionGrade","userid","notSynced","find","gradingstatus","GRADED_FOLLOWUP_SUBMIT","GRADED","teamsubmission","_this3$submissionsDat","_individualSubmission","individualSubmission","subm","statusColor","getSubmissionStatusColor","gradingColor","getSubmissionGradingStatusColor","statusTranslated","instant","gradingStatusTranslationId","DANGER","getSubmissionGradingStatusTranslationId","_x2","items"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/classes/submissions-source.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Params } from '@angular/router';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreIonicColorNames } from '@singletons/colors';\nimport { CoreEvents } from '@singletons/events';\nimport {\n    AddonModAssign,\n    AddonModAssignAssign,\n    AddonModAssignGradingStates,\n    AddonModAssignSubmission,\n    AddonModAssignSubmissionStatusValues,\n} from '../services/assign';\nimport { AddonModAssignHelper, AddonModAssignSubmissionFormatted } from '../services/assign-helper';\nimport { AddonModAssignOffline } from '../services/assign-offline';\nimport { AddonModAssignSync, AddonModAssignSyncProvider } from '../services/assign-sync';\n\n/**\n * Provides a collection of assignment submissions.\n */\nexport class AddonModAssignSubmissionsSource extends CoreRoutedItemsManagerSource<AddonModAssignSubmissionForList> {\n\n    /**\n     * @inheritdoc\n     */\n    static getSourceId(courseId: number, moduleId: number, selectedStatus?: AddonModAssignListFilterName): string {\n        const statusId = selectedStatus ?? '__empty__';\n\n        return `submissions-${courseId}-${moduleId}-${statusId}`;\n    }\n\n    readonly COURSE_ID: number;\n    readonly MODULE_ID: number;\n    readonly SELECTED_STATUS: AddonModAssignListFilterName | undefined;\n\n    assign?: AddonModAssignAssign;\n    groupId = 0;\n    groupInfo: CoreGroupInfo = {\n        groups: [],\n        separateGroups: false,\n        visibleGroups: false,\n        defaultGroupId: 0,\n        canAccessAllGroups: false,\n    };\n\n    protected submissionsData: { canviewsubmissions: boolean; submissions?: AddonModAssignSubmission[] } = {\n        canviewsubmissions: false,\n    };\n\n    constructor(courseId: number, moduleId: number, selectedStatus?: AddonModAssignListFilterName) {\n        super();\n\n        this.COURSE_ID = courseId;\n        this.MODULE_ID = moduleId;\n        this.SELECTED_STATUS = selectedStatus;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(submission: AddonModAssignSubmissionForList): string {\n        return String(submission.submitid);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemQueryParams(submission: AddonModAssignSubmissionForList): Params {\n        return {\n            blindId: submission.blindid,\n            groupId: this.groupId,\n            selectedStatus: this.SELECTED_STATUS,\n        };\n    }\n\n    /**\n     * Invalidate assignment cache.\n     */\n    async invalidateCache(): Promise<void> {\n        await Promise.all([\n            AddonModAssign.invalidateAssignmentData(this.COURSE_ID),\n            this.assign && AddonModAssign.invalidateAllSubmissionData(this.assign.id),\n            this.assign && AddonModAssign.invalidateAssignmentUserMappingsData(this.assign.id),\n            this.assign && AddonModAssign.invalidateAssignmentGradesData(this.assign.id),\n            this.assign && AddonModAssign.invalidateListParticipantsData(this.assign.id),\n        ]);\n    }\n\n    /**\n     * Load assignment.\n     */\n    async loadAssignment(sync: boolean = false): Promise<void> {\n        // Get assignment data.\n        this.assign = await AddonModAssign.getAssignment(this.COURSE_ID, this.MODULE_ID);\n\n        if (sync) {\n            try {\n                // Try to synchronize data.\n                const result = await AddonModAssignSync.syncAssign(this.assign.id);\n\n                if (result && result.updated) {\n                    CoreEvents.trigger(\n                        AddonModAssignSyncProvider.MANUAL_SYNCED,\n                        {\n                            assignId: this.assign.id,\n                            warnings: result.warnings,\n                            gradesBlocked: result.gradesBlocked,\n                            context: 'submission-list',\n                        },\n                        CoreSites.getCurrentSiteId(),\n                    );\n                }\n            } catch {\n                // Ignore errors, probably user is offline or sync is blocked.\n            }\n        }\n\n        // Get assignment submissions.\n        this.submissionsData = await AddonModAssign.getSubmissions(this.assign.id, { cmId: this.assign.cmid });\n\n        if (!this.submissionsData.canviewsubmissions) {\n            // User shouldn't be able to reach here.\n            throw new Error('Cannot view submissions.');\n        }\n\n        // Check if groupmode is enabled to avoid showing wrong numbers.\n        this.groupInfo = await CoreGroups.getActivityGroupInfo(this.assign.cmid, false);\n\n        this.groupId = CoreGroups.validateGroupId(this.groupId, this.groupInfo);\n\n        await this.reload();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(): Promise<{ items: AddonModAssignSubmissionForList[] }> {\n        const assign = this.assign;\n\n        if (!assign) {\n            throw new Error('Can\\'t load submissions without assignment');\n        }\n\n        // Fetch submissions and grades.\n        let submissions =\n            await AddonModAssignHelper.getSubmissionsUserData(\n                assign,\n                this.submissionsData.submissions,\n                this.groupId,\n            );\n\n        // Get assignment grades only if workflow is not enabled to check grading date.\n        let grades = !assign.markingworkflow\n            ? await AddonModAssign.getAssignmentGrades(assign.id, { cmId: assign.cmid })\n            : [];\n\n        // Remove grades (not graded) and sort by timemodified DESC to allow finding quicker.\n        grades = grades.filter((grade) => parseInt(grade.grade, 10) >= 0).sort((a, b) => b.timemodified - a.timemodified);\n        // Filter the submissions to get only the ones with the right status and add some extra data.\n        if (this.SELECTED_STATUS == AddonModAssignListFilterName.NEED_GRADING) {\n            const promises: Promise<void>[] = submissions.map(async (submission: AddonModAssignSubmissionForList) => {\n                // Only show the submissions that need to be graded.\n                submission.needsGrading = await AddonModAssign.needsSubmissionToBeGraded(submission, assign.id);\n            });\n\n            await Promise.all(promises);\n\n            submissions = submissions.filter((submission: AddonModAssignSubmissionForList) => submission.needsGrading);\n        } else if (this.SELECTED_STATUS) {\n            const searchStatus = this.SELECTED_STATUS == AddonModAssignListFilterName.DRAFT\n                ? AddonModAssignSubmissionStatusValues.DRAFT\n                : AddonModAssignSubmissionStatusValues.SUBMITTED;\n\n            submissions = submissions.filter((submission: AddonModAssignSubmissionForList) => submission.status  == searchStatus);\n        }\n\n        const showSubmissions: AddonModAssignSubmissionForList[] = await Promise.all(\n            submissions.map(async (submission: AddonModAssignSubmissionForList) => {\n                const gradeData =\n                    await CoreUtils.ignoreErrors(AddonModAssignOffline.getSubmissionGrade(assign.id, submission.userid));\n\n                // Load offline grades.\n                const notSynced = !!gradeData && submission.timemodified < gradeData.timemodified;\n\n                if (!assign.markingworkflow) {\n                    // Get the last grade of the submission.\n                    const grade = grades.find((grade) => grade.userid == submission.userid);\n\n                    if (grade) {\n                        // Override status if grade is found.\n                        submission.gradingstatus = grade.timemodified < submission.timemodified\n                            ? AddonModAssignGradingStates.GRADED_FOLLOWUP_SUBMIT\n                            : AddonModAssignGradingStates.GRADED;\n                    }\n                } else if (assign.teamsubmission) {\n                    // Try to use individual grading status instead of the group one.\n                    const individualSubmission = this.submissionsData.submissions?.find(subm => submission.userid === subm.userid);\n                    submission.gradingstatus = individualSubmission?.gradingstatus ?? submission.gradingstatus;\n                }\n\n                submission.statusColor = AddonModAssign.getSubmissionStatusColor(submission.status);\n                submission.gradingColor = AddonModAssign.getSubmissionGradingStatusColor(\n                    submission.gradingstatus,\n                );\n\n                submission.statusTranslated = Translate.instant(\n                    'addon.mod_assign.submissionstatus_' + submission.status,\n                );\n\n                if (notSynced) {\n                    submission.gradingStatusTranslationId = 'addon.mod_assign.gradenotsynced';\n                    submission.gradingColor = '';\n                } else if (submission.statusColor != CoreIonicColorNames.DANGER ||\n                    submission.gradingColor != CoreIonicColorNames.DANGER) {\n                    // Show grading status if one of the statuses is not done.\n                    submission.gradingStatusTranslationId = AddonModAssign.getSubmissionGradingStatusTranslationId(\n                        submission.gradingstatus,\n                    );\n                } else {\n                    submission.gradingStatusTranslationId = '';\n                }\n\n                return submission;\n            }),\n        );\n\n        return { items: showSubmissions };\n    }\n\n}\n\n/**\n * Calculated data for an assign submission.\n */\nexport type AddonModAssignSubmissionForList = AddonModAssignSubmissionFormatted & {\n    statusColor?: string; // Calculated in the app. Color of the submission status.\n    gradingColor?: string; // Calculated in the app. Color of the submission grading status.\n    statusTranslated?: string; // Calculated in the app. Translated text of the submission status.\n    gradingStatusTranslationId?: string; // Calculated in the app. Key of the text of the submission grading status.\n    needsGrading?: boolean; // Calculated in the app. If submission and grading status means that it needs grading.\n};\n\n/**\n * List filter by status name.\n */\nexport enum AddonModAssignListFilterName {\n    ALL = '',\n    NEED_GRADING = 'needgrading',\n    DRAFT = 'draft',\n    SUBMITTED = 'submitted',\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}