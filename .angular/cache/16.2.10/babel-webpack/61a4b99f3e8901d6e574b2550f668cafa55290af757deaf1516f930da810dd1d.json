{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { SQLiteDB } from '@classes/sqlitedb';\nimport { CoreDB } from '@services/db';\n/**\n * Class to mock the interaction with the SQLite database.\n */\nexport class SQLiteDBMock extends SQLiteDB {\n  /**\n   * Create and open the database.\n   *\n   * @param name Database name.\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n  }\n  /**\n   * Close the database.\n   *\n   * @returns Promise resolved when done.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  close() {\n    // WebSQL databases aren't closed.\n    return Promise.resolve();\n  }\n  /**\n   * Drop all the data in the database.\n   *\n   * @returns Promise resolved when done.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  emptyDatabase() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.ready();\n      return new Promise((resolve, reject) => {\n        var _this$db;\n        (_this$db = _this.db) === null || _this$db === void 0 || _this$db.transaction(tx => {\n          // Query all tables from sqlite_master that we have created and can modify.\n          const args = [];\n          const query = `SELECT * FROM sqlite_master\n                            WHERE name NOT LIKE 'sqlite\\\\_%' escape '\\\\' AND name NOT LIKE '\\\\_%' escape '\\\\'`;\n          tx.executeSql(query, args, (tx, result) => {\n            if (result.rows.length <= 0) {\n              // No tables to delete, stop.\n              resolve(null);\n              return;\n            }\n            // Drop all the tables.\n            const promises = [];\n            for (let i = 0; i < result.rows.length; i++) {\n              promises.push(new Promise((resolve, reject) => {\n                // Drop the table.\n                const name = JSON.stringify(result.rows.item(i).name);\n                tx.executeSql('DROP TABLE ' + name, [], resolve, reject);\n              }));\n            }\n            Promise.all(promises).then(resolve).catch(reject);\n          }, reject);\n        });\n      });\n    })();\n  }\n  /**\n   * Execute a SQL query.\n   * IMPORTANT: Use this function only if you cannot use any of the other functions in this API. Please take into account that\n   * these query will be run in SQLite (Mobile) and Web SQL (desktop), so your query should work in both environments.\n   *\n   * @param sql SQL query to execute.\n   * @param params Query parameters.\n   * @returns Promise resolved with the result.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  execute(sql, params) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.ready();\n      return new Promise((resolve, reject) => {\n        var _this2$db;\n        // With WebSQL, all queries must be run in a transaction.\n        (_this2$db = _this2.db) === null || _this2$db === void 0 || _this2$db.transaction(tx => {\n          tx.executeSql(sql, params, (_, results) => resolve(results), (_, error) => reject(new Error(`SQL failed: ${sql}, reason: ${error === null || error === void 0 ? void 0 : error.message}`)));\n        });\n      });\n    })();\n  }\n  /**\n   * Execute a set of SQL queries. This operation is atomic.\n   * IMPORTANT: Use this function only if you cannot use any of the other functions in this API. Please take into account that\n   * these query will be run in SQLite (Mobile) and Web SQL (desktop), so your query should work in both environments.\n   *\n   * @param sqlStatements SQL statements to execute.\n   * @returns Promise resolved with the result.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  executeBatch(sqlStatements) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield _this3.ready();\n      return new Promise((resolve, reject) => {\n        var _this3$db;\n        // Create a transaction to execute the queries.\n        (_this3$db = _this3.db) === null || _this3$db === void 0 || _this3$db.transaction(tx => {\n          const promises = [];\n          // Execute all the queries. Each statement can be a string or an array.\n          sqlStatements.forEach(statement => {\n            promises.push(new Promise((resolve, reject) => {\n              let query;\n              let params;\n              if (Array.isArray(statement)) {\n                query = statement[0];\n                params = statement[1];\n              } else {\n                query = statement;\n                params = null;\n              }\n              tx.executeSql(query, params, (_, results) => resolve(results), (_, error) => reject(error));\n            }));\n          });\n          // eslint-disable-next-line promise/catch-or-return\n          Promise.all(promises).then(resolve, reject);\n        });\n      });\n    })();\n  }\n  /**\n   * Open the database. Only needed if it was closed before, a database is automatically opened when created.\n   *\n   * @returns Promise resolved when done.\n   */\n  open() {\n    // WebSQL databases can't closed, so the open method isn't needed.\n    return Promise.resolve();\n  }\n  /**\n   * @inheritdoc\n   */\n  createDatabase() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // This DB is for desktop apps, so use a big size to be sure it isn't filled.\n      return window.openDatabase(_this4.name, '1.0', _this4.name, 500 * 1024 * 1024);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getDatabaseSpies(db) {\n    const dbName = this.name;\n    return {\n      transaction: callback => db.transaction(transaction => {\n        const transactionSpy = {\n          executeSql(sql, params, success, error) {\n            const start = performance.now();\n            return transaction.executeSql(sql, params, (...args) => {\n              CoreDB.logQuery({\n                sql,\n                params,\n                duration: performance.now() - start,\n                dbName\n              });\n              return success === null || success === void 0 ? void 0 : success(...args);\n            }, (...args) => {\n              CoreDB.logQuery({\n                sql,\n                params,\n                error: args[0],\n                duration: performance.now() - start,\n                dbName\n              });\n              return error === null || error === void 0 ? void 0 : error(...args);\n            });\n          }\n        };\n        return callback(transactionSpy);\n      })\n    };\n  }\n}","map":{"version":3,"names":["SQLiteDB","CoreDB","SQLiteDBMock","constructor","name","close","Promise","resolve","emptyDatabase","_this","_asyncToGenerator","ready","reject","_this$db","db","transaction","tx","args","query","executeSql","result","rows","length","promises","i","push","JSON","stringify","item","all","then","catch","execute","sql","params","_this2","_this2$db","_","results","error","Error","message","executeBatch","sqlStatements","_this3","_this3$db","forEach","statement","Array","isArray","open","createDatabase","_this4","window","openDatabase","getDatabaseSpies","dbName","callback","transactionSpy","success","start","performance","now","logQuery","duration"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/emulator/classes/sqlitedb.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { SQLiteDB } from '@classes/sqlitedb';\nimport { DbTransaction, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx';\nimport { CoreDB } from '@services/db';\n\n/**\n * Class to mock the interaction with the SQLite database.\n */\nexport class SQLiteDBMock extends SQLiteDB {\n\n    /**\n     * Create and open the database.\n     *\n     * @param name Database name.\n     */\n    constructor(public name: string) {\n        super(name);\n    }\n\n    /**\n     * Close the database.\n     *\n     * @returns Promise resolved when done.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    close(): Promise<any> {\n        // WebSQL databases aren't closed.\n        return Promise.resolve();\n    }\n\n    /**\n     * Drop all the data in the database.\n     *\n     * @returns Promise resolved when done.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async emptyDatabase(): Promise<any> {\n        await this.ready();\n\n        return new Promise((resolve, reject): void => {\n            this.db?.transaction((tx) => {\n                // Query all tables from sqlite_master that we have created and can modify.\n                const args = [];\n                const query = `SELECT * FROM sqlite_master\n                            WHERE name NOT LIKE 'sqlite\\\\_%' escape '\\\\' AND name NOT LIKE '\\\\_%' escape '\\\\'`;\n\n                tx.executeSql(query, args, (tx, result) => {\n                    if (result.rows.length <= 0) {\n                        // No tables to delete, stop.\n                        resolve(null);\n\n                        return;\n                    }\n\n                    // Drop all the tables.\n                    const promises: Promise<void>[] = [];\n\n                    for (let i = 0; i < result.rows.length; i++) {\n                        promises.push(new Promise((resolve, reject): void => {\n                            // Drop the table.\n                            const name = JSON.stringify(result.rows.item(i).name);\n                            tx.executeSql('DROP TABLE ' + name, [], resolve, reject);\n                        }));\n                    }\n\n                    Promise.all(promises).then(resolve).catch(reject);\n                }, reject);\n            });\n        });\n    }\n\n    /**\n     * Execute a SQL query.\n     * IMPORTANT: Use this function only if you cannot use any of the other functions in this API. Please take into account that\n     * these query will be run in SQLite (Mobile) and Web SQL (desktop), so your query should work in both environments.\n     *\n     * @param sql SQL query to execute.\n     * @param params Query parameters.\n     * @returns Promise resolved with the result.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async execute(sql: string, params?: any[]): Promise<any> {\n        await this.ready();\n\n        return new Promise((resolve, reject): void => {\n            // With WebSQL, all queries must be run in a transaction.\n            this.db?.transaction((tx) => {\n                tx.executeSql(\n                    sql,\n                    params,\n                    (_, results) => resolve(results),\n                    (_, error) => reject(new Error(`SQL failed: ${sql}, reason: ${error?.message}`)),\n                );\n            });\n        });\n    }\n\n    /**\n     * Execute a set of SQL queries. This operation is atomic.\n     * IMPORTANT: Use this function only if you cannot use any of the other functions in this API. Please take into account that\n     * these query will be run in SQLite (Mobile) and Web SQL (desktop), so your query should work in both environments.\n     *\n     * @param sqlStatements SQL statements to execute.\n     * @returns Promise resolved with the result.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async executeBatch(sqlStatements: any[]): Promise<any> {\n        await this.ready();\n\n        return new Promise((resolve, reject): void => {\n            // Create a transaction to execute the queries.\n            this.db?.transaction((tx) => {\n                const promises: Promise<void>[] = [];\n\n                // Execute all the queries. Each statement can be a string or an array.\n                sqlStatements.forEach((statement) => {\n                    promises.push(new Promise((resolve, reject): void => {\n                        let query;\n                        let params;\n\n                        if (Array.isArray(statement)) {\n                            query = statement[0];\n                            params = statement[1];\n                        } else {\n                            query = statement;\n                            params = null;\n                        }\n\n                        tx.executeSql(query, params, (_, results) => resolve(results), (_, error) => reject(error));\n                    }));\n                });\n\n                // eslint-disable-next-line promise/catch-or-return\n                Promise.all(promises).then(resolve, reject);\n            });\n        });\n    }\n\n    /**\n     * Open the database. Only needed if it was closed before, a database is automatically opened when created.\n     *\n     * @returns Promise resolved when done.\n     */\n    open(): Promise<void> {\n        // WebSQL databases can't closed, so the open method isn't needed.\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async createDatabase(): Promise<SQLiteObject> {\n        // This DB is for desktop apps, so use a big size to be sure it isn't filled.\n        return (window as unknown as WebSQLWindow).openDatabase(this.name, '1.0', this.name, 500 * 1024 * 1024);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getDatabaseSpies(db: SQLiteObject): Partial<SQLiteObject> {\n        const dbName = this.name;\n\n        return {\n            transaction: (callback) => db.transaction((transaction) => {\n                const transactionSpy: DbTransaction = {\n                    executeSql(sql, params, success, error) {\n                        const start = performance.now();\n\n                        return transaction.executeSql(\n                            sql,\n                            params,\n                            (...args) => {\n                                CoreDB.logQuery({\n                                    sql,\n                                    params,\n                                    duration: performance.now() - start,\n                                    dbName,\n                                });\n\n                                return success?.(...args);\n                            },\n                            (...args) => {\n                                CoreDB.logQuery({\n                                    sql,\n                                    params,\n                                    error: args[0],\n                                    duration: performance.now() - start,\n                                    dbName,\n                                });\n\n                                return error?.(...args);\n                            },\n                        );\n                    },\n                };\n\n                return callback(transactionSpy);\n            }),\n        };\n    }\n\n}\n\ninterface WebSQLWindow extends Window {\n    openDatabase(name: string, version: string, displayName: string, estimatedSize: number): SQLiteObject;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}