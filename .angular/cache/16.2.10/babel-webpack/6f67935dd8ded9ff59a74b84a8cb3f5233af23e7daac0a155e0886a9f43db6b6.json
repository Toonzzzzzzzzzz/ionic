{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { AddonModGlossaryHelper } from '@addons/mod/glossary/services/glossary-helper';\nimport { AddonModGlossaryOffline } from '@addons/mod/glossary/services/glossary-offline';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { CoreCommentsCommentsComponent } from '@features/comments/components/comments/comments';\nimport { CoreComments } from '@features/comments/services/comments';\nimport { CoreTag } from '@features/tag/services/tag';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreNetwork } from '@services/network';\nimport { CoreDomUtils, ToastDuration } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModGlossaryEntriesSource } from '../../classes/glossary-entries-source';\nimport { AddonModGlossary, AddonModGlossaryProvider, GLOSSARY_ENTRY_UPDATED } from '../../services/glossary';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@components/split-view/split-view\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../../../core/components/file/file\";\nimport * as i5 from \"../../../../../core/components/loading/loading\";\nimport * as i6 from \"../../../../../core/components/local-file/local-file\";\nimport * as i7 from \"../../../../../core/components/user-avatar/user-avatar\";\nimport * as i8 from \"../../../../../core/directives/fa-icon\";\nimport * as i9 from \"../../../../../core/directives/format-text\";\nimport * as i10 from \"../../../../../core/directives/swipe-navigation\";\nimport * as i11 from \"../../../../../core/directives/content\";\nimport * as i12 from \"../../../../../core/directives/update-non-reactive-attributes\";\nimport * as i13 from \"@ionic/angular\";\nimport * as i14 from \"../../../../../core/features/comments/components/comments/comments\";\nimport * as i15 from \"../../../../../core/features/rating/components/aggregate/aggregate\";\nimport * as i16 from \"../../../../../core/features/rating/components/rate/rate\";\nimport * as i17 from \"../../../../../core/features/tag/components/list/list\";\nimport * as i18 from \"../../../../../core/pipes/date-day-or-time\";\nimport * as i19 from \"@ngx-translate/core\";\nfunction AddonModGlossaryEntryPage_h1_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵelement(1, \"core-format-text\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"text\", ctx_r0.entry.concept)(\"contextInstanceId\", ctx_r0.componentId)(\"courseId\", ctx_r0.courseId);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    $a: a0\n  };\n};\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 15)(1, \"ion-item\");\n    i0.ɵɵelement(2, \"ion-icon\", 16);\n    i0.ɵɵelementStart(3, \"ion-label\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(5, 1, \"core.hasdatatosync\", i0.ɵɵpureFunction1(6, _c0, i0.ɵɵpipeBind1(6, 4, \"addon.mod_glossary.entry\"))));\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_2_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r15.onlineEntry.userfullname);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_2_ion_note_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-note\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"coreDateDayOrTime\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r16.onlineEntry.timemodified));\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10);\n    i0.ɵɵelement(1, \"core-user-avatar\", 17);\n    i0.ɵɵelementStart(2, \"ion-label\")(3, \"h2\");\n    i0.ɵɵelement(4, \"core-format-text\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, AddonModGlossaryEntryPage_ng_container_12_ion_item_2_p_5_Template, 2, 1, \"p\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AddonModGlossaryEntryPage_ng_container_12_ion_item_2_ion_note_6_Template, 3, 3, \"ion-note\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"user\", ctx_r4.entry);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"text\", ctx_r4.entry.concept)(\"contextInstanceId\", ctx_r4.componentId)(\"courseId\", ctx_r4.courseId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.onlineEntry);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.showDate && ctx_r4.onlineEntry);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_3_ion_note_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-note\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"coreDateDayOrTime\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r17.onlineEntry.timemodified));\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"p\", 20);\n    i0.ɵɵelement(3, \"core-format-text\", 21);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, AddonModGlossaryEntryPage_ng_container_12_ion_item_3_ion_note_4_Template, 3, 3, \"ion-note\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"text\", ctx_r5.entry.concept)(\"contextInstanceId\", ctx_r5.componentId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.showDate && ctx_r5.onlineEntry);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_div_7_core_file_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-file\", 23);\n  }\n  if (rf & 2) {\n    const file_r19 = ctx.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"file\", file_r19)(\"component\", ctx_r18.component)(\"componentId\", ctx_r18.componentId);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AddonModGlossaryEntryPage_ng_container_12_div_7_core_file_1_Template, 1, 3, \"core-file\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r6.onlineEntry.attachments);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_div_8_core_file_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-file\", 23);\n  }\n  if (rf & 2) {\n    const file_r21 = ctx.$implicit;\n    const ctx_r20 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"file\", file_r21)(\"component\", ctx_r20.component)(\"componentId\", ctx_r20.componentId);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AddonModGlossaryEntryPage_ng_container_12_div_8_core_file_1_Template, 1, 3, \"core-file\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.offlineEntry.attachments.online);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_div_9_core_local_file_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-local-file\", 25);\n  }\n  if (rf & 2) {\n    const file_r23 = ctx.$implicit;\n    i0.ɵɵproperty(\"file\", file_r23);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AddonModGlossaryEntryPage_ng_container_12_div_9_core_local_file_1_Template, 1, 1, \"core-local-file\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.offlineEntryFiles);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"div\", 0);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"core-tag-list\", 26);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(4, 2, \"core.tag.tags\"), \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"tags\", ctx_r9.onlineEntry.tags);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 29);\n    i0.ɵɵlistener(\"click\", function AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_2_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r26.deleteEntry());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelement(2, \"ion-icon\", 30);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 1, \"addon.mod_glossary.deleteentry\"));\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 31);\n    i0.ɵɵlistener(\"click\", function AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_3_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r28 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r28.editEntry());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelement(2, \"ion-icon\", 32);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 1, \"addon.mod_glossary.editentry\"));\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"div\", 19);\n    i0.ɵɵtemplate(2, AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_2_Template, 3, 3, \"ion-button\", 27);\n    i0.ɵɵtemplate(3, AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_3_Template, 3, 3, \"ion-button\", 28);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.canDelete);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.canEdit);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_ion_item_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"p\")(3, \"em\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 1, \"addon.mod_glossary.entrypendingapproval\"));\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_core_comments_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-comments\", 33);\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"instanceId\", ctx_r12.glossary.coursemodule)(\"itemId\", ctx_r12.onlineEntry.id)(\"courseId\", ctx_r12.glossary.course)(\"showItem\", true);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_core_rating_rate_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"core-rating-rate\", 34);\n    i0.ɵɵlistener(\"onUpdate\", function AddonModGlossaryEntryPage_ng_container_12_core_rating_rate_14_Template_core_rating_rate_onUpdate_0_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r30 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r30.ratingUpdated());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ratingInfo\", ctx_r13.ratingInfo)(\"instanceId\", ctx_r13.glossary.coursemodule)(\"itemId\", ctx_r13.onlineEntry.id)(\"itemSetId\", 0)(\"courseId\", ctx_r13.glossary.course)(\"aggregateMethod\", ctx_r13.glossary.assessed)(\"scaleId\", ctx_r13.glossary.scale)(\"userId\", ctx_r13.entry.userid);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_core_rating_aggregate_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-rating-aggregate\", 35);\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ratingInfo\", ctx_r14.ratingInfo)(\"instanceId\", ctx_r14.glossary.coursemodule)(\"itemId\", ctx_r14.onlineEntry.id)(\"courseId\", ctx_r14.glossary.course)(\"aggregateMethod\", ctx_r14.glossary.assessed)(\"scaleId\", ctx_r14.glossary.scale);\n  }\n}\nfunction AddonModGlossaryEntryPage_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AddonModGlossaryEntryPage_ng_container_12_ion_card_1_Template, 7, 8, \"ion-card\", 7);\n    i0.ɵɵtemplate(2, AddonModGlossaryEntryPage_ng_container_12_ion_item_2_Template, 7, 6, \"ion-item\", 9);\n    i0.ɵɵtemplate(3, AddonModGlossaryEntryPage_ng_container_12_ion_item_3_Template, 5, 3, \"ion-item\", 9);\n    i0.ɵɵelementStart(4, \"ion-item\", 10)(5, \"ion-label\");\n    i0.ɵɵelement(6, \"core-format-text\", 11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(7, AddonModGlossaryEntryPage_ng_container_12_div_7_Template, 2, 1, \"div\", 2);\n    i0.ɵɵtemplate(8, AddonModGlossaryEntryPage_ng_container_12_div_8_Template, 2, 1, \"div\", 2);\n    i0.ɵɵtemplate(9, AddonModGlossaryEntryPage_ng_container_12_div_9_Template, 2, 1, \"div\", 2);\n    i0.ɵɵtemplate(10, AddonModGlossaryEntryPage_ng_container_12_ion_item_10_Template, 6, 4, \"ion-item\", 9);\n    i0.ɵɵtemplate(11, AddonModGlossaryEntryPage_ng_container_12_ion_item_11_Template, 4, 2, \"ion-item\", 2);\n    i0.ɵɵtemplate(12, AddonModGlossaryEntryPage_ng_container_12_ion_item_12_Template, 6, 3, \"ion-item\", 9);\n    i0.ɵɵtemplate(13, AddonModGlossaryEntryPage_ng_container_12_core_comments_13_Template, 1, 4, \"core-comments\", 12);\n    i0.ɵɵtemplate(14, AddonModGlossaryEntryPage_ng_container_12_core_rating_rate_14_Template, 1, 8, \"core-rating-rate\", 13);\n    i0.ɵɵtemplate(15, AddonModGlossaryEntryPage_ng_container_12_core_rating_aggregate_15_Template, 1, 6, \"core-rating-aggregate\", 14);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.offlineEntry);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showAuthor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.showAuthor);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"component\", ctx_r1.component)(\"componentId\", ctx_r1.componentId)(\"text\", ctx_r1.entry.definition)(\"contextInstanceId\", ctx_r1.componentId)(\"courseId\", ctx_r1.courseId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.onlineEntry && ctx_r1.onlineEntry.attachment);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.offlineEntry && ctx_r1.offlineEntry.attachments);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.offlineEntry && ctx_r1.offlineEntryFiles);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.onlineEntry && ctx_r1.tagsEnabled && ctx_r1.entry && ctx_r1.onlineEntry.tags && ctx_r1.onlineEntry.tags.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.canDelete || ctx_r1.canEdit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.onlineEntry && !ctx_r1.onlineEntry.approved);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.glossary && ctx_r1.glossary.allowcomments && ctx_r1.onlineEntry && ctx_r1.onlineEntry.id > 0 && ctx_r1.commentsEnabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.glossary && ctx_r1.ratingInfo && ctx_r1.onlineEntry);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.glossary && ctx_r1.ratingInfo && ctx_r1.onlineEntry);\n  }\n}\nfunction AddonModGlossaryEntryPage_ion_card_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 15)(1, \"ion-item\")(2, \"ion-label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 1, \"addon.mod_glossary.errorloadingentry\"));\n  }\n}\n/**\n * Page that displays a glossary entry.\n */\nexport class AddonModGlossaryEntryPage {\n  constructor(splitView, route) {\n    var _this = this;\n    this.splitView = splitView;\n    this.route = route;\n    this.component = AddonModGlossaryProvider.COMPONENT;\n    this.loaded = false;\n    this.showAuthor = false;\n    this.showDate = false;\n    this.tagsEnabled = false;\n    this.canEdit = false;\n    this.canDelete = false;\n    this.commentsEnabled = false;\n    this.logView = CoreTime.once( /*#__PURE__*/_asyncToGenerator(function* () {\n      if (!_this.onlineEntry || !_this.glossary || !_this.componentId) {\n        return;\n      }\n      yield CoreUtils.ignoreErrors(AddonModGlossary.logEntryView(_this.onlineEntry.id, _this.componentId));\n      _this.analyticsLogEvent('mod_glossary_get_entry_by_id', `/mod/glossary/showentry.php?eid=${_this.onlineEntry.id}`);\n    }));\n  }\n  get entry() {\n    var _this$onlineEntry;\n    return (_this$onlineEntry = this.onlineEntry) !== null && _this$onlineEntry !== void 0 ? _this$onlineEntry : this.offlineEntry;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let onlineEntryId = null;\n      let offlineEntryTimeCreated = null;\n      try {\n        var _routeData$glossaryPa;\n        _this2.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n        _this2.tagsEnabled = CoreTag.areTagsAvailableInSite();\n        _this2.commentsEnabled = !CoreComments.areCommentsDisabledInSite();\n        _this2.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n        const entrySlug = CoreNavigator.getRequiredRouteParam('entrySlug');\n        const routeData = _this2.route.snapshot.data;\n        const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(AddonModGlossaryEntriesSource, [_this2.courseId, _this2.cmId, (_routeData$glossaryPa = routeData.glossaryPathPrefix) !== null && _routeData$glossaryPa !== void 0 ? _routeData$glossaryPa : '']);\n        _this2.entries = new AddonModGlossaryEntryEntriesSwipeManager(source);\n        yield _this2.entries.start();\n        if (entrySlug.startsWith('new-')) {\n          offlineEntryTimeCreated = Number(entrySlug.slice(4));\n        } else {\n          onlineEntryId = Number(entrySlug);\n        }\n      } catch (error) {\n        CoreDomUtils.showErrorModal(error);\n        CoreNavigator.back();\n        return;\n      }\n      _this2.entryUpdatedObserver = CoreEvents.on(GLOSSARY_ENTRY_UPDATED, data => {\n        var _this2$glossary;\n        if (data.glossaryId !== ((_this2$glossary = _this2.glossary) === null || _this2$glossary === void 0 ? void 0 : _this2$glossary.id)) {\n          return;\n        }\n        if (_this2.onlineEntry && _this2.onlineEntry.id === data.entryId || _this2.offlineEntry && _this2.offlineEntry.timecreated === data.timecreated) {\n          _this2.doRefresh();\n        }\n      });\n      try {\n        if (onlineEntryId) {\n          yield _this2.loadOnlineEntry(onlineEntryId);\n        } else if (offlineEntryTimeCreated) {\n          yield _this2.loadOfflineEntry(offlineEntryTimeCreated);\n        }\n      } finally {\n        _this2.loaded = true;\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$entryUpdatedObs;\n    this.entries.destroy();\n    (_this$entryUpdatedObs = this.entryUpdatedObserver) === null || _this$entryUpdatedObs === void 0 || _this$entryUpdatedObs.off();\n  }\n  /**\n   * Edit entry.\n   */\n  editEntry() {\n    return _asyncToGenerator(function* () {\n      yield CoreNavigator.navigate('./edit');\n    })();\n  }\n  /**\n   * Delete entry.\n   */\n  deleteEntry() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _this3$glossary, _this3$onlineEntry, _this3$glossary2;\n      // Log analytics even if the user cancels for consistency with LMS.\n      _this3.analyticsLogEvent('mod_glossary_delete_entry', `/mod/glossary/deleteentry.php?id=${(_this3$glossary = _this3.glossary) === null || _this3$glossary === void 0 ? void 0 : _this3$glossary.id}&mode=delete&entry=${(_this3$onlineEntry = _this3.onlineEntry) === null || _this3$onlineEntry === void 0 ? void 0 : _this3$onlineEntry.id}`);\n      const glossaryId = (_this3$glossary2 = _this3.glossary) === null || _this3$glossary2 === void 0 ? void 0 : _this3$glossary2.id;\n      const cancelled = yield CoreUtils.promiseFails(CoreDomUtils.showConfirm(Translate.instant('addon.mod_glossary.areyousuredelete')));\n      if (!glossaryId || cancelled) {\n        return;\n      }\n      const modal = yield CoreDomUtils.showModalLoading();\n      try {\n        var _this3$splitView;\n        if (_this3.onlineEntry) {\n          const entryId = _this3.onlineEntry.id;\n          yield AddonModGlossary.deleteEntry(glossaryId, entryId);\n          yield Promise.all([CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntry(entryId)), CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByLetter(glossaryId)), CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByAuthor(glossaryId)), CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByCategory(glossaryId)), CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByDate(glossaryId, 'CREATION')), CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByDate(glossaryId, 'UPDATE')), CoreUtils.ignoreErrors(_this3.entries.getSource().invalidateCache(false))]);\n        } else if (_this3.offlineEntry) {\n          const concept = _this3.offlineEntry.concept;\n          const timecreated = _this3.offlineEntry.timecreated;\n          yield AddonModGlossaryOffline.deleteOfflineEntry(glossaryId, timecreated);\n          yield AddonModGlossaryHelper.deleteStoredFiles(glossaryId, concept, timecreated);\n        }\n        CoreDomUtils.showToast('addon.mod_glossary.entrydeleted', true, ToastDuration.LONG);\n        if ((_this3$splitView = _this3.splitView) !== null && _this3$splitView !== void 0 && _this3$splitView.outletActivated) {\n          yield CoreNavigator.navigate('../../');\n        } else {\n          yield CoreNavigator.back();\n        }\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errordeleting', true);\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  /**\n   * Refresh the data.\n   *\n   * @param refresher Refresher.\n   * @returns Promise resolved when done.\n   */\n  doRefresh(refresher) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      var _this4$glossary;\n      if (_this4.onlineEntry && (_this4$glossary = _this4.glossary) !== null && _this4$glossary !== void 0 && _this4$glossary.allowcomments && _this4.onlineEntry.id > 0 && _this4.commentsEnabled && _this4.comments) {\n        // Refresh comments asynchronously (without blocking the current promise).\n        CoreUtils.ignoreErrors(_this4.comments.doRefresh());\n      }\n      try {\n        if (_this4.onlineEntry) {\n          yield CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntry(_this4.onlineEntry.id));\n          yield _this4.loadOnlineEntry(_this4.onlineEntry.id);\n        } else if (_this4.offlineEntry) {\n          const entrySlug = CoreNavigator.getRequiredRouteParam('entrySlug');\n          const timecreated = Number(entrySlug.slice(4));\n          yield _this4.loadOfflineEntry(timecreated);\n        }\n      } finally {\n        refresher === null || refresher === void 0 || refresher.complete();\n      }\n    })();\n  }\n  /**\n   * Load online entry data.\n   */\n  loadOnlineEntry(entryId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        var _result$permissions, _result$permissions2;\n        const result = yield AddonModGlossary.getEntry(entryId);\n        const canDeleteEntries = CoreNetwork.isOnline() && (yield AddonModGlossary.canDeleteEntries());\n        const canUpdateEntries = CoreNetwork.isOnline() && (yield AddonModGlossary.canUpdateEntries());\n        _this5.onlineEntry = result.entry;\n        _this5.ratingInfo = result.ratinginfo;\n        _this5.canDelete = canDeleteEntries && !!((_result$permissions = result.permissions) !== null && _result$permissions !== void 0 && _result$permissions.candelete);\n        _this5.canEdit = canUpdateEntries && !!((_result$permissions2 = result.permissions) !== null && _result$permissions2 !== void 0 && _result$permissions2.canupdate);\n        yield _this5.loadGlossary();\n        _this5.logView();\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\n      }\n    })();\n  }\n  /**\n   * Load offline entry data.\n   *\n   * @param timecreated Entry Timecreated.\n   */\n  loadOfflineEntry(timecreated) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const glossary = yield _this6.loadGlossary();\n        _this6.offlineEntry = yield AddonModGlossaryOffline.getOfflineEntry(glossary.id, timecreated);\n        _this6.offlineEntryFiles = _this6.offlineEntry.attachments && _this6.offlineEntry.attachments.offline > 0 ? yield AddonModGlossaryHelper.getStoredFiles(glossary.id, _this6.offlineEntry.concept, timecreated) : undefined;\n        _this6.canEdit = true;\n        _this6.canDelete = true;\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\n      }\n    })();\n  }\n  /**\n   * Load glossary data.\n   *\n   * @returns Glossary.\n   */\n  loadGlossary() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (_this7.glossary) {\n        return _this7.glossary;\n      }\n      _this7.glossary = yield AddonModGlossary.getGlossary(_this7.courseId, _this7.cmId);\n      _this7.componentId = _this7.glossary.coursemodule;\n      switch (_this7.glossary.displayformat) {\n        case 'fullwithauthor':\n        case 'encyclopedia':\n          _this7.showAuthor = true;\n          _this7.showDate = true;\n          break;\n        case 'fullwithoutauthor':\n          _this7.showAuthor = false;\n          _this7.showDate = true;\n          break;\n        default:\n          // Default, and faq, simple, entrylist, continuous.\n          _this7.showAuthor = false;\n          _this7.showDate = false;\n      }\n      return _this7.glossary;\n    })();\n  }\n  /**\n   * Function called when rating is updated online.\n   */\n  ratingUpdated() {\n    if (!this.onlineEntry) {\n      return;\n    }\n    AddonModGlossary.invalidateEntry(this.onlineEntry.id);\n  }\n  /**\n   * Log analytics event.\n   *\n   * @param wsName WS name.\n   * @param url URL.\n   */\n  analyticsLogEvent(wsName, url) {\n    if (!this.onlineEntry || !this.glossary) {\n      return;\n    }\n    CoreAnalytics.logEvent({\n      type: CoreAnalyticsEventType.VIEW_ITEM,\n      ws: wsName,\n      name: this.onlineEntry.concept,\n      data: {\n        id: this.onlineEntry.id,\n        glossaryid: this.glossary.id,\n        category: 'glossary'\n      },\n      url\n    });\n  }\n}\n/**\n * Helper to manage swiping within a collection of glossary entries.\n */\n_class = AddonModGlossaryEntryPage;\n_class.ɵfac = function AddonModGlossaryEntryPage_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.CoreSplitViewComponent, 8), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-mod-glossary-entry\"]],\n  viewQuery: function AddonModGlossaryEntryPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CoreCommentsCommentsComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.comments = _t.first);\n    }\n  },\n  decls: 14,\n  vars: 12,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [4, \"ngIf\"], [1, \"limited-width\", 3, \"core-swipe-navigation\"], [\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [3, \"hideUntil\"], [\"class\", \"core-warning-card\", 4, \"ngIf\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [\"class\", \"ion-text-wrap\", 4, \"ngIf\"], [1, \"ion-text-wrap\"], [\"contextLevel\", \"module\", 3, \"component\", \"componentId\", \"text\", \"contextInstanceId\", \"courseId\"], [\"contextLevel\", \"module\", \"component\", \"mod_glossary\", \"area\", \"glossary_entry\", 3, \"instanceId\", \"itemId\", \"courseId\", \"showItem\", 4, \"ngIf\"], [\"contextLevel\", \"module\", 3, \"ratingInfo\", \"instanceId\", \"itemId\", \"itemSetId\", \"courseId\", \"aggregateMethod\", \"scaleId\", \"userId\", \"onUpdate\", 4, \"ngIf\"], [\"contextLevel\", \"module\", 3, \"ratingInfo\", \"instanceId\", \"itemId\", \"courseId\", \"aggregateMethod\", \"scaleId\", 4, \"ngIf\"], [1, \"core-warning-card\"], [\"name\", \"fas-triangle-exclamation\", \"slot\", \"start\", \"aria-hidden\", \"true\"], [\"slot\", \"start\", 3, \"user\"], [\"slot\", \"end\", 4, \"ngIf\"], [\"slot\", \"end\"], [1, \"item-heading\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\"], [3, \"file\", \"component\", \"componentId\", 4, \"ngFor\", \"ngForOf\"], [3, \"file\", \"component\", \"componentId\"], [3, \"file\", 4, \"ngFor\", \"ngForOf\"], [3, \"file\"], [3, \"tags\"], [\"fill\", \"clear\", \"color\", \"danger\", 3, \"click\", 4, \"ngIf\"], [\"fill\", \"clear\", 3, \"click\", 4, \"ngIf\"], [\"fill\", \"clear\", \"color\", \"danger\", 3, \"click\"], [\"slot\", \"icon-only\", \"name\", \"fas-trash\", \"aria-hidden\", \"true\"], [\"fill\", \"clear\", 3, \"click\"], [\"slot\", \"icon-only\", \"name\", \"fas-pen\", \"aria-hidden\", \"true\"], [\"contextLevel\", \"module\", \"component\", \"mod_glossary\", \"area\", \"glossary_entry\", 3, \"instanceId\", \"itemId\", \"courseId\", \"showItem\"], [\"contextLevel\", \"module\", 3, \"ratingInfo\", \"instanceId\", \"itemId\", \"itemSetId\", \"courseId\", \"aggregateMethod\", \"scaleId\", \"userId\", \"onUpdate\"], [\"contextLevel\", \"module\", 3, \"ratingInfo\", \"instanceId\", \"itemId\", \"courseId\", \"aggregateMethod\", \"scaleId\"]],\n  template: function AddonModGlossaryEntryPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\");\n      i0.ɵɵtemplate(6, AddonModGlossaryEntryPage_h1_6_Template, 2, 3, \"h1\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(7, \"ion-content\", 3)(8, \"ion-refresher\", 4);\n      i0.ɵɵlistener(\"ionRefresh\", function AddonModGlossaryEntryPage_Template_ion_refresher_ionRefresh_8_listener($event) {\n        return ctx.doRefresh($event.target);\n      });\n      i0.ɵɵelement(9, \"ion-refresher-content\", 5);\n      i0.ɵɵpipe(10, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"core-loading\", 6);\n      i0.ɵɵtemplate(12, AddonModGlossaryEntryPage_ng_container_12_Template, 16, 17, \"ng-container\", 2);\n      i0.ɵɵtemplate(13, AddonModGlossaryEntryPage_ion_card_13_Template, 5, 3, \"ion-card\", 7);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 8, \"core.back\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.entry);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"core-swipe-navigation\", ctx.entries);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(10, 10, \"core.pulltorefresh\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.entry && ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.entry);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.CoreFileComponent, i5.CoreLoadingComponent, i6.CoreLocalFileComponent, i7.CoreUserAvatarComponent, i8.CoreFaIconDirective, i9.CoreFormatTextDirective, i10.CoreSwipeNavigationDirective, i11.CoreContentDirective, i12.CoreUpdateNonReactiveAttributesDirective, i13.IonButton, i13.IonButtons, i13.IonCard, i13.IonContent, i13.IonHeader, i13.IonIcon, i13.IonItem, i13.IonLabel, i13.IonNote, i13.IonRefresher, i13.IonRefresherContent, i13.IonTitle, i13.IonToolbar, i13.IonBackButton, i14.CoreCommentsCommentsComponent, i15.CoreRatingAggregateComponent, i16.CoreRatingRateComponent, i17.CoreTagListComponent, i18.CoreDateDayOrTimePipe, i19.TranslatePipe],\n  encapsulation: 2\n});\nclass AddonModGlossaryEntryEntriesSwipeManager extends CoreSwipeNavigationItemsManager {\n  /**\n   * @inheritdoc\n   */\n  getSelectedItemPathFromRoute(route) {\n    return `${this.getSource().GLOSSARY_PATH_PREFIX}entry/${route.params.entrySlug}`;\n  }\n}","map":{"version":3,"names":["AddonModGlossaryHelper","AddonModGlossaryOffline","CoreRoutedItemsManagerSourcesTracker","CoreSwipeNavigationItemsManager","CoreCommentsCommentsComponent","CoreComments","CoreTag","CoreNavigator","CoreNetwork","CoreDomUtils","ToastDuration","CoreUtils","Translate","CoreEvents","AddonModGlossaryEntriesSource","AddonModGlossary","AddonModGlossaryProvider","GLOSSARY_ENTRY_UPDATED","CoreTime","CoreAnalytics","CoreAnalyticsEventType","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r0","entry","concept","componentId","courseId","ɵɵtext","ɵɵtextInterpolate","ɵɵpipeBind2","ɵɵpureFunction1","_c0","ɵɵpipeBind1","ctx_r15","onlineEntry","userfullname","ctx_r16","timemodified","ɵɵtemplate","AddonModGlossaryEntryPage_ng_container_12_ion_item_2_p_5_Template","AddonModGlossaryEntryPage_ng_container_12_ion_item_2_ion_note_6_Template","ctx_r4","showDate","ctx_r17","AddonModGlossaryEntryPage_ng_container_12_ion_item_3_ion_note_4_Template","ctx_r5","file_r19","ctx_r18","component","AddonModGlossaryEntryPage_ng_container_12_div_7_core_file_1_Template","ctx_r6","attachments","file_r21","ctx_r20","AddonModGlossaryEntryPage_ng_container_12_div_8_core_file_1_Template","ctx_r7","offlineEntry","online","file_r23","AddonModGlossaryEntryPage_ng_container_12_div_9_core_local_file_1_Template","ctx_r8","offlineEntryFiles","ɵɵtextInterpolate1","ctx_r9","tags","ɵɵlistener","AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_2_Template_ion_button_click_0_listener","ɵɵrestoreView","_r27","ctx_r26","ɵɵnextContext","ɵɵresetView","deleteEntry","ɵɵattribute","AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_3_Template_ion_button_click_0_listener","_r29","ctx_r28","editEntry","AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_2_Template","AddonModGlossaryEntryPage_ng_container_12_ion_item_11_ion_button_3_Template","ctx_r10","canDelete","canEdit","ctx_r12","glossary","coursemodule","id","course","AddonModGlossaryEntryPage_ng_container_12_core_rating_rate_14_Template_core_rating_rate_onUpdate_0_listener","_r31","ctx_r30","ratingUpdated","ctx_r13","ratingInfo","assessed","scale","userid","ctx_r14","ɵɵelementContainerStart","AddonModGlossaryEntryPage_ng_container_12_ion_card_1_Template","AddonModGlossaryEntryPage_ng_container_12_ion_item_2_Template","AddonModGlossaryEntryPage_ng_container_12_ion_item_3_Template","AddonModGlossaryEntryPage_ng_container_12_div_7_Template","AddonModGlossaryEntryPage_ng_container_12_div_8_Template","AddonModGlossaryEntryPage_ng_container_12_div_9_Template","AddonModGlossaryEntryPage_ng_container_12_ion_item_10_Template","AddonModGlossaryEntryPage_ng_container_12_ion_item_11_Template","AddonModGlossaryEntryPage_ng_container_12_ion_item_12_Template","AddonModGlossaryEntryPage_ng_container_12_core_comments_13_Template","AddonModGlossaryEntryPage_ng_container_12_core_rating_rate_14_Template","AddonModGlossaryEntryPage_ng_container_12_core_rating_aggregate_15_Template","ɵɵelementContainerEnd","ctx_r1","showAuthor","definition","attachment","tagsEnabled","length","approved","allowcomments","commentsEnabled","AddonModGlossaryEntryPage","constructor","splitView","route","_this","COMPONENT","loaded","logView","once","_asyncToGenerator","ignoreErrors","logEntryView","analyticsLogEvent","_this$onlineEntry","ngOnInit","_this2","onlineEntryId","offlineEntryTimeCreated","_routeData$glossaryPa","getRequiredRouteNumberParam","areTagsAvailableInSite","areCommentsDisabledInSite","cmId","entrySlug","getRequiredRouteParam","routeData","snapshot","data","source","getOrCreateSource","glossaryPathPrefix","entries","AddonModGlossaryEntryEntriesSwipeManager","start","startsWith","Number","slice","error","showErrorModal","back","entryUpdatedObserver","on","_this2$glossary","glossaryId","entryId","timecreated","doRefresh","loadOnlineEntry","loadOfflineEntry","ngOnDestroy","_this$entryUpdatedObs","destroy","off","navigate","_this3","_this3$glossary","_this3$onlineEntry","_this3$glossary2","cancelled","promiseFails","showConfirm","instant","modal","showModalLoading","_this3$splitView","Promise","all","invalidateEntry","invalidateEntriesByLetter","invalidateEntriesByAuthor","invalidateEntriesByCategory","invalidateEntriesByDate","getSource","invalidateCache","deleteOfflineEntry","deleteStoredFiles","showToast","LONG","outletActivated","showErrorModalDefault","dismiss","refresher","_this4","_this4$glossary","comments","complete","_this5","_result$permissions","_result$permissions2","result","getEntry","canDeleteEntries","isOnline","canUpdateEntries","ratinginfo","permissions","candelete","canupdate","loadGlossary","_this6","getOfflineEntry","offline","getStoredFiles","undefined","_this7","getGlossary","displayformat","wsName","url","logEvent","type","VIEW_ITEM","ws","name","glossaryid","category","_class","ɵɵdirectiveInject","i1","CoreSplitViewComponent","i2","ActivatedRoute","selectors","viewQuery","AddonModGlossaryEntryPage_Query","rf","ctx","AddonModGlossaryEntryPage_h1_6_Template","AddonModGlossaryEntryPage_Template_ion_refresher_ionRefresh_8_listener","$event","target","AddonModGlossaryEntryPage_ng_container_12_Template","AddonModGlossaryEntryPage_ion_card_13_Template","ɵɵpropertyInterpolate","getSelectedItemPathFromRoute","GLOSSARY_PATH_PREFIX","params"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/pages/entry/entry.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/pages/entry/entry.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AddonModGlossaryHelper } from '@addons/mod/glossary/services/glossary-helper';\nimport { AddonModGlossaryOffline, AddonModGlossaryOfflineEntry } from '@addons/mod/glossary/services/glossary-offline';\nimport { Component, OnDestroy, OnInit, Optional, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreCommentsCommentsComponent } from '@features/comments/components/comments/comments';\nimport { CoreComments } from '@features/comments/services/comments';\nimport { CoreRatingInfo } from '@features/rating/services/rating';\nimport { CoreTag } from '@features/tag/services/tag';\nimport { FileEntry } from '@awesome-cordova-plugins/file/ngx';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreNetwork } from '@services/network';\nimport { CoreDomUtils, ToastDuration } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { AddonModGlossaryEntriesSource, AddonModGlossaryEntryItem } from '../../classes/glossary-entries-source';\nimport {\n    AddonModGlossary,\n    AddonModGlossaryEntry,\n    AddonModGlossaryGlossary,\n    AddonModGlossaryProvider,\n    GLOSSARY_ENTRY_UPDATED,\n} from '../../services/glossary';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays a glossary entry.\n */\n@Component({\n    selector: 'page-addon-mod-glossary-entry',\n    templateUrl: 'entry.html',\n})\nexport class AddonModGlossaryEntryPage implements OnInit, OnDestroy {\n\n    @ViewChild(CoreCommentsCommentsComponent) comments?: CoreCommentsCommentsComponent;\n\n    component = AddonModGlossaryProvider.COMPONENT;\n    componentId?: number;\n    onlineEntry?: AddonModGlossaryEntry;\n    offlineEntry?: AddonModGlossaryOfflineEntry;\n    offlineEntryFiles?: FileEntry[];\n    entries!: AddonModGlossaryEntryEntriesSwipeManager;\n    glossary?: AddonModGlossaryGlossary;\n    entryUpdatedObserver?: CoreEventObserver;\n    loaded = false;\n    showAuthor = false;\n    showDate = false;\n    ratingInfo?: CoreRatingInfo;\n    tagsEnabled = false;\n    canEdit = false;\n    canDelete = false;\n    commentsEnabled = false;\n    courseId!: number;\n    cmId!: number;\n\n    protected logView: () => void;\n\n    constructor(@Optional() protected splitView: CoreSplitViewComponent, protected route: ActivatedRoute) {\n        this.logView = CoreTime.once(async () => {\n            if (!this.onlineEntry || !this.glossary || !this.componentId) {\n                return;\n            }\n\n            await CoreUtils.ignoreErrors(AddonModGlossary.logEntryView(this.onlineEntry.id, this.componentId));\n\n            this.analyticsLogEvent('mod_glossary_get_entry_by_id', `/mod/glossary/showentry.php?eid=${this.onlineEntry.id}`);\n        });\n    }\n\n    get entry(): AddonModGlossaryEntry | AddonModGlossaryOfflineEntry | undefined {\n        return this.onlineEntry ?? this.offlineEntry;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        let onlineEntryId: number | null = null;\n        let offlineEntryTimeCreated: number | null = null;\n\n        try {\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.tagsEnabled = CoreTag.areTagsAvailableInSite();\n            this.commentsEnabled = !CoreComments.areCommentsDisabledInSite();\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n\n            const entrySlug = CoreNavigator.getRequiredRouteParam<string>('entrySlug');\n            const routeData = this.route.snapshot.data;\n            const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                AddonModGlossaryEntriesSource,\n                [this.courseId, this.cmId, routeData.glossaryPathPrefix ?? ''],\n            );\n\n            this.entries = new AddonModGlossaryEntryEntriesSwipeManager(source);\n\n            await this.entries.start();\n\n            if (entrySlug.startsWith('new-')) {\n                offlineEntryTimeCreated = Number(entrySlug.slice(4));\n            } else {\n                onlineEntryId = Number(entrySlug);\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.entryUpdatedObserver = CoreEvents.on(GLOSSARY_ENTRY_UPDATED, data => {\n            if (data.glossaryId !== this.glossary?.id) {\n                return;\n            }\n\n            if (\n                (this.onlineEntry && this.onlineEntry.id === data.entryId) ||\n                (this.offlineEntry && this.offlineEntry.timecreated === data.timecreated)\n            ) {\n                this.doRefresh();\n            }\n        });\n\n        try {\n            if (onlineEntryId) {\n                await this.loadOnlineEntry(onlineEntryId);\n            } else if (offlineEntryTimeCreated) {\n                await this.loadOfflineEntry(offlineEntryTimeCreated);\n            }\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.entries.destroy();\n        this.entryUpdatedObserver?.off();\n    }\n\n    /**\n     * Edit entry.\n     */\n    async editEntry(): Promise<void> {\n        await CoreNavigator.navigate('./edit');\n    }\n\n    /**\n     * Delete entry.\n     */\n    async deleteEntry(): Promise<void> {\n        // Log analytics even if the user cancels for consistency with LMS.\n        this.analyticsLogEvent(\n            'mod_glossary_delete_entry',\n            `/mod/glossary/deleteentry.php?id=${this.glossary?.id}&mode=delete&entry=${this.onlineEntry?.id}`,\n        );\n\n        const glossaryId = this.glossary?.id;\n        const cancelled = await CoreUtils.promiseFails(\n            CoreDomUtils.showConfirm(Translate.instant('addon.mod_glossary.areyousuredelete')),\n        );\n\n        if (!glossaryId || cancelled) {\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            if (this.onlineEntry) {\n                const entryId = this.onlineEntry.id;\n\n                await AddonModGlossary.deleteEntry(glossaryId, entryId);\n                await Promise.all([\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntry(entryId)),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByLetter(glossaryId)),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByAuthor(glossaryId)),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByCategory(glossaryId)),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByDate(glossaryId, 'CREATION')),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByDate(glossaryId, 'UPDATE')),\n                    CoreUtils.ignoreErrors(this.entries.getSource().invalidateCache(false)),\n                ]);\n            } else if (this.offlineEntry) {\n                const concept = this.offlineEntry.concept;\n                const timecreated = this.offlineEntry.timecreated;\n\n                await AddonModGlossaryOffline.deleteOfflineEntry(glossaryId, timecreated);\n                await AddonModGlossaryHelper.deleteStoredFiles(glossaryId, concept, timecreated);\n            }\n\n            CoreDomUtils.showToast('addon.mod_glossary.entrydeleted', true, ToastDuration.LONG);\n\n            if (this.splitView?.outletActivated) {\n                await CoreNavigator.navigate('../../');\n            } else {\n                await CoreNavigator.back();\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errordeleting', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @returns Promise resolved when done.\n     */\n    async doRefresh(refresher?: HTMLIonRefresherElement): Promise<void> {\n        if (this.onlineEntry && this.glossary?.allowcomments && this.onlineEntry.id > 0 && this.commentsEnabled && this.comments) {\n            // Refresh comments asynchronously (without blocking the current promise).\n            CoreUtils.ignoreErrors(this.comments.doRefresh());\n        }\n\n        try {\n            if (this.onlineEntry) {\n                await CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntry(this.onlineEntry.id));\n                await this.loadOnlineEntry(this.onlineEntry.id);\n            } else if (this.offlineEntry) {\n                const entrySlug = CoreNavigator.getRequiredRouteParam<string>('entrySlug');\n                const timecreated = Number(entrySlug.slice(4));\n\n                await this.loadOfflineEntry(timecreated);\n            }\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Load online entry data.\n     */\n    protected async loadOnlineEntry(entryId: number): Promise<void> {\n        try {\n            const result = await AddonModGlossary.getEntry(entryId);\n            const canDeleteEntries = CoreNetwork.isOnline() && await AddonModGlossary.canDeleteEntries();\n            const canUpdateEntries = CoreNetwork.isOnline() && await AddonModGlossary.canUpdateEntries();\n\n            this.onlineEntry = result.entry;\n            this.ratingInfo = result.ratinginfo;\n            this.canDelete = canDeleteEntries && !!result.permissions?.candelete;\n            this.canEdit = canUpdateEntries && !!result.permissions?.canupdate;\n\n            await this.loadGlossary();\n\n            this.logView();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\n        }\n    }\n\n    /**\n     * Load offline entry data.\n     *\n     * @param timecreated Entry Timecreated.\n     */\n    protected async loadOfflineEntry(timecreated: number): Promise<void> {\n        try {\n            const glossary = await this.loadGlossary();\n\n            this.offlineEntry = await AddonModGlossaryOffline.getOfflineEntry(glossary.id, timecreated);\n            this.offlineEntryFiles = this.offlineEntry.attachments && this.offlineEntry.attachments.offline > 0\n                ? await AddonModGlossaryHelper.getStoredFiles(\n                    glossary.id,\n                    this.offlineEntry.concept,\n                    timecreated,\n                )\n                : undefined;\n            this.canEdit = true;\n            this.canDelete = true;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\n        }\n    }\n\n    /**\n     * Load glossary data.\n     *\n     * @returns Glossary.\n     */\n    protected async loadGlossary(): Promise<AddonModGlossaryGlossary> {\n        if (this.glossary) {\n            return this.glossary;\n        }\n\n        this.glossary = await AddonModGlossary.getGlossary(this.courseId, this.cmId);\n        this.componentId = this.glossary.coursemodule;\n\n        switch (this.glossary.displayformat) {\n            case 'fullwithauthor':\n            case 'encyclopedia':\n                this.showAuthor = true;\n                this.showDate = true;\n                break;\n            case 'fullwithoutauthor':\n                this.showAuthor = false;\n                this.showDate = true;\n                break;\n            default: // Default, and faq, simple, entrylist, continuous.\n                this.showAuthor = false;\n                this.showDate = false;\n        }\n\n        return this.glossary;\n    }\n\n    /**\n     * Function called when rating is updated online.\n     */\n    ratingUpdated(): void {\n        if (!this.onlineEntry) {\n            return;\n        }\n\n        AddonModGlossary.invalidateEntry(this.onlineEntry.id);\n    }\n\n    /**\n     * Log analytics event.\n     *\n     * @param wsName WS name.\n     * @param url URL.\n     */\n    protected analyticsLogEvent(wsName: string, url: string): void {\n        if (!this.onlineEntry || !this.glossary) {\n            return;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: wsName,\n            name: this.onlineEntry.concept,\n            data: { id: this.onlineEntry.id, glossaryid: this.glossary.id, category: 'glossary' },\n            url,\n        });\n    }\n\n}\n\n/**\n * Helper to manage swiping within a collection of glossary entries.\n */\nclass AddonModGlossaryEntryEntriesSwipeManager\n    extends CoreSwipeNavigationItemsManager<AddonModGlossaryEntryItem, AddonModGlossaryEntriesSource> {\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        return `${this.getSource().GLOSSARY_PATH_PREFIX}entry/${route.params.entrySlug}`;\n    }\n\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1 *ngIf=\"entry\">\n                <core-format-text [text]=\"entry.concept\" contextLevel=\"module\" [contextInstanceId]=\"componentId\" [courseId]=\"courseId\" />\n            </h1>\n        </ion-title>\n    </ion-toolbar>\n</ion-header>\n<ion-content [core-swipe-navigation]=\"entries\" class=\"limited-width\">\n    <ion-refresher slot=\"fixed\" [disabled]=\"!loaded\" (ionRefresh)=\"doRefresh($event.target)\">\n        <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n    </ion-refresher>\n\n    <core-loading [hideUntil]=\"loaded\">\n        <ng-container *ngIf=\"entry && loaded\">\n            <ion-card *ngIf=\"offlineEntry\" class=\"core-warning-card\">\n                <ion-item>\n                    <ion-icon name=\"fas-triangle-exclamation\" slot=\"start\" aria-hidden=\"true\" />\n                    <ion-label>{{ 'core.hasdatatosync' | translate: { $a: 'addon.mod_glossary.entry' | translate } }}</ion-label>\n                </ion-item>\n            </ion-card>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"showAuthor\">\n                <core-user-avatar [user]=\"entry\" slot=\"start\" />\n                <ion-label>\n                    <h2>\n                        <core-format-text [text]=\"entry.concept\" contextLevel=\"module\" [contextInstanceId]=\"componentId\"\n                            [courseId]=\"courseId\" />\n                    </h2>\n                    <p *ngIf=\"onlineEntry\">{{ onlineEntry.userfullname }}</p>\n                </ion-label>\n                <ion-note slot=\"end\" *ngIf=\"showDate && onlineEntry\">{{ onlineEntry.timemodified | coreDateDayOrTime }}</ion-note>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"!showAuthor\">\n                <ion-label>\n                    <p class=\"item-heading\">\n                        <core-format-text [text]=\"entry.concept\" contextLevel=\"module\" [contextInstanceId]=\"componentId\" />\n                    </p>\n                </ion-label>\n                <ion-note slot=\"end\" *ngIf=\"showDate && onlineEntry\">{{ onlineEntry.timemodified | coreDateDayOrTime }}</ion-note>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap\">\n                <ion-label>\n                    <core-format-text [component]=\"component\" [componentId]=\"componentId\" [text]=\"entry.definition\" contextLevel=\"module\"\n                        [contextInstanceId]=\"componentId\" [courseId]=\"courseId\" />\n                </ion-label>\n            </ion-item>\n            <div *ngIf=\"onlineEntry && onlineEntry.attachment\">\n                <core-file *ngFor=\"let file of onlineEntry.attachments\" [file]=\"file\" [component]=\"component\" [componentId]=\"componentId\" />\n            </div>\n            <div *ngIf=\"offlineEntry && offlineEntry.attachments\">\n                <core-file *ngFor=\"let file of offlineEntry.attachments.online\" [file]=\"file\" [component]=\"component\"\n                    [componentId]=\"componentId\" />\n            </div>\n            <div *ngIf=\"offlineEntry && offlineEntryFiles\">\n                <core-local-file *ngFor=\"let file of offlineEntryFiles\" [file]=\"file\" />\n            </div>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"onlineEntry && tagsEnabled && entry && onlineEntry.tags && onlineEntry.tags.length > 0\">\n                <ion-label>\n                    <div slot=\"start\">{{ 'core.tag.tags' | translate }}:</div>\n                    <core-tag-list [tags]=\"onlineEntry.tags\" />\n                </ion-label>\n            </ion-item>\n            <ion-item *ngIf=\"canDelete || canEdit\">\n                <div slot=\"end\">\n                    <ion-button *ngIf=\"canDelete\" fill=\"clear\" color=\"danger\" (click)=\"deleteEntry()\"\n                        [attr.aria-label]=\"'addon.mod_glossary.deleteentry' | translate\">\n                        <ion-icon slot=\"icon-only\" name=\"fas-trash\" aria-hidden=\"true\" />\n                    </ion-button>\n                    <ion-button *ngIf=\"canEdit\" fill=\"clear\" (click)=\"editEntry()\"\n                        [attr.aria-label]=\"'addon.mod_glossary.editentry' | translate\">\n                        <ion-icon slot=\"icon-only\" name=\"fas-pen\" aria-hidden=\"true\" />\n                    </ion-button>\n                </div>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"onlineEntry && !onlineEntry.approved\">\n                <ion-label>\n                    <p><em>{{ 'addon.mod_glossary.entrypendingapproval' | translate }}</em></p>\n                </ion-label>\n            </ion-item>\n            <core-comments *ngIf=\"glossary && glossary.allowcomments && onlineEntry && onlineEntry.id > 0 && commentsEnabled\"\n                contextLevel=\"module\" [instanceId]=\"glossary.coursemodule\" component=\"mod_glossary\" [itemId]=\"onlineEntry.id\"\n                area=\"glossary_entry\" [courseId]=\"glossary.course\" [showItem]=\"true\" />\n            <core-rating-rate *ngIf=\"glossary && ratingInfo && onlineEntry\" [ratingInfo]=\"ratingInfo\" contextLevel=\"module\"\n                [instanceId]=\"glossary.coursemodule\" [itemId]=\"onlineEntry.id\" [itemSetId]=\"0\" [courseId]=\"glossary.course\"\n                [aggregateMethod]=\"glossary.assessed\" [scaleId]=\"glossary.scale\" [userId]=\"entry.userid\" (onUpdate)=\"ratingUpdated()\" />\n            <core-rating-aggregate *ngIf=\"glossary && ratingInfo && onlineEntry\" [ratingInfo]=\"ratingInfo\" contextLevel=\"module\"\n                [instanceId]=\"glossary.coursemodule\" [itemId]=\"onlineEntry.id\" [courseId]=\"glossary.course\"\n                [aggregateMethod]=\"glossary.assessed\" [scaleId]=\"glossary.scale\" />\n        </ng-container>\n\n        <ion-card *ngIf=\"!entry\" class=\"core-warning-card\">\n            <ion-item>\n                <ion-label>{{ 'addon.mod_glossary.errorloadingentry' | translate }}</ion-label>\n            </ion-item>\n        </ion-card>\n    </core-loading>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}