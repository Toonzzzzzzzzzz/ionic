{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaReportBuilder:';\nexport const REPORTS_LIST_LIMIT = 20;\nexport const REPORT_ROWS_LIMIT = 20;\nexport class CoreReportBuilderService {\n  /**\n   * Obtain the reports list.\n   *\n   * @param page Current page.\n   * @param perpage Reports obtained per page.\n   * @returns Reports list.\n   */\n  getReports(page, perpage) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      const preSets = {\n        cacheKey: _this.getReportBuilderCacheKey()\n      };\n      const response = yield site.read('core_reportbuilder_list_reports', {\n        page,\n        perpage\n      }, preSets);\n      return response.reports;\n    })();\n  }\n  /**\n   * Get the detail of a report.\n   *\n   * @param reportid Report id\n   * @param page Current page.\n   * @param perpage Rows obtained per page.\n   * @returns Detail of the report.\n   */\n  loadReport(reportid, page, perpage) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var _settingsData$cardvie;\n      const site = CoreSites.getRequiredCurrentSite();\n      const preSets = {\n        cacheKey: _this2.getReportBuilderReportCacheKey()\n      };\n      const report = yield site.read('core_reportbuilder_retrieve_report', {\n        reportid,\n        page,\n        perpage\n      }, preSets);\n      if (!report) {\n        throw new CoreError('An error ocurred.');\n      }\n      const settingsData = report.details.settingsdata ? JSON.parse(report.details.settingsdata) : {};\n      const mappedSettingsData = {\n        cardviewShowFirstTitle: settingsData.cardview_showfirsttitle === 1,\n        cardviewVisibleColumns: (_settingsData$cardvie = settingsData.cardview_visiblecolumns) !== null && _settingsData$cardvie !== void 0 ? _settingsData$cardvie : 1\n      };\n      return _objectSpread(_objectSpread({}, report), {}, {\n        details: _objectSpread(_objectSpread({}, report.details), {}, {\n          settingsdata: mappedSettingsData\n        }),\n        data: _objectSpread(_objectSpread({}, report.data), {}, {\n          rows: [...report.data.rows.map(row => {\n            var _row$isExpanded;\n            return {\n              columns: row.columns,\n              isExpanded: (_row$isExpanded = row.isExpanded) !== null && _row$isExpanded !== void 0 ? _row$isExpanded : false\n            };\n          })]\n        })\n      });\n    })();\n  }\n  /**\n   * View a report.\n   *\n   * @param reportid Report viewed.\n   * @returns Response of the WS.\n   */\n  viewReport(reportid) {\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      yield site.write('core_reportbuilder_view_report', {\n        reportid\n      });\n    })();\n  }\n  /**\n   * Check if the feature is enabled or disabled.\n   *\n   * @returns Feature enabled or disabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      const hasTheVersionRequired = site.isVersionGreaterEqualThan('4.1');\n      const hasAdvancedFeatureEnabled = site.canUseAdvancedFeature('enablecustomreports');\n      const isFeatureDisabled = site.isFeatureDisabled('CoreReportBuilderDelegate');\n      return hasTheVersionRequired && hasAdvancedFeatureEnabled && !isFeatureDisabled;\n    })();\n  }\n  /**\n   * Invalidates reports list WS calls.\n   *\n   * @returns Promise resolved when the list is invalidated.\n   */\n  invalidateReportsList() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      yield site.invalidateWsCacheForKey(_this3.getReportBuilderCacheKey());\n    })();\n  }\n  /**\n   * Invalidates report WS calls.\n   *\n   * @returns Promise resolved when report is invalidated.\n   */\n  invalidateReport() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getCurrentSite();\n      if (!site) {\n        return;\n      }\n      yield site.invalidateWsCacheForKey(_this4.getReportBuilderReportCacheKey());\n    })();\n  }\n  /**\n   * Get cache key for report builder list WS calls.\n   *\n   * @returns Cache key.\n   */\n  getReportBuilderCacheKey() {\n    return ROOT_CACHE_KEY + 'list';\n  }\n  /**\n   * Get cache key for report builder report WS calls.\n   *\n   * @returns Cache key.\n   */\n  getReportBuilderReportCacheKey() {\n    return ROOT_CACHE_KEY + 'report';\n  }\n  isString(value) {\n    return typeof value === 'string';\n  }\n}\n_class = CoreReportBuilderService;\n_class.ɵfac = function CoreReportBuilderService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreReportBuilder = makeSingleton(CoreReportBuilderService);","map":{"version":3,"names":["CoreError","CoreSites","makeSingleton","ROOT_CACHE_KEY","REPORTS_LIST_LIMIT","REPORT_ROWS_LIMIT","CoreReportBuilderService","getReports","page","perpage","_this","_asyncToGenerator","site","getRequiredCurrentSite","preSets","cacheKey","getReportBuilderCacheKey","response","read","reports","loadReport","reportid","_this2","_settingsData$cardvie","getReportBuilderReportCacheKey","report","settingsData","details","settingsdata","JSON","parse","mappedSettingsData","cardviewShowFirstTitle","cardview_showfirsttitle","cardviewVisibleColumns","cardview_visiblecolumns","_objectSpread","data","rows","map","row","_row$isExpanded","columns","isExpanded","viewReport","write","isEnabled","hasTheVersionRequired","isVersionGreaterEqualThan","hasAdvancedFeatureEnabled","canUseAdvancedFeature","isFeatureDisabled","invalidateReportsList","_this3","invalidateWsCacheForKey","invalidateReport","_this4","getCurrentSite","isString","value","factory","ɵfac","providedIn","CoreReportBuilder"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/reportbuilder/services/reportbuilder.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreSites } from '@services/sites';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { makeSingleton } from '@singletons';\n\nconst ROOT_CACHE_KEY = 'mmaReportBuilder:';\nexport const REPORTS_LIST_LIMIT = 20;\nexport const REPORT_ROWS_LIMIT = 20;\n\n@Injectable({ providedIn: 'root' })\nexport class CoreReportBuilderService {\n\n    /**\n     * Obtain the reports list.\n     *\n     * @param page Current page.\n     * @param perpage Reports obtained per page.\n     * @returns Reports list.\n     */\n    async getReports(page?: number, perpage?: number): Promise<CoreReportBuilderReport[]> {\n        const site = CoreSites.getRequiredCurrentSite();\n        const preSets: CoreSiteWSPreSets = { cacheKey: this.getReportBuilderCacheKey() };\n        const response = await site.read<CoreReportBuilderListReportsWSResponse>(\n            'core_reportbuilder_list_reports',\n            { page, perpage },\n            preSets,\n        );\n\n        return response.reports;\n    }\n\n    /**\n     * Get the detail of a report.\n     *\n     * @param reportid Report id\n     * @param page Current page.\n     * @param perpage Rows obtained per page.\n     * @returns Detail of the report.\n     */\n    async loadReport(reportid: number, page?: number, perpage?: number): Promise<CoreReportBuilderRetrieveReportMapped> {\n        const site = CoreSites.getRequiredCurrentSite();\n        const preSets: CoreSiteWSPreSets = { cacheKey: this.getReportBuilderReportCacheKey() };\n        const report = await site.read<CoreReportBuilderRetrieveReportWSResponse>(\n            'core_reportbuilder_retrieve_report',\n            { reportid, page, perpage },\n            preSets,\n        );\n\n        if (!report) {\n            throw new CoreError('An error ocurred.');\n        }\n\n        const settingsData: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            cardview_showfirsttitle: number;\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            cardview_visiblecolumns: number;\n        } = report.details.settingsdata ? JSON.parse(report.details.settingsdata) : {};\n\n        const mappedSettingsData: CoreReportBuilderReportDetailSettingsData = {\n            cardviewShowFirstTitle: settingsData.cardview_showfirsttitle === 1,\n            cardviewVisibleColumns: settingsData.cardview_visiblecolumns ?? 1,\n        };\n\n        return {\n            ...report,\n            details: {\n                ...report.details,\n                settingsdata: mappedSettingsData,\n            },\n            data: {\n                ...report.data,\n                rows: [...report.data.rows.map(row => ({ columns: row.columns, isExpanded: row.isExpanded ?? false }))],\n            },\n        };\n    }\n\n    /**\n     * View a report.\n     *\n     * @param reportid Report viewed.\n     * @returns Response of the WS.\n     */\n    async viewReport(reportid: string): Promise<void> {\n        const site = CoreSites.getRequiredCurrentSite();\n\n        await site.write<CoreReportBuilderViewReportWSResponse>('core_reportbuilder_view_report', { reportid });\n    }\n\n    /**\n     * Check if the feature is enabled or disabled.\n     *\n     * @returns Feature enabled or disabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        const site = CoreSites.getRequiredCurrentSite();\n        const hasTheVersionRequired = site.isVersionGreaterEqualThan('4.1');\n        const hasAdvancedFeatureEnabled = site.canUseAdvancedFeature('enablecustomreports');\n        const isFeatureDisabled = site.isFeatureDisabled('CoreReportBuilderDelegate');\n\n        return hasTheVersionRequired && hasAdvancedFeatureEnabled && !isFeatureDisabled;\n    }\n\n    /**\n     * Invalidates reports list WS calls.\n     *\n     * @returns Promise resolved when the list is invalidated.\n     */\n    async invalidateReportsList(): Promise<void> {\n        const site = CoreSites.getRequiredCurrentSite();\n        await site.invalidateWsCacheForKey(this.getReportBuilderCacheKey());\n    }\n\n    /**\n     * Invalidates report WS calls.\n     *\n     * @returns Promise resolved when report is invalidated.\n     */\n    async invalidateReport(): Promise<void> {\n        const site = CoreSites.getCurrentSite();\n\n        if (!site) {\n            return;\n        }\n\n        await site.invalidateWsCacheForKey(this.getReportBuilderReportCacheKey());\n    }\n\n    /**\n     * Get cache key for report builder list WS calls.\n     *\n     * @returns Cache key.\n     */\n    protected getReportBuilderCacheKey(): string {\n        return ROOT_CACHE_KEY + 'list';\n    }\n\n    /**\n     * Get cache key for report builder report WS calls.\n     *\n     * @returns Cache key.\n     */\n    protected getReportBuilderReportCacheKey(): string {\n        return ROOT_CACHE_KEY + 'report';\n    }\n\n    isString(value: unknown): boolean {\n        return typeof value === 'string';\n    }\n\n}\n\nexport const CoreReportBuilder = makeSingleton(CoreReportBuilderService);\n\ntype CoreReportBuilderPagination = {\n    page?: number;\n    perpage?: number;\n};\n\nexport type CoreReportBuilderRetrieveReportWSParams = CoreReportBuilderPagination & {\n    reportid: number; // Report ID.\n};\n\n/**\n * Data returned by core_reportbuilder_list_reports WS.\n */\nexport type CoreReportBuilderListReportsWSResponse = {\n    reports: CoreReportBuilderReportWSResponse[];\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport type CoreReportBuilderReportWSResponse = {\n    name: string; // Name.\n    source: string; // Source.\n    type: number; // Type.\n    uniquerows: boolean; // Uniquerows.\n    conditiondata: string; // Conditiondata.\n    settingsdata: string | null; // Settingsdata.\n    contextid: number; // Contextid.\n    component: string; // Component.\n    area: string; // Area.\n    itemid: number; // Itemid.\n    usercreated: number; // Usercreated.\n    id: number; // Id.\n    timecreated: number; // Timecreated.\n    timemodified: number; // Timemodified.\n    usermodified: number; // Usermodified.\n    sourcename: string; // Sourcename.\n    modifiedby: {\n        id: number; // Id.\n        email: string; // Email.\n        idnumber: string; // Idnumber.\n        phone1: string; // Phone1.\n        phone2: string; // Phone2.\n        department: string; // Department.\n        institution: string; // Institution.\n        fullname: string; // Fullname.\n        identity: string; // Identity.\n        profileurl: string; // Profileurl.\n        profileimageurl: string; // Profileimageurl.\n        profileimageurlsmall: string; // Profileimageurlsmall.\n    };\n};\n\n/**\n * Data returned by core_reportbuilder_retrieve_report WS.\n */\nexport type CoreReportBuilderRetrieveReportWSResponse = {\n    details: CoreReportBuilderReportWSResponse;\n    data: CoreReportBuilderReportDataWSResponse;\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport interface CoreReportBuilderRetrieveReportMapped extends Omit<CoreReportBuilderRetrieveReportWSResponse, 'details'> {\n    details: CoreReportBuilderReportDetail;\n}\n\nexport type CoreReportBuilderReportDataWSResponse = {\n    headers: string[]; // Headers.\n    rows: { // Rows.\n        columns: (string | number)[]; // Columns.\n        isExpanded: boolean;\n    }[];\n    totalrowcount: number; // Totalrowcount.\n};\n\n/**\n * Params of core_reportbuilder_view_report WS.\n */\nexport type CoreReportBuilderViewReportWSParams = {\n    reportid: number; // Report ID.\n};\n\n/**\n * Data returned by core_reportbuilder_view_report WS.\n */\nexport type CoreReportBuilderViewReportWSResponse = {\n    status: boolean; // Success.\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport interface CoreReportBuilderReportDetail extends Omit<CoreReportBuilderReportWSResponse, 'settingsdata'> {\n    settingsdata: CoreReportBuilderReportDetailSettingsData;\n}\n\nexport type CoreReportBuilderReportDetailSettingsData = {\n    cardviewShowFirstTitle: boolean;\n    cardviewVisibleColumns: number;\n};\n\nexport interface CoreReportBuilderReport extends CoreReportBuilderReportWSResponse {}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}