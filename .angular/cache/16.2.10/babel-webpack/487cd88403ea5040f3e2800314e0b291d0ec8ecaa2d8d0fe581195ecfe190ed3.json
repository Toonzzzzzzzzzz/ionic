{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { AddonModForum, AddonModForumProvider } from '../forum';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreGroups, CoreGroupsProvider } from '@services/groups';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModForumSync } from '../forum-sync';\nimport { makeSingleton } from '@singletons';\nimport { CoreCourses } from '@features/courses/services/courses';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to prefetch forums.\n */\nexport class AddonModForumPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModForum';\n    this.modName = 'forum';\n    this.component = AddonModForumProvider.COMPONENT;\n    this.updatesNames = /^configuration$|^.*files$|^discussions$/;\n  }\n  /**\n   * @inheritdoc\n   */\n  getFiles(module, courseId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const forum = yield AddonModForum.getForum(courseId, module.id);\n        let files = _this.getIntroFilesFromInstance(module, forum);\n        // Get posts.\n        const posts = yield _this.getPostsForPrefetch(forum, {\n          cmId: module.id\n        });\n        // Add posts attachments and embedded files.\n        files = files.concat(_this.getPostsFiles(posts));\n        return files;\n      } catch (error) {\n        // Forum not found, return empty list.\n        return [];\n      }\n    })();\n  }\n  /**\n   * Given a list of forum posts, return a list with all the files (attachments and embedded files).\n   *\n   * @param posts Forum posts.\n   * @returns Files.\n   */\n  getPostsFiles(posts) {\n    let files = [];\n    posts.forEach(post => {\n      if (post.attachments && post.attachments.length) {\n        files = files.concat(post.attachments);\n      }\n      if (post.messageinlinefiles) {\n        files = files.concat(post.messageinlinefiles);\n      } else if (post.message) {\n        files = files.concat(CoreFilepool.extractDownloadableFilesFromHtmlAsFakeFileObjects(post.message));\n      }\n    });\n    return files;\n  }\n  /**\n   * Get the posts to be prefetched.\n   *\n   * @param forum Forum instance.\n   * @param options Other options.\n   * @returns Promise resolved with array of posts.\n   */\n  getPostsForPrefetch(forum, options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Only prefetch selected sort order.\n      const sortOrder = yield AddonModForum.getSelectedSortOrder();\n      const groupsIds = yield _this2.getGroupsIdsToPrefetch(forum);\n      const results = yield Promise.all(groupsIds.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (groupId) {\n          // Get discussions in first 2 pages.\n          const discussionsOptions = _objectSpread({\n            sortOrder: sortOrder.value,\n            groupId: groupId,\n            numPages: 2\n          }, options);\n          const response = yield AddonModForum.getDiscussionsInPages(forum.id, discussionsOptions);\n          if (response.error) {\n            throw new Error('Failed getting discussions');\n          }\n          return Promise.all(response.discussions.map(discussion => AddonModForum.getDiscussionPosts(discussion.discussion, options)));\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      const posts = [];\n      const postIds = {}; // To make the array unique.\n      results.forEach(groupResults => {\n        groupResults.forEach(groupDiscussion => {\n          groupDiscussion.posts.forEach(post => {\n            if (!postIds[post.id]) {\n              postIds[post.id] = true;\n              posts.push(post);\n            }\n          });\n        });\n      });\n      return posts;\n    })();\n  }\n  /**\n   * Get the group IDs to prefetch in a forum.\n   * Prefetch all participants if the user can view them. Otherwise, prefetch the groups the user can view.\n   *\n   * @param forum Forum instance.\n   * @returns Promise resolved with array of group IDs.\n   */\n  getGroupsIdsToPrefetch(forum) {\n    return _asyncToGenerator(function* () {\n      var _groupInfo$groups$map;\n      const groupInfo = yield CoreGroups.getActivityGroupInfo(forum.cmid);\n      const supportsChangeGroup = AddonModForum.isGetDiscussionPostsAvailable();\n      const usesGroups = !!(groupInfo.separateGroups || groupInfo.visibleGroups);\n      if (!usesGroups) {\n        return [0];\n      }\n      const allPartsGroup = groupInfo.groups.find(group => group.id === 0);\n      if (allPartsGroup) {\n        return [0]; // Prefetch all participants.\n      }\n\n      if (!supportsChangeGroup) {\n        // Cannot change group, prefetch only the default group.\n        return [groupInfo.defaultGroupId];\n      }\n      return (_groupInfo$groups$map = groupInfo.groups.map(group => group.id)) !== null && _groupInfo$groups$map !== void 0 ? _groupInfo$groups$map : [0];\n    })();\n  }\n  /**\n   * Invalidate the prefetched content.\n   *\n   * @param moduleId The module ID.\n   * @param courseId The course ID the module belongs to.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateContent(moduleId, courseId) {\n    return AddonModForum.invalidateContent(moduleId, courseId);\n  }\n  /**\n   * Invalidate WS calls needed to determine module status (usually, to check if module is downloadable).\n   * It doesn't need to invalidate check updates. It should NOT invalidate files nor all the prefetched data.\n   *\n   * @param module Module.\n   * @param courseId Course ID the module belongs to.\n   * @returns Promise resolved when invalidated.\n   */\n  invalidateModule(module, courseId) {\n    return _asyncToGenerator(function* () {\n      // Invalidate forum data to recalculate unread message count badge.\n      const promises = [];\n      promises.push(AddonModForum.invalidateForumData(courseId));\n      promises.push(CoreCourse.invalidateModule(module.id));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  prefetch(module, courseId, single) {\n    return this.prefetchPackage(module, courseId, siteId => this.prefetchForum(module, courseId, !!single, siteId));\n  }\n  /**\n   * Prefetch a forum.\n   *\n   * @param module The module object returned by WS.\n   * @param courseId Course ID the module belongs to.\n   * @param single True if we're downloading a single module, false if we're downloading a whole section.\n   * @param siteId Site ID.\n   * @returns Promise resolved when done.\n   */\n  prefetchForum(module, courseId, single, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const commonOptions = {\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n        siteId\n      };\n      const modOptions = _objectSpread({\n        cmId: module.id\n      }, commonOptions);\n      // Get the forum data.\n      const forum = yield AddonModForum.getForum(courseId, module.id, commonOptions);\n      const promises = [];\n      // Prefetch the posts.\n      promises.push(_this3.getPostsForPrefetch(forum, modOptions).then(posts => {\n        const promises = [];\n        const files = _this3.getIntroFilesFromInstance(module, forum).concat(_this3.getPostsFiles(posts));\n        promises.push(CoreFilepool.addFilesToQueue(siteId, files, _this3.component, module.id));\n        // Prefetch groups data.\n        promises.push(_this3.prefetchGroupsInfo(forum, courseId, !!forum.cancreatediscussions, siteId));\n        // Prefetch avatars.\n        promises.push(CoreUser.prefetchUserAvatars(posts, 'userpictureurl', siteId));\n        return Promise.all(promises);\n      }));\n      // Prefetch access information.\n      promises.push(AddonModForum.getAccessInformation(forum.id, modOptions));\n      // Get course data, needed to determine upload max size if it's configured to be course limit.\n      promises.push(CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', courseId, siteId)));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Prefetch groups info for a forum.\n   *\n   * @param forum The module object returned by WS.\n   * @param courseId Course ID the module belongs to.\n   * @param canCreateDiscussions Whether the user can create discussions in the forum.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when group data has been prefetched.\n   */\n  prefetchGroupsInfo(forum, courseId, canCreateDiscussions, siteId) {\n    return _asyncToGenerator(function* () {\n      const options = {\n        cmId: forum.cmid,\n        siteId\n      };\n      // Check group mode.\n      try {\n        const mode = yield CoreGroups.getActivityGroupMode(forum.cmid, siteId);\n        if (mode !== CoreGroupsProvider.SEPARATEGROUPS && mode !== CoreGroupsProvider.VISIBLEGROUPS) {\n          // Activity doesn't use groups. Prefetch canAddDiscussionToAll to determine if user can pin/attach.\n          yield CoreUtils.ignoreErrors(AddonModForum.canAddDiscussionToAll(forum.id, options));\n          return;\n        }\n        // Activity uses groups, prefetch allowed groups.\n        const result = yield CoreGroups.getActivityAllowedGroups(forum.cmid, undefined, siteId);\n        yield Promise.all(result.groups.map( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (group) {\n            return CoreUtils.ignoreErrors(AddonModForum.canAddDiscussion(forum.id, group.id, options));\n          });\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }()).concat(CoreUtils.ignoreErrors(AddonModForum.canAddDiscussionToAll(forum.id, options))));\n      } catch (error) {\n        // Ignore errors if cannot create discussions.\n        if (canCreateDiscussions) {\n          throw error;\n        }\n      }\n    })();\n  }\n  /**\n   * Sync a module.\n   *\n   * @param module Module.\n   * @param courseId Course ID the module belongs to\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  sync(module, courseId, siteId) {\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      promises.push(AddonModForumSync.syncForumDiscussions(module.instance, undefined, siteId));\n      promises.push(AddonModForumSync.syncForumReplies(module.instance, undefined, siteId));\n      promises.push(AddonModForumSync.syncRatings(module.id, undefined, true, siteId));\n      const results = yield Promise.all(promises);\n      return results.reduce((a, b) => ({\n        updated: a.updated || b.updated,\n        warnings: (a.warnings || []).concat(b.warnings || [])\n      }), {\n        updated: false,\n        warnings: []\n      });\n    })();\n  }\n}\n_class = AddonModForumPrefetchHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModForumPrefetchHandlerService_BaseFactory;\n  return function AddonModForumPrefetchHandlerService_Factory(t) {\n    return (ɵAddonModForumPrefetchHandlerService_BaseFactory || (ɵAddonModForumPrefetchHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModForumPrefetchHandler = makeSingleton(AddonModForumPrefetchHandlerService);","map":{"version":3,"names":["CoreCourseActivityPrefetchHandlerBase","AddonModForum","AddonModForumProvider","CoreFilepool","CoreCourse","CoreUser","CoreGroups","CoreGroupsProvider","CoreUtils","AddonModForumSync","makeSingleton","CoreCourses","AddonModForumPrefetchHandlerService","constructor","name","modName","component","COMPONENT","updatesNames","getFiles","module","courseId","_this","_asyncToGenerator","forum","getForum","id","files","getIntroFilesFromInstance","posts","getPostsForPrefetch","cmId","concat","getPostsFiles","error","forEach","post","attachments","length","messageinlinefiles","message","extractDownloadableFilesFromHtmlAsFakeFileObjects","options","_this2","sortOrder","getSelectedSortOrder","groupsIds","getGroupsIdsToPrefetch","results","Promise","all","map","_ref","groupId","discussionsOptions","_objectSpread","value","numPages","response","getDiscussionsInPages","Error","discussions","discussion","getDiscussionPosts","_x","apply","arguments","postIds","groupResults","groupDiscussion","push","_groupInfo$groups$map","groupInfo","getActivityGroupInfo","cmid","supportsChangeGroup","isGetDiscussionPostsAvailable","usesGroups","separateGroups","visibleGroups","allPartsGroup","groups","find","group","defaultGroupId","invalidateContent","moduleId","invalidateModule","promises","invalidateForumData","prefetch","single","prefetchPackage","siteId","prefetchForum","_this3","commonOptions","readingStrategy","modOptions","then","addFilesToQueue","prefetchGroupsInfo","cancreatediscussions","prefetchUserAvatars","getAccessInformation","ignoreErrors","getCourseByField","canCreateDiscussions","mode","getActivityGroupMode","SEPARATEGROUPS","VISIBLEGROUPS","canAddDiscussionToAll","result","getActivityAllowedGroups","undefined","_ref2","canAddDiscussion","_x2","sync","syncForumDiscussions","instance","syncForumReplies","syncRatings","reduce","a","b","updated","warnings","t","factory","ɵfac","providedIn","AddonModForumPrefetchHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/forum/services/handlers/prefetch.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { AddonModForum, AddonModForumData, AddonModForumPost, AddonModForumProvider } from '../forum';\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreWSFile } from '@services/ws';\nimport { CoreCourse, CoreCourseAnyModuleData, CoreCourseCommonModWSOptions } from '@features/course/services/course';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreGroups, CoreGroupsProvider } from '@services/groups';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModForumSync, AddonModForumSyncResult } from '../forum-sync';\nimport { makeSingleton } from '@singletons';\nimport { CoreCourses } from '@features/courses/services/courses';\n\n/**\n * Handler to prefetch forums.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModForumPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n\n    name = 'AddonModForum';\n    modName = 'forum';\n    component = AddonModForumProvider.COMPONENT;\n    updatesNames = /^configuration$|^.*files$|^discussions$/;\n\n    /**\n     * @inheritdoc\n     */\n    async getFiles(module: CoreCourseAnyModuleData, courseId: number): Promise<CoreWSFile[]> {\n        try {\n            const forum = await AddonModForum.getForum(courseId, module.id);\n\n            let files = this.getIntroFilesFromInstance(module, forum);\n\n            // Get posts.\n            const posts = await this.getPostsForPrefetch(forum, { cmId: module.id });\n\n            // Add posts attachments and embedded files.\n            files = files.concat(this.getPostsFiles(posts));\n\n            return files;\n        } catch (error) {\n            // Forum not found, return empty list.\n            return [];\n        }\n    }\n\n    /**\n     * Given a list of forum posts, return a list with all the files (attachments and embedded files).\n     *\n     * @param posts Forum posts.\n     * @returns Files.\n     */\n    protected getPostsFiles(posts: AddonModForumPost[]): CoreWSFile[] {\n        let files: CoreWSFile[] = [];\n\n        posts.forEach((post) => {\n            if (post.attachments && post.attachments.length) {\n                files = files.concat(post.attachments as CoreWSFile[]);\n            }\n\n            if (post.messageinlinefiles) {\n                files = files.concat(post.messageinlinefiles);\n            } else if (post.message) {\n                files = files.concat(CoreFilepool.extractDownloadableFilesFromHtmlAsFakeFileObjects(post.message));\n            }\n        });\n\n        return files;\n    }\n\n    /**\n     * Get the posts to be prefetched.\n     *\n     * @param forum Forum instance.\n     * @param options Other options.\n     * @returns Promise resolved with array of posts.\n     */\n    protected async getPostsForPrefetch(\n        forum: AddonModForumData,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<AddonModForumPost[]> {\n        // Only prefetch selected sort order.\n        const sortOrder = await AddonModForum.getSelectedSortOrder();\n\n        const groupsIds = await this.getGroupsIdsToPrefetch(forum);\n\n        const results = await Promise.all(groupsIds.map(async (groupId) => {\n            // Get discussions in first 2 pages.\n            const discussionsOptions = {\n                sortOrder: sortOrder.value,\n                groupId: groupId,\n                numPages: 2,\n                ...options, // Include all options.\n            };\n\n            const response = await AddonModForum.getDiscussionsInPages(forum.id, discussionsOptions);\n\n            if (response.error) {\n                throw new Error('Failed getting discussions');\n            }\n\n            return Promise.all(\n                response.discussions.map((discussion) => AddonModForum.getDiscussionPosts(discussion.discussion, options)),\n            );\n        }));\n\n        const posts: AddonModForumPost[] = [];\n        const postIds: Record<number, boolean> = {}; // To make the array unique.\n\n        results.forEach((groupResults) => {\n            groupResults.forEach((groupDiscussion) => {\n                groupDiscussion.posts.forEach((post) => {\n                    if (!postIds[post.id]) {\n                        postIds[post.id] = true;\n                        posts.push(post);\n                    }\n                });\n            });\n        });\n\n        return posts;\n    }\n\n    /**\n     * Get the group IDs to prefetch in a forum.\n     * Prefetch all participants if the user can view them. Otherwise, prefetch the groups the user can view.\n     *\n     * @param forum Forum instance.\n     * @returns Promise resolved with array of group IDs.\n     */\n    protected async getGroupsIdsToPrefetch(forum: AddonModForumData): Promise<number[]> {\n        const groupInfo = await CoreGroups.getActivityGroupInfo(forum.cmid);\n\n        const supportsChangeGroup = AddonModForum.isGetDiscussionPostsAvailable();\n        const usesGroups = !!(groupInfo.separateGroups || groupInfo.visibleGroups);\n\n        if (!usesGroups) {\n            return [0];\n        }\n\n        const allPartsGroup = groupInfo.groups.find(group => group.id === 0);\n        if (allPartsGroup) {\n            return [0]; // Prefetch all participants.\n        }\n\n        if (!supportsChangeGroup) {\n            // Cannot change group, prefetch only the default group.\n            return [groupInfo.defaultGroupId];\n        }\n\n        return groupInfo.groups.map(group => group.id) ?? [0];\n    }\n\n    /**\n     * Invalidate the prefetched content.\n     *\n     * @param moduleId The module ID.\n     * @param courseId The course ID the module belongs to.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    invalidateContent(moduleId: number, courseId: number): Promise<void> {\n        return AddonModForum.invalidateContent(moduleId, courseId);\n    }\n\n    /**\n     * Invalidate WS calls needed to determine module status (usually, to check if module is downloadable).\n     * It doesn't need to invalidate check updates. It should NOT invalidate files nor all the prefetched data.\n     *\n     * @param module Module.\n     * @param courseId Course ID the module belongs to.\n     * @returns Promise resolved when invalidated.\n     */\n    async invalidateModule(module: CoreCourseAnyModuleData, courseId: number): Promise<void> {\n        // Invalidate forum data to recalculate unread message count badge.\n        const promises: Promise<unknown>[] = [];\n\n        promises.push(AddonModForum.invalidateForumData(courseId));\n        promises.push(CoreCourse.invalidateModule(module.id));\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    prefetch(module: CoreCourseAnyModuleData, courseId: number, single?: boolean): Promise<void> {\n        return this.prefetchPackage(module, courseId, (siteId) => this.prefetchForum(module, courseId, !!single, siteId));\n    }\n\n    /**\n     * Prefetch a forum.\n     *\n     * @param module The module object returned by WS.\n     * @param courseId Course ID the module belongs to.\n     * @param single True if we're downloading a single module, false if we're downloading a whole section.\n     * @param siteId Site ID.\n     * @returns Promise resolved when done.\n     */\n    protected async prefetchForum(\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        single: boolean,\n        siteId: string,\n    ): Promise<void> {\n        const commonOptions = {\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId,\n        };\n        const modOptions = {\n            cmId: module.id,\n            ...commonOptions, // Include all common options.\n        };\n\n        // Get the forum data.\n        const forum = await AddonModForum.getForum(courseId, module.id, commonOptions);\n        const promises: Promise<unknown>[] = [];\n\n        // Prefetch the posts.\n        promises.push(this.getPostsForPrefetch(forum, modOptions).then((posts) => {\n            const promises: Promise<unknown>[] = [];\n\n            const files = this.getIntroFilesFromInstance(module, forum).concat(this.getPostsFiles(posts));\n            promises.push(CoreFilepool.addFilesToQueue(siteId, files, this.component, module.id));\n\n            // Prefetch groups data.\n            promises.push(this.prefetchGroupsInfo(forum, courseId, !!forum.cancreatediscussions, siteId));\n\n            // Prefetch avatars.\n            promises.push(CoreUser.prefetchUserAvatars(posts, 'userpictureurl', siteId));\n\n            return Promise.all(promises);\n        }));\n\n        // Prefetch access information.\n        promises.push(AddonModForum.getAccessInformation(forum.id, modOptions));\n\n        // Get course data, needed to determine upload max size if it's configured to be course limit.\n        promises.push(CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', courseId, siteId)));\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Prefetch groups info for a forum.\n     *\n     * @param forum The module object returned by WS.\n     * @param courseId Course ID the module belongs to.\n     * @param canCreateDiscussions Whether the user can create discussions in the forum.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when group data has been prefetched.\n     */\n    protected async prefetchGroupsInfo(\n        forum: AddonModForumData,\n        courseId: number,\n        canCreateDiscussions: boolean,\n        siteId?: string,\n    ): Promise<void> {\n        const options = {\n            cmId: forum.cmid,\n            siteId,\n        };\n\n        // Check group mode.\n        try {\n            const mode = await CoreGroups.getActivityGroupMode(forum.cmid, siteId);\n\n            if (mode !== CoreGroupsProvider.SEPARATEGROUPS && mode !== CoreGroupsProvider.VISIBLEGROUPS) {\n                // Activity doesn't use groups. Prefetch canAddDiscussionToAll to determine if user can pin/attach.\n                await CoreUtils.ignoreErrors(AddonModForum.canAddDiscussionToAll(forum.id, options));\n\n                return;\n            }\n\n            // Activity uses groups, prefetch allowed groups.\n            const result = await CoreGroups.getActivityAllowedGroups(forum.cmid, undefined, siteId);\n            await Promise.all(\n                result.groups.map(\n                    async (group) => CoreUtils.ignoreErrors(\n                        AddonModForum.canAddDiscussion(forum.id, group.id, options),\n                    ),\n                ).concat(\n                    CoreUtils.ignoreErrors(AddonModForum.canAddDiscussionToAll(forum.id, options)),\n                ),\n            );\n        } catch (error) {\n            // Ignore errors if cannot create discussions.\n            if (canCreateDiscussions) {\n                throw error;\n            }\n        }\n    }\n\n    /**\n     * Sync a module.\n     *\n     * @param module Module.\n     * @param courseId Course ID the module belongs to\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async sync(\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        siteId?: string,\n    ): Promise<AddonModForumSyncResult> {\n        const promises: Promise<AddonModForumSyncResult>[] = [];\n\n        promises.push(AddonModForumSync.syncForumDiscussions(module.instance, undefined, siteId));\n        promises.push(AddonModForumSync.syncForumReplies(module.instance, undefined, siteId));\n        promises.push(AddonModForumSync.syncRatings(module.id, undefined, true, siteId));\n\n        const results = await Promise.all(promises);\n\n        return results.reduce(\n            (a, b) => ({\n                updated: a.updated || b.updated,\n                warnings: (a.warnings || []).concat(b.warnings || []),\n            }),\n            {\n                updated: false,\n                warnings: [],\n            },\n        );\n    }\n\n}\n\nexport const AddonModForumPrefetchHandler = makeSingleton(AddonModForumPrefetchHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}