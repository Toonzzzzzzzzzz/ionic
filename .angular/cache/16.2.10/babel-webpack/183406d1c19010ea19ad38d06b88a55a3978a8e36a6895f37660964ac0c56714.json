{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { AddonModDataTemplateMode } from '../services/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\n/**\n * Base class for component to render a field.\n */\nexport class AddonModDataFieldPluginBaseComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.gotoEntry = new EventEmitter(); // Action to perform.\n    // Output called when the field is initialized with a value and it didn't have one already.\n    this.onFieldInit = new EventEmitter();\n  }\n  /**\n   * Add the form control for the search mode.\n   *\n   * @param fieldName Control field name.\n   * @param value Initial set value.\n   */\n  addControl(fieldName, value) {\n    if (!this.form) {\n      return;\n    }\n    if (this.searchMode) {\n      var _this$searchFields;\n      this.form.addControl(fieldName, this.fb.control(((_this$searchFields = this.searchFields) === null || _this$searchFields === void 0 ? void 0 : _this$searchFields[fieldName]) || undefined));\n    }\n    if (this.editMode) {\n      this.form.addControl(fieldName, this.fb.control(value, this.field.required ? Validators.required : null));\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    this.init();\n  }\n  /**\n   * Initialize field.\n   */\n  init() {\n    return;\n  }\n  /**\n   * Component being changed.\n   */\n  ngOnChanges(changes) {\n    if ((this.showMode || this.listMode) && changes.value) {\n      this.updateValue(changes.value.currentValue);\n    }\n  }\n  /**\n   * Update value being shown.\n   */\n  updateValue(value) {\n    this.value = value;\n  }\n  /* Magic mode getters */\n  get listMode() {\n    return this.mode == AddonModDataTemplateMode.LIST;\n  }\n  get showMode() {\n    return this.mode == AddonModDataTemplateMode.SHOW;\n  }\n  get displayMode() {\n    return this.listMode || this.showMode;\n  }\n  get editMode() {\n    return this.mode == AddonModDataTemplateMode.EDIT;\n  }\n  get searchMode() {\n    return this.mode == AddonModDataTemplateMode.SEARCH;\n  }\n  get inputMode() {\n    return this.searchMode || this.editMode;\n  }\n}\n_class = AddonModDataFieldPluginBaseComponent;\n_class.ɵfac = function AddonModDataFieldPluginBaseComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    mode: \"mode\",\n    field: \"field\",\n    value: \"value\",\n    database: \"database\",\n    error: \"error\",\n    form: \"form\",\n    searchFields: \"searchFields\"\n  },\n  outputs: {\n    gotoEntry: \"gotoEntry\",\n    onFieldInit: \"onFieldInit\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function AddonModDataFieldPluginBaseComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});","map":{"version":3,"names":["EventEmitter","Validators","AddonModDataTemplateMode","AddonModDataFieldPluginBaseComponent","constructor","fb","gotoEntry","onFieldInit","addControl","fieldName","value","form","searchMode","_this$searchFields","control","searchFields","undefined","editMode","field","required","ngOnInit","init","ngOnChanges","changes","showMode","listMode","updateValue","currentValue","mode","LIST","SHOW","displayMode","EDIT","SEARCH","inputMode","i0","ɵɵdirectiveInject","i1","FormBuilder","selectors","inputs","database","error","outputs","features","ɵɵNgOnChangesFeature","decls","vars","template","AddonModDataFieldPluginBaseComponent_Template","rf","ctx","encapsulation"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/classes/base-field-plugin-component.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Input, Output, OnInit, OnChanges, SimpleChange, EventEmitter, Component } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { CoreFormFields } from '@singletons/form';\nimport { AddonModDataData, AddonModDataEntryField, AddonModDataField, AddonModDataTemplateMode } from '../services/data';\n\n/**\n * Base class for component to render a field.\n */\n@Component({\n    template: '',\n})\nexport abstract class AddonModDataFieldPluginBaseComponent implements OnInit, OnChanges {\n\n    @Input() mode!: AddonModDataTemplateMode; // The render mode.\n    @Input() field!: AddonModDataField; // The field to render.\n    @Input() value?: Partial<AddonModDataEntryField>; // The value of the field.\n    @Input() database?: AddonModDataData; // Database object.\n    @Input() error?: string; // Error when editing.\n    @Input() form?: FormGroup; // Form where to add the form control. Just required for edit and search modes.\n    @Input() searchFields?: CoreFormFields; // The search value of all fields.\n    @Output() gotoEntry = new EventEmitter<number>(); // Action to perform.\n    // Output called when the field is initialized with a value and it didn't have one already.\n    @Output() onFieldInit = new EventEmitter<AddonModDataEntryFieldInitialized>();\n\n    constructor(protected fb: FormBuilder) {\n    }\n\n    /**\n     * Add the form control for the search mode.\n     *\n     * @param fieldName Control field name.\n     * @param value Initial set value.\n     */\n    protected addControl(fieldName: string, value?: unknown): void {\n        if (!this.form) {\n            return;\n        }\n\n        if (this.searchMode) {\n            this.form.addControl(fieldName, this.fb.control(this.searchFields?.[fieldName] || undefined));\n        }\n\n        if (this.editMode) {\n            this.form.addControl(fieldName, this.fb.control(value, this.field.required ? Validators.required : null));\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.init();\n    }\n\n    /**\n     * Initialize field.\n     */\n    protected init(): void {\n        return;\n    }\n\n    /**\n     * Component being changed.\n     */\n    ngOnChanges(changes: { [name: string]: SimpleChange }): void {\n        if ((this.showMode || this.listMode) && changes.value) {\n            this.updateValue(changes.value.currentValue);\n        }\n    }\n\n    /**\n     * Update value being shown.\n     */\n    protected updateValue(value?: Partial<AddonModDataEntryField>): void {\n        this.value = value;\n    }\n\n    /* Magic mode getters */\n    get listMode(): boolean {\n        return this.mode == AddonModDataTemplateMode.LIST;\n    }\n\n    get showMode(): boolean {\n        return this.mode == AddonModDataTemplateMode.SHOW;\n    }\n\n    get displayMode(): boolean {\n        return this.listMode || this.showMode;\n    }\n\n    get editMode(): boolean {\n        return this.mode == AddonModDataTemplateMode.EDIT;\n    }\n\n    get searchMode(): boolean {\n        return this.mode == AddonModDataTemplateMode.SEARCH;\n    }\n\n    get inputMode(): boolean {\n        return this.searchMode || this.editMode;\n    }\n\n}\n\n/**\n * Data for an initialized field.\n */\nexport type AddonModDataEntryFieldInitialized = Partial<AddonModDataEntryField> & {\n    fieldid: number;\n    content: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}