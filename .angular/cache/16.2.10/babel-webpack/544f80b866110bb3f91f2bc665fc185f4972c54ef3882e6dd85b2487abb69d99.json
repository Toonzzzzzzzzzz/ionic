{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDelegate } from '@classes/delegate';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./handlers/default-submission\";\n/**\n * Delegate to register plugins for assign submission.\n */\nexport class AddonModAssignSubmissionDelegateService extends CoreDelegate {\n  constructor(defaultHandler) {\n    super('AddonModAssignSubmissionDelegate', true);\n    this.defaultHandler = defaultHandler;\n    this.handlerNameProperty = 'type';\n  }\n  /**\n   * Whether the plugin can be edited in offline for existing submissions.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @returns Promise resolved with boolean: whether it can be edited in offline.\n   */\n  canPluginEditOffline(assign, submission, plugin) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.executeFunctionOnEnabled(plugin.type, 'canEditOffline', [assign, submission, plugin]);\n    })();\n  }\n  /**\n   * Clear some temporary data for a certain plugin because a submission was cancelled.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param inputData Data entered by the user for the submission.\n   */\n  clearTmpData(assign, submission, plugin, inputData) {\n    this.executeFunctionOnEnabled(plugin.type, 'clearTmpData', [assign, submission, plugin, inputData]);\n  }\n  /**\n   * Copy the data from last submitted attempt to the current submission for a certain plugin.\n   *\n   * @param assign The assignment.\n   * @param plugin The plugin object.\n   * @param pluginData Object where to store the data to send.\n   * @param userId User ID. If not defined, site's current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data has been copied.\n   */\n  copyPluginSubmissionData(assign, plugin, pluginData, userId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.executeFunctionOnEnabled(plugin.type, 'copySubmissionData', [assign, plugin, pluginData, userId, siteId]);\n    })();\n  }\n  /**\n   * Delete offline data stored for a certain submission and plugin.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param offlineData Offline data stored.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  deletePluginOfflineData(assign, submission, plugin, offlineData, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.executeFunctionOnEnabled(plugin.type, 'deleteOfflineData', [assign, submission, plugin, offlineData, siteId]);\n    })();\n  }\n  /**\n   * Get the component to use for a certain submission plugin.\n   *\n   * @param plugin The plugin object.\n   * @param edit Whether the user is editing.\n   * @returns Promise resolved with the component to use, undefined if not found.\n   */\n  getComponentForPlugin(plugin, edit) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.executeFunctionOnEnabled(plugin.type, 'getComponent', [plugin, edit]);\n    })();\n  }\n  /**\n   * Get files used by this plugin.\n   * The files returned by this function will be prefetched when the user prefetches the assign.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getPluginFiles(assign, submission, plugin, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const files = yield _this5.executeFunctionOnEnabled(plugin.type, 'getPluginFiles', [assign, submission, plugin, siteId]);\n      return files || [];\n    })();\n  }\n  /**\n   * Get a readable name to use for a certain submission plugin.\n   *\n   * @param plugin Plugin to get the name for.\n   * @returns Human readable name.\n   */\n  getPluginName(plugin) {\n    return this.executeFunctionOnEnabled(plugin.type, 'getPluginName', [plugin]);\n  }\n  /**\n   * Get the size of data (in bytes) this plugin will send to copy a previous submission.\n   *\n   * @param assign The assignment.\n   * @param plugin The plugin object.\n   * @returns Promise resolved with size.\n   */\n  getPluginSizeForCopy(assign, plugin) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return _this6.executeFunctionOnEnabled(plugin.type, 'getSizeForCopy', [assign, plugin]);\n    })();\n  }\n  /**\n   * Get the size of data (in bytes) this plugin will send to add or edit a submission.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param inputData Data entered by the user for the submission.\n   * @returns Promise resolved with size.\n   */\n  getPluginSizeForEdit(assign, submission, plugin, inputData) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return _this7.executeFunctionOnEnabled(plugin.type, 'getSizeForEdit', [assign, submission, plugin, inputData]);\n    })();\n  }\n  /**\n   * Check if the submission data has changed for a certain plugin.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param inputData Data entered by the user for the submission.\n   * @returns Promise resolved with true if data has changed, resolved with false otherwise.\n   */\n  hasPluginDataChanged(assign, submission, plugin, inputData) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      return _this8.executeFunctionOnEnabled(plugin.type, 'hasDataChanged', [assign, submission, plugin, inputData]);\n    })();\n  }\n  /**\n   * Check if a submission plugin is supported.\n   *\n   * @param pluginType Type of the plugin.\n   * @returns Whether it's supported.\n   */\n  isPluginSupported(pluginType) {\n    return this.hasHandler(pluginType, true);\n  }\n  /**\n   * Check if a submission plugin is supported for edit.\n   *\n   * @param pluginType Type of the plugin.\n   * @returns Whether it's supported for edit.\n   */\n  isPluginSupportedForEdit(pluginType) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      return _this9.executeFunctionOnEnabled(pluginType, 'isEnabledForEdit');\n    })();\n  }\n  /**\n   * Check if a plugin has no data.\n   *\n   * @param assign The assignment.\n   * @param plugin The plugin object.\n   * @returns Whether the plugin is empty.\n   */\n  isPluginEmpty(assign, plugin) {\n    return this.executeFunctionOnEnabled(plugin.type, 'isEmpty', [assign, plugin]);\n  }\n  /**\n   * Prefetch any required data for a submission plugin.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  prefetch(assign, submission, plugin, siteId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      return _this10.executeFunctionOnEnabled(plugin.type, 'prefetch', [assign, submission, plugin, siteId]);\n    })();\n  }\n  /**\n   * Prepare and add to pluginData the data to submit for a certain submission plugin.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param inputData Data entered by the user for the submission.\n   * @param pluginData Object where to store the data to send.\n   * @param offline Whether the user is editing in offline.\n   * @param userId User ID. If not defined, site's current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when data has been gathered.\n   */\n  preparePluginSubmissionData(assign, submission, plugin, inputData, pluginData, offline, userId, siteId) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      return _this11.executeFunctionOnEnabled(plugin.type, 'prepareSubmissionData', [assign, submission, plugin, inputData, pluginData, offline, userId, siteId]);\n    })();\n  }\n  /**\n   * Prepare and add to pluginData the data to send to server to synchronize an offline submission.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param offlineData Offline data stored.\n   * @param pluginData Object where to store the data to send.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when data has been gathered.\n   */\n  preparePluginSyncData(assign, submission, plugin, offlineData, pluginData, siteId) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      return _this12.executeFunctionOnEnabled(plugin.type, 'prepareSyncData', [assign, submission, plugin, offlineData, pluginData, siteId]);\n    })();\n  }\n}\n_class = AddonModAssignSubmissionDelegateService;\n_class.ɵfac = function AddonModAssignSubmissionDelegateService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AddonModAssignDefaultSubmissionHandler));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModAssignSubmissionDelegate = makeSingleton(AddonModAssignSubmissionDelegateService);","map":{"version":3,"names":["CoreDelegate","makeSingleton","AddonModAssignSubmissionDelegateService","constructor","defaultHandler","handlerNameProperty","canPluginEditOffline","assign","submission","plugin","_this","_asyncToGenerator","executeFunctionOnEnabled","type","clearTmpData","inputData","copyPluginSubmissionData","pluginData","userId","siteId","_this2","deletePluginOfflineData","offlineData","_this3","getComponentForPlugin","edit","_this4","getPluginFiles","_this5","files","getPluginName","getPluginSizeForCopy","_this6","getPluginSizeForEdit","_this7","hasPluginDataChanged","_this8","isPluginSupported","pluginType","hasHandler","isPluginSupportedForEdit","_this9","isPluginEmpty","prefetch","_this10","preparePluginSubmissionData","offline","_this11","preparePluginSyncData","_this12","i0","ɵɵinject","i1","AddonModAssignDefaultSubmissionHandler","factory","ɵfac","providedIn","AddonModAssignSubmissionDelegate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/services/submission-delegate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\nimport { CoreDelegate, CoreDelegateHandler } from '@classes/delegate';\nimport { AddonModAssignDefaultSubmissionHandler } from './handlers/default-submission';\nimport { AddonModAssignAssign, AddonModAssignSubmission, AddonModAssignPlugin, AddonModAssignSavePluginData } from './assign';\nimport { makeSingleton } from '@singletons';\nimport { CoreWSFile } from '@services/ws';\nimport { AddonModAssignSubmissionsDBRecordFormatted } from './assign-offline';\nimport { CoreFormFields } from '@singletons/form';\nimport type { AddonModAssignSubmissionPluginBaseComponent } from '@addons/mod/assign/classes/base-submission-plugin-component';\n\n/**\n * Interface that all submission handlers must implement.\n */\nexport interface AddonModAssignSubmissionHandler extends CoreDelegateHandler {\n\n    /**\n     * Name of the type of submission the handler supports. E.g. 'file'.\n     */\n    type: string;\n\n    /**\n     * Whether the plugin can be edited in offline for existing submissions. In general, this should return false if the\n     * plugin uses Moodle filters. The reason is that the app only prefetches filtered data, and the user should edit\n     * unfiltered data.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @returns Boolean or promise resolved with boolean: whether it can be edited in offline.\n     */\n    canEditOffline?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n    ): boolean | Promise<boolean>;\n\n    /**\n     * Check if a plugin has no data.\n     *\n     * @param assign The assignment.\n     * @param plugin The plugin object.\n     * @returns Whether the plugin is empty.\n     */\n    isEmpty?(\n        assign: AddonModAssignAssign,\n        plugin: AddonModAssignPlugin,\n    ): boolean;\n\n    /**\n     * Should clear temporary data for a cancelled submission.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the submission.\n     */\n    clearTmpData?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n    ): void;\n\n    /**\n     * This function will be called when the user wants to create a new submission based on the previous one.\n     * It should add to pluginData the data to send to server based in the data in plugin (previous attempt).\n     *\n     * @param assign The assignment.\n     * @param plugin The plugin object.\n     * @param pluginData Object where to store the data to send.\n     * @param userId User ID. If not defined, site's current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    copySubmissionData?(\n        assign: AddonModAssignAssign,\n        plugin: AddonModAssignPlugin,\n        pluginData: AddonModAssignSavePluginData,\n        userId?: number,\n        siteId?: string,\n    ): void | Promise<void>;\n\n    /**\n     * Delete any stored data for the plugin and submission.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param offlineData Offline data stored.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    deleteOfflineData?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        offlineData: AddonModAssignSubmissionsDBRecordFormatted,\n        siteId?: string,\n    ): void | Promise<void>;\n\n    /**\n     * Return the Component to use to display the plugin data, either in read or in edit mode.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     *\n     * @param plugin The plugin object.\n     * @param edit Whether the user is editing.\n     * @returns The component (or promise resolved with component) to use, undefined if not found.\n     */\n    getComponent?(\n        plugin: AddonModAssignPlugin,\n        edit?: boolean,\n    ): Type<AddonModAssignSubmissionPluginBaseComponent>\n    | undefined\n    | Promise<Type<AddonModAssignSubmissionPluginBaseComponent> | undefined>;\n\n    /**\n     * Get files used by this plugin.\n     * The files returned by this function will be prefetched when the user prefetches the assign.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns The files (or promise resolved with the files).\n     */\n    getPluginFiles?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): CoreWSFile[] | Promise<CoreWSFile[]>;\n\n    /**\n     * Get a readable name to use for the plugin.\n     *\n     * @param plugin The plugin object.\n     * @returns The plugin name.\n     */\n    getPluginName?(plugin: AddonModAssignPlugin): string;\n\n    /**\n     * Get the size of data (in bytes) this plugin will send to copy a previous submission.\n     *\n     * @param assign The assignment.\n     * @param plugin The plugin object.\n     * @returns The size (or promise resolved with size).\n     */\n    getSizeForCopy?(\n        assign: AddonModAssignAssign,\n        plugin: AddonModAssignPlugin,\n    ): number | Promise<number>;\n\n    /**\n     * Get the size of data (in bytes) this plugin will send to add or edit a submission.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the submission.\n     * @returns The size (or promise resolved with size).\n     */\n    getSizeForEdit?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n    ): number | Promise<number>;\n\n    /**\n     * Check if the submission data has changed for this plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the submission.\n     * @returns Boolean (or promise resolved with boolean): whether the data has changed.\n     */\n    hasDataChanged?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n    ): boolean | Promise<boolean>;\n\n    /**\n     * Whether or not the handler is enabled for edit on a site level.\n     *\n     * @returns Whether or not the handler is enabled for edit on a site level.\n     */\n    isEnabledForEdit?(): boolean | Promise<boolean>;\n\n    /**\n     * Prefetch any required data for the plugin.\n     * This should NOT prefetch files. Files to be prefetched should be returned by the getPluginFiles function.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    prefetch?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<void>;\n\n    /**\n     * Prepare and add to pluginData the data to send to the server based on the input data.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the submission.\n     * @param pluginData Object where to store the data to send.\n     * @param offline Whether the user is editing in offline.\n     * @param userId User ID. If not defined, site's current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    prepareSubmissionData?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n        pluginData: AddonModAssignSavePluginData,\n        offline?: boolean,\n        userId?: number,\n        siteId?: string,\n    ): void | Promise<void>;\n\n    /**\n     * Prepare and add to pluginData the data to send to the server based on the offline data stored.\n     * This will be used when performing a synchronization.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param offlineData Offline data stored.\n     * @param pluginData Object where to store the data to send.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    prepareSyncData?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        offlineData: AddonModAssignSubmissionsDBRecordFormatted,\n        pluginData: AddonModAssignSavePluginData,\n        siteId?: string,\n    ): void | Promise<void>;\n}\n\n/**\n * Delegate to register plugins for assign submission.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModAssignSubmissionDelegateService extends CoreDelegate<AddonModAssignSubmissionHandler> {\n\n    protected handlerNameProperty = 'type';\n\n    constructor(\n        protected defaultHandler: AddonModAssignDefaultSubmissionHandler,\n    ) {\n        super('AddonModAssignSubmissionDelegate', true);\n    }\n\n    /**\n     * Whether the plugin can be edited in offline for existing submissions.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @returns Promise resolved with boolean: whether it can be edited in offline.\n     */\n    async canPluginEditOffline(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n    ): Promise<boolean | undefined> {\n        return this.executeFunctionOnEnabled(plugin.type, 'canEditOffline', [assign, submission, plugin]);\n    }\n\n    /**\n     * Clear some temporary data for a certain plugin because a submission was cancelled.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the submission.\n     */\n    clearTmpData(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n    ): void {\n        this.executeFunctionOnEnabled(plugin.type, 'clearTmpData', [assign, submission, plugin, inputData]);\n    }\n\n    /**\n     * Copy the data from last submitted attempt to the current submission for a certain plugin.\n     *\n     * @param assign The assignment.\n     * @param plugin The plugin object.\n     * @param pluginData Object where to store the data to send.\n     * @param userId User ID. If not defined, site's current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data has been copied.\n     */\n    async copyPluginSubmissionData(\n        assign: AddonModAssignAssign,\n        plugin: AddonModAssignPlugin,\n        pluginData: AddonModAssignSavePluginData,\n        userId?: number,\n        siteId?: string,\n    ): Promise<void | undefined> {\n        return this.executeFunctionOnEnabled(\n            plugin.type,\n            'copySubmissionData',\n            [assign, plugin, pluginData, userId, siteId],\n        );\n    }\n\n    /**\n     * Delete offline data stored for a certain submission and plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param offlineData Offline data stored.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async deletePluginOfflineData(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        offlineData: AddonModAssignSubmissionsDBRecordFormatted,\n        siteId?: string,\n    ): Promise<void> {\n        return this.executeFunctionOnEnabled(\n            plugin.type,\n            'deleteOfflineData',\n            [assign, submission, plugin, offlineData, siteId],\n        );\n    }\n\n    /**\n     * Get the component to use for a certain submission plugin.\n     *\n     * @param plugin The plugin object.\n     * @param edit Whether the user is editing.\n     * @returns Promise resolved with the component to use, undefined if not found.\n     */\n    async getComponentForPlugin(\n        plugin: AddonModAssignPlugin,\n        edit?: boolean,\n    ): Promise<Type<AddonModAssignSubmissionPluginBaseComponent> | undefined> {\n        return this.executeFunctionOnEnabled(plugin.type, 'getComponent', [plugin, edit]);\n    }\n\n    /**\n     * Get files used by this plugin.\n     * The files returned by this function will be prefetched when the user prefetches the assign.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getPluginFiles(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<CoreWSFile[]> {\n        const files: CoreWSFile[] | undefined =\n            await this.executeFunctionOnEnabled(plugin.type, 'getPluginFiles', [assign, submission, plugin, siteId]);\n\n        return files || [];\n    }\n\n    /**\n     * Get a readable name to use for a certain submission plugin.\n     *\n     * @param plugin Plugin to get the name for.\n     * @returns Human readable name.\n     */\n    getPluginName(plugin: AddonModAssignPlugin): string | undefined {\n        return this.executeFunctionOnEnabled(plugin.type, 'getPluginName', [plugin]);\n    }\n\n    /**\n     * Get the size of data (in bytes) this plugin will send to copy a previous submission.\n     *\n     * @param assign The assignment.\n     * @param plugin The plugin object.\n     * @returns Promise resolved with size.\n     */\n    async getPluginSizeForCopy(assign: AddonModAssignAssign, plugin: AddonModAssignPlugin): Promise<number | undefined> {\n        return this.executeFunctionOnEnabled(plugin.type, 'getSizeForCopy', [assign, plugin]);\n    }\n\n    /**\n     * Get the size of data (in bytes) this plugin will send to add or edit a submission.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the submission.\n     * @returns Promise resolved with size.\n     */\n    async getPluginSizeForEdit(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n    ): Promise<number | undefined> {\n        return this.executeFunctionOnEnabled(\n            plugin.type,\n            'getSizeForEdit',\n            [assign, submission, plugin, inputData],\n        );\n    }\n\n    /**\n     * Check if the submission data has changed for a certain plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the submission.\n     * @returns Promise resolved with true if data has changed, resolved with false otherwise.\n     */\n    async hasPluginDataChanged(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n    ): Promise<boolean | undefined> {\n        return this.executeFunctionOnEnabled(\n            plugin.type,\n            'hasDataChanged',\n            [assign, submission, plugin, inputData],\n        );\n    }\n\n    /**\n     * Check if a submission plugin is supported.\n     *\n     * @param pluginType Type of the plugin.\n     * @returns Whether it's supported.\n     */\n    isPluginSupported(pluginType: string): boolean {\n        return this.hasHandler(pluginType, true);\n    }\n\n    /**\n     * Check if a submission plugin is supported for edit.\n     *\n     * @param pluginType Type of the plugin.\n     * @returns Whether it's supported for edit.\n     */\n    async isPluginSupportedForEdit(pluginType: string): Promise<boolean | undefined> {\n        return this.executeFunctionOnEnabled(pluginType, 'isEnabledForEdit');\n    }\n\n    /**\n     * Check if a plugin has no data.\n     *\n     * @param assign The assignment.\n     * @param plugin The plugin object.\n     * @returns Whether the plugin is empty.\n     */\n    isPluginEmpty(assign: AddonModAssignAssign, plugin: AddonModAssignPlugin): boolean | undefined {\n        return this.executeFunctionOnEnabled(plugin.type, 'isEmpty', [assign, plugin]);\n    }\n\n    /**\n     * Prefetch any required data for a submission plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async prefetch(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<void> {\n        return this.executeFunctionOnEnabled(plugin.type, 'prefetch', [assign, submission, plugin, siteId]);\n    }\n\n    /**\n     * Prepare and add to pluginData the data to submit for a certain submission plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the submission.\n     * @param pluginData Object where to store the data to send.\n     * @param offline Whether the user is editing in offline.\n     * @param userId User ID. If not defined, site's current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when data has been gathered.\n     */\n    async preparePluginSubmissionData(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n        pluginData: AddonModAssignSavePluginData,\n        offline?: boolean,\n        userId?: number,\n        siteId?: string,\n    ): Promise<void | undefined> {\n\n        return this.executeFunctionOnEnabled(\n            plugin.type,\n            'prepareSubmissionData',\n            [assign, submission, plugin, inputData, pluginData, offline, userId, siteId],\n        );\n    }\n\n    /**\n     * Prepare and add to pluginData the data to send to server to synchronize an offline submission.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param offlineData Offline data stored.\n     * @param pluginData Object where to store the data to send.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when data has been gathered.\n     */\n    async preparePluginSyncData(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        offlineData: AddonModAssignSubmissionsDBRecordFormatted,\n        pluginData: AddonModAssignSavePluginData,\n        siteId?: string,\n    ): Promise<void> {\n\n        return this.executeFunctionOnEnabled(\n            plugin.type,\n            'prepareSyncData',\n            [assign, submission, plugin, offlineData, pluginData, siteId],\n        );\n    }\n\n}\nexport const AddonModAssignSubmissionDelegate = makeSingleton(AddonModAssignSubmissionDelegateService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}