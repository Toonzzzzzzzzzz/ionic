{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { makeSingleton } from '@singletons';\nimport { NOTES_DELETED_TABLE, NOTES_TABLE } from './database/notes';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to handle offline notes.\n */\nexport class AddonNotesOfflineProvider {\n  /**\n   * Delete an offline note.\n   *\n   * @param userId User ID the note is about.\n   * @param content The note content.\n   * @param timecreated The time the note was created.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if deleted, rejected if failure.\n   */\n  deleteOfflineNote(userId, content, timecreated, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.getDb().deleteRecords(NOTES_TABLE, {\n        userid: userId,\n        content: content,\n        created: timecreated\n      });\n    })();\n  }\n  /**\n   * Get all offline deleted notes.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with notes.\n   */\n  getAllDeletedNotes(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(NOTES_DELETED_TABLE);\n    })();\n  }\n  /**\n   * Get course offline deleted notes.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with notes.\n   */\n  getCourseDeletedNotes(courseId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(NOTES_DELETED_TABLE, {\n        courseid: courseId\n      });\n    })();\n  }\n  /**\n   * Get all offline notes.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with notes.\n   */\n  getAllNotes(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(NOTES_TABLE);\n    })();\n  }\n  /**\n   * Get an offline note.\n   *\n   * @param userId User ID the note is about.\n   * @param content The note content.\n   * @param timecreated The time the note was created.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the notes.\n   */\n  getNote(userId, content, timecreated, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecord(NOTES_TABLE, {\n        userid: userId,\n        content: content,\n        created: timecreated\n      });\n    })();\n  }\n  /**\n   * Get offline notes for a certain course and user.\n   *\n   * @param courseId Course ID.\n   * @param userId User ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with notes.\n   */\n  getNotesForCourseAndUser(courseId, userId, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!userId) {\n        return _this.getNotesForCourse(courseId, siteId);\n      }\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(NOTES_TABLE, {\n        userid: userId,\n        courseid: courseId\n      });\n    })();\n  }\n  /**\n   * Get offline notes for a certain course.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with notes.\n   */\n  getNotesForCourse(courseId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(NOTES_TABLE, {\n        courseid: courseId\n      });\n    })();\n  }\n  /**\n   * Get offline notes for a certain user.\n   *\n   * @param userId User ID the notes are about.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with notes.\n   */\n  getNotesForUser(userId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(NOTES_TABLE, {\n        userid: userId\n      });\n    })();\n  }\n  /**\n   * Get offline notes with a certain publish state (Personal, Site or Course).\n   *\n   * @param state Publish state ('personal', 'site' or 'course').\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with notes.\n   */\n  getNotesWithPublishState(state, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(NOTES_TABLE, {\n        publishstate: state\n      });\n    })();\n  }\n  /**\n   * Check if there are offline notes for a certain course.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: true if has offline notes, false otherwise.\n   */\n  hasNotesForCourse(courseId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const notes = yield _this2.getNotesForCourse(courseId, siteId);\n      return !!notes.length;\n    })();\n  }\n  /**\n   * Check if there are offline notes for a certain user.\n   *\n   * @param userId User ID the notes are about.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: true if has offline notes, false otherwise.\n   */\n  hasNotesForUser(userId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const notes = yield _this3.getNotesForUser(userId, siteId);\n      return !!notes.length;\n    })();\n  }\n  /**\n   * Check if there are offline notes with a certain publish state (Personal, Site or Course).\n   *\n   * @param state Publish state ('personal', 'site' or 'course').\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: true if has offline notes, false otherwise.\n   */\n  hasNotesWithPublishState(state, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const notes = yield _this4.getNotesWithPublishState(state, siteId);\n      return !!notes.length;\n    })();\n  }\n  /**\n   * Save a note to be sent later.\n   *\n   * @param userId User ID the note is about.\n   * @param courseId Course ID.\n   * @param state Publish state ('personal', 'site' or 'course').\n   * @param content The note content.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if stored, rejected if failure.\n   */\n  saveNote(userId, courseId, state, content, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const now = CoreTimeUtils.timestamp();\n      const data = {\n        userid: userId,\n        courseid: courseId,\n        publishstate: state,\n        content: content,\n        format: 1,\n        created: now,\n        lastmodified: now\n      };\n      yield site.getDb().insertRecord(NOTES_TABLE, data);\n    })();\n  }\n  /**\n   * Delete a note offline to be sent later.\n   *\n   * @param noteId Note ID.\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if stored, rejected if failure.\n   */\n  deleteNote(noteId, courseId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const data = {\n        noteid: noteId,\n        courseid: courseId,\n        deleted: CoreTimeUtils.timestamp()\n      };\n      yield site.getDb().insertRecord(NOTES_DELETED_TABLE, data);\n    })();\n  }\n  /**\n   * Undo delete a note.\n   *\n   * @param noteId Note ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if deleted, rejected if failure.\n   */\n  undoDeleteNote(noteId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.getDb().deleteRecords(NOTES_DELETED_TABLE, {\n        noteid: noteId\n      });\n    })();\n  }\n}\n_class = AddonNotesOfflineProvider;\n_class.ɵfac = function AddonNotesOfflineProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonNotesOffline = makeSingleton(AddonNotesOfflineProvider);","map":{"version":3,"names":["CoreSites","CoreTimeUtils","makeSingleton","NOTES_DELETED_TABLE","NOTES_TABLE","AddonNotesOfflineProvider","deleteOfflineNote","userId","content","timecreated","siteId","_asyncToGenerator","site","getSite","getDb","deleteRecords","userid","created","getAllDeletedNotes","getRecords","getCourseDeletedNotes","courseId","courseid","getAllNotes","getNote","getRecord","getNotesForCourseAndUser","_this","getNotesForCourse","getNotesForUser","getNotesWithPublishState","state","publishstate","hasNotesForCourse","_this2","notes","length","hasNotesForUser","_this3","hasNotesWithPublishState","_this4","saveNote","now","timestamp","data","format","lastmodified","insertRecord","deleteNote","noteId","noteid","deleted","undoDeleteNote","factory","ɵfac","providedIn","AddonNotesOffline"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/notes/services/notes-offline.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { makeSingleton } from '@singletons';\nimport { AddonNotesDBRecord, AddonNotesDeletedDBRecord, NOTES_DELETED_TABLE, NOTES_TABLE } from './database/notes';\nimport { AddonNotesPublishState } from './notes';\n\n/**\n * Service to handle offline notes.\n */\n@Injectable( { providedIn: 'root' } )\nexport class AddonNotesOfflineProvider {\n\n    /**\n     * Delete an offline note.\n     *\n     * @param userId User ID the note is about.\n     * @param content The note content.\n     * @param timecreated The time the note was created.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if deleted, rejected if failure.\n     */\n    async deleteOfflineNote(userId: number, content: string, timecreated: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.getDb().deleteRecords(NOTES_TABLE, {\n            userid: userId,\n            content: content,\n            created: timecreated,\n        });\n    }\n\n    /**\n     * Get all offline deleted notes.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with notes.\n     */\n    async getAllDeletedNotes(siteId?: string): Promise<AddonNotesDeletedDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(NOTES_DELETED_TABLE);\n    }\n\n    /**\n     * Get course offline deleted notes.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with notes.\n     */\n    async getCourseDeletedNotes(courseId: number, siteId?: string): Promise<AddonNotesDeletedDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(NOTES_DELETED_TABLE, { courseid: courseId });\n    }\n\n    /**\n     * Get all offline notes.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with notes.\n     */\n    async getAllNotes(siteId?: string): Promise<AddonNotesDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(NOTES_TABLE);\n    }\n\n    /**\n     * Get an offline note.\n     *\n     * @param userId User ID the note is about.\n     * @param content The note content.\n     * @param timecreated The time the note was created.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the notes.\n     */\n    async getNote(userId: number, content: string, timecreated: number, siteId?: string): Promise<AddonNotesDBRecord> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecord(NOTES_TABLE, {\n            userid: userId,\n            content: content,\n            created: timecreated,\n        });\n    }\n\n    /**\n     * Get offline notes for a certain course and user.\n     *\n     * @param courseId Course ID.\n     * @param userId User ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with notes.\n     */\n    async getNotesForCourseAndUser(courseId: number, userId?: number, siteId?: string): Promise<AddonNotesDBRecord[]> {\n        if (!userId) {\n            return this.getNotesForCourse(courseId, siteId);\n        }\n\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(NOTES_TABLE, { userid: userId, courseid: courseId });\n    }\n\n    /**\n     * Get offline notes for a certain course.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with notes.\n     */\n    async getNotesForCourse(courseId: number, siteId?: string): Promise<AddonNotesDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(NOTES_TABLE, { courseid: courseId });\n    }\n\n    /**\n     * Get offline notes for a certain user.\n     *\n     * @param userId User ID the notes are about.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with notes.\n     */\n    async getNotesForUser(userId: number, siteId?: string): Promise<AddonNotesDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(NOTES_TABLE, { userid: userId });\n    }\n\n    /**\n     * Get offline notes with a certain publish state (Personal, Site or Course).\n     *\n     * @param state Publish state ('personal', 'site' or 'course').\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with notes.\n     */\n    async getNotesWithPublishState(state: AddonNotesPublishState, siteId?: string): Promise<AddonNotesDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(NOTES_TABLE, { publishstate: state });\n    }\n\n    /**\n     * Check if there are offline notes for a certain course.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: true if has offline notes, false otherwise.\n     */\n    async hasNotesForCourse(courseId: number, siteId?: string): Promise<boolean> {\n        const notes = await this.getNotesForCourse(courseId, siteId);\n\n        return !!notes.length;\n    }\n\n    /**\n     * Check if there are offline notes for a certain user.\n     *\n     * @param userId User ID the notes are about.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: true if has offline notes, false otherwise.\n     */\n    async hasNotesForUser(userId: number, siteId?: string): Promise<boolean> {\n        const notes = await this.getNotesForUser(userId, siteId);\n\n        return !!notes.length;\n    }\n\n    /**\n     * Check if there are offline notes with a certain publish state (Personal, Site or Course).\n     *\n     * @param state Publish state ('personal', 'site' or 'course').\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: true if has offline notes, false otherwise.\n     */\n    async hasNotesWithPublishState(state: AddonNotesPublishState, siteId?: string): Promise<boolean> {\n        const notes = await this.getNotesWithPublishState(state, siteId);\n\n        return !!notes.length;\n    }\n\n    /**\n     * Save a note to be sent later.\n     *\n     * @param userId User ID the note is about.\n     * @param courseId Course ID.\n     * @param state Publish state ('personal', 'site' or 'course').\n     * @param content The note content.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if stored, rejected if failure.\n     */\n    async saveNote(\n        userId: number,\n        courseId: number,\n        state: AddonNotesPublishState,\n        content: string,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const now = CoreTimeUtils.timestamp();\n        const data: AddonNotesDBRecord = {\n            userid: userId,\n            courseid: courseId,\n            publishstate: state,\n            content: content,\n            format: 1,\n            created: now,\n            lastmodified: now,\n        };\n\n        await site.getDb().insertRecord(NOTES_TABLE, data);\n    }\n\n    /**\n     * Delete a note offline to be sent later.\n     *\n     * @param noteId Note ID.\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if stored, rejected if failure.\n     */\n    async deleteNote(noteId: number, courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const data: AddonNotesDeletedDBRecord = {\n            noteid: noteId,\n            courseid: courseId,\n            deleted: CoreTimeUtils.timestamp(),\n        };\n\n        await site.getDb().insertRecord(NOTES_DELETED_TABLE, data);\n    }\n\n    /**\n     * Undo delete a note.\n     *\n     * @param noteId Note ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if deleted, rejected if failure.\n     */\n    async undoDeleteNote(noteId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.getDb().deleteRecords(NOTES_DELETED_TABLE, { noteid: noteId });\n    }\n\n}\nexport const AddonNotesOffline = makeSingleton(AddonNotesOfflineProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}