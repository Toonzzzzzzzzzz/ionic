{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreLang } from '@services/lang';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CorePath } from '@singletons/path';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../../directives/update-non-reactive-attributes\";\nimport * as i4 from \"@ngx-translate/core\";\nfunction CoreRecaptchaComponent_div_0_ion_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 3);\n    i0.ɵɵlistener(\"click\", function CoreRecaptchaComponent_div_0_ion_button_1_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.answerRecaptcha());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"core.opensecurityquestion\"), \" \");\n  }\n}\nfunction CoreRecaptchaComponent_div_0_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 1, \"core.answered\"));\n  }\n}\nfunction CoreRecaptchaComponent_div_0_ion_item_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 5)(1, \"ion-label\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 1, \"core.login.recaptchaexpired\"));\n  }\n}\nfunction CoreRecaptchaComponent_div_0_ion_item_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 5)(1, \"ion-label\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 1, \"core.required\"));\n  }\n}\nfunction CoreRecaptchaComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, CoreRecaptchaComponent_div_0_ion_button_1_Template, 3, 3, \"ion-button\", 1);\n    i0.ɵɵtemplate(2, CoreRecaptchaComponent_div_0_ion_item_2_Template, 4, 3, \"ion-item\", 0);\n    i0.ɵɵtemplate(3, CoreRecaptchaComponent_div_0_ion_item_3_Template, 4, 3, \"ion-item\", 2);\n    i0.ɵɵtemplate(4, CoreRecaptchaComponent_div_0_ion_item_4_Template, 4, 3, \"ion-item\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.model[ctx_r0.modelValueName]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.model[ctx_r0.modelValueName]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.expired);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showRequiredError && !ctx_r0.model[ctx_r0.modelValueName] && !ctx_r0.expired);\n  }\n}\n/**\n * Component that allows answering a recaptcha.\n */\nexport class CoreRecaptchaComponent {\n  constructor() {\n    this.model = {}; // The model where to store the recaptcha response.\n    this.modelValueName = 'recaptcharesponse'; // Name of the model property where to store the response.\n    this.siteUrl = ''; // The site URL. If not defined, current site.\n    this.showRequiredError = false; // Whether to display the required error if recaptcha hasn't been answered.\n    this.expired = false;\n    this.initLang();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    this.siteUrl = this.siteUrl || CoreSites.getRequiredCurrentSite().getURL();\n  }\n  /**\n   * Initialize the lang property.\n   */\n  initLang() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.lang = yield CoreLang.getCurrentLanguage(\"lms\" /* CoreLangFormat.LMS */);\n    })();\n  }\n  /**\n   * Let the user answer the recaptcha.\n   */\n  answerRecaptcha() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Open the recaptcha challenge in an InAppBrowser.\n      // The app used to use an iframe for this, but the app can no longer access the iframe to create the required callbacks.\n      // The app cannot render the recaptcha directly because it has problems with the local protocols and domains.\n      const src = CorePath.concatenatePaths(_this2.siteUrl, 'webservice/recaptcha.php?lang=' + _this2.lang);\n      const inAppBrowserWindow = CoreUtils.openInApp(src);\n      if (!inAppBrowserWindow) {\n        return;\n      }\n      // Set the callbacks once the page is loaded.\n      const loadStopSubscription = inAppBrowserWindow.on('loadstop').subscribe(() => {\n        inAppBrowserWindow.executeScript({\n          code: 'window.recaptchacallback = (value) => webkit.messageHandlers.cordova_iab.postMessage(' + 'JSON.stringify({ action: \"callback\", value }));' + 'window.recaptchaexpiredcallback = () => webkit.messageHandlers.cordova_iab.postMessage(' + 'JSON.stringify({ action: \"expired\" }));'\n        });\n      });\n      // Listen for events.\n      const messageSubscription = inAppBrowserWindow.on('message').subscribe(event => {\n        if (!event.data) {\n          return;\n        }\n        if (event.data.action == 'expired') {\n          _this2.expireRecaptchaAnswer();\n        } else if (event.data.action == 'callback') {\n          _this2.expired = false;\n          _this2.model[_this2.modelValueName] = event.data.value;\n          // Close the InAppBrowser now.\n          inAppBrowserWindow.close();\n          messageSubscription.unsubscribe();\n          loadStopSubscription.unsubscribe();\n        }\n      });\n    })();\n  }\n  /**\n   * Expire the recaptcha answer.\n   */\n  expireRecaptchaAnswer() {\n    this.expired = true;\n    this.model[this.modelValueName] = '';\n  }\n}\n_class = CoreRecaptchaComponent;\n_class.ɵfac = function CoreRecaptchaComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-recaptcha\"]],\n  inputs: {\n    model: \"model\",\n    publicKey: \"publicKey\",\n    modelValueName: \"modelValueName\",\n    siteUrl: \"siteUrl\",\n    showRequiredError: \"showRequiredError\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"expand\", \"block\", \"fill\", \"outline\", \"class\", \"ion-margin\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"ion-text-wrap core-input-error\", 4, \"ngIf\"], [\"expand\", \"block\", \"fill\", \"outline\", 1, \"ion-margin\", 3, \"click\"], [\"color\", \"success\"], [1, \"ion-text-wrap\", \"core-input-error\"], [\"color\", \"danger\"]],\n  template: function CoreRecaptchaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CoreRecaptchaComponent_div_0_Template, 5, 4, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.publicKey && ctx.siteUrl && ctx.model);\n    }\n  },\n  dependencies: [i1.NgIf, i2.IonButton, i2.IonItem, i2.IonLabel, i3.CoreUpdateNonReactiveAttributesDirective, i4.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreLang","CoreSites","CoreUtils","CorePath","i0","ɵɵelementStart","ɵɵlistener","CoreRecaptchaComponent_div_0_ion_button_1_Template_ion_button_click_0_listener","ɵɵrestoreView","_r6","ctx_r5","ɵɵnextContext","ɵɵresetView","answerRecaptcha","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind1","ɵɵtextInterpolate","ɵɵtemplate","CoreRecaptchaComponent_div_0_ion_button_1_Template","CoreRecaptchaComponent_div_0_ion_item_2_Template","CoreRecaptchaComponent_div_0_ion_item_3_Template","CoreRecaptchaComponent_div_0_ion_item_4_Template","ɵɵproperty","ctx_r0","model","modelValueName","expired","showRequiredError","CoreRecaptchaComponent","constructor","siteUrl","initLang","ngOnInit","getRequiredCurrentSite","getURL","_this","_asyncToGenerator","lang","getCurrentLanguage","_this2","src","concatenatePaths","inAppBrowserWindow","openInApp","loadStopSubscription","on","subscribe","executeScript","code","messageSubscription","event","data","action","expireRecaptchaAnswer","value","close","unsubscribe","selectors","inputs","publicKey","decls","vars","consts","template","CoreRecaptchaComponent_Template","rf","ctx","CoreRecaptchaComponent_div_0_Template"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/recaptcha/recaptcha.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/recaptcha/core-recaptcha.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, OnInit } from '@angular/core';\n\nimport { CoreLang, CoreLangFormat } from '@services/lang';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CorePath } from '@singletons/path';\n\n/**\n * Component that allows answering a recaptcha.\n */\n@Component({\n    selector: 'core-recaptcha',\n    templateUrl: 'core-recaptcha.html',\n})\nexport class CoreRecaptchaComponent implements OnInit {\n\n    @Input() model: Record<string, string> = {}; // The model where to store the recaptcha response.\n    @Input() publicKey?: string; // The site public key.\n    @Input() modelValueName = 'recaptcharesponse'; // Name of the model property where to store the response.\n    @Input() siteUrl = ''; // The site URL. If not defined, current site.\n    @Input() showRequiredError = false; // Whether to display the required error if recaptcha hasn't been answered.\n\n    expired = false;\n\n    protected lang?: string;\n\n    constructor() {\n        this.initLang();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.siteUrl = this.siteUrl || CoreSites.getRequiredCurrentSite().getURL();\n    }\n\n    /**\n     * Initialize the lang property.\n     */\n    protected async initLang(): Promise<void> {\n        this.lang = await CoreLang.getCurrentLanguage(CoreLangFormat.LMS);\n    }\n\n    /**\n     * Let the user answer the recaptcha.\n     */\n    async answerRecaptcha(): Promise<void> {\n        // Open the recaptcha challenge in an InAppBrowser.\n        // The app used to use an iframe for this, but the app can no longer access the iframe to create the required callbacks.\n        // The app cannot render the recaptcha directly because it has problems with the local protocols and domains.\n        const src = CorePath.concatenatePaths(this.siteUrl, 'webservice/recaptcha.php?lang=' + this.lang);\n\n        const inAppBrowserWindow = CoreUtils.openInApp(src);\n        if (!inAppBrowserWindow) {\n            return;\n        }\n\n        // Set the callbacks once the page is loaded.\n        const loadStopSubscription = inAppBrowserWindow.on('loadstop').subscribe(() => {\n            inAppBrowserWindow.executeScript({\n                code:\n                    'window.recaptchacallback = (value) => webkit.messageHandlers.cordova_iab.postMessage(' +\n                        'JSON.stringify({ action: \"callback\", value }));' +\n                    'window.recaptchaexpiredcallback = () => webkit.messageHandlers.cordova_iab.postMessage(' +\n                        'JSON.stringify({ action: \"expired\" }));',\n            });\n        });\n\n        // Listen for events.\n        const messageSubscription = inAppBrowserWindow.on('message').subscribe((event) => {\n            if (!event.data) {\n                return;\n            }\n\n            if (event.data.action == 'expired') {\n                this.expireRecaptchaAnswer();\n            } else if (event.data.action == 'callback') {\n                this.expired = false;\n                this.model[this.modelValueName] = event.data.value;\n\n                // Close the InAppBrowser now.\n                inAppBrowserWindow.close();\n                messageSubscription.unsubscribe();\n                loadStopSubscription.unsubscribe();\n            }\n        });\n    }\n\n    /**\n     * Expire the recaptcha answer.\n     */\n    expireRecaptchaAnswer(): void {\n        this.expired = true;\n        this.model[this.modelValueName] = '';\n    }\n\n}\n","<!-- ReCAPTCHA V2 -->\n<div *ngIf=\"publicKey && siteUrl && model\">\n    <!-- A button to open the recaptcha modal. -->\n    <ion-button expand=\"block\" fill=\"outline\" class=\"ion-margin\" *ngIf=\"!model[modelValueName]\" (click)=\"answerRecaptcha()\">\n        {{ 'core.opensecurityquestion' | translate }}\n    </ion-button>\n    <ion-item *ngIf=\"model[modelValueName]\">\n        <ion-label color=\"success\">{{ 'core.answered' | translate }}</ion-label>\n    </ion-item>\n    <ion-item *ngIf=\"expired\" class=\"ion-text-wrap core-input-error\">\n        <ion-label color=\"danger\">{{ 'core.login.recaptchaexpired' | translate }}</ion-label>\n    </ion-item>\n    <ion-item *ngIf=\"showRequiredError && !model[modelValueName] && !expired\" class=\"ion-text-wrap core-input-error\">\n        <ion-label color=\"danger\">{{ 'core.required' | translate }}</ion-label>\n    </ion-item>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}