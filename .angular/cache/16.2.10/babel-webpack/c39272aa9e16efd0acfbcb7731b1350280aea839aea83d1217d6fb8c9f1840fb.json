{"ast":null,"code":"var _class;\nimport { makeSingleton, Translate } from '@singletons';\nimport moment from 'moment-timezone';\nimport * as i0 from \"@angular/core\";\nconst patternTo = new RegExp(/^To\\s([^:]+):(.*)/);\n/**\n * Helper service that provides some features for chat.\n */\nexport class AddonModChatHelperProvider {\n  formatMessage(currentUserId, message, prevMessage) {\n    const formattedMessage = message;\n    formattedMessage.message = formattedMessage.message.trim();\n    formattedMessage.showDate = this.showDate(message, prevMessage);\n    formattedMessage.beep = message.message.substring(0, 5) == 'beep ' && message.message.substring(5).trim() || undefined;\n    formattedMessage.special = !!formattedMessage.beep || message.issystem || message.system;\n    if (formattedMessage.message.substring(0, 4) == '/me ') {\n      formattedMessage.special = true;\n      formattedMessage.message = formattedMessage.message.substring(4).trim();\n    }\n    if (!formattedMessage.special && formattedMessage.message.match(patternTo)) {\n      const matches = formattedMessage.message.match(patternTo);\n      formattedMessage.message = `<em>\n                <strong>${Translate.instant('addon.mod_chat.saidto')} </strong>\n                ${matches[1]}</em>: ${matches[2]}`;\n    }\n    formattedMessage.showUserData = this.showUserData(currentUserId, message, prevMessage);\n    if (prevMessage) {\n      prevMessage.showTail = this.showTail(prevMessage, message);\n    }\n    return formattedMessage;\n  }\n  /**\n   * Check if the user info should be displayed for the current message.\n   * User data is only displayed if the previous message was from another user.\n   *\n   * @param currentUserId Current User Id.\n   * @param message Current message where to show the user info.\n   * @param prevMessage Previous message.\n   * @returns Whether user data should be shown.\n   */\n  showUserData(currentUserId, message, prevMessage) {\n    return message.userid != currentUserId && (!prevMessage || prevMessage.userid != message.userid || !!message.showDate || !!prevMessage.special);\n  }\n  /**\n   * Check if a css tail should be shown.\n   *\n   * @param message Current message where to show the user info.\n   * @param nextMessage Next message.\n   * @returns Whether user data should be shown.\n   */\n  showTail(message, nextMessage) {\n    return !nextMessage || nextMessage.userid != message.userid || !!nextMessage.showDate || !!nextMessage.special;\n  }\n  /**\n   * Check if the date should be displayed between messages (when the day changes at midnight for example).\n   *\n   * @param message New message object.\n   * @param prevMessage Previous message object.\n   * @returns True if messages are from diferent days, false othetwise.\n   */\n  showDate(message, prevMessage) {\n    if (!prevMessage) {\n      return true;\n    }\n    // Check if day has changed.\n    return !moment(message.timestamp * 1000).isSame(prevMessage.timestamp * 1000, 'day');\n  }\n}\n_class = AddonModChatHelperProvider;\n_class.ɵfac = function AddonModChatHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModChatHelper = makeSingleton(AddonModChatHelperProvider);","map":{"version":3,"names":["makeSingleton","Translate","moment","patternTo","RegExp","AddonModChatHelperProvider","formatMessage","currentUserId","message","prevMessage","formattedMessage","trim","showDate","beep","substring","undefined","special","issystem","system","match","matches","instant","showUserData","showTail","userid","nextMessage","timestamp","isSame","factory","ɵfac","providedIn","AddonModChatHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/chat/services/chat-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { makeSingleton, Translate } from '@singletons';\nimport moment from 'moment-timezone';\nimport { AddonModChatMessage, AddonModChatSessionMessage } from './chat';\n\nconst patternTo = new RegExp(/^To\\s([^:]+):(.*)/);\n\n/**\n * Helper service that provides some features for chat.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModChatHelperProvider {\n\n    /**\n     * Give some format info about messages.\n     *\n     * @param currentUserId User Id.\n     * @param message Message.\n     * @param prevMessage Previous message (if any).\n     * @returns Message with additional info.\n     */\n    formatMessage(\n        currentUserId: number,\n        message: AddonModChatMessage,\n        prevMessage?: AddonModChatFormattedMessage,\n    ): AddonModChatFormattedMessage;\n    formatMessage(\n        currentUserId: number,\n        message: AddonModChatSessionMessage,\n        prevMessage?: AddonModChatFormattedSessionMessage,\n    ): AddonModChatFormattedSessionMessage;\n    formatMessage(\n        currentUserId: number,\n        message: AddonModChatMessage | AddonModChatSessionMessage,\n        prevMessage?: AddonModChatAnyFormattedMessage,\n    ): AddonModChatAnyFormattedMessage {\n        const formattedMessage: AddonModChatAnyFormattedMessage = message;\n\n        formattedMessage.message = formattedMessage.message.trim();\n\n        formattedMessage.showDate = this.showDate(message, prevMessage);\n        formattedMessage.beep = (message.message.substring(0, 5) == 'beep ' && message.message.substring(5).trim()) || undefined;\n\n        formattedMessage.special = !!formattedMessage.beep || (<AddonModChatSessionMessage> message).issystem ||\n            (<AddonModChatMessage> message).system;\n\n        if (formattedMessage.message.substring(0, 4) == '/me ') {\n            formattedMessage.special = true;\n            formattedMessage.message = formattedMessage.message.substring(4).trim();\n        }\n\n        if (!formattedMessage.special && formattedMessage.message.match(patternTo)) {\n            const matches = formattedMessage.message.match(patternTo);\n\n            formattedMessage.message = `<em>\n                <strong>${Translate.instant('addon.mod_chat.saidto')} </strong>\n                ${matches![1]}</em>: ${matches![2]}`;\n        }\n\n        formattedMessage.showUserData = this.showUserData(currentUserId, message, prevMessage);\n        if (prevMessage) {\n            prevMessage.showTail = this.showTail(prevMessage, message);\n        }\n\n        return formattedMessage;\n    }\n\n    /**\n     * Check if the user info should be displayed for the current message.\n     * User data is only displayed if the previous message was from another user.\n     *\n     * @param currentUserId Current User Id.\n     * @param message Current message where to show the user info.\n     * @param prevMessage Previous message.\n     * @returns Whether user data should be shown.\n     */\n    protected showUserData(\n        currentUserId: number,\n        message: AddonModChatAnyFormattedMessage,\n        prevMessage?: AddonModChatAnyFormattedMessage,\n    ): boolean {\n        return message.userid != currentUserId &&\n            (!prevMessage || prevMessage.userid != message.userid || !!message.showDate || !!prevMessage.special);\n    }\n\n    /**\n     * Check if a css tail should be shown.\n     *\n     * @param message Current message where to show the user info.\n     * @param nextMessage Next message.\n     * @returns Whether user data should be shown.\n     */\n    protected showTail(message: AddonModChatAnyFormattedMessage, nextMessage?: AddonModChatAnyFormattedMessage): boolean {\n        return !nextMessage || nextMessage.userid != message.userid || !!nextMessage.showDate || !!nextMessage.special;\n    }\n\n    /**\n     * Check if the date should be displayed between messages (when the day changes at midnight for example).\n     *\n     * @param message New message object.\n     * @param prevMessage Previous message object.\n     * @returns True if messages are from diferent days, false othetwise.\n     */\n    protected showDate(message: AddonModChatAnyFormattedMessage, prevMessage?: AddonModChatAnyFormattedMessage): boolean {\n        if (!prevMessage) {\n            return true;\n        }\n\n        // Check if day has changed.\n        return !moment(message.timestamp * 1000).isSame(prevMessage.timestamp * 1000, 'day');\n    }\n\n}\n\nexport const AddonModChatHelper = makeSingleton(AddonModChatHelperProvider);\n\n/**\n * Special info for view usage.\n */\ntype AddonModChatInfoForView = {\n    showDate?: boolean; // If date should be displayed before the message.\n    beep?: string; // User id of the beeped user or 'all'.\n    special?: boolean; // True if is an special message (system, beep or command).\n    showUserData?: boolean; // If user data should be displayed.\n    showTail?: boolean; // If tail should be displayed (decoration).\n    beepWho?: string; // Fullname of the beeped user.\n};\n\n/**\n * Message with data for view usage.\n */\nexport type AddonModChatFormattedMessage = AddonModChatMessage & AddonModChatInfoForView;\n\n/**\n * Session message with data for view usage.\n */\nexport type AddonModChatFormattedSessionMessage = AddonModChatSessionMessage & AddonModChatInfoForView;\n\n/**\n * Any possivle formatted message.\n */\nexport type AddonModChatAnyFormattedMessage = AddonModChatFormattedMessage | AddonModChatFormattedSessionMessage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}