{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSites } from '@services/sites';\nimport { CoreCourses } from './courses';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonCourseCompletion } from '@addons/coursecompletion/services/coursecompletion';\nimport moment from 'moment-timezone';\nimport { of, firstValueFrom } from 'rxjs';\nimport { zipIncludingComplete } from '@/core/utils/rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { chainRequests } from '@classes/sites/authenticated-site';\nimport * as i0 from \"@angular/core\";\n// Id for a course item representing all courses (for example, for course filters).\nexport const ALL_COURSES_ID = -1;\n/**\n * Helper to gather some common courses functions.\n */\nexport class CoreCoursesHelperProvider {\n  constructor() {\n    this.courseSiteColors = {};\n  }\n  /**\n   * Get the courses to display the course picker popover. If a courseId is specified, it will also return its categoryId.\n   *\n   * @param courseId Course ID to get the category.\n   * @returns Promise resolved with the list of courses and the category.\n   */\n  getCoursesForPopover(courseId) {\n    return _asyncToGenerator(function* () {\n      const courses = yield CoreCourses.getUserCourses(false);\n      // Add \"All courses\".\n      courses.unshift({\n        id: ALL_COURSES_ID,\n        fullname: Translate.instant('core.fulllistofcourses'),\n        shortname: Translate.instant('core.fulllistofcourses'),\n        categoryid: -1,\n        summary: '',\n        summaryformat: 1\n      });\n      let categoryId;\n      if (courseId) {\n        // Search the course to get the category.\n        const course = courses.find(course => course.id == courseId);\n        if (course) {\n          categoryId = course.categoryid;\n        }\n      }\n      return {\n        courses: courses,\n        categoryId: categoryId\n      };\n    })();\n  }\n  /**\n   * Given a course object returned by core_enrol_get_users_courses and another one returned by core_course_get_courses_by_field,\n   * load some extra data to the first one.\n   *\n   * @param course Course returned by core_enrol_get_users_courses.\n   * @param courseByField Course returned by core_course_get_courses_by_field.\n   * @param addCategoryName Whether add category name or not.\n   */\n  loadCourseExtraInfo(course, courseByField, addCategoryName = false) {\n    if (courseByField) {\n      course.displayname = courseByField.displayname;\n      course.categoryname = addCategoryName ? courseByField.categoryname : undefined;\n      course.overviewfiles = course.overviewfiles || courseByField.overviewfiles;\n    } else {\n      delete course.displayname;\n    }\n  }\n  /**\n   * Loads the color of courses or the thumb image.\n   *\n   * @param courses List of courses.\n   * @returns Promise resolved when done.\n   */\n  loadCoursesColorAndImage(courses) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!courses.length) {\n        return;\n      }\n      yield Promise.all(courses.map(course => _this.loadCourseColorAndImage(course)));\n    })();\n  }\n  /**\n   * Given a list of courses returned by core_enrol_get_users_courses, load some extra data using the WebService\n   * core_course_get_courses_by_field if available.\n   *\n   * @param courses List of courses.\n   * @param loadCategoryNames Whether load category names or not.\n   * @returns Promise resolved when done.\n   */\n  loadCoursesExtraInfo(courses, loadCategoryNames = false) {\n    return firstValueFrom(this.loadCoursesExtraInfoObservable(courses, loadCategoryNames));\n  }\n  /**\n   * Given a list of courses returned by core_enrol_get_users_courses, load some extra data using the WebService\n   * core_course_get_courses_by_field if available.\n   *\n   * @param courses List of courses.\n   * @param loadCategoryNames Whether load category names or not.\n   * @returns Promise resolved when done.\n   */\n  loadCoursesExtraInfoObservable(courses, loadCategoryNames = false, options = {}) {\n    if (!courses.length) {\n      return of([]);\n    }\n    if (!loadCategoryNames && (courses[0].overviewfiles !== undefined || courses[0].displayname !== undefined)) {\n      // No need to load more data.\n      return of(courses);\n    }\n    const courseIds = courses.map(course => course.id).join(',');\n    // Get the extra data for the courses.\n    return CoreCourses.getCoursesByFieldObservable('ids', courseIds, options).pipe(map(coursesInfosArray => {\n      const coursesInfo = CoreUtils.arrayToObject(coursesInfosArray, 'id');\n      courses.forEach(course => {\n        this.loadCourseExtraInfo(course, coursesInfo[course.id], loadCategoryNames);\n      });\n      return courses;\n    }));\n  }\n  /**\n   * Load course colors from site config.\n   *\n   * @returns course colors RGB.\n   */\n  loadCourseSiteColors() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      const siteId = site.getId();\n      if (_this2.courseSiteColors[siteId] !== undefined) {\n        return _this2.courseSiteColors[siteId];\n      }\n      if (!site.isVersionGreaterEqualThan('3.8')) {\n        _this2.courseSiteColors[siteId] = [];\n        return [];\n      }\n      const colors = [];\n      try {\n        const configs = yield site.getConfig();\n        for (let x = 0; x < 10; x++) {\n          colors[x] = configs['core_admin_coursecolor' + (x + 1)] || undefined;\n        }\n        _this2.courseSiteColors[siteId] = colors;\n      } catch (_unused) {\n        // Ignore errors.\n      }\n      return colors;\n    })();\n  }\n  /**\n   * Loads the color of the course or the thumb image.\n   *\n   * @param course Course data.\n   */\n  loadCourseColorAndImage(course) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _course$courseimage;\n      // Moodle 4.1 downwards geopatterns are embedded in b64 in only some WS, remote them to keep it coherent.\n      if ((_course$courseimage = course.courseimage) !== null && _course$courseimage !== void 0 && _course$courseimage.startsWith('data')) {\n        course.courseimage = undefined;\n      }\n      if (course.courseimage !== undefined) {\n        course.courseImage = course.courseimage; // @deprecated since 4.3 use courseimage instead.\n        return;\n      }\n      if (course.overviewfiles && course.overviewfiles[0]) {\n        course.courseimage = course.overviewfiles[0].fileurl;\n        course.courseImage = course.courseimage; // @deprecated since 4.3 use courseimage instead.\n        return;\n      }\n      const colors = yield _this3.loadCourseSiteColors();\n      course.colorNumber = course.id % 10;\n      course.color = colors.length ? colors[course.colorNumber] : undefined;\n    })();\n  }\n  /**\n   * Get user courses with admin and nav options.\n   *\n   * @param sort Sort courses after get them. If sort is not defined it won't be sorted.\n   * @param slice Slice results to get the X first one. If slice > 0 it will be done after sorting.\n   * @param filter Filter using some field.\n   * @param loadCategoryNames Whether load category names or not.\n   * @param options Options.\n   * @returns Courses filled with options.\n   */\n  getUserCoursesWithOptions(sort = 'fullname', slice = 0, filter, loadCategoryNames = false, options = {}) {\n    return firstValueFrom(this.getUserCoursesWithOptionsObservable(_objectSpread({\n      sort,\n      slice,\n      filter,\n      loadCategoryNames\n    }, options)));\n  }\n  /**\n   * Get user courses with admin and nav options.\n   *\n   * @param options Options.\n   * @returns Courses filled with options.\n   */\n  getUserCoursesWithOptionsObservable(options = {}) {\n    return CoreCourses.getUserCoursesObservable(options).pipe(chainRequests(options.readingStrategy, (courses, newReadingStrategy) => {\n      if (courses.length <= 0) {\n        return of([]);\n      }\n      const courseIds = courses.map(course => course.id); // Use all courses to get options, to use cache.\n      const newOptions = _objectSpread(_objectSpread({}, options), {}, {\n        readingStrategy: newReadingStrategy\n      });\n      courses = this.filterAndSortCoursesWithOptions(courses, options);\n      return zipIncludingComplete(this.loadCoursesExtraInfoObservable(courses, options.loadCategoryNames, newOptions), CoreCourses.getCoursesAdminAndNavOptionsObservable(courseIds, newOptions).pipe(map(courseOptions => {\n        courses.forEach(course => {\n          course.navOptions = courseOptions.navOptions[course.id];\n          course.admOptions = courseOptions.admOptions[course.id];\n        });\n      })), ...courses.map(course => this.loadCourseCompletedStatus(course, newOptions))).pipe(map(() => courses));\n    }));\n  }\n  /**\n   * Filter and sort some courses.\n   *\n   * @param courses Courses.\n   * @param options Options\n   * @returns Courses filtered and sorted.\n   */\n  filterAndSortCoursesWithOptions(courses, options = {}) {\n    var _options$sort, _options$slice;\n    const sort = (_options$sort = options.sort) !== null && _options$sort !== void 0 ? _options$sort : 'fullname';\n    const slice = (_options$slice = options.slice) !== null && _options$slice !== void 0 ? _options$slice : -1;\n    switch (options.filter) {\n      case 'isfavourite':\n        courses = courses.filter(course => !!course.isfavourite);\n        break;\n      default:\n      // Filter not implemented.\n    }\n\n    switch (sort) {\n      case 'fullname':\n        courses.sort((a, b) => {\n          const compareA = a.fullname.toLowerCase();\n          const compareB = b.fullname.toLowerCase();\n          return compareA.localeCompare(compareB);\n        });\n        break;\n      case 'lastaccess':\n        courses.sort((a, b) => (b.lastaccess || 0) - (a.lastaccess || 0));\n        break;\n      // Time modified property is defined on Moodle 4.0.\n      case 'timemodified':\n        courses.sort((a, b) => (b.timemodified || 0) - (a.timemodified || 0));\n        break;\n      case 'shortname':\n        courses.sort((a, b) => {\n          const compareA = a.shortname.toLowerCase();\n          const compareB = b.shortname.toLowerCase();\n          return compareA.localeCompare(compareB);\n        });\n        break;\n      default:\n      // Sort not implemented. Do not sort.\n    }\n\n    courses = slice > 0 ? courses.slice(0, slice) : courses;\n    return courses;\n  }\n  /**\n   * Given a course object, fetch and set its completed status if not present already.\n   *\n   * @param course Course.\n   * @returns Observable.\n   */\n  loadCourseCompletedStatus(course, options = {}) {\n    if (course.completed !== undefined) {\n      // The WebService already returns the completed status, no need to fetch it.\n      return of(course);\n    }\n    if (course.enablecompletion !== undefined && !course.enablecompletion) {\n      // Completion is disabled for this course, there is no need to fetch the completion status.\n      return of(course);\n    }\n    return AddonCourseCompletion.getCompletionObservable(course.id, options).pipe(map(completion => {\n      course.completed = completion.completed;\n      return course;\n    }), catchError(() => {\n      // Ignore error, maybe course completion is disabled or user has no permission.\n      course.completed = false;\n      return of(course);\n    }));\n  }\n  /**\n   * Calculates if course date is past.\n   *\n   * @param course Course Object.\n   * @param gradePeriodAfter Classify past courses as in progress for these many days after the course end date.\n   * @returns Wether the course is past.\n   */\n  isPastCourse(course, gradePeriodAfter = 0) {\n    if (course.completed) {\n      return true;\n    }\n    if (!course.enddate) {\n      return false;\n    }\n    // Calculate the end date to use for display classification purposes, incorporating the grace period, if any.\n    const endDate = moment(course.enddate * 1000).add(gradePeriodAfter, 'days').valueOf();\n    return endDate < Date.now();\n  }\n  /**\n   * Calculates if course date is future.\n   *\n   * @param course Course Object.\n   * @param gradePeriodAfter Classify past courses as in progress for these many days after the course end date.\n   * @param gradePeriodBefore Classify future courses as in progress for these many days prior to the course start date.\n   * @returns Wether the course is future.\n   */\n  isFutureCourse(course, gradePeriodAfter = 0, gradePeriodBefore = 0) {\n    if (this.isPastCourse(course, gradePeriodAfter) || !course.startdate) {\n      return false;\n    }\n    // Calculate the start date to use for display classification purposes, incorporating the grace period, if any.\n    const startDate = moment(course.startdate * 1000).subtract(gradePeriodBefore, 'days').valueOf();\n    return startDate > Date.now();\n  }\n  /**\n   * Retrieves my courses page module.\n   *\n   * @returns My courses page module.\n   */\n  getMyRouteModule() {\n    return _asyncToGenerator(function* () {\n      return import('../courses-my-lazy.module').then(m => m.CoreCoursesMyLazyModule);\n    })();\n  }\n}\n_class = CoreCoursesHelperProvider;\n_class.ɵfac = function CoreCoursesHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreCoursesHelper = makeSingleton(CoreCoursesHelperProvider);","map":{"version":3,"names":["CoreUtils","CoreSites","CoreCourses","makeSingleton","Translate","AddonCourseCompletion","moment","of","firstValueFrom","zipIncludingComplete","catchError","map","chainRequests","ALL_COURSES_ID","CoreCoursesHelperProvider","constructor","courseSiteColors","getCoursesForPopover","courseId","_asyncToGenerator","courses","getUserCourses","unshift","id","fullname","instant","shortname","categoryid","summary","summaryformat","categoryId","course","find","loadCourseExtraInfo","courseByField","addCategoryName","displayname","categoryname","undefined","overviewfiles","loadCoursesColorAndImage","_this","length","Promise","all","loadCourseColorAndImage","loadCoursesExtraInfo","loadCategoryNames","loadCoursesExtraInfoObservable","options","courseIds","join","getCoursesByFieldObservable","pipe","coursesInfosArray","coursesInfo","arrayToObject","forEach","loadCourseSiteColors","_this2","site","getRequiredCurrentSite","siteId","getId","isVersionGreaterEqualThan","colors","configs","getConfig","x","_unused","_this3","_course$courseimage","courseimage","startsWith","courseImage","fileurl","colorNumber","color","getUserCoursesWithOptions","sort","slice","filter","getUserCoursesWithOptionsObservable","_objectSpread","getUserCoursesObservable","readingStrategy","newReadingStrategy","newOptions","filterAndSortCoursesWithOptions","getCoursesAdminAndNavOptionsObservable","courseOptions","navOptions","admOptions","loadCourseCompletedStatus","_options$sort","_options$slice","isfavourite","a","b","compareA","toLowerCase","compareB","localeCompare","lastaccess","timemodified","completed","enablecompletion","getCompletionObservable","completion","isPastCourse","gradePeriodAfter","enddate","endDate","add","valueOf","Date","now","isFutureCourse","gradePeriodBefore","startdate","startDate","subtract","getMyRouteModule","then","m","CoreCoursesMyLazyModule","factory","ɵfac","providedIn","CoreCoursesHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/courses/services/courses-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSites, CoreSitesCommonWSOptions } from '@services/sites';\nimport {\n    CoreCourseAnyCourseDataWithOptions,\n    CoreCourses,\n    CoreCourseSearchedData,\n    CoreCourseUserAdminOrNavOptionIndexed,\n    CoreEnrolledCourseData,\n} from './courses';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreWSExternalFile } from '@services/ws';\nimport { AddonCourseCompletion } from '@addons/coursecompletion/services/coursecompletion';\nimport moment from 'moment-timezone';\nimport { of, firstValueFrom } from 'rxjs';\nimport { zipIncludingComplete } from '@/core/utils/rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { chainRequests, WSObservable } from '@classes/sites/authenticated-site';\nimport { LazyRoutesModule } from '@/app/app-routing.module';\n\n// Id for a course item representing all courses (for example, for course filters).\nexport const ALL_COURSES_ID = -1;\n\n/**\n * Helper to gather some common courses functions.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreCoursesHelperProvider {\n\n    protected courseSiteColors: Record<string, (string | undefined)[]> = {};\n\n    /**\n     * Get the courses to display the course picker popover. If a courseId is specified, it will also return its categoryId.\n     *\n     * @param courseId Course ID to get the category.\n     * @returns Promise resolved with the list of courses and the category.\n     */\n    async getCoursesForPopover(courseId?: number): Promise<{courses: CoreEnrolledCourseData[]; categoryId?: number}> {\n        const courses: CoreEnrolledCourseData[] = await CoreCourses.getUserCourses(false);\n\n        // Add \"All courses\".\n        courses.unshift({\n            id: ALL_COURSES_ID,\n            fullname: Translate.instant('core.fulllistofcourses'),\n            shortname: Translate.instant('core.fulllistofcourses'),\n            categoryid: -1,\n            summary: '',\n            summaryformat: 1,\n        });\n\n        let categoryId: number | undefined;\n        if (courseId) {\n            // Search the course to get the category.\n            const course = courses.find((course) => course.id == courseId);\n\n            if (course) {\n                categoryId = course.categoryid;\n            }\n        }\n\n        return {\n            courses: courses,\n            categoryId: categoryId,\n        };\n    }\n\n    /**\n     * Given a course object returned by core_enrol_get_users_courses and another one returned by core_course_get_courses_by_field,\n     * load some extra data to the first one.\n     *\n     * @param course Course returned by core_enrol_get_users_courses.\n     * @param courseByField Course returned by core_course_get_courses_by_field.\n     * @param addCategoryName Whether add category name or not.\n     */\n    protected loadCourseExtraInfo(\n        course: CoreEnrolledCourseDataWithExtraInfo,\n        courseByField: CoreCourseSearchedData,\n        addCategoryName: boolean = false,\n    ): void {\n        if (courseByField) {\n            course.displayname = courseByField.displayname;\n            course.categoryname = addCategoryName ? courseByField.categoryname : undefined;\n            course.overviewfiles = course.overviewfiles || courseByField.overviewfiles;\n        } else {\n            delete course.displayname;\n        }\n    }\n\n    /**\n     * Loads the color of courses or the thumb image.\n     *\n     * @param courses List of courses.\n     * @returns Promise resolved when done.\n     */\n    async loadCoursesColorAndImage(courses: CoreCourseSearchedData[]): Promise<void> {\n        if (!courses.length) {\n            return;\n        }\n\n        await Promise.all(courses.map((course) => this.loadCourseColorAndImage(course)));\n    }\n\n    /**\n     * Given a list of courses returned by core_enrol_get_users_courses, load some extra data using the WebService\n     * core_course_get_courses_by_field if available.\n     *\n     * @param courses List of courses.\n     * @param loadCategoryNames Whether load category names or not.\n     * @returns Promise resolved when done.\n     */\n    loadCoursesExtraInfo(\n        courses: CoreEnrolledCourseDataWithExtraInfo[],\n        loadCategoryNames: boolean = false,\n    ): Promise<CoreEnrolledCourseDataWithExtraInfo[]> {\n        return firstValueFrom(this.loadCoursesExtraInfoObservable(courses, loadCategoryNames));\n    }\n\n    /**\n     * Given a list of courses returned by core_enrol_get_users_courses, load some extra data using the WebService\n     * core_course_get_courses_by_field if available.\n     *\n     * @param courses List of courses.\n     * @param loadCategoryNames Whether load category names or not.\n     * @returns Promise resolved when done.\n     */\n    loadCoursesExtraInfoObservable(\n        courses: CoreEnrolledCourseDataWithExtraInfo[],\n        loadCategoryNames: boolean = false,\n        options: CoreSitesCommonWSOptions = {},\n    ): WSObservable<CoreEnrolledCourseDataWithExtraInfo[]> {\n        if (!courses.length) {\n            return of([]);\n        }\n\n        if (!loadCategoryNames && (courses[0].overviewfiles !== undefined || courses[0].displayname !== undefined)) {\n            // No need to load more data.\n            return of(courses);\n        }\n\n        const courseIds = courses.map((course) => course.id).join(',');\n\n        // Get the extra data for the courses.\n        return CoreCourses.getCoursesByFieldObservable('ids', courseIds, options).pipe(map(coursesInfosArray => {\n            const coursesInfo = CoreUtils.arrayToObject(coursesInfosArray, 'id');\n\n            courses.forEach((course) => {\n                this.loadCourseExtraInfo(course, coursesInfo[course.id], loadCategoryNames);\n            });\n\n            return courses;\n        }));\n    }\n\n    /**\n     * Load course colors from site config.\n     *\n     * @returns course colors RGB.\n     */\n    protected async loadCourseSiteColors(): Promise<(string | undefined)[]> {\n        const site = CoreSites.getRequiredCurrentSite();\n        const siteId = site.getId();\n\n        if (this.courseSiteColors[siteId] !== undefined) {\n            return this.courseSiteColors[siteId];\n        }\n\n        if (!site.isVersionGreaterEqualThan('3.8')) {\n            this.courseSiteColors[siteId] = [];\n\n            return [];\n        }\n\n        const colors: (string | undefined)[] = [];\n\n        try {\n            const configs = await site.getConfig();\n            for (let x = 0; x < 10; x++) {\n                colors[x] = configs['core_admin_coursecolor' + (x + 1)] || undefined;\n            }\n\n            this.courseSiteColors[siteId] = colors;\n        } catch {\n            // Ignore errors.\n        }\n\n        return colors;\n    }\n\n    /**\n     * Loads the color of the course or the thumb image.\n     *\n     * @param course Course data.\n     */\n    async loadCourseColorAndImage(course: CoreCourseWithImageAndColor): Promise<void> {\n        // Moodle 4.1 downwards geopatterns are embedded in b64 in only some WS, remote them to keep it coherent.\n        if (course.courseimage?.startsWith('data')) {\n            course.courseimage = undefined;\n        }\n\n        if (course.courseimage !== undefined) {\n            course.courseImage = course.courseimage; // @deprecated since 4.3 use courseimage instead.\n\n            return;\n        }\n\n        if (course.overviewfiles && course.overviewfiles[0]) {\n            course.courseimage = course.overviewfiles[0].fileurl;\n            course.courseImage = course.courseimage; // @deprecated since 4.3 use courseimage instead.\n\n            return;\n        }\n\n        const colors = await this.loadCourseSiteColors();\n\n        course.colorNumber = course.id % 10;\n        course.color = colors.length ? colors[course.colorNumber] : undefined;\n    }\n\n    /**\n     * Get user courses with admin and nav options.\n     *\n     * @param sort Sort courses after get them. If sort is not defined it won't be sorted.\n     * @param slice Slice results to get the X first one. If slice > 0 it will be done after sorting.\n     * @param filter Filter using some field.\n     * @param loadCategoryNames Whether load category names or not.\n     * @param options Options.\n     * @returns Courses filled with options.\n     */\n    getUserCoursesWithOptions(\n        sort: string = 'fullname',\n        slice: number = 0,\n        filter?: string,\n        loadCategoryNames: boolean = false,\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<CoreEnrolledCourseDataWithExtraInfoAndOptions[]> {\n        return firstValueFrom(this.getUserCoursesWithOptionsObservable({\n            sort,\n            slice,\n            filter,\n            loadCategoryNames,\n            ...options,\n        }));\n    }\n\n    /**\n     * Get user courses with admin and nav options.\n     *\n     * @param options Options.\n     * @returns Courses filled with options.\n     */\n    getUserCoursesWithOptionsObservable(\n        options: CoreCoursesGetWithOptionsOptions = {},\n    ): WSObservable<CoreEnrolledCourseDataWithExtraInfoAndOptions[]> {\n\n        return CoreCourses.getUserCoursesObservable(options).pipe(\n            chainRequests(options.readingStrategy, (courses, newReadingStrategy) => {\n                if (courses.length <= 0) {\n                    return of([]);\n                }\n\n                const courseIds = courses.map((course) => course.id); // Use all courses to get options, to use cache.\n                const newOptions = {\n                    ...options,\n                    readingStrategy: newReadingStrategy,\n                };\n                courses = this.filterAndSortCoursesWithOptions(courses, options);\n\n                return zipIncludingComplete(\n                    this.loadCoursesExtraInfoObservable(courses, options.loadCategoryNames, newOptions),\n                    CoreCourses.getCoursesAdminAndNavOptionsObservable(courseIds, newOptions).pipe(map(courseOptions => {\n                        courses.forEach((course: CoreEnrolledCourseDataWithOptions) => {\n                            course.navOptions = courseOptions.navOptions[course.id];\n                            course.admOptions = courseOptions.admOptions[course.id];\n                        });\n                    })),\n                    ...courses.map(course => this.loadCourseCompletedStatus(course, newOptions)),\n                ).pipe(map(() => courses));\n            }),\n        );\n    }\n\n    /**\n     * Filter and sort some courses.\n     *\n     * @param courses Courses.\n     * @param options Options\n     * @returns Courses filtered and sorted.\n     */\n    protected filterAndSortCoursesWithOptions(\n        courses: CoreEnrolledCourseData[],\n        options: CoreCoursesGetWithOptionsOptions = {},\n    ): CoreEnrolledCourseData[] {\n        const sort = options.sort ?? 'fullname';\n        const slice = options.slice ?? -1;\n\n        switch (options.filter) {\n            case 'isfavourite':\n                courses = courses.filter((course) => !!course.isfavourite);\n                break;\n            default:\n                // Filter not implemented.\n        }\n\n        switch (sort) {\n            case 'fullname':\n                courses.sort((a, b) => {\n                    const compareA = a.fullname.toLowerCase();\n                    const compareB = b.fullname.toLowerCase();\n\n                    return compareA.localeCompare(compareB);\n                });\n                break;\n            case 'lastaccess':\n                courses.sort((a, b) => (b.lastaccess || 0) - (a.lastaccess || 0));\n                break;\n            // Time modified property is defined on Moodle 4.0.\n            case 'timemodified':\n                courses.sort((a, b) => (b.timemodified || 0) - (a.timemodified || 0));\n                break;\n            case 'shortname':\n                courses.sort((a, b) => {\n                    const compareA = a.shortname.toLowerCase();\n                    const compareB = b.shortname.toLowerCase();\n\n                    return compareA.localeCompare(compareB);\n                });\n                break;\n            default:\n            // Sort not implemented. Do not sort.\n        }\n\n        courses = slice > 0 ? courses.slice(0, slice) : courses;\n\n        return courses;\n    }\n\n    /**\n     * Given a course object, fetch and set its completed status if not present already.\n     *\n     * @param course Course.\n     * @returns Observable.\n     */\n    protected loadCourseCompletedStatus(\n        course: CoreEnrolledCourseDataWithExtraInfo,\n        options: CoreSitesCommonWSOptions = {},\n    ): WSObservable<CoreEnrolledCourseDataWithExtraInfo> {\n        if (course.completed !== undefined) {\n            // The WebService already returns the completed status, no need to fetch it.\n            return of(course);\n        }\n\n        if (course.enablecompletion !== undefined && !course.enablecompletion) {\n            // Completion is disabled for this course, there is no need to fetch the completion status.\n            return of(course);\n        }\n\n        return AddonCourseCompletion.getCompletionObservable(course.id, options).pipe(\n            map(completion => {\n                course.completed = completion.completed;\n\n                return course;\n            }),\n            catchError(() => {\n                // Ignore error, maybe course completion is disabled or user has no permission.\n                course.completed = false;\n\n                return of(course);\n            }),\n        );\n    }\n\n    /**\n     * Calculates if course date is past.\n     *\n     * @param course Course Object.\n     * @param gradePeriodAfter Classify past courses as in progress for these many days after the course end date.\n     * @returns Wether the course is past.\n     */\n    isPastCourse(course: CoreEnrolledCourseDataWithOptions, gradePeriodAfter = 0): boolean {\n        if (course.completed) {\n            return true;\n        }\n\n        if (!course.enddate) {\n            return false;\n        }\n\n        // Calculate the end date to use for display classification purposes, incorporating the grace period, if any.\n        const endDate = moment(course.enddate * 1000).add(gradePeriodAfter, 'days').valueOf();\n\n        return endDate < Date.now();\n    }\n\n    /**\n     * Calculates if course date is future.\n     *\n     * @param course Course Object.\n     * @param gradePeriodAfter Classify past courses as in progress for these many days after the course end date.\n     * @param gradePeriodBefore Classify future courses as in progress for these many days prior to the course start date.\n     * @returns Wether the course is future.\n     */\n    isFutureCourse(\n        course: CoreEnrolledCourseDataWithOptions,\n        gradePeriodAfter = 0,\n        gradePeriodBefore = 0,\n    ): boolean {\n        if (this.isPastCourse(course, gradePeriodAfter) || !course.startdate) {\n            return false;\n        }\n\n        // Calculate the start date to use for display classification purposes, incorporating the grace period, if any.\n        const startDate = moment(course.startdate * 1000).subtract(gradePeriodBefore, 'days').valueOf();\n\n        return startDate > Date.now();\n    }\n\n    /**\n     * Retrieves my courses page module.\n     *\n     * @returns My courses page module.\n     */\n    async getMyRouteModule(): Promise<LazyRoutesModule> {\n        return import('../courses-my-lazy.module').then(m => m.CoreCoursesMyLazyModule);\n    }\n\n}\n\nexport const CoreCoursesHelper = makeSingleton(CoreCoursesHelperProvider);\n\n/**\n * Course with colors info and course image.\n */\nexport type CoreCourseWithImageAndColor = {\n    id: number; // Course id.\n    overviewfiles?: CoreWSExternalFile[];\n    colorNumber?: number; // Color index number.\n    color?: string; // Color RGB.\n    courseImage?: string; // Course thumbnail. @deprecated since 4.3, use courseimage instead.\n    courseimage?: string; // Course thumbnail.\n};\n\n/**\n * Enrolled course data with extra rendering info.\n */\nexport type CoreEnrolledCourseDataWithExtraInfo = CoreCourseWithImageAndColor & CoreEnrolledCourseData & {\n    categoryname?: string; // Category name,\n};\n\n/**\n * Enrolled course data with admin and navigation option availability.\n */\nexport type CoreEnrolledCourseDataWithOptions = CoreEnrolledCourseData & {\n    navOptions?: CoreCourseUserAdminOrNavOptionIndexed;\n    admOptions?: CoreCourseUserAdminOrNavOptionIndexed;\n};\n\n/**\n * Course summary data with admin and navigation option availability.\n */\nexport type CoreCourseSearchedDataWithOptions = CoreCourseSearchedData & {\n    navOptions?: CoreCourseUserAdminOrNavOptionIndexed;\n    admOptions?: CoreCourseUserAdminOrNavOptionIndexed;\n};\n\n/**\n * Enrolled course data with admin and navigation option availability and extra rendering info.\n */\nexport type CoreEnrolledCourseDataWithExtraInfoAndOptions = CoreEnrolledCourseDataWithExtraInfo & CoreEnrolledCourseDataWithOptions;\n\n/**\n * Searched course data with admin and navigation option availability and extra rendering info.\n */\nexport type CoreCourseSearchedDataWithExtraInfoAndOptions = CoreCourseWithImageAndColor & CoreCourseSearchedDataWithOptions;\n\n/**\n * Any course data with admin and navigation option availability and extra rendering info.\n */\nexport type CoreCourseAnyCourseDataWithExtraInfoAndOptions = CoreCourseWithImageAndColor & CoreCourseAnyCourseDataWithOptions & {\n    categoryname?: string; // Category name,\n};\n\n/**\n * Options for getUserCoursesWithOptionsObservable.\n */\nexport type CoreCoursesGetWithOptionsOptions = CoreSitesCommonWSOptions & {\n    sort?: string; // Sort courses after get them. Defaults to 'fullname'.\n    slice?: number; // Slice results to get the X first one. If slice > 0 it will be done after sorting.\n    filter?: string; // Filter using some field.\n    loadCategoryNames?: boolean; // Whether load category names or not.\n};\n"],"mappings":";;;AAeA,SAASA,SAAS,QAAQ,uBAAuB;AACjD,SAASC,SAAS,QAAkC,iBAAiB;AACrE,SAEIC,WAAW,QAIR,WAAW;AAClB,SAASC,aAAa,EAAEC,SAAS,QAAQ,aAAa;AAEtD,SAASC,qBAAqB,QAAQ,oDAAoD;AAC1F,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,EAAE,EAAEC,cAAc,QAAQ,MAAM;AACzC,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,aAAa,QAAsB,mCAAmC;;AAG/E;AACA,OAAO,MAAMC,cAAc,GAAG,CAAC,CAAC;AAEhC;;;AAIA,OAAM,MAAOC,yBAAyB;EADtCC,YAAA;IAGc,KAAAC,gBAAgB,GAA2C,EAAE;;EAEvE;;;;;;EAMMC,oBAAoBA,CAACC,QAAiB;IAAA,OAAAC,iBAAA;MACxC,MAAMC,OAAO,SAAmClB,WAAW,CAACmB,cAAc,CAAC,KAAK,CAAC;MAEjF;MACAD,OAAO,CAACE,OAAO,CAAC;QACZC,EAAE,EAAEV,cAAc;QAClBW,QAAQ,EAAEpB,SAAS,CAACqB,OAAO,CAAC,wBAAwB,CAAC;QACrDC,SAAS,EAAEtB,SAAS,CAACqB,OAAO,CAAC,wBAAwB,CAAC;QACtDE,UAAU,EAAE,CAAC,CAAC;QACdC,OAAO,EAAE,EAAE;QACXC,aAAa,EAAE;OAClB,CAAC;MAEF,IAAIC,UAA8B;MAClC,IAAIZ,QAAQ,EAAE;QACV;QACA,MAAMa,MAAM,GAAGX,OAAO,CAACY,IAAI,CAAED,MAAM,IAAKA,MAAM,CAACR,EAAE,IAAIL,QAAQ,CAAC;QAE9D,IAAIa,MAAM,EAAE;UACRD,UAAU,GAAGC,MAAM,CAACJ,UAAU;;;MAItC,OAAO;QACHP,OAAO,EAAEA,OAAO;QAChBU,UAAU,EAAEA;OACf;IAAC;EACN;EAEA;;;;;;;;EAQUG,mBAAmBA,CACzBF,MAA2C,EAC3CG,aAAqC,EACrCC,eAAA,GAA2B,KAAK;IAEhC,IAAID,aAAa,EAAE;MACfH,MAAM,CAACK,WAAW,GAAGF,aAAa,CAACE,WAAW;MAC9CL,MAAM,CAACM,YAAY,GAAGF,eAAe,GAAGD,aAAa,CAACG,YAAY,GAAGC,SAAS;MAC9EP,MAAM,CAACQ,aAAa,GAAGR,MAAM,CAACQ,aAAa,IAAIL,aAAa,CAACK,aAAa;KAC7E,MAAM;MACH,OAAOR,MAAM,CAACK,WAAW;;EAEjC;EAEA;;;;;;EAMMI,wBAAwBA,CAACpB,OAAiC;IAAA,IAAAqB,KAAA;IAAA,OAAAtB,iBAAA;MAC5D,IAAI,CAACC,OAAO,CAACsB,MAAM,EAAE;QACjB;;MAGJ,MAAMC,OAAO,CAACC,GAAG,CAACxB,OAAO,CAACT,GAAG,CAAEoB,MAAM,IAAKU,KAAI,CAACI,uBAAuB,CAACd,MAAM,CAAC,CAAC,CAAC;IAAC;EACrF;EAEA;;;;;;;;EAQAe,oBAAoBA,CAChB1B,OAA8C,EAC9C2B,iBAAA,GAA6B,KAAK;IAElC,OAAOvC,cAAc,CAAC,IAAI,CAACwC,8BAA8B,CAAC5B,OAAO,EAAE2B,iBAAiB,CAAC,CAAC;EAC1F;EAEA;;;;;;;;EAQAC,8BAA8BA,CAC1B5B,OAA8C,EAC9C2B,iBAAA,GAA6B,KAAK,EAClCE,OAAA,GAAoC,EAAE;IAEtC,IAAI,CAAC7B,OAAO,CAACsB,MAAM,EAAE;MACjB,OAAOnC,EAAE,CAAC,EAAE,CAAC;;IAGjB,IAAI,CAACwC,iBAAiB,KAAK3B,OAAO,CAAC,CAAC,CAAC,CAACmB,aAAa,KAAKD,SAAS,IAAIlB,OAAO,CAAC,CAAC,CAAC,CAACgB,WAAW,KAAKE,SAAS,CAAC,EAAE;MACxG;MACA,OAAO/B,EAAE,CAACa,OAAO,CAAC;;IAGtB,MAAM8B,SAAS,GAAG9B,OAAO,CAACT,GAAG,CAAEoB,MAAM,IAAKA,MAAM,CAACR,EAAE,CAAC,CAAC4B,IAAI,CAAC,GAAG,CAAC;IAE9D;IACA,OAAOjD,WAAW,CAACkD,2BAA2B,CAAC,KAAK,EAAEF,SAAS,EAAED,OAAO,CAAC,CAACI,IAAI,CAAC1C,GAAG,CAAC2C,iBAAiB,IAAG;MACnG,MAAMC,WAAW,GAAGvD,SAAS,CAACwD,aAAa,CAACF,iBAAiB,EAAE,IAAI,CAAC;MAEpElC,OAAO,CAACqC,OAAO,CAAE1B,MAAM,IAAI;QACvB,IAAI,CAACE,mBAAmB,CAACF,MAAM,EAAEwB,WAAW,CAACxB,MAAM,CAACR,EAAE,CAAC,EAAEwB,iBAAiB,CAAC;MAC/E,CAAC,CAAC;MAEF,OAAO3B,OAAO;IAClB,CAAC,CAAC,CAAC;EACP;EAEA;;;;;EAKgBsC,oBAAoBA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAxC,iBAAA;MAChC,MAAMyC,IAAI,GAAG3D,SAAS,CAAC4D,sBAAsB,EAAE;MAC/C,MAAMC,MAAM,GAAGF,IAAI,CAACG,KAAK,EAAE;MAE3B,IAAIJ,MAAI,CAAC3C,gBAAgB,CAAC8C,MAAM,CAAC,KAAKxB,SAAS,EAAE;QAC7C,OAAOqB,MAAI,CAAC3C,gBAAgB,CAAC8C,MAAM,CAAC;;MAGxC,IAAI,CAACF,IAAI,CAACI,yBAAyB,CAAC,KAAK,CAAC,EAAE;QACxCL,MAAI,CAAC3C,gBAAgB,CAAC8C,MAAM,CAAC,GAAG,EAAE;QAElC,OAAO,EAAE;;MAGb,MAAMG,MAAM,GAA2B,EAAE;MAEzC,IAAI;QACA,MAAMC,OAAO,SAASN,IAAI,CAACO,SAAS,EAAE;QACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;UACzBH,MAAM,CAACG,CAAC,CAAC,GAAGF,OAAO,CAAC,wBAAwB,IAAIE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI9B,SAAS;;QAGxEqB,MAAI,CAAC3C,gBAAgB,CAAC8C,MAAM,CAAC,GAAGG,MAAM;OACzC,CAAC,OAAAI,OAAA,EAAM;QACJ;MAAA;MAGJ,OAAOJ,MAAM;IAAC;EAClB;EAEA;;;;;EAKMpB,uBAAuBA,CAACd,MAAmC;IAAA,IAAAuC,MAAA;IAAA,OAAAnD,iBAAA;MAAA,IAAAoD,mBAAA;MAC7D;MACA,KAAAA,mBAAA,GAAIxC,MAAM,CAACyC,WAAW,cAAAD,mBAAA,eAAlBA,mBAAA,CAAoBE,UAAU,CAAC,MAAM,CAAC,EAAE;QACxC1C,MAAM,CAACyC,WAAW,GAAGlC,SAAS;;MAGlC,IAAIP,MAAM,CAACyC,WAAW,KAAKlC,SAAS,EAAE;QAClCP,MAAM,CAAC2C,WAAW,GAAG3C,MAAM,CAACyC,WAAW,CAAC,CAAC;QAEzC;;MAGJ,IAAIzC,MAAM,CAACQ,aAAa,IAAIR,MAAM,CAACQ,aAAa,CAAC,CAAC,CAAC,EAAE;QACjDR,MAAM,CAACyC,WAAW,GAAGzC,MAAM,CAACQ,aAAa,CAAC,CAAC,CAAC,CAACoC,OAAO;QACpD5C,MAAM,CAAC2C,WAAW,GAAG3C,MAAM,CAACyC,WAAW,CAAC,CAAC;QAEzC;;MAGJ,MAAMP,MAAM,SAASK,MAAI,CAACZ,oBAAoB,EAAE;MAEhD3B,MAAM,CAAC6C,WAAW,GAAG7C,MAAM,CAACR,EAAE,GAAG,EAAE;MACnCQ,MAAM,CAAC8C,KAAK,GAAGZ,MAAM,CAACvB,MAAM,GAAGuB,MAAM,CAAClC,MAAM,CAAC6C,WAAW,CAAC,GAAGtC,SAAS;IAAC;EAC1E;EAEA;;;;;;;;;;EAUAwC,yBAAyBA,CACrBC,IAAA,GAAe,UAAU,EACzBC,KAAA,GAAgB,CAAC,EACjBC,MAAe,EACflC,iBAAA,GAA6B,KAAK,EAClCE,OAAA,GAAoC,EAAE;IAEtC,OAAOzC,cAAc,CAAC,IAAI,CAAC0E,mCAAmC,CAAAC,aAAA;MAC1DJ,IAAI;MACJC,KAAK;MACLC,MAAM;MACNlC;IAAiB,GACdE,OAAO,CACb,CAAC,CAAC;EACP;EAEA;;;;;;EAMAiC,mCAAmCA,CAC/BjC,OAAA,GAA4C,EAAE;IAG9C,OAAO/C,WAAW,CAACkF,wBAAwB,CAACnC,OAAO,CAAC,CAACI,IAAI,CACrDzC,aAAa,CAACqC,OAAO,CAACoC,eAAe,EAAE,CAACjE,OAAO,EAAEkE,kBAAkB,KAAI;MACnE,IAAIlE,OAAO,CAACsB,MAAM,IAAI,CAAC,EAAE;QACrB,OAAOnC,EAAE,CAAC,EAAE,CAAC;;MAGjB,MAAM2C,SAAS,GAAG9B,OAAO,CAACT,GAAG,CAAEoB,MAAM,IAAKA,MAAM,CAACR,EAAE,CAAC,CAAC,CAAC;MACtD,MAAMgE,UAAU,GAAAJ,aAAA,CAAAA,aAAA,KACTlC,OAAO;QACVoC,eAAe,EAAEC;MAAkB,EACtC;MACDlE,OAAO,GAAG,IAAI,CAACoE,+BAA+B,CAACpE,OAAO,EAAE6B,OAAO,CAAC;MAEhE,OAAOxC,oBAAoB,CACvB,IAAI,CAACuC,8BAA8B,CAAC5B,OAAO,EAAE6B,OAAO,CAACF,iBAAiB,EAAEwC,UAAU,CAAC,EACnFrF,WAAW,CAACuF,sCAAsC,CAACvC,SAAS,EAAEqC,UAAU,CAAC,CAAClC,IAAI,CAAC1C,GAAG,CAAC+E,aAAa,IAAG;QAC/FtE,OAAO,CAACqC,OAAO,CAAE1B,MAAyC,IAAI;UAC1DA,MAAM,CAAC4D,UAAU,GAAGD,aAAa,CAACC,UAAU,CAAC5D,MAAM,CAACR,EAAE,CAAC;UACvDQ,MAAM,CAAC6D,UAAU,GAAGF,aAAa,CAACE,UAAU,CAAC7D,MAAM,CAACR,EAAE,CAAC;QAC3D,CAAC,CAAC;MACN,CAAC,CAAC,CAAC,EACH,GAAGH,OAAO,CAACT,GAAG,CAACoB,MAAM,IAAI,IAAI,CAAC8D,yBAAyB,CAAC9D,MAAM,EAAEwD,UAAU,CAAC,CAAC,CAC/E,CAAClC,IAAI,CAAC1C,GAAG,CAAC,MAAMS,OAAO,CAAC,CAAC;IAC9B,CAAC,CAAC,CACL;EACL;EAEA;;;;;;;EAOUoE,+BAA+BA,CACrCpE,OAAiC,EACjC6B,OAAA,GAA4C,EAAE;IAAA,IAAA6C,aAAA,EAAAC,cAAA;IAE9C,MAAMhB,IAAI,IAAAe,aAAA,GAAG7C,OAAO,CAAC8B,IAAI,cAAAe,aAAA,cAAAA,aAAA,GAAI,UAAU;IACvC,MAAMd,KAAK,IAAAe,cAAA,GAAG9C,OAAO,CAAC+B,KAAK,cAAAe,cAAA,cAAAA,cAAA,GAAI,CAAC,CAAC;IAEjC,QAAQ9C,OAAO,CAACgC,MAAM;MAClB,KAAK,aAAa;QACd7D,OAAO,GAAGA,OAAO,CAAC6D,MAAM,CAAElD,MAAM,IAAK,CAAC,CAACA,MAAM,CAACiE,WAAW,CAAC;QAC1D;MACJ;MACI;;;IAGR,QAAQjB,IAAI;MACR,KAAK,UAAU;QACX3D,OAAO,CAAC2D,IAAI,CAAC,CAACkB,CAAC,EAAEC,CAAC,KAAI;UAClB,MAAMC,QAAQ,GAAGF,CAAC,CAACzE,QAAQ,CAAC4E,WAAW,EAAE;UACzC,MAAMC,QAAQ,GAAGH,CAAC,CAAC1E,QAAQ,CAAC4E,WAAW,EAAE;UAEzC,OAAOD,QAAQ,CAACG,aAAa,CAACD,QAAQ,CAAC;QAC3C,CAAC,CAAC;QACF;MACJ,KAAK,YAAY;QACbjF,OAAO,CAAC2D,IAAI,CAAC,CAACkB,CAAC,EAAEC,CAAC,KAAK,CAACA,CAAC,CAACK,UAAU,IAAI,CAAC,KAAKN,CAAC,CAACM,UAAU,IAAI,CAAC,CAAC,CAAC;QACjE;MACJ;MACA,KAAK,cAAc;QACfnF,OAAO,CAAC2D,IAAI,CAAC,CAACkB,CAAC,EAAEC,CAAC,KAAK,CAACA,CAAC,CAACM,YAAY,IAAI,CAAC,KAAKP,CAAC,CAACO,YAAY,IAAI,CAAC,CAAC,CAAC;QACrE;MACJ,KAAK,WAAW;QACZpF,OAAO,CAAC2D,IAAI,CAAC,CAACkB,CAAC,EAAEC,CAAC,KAAI;UAClB,MAAMC,QAAQ,GAAGF,CAAC,CAACvE,SAAS,CAAC0E,WAAW,EAAE;UAC1C,MAAMC,QAAQ,GAAGH,CAAC,CAACxE,SAAS,CAAC0E,WAAW,EAAE;UAE1C,OAAOD,QAAQ,CAACG,aAAa,CAACD,QAAQ,CAAC;QAC3C,CAAC,CAAC;QACF;MACJ;MACA;;;IAGJjF,OAAO,GAAG4D,KAAK,GAAG,CAAC,GAAG5D,OAAO,CAAC4D,KAAK,CAAC,CAAC,EAAEA,KAAK,CAAC,GAAG5D,OAAO;IAEvD,OAAOA,OAAO;EAClB;EAEA;;;;;;EAMUyE,yBAAyBA,CAC/B9D,MAA2C,EAC3CkB,OAAA,GAAoC,EAAE;IAEtC,IAAIlB,MAAM,CAAC0E,SAAS,KAAKnE,SAAS,EAAE;MAChC;MACA,OAAO/B,EAAE,CAACwB,MAAM,CAAC;;IAGrB,IAAIA,MAAM,CAAC2E,gBAAgB,KAAKpE,SAAS,IAAI,CAACP,MAAM,CAAC2E,gBAAgB,EAAE;MACnE;MACA,OAAOnG,EAAE,CAACwB,MAAM,CAAC;;IAGrB,OAAO1B,qBAAqB,CAACsG,uBAAuB,CAAC5E,MAAM,CAACR,EAAE,EAAE0B,OAAO,CAAC,CAACI,IAAI,CACzE1C,GAAG,CAACiG,UAAU,IAAG;MACb7E,MAAM,CAAC0E,SAAS,GAAGG,UAAU,CAACH,SAAS;MAEvC,OAAO1E,MAAM;IACjB,CAAC,CAAC,EACFrB,UAAU,CAAC,MAAK;MACZ;MACAqB,MAAM,CAAC0E,SAAS,GAAG,KAAK;MAExB,OAAOlG,EAAE,CAACwB,MAAM,CAAC;IACrB,CAAC,CAAC,CACL;EACL;EAEA;;;;;;;EAOA8E,YAAYA,CAAC9E,MAAyC,EAAE+E,gBAAgB,GAAG,CAAC;IACxE,IAAI/E,MAAM,CAAC0E,SAAS,EAAE;MAClB,OAAO,IAAI;;IAGf,IAAI,CAAC1E,MAAM,CAACgF,OAAO,EAAE;MACjB,OAAO,KAAK;;IAGhB;IACA,MAAMC,OAAO,GAAG1G,MAAM,CAACyB,MAAM,CAACgF,OAAO,GAAG,IAAI,CAAC,CAACE,GAAG,CAACH,gBAAgB,EAAE,MAAM,CAAC,CAACI,OAAO,EAAE;IAErF,OAAOF,OAAO,GAAGG,IAAI,CAACC,GAAG,EAAE;EAC/B;EAEA;;;;;;;;EAQAC,cAAcA,CACVtF,MAAyC,EACzC+E,gBAAgB,GAAG,CAAC,EACpBQ,iBAAiB,GAAG,CAAC;IAErB,IAAI,IAAI,CAACT,YAAY,CAAC9E,MAAM,EAAE+E,gBAAgB,CAAC,IAAI,CAAC/E,MAAM,CAACwF,SAAS,EAAE;MAClE,OAAO,KAAK;;IAGhB;IACA,MAAMC,SAAS,GAAGlH,MAAM,CAACyB,MAAM,CAACwF,SAAS,GAAG,IAAI,CAAC,CAACE,QAAQ,CAACH,iBAAiB,EAAE,MAAM,CAAC,CAACJ,OAAO,EAAE;IAE/F,OAAOM,SAAS,GAAGL,IAAI,CAACC,GAAG,EAAE;EACjC;EAEA;;;;;EAKMM,gBAAgBA,CAAA;IAAA,OAAAvG,iBAAA;MAClB,OAAO,MAAM,CAAC,2BAA2B,CAAC,CAACwG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,uBAAuB,CAAC;IAAC;EACpF;;SA5YS/G,yBAAyB;;mBAAzBA,MAAyB;AAAA;;SAAzBA,MAAyB;EAAAgH,OAAA,EAAzBhH,MAAyB,CAAAiH,IAAA;EAAAC,UAAA,EADZ;AAAM;AAiZhC,OAAO,MAAMC,iBAAiB,GAAG9H,aAAa,CAACW,yBAAyB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}