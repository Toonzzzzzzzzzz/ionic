{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { AddonModPageProvider } from './page';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreFile } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreWS } from '@services/ws';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides some features for page.\n */\nexport class AddonModPageHelperProvider {\n  /**\n   * Gets the page HTML.\n   *\n   * @param contents The module contents.\n   * @param moduleId The module ID.\n   * @returns The HTML of the page.\n   */\n  getPageHtml(contents, moduleId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let indexUrl;\n      const paths = {};\n      // Extract the information about paths from the module contents.\n      contents.forEach(content => {\n        const url = content.fileurl;\n        if (_this.isMainPage(content)) {\n          // This seems to be the most reliable way to spot the index page.\n          indexUrl = url;\n        } else {\n          let key = content.filename;\n          if (content.filepath !== '/') {\n            // Add the folders without the leading slash.\n            key = content.filepath.substring(1) + key;\n          }\n          paths[CoreTextUtils.decodeURIComponent(key)] = url;\n        }\n      });\n      // Promise handling when we are in a browser.\n      if (!indexUrl) {\n        // If ever that happens.\n        throw new CoreError('Could not locate the index page');\n      }\n      let url;\n      if (CoreFile.isAvailable()) {\n        // The file system is available.\n        url = yield CoreFilepool.downloadUrl(CoreSites.getCurrentSiteId(), indexUrl, false, AddonModPageProvider.COMPONENT, moduleId);\n      } else {\n        var _CoreSites$getCurrent;\n        // We return the live URL.\n        url = (yield (_CoreSites$getCurrent = CoreSites.getCurrentSite()) === null || _CoreSites$getCurrent === void 0 ? void 0 : _CoreSites$getCurrent.checkAndFixPluginfileURL(indexUrl)) || '';\n      }\n      const content = yield CoreWS.getText(url);\n      // Now that we have the content, we update the SRC to point back to the external resource.\n      // That will be caught by core-format-text.\n      return CoreDomUtils.restoreSourcesInHtml(content, paths);\n    })();\n  }\n  /**\n   * Returns whether the file is the main page of the module.\n   *\n   * @param file An object returned from WS containing file info.\n   * @returns Whether the file is the main page or not.\n   */\n  isMainPage(file) {\n    const filename = file.filename || '';\n    const fileurl = file.fileurl || '';\n    const url = '/mod_page/content/index.html';\n    const encodedUrl = encodeURIComponent(url);\n    return filename === 'index.html' && (fileurl.indexOf(url) > 0 || fileurl.indexOf(encodedUrl) > 0);\n  }\n}\n_class = AddonModPageHelperProvider;\n_class.ɵfac = function AddonModPageHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModPageHelper = makeSingleton(AddonModPageHelperProvider);","map":{"version":3,"names":["AddonModPageProvider","CoreError","CoreTextUtils","CoreFile","CoreSites","CoreFilepool","CoreWS","CoreDomUtils","makeSingleton","AddonModPageHelperProvider","getPageHtml","contents","moduleId","_this","_asyncToGenerator","indexUrl","paths","forEach","content","url","fileurl","isMainPage","key","filename","filepath","substring","decodeURIComponent","isAvailable","downloadUrl","getCurrentSiteId","COMPONENT","_CoreSites$getCurrent","getCurrentSite","checkAndFixPluginfileURL","getText","restoreSourcesInHtml","file","encodedUrl","encodeURIComponent","indexOf","factory","ɵfac","providedIn","AddonModPageHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/page/services/page-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { AddonModPageProvider } from './page';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreFile } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreWS } from '@services/ws';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport { CoreCourseModuleContentFile } from '@features/course/services/course';\n\n/**\n * Service that provides some features for page.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModPageHelperProvider {\n\n    /**\n     * Gets the page HTML.\n     *\n     * @param contents The module contents.\n     * @param moduleId The module ID.\n     * @returns The HTML of the page.\n     */\n    async getPageHtml(contents: CoreCourseModuleContentFile[], moduleId: number): Promise<string> {\n        let indexUrl: string | undefined;\n        const paths: Record<string, string> = {};\n\n        // Extract the information about paths from the module contents.\n        contents.forEach((content) => {\n            const url = content.fileurl;\n\n            if (this.isMainPage(content)) {\n                // This seems to be the most reliable way to spot the index page.\n                indexUrl = url;\n            } else {\n                let key = content.filename;\n                if (content.filepath !== '/') {\n                    // Add the folders without the leading slash.\n                    key = content.filepath.substring(1) + key;\n                }\n                paths[CoreTextUtils.decodeURIComponent(key)] = url;\n            }\n        });\n\n        // Promise handling when we are in a browser.\n        if (!indexUrl) {\n            // If ever that happens.\n            throw new CoreError('Could not locate the index page');\n        }\n\n        let url: string;\n        if (CoreFile.isAvailable()) {\n            // The file system is available.\n            url = await CoreFilepool.downloadUrl(\n                CoreSites.getCurrentSiteId(),\n                indexUrl,\n                false,\n                AddonModPageProvider.COMPONENT,\n                moduleId,\n            );\n        } else {\n            // We return the live URL.\n            url = await CoreSites.getCurrentSite()?.checkAndFixPluginfileURL(indexUrl) || '';\n        }\n\n        const content = await CoreWS.getText(url);\n\n        // Now that we have the content, we update the SRC to point back to the external resource.\n        // That will be caught by core-format-text.\n        return CoreDomUtils.restoreSourcesInHtml(content, paths);\n    }\n\n    /**\n     * Returns whether the file is the main page of the module.\n     *\n     * @param file An object returned from WS containing file info.\n     * @returns Whether the file is the main page or not.\n     */\n    protected isMainPage(file: CoreCourseModuleContentFile): boolean {\n        const filename = file.filename || '';\n        const fileurl = file.fileurl || '';\n        const url = '/mod_page/content/index.html';\n        const encodedUrl = encodeURIComponent(url);\n\n        return (filename === 'index.html' && (fileurl.indexOf(url) > 0 || fileurl.indexOf(encodedUrl) > 0 ));\n    }\n\n}\nexport const AddonModPageHelper = makeSingleton(AddonModPageHelperProvider);\n"],"mappings":";;AAeA,SAASA,oBAAoB,QAAQ,QAAQ;AAC7C,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,aAAa,QAAQ,aAAa;;AAG3C;;;AAIA,OAAM,MAAOC,0BAA0B;EAEnC;;;;;;;EAOMC,WAAWA,CAACC,QAAuC,EAAEC,QAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACvE,IAAIC,QAA4B;MAChC,MAAMC,KAAK,GAA2B,EAAE;MAExC;MACAL,QAAQ,CAACM,OAAO,CAAEC,OAAO,IAAI;QACzB,MAAMC,GAAG,GAAGD,OAAO,CAACE,OAAO;QAE3B,IAAIP,KAAI,CAACQ,UAAU,CAACH,OAAO,CAAC,EAAE;UAC1B;UACAH,QAAQ,GAAGI,GAAG;SACjB,MAAM;UACH,IAAIG,GAAG,GAAGJ,OAAO,CAACK,QAAQ;UAC1B,IAAIL,OAAO,CAACM,QAAQ,KAAK,GAAG,EAAE;YAC1B;YACAF,GAAG,GAAGJ,OAAO,CAACM,QAAQ,CAACC,SAAS,CAAC,CAAC,CAAC,GAAGH,GAAG;;UAE7CN,KAAK,CAACd,aAAa,CAACwB,kBAAkB,CAACJ,GAAG,CAAC,CAAC,GAAGH,GAAG;;MAE1D,CAAC,CAAC;MAEF;MACA,IAAI,CAACJ,QAAQ,EAAE;QACX;QACA,MAAM,IAAId,SAAS,CAAC,iCAAiC,CAAC;;MAG1D,IAAIkB,GAAW;MACf,IAAIhB,QAAQ,CAACwB,WAAW,EAAE,EAAE;QACxB;QACAR,GAAG,SAASd,YAAY,CAACuB,WAAW,CAChCxB,SAAS,CAACyB,gBAAgB,EAAE,EAC5Bd,QAAQ,EACR,KAAK,EACLf,oBAAoB,CAAC8B,SAAS,EAC9BlB,QAAQ,CACX;OACJ,MAAM;QAAA,IAAAmB,qBAAA;QACH;QACAZ,GAAG,GAAG,QAAAY,qBAAA,GAAM3B,SAAS,CAAC4B,cAAc,EAAE,cAAAD,qBAAA,uBAA1BA,qBAAA,CAA4BE,wBAAwB,CAAClB,QAAQ,CAAC,KAAI,EAAE;;MAGpF,MAAMG,OAAO,SAASZ,MAAM,CAAC4B,OAAO,CAACf,GAAG,CAAC;MAEzC;MACA;MACA,OAAOZ,YAAY,CAAC4B,oBAAoB,CAACjB,OAAO,EAAEF,KAAK,CAAC;IAAC;EAC7D;EAEA;;;;;;EAMUK,UAAUA,CAACe,IAAiC;IAClD,MAAMb,QAAQ,GAAGa,IAAI,CAACb,QAAQ,IAAI,EAAE;IACpC,MAAMH,OAAO,GAAGgB,IAAI,CAAChB,OAAO,IAAI,EAAE;IAClC,MAAMD,GAAG,GAAG,8BAA8B;IAC1C,MAAMkB,UAAU,GAAGC,kBAAkB,CAACnB,GAAG,CAAC;IAE1C,OAAQI,QAAQ,KAAK,YAAY,KAAKH,OAAO,CAACmB,OAAO,CAACpB,GAAG,CAAC,GAAG,CAAC,IAAIC,OAAO,CAACmB,OAAO,CAACF,UAAU,CAAC,GAAG,CAAC,CAAE;EACvG;;SAvES5B,0BAA0B;;mBAA1BA,MAA0B;AAAA;;SAA1BA,MAA0B;EAAA+B,OAAA,EAA1B/B,MAA0B,CAAAgC,IAAA;EAAAC,UAAA,EADb;AAAM;AA2EhC,OAAO,MAAMC,kBAAkB,GAAGnC,aAAa,CAACC,0BAA0B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}