{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { CoreStorage } from '@services/storage';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport * as i0 from \"@angular/core\";\n/**\n * Auto logout service\n */\nexport class CoreAutoLogoutService {\n  /**\n   * Initialize.\n   */\n  initialize() {\n    var _this = this;\n    CoreEvents.on(CoreEvents.LOGIN, /*#__PURE__*/_asyncToGenerator(function* () {\n      return yield _this.refreshListeners();\n    }));\n    CoreEvents.on(CoreEvents.LOGOUT, /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.cancelListeners();\n      const storage = CoreStorage.forCurrentSite();\n      yield storage.remove(CoreAutoLogoutService.TIMESTAMP_DB_KEY);\n    }));\n  }\n  /**\n   * Refresh listeners for auto logout.\n   */\n  refreshListeners() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!CoreSites.isLoggedIn()) {\n        return;\n      }\n      const site = CoreSites.getCurrentSite();\n      if (!site) {\n        return;\n      }\n      const autoLogoutType = Number(site.getStoredConfig('tool_mobile_autologout'));\n      _this2.cancelListeners();\n      if (!autoLogoutType || autoLogoutType === CoreAutoLogoutType.NEVER) {\n        return;\n      }\n      if (autoLogoutType === CoreAutoLogoutType.CUSTOM) {\n        yield _this2.setTimestamp();\n        _this2.setInterval();\n      }\n      _this2.platformPauseSubscription = CorePlatform.pause.subscribe( /*#__PURE__*/_asyncToGenerator(function* () {\n        _this2.backgroundTimestamp = new Date().getTime();\n        _this2.clearInterval();\n      }));\n      _this2.platformResumeSubscription = CorePlatform.resume.subscribe( /*#__PURE__*/_asyncToGenerator(function* () {\n        if (autoLogoutType !== CoreAutoLogoutType.CUSTOM) {\n          yield _this2.handleAppClosed(site);\n          return;\n        }\n        const autoLogoutTime = Number(site.getStoredConfig('tool_mobile_autologouttime'));\n        const loggedOut = yield _this2.handleSessionClosed(autoLogoutTime, site);\n        if (!loggedOut) {\n          yield _this2.setTimestamp();\n          _this2.setInterval();\n        }\n      }));\n    })();\n  }\n  /**\n   * Set site logged out.\n   *\n   * @param siteId site id.\n   */\n  logout(siteId) {\n    return _asyncToGenerator(function* () {\n      yield CoreSites.setSiteLoggedOut(siteId, true);\n    })();\n  }\n  /**\n   * Saves stored timestamp.\n   */\n  setTimestamp() {\n    return _asyncToGenerator(function* () {\n      const date = new Date().getTime();\n      const storage = CoreStorage.forCurrentSite();\n      yield storage.set(CoreAutoLogoutService.TIMESTAMP_DB_KEY, date);\n    })();\n  }\n  /**\n   * Gives if auto logout can be displayed.\n   *\n   * @returns true if can display, false if not.\n   */\n  canShowPreference() {\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getCurrentSite();\n      if (!site) {\n        return false;\n      }\n      const autoLogoutType = Number(site.getStoredConfig('tool_mobile_autologout'));\n      return autoLogoutType !== CoreAutoLogoutType.NEVER;\n    })();\n  }\n  /**\n   * Cancel uncompleted listeners.\n   */\n  cancelListeners() {\n    var _this$platformResumeS, _this$platformPauseSu;\n    this.clearInterval();\n    (_this$platformResumeS = this.platformResumeSubscription) === null || _this$platformResumeS === void 0 || _this$platformResumeS.unsubscribe();\n    (_this$platformPauseSu = this.platformPauseSubscription) === null || _this$platformPauseSu === void 0 || _this$platformPauseSu.unsubscribe();\n    delete this.platformPauseSubscription;\n    delete this.platformResumeSubscription;\n  }\n  /**\n   * Set interval.\n   */\n  setInterval() {\n    var _this3 = this;\n    this.interval = setInterval( /*#__PURE__*/_asyncToGenerator(function* () {\n      return yield _this3.setTimestamp();\n    }), CoreAutoLogoutService.DEFAULT_TIMESTAMP_STORE_TIME);\n  }\n  /**\n   * Clear interval.\n   */\n  clearInterval() {\n    if (!this.interval) {\n      return;\n    }\n    clearInterval(this.interval);\n    delete this.interval;\n  }\n  /**\n   * Logout user if his session is expired.\n   *\n   * @param sessionDuration Session duration.\n   * @param site Current site.\n   * @returns Whether site has been logged out.\n   */\n  handleSessionClosed(sessionDuration, site) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!site.id) {\n        return false;\n      }\n      const storage = CoreStorage.forSite(site);\n      const savedTimestamp = yield storage.get(CoreAutoLogoutService.TIMESTAMP_DB_KEY);\n      if (!savedTimestamp) {\n        return false;\n      }\n      // Get expiration time from site preferences as miliseconds.\n      const expirationDate = savedTimestamp + (sessionDuration || 0) * 1000;\n      yield storage.remove(CoreAutoLogoutService.TIMESTAMP_DB_KEY);\n      if (new Date().getTime() < expirationDate) {\n        return false;\n      }\n      yield _this4.logout(site.id);\n      return true;\n    })();\n  }\n  /**\n   * Logout if user closed the app.\n   *\n   * @param site Current site.\n   * @returns Whether site has been logged out.\n   */\n  handleAppClosed(site) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (!site.id) {\n        return false;\n      }\n      if (_this5.backgroundTimestamp && _this5.backgroundTimestamp + CoreAutoLogoutService.GRACE_PERIOD > new Date().getTime()) {\n        delete _this5.backgroundTimestamp;\n        return false;\n      }\n      yield _this5.logout(site.id);\n      return true;\n    })();\n  }\n  getConfig() {\n    const site = CoreSites.getRequiredCurrentSite();\n    const autoLogoutType = Number(site.getStoredConfig('tool_mobile_autologout'));\n    const autoLogoutTime = Number(site.getStoredConfig('tool_mobile_autologouttime'));\n    return {\n      autoLogoutType,\n      autoLogoutTime\n    };\n  }\n}\n/**\n * Possible automatic logout cases.\n */\n_class = CoreAutoLogoutService;\n/**\n * Timestamp indicating the last time the application was in the foreground.\n */\n_class.TIMESTAMP_DB_KEY = 'CoreAutoLogoutTimestamp';\n/**\n * How often we will store a timestamp (in miliseconds).\n */\n_class.DEFAULT_TIMESTAMP_STORE_TIME = 10000;\n/**\n * Grace period if you return to the application too soon (in miliseconds).\n */\n_class.GRACE_PERIOD = 30000;\n_class.ɵfac = function CoreAutoLogoutService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport var CoreAutoLogoutType;\n(function (CoreAutoLogoutType) {\n  /**\n   * Disabled automatic logout.\n   */\n  CoreAutoLogoutType[CoreAutoLogoutType[\"NEVER\"] = 0] = \"NEVER\";\n  /**\n   * When the user closes the app, in next login he need to login again.\n   */\n  CoreAutoLogoutType[CoreAutoLogoutType[\"INMEDIATE\"] = 1] = \"INMEDIATE\";\n  /**\n   * This applies when session time is set. If the user closes the app more time than the specified,\n   * then, the user must login again.\n   */\n  CoreAutoLogoutType[CoreAutoLogoutType[\"CUSTOM\"] = 2] = \"CUSTOM\";\n})(CoreAutoLogoutType || (CoreAutoLogoutType = {}));\nexport const CoreAutoLogout = makeSingleton(CoreAutoLogoutService);","map":{"version":3,"names":["CorePlatform","CoreSites","CoreStorage","makeSingleton","CoreEvents","CoreAutoLogoutService","initialize","_this","on","LOGIN","_asyncToGenerator","refreshListeners","LOGOUT","cancelListeners","storage","forCurrentSite","remove","TIMESTAMP_DB_KEY","_this2","isLoggedIn","site","getCurrentSite","autoLogoutType","Number","getStoredConfig","CoreAutoLogoutType","NEVER","CUSTOM","setTimestamp","setInterval","platformPauseSubscription","pause","subscribe","backgroundTimestamp","Date","getTime","clearInterval","platformResumeSubscription","resume","handleAppClosed","autoLogoutTime","loggedOut","handleSessionClosed","logout","siteId","setSiteLoggedOut","date","set","canShowPreference","_this$platformResumeS","_this$platformPauseSu","unsubscribe","_this3","interval","DEFAULT_TIMESTAMP_STORE_TIME","sessionDuration","_this4","id","forSite","savedTimestamp","get","expirationDate","_this5","GRACE_PERIOD","getConfig","getRequiredCurrentSite","_class","factory","ɵfac","providedIn","CoreAutoLogout"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/autologout/services/autologout.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSite } from '@classes/sites/site';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { CoreStorage } from '@services/storage';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { Subscription } from 'rxjs';\n\n/**\n * Auto logout service\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreAutoLogoutService {\n\n    /**\n     * Timestamp indicating the last time the application was in the foreground.\n     */\n    protected static readonly TIMESTAMP_DB_KEY = 'CoreAutoLogoutTimestamp';\n\n    /**\n     * How often we will store a timestamp (in miliseconds).\n     */\n    protected static readonly DEFAULT_TIMESTAMP_STORE_TIME = 10000;\n\n    /**\n     * Grace period if you return to the application too soon (in miliseconds).\n     */\n    protected static readonly GRACE_PERIOD = 30000;\n\n    protected platformResumeSubscription?: Subscription;\n    protected platformPauseSubscription?: Subscription;\n    protected interval?: ReturnType<typeof setInterval>;\n    protected backgroundTimestamp?: number;\n\n    /**\n     * Initialize.\n     */\n    initialize(): void {\n        CoreEvents.on(CoreEvents.LOGIN, async() => await this.refreshListeners());\n        CoreEvents.on(CoreEvents.LOGOUT, async() => {\n            this.cancelListeners();\n            const storage = CoreStorage.forCurrentSite();\n            await storage.remove(CoreAutoLogoutService.TIMESTAMP_DB_KEY);\n        });\n    }\n\n    /**\n     * Refresh listeners for auto logout.\n     */\n    async refreshListeners(): Promise<void> {\n        if (!CoreSites.isLoggedIn()) {\n            return;\n        }\n\n        const site = CoreSites.getCurrentSite();\n\n        if (!site) {\n            return;\n        }\n\n        const autoLogoutType = Number(site.getStoredConfig('tool_mobile_autologout'));\n        this.cancelListeners();\n\n        if (!autoLogoutType || autoLogoutType === CoreAutoLogoutType.NEVER) {\n            return;\n        }\n\n        if (autoLogoutType === CoreAutoLogoutType.CUSTOM) {\n            await this.setTimestamp();\n            this.setInterval();\n        }\n\n        this.platformPauseSubscription = CorePlatform.pause.subscribe(async () => {\n            this.backgroundTimestamp = new Date().getTime();\n            this.clearInterval();\n        });\n\n        this.platformResumeSubscription = CorePlatform.resume.subscribe(async () => {\n            if (autoLogoutType !== CoreAutoLogoutType.CUSTOM) {\n                await this.handleAppClosed(site);\n\n                return;\n            }\n\n            const autoLogoutTime = Number(site.getStoredConfig('tool_mobile_autologouttime'));\n            const loggedOut = await this.handleSessionClosed(autoLogoutTime, site);\n\n            if (!loggedOut) {\n                await this.setTimestamp();\n                this.setInterval();\n            }\n        });\n    }\n\n    /**\n     * Set site logged out.\n     *\n     * @param siteId site id.\n     */\n    protected async logout(siteId: string): Promise<void> {\n        await CoreSites.setSiteLoggedOut(siteId, true);\n    }\n\n    /**\n     * Saves stored timestamp.\n     */\n    protected async setTimestamp(): Promise<void> {\n        const date = new Date().getTime();\n        const storage = CoreStorage.forCurrentSite();\n        await storage.set(CoreAutoLogoutService.TIMESTAMP_DB_KEY, date);\n    }\n\n    /**\n     * Gives if auto logout can be displayed.\n     *\n     * @returns true if can display, false if not.\n     */\n    async canShowPreference(): Promise<boolean> {\n        const site = CoreSites.getCurrentSite();\n\n        if (!site) {\n            return false;\n        }\n\n        const autoLogoutType = Number(site.getStoredConfig('tool_mobile_autologout'));\n\n        return autoLogoutType !== CoreAutoLogoutType.NEVER;\n    }\n\n    /**\n     * Cancel uncompleted listeners.\n     */\n    protected cancelListeners(): void {\n        this.clearInterval();\n        this.platformResumeSubscription?.unsubscribe();\n        this.platformPauseSubscription?.unsubscribe();\n        delete this.platformPauseSubscription;\n        delete this.platformResumeSubscription;\n    }\n\n    /**\n     * Set interval.\n     */\n    protected setInterval(): void {\n        this.interval = setInterval(async () => await this.setTimestamp(), CoreAutoLogoutService.DEFAULT_TIMESTAMP_STORE_TIME);\n    }\n\n    /**\n     * Clear interval.\n     */\n    protected clearInterval(): void {\n        if (!this.interval) {\n            return;\n        }\n\n        clearInterval(this.interval);\n        delete this.interval;\n    }\n\n    /**\n     * Logout user if his session is expired.\n     *\n     * @param sessionDuration Session duration.\n     * @param site Current site.\n     * @returns Whether site has been logged out.\n     */\n    async handleSessionClosed(sessionDuration: number, site: CoreSite): Promise<boolean> {\n        if (!site.id) {\n            return false;\n        }\n\n        const storage = CoreStorage.forSite(site);\n        const savedTimestamp = await storage.get<number>(CoreAutoLogoutService.TIMESTAMP_DB_KEY);\n\n        if (!savedTimestamp) {\n            return false;\n        }\n\n        // Get expiration time from site preferences as miliseconds.\n        const expirationDate = savedTimestamp + ((sessionDuration || 0) * 1000);\n        await storage.remove(CoreAutoLogoutService.TIMESTAMP_DB_KEY);\n\n        if (new Date().getTime() < expirationDate) {\n            return false;\n        }\n\n        await this.logout(site.id);\n\n        return true;\n    }\n\n    /**\n     * Logout if user closed the app.\n     *\n     * @param site Current site.\n     * @returns Whether site has been logged out.\n     */\n    async handleAppClosed(site: CoreSite): Promise<boolean> {\n        if (!site.id) {\n            return false;\n        }\n\n        if (\n            this.backgroundTimestamp &&\n            (this.backgroundTimestamp + CoreAutoLogoutService.GRACE_PERIOD) > new Date().getTime()\n        ) {\n            delete this.backgroundTimestamp;\n\n            return false;\n        }\n\n        await this.logout(site.id);\n\n        return true;\n    }\n\n    getConfig(): { autoLogoutType: CoreAutoLogoutType; autoLogoutTime: number } {\n        const site = CoreSites.getRequiredCurrentSite();\n        const autoLogoutType = Number(site.getStoredConfig('tool_mobile_autologout'));\n        const autoLogoutTime = Number(site.getStoredConfig('tool_mobile_autologouttime'));\n\n        return { autoLogoutType, autoLogoutTime };\n    }\n\n}\n\nexport type CoreAutoLogoutSessionConfig = {\n    type: CoreAutoLogoutType.CUSTOM;\n    sessionDuration: number;\n};\n\nexport type CoreAutoLogoutOtherConfig = {\n    type: Exclude<CoreAutoLogoutType, CoreAutoLogoutType.CUSTOM>;\n};\n\n/**\n * Possible automatic logout cases.\n */\nexport enum CoreAutoLogoutType {\n    /**\n     * Disabled automatic logout.\n     */\n    NEVER = 0,\n\n    /**\n     * When the user closes the app, in next login he need to login again.\n     */\n    INMEDIATE = 1,\n\n    /**\n     * This applies when session time is set. If the user closes the app more time than the specified,\n     * then, the user must login again.\n     */\n    CUSTOM = 2,\n}\n\nexport type CoreAutoLogoutConfig = CoreAutoLogoutSessionConfig | CoreAutoLogoutOtherConfig;\n\nexport const CoreAutoLogout = makeSingleton(CoreAutoLogoutService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}