{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreWSError } from '@classes/errors/wserror';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'AddonModBBB:';\n/**\n * Service that provides some features for Big Blue Button activity.\n */\nexport class AddonModBBBService {\n  /**\n   * End a meeting.\n   *\n   * @param id BBB ID.\n   * @param groupId Group ID, 0 means that the function will determine the user group.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  endMeeting(id, groupId = 0, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        bigbluebuttonbnid: id,\n        groupid: groupId\n      };\n      yield site.write('mod_bigbluebuttonbn_end_meeting', params);\n    })();\n  }\n  /**\n   * Get a BBB activity.\n   *\n   * @param courseId Course ID.\n   * @param cmId Course module ID.\n   * @param options Other options.\n   * @returns Promise resolved when the activity is retrieved.\n   */\n  getBBB(courseId, cmId, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        courseids: [courseId]\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this.getBBBsCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: AddonModBBBService.COMPONENT\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses', params, preSets);\n      const bbb = response.bigbluebuttonbns.find(bbb => bbb.coursemodule == cmId);\n      if (bbb) {\n        return bbb;\n      }\n      throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    })();\n  }\n  /**\n   * Get cache key for get BBB WS call.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getBBBsCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'bbb:' + courseId;\n  }\n  /**\n   * Get join URL for a BBB activity.\n   *\n   * @param cmId Course module ID.\n   * @param groupId Group ID, 0 means that the function will determine the user group.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the list of messages.\n   */\n  getJoinUrl(cmId, groupId = 0, siteId) {\n    return _asyncToGenerator(function* () {\n      var _response$warnings;\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        cmid: cmId,\n        groupid: groupId\n      };\n      // Don't use cache.\n      const response = yield site.write('mod_bigbluebuttonbn_get_join_url', params);\n      if ((_response$warnings = response.warnings) !== null && _response$warnings !== void 0 && _response$warnings.length) {\n        throw new CoreWSError(response.warnings[0]);\n      }\n      if (!response.join_url) {\n        // Shouldn't happen, if there are no warning the app should always receive the URL.\n        throw new CoreError(Translate.instant('addon.mod_bigbluebuttonbn.view_error_unable_join_studentview_error_unable_join_student'));\n      }\n      return response.join_url;\n    })();\n  }\n  /**\n   * Get meeting info for a BBB activity.\n   *\n   * @param id BBB ID.\n   * @param groupId Group ID, 0 means that the function will determine the user group.\n   * @param options Other options.\n   * @returns Promise resolved with the list of messages.\n   */\n  getMeetingInfo(id, groupId = 0, options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        bigbluebuttonbnid: id,\n        groupid: groupId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this2.getMeetingInfoCacheKey(id, groupId),\n        getCacheUsingCacheKey: true,\n        uniqueCacheKey: true,\n        component: AddonModBBBService.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      if (options.updateCache) {\n        params.updatecache = true;\n        preSets.getFromCache = false;\n      }\n      const meetingInfo = yield site.read('mod_bigbluebuttonbn_meeting_info', params, preSets);\n      return _objectSpread(_objectSpread({}, meetingInfo), {}, {\n        features: meetingInfo.features ? CoreUtils.objectToKeyValueMap(meetingInfo.features, 'name', 'isenabled') : undefined\n      });\n    })();\n  }\n  /**\n   * Get cache key for meeting info WS call.\n   *\n   * @param id BBB ID.\n   * @param groupId Group ID, 0 means that the function will determine the user group.\n   * @returns Cache key.\n   */\n  getMeetingInfoCacheKey(id, groupId = 0) {\n    return this.getMeetingInfoCacheKeyPrefix(id) + groupId;\n  }\n  /**\n   * Get cache key prefix for meeting info WS call.\n   *\n   * @param id BBB ID.\n   * @returns Cache key prefix.\n   */\n  getMeetingInfoCacheKeyPrefix(id) {\n    return ROOT_CACHE_KEY + 'meetingInfo:' + id + ':';\n  }\n  /**\n   * Get meeting info for a BBB activity.\n   *\n   * @param id BBB ID.\n   * @param groupId Group ID, 0 means that the function will determine the user group.\n   * @param options Other options.\n   * @returns Promise resolved with the list of messages.\n   */\n  getRecordings(id, groupId = 0, options = {}) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _result$warnings, _result$tabledata;\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        bigbluebuttonbnid: id,\n        groupid: groupId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this3.getRecordingsCacheKey(id, groupId),\n        component: AddonModBBBService.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const result = yield site.read('mod_bigbluebuttonbn_get_recordings', params, preSets);\n      if ((_result$warnings = result.warnings) !== null && _result$warnings !== void 0 && _result$warnings.length) {\n        throw new CoreWSError(result.warnings[0]);\n      } else if (!result.tabledata) {\n        throw new CoreError('Cannot retrieve recordings.');\n      }\n      return _objectSpread(_objectSpread({}, result.tabledata), {}, {\n        parsedData: CoreTextUtils.parseJSON((_result$tabledata = result.tabledata) === null || _result$tabledata === void 0 ? void 0 : _result$tabledata.data, [])\n      });\n    })();\n  }\n  /**\n   * Get cache key for get recordings WS call.\n   *\n   * @param id BBB ID.\n   * @param groupId Group ID, 0 means that the function will determine the user group.\n   * @returns Cache key.\n   */\n  getRecordingsCacheKey(id, groupId = 0) {\n    return this.getRecordingsCacheKeyPrefix(id) + groupId;\n  }\n  /**\n   * Get cache key prefix for get recordings WS call.\n   *\n   * @param id BBB ID.\n   * @returns Cache key prefix.\n   */\n  getRecordingsCacheKeyPrefix(id) {\n    return ROOT_CACHE_KEY + 'recordings:' + id + ':';\n  }\n  /**\n   * Report a BBB as being viewed.\n   *\n   * @param id BBB instance ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logView(id, siteId) {\n    return _asyncToGenerator(function* () {\n      const params = {\n        bigbluebuttonbnid: id\n      };\n      yield CoreCourseLogHelper.log('mod_bigbluebuttonbn_view_bigbluebuttonbn', params, AddonModBBBService.COMPONENT, id, siteId);\n    })();\n  }\n  /**\n   * Invalidate BBBs.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateBBBs(courseId, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this4.getBBBsCacheKey(courseId));\n    })();\n  }\n  /**\n   * Invalidate meeting info for a certain group.\n   *\n   * @param id BBB ID.\n   * @param groupId Group ID, 0 means that the function will determine the user group.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateMeetingInfo(id, groupId = 0, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this5.getMeetingInfoCacheKey(id, groupId));\n    })();\n  }\n  /**\n   * Invalidate meeting info for all groups.\n   *\n   * @param id BBB ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAllGroupsMeetingInfo(id, siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKeyStartingWith(_this6.getMeetingInfoCacheKeyPrefix(id));\n    })();\n  }\n  /**\n   * Invalidate recordings for a certain group.\n   *\n   * @param id BBB ID.\n   * @param groupId Group ID, 0 means that the function will determine the user group.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateRecordings(id, groupId = 0, siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this7.getRecordingsCacheKey(id, groupId));\n    })();\n  }\n  /**\n   * Invalidate recordings for all groups.\n   *\n   * @param id BBB ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAllGroupsRecordings(id, siteId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKeyStartingWith(_this8.getRecordingsCacheKeyPrefix(id));\n    })();\n  }\n  /**\n   * Returns whether or not the BBB plugin is enabled for a certain site.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with true if enabled, resolved with false or rejected otherwise.\n   * @since 4.0, but the WebServices were backported to the plugin so it can be supported in older versions.\n   */\n  isPluginEnabled(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.wsAvailable('mod_bigbluebuttonbn_meeting_info');\n    })();\n  }\n}\n_class = AddonModBBBService;\n_class.COMPONENT = 'mmaModBigBlueButtonBN';\n_class.ɵfac = function AddonModBBBService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModBBB = makeSingleton(AddonModBBBService);\n/**\n * Recording playback types.\n */\nexport var AddonModBBBRecordingPlaybackTypes;\n(function (AddonModBBBRecordingPlaybackTypes) {\n  AddonModBBBRecordingPlaybackTypes[\"NOTES\"] = \"notes\";\n  AddonModBBBRecordingPlaybackTypes[\"PODCAST\"] = \"podcast\";\n  AddonModBBBRecordingPlaybackTypes[\"PRESENTATION\"] = \"presentation\";\n  AddonModBBBRecordingPlaybackTypes[\"SCREENSHARE\"] = \"screenshare\";\n  AddonModBBBRecordingPlaybackTypes[\"STATISTICS\"] = \"statistics\";\n  AddonModBBBRecordingPlaybackTypes[\"VIDEO\"] = \"video\";\n})(AddonModBBBRecordingPlaybackTypes || (AddonModBBBRecordingPlaybackTypes = {}));","map":{"version":3,"names":["CoreError","CoreWSError","CoreSite","CoreCourseLogHelper","CoreSites","CoreTextUtils","CoreUtils","makeSingleton","Translate","ROOT_CACHE_KEY","AddonModBBBService","endMeeting","id","groupId","siteId","_asyncToGenerator","site","getSite","params","bigbluebuttonbnid","groupid","write","getBBB","courseId","cmId","options","_this","courseids","preSets","_objectSpread","cacheKey","getBBBsCacheKey","updateFrequency","FREQUENCY_RARELY","component","COMPONENT","getReadingStrategyPreSets","readingStrategy","response","read","bbb","bigbluebuttonbns","find","coursemodule","instant","getJoinUrl","_response$warnings","cmid","warnings","length","join_url","getMeetingInfo","_this2","getMeetingInfoCacheKey","getCacheUsingCacheKey","uniqueCacheKey","componentId","updateCache","updatecache","getFromCache","meetingInfo","features","objectToKeyValueMap","undefined","getMeetingInfoCacheKeyPrefix","getRecordings","_this3","_result$warnings","_result$tabledata","getRecordingsCacheKey","result","tabledata","parsedData","parseJSON","data","getRecordingsCacheKeyPrefix","logView","log","invalidateBBBs","_this4","invalidateWsCacheForKey","invalidateMeetingInfo","_this5","invalidateAllGroupsMeetingInfo","_this6","invalidateWsCacheForKeyStartingWith","invalidateRecordings","_this7","invalidateAllGroupsRecordings","_this8","isPluginEnabled","wsAvailable","_class","factory","ɵfac","providedIn","AddonModBBB","AddonModBBBRecordingPlaybackTypes"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/bigbluebuttonbn/services/bigbluebuttonbn.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreWSError } from '@classes/errors/wserror';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseCommonModWSOptions } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreSites, CoreSitesCommonWSOptions } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSExternalFile, CoreWSExternalWarning } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\n\nconst ROOT_CACHE_KEY = 'AddonModBBB:';\n\n/**\n * Service that provides some features for Big Blue Button activity.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModBBBService {\n\n    static readonly COMPONENT = 'mmaModBigBlueButtonBN';\n\n    /**\n     * End a meeting.\n     *\n     * @param id BBB ID.\n     * @param groupId Group ID, 0 means that the function will determine the user group.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async endMeeting(\n        id: number,\n        groupId: number = 0,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonModBBBEndMeetingWSParams = {\n            bigbluebuttonbnid: id,\n            groupid: groupId,\n        };\n\n        await site.write('mod_bigbluebuttonbn_end_meeting', params);\n    }\n\n    /**\n     * Get a BBB activity.\n     *\n     * @param courseId Course ID.\n     * @param cmId Course module ID.\n     * @param options Other options.\n     * @returns Promise resolved when the activity is retrieved.\n     */\n    async getBBB(courseId: number, cmId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModBBBData> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModBBBGetBigBlueButtonBNsByCoursesWSParams = {\n            courseids: [courseId],\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getBBBsCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: AddonModBBBService.COMPONENT,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModBBBGetBigBlueButtonBNsByCoursesWSResponse>(\n            'mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses',\n            params,\n            preSets,\n        );\n\n        const bbb = response.bigbluebuttonbns.find((bbb) => bbb.coursemodule == cmId);\n        if (bbb) {\n            return bbb;\n        }\n\n        throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    }\n\n    /**\n     * Get cache key for get BBB WS call.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getBBBsCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'bbb:' + courseId;\n    }\n\n    /**\n     * Get join URL for a BBB activity.\n     *\n     * @param cmId Course module ID.\n     * @param groupId Group ID, 0 means that the function will determine the user group.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the list of messages.\n     */\n    async getJoinUrl(\n        cmId: number,\n        groupId: number = 0,\n        siteId?: string,\n    ): Promise<string> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonModBBBGetJoinUrlWSParams = {\n            cmid: cmId,\n            groupid: groupId,\n        };\n\n        // Don't use cache.\n        const response = await site.write<AddonModBBBGetJoinUrlWSResponse>(\n            'mod_bigbluebuttonbn_get_join_url',\n            params,\n        );\n\n        if (response.warnings?.length) {\n            throw new CoreWSError(response.warnings[0]);\n        }\n\n        if (!response.join_url) {\n            // Shouldn't happen, if there are no warning the app should always receive the URL.\n            throw new CoreError(\n                Translate.instant('addon.mod_bigbluebuttonbn.view_error_unable_join_studentview_error_unable_join_student'),\n            );\n        }\n\n        return response.join_url;\n    }\n\n    /**\n     * Get meeting info for a BBB activity.\n     *\n     * @param id BBB ID.\n     * @param groupId Group ID, 0 means that the function will determine the user group.\n     * @param options Other options.\n     * @returns Promise resolved with the list of messages.\n     */\n    async getMeetingInfo(\n        id: number,\n        groupId: number = 0,\n        options: AddonModBBBGetMeetingInfoOptions = {},\n    ): Promise<AddonModBBBMeetingInfo> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModBBBMeetingInfoWSParams = {\n            bigbluebuttonbnid: id,\n            groupid: groupId,\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getMeetingInfoCacheKey(id, groupId),\n            getCacheUsingCacheKey: true,\n            uniqueCacheKey: true,\n            component: AddonModBBBService.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n        if (options.updateCache) {\n            params.updatecache = true;\n            preSets.getFromCache = false;\n        }\n\n        const meetingInfo = await site.read<AddonModBBBMeetingInfoWSResponse>(\n            'mod_bigbluebuttonbn_meeting_info',\n            params,\n            preSets,\n        );\n\n        return {\n            ...meetingInfo,\n            features: meetingInfo.features ? CoreUtils.objectToKeyValueMap(meetingInfo.features, 'name', 'isenabled') : undefined,\n        };\n    }\n\n    /**\n     * Get cache key for meeting info WS call.\n     *\n     * @param id BBB ID.\n     * @param groupId Group ID, 0 means that the function will determine the user group.\n     * @returns Cache key.\n     */\n    protected getMeetingInfoCacheKey(id: number, groupId: number = 0): string {\n        return this.getMeetingInfoCacheKeyPrefix(id) + groupId;\n    }\n\n    /**\n     * Get cache key prefix for meeting info WS call.\n     *\n     * @param id BBB ID.\n     * @returns Cache key prefix.\n     */\n    protected getMeetingInfoCacheKeyPrefix(id: number): string {\n        return ROOT_CACHE_KEY + 'meetingInfo:' + id + ':';\n    }\n\n    /**\n     * Get meeting info for a BBB activity.\n     *\n     * @param id BBB ID.\n     * @param groupId Group ID, 0 means that the function will determine the user group.\n     * @param options Other options.\n     * @returns Promise resolved with the list of messages.\n     */\n    async getRecordings(\n        id: number,\n        groupId: number = 0,\n        options: AddonModBBBGetMeetingInfoOptions = {},\n    ): Promise<AddonModBBBRecordingsTableData> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModBBBGetRecordingsWSParams = {\n            bigbluebuttonbnid: id,\n            groupid: groupId,\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getRecordingsCacheKey(id, groupId),\n            component: AddonModBBBService.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const result = await site.read<AddonModBBBGetRecordingsWSResponse>(\n            'mod_bigbluebuttonbn_get_recordings',\n            params,\n            preSets,\n        );\n\n        if (result.warnings?.length) {\n            throw new CoreWSError(result.warnings[0]);\n        } else if (!result.tabledata) {\n            throw new CoreError('Cannot retrieve recordings.');\n        }\n\n        return {\n            ...result.tabledata,\n            parsedData: CoreTextUtils.parseJSON(result.tabledata?.data, []),\n        };\n    }\n\n    /**\n     * Get cache key for get recordings WS call.\n     *\n     * @param id BBB ID.\n     * @param groupId Group ID, 0 means that the function will determine the user group.\n     * @returns Cache key.\n     */\n    protected getRecordingsCacheKey(id: number, groupId: number = 0): string {\n        return this.getRecordingsCacheKeyPrefix(id) + groupId;\n    }\n\n    /**\n     * Get cache key prefix for get recordings WS call.\n     *\n     * @param id BBB ID.\n     * @returns Cache key prefix.\n     */\n    protected getRecordingsCacheKeyPrefix(id: number): string {\n        return ROOT_CACHE_KEY + 'recordings:' + id + ':';\n    }\n\n    /**\n     * Report a BBB as being viewed.\n     *\n     * @param id BBB instance ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logView(id: number, siteId?: string): Promise<void> {\n        const params: AddonModBBBViewBigBlueButtonBNWSParams = {\n            bigbluebuttonbnid: id,\n        };\n\n        await CoreCourseLogHelper.log(\n            'mod_bigbluebuttonbn_view_bigbluebuttonbn',\n            params,\n            AddonModBBBService.COMPONENT,\n            id,\n            siteId,\n        );\n    }\n\n    /**\n     * Invalidate BBBs.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateBBBs(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getBBBsCacheKey(courseId));\n    }\n\n    /**\n     * Invalidate meeting info for a certain group.\n     *\n     * @param id BBB ID.\n     * @param groupId Group ID, 0 means that the function will determine the user group.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateMeetingInfo(id: number, groupId: number = 0, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getMeetingInfoCacheKey(id, groupId));\n    }\n\n    /**\n     * Invalidate meeting info for all groups.\n     *\n     * @param id BBB ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAllGroupsMeetingInfo(id: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKeyStartingWith(this.getMeetingInfoCacheKeyPrefix(id));\n    }\n\n    /**\n     * Invalidate recordings for a certain group.\n     *\n     * @param id BBB ID.\n     * @param groupId Group ID, 0 means that the function will determine the user group.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateRecordings(id: number, groupId: number = 0, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getRecordingsCacheKey(id, groupId));\n    }\n\n    /**\n     * Invalidate recordings for all groups.\n     *\n     * @param id BBB ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAllGroupsRecordings(id: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKeyStartingWith(this.getRecordingsCacheKeyPrefix(id));\n    }\n\n    /**\n     * Returns whether or not the BBB plugin is enabled for a certain site.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with true if enabled, resolved with false or rejected otherwise.\n     * @since 4.0, but the WebServices were backported to the plugin so it can be supported in older versions.\n     */\n    async isPluginEnabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.wsAvailable('mod_bigbluebuttonbn_meeting_info');\n    }\n\n}\n\nexport const AddonModBBB = makeSingleton(AddonModBBBService);\n\n/**\n * Params of mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses WS.\n */\nexport type AddonModBBBGetBigBlueButtonBNsByCoursesWSParams = {\n    courseids?: number[]; // Array of course ids.\n};\n\n/**\n * Data returned by mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses WS.\n */\nexport type AddonModBBBGetBigBlueButtonBNsByCoursesWSResponse = {\n    bigbluebuttonbns: AddonModBBBData[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * BBB data returned by mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses.\n */\nexport type AddonModBBBData = {\n    id: number; // Module id.\n    coursemodule: number; // Course module id.\n    course: number; // Course id.\n    name: string; // Name.\n    intro: string; // Description.\n    meetingid: string; // Meeting id.\n    introformat?: number; // Intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    introfiles: CoreWSExternalFile[];\n    timemodified: number; // Last time the instance was modified.\n    section: number; // Course section id.\n    visible: number; // Module visibility.\n    groupmode: number; // Group mode.\n    groupingid: number; // Grouping id.\n};\n\n/**\n * Params of mod_bigbluebuttonbn_meeting_info WS.\n */\nexport type AddonModBBBMeetingInfoWSParams = {\n    bigbluebuttonbnid: number; // Bigbluebuttonbn instance id.\n    groupid?: number; // Bigbluebuttonbn group id.\n    updatecache?: boolean; // Update cache ?.\n};\n\n/**\n * Data returned by mod_bigbluebuttonbn_meeting_info WS.\n */\nexport type AddonModBBBMeetingInfoWSResponse = {\n    cmid: number; // CM id.\n    userlimit: number; // User limit.\n    bigbluebuttonbnid: string; // Bigbluebuttonbn instance id.\n    meetingid: string; // Meeting id.\n    openingtime?: number; // Opening time.\n    closingtime?: number; // Closing time.\n    statusrunning?: boolean; // Status running.\n    statusclosed?: boolean; // Status closed.\n    statusopen?: boolean; // Status open.\n    statusmessage?: string; // Status message.\n    startedat?: number; // Started at.\n    moderatorcount?: number; // Moderator count.\n    participantcount?: number; // Participant count.\n    moderatorplural?: boolean; // Several moderators ?.\n    participantplural?: boolean; // Several participants ?.\n    canjoin: boolean; // Can join.\n    ismoderator: boolean; // Is moderator.\n    presentations: {\n        url: string; // Presentation URL.\n        iconname: string; // Icon name.\n        icondesc: string; // Icon text.\n        name: string; // Presentation name.\n    }[];\n    joinurl: string; // Join URL.\n    features?: { // Enabled features. @since 4.1.\n        name: string;\n        isenabled: boolean;\n    }[];\n};\n\n/**\n * Meeting info with some calculated data.\n */\nexport type AddonModBBBMeetingInfo = Omit<AddonModBBBMeetingInfoWSResponse, 'features'> & {\n    features?: Record<string, boolean>;\n};\n\n/**\n * Params of mod_bigbluebuttonbn_get_join_url WS.\n */\nexport type AddonModBBBGetJoinUrlWSParams = {\n    cmid: number; // Course module id.\n    groupid?: number; // Bigbluebuttonbn group id.\n};\n\n/**\n * Data returned by mod_bigbluebuttonbn_get_join_url WS.\n */\nexport type AddonModBBBGetJoinUrlWSResponse = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    join_url?: string; // Can join session.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_bigbluebuttonbn_view_bigbluebuttonbn WS.\n */\nexport type AddonModBBBViewBigBlueButtonBNWSParams = {\n    bigbluebuttonbnid: number; // Bigbluebuttonbn instance id.\n};\n\n/**\n * Params of mod_bigbluebuttonbn_end_meeting WS.\n */\nexport type AddonModBBBEndMeetingWSParams = {\n    bigbluebuttonbnid: number; // Bigbluebuttonbn instance id.\n    groupid?: number; // Bigbluebuttonbn group id.\n};\n\n/**\n * Options for getMeetingInfo.\n */\nexport type AddonModBBBGetMeetingInfoOptions = CoreCourseCommonModWSOptions & {\n    updateCache?: boolean;\n};\n\n/**\n * Params of mod_bigbluebuttonbn_get_recordings WS.\n */\nexport type AddonModBBBGetRecordingsWSParams = {\n    bigbluebuttonbnid: number; // Bigbluebuttonbn instance id.\n    tools?: string; // A set of enabled tools.\n    groupid?: number; // Group ID.\n};\n\n/**\n * Data returned by mod_bigbluebuttonbn_get_recordings WS.\n */\nexport type AddonModBBBGetRecordingsWSResponse = {\n    status: boolean; // Whether the fetch was successful.\n    tabledata?: AddonModBBBRecordingsWSTableData;\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Table data returned by mod_bigbluebuttonbn_get_recordings WS.\n */\nexport type AddonModBBBRecordingsWSTableData = {\n    activity: string;\n    ping_interval: number; // eslint-disable-line @typescript-eslint/naming-convention\n    locale: string;\n    profile_features: string[]; // eslint-disable-line @typescript-eslint/naming-convention\n    columns: {\n        key: string;\n        label: string;\n        width: string;\n        type?: string; // Column type.\n        sortable?: boolean; // Whether this column is sortable.\n        allowHTML?: boolean; // Whether this column contains HTML.\n        formatter?: string; // Formatter name.\n    }[];\n    data: string;\n};\n\n/**\n * Recordings table data with some calculated data.\n */\nexport type AddonModBBBRecordingsTableData = AddonModBBBRecordingsWSTableData & {\n    parsedData: Record<string, string|number|boolean>[];\n};\n\n/**\n * Recording playback types.\n */\nexport enum AddonModBBBRecordingPlaybackTypes {\n    NOTES = 'notes',\n    PODCAST = 'podcast',\n    PRESENTATION = 'presentation',\n    SCREENSHARE = 'screenshare',\n    STATISTICS = 'statistics',\n    VIDEO = 'video',\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}