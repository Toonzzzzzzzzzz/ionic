{"ast":null,"code":"var _class;\nimport { RouterModule } from '@angular/router';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { hasSitesGuard } from './guards/has-sites';\nimport { CoreLoginComponentsModule } from './components/components.module';\nimport { CoreLoginHelper } from './services/login-helper';\nimport { CoreLoginForgottenPasswordPage } from '@features/login/pages/forgotten-password/forgotten-password';\nimport { CoreLoginSitePolicyPage } from '@features/login/pages/site-policy/site-policy';\nimport { CoreUserComponentsModule } from '@features/user/components/components.module';\nimport { CoreLoginEmailSignupPage } from '@features/login/pages/email-signup/email-signup';\nimport { CoreLoginSitePage } from '@features/login/pages/site/site';\nimport { CoreLoginSitesPage } from '@features/login/pages/sites/sites';\nimport { CoreLoginChangePasswordPage } from '@features/login/pages/change-password/change-password';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst routes = [{\n  path: '',\n  pathMatch: 'full',\n  redirectTo: 'sites'\n}, {\n  path: 'site',\n  component: CoreLoginSitePage\n}, {\n  path: 'credentials',\n  loadChildren: () => CoreLoginHelper.getCredentialsRouteModule()\n}, {\n  path: 'sites',\n  component: CoreLoginSitesPage,\n  canActivate: [hasSitesGuard]\n}, {\n  path: 'forgottenpassword',\n  component: CoreLoginForgottenPasswordPage\n}, {\n  path: 'changepassword',\n  component: CoreLoginChangePasswordPage\n}, {\n  path: 'sitepolicy',\n  component: CoreLoginSitePolicyPage\n}, {\n  path: 'emailsignup',\n  component: CoreLoginEmailSignupPage\n}, {\n  path: 'reconnect',\n  loadChildren: () => CoreLoginHelper.getReconnectRouteModule()\n}];\nexport class CoreLoginLazyModule {}\n_class = CoreLoginLazyModule;\n_class.ɵfac = function CoreLoginLazyModule_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: _class\n});\n_class.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  imports: [CoreSharedModule, CoreLoginComponentsModule, CoreUserComponentsModule, RouterModule.forChild(routes)]\n});\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(CoreLoginLazyModule, {\n    declarations: [CoreLoginForgottenPasswordPage, CoreLoginSitePolicyPage, CoreLoginSitePage, CoreLoginSitesPage, CoreLoginChangePasswordPage, CoreLoginEmailSignupPage],\n    imports: [CoreSharedModule, CoreLoginComponentsModule, CoreUserComponentsModule, i1.RouterModule]\n  });\n})();","map":{"version":3,"names":["RouterModule","CoreSharedModule","hasSitesGuard","CoreLoginComponentsModule","CoreLoginHelper","CoreLoginForgottenPasswordPage","CoreLoginSitePolicyPage","CoreUserComponentsModule","CoreLoginEmailSignupPage","CoreLoginSitePage","CoreLoginSitesPage","CoreLoginChangePasswordPage","routes","path","pathMatch","redirectTo","component","loadChildren","getCredentialsRouteModule","canActivate","getReconnectRouteModule","CoreLoginLazyModule","forChild","declarations","imports","i1"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/login/login-lazy.module.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { hasSitesGuard } from './guards/has-sites';\nimport { CoreLoginComponentsModule } from './components/components.module';\nimport { CoreLoginHelper } from './services/login-helper';\nimport { CoreLoginForgottenPasswordPage } from '@features/login/pages/forgotten-password/forgotten-password';\nimport { CoreLoginSitePolicyPage } from '@features/login/pages/site-policy/site-policy';\nimport { CoreUserComponentsModule } from '@features/user/components/components.module';\nimport { CoreLoginEmailSignupPage } from '@features/login/pages/email-signup/email-signup';\nimport { CoreLoginSitePage } from '@features/login/pages/site/site';\nimport { CoreLoginSitesPage } from '@features/login/pages/sites/sites';\nimport { CoreLoginChangePasswordPage } from '@features/login/pages/change-password/change-password';\n\nconst routes: Routes = [\n    {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'sites',\n    },\n    {\n        path: 'site',\n        component: CoreLoginSitePage,\n    },\n    {\n        path: 'credentials',\n        loadChildren: () => CoreLoginHelper.getCredentialsRouteModule(),\n    },\n    {\n        path: 'sites',\n        component: CoreLoginSitesPage,\n        canActivate: [hasSitesGuard],\n    },\n    {\n        path: 'forgottenpassword',\n        component: CoreLoginForgottenPasswordPage,\n    },\n    {\n        path: 'changepassword',\n        component: CoreLoginChangePasswordPage,\n    },\n    {\n        path: 'sitepolicy',\n        component: CoreLoginSitePolicyPage,\n    },\n    {\n        path: 'emailsignup',\n        component: CoreLoginEmailSignupPage,\n    },\n    {\n        path: 'reconnect',\n        loadChildren: () => CoreLoginHelper.getReconnectRouteModule(),\n    },\n];\n\n@NgModule({\n    imports: [\n        CoreSharedModule,\n        CoreLoginComponentsModule,\n        CoreUserComponentsModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        CoreLoginForgottenPasswordPage,\n        CoreLoginSitePolicyPage,\n        CoreLoginSitePage,\n        CoreLoginSitesPage,\n        CoreLoginChangePasswordPage,\n        CoreLoginEmailSignupPage,\n    ],\n})\nexport class CoreLoginLazyModule {}\n"],"mappings":";AAeA,SAASA,YAAY,QAAgB,iBAAiB;AAEtD,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,yBAAyB,QAAQ,gCAAgC;AAC1E,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,8BAA8B,QAAQ,6DAA6D;AAC5G,SAASC,uBAAuB,QAAQ,+CAA+C;AACvF,SAASC,wBAAwB,QAAQ,6CAA6C;AACtF,SAASC,wBAAwB,QAAQ,iDAAiD;AAC1F,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE,SAASC,kBAAkB,QAAQ,mCAAmC;AACtE,SAASC,2BAA2B,QAAQ,uDAAuD;;;AAEnG,MAAMC,MAAM,GAAW,CACnB;EACIC,IAAI,EAAE,EAAE;EACRC,SAAS,EAAE,MAAM;EACjBC,UAAU,EAAE;CACf,EACD;EACIF,IAAI,EAAE,MAAM;EACZG,SAAS,EAAEP;CACd,EACD;EACII,IAAI,EAAE,aAAa;EACnBI,YAAY,EAAEA,CAAA,KAAMb,eAAe,CAACc,yBAAyB;CAChE,EACD;EACIL,IAAI,EAAE,OAAO;EACbG,SAAS,EAAEN,kBAAkB;EAC7BS,WAAW,EAAE,CAACjB,aAAa;CAC9B,EACD;EACIW,IAAI,EAAE,mBAAmB;EACzBG,SAAS,EAAEX;CACd,EACD;EACIQ,IAAI,EAAE,gBAAgB;EACtBG,SAAS,EAAEL;CACd,EACD;EACIE,IAAI,EAAE,YAAY;EAClBG,SAAS,EAAEV;CACd,EACD;EACIO,IAAI,EAAE,aAAa;EACnBG,SAAS,EAAER;CACd,EACD;EACIK,IAAI,EAAE,WAAW;EACjBI,YAAY,EAAEA,CAAA,KAAMb,eAAe,CAACgB,uBAAuB;CAC9D,CACJ;AAkBD,OAAM,MAAOC,mBAAmB;SAAnBA,mBAAmB;;mBAAnBA,MAAmB;AAAA;;QAAnBA;AAAmB;;YAdxBpB,gBAAgB,EAChBE,yBAAyB,EACzBI,wBAAwB,EACxBP,YAAY,CAACsB,QAAQ,CAACV,MAAM,CAAC;AAAA;;2EAWxBS,mBAAmB;IAAAE,YAAA,GARxBlB,8BAA8B,EAC9BC,uBAAuB,EACvBG,iBAAiB,EACjBC,kBAAkB,EAClBC,2BAA2B,EAC3BH,wBAAwB;IAAAgB,OAAA,GAXxBvB,gBAAgB,EAChBE,yBAAyB,EACzBI,wBAAwB,EAAAkB,EAAA,CAAAzB,YAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}