{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { ACTIVITY_LOG_TABLE } from './database/log';\nimport { CoreWSError } from '@classes/errors/wserror';\nimport * as i0 from \"@angular/core\";\n/**\n * Helper to manage logging to Moodle.\n */\nexport class CoreCourseLogHelperProvider {\n  /**\n   * Delete the offline saved activity logs.\n   *\n   * @param component Component name.\n   * @param componentId Component ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when deleted, rejected if failure.\n   */\n  deleteLogs(component, componentId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        component,\n        componentid: componentId\n      };\n      yield site.getDb().deleteRecords(ACTIVITY_LOG_TABLE, conditions);\n    })();\n  }\n  /**\n   * Delete a WS based log.\n   *\n   * @param component Component name.\n   * @param componentId Component ID.\n   * @param ws WS name.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when deleted, rejected if failure.\n   */\n  deleteWSLogsByComponent(component, componentId, ws, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        component,\n        componentid: componentId,\n        ws\n      };\n      yield site.getDb().deleteRecords(ACTIVITY_LOG_TABLE, conditions);\n    })();\n  }\n  /**\n   * Delete the offline saved activity logs using call data.\n   *\n   * @param ws WS name.\n   * @param data Data to send to the WS.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when deleted, rejected if failure.\n   */\n  deleteWSLogs(ws, data, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        ws,\n        data: CoreUtils.sortAndStringify(data)\n      };\n      yield site.getDb().deleteRecords(ACTIVITY_LOG_TABLE, conditions);\n    })();\n  }\n  /**\n   * Get all the offline saved activity logs.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the list of offline logs.\n   */\n  getAllLogs(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getAllRecords(ACTIVITY_LOG_TABLE);\n    })();\n  }\n  /**\n   * Get the offline saved activity logs.\n   *\n   * @param component Component name.\n   * @param componentId Component ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the list of offline logs.\n   */\n  getLogs(component, componentId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        component,\n        componentid: componentId\n      };\n      return site.getDb().getRecords(ACTIVITY_LOG_TABLE, conditions);\n    })();\n  }\n  /**\n   * Perform log online. Data will be saved offline for syncing.\n   *\n   * @param ws WS name.\n   * @param data Data to send to the WS.\n   * @param component Component name.\n   * @param componentId Component ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  log(ws, data, component, componentId, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      if (!CoreNetwork.isOnline()) {\n        // App is offline, store the action.\n        return _this.storeOffline(ws, data, component, componentId, site.getId());\n      }\n      try {\n        yield _this.logOnline(ws, data, site.getId());\n      } catch (error) {\n        if (CoreUtils.isWebServiceError(error)) {\n          // The WebService has thrown an error, this means that responses cannot be submitted.\n          throw error;\n        }\n        // Couldn't connect to server, store in offline.\n        return _this.storeOffline(ws, data, component, componentId, site.getId());\n      }\n    })();\n  }\n  /**\n   * Perform the log online.\n   *\n   * @param ws WS name.\n   * @param data Data to send to the WS.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when log is successfully submitted. Rejected with object containing\n   *         the error message (if any) and a boolean indicating if the error was returned by WS.\n   */\n  logOnline(ws, data, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      // Clone to have an unmodified data object.\n      const wsData = Object.assign({}, data);\n      const response = yield site.write(ws, wsData);\n      if (!response.status) {\n        var _response$warnings;\n        // Return the warning. If no warnings (shouldn't happen), create a fake one.\n        const warning = ((_response$warnings = response.warnings) === null || _response$warnings === void 0 ? void 0 : _response$warnings[0]) || {\n          warningcode: 'errorlog',\n          message: 'Error logging data.'\n        };\n        throw new CoreWSError(warning);\n      }\n      // Remove all the logs performed.\n      // TODO: Remove this lines when time is accepted in logs.\n      yield _this2.deleteWSLogs(ws, data, siteId);\n    })();\n  }\n  /**\n   * Perform log online. Data will be saved offline for syncing.\n   *\n   * @param ws WS name.\n   * @param data Data to send to the WS.\n   * @param component Component name.\n   * @param componentId Component ID.\n   * @param name Name of the viewed item.\n   * @param category Category of the viewed item.\n   * @param eventData Data to pass to the analytics event.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   * @deprecated since 4.3. Please use CoreCourseLogHelper.log instead.\n   */\n  logSingle(ws, data, component, componentId, name, category, eventData, siteId) {\n    return this.log(ws, data, component, componentId, siteId);\n  }\n  /**\n   * Perform log online. Data will be saved offline for syncing.\n   *\n   * @param ws WS name.\n   * @param data Data to send to the WS.\n   * @param component Component name.\n   * @param componentId Component ID.\n   * @param category Category of the viewed item.\n   * @param eventData Data to pass to the analytics event.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   * @deprecated since 4.3. Please use CoreCourseLogHelper.log instead.\n   */\n  logList(ws, data, component, componentId, category, eventData, siteId) {\n    return this.log(ws, data, component, componentId, siteId);\n  }\n  /**\n   * Save activity log for offline sync.\n   *\n   * @param ws WS name.\n   * @param data Data to send to the WS.\n   * @param component Component name.\n   * @param componentId Component ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Resolved when done.\n   */\n  storeOffline(ws, data, component, componentId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const log = {\n        component,\n        componentid: componentId,\n        ws,\n        data: CoreUtils.sortAndStringify(data),\n        time: CoreTimeUtils.timestamp()\n      };\n      yield site.getDb().insertRecord(ACTIVITY_LOG_TABLE, log);\n    })();\n  }\n  /**\n   * Sync all the offline saved activity logs.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  syncSite(siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      siteId = site.getId();\n      const logs = yield _this3.getAllLogs(siteId);\n      const unique = [];\n      // TODO: When time is accepted on log, do not discard same logs.\n      logs.forEach(log => {\n        // Just perform unique syncs.\n        const found = unique.find(doneLog => log.component == doneLog.component && log.componentid == doneLog.componentid && log.ws == doneLog.ws && log.data == doneLog.data);\n        if (!found) {\n          unique.push(log);\n        }\n      });\n      return _this3.syncLogs(unique, siteId);\n    })();\n  }\n  /**\n   * Sync the offline saved activity logs.\n   *\n   * @param component Component name.\n   * @param componentId Component ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  syncActivity(component, componentId, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      siteId = site.getId();\n      const logs = yield _this4.getLogs(component, componentId, siteId);\n      const unique = [];\n      // TODO: When time is accepted on log, do not discard same logs.\n      logs.forEach(log => {\n        // Just perform unique syncs.\n        const found = unique.find(doneLog => log.ws == doneLog.ws && log.data == doneLog.data);\n        if (!found) {\n          unique.push(log);\n        }\n      });\n      return _this4.syncLogs(unique, siteId);\n    })();\n  }\n  /**\n   * Sync and delete given logs.\n   *\n   * @param logs Array of log objects.\n   * @param siteId Site Id.\n   * @returns Promise resolved when done.\n   */\n  syncLogs(logs, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      yield Promise.all(logs.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (log) {\n          const data = CoreTextUtils.parseJSON(log.data || '{}', {});\n          try {\n            yield _this5.logOnline(log.ws, data, siteId);\n          } catch (error) {\n            if (CoreUtils.isWebServiceError(error)) {\n              // The WebService has thrown an error, this means that responses cannot be submitted.\n              yield CoreUtils.ignoreErrors(_this5.deleteWSLogs(log.ws, data, siteId));\n            }\n            throw error;\n          }\n          yield _this5.deleteWSLogsByComponent(log.component, log.componentid, log.ws, siteId);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n}\n_class = CoreCourseLogHelperProvider;\n_class.ɵfac = function CoreCourseLogHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreCourseLogHelper = makeSingleton(CoreCourseLogHelperProvider);","map":{"version":3,"names":["CoreNetwork","CoreSites","CoreTextUtils","CoreTimeUtils","CoreUtils","makeSingleton","ACTIVITY_LOG_TABLE","CoreWSError","CoreCourseLogHelperProvider","deleteLogs","component","componentId","siteId","_asyncToGenerator","site","getSite","conditions","componentid","getDb","deleteRecords","deleteWSLogsByComponent","ws","deleteWSLogs","data","sortAndStringify","getAllLogs","getAllRecords","getLogs","getRecords","log","_this","isOnline","storeOffline","getId","logOnline","error","isWebServiceError","_this2","wsData","Object","assign","response","write","status","_response$warnings","warning","warnings","warningcode","message","logSingle","name","category","eventData","logList","time","timestamp","insertRecord","syncSite","_this3","logs","unique","forEach","found","find","doneLog","push","syncLogs","syncActivity","_this4","_this5","Promise","all","map","_ref","parseJSON","ignoreErrors","_x","apply","arguments","factory","ɵfac","providedIn","CoreCourseLogHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/services/log-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { ACTIVITY_LOG_TABLE, CoreCourseActivityLogDBRecord } from './database/log';\nimport { CoreStatusWithWarningsWSResponse } from '@services/ws';\nimport { CoreWSError } from '@classes/errors/wserror';\n\n/**\n * Helper to manage logging to Moodle.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreCourseLogHelperProvider {\n\n    /**\n     * Delete the offline saved activity logs.\n     *\n     * @param component Component name.\n     * @param componentId Component ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when deleted, rejected if failure.\n     */\n    protected async deleteLogs(component: string, componentId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const conditions: Partial<CoreCourseActivityLogDBRecord> = {\n            component,\n            componentid: componentId,\n        };\n\n        await site.getDb().deleteRecords(ACTIVITY_LOG_TABLE, conditions);\n    }\n\n    /**\n     * Delete a WS based log.\n     *\n     * @param component Component name.\n     * @param componentId Component ID.\n     * @param ws WS name.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when deleted, rejected if failure.\n     */\n    protected async deleteWSLogsByComponent(component: string, componentId: number, ws: string, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const conditions: Partial<CoreCourseActivityLogDBRecord> = {\n            component,\n            componentid: componentId,\n            ws,\n        };\n\n        await site.getDb().deleteRecords(ACTIVITY_LOG_TABLE, conditions);\n    }\n\n    /**\n     * Delete the offline saved activity logs using call data.\n     *\n     * @param ws WS name.\n     * @param data Data to send to the WS.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when deleted, rejected if failure.\n     */\n    protected async deleteWSLogs(ws: string, data: Record<string, unknown>, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const conditions: Partial<CoreCourseActivityLogDBRecord> = {\n            ws,\n            data: CoreUtils.sortAndStringify(data),\n        };\n\n        await site.getDb().deleteRecords(ACTIVITY_LOG_TABLE, conditions);\n    }\n\n    /**\n     * Get all the offline saved activity logs.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the list of offline logs.\n     */\n    protected async getAllLogs(siteId?: string): Promise<CoreCourseActivityLogDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getAllRecords<CoreCourseActivityLogDBRecord>(ACTIVITY_LOG_TABLE);\n    }\n\n    /**\n     * Get the offline saved activity logs.\n     *\n     * @param component Component name.\n     * @param componentId Component ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the list of offline logs.\n     */\n    protected async getLogs(component: string, componentId: number, siteId?: string): Promise<CoreCourseActivityLogDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        const conditions: Partial<CoreCourseActivityLogDBRecord> = {\n            component,\n            componentid: componentId,\n        };\n\n        return site.getDb().getRecords<CoreCourseActivityLogDBRecord>(ACTIVITY_LOG_TABLE, conditions);\n    }\n\n    /**\n     * Perform log online. Data will be saved offline for syncing.\n     *\n     * @param ws WS name.\n     * @param data Data to send to the WS.\n     * @param component Component name.\n     * @param componentId Component ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async log(ws: string, data: Record<string, unknown>, component: string, componentId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        if (!CoreNetwork.isOnline()) {\n            // App is offline, store the action.\n            return this.storeOffline(ws, data, component, componentId, site.getId());\n        }\n\n        try {\n            await this.logOnline(ws, data, site.getId());\n        } catch (error) {\n            if (CoreUtils.isWebServiceError(error)) {\n                // The WebService has thrown an error, this means that responses cannot be submitted.\n                throw error;\n            }\n\n            // Couldn't connect to server, store in offline.\n            return this.storeOffline(ws, data, component, componentId, site.getId());\n        }\n    }\n\n    /**\n     * Perform the log online.\n     *\n     * @param ws WS name.\n     * @param data Data to send to the WS.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when log is successfully submitted. Rejected with object containing\n     *         the error message (if any) and a boolean indicating if the error was returned by WS.\n     */\n    protected async logOnline<T extends CoreStatusWithWarningsWSResponse>(\n        ws: string,\n        data: Record<string, unknown>,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        // Clone to have an unmodified data object.\n        const wsData = Object.assign({}, data);\n\n        const response = await site.write<T>(ws, wsData);\n\n        if (!response.status) {\n            // Return the warning. If no warnings (shouldn't happen), create a fake one.\n            const warning = response.warnings?.[0] || {\n                warningcode: 'errorlog',\n                message: 'Error logging data.',\n            };\n\n            throw new CoreWSError(warning);\n        }\n\n        // Remove all the logs performed.\n        // TODO: Remove this lines when time is accepted in logs.\n        await this.deleteWSLogs(ws, data, siteId);\n    }\n\n    /**\n     * Perform log online. Data will be saved offline for syncing.\n     *\n     * @param ws WS name.\n     * @param data Data to send to the WS.\n     * @param component Component name.\n     * @param componentId Component ID.\n     * @param name Name of the viewed item.\n     * @param category Category of the viewed item.\n     * @param eventData Data to pass to the analytics event.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     * @deprecated since 4.3. Please use CoreCourseLogHelper.log instead.\n     */\n    logSingle(\n        ws: string,\n        data: Record<string, unknown>,\n        component: string,\n        componentId: number,\n        name?: string,\n        category?: string,\n        eventData?: Record<string, string | number | boolean | undefined>,\n        siteId?: string,\n    ): Promise<void> {\n        return this.log(ws, data, component, componentId, siteId);\n    }\n\n    /**\n     * Perform log online. Data will be saved offline for syncing.\n     *\n     * @param ws WS name.\n     * @param data Data to send to the WS.\n     * @param component Component name.\n     * @param componentId Component ID.\n     * @param category Category of the viewed item.\n     * @param eventData Data to pass to the analytics event.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     * @deprecated since 4.3. Please use CoreCourseLogHelper.log instead.\n     */\n    logList(\n        ws: string,\n        data: Record<string, unknown>,\n        component: string,\n        componentId: number,\n        category: string,\n        eventData?: Record<string, string | number | boolean | undefined>,\n        siteId?: string,\n    ): Promise<void> {\n        return this.log(ws, data, component, componentId, siteId);\n    }\n\n    /**\n     * Save activity log for offline sync.\n     *\n     * @param ws WS name.\n     * @param data Data to send to the WS.\n     * @param component Component name.\n     * @param componentId Component ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Resolved when done.\n     */\n    protected async storeOffline(\n        ws: string,\n        data: Record<string, unknown>,\n        component: string,\n        componentId: number,\n        siteId?: string,\n    ): Promise<void> {\n\n        const site = await CoreSites.getSite(siteId);\n\n        const log: CoreCourseActivityLogDBRecord = {\n            component,\n            componentid: componentId,\n            ws,\n            data: CoreUtils.sortAndStringify(data),\n            time: CoreTimeUtils.timestamp(),\n        };\n\n        await site.getDb().insertRecord(ACTIVITY_LOG_TABLE, log);\n    }\n\n    /**\n     * Sync all the offline saved activity logs.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async syncSite(siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        siteId = site.getId();\n\n        const logs = await this.getAllLogs(siteId);\n\n        const unique: CoreCourseActivityLogDBRecord[] = [];\n\n        // TODO: When time is accepted on log, do not discard same logs.\n        logs.forEach((log) => {\n            // Just perform unique syncs.\n            const found = unique.find((doneLog) => log.component == doneLog.component && log.componentid == doneLog.componentid &&\n                log.ws == doneLog.ws && log.data == doneLog.data);\n\n            if (!found) {\n                unique.push(log);\n            }\n        });\n\n        return this.syncLogs(unique, siteId);\n    }\n\n    /**\n     * Sync the offline saved activity logs.\n     *\n     * @param component Component name.\n     * @param componentId Component ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async syncActivity(component: string, componentId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        siteId = site.getId();\n\n        const logs = await this.getLogs(component, componentId, siteId);\n\n        const unique: CoreCourseActivityLogDBRecord[] = [];\n\n        // TODO: When time is accepted on log, do not discard same logs.\n        logs.forEach((log) => {\n            // Just perform unique syncs.\n            const found = unique.find((doneLog) => log.ws == doneLog.ws && log.data == doneLog.data);\n\n            if (!found) {\n                unique.push(log);\n            }\n        });\n\n        return this.syncLogs(unique, siteId);\n    }\n\n    /**\n     * Sync and delete given logs.\n     *\n     * @param logs Array of log objects.\n     * @param siteId Site Id.\n     * @returns Promise resolved when done.\n     */\n    protected async syncLogs(logs: CoreCourseActivityLogDBRecord[], siteId: string): Promise<void> {\n        await Promise.all(logs.map(async (log) => {\n            const data = CoreTextUtils.parseJSON<Record<string, unknown>>(log.data || '{}', {});\n\n            try {\n                await this.logOnline(log.ws, data, siteId);\n            } catch (error) {\n                if (CoreUtils.isWebServiceError(error)) {\n                    // The WebService has thrown an error, this means that responses cannot be submitted.\n                    await CoreUtils.ignoreErrors(this.deleteWSLogs(log.ws, data, siteId));\n                }\n\n                throw error;\n            }\n\n            await this.deleteWSLogsByComponent(log.component, log.componentid, log.ws, siteId);\n        }));\n    }\n\n}\n\nexport const CoreCourseLogHelper = makeSingleton(CoreCourseLogHelperProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}