{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport { CoreComments, CoreCommentsProvider } from '../../services/comments';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreUtils } from '@services/utils/utils';\nimport * as i0 from \"@angular/core\";\nconst _c0 = function (a0) {\n  return {\n    \"$a\": a0\n  };\n};\nfunction CoreCommentsCommentsComponent_ng_container_0_core_loading_1_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function CoreCommentsCommentsComponent_ng_container_0_core_loading_1_button_1_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r5.openComments($event));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, \"core.comments.commentscount\", i0.ɵɵpureFunction1(4, _c0, ctx_r3.commentsCount)), \" \");\n  }\n}\nfunction CoreCommentsCommentsComponent_ng_container_0_core_loading_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"core.comments.commentsnotworking\"), \" \");\n  }\n}\nfunction CoreCommentsCommentsComponent_ng_container_0_core_loading_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"core-loading\", 3);\n    i0.ɵɵtemplate(1, CoreCommentsCommentsComponent_ng_container_0_core_loading_1_button_1_Template, 3, 6, \"button\", 4);\n    i0.ɵɵtemplate(2, CoreCommentsCommentsComponent_ng_container_0_core_loading_1_div_2_Template, 3, 3, \"div\", 0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"hideUntil\", ctx_r1.commentsLoaded)(\"fullscreen\", false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.countError);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.countError);\n  }\n}\nfunction CoreCommentsCommentsComponent_ng_container_0_ion_item_2_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, \"core.comments.commentscount\", i0.ɵɵpureFunction1(4, _c0, ctx_r7.commentsCount)), \" \");\n  }\n}\nfunction CoreCommentsCommentsComponent_ng_container_0_ion_item_2_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"core.comments.commentsnotworking\"), \" \");\n  }\n}\nfunction CoreCommentsCommentsComponent_ng_container_0_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 6);\n    i0.ɵɵlistener(\"click\", function CoreCommentsCommentsComponent_ng_container_0_ion_item_2_Template_ion_item_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.openComments($event));\n    });\n    i0.ɵɵelementStart(1, \"ion-label\")(2, \"core-loading\", 3);\n    i0.ɵɵtemplate(3, CoreCommentsCommentsComponent_ng_container_0_ion_item_2_p_3_Template, 3, 6, \"p\", 7);\n    i0.ɵɵtemplate(4, CoreCommentsCommentsComponent_ng_container_0_ion_item_2_p_4_Template, 3, 3, \"p\", 0);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"detail\", !ctx_r2.countError && ctx_r2.commentsLoaded)(\"disabled\", ctx_r2.countError);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hideUntil\", ctx_r2.commentsLoaded)(\"fullscreen\", false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.countError);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.countError);\n  }\n}\nfunction CoreCommentsCommentsComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CoreCommentsCommentsComponent_ng_container_0_core_loading_1_Template, 3, 4, \"core-loading\", 1);\n    i0.ɵɵtemplate(2, CoreCommentsCommentsComponent_ng_container_0_ion_item_2_Template, 5, 6, \"ion-item\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.showItem);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showItem);\n  }\n}\n/**\n * Component that displays the count of comments.\n */\nexport class CoreCommentsCommentsComponent {\n  constructor() {\n    this.area = '';\n    this.showItem = false; // Show button as an item.\n    this.commentsLoaded = false;\n    this.commentsCount = '';\n    this.countError = false;\n    this.disabled = false;\n    this.onLoading = new EventEmitter();\n    this.disabled = CoreComments.areCommentsDisabledInSite();\n    // Update visibility if current site info is updated.\n    this.updateSiteObserver = CoreEvents.on(CoreEvents.SITE_UPDATED, () => {\n      const wasDisabled = this.disabled;\n      this.disabled = CoreComments.areCommentsDisabledInSite();\n      if (wasDisabled && !this.disabled) {\n        this.fetchData();\n      }\n    }, CoreSites.getCurrentSiteId());\n    // Refresh comments if event received.\n    this.refreshCommentsObserver = CoreEvents.on(CoreCommentsProvider.REFRESH_COMMENTS_EVENT, data => {\n      // Verify these comments need to be updated.\n      if (this.undefinedOrEqual(data, 'contextLevel') && this.undefinedOrEqual(data, 'instanceId') && this.undefinedOrEqual(data, 'component') && this.undefinedOrEqual(data, 'itemId') && this.undefinedOrEqual(data, 'area')) {\n        CoreUtils.ignoreErrors(this.doRefresh());\n      }\n    }, CoreSites.getCurrentSiteId());\n    // Refresh comments count if event received.\n    this.commentsCountObserver = CoreEvents.on(CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT, data => {\n      // Verify these comments need to be updated.\n      if (!this.commentsCount.endsWith('+') && this.undefinedOrEqual(data, 'contextLevel') && this.undefinedOrEqual(data, 'instanceId') && this.undefinedOrEqual(data, 'component') && this.undefinedOrEqual(data, 'itemId') && this.undefinedOrEqual(data, 'area') && !this.countError) {\n        let newNumber = parseInt(this.commentsCount, 10) + data.countChange;\n        newNumber = newNumber >= 0 ? newNumber : 0;\n        // Parse and unparse string.\n        this.commentsCount = newNumber + '';\n      }\n    }, CoreSites.getCurrentSiteId());\n  }\n  /**\n   * View loaded.\n   */\n  ngOnInit() {\n    this.fetchData();\n  }\n  /**\n   * Listen to changes.\n   */\n  ngOnChanges(changes) {\n    // If something change, update the fields.\n    if (changes && this.commentsLoaded) {\n      this.fetchData();\n    }\n  }\n  /**\n   * Fetch comments data.\n   */\n  fetchData() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.disabled) {\n        return;\n      }\n      _this.commentsLoaded = false;\n      _this.onLoading.emit(true);\n      const commentsCount = yield CoreComments.getCommentsCount(_this.contextLevel, _this.instanceId, _this.component, _this.itemId, _this.area);\n      _this.commentsCount = commentsCount;\n      _this.countError = parseInt(_this.commentsCount, 10) < 0;\n      _this.commentsLoaded = true;\n      _this.onLoading.emit(false);\n    })();\n  }\n  /**\n   * Refresh comments.\n   *\n   * @returns Promise resolved when done.\n   */\n  doRefresh() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.invalidateComments();\n      yield _this2.fetchData();\n    })();\n  }\n  /**\n   * Invalidate comments data.\n   *\n   * @returns Promise resolved when done.\n   */\n  invalidateComments() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreComments.invalidateCommentsData(_this3.contextLevel, _this3.instanceId, _this3.component, _this3.itemId, _this3.area);\n    })();\n  }\n  /**\n   * Opens the comments page.\n   */\n  openComments(e) {\n    if (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (this.disabled || this.countError) {\n      return;\n    }\n    CoreNavigator.navigateToSitePath('comments/' + this.contextLevel + '/' + this.instanceId + '/' + this.component + '/' + this.itemId + '/', {\n      params: {\n        area: this.area,\n        title: this.title,\n        courseId: this.courseId\n      }\n    });\n  }\n  /**\n   * Component destroyed.\n   */\n  ngOnDestroy() {\n    var _this$updateSiteObser, _this$refreshComments, _this$commentsCountOb;\n    (_this$updateSiteObser = this.updateSiteObserver) === null || _this$updateSiteObser === void 0 || _this$updateSiteObser.off();\n    (_this$refreshComments = this.refreshCommentsObserver) === null || _this$refreshComments === void 0 || _this$refreshComments.off();\n    (_this$commentsCountOb = this.commentsCountObserver) === null || _this$commentsCountOb === void 0 || _this$commentsCountOb.off();\n  }\n  /**\n   * Check if a certain value in data is undefined or equal to this instance value.\n   *\n   * @param data Data object.\n   * @param name Name of the property to check.\n   * @returns Whether it's undefined or equal.\n   */\n  undefinedOrEqual(data, name) {\n    return data[name] === undefined || data[name] == this[name];\n  }\n}\n_class = CoreCommentsCommentsComponent;\n_class.ɵfac = function CoreCommentsCommentsComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-comments\"]],\n  inputs: {\n    contextLevel: \"contextLevel\",\n    instanceId: \"instanceId\",\n    component: \"component\",\n    itemId: \"itemId\",\n    area: \"area\",\n    title: \"title\",\n    courseId: \"courseId\",\n    showItem: \"showItem\"\n  },\n  outputs: {\n    onLoading: \"onLoading\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [3, \"hideUntil\", \"fullscreen\", 4, \"ngIf\"], [\"button\", \"\", 3, \"detail\", \"disabled\", \"click\", 4, \"ngIf\"], [3, \"hideUntil\", \"fullscreen\"], [\"class\", \"as-link\", 3, \"click\", 4, \"ngIf\"], [1, \"as-link\", 3, \"click\"], [\"button\", \"\", 3, \"detail\", \"disabled\", \"click\"], [\"class\", \"item-heading\", 4, \"ngIf\"], [1, \"item-heading\"]],\n  template: function CoreCommentsCommentsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CoreCommentsCommentsComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.disabled);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"names":["EventEmitter","CoreComments","CoreCommentsProvider","CoreEvents","CoreSites","CoreNavigator","CoreUtils","i0","ɵɵelementStart","ɵɵlistener","CoreCommentsCommentsComponent_ng_container_0_core_loading_1_button_1_Template_button_click_0_listener","$event","ɵɵrestoreView","_r6","ctx_r5","ɵɵnextContext","ɵɵresetView","openComments","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind2","ɵɵpureFunction1","_c0","ctx_r3","commentsCount","ɵɵpipeBind1","ɵɵtemplate","CoreCommentsCommentsComponent_ng_container_0_core_loading_1_button_1_Template","CoreCommentsCommentsComponent_ng_container_0_core_loading_1_div_2_Template","ɵɵproperty","ctx_r1","commentsLoaded","countError","ctx_r7","CoreCommentsCommentsComponent_ng_container_0_ion_item_2_Template_ion_item_click_0_listener","_r10","ctx_r9","CoreCommentsCommentsComponent_ng_container_0_ion_item_2_p_3_Template","CoreCommentsCommentsComponent_ng_container_0_ion_item_2_p_4_Template","ctx_r2","ɵɵelementContainerStart","CoreCommentsCommentsComponent_ng_container_0_core_loading_1_Template","CoreCommentsCommentsComponent_ng_container_0_ion_item_2_Template","ɵɵelementContainerEnd","ctx_r0","showItem","CoreCommentsCommentsComponent","constructor","area","disabled","onLoading","areCommentsDisabledInSite","updateSiteObserver","on","SITE_UPDATED","wasDisabled","fetchData","getCurrentSiteId","refreshCommentsObserver","REFRESH_COMMENTS_EVENT","data","undefinedOrEqual","ignoreErrors","doRefresh","commentsCountObserver","COMMENTS_COUNT_CHANGED_EVENT","endsWith","newNumber","parseInt","countChange","ngOnInit","ngOnChanges","changes","_this","_asyncToGenerator","emit","getCommentsCount","contextLevel","instanceId","component","itemId","_this2","invalidateComments","_this3","invalidateCommentsData","e","preventDefault","stopPropagation","navigateToSitePath","params","title","courseId","ngOnDestroy","_this$updateSiteObser","_this$refreshComments","_this$commentsCountOb","off","name","undefined","selectors","inputs","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","CoreCommentsCommentsComponent_Template","rf","ctx","CoreCommentsCommentsComponent_ng_container_0_Template"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/comments/components/comments/comments.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/comments/components/comments/core-comments.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChange, OnInit } from '@angular/core';\nimport {\n    CoreComments,\n    CoreCommentsProvider,\n} from '../../services/comments';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreUtils } from '@services/utils/utils';\nimport { ContextLevel } from '@/core/constants';\n\n/**\n * Component that displays the count of comments.\n */\n@Component({\n    selector: 'core-comments',\n    templateUrl: 'core-comments.html',\n})\nexport class CoreCommentsCommentsComponent implements OnInit, OnChanges, OnDestroy {\n\n    @Input() contextLevel!: ContextLevel;\n    @Input() instanceId!: number;\n    @Input() component!: string;\n    @Input() itemId!: number;\n    @Input() area = '';\n    @Input() title?: string;\n    @Output() onLoading: EventEmitter<boolean>; // Event that indicates whether the component is loading data.\n    @Input() courseId?: number; // Course ID the comments belong to. It can be used to improve performance with filters.\n    @Input() showItem = false; // Show button as an item.\n\n    commentsLoaded = false;\n    commentsCount = '';\n    countError = false;\n    disabled = false;\n\n    protected updateSiteObserver?: CoreEventObserver;\n    protected refreshCommentsObserver?: CoreEventObserver;\n    protected commentsCountObserver?: CoreEventObserver;\n\n    constructor() {\n\n        this.onLoading = new EventEmitter<boolean>();\n\n        this.disabled = CoreComments.areCommentsDisabledInSite();\n\n        // Update visibility if current site info is updated.\n        this.updateSiteObserver = CoreEvents.on(CoreEvents.SITE_UPDATED, () => {\n            const wasDisabled = this.disabled;\n\n            this.disabled = CoreComments.areCommentsDisabledInSite();\n\n            if (wasDisabled && !this.disabled) {\n                this.fetchData();\n            }\n        }, CoreSites.getCurrentSiteId());\n\n        // Refresh comments if event received.\n        this.refreshCommentsObserver = CoreEvents.on(\n            CoreCommentsProvider.REFRESH_COMMENTS_EVENT,\n            (data) => {\n                // Verify these comments need to be updated.\n                if (this.undefinedOrEqual(data, 'contextLevel') && this.undefinedOrEqual(data, 'instanceId') &&\n                    this.undefinedOrEqual(data, 'component') && this.undefinedOrEqual(data, 'itemId') &&\n                    this.undefinedOrEqual(data, 'area')) {\n\n                    CoreUtils.ignoreErrors(this.doRefresh());\n                }\n            },\n            CoreSites.getCurrentSiteId(),\n        );\n\n        // Refresh comments count if event received.\n        this.commentsCountObserver = CoreEvents.on(\n            CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT,\n            (data) => {\n            // Verify these comments need to be updated.\n                if (!this.commentsCount.endsWith('+') && this.undefinedOrEqual(data, 'contextLevel') &&\n                    this.undefinedOrEqual(data, 'instanceId') && this.undefinedOrEqual(data, 'component') &&\n                    this.undefinedOrEqual(data, 'itemId') && this.undefinedOrEqual(data, 'area') && !this.countError) {\n                    let newNumber = parseInt(this.commentsCount, 10) + data.countChange;\n                    newNumber = newNumber >= 0 ? newNumber : 0;\n\n                    // Parse and unparse string.\n                    this.commentsCount = newNumber + '';\n                }\n            },\n            CoreSites.getCurrentSiteId(),\n        );\n    }\n\n    /**\n     * View loaded.\n     */\n    ngOnInit(): void {\n        this.fetchData();\n    }\n\n    /**\n     * Listen to changes.\n     */\n    ngOnChanges(changes: { [name: string]: SimpleChange }): void {\n        // If something change, update the fields.\n        if (changes && this.commentsLoaded) {\n            this.fetchData();\n        }\n    }\n\n    /**\n     * Fetch comments data.\n     */\n    async fetchData(): Promise<void> {\n        if (this.disabled) {\n            return;\n        }\n\n        this.commentsLoaded = false;\n        this.onLoading.emit(true);\n\n        const commentsCount = await CoreComments.getCommentsCount(\n            this.contextLevel,\n            this.instanceId,\n            this.component,\n            this.itemId,\n            this.area,\n        );\n        this.commentsCount = commentsCount;\n        this.countError = parseInt(this.commentsCount, 10) < 0;\n        this.commentsLoaded = true;\n        this.onLoading.emit(false);\n    }\n\n    /**\n     * Refresh comments.\n     *\n     * @returns Promise resolved when done.\n     */\n    async doRefresh(): Promise<void> {\n        await this.invalidateComments();\n\n        await this.fetchData();\n    }\n\n    /**\n     * Invalidate comments data.\n     *\n     * @returns Promise resolved when done.\n     */\n    async invalidateComments(): Promise<void> {\n        await CoreComments.invalidateCommentsData(\n            this.contextLevel,\n            this.instanceId,\n            this.component,\n            this.itemId,\n            this.area,\n        );\n    }\n\n    /**\n     * Opens the comments page.\n     */\n    openComments(e?: Event): void {\n        if (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        if (this.disabled || this.countError) {\n            return;\n        }\n\n        CoreNavigator.navigateToSitePath(\n            'comments/' + this.contextLevel + '/' + this.instanceId + '/' + this.component + '/' + this.itemId + '/',\n            {\n                params: {\n                    area: this.area,\n                    title: this.title,\n                    courseId: this.courseId,\n                },\n            },\n        );\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.updateSiteObserver?.off();\n        this.refreshCommentsObserver?.off();\n        this.commentsCountObserver?.off();\n    }\n\n    /**\n     * Check if a certain value in data is undefined or equal to this instance value.\n     *\n     * @param data Data object.\n     * @param name Name of the property to check.\n     * @returns Whether it's undefined or equal.\n     */\n    protected undefinedOrEqual(data: Record<string, unknown>, name: string): boolean {\n        return data[name] === undefined || data[name] == this[name];\n    }\n\n}\n","<ng-container *ngIf=\"!disabled\">\n    <core-loading *ngIf=\"!showItem\" [hideUntil]=\"commentsLoaded\" [fullscreen]=\"false\">\n        <button *ngIf=\"!countError\" (click)=\"openComments($event)\" class=\"as-link\">\n            {{ 'core.comments.commentscount' | translate : {'$a': commentsCount} }}\n        </button>\n        <div *ngIf=\"countError\">\n            {{ 'core.comments.commentsnotworking' | translate }}\n        </div>\n    </core-loading>\n    <ion-item *ngIf=\"showItem\" button [detail]=\"!countError && commentsLoaded\" (click)=\"openComments($event)\" [disabled]=\"countError\">\n        <ion-label>\n            <core-loading [hideUntil]=\"commentsLoaded\" [fullscreen]=\"false\">\n                <p *ngIf=\"!countError\" class=\"item-heading\">\n                    {{ 'core.comments.commentscount' | translate : {'$a': commentsCount} }}\n                </p>\n                <p *ngIf=\"countError\">\n                    {{ 'core.comments.commentsnotworking' | translate }}\n                </p>\n            </core-loading>\n        </ion-label>\n    </ion-item>\n</ng-container>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}