{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { FormControl } from '@angular/forms';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreNetworkError } from '@classes/errors/network-error';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreForms } from '@singletons/form';\nimport { AddonModGlossary, AddonModGlossaryProvider } from '../../services/glossary';\nimport { AddonModGlossaryHelper } from '../../services/glossary-helper';\nimport { AddonModGlossaryOffline } from '../../services/glossary-offline';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@components/split-view/split-view\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../../../core/components/attachments/attachments\";\nimport * as i5 from \"../../../../../core/components/loading/loading\";\nimport * as i6 from \"../../../../../core/directives/auto-rows\";\nimport * as i7 from \"../../../../../core/directives/format-text\";\nimport * as i8 from \"../../../../../core/directives/content\";\nimport * as i9 from \"../../../../../core/directives/update-non-reactive-attributes\";\nimport * as i10 from \"@angular/forms\";\nimport * as i11 from \"@ionic/angular\";\nimport * as i12 from \"../../../../../core/features/editor/components/rich-text-editor/rich-text-editor\";\nimport * as i13 from \"@ngx-translate/core\";\nconst _c0 = [\"editFormEl\"];\nfunction AddonModGlossaryEditPage_h1_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵelement(1, \"core-format-text\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"text\", ctx_r0.glossary.name)(\"contextInstanceId\", ctx_r0.cmId)(\"courseId\", ctx_r0.courseId);\n  }\n}\nfunction AddonModGlossaryEditPage_form_9_ion_item_14_ion_select_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r7.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", category_r7.name, \" \");\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    header: a0\n  };\n};\nfunction AddonModGlossaryEditPage_form_9_ion_item_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ion-select\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function AddonModGlossaryEditPage_form_9_ion_item_14_Template_ion_select_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.data.categories = $event);\n    });\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵpipe(7, \"translate\");\n    i0.ɵɵtemplate(8, AddonModGlossaryEditPage_form_9_ion_item_14_ion_select_option_8_Template, 2, 2, \"ion-select-option\", 12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 6, \"addon.mod_glossary.categories\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.data.categories)(\"placeholder\", i0.ɵɵpipeBind1(5, 8, \"addon.mod_glossary.categories\"))(\"cancelText\", i0.ɵɵpipeBind1(6, 10, \"core.cancel\"))(\"interfaceOptions\", i0.ɵɵpureFunction1(14, _c1, i0.ɵɵpipeBind1(7, 12, \"addon.mod_glossary.categories\")));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.categories);\n  }\n}\nfunction AddonModGlossaryEditPage_form_9_ion_item_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ion-textarea\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function AddonModGlossaryEditPage_form_9_ion_item_15_Template_ion_textarea_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.data.aliases = $event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 3, \"addon.mod_glossary.aliases\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r4.data.aliases)(\"core-auto-rows\", ctx_r4.data.aliases);\n  }\n}\nfunction AddonModGlossaryEditPage_form_9_ng_container_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"ion-item-divider\")(2, \"ion-label\")(3, \"h2\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(6, \"ion-item\", 15)(7, \"ion-label\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"ion-toggle\", 16);\n    i0.ɵɵlistener(\"ngModelChange\", function AddonModGlossaryEditPage_form_9_ng_container_22_Template_ion_toggle_ngModelChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.data.usedynalink = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"ion-item\", 15)(12, \"ion-label\");\n    i0.ɵɵtext(13);\n    i0.ɵɵpipe(14, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"ion-toggle\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function AddonModGlossaryEditPage_form_9_ng_container_22_Template_ion_toggle_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.data.casesensitive = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"ion-item\", 15)(17, \"ion-label\");\n    i0.ɵɵtext(18);\n    i0.ɵɵpipe(19, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"ion-toggle\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function AddonModGlossaryEditPage_form_9_ng_container_22_Template_ion_toggle_ngModelChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.data.fullmatch = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 9, \"addon.mod_glossary.linking\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 11, \"addon.mod_glossary.entryusedynalink\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r5.data.usedynalink);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 13, \"addon.mod_glossary.casesensitive\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r5.data.usedynalink)(\"ngModel\", ctx_r5.data.casesensitive);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(19, 15, \"addon.mod_glossary.fullmatch\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r5.data.usedynalink)(\"ngModel\", ctx_r5.data.fullmatch);\n  }\n}\nfunction AddonModGlossaryEditPage_form_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", null, 5)(2, \"ion-item\")(3, \"ion-label\", 6);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"ion-input\", 7);\n    i0.ɵɵlistener(\"ngModelChange\", function AddonModGlossaryEditPage_form_9_Template_ion_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.data.concept = $event);\n    });\n    i0.ɵɵpipe(7, \"translate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"ion-item\")(9, \"ion-label\", 6);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"core-rich-text-editor\", 8);\n    i0.ɵɵlistener(\"contentChanged\", function AddonModGlossaryEditPage_form_9_Template_core_rich_text_editor_contentChanged_12_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.onDefinitionChange($event));\n    });\n    i0.ɵɵpipe(13, \"translate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(14, AddonModGlossaryEditPage_form_9_ion_item_14_Template, 9, 16, \"ion-item\", 2);\n    i0.ɵɵtemplate(15, AddonModGlossaryEditPage_form_9_ion_item_15_Template, 5, 5, \"ion-item\", 2);\n    i0.ɵɵelementStart(16, \"ion-item-divider\")(17, \"ion-label\")(18, \"h2\");\n    i0.ɵɵtext(19);\n    i0.ɵɵpipe(20, \"translate\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelement(21, \"core-attachments\", 9);\n    i0.ɵɵtemplate(22, AddonModGlossaryEditPage_form_9_ng_container_22_Template, 21, 17, \"ng-container\", 2);\n    i0.ɵɵelementStart(23, \"ion-button\", 10);\n    i0.ɵɵlistener(\"click\", function AddonModGlossaryEditPage_form_9_Template_ion_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.save());\n    });\n    i0.ɵɵtext(24);\n    i0.ɵɵpipe(25, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 22, \"addon.mod_glossary.concept\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(7, 24, \"addon.mod_glossary.concept\"))(\"ngModel\", ctx_r1.data.concept);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 26, \"addon.mod_glossary.definition\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r1.definitionControl)(\"placeholder\", i0.ɵɵpipeBind1(13, 28, \"addon.mod_glossary.definition\"))(\"component\", ctx_r1.component)(\"componentId\", ctx_r1.cmId)(\"autoSave\", true)(\"contextInstanceId\", ctx_r1.cmId)(\"draftExtraParams\", ctx_r1.editorExtraParams);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.categories.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showAliases);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 30, \"addon.mod_glossary.attachment\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"files\", ctx_r1.data.attachments)(\"component\", ctx_r1.component)(\"componentId\", ctx_r1.glossary.coursemodule)(\"allowOffline\", true)(\"courseId\", ctx_r1.courseId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.glossary.usedynalink);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.data.concept || !ctx_r1.data.definition);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(25, 32, \"core.save\"), \" \");\n  }\n}\n/**\n * Page that displays the edit form.\n */\nexport class AddonModGlossaryEditPage {\n  constructor(route, splitView) {\n    this.route = route;\n    this.splitView = splitView;\n    this.component = AddonModGlossaryProvider.COMPONENT;\n    this.loaded = false;\n    this.definitionControl = new FormControl();\n    this.categories = [];\n    this.showAliases = true;\n    this.editorExtraParams = {};\n    this.data = {\n      concept: '',\n      definition: '',\n      timecreated: 0,\n      attachments: [],\n      categories: [],\n      aliases: '',\n      usedynalink: false,\n      casesensitive: false,\n      fullmatch: false\n    };\n    this.isDestroyed = false;\n    this.saved = false;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const entrySlug = CoreNavigator.getRouteParam('entrySlug');\n        _this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n        _this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n        if (entrySlug !== null && entrySlug !== void 0 && entrySlug.startsWith('new-')) {\n          const timecreated = Number(entrySlug.slice(4));\n          _this.editorExtraParams.timecreated = timecreated;\n          _this.handler = new AddonModGlossaryOfflineFormHandler(_this, timecreated);\n        } else if (entrySlug) {\n          const {\n            entry\n          } = yield AddonModGlossary.getEntry(Number(entrySlug));\n          _this.entry = entry;\n          _this.editorExtraParams.timecreated = entry.timecreated;\n          _this.handler = new AddonModGlossaryOnlineFormHandler(_this, entry);\n        } else {\n          _this.handler = new AddonModGlossaryNewFormHandler(_this);\n        }\n      } catch (error) {\n        CoreDomUtils.showErrorModal(error);\n        _this.goBack();\n        return;\n      }\n      _this.fetchData();\n    })();\n  }\n  /**\n   * Fetch required data.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchData() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this2.glossary = yield AddonModGlossary.getGlossary(_this2.courseId, _this2.cmId);\n        yield _this2.handler.loadData(_this2.glossary);\n        _this2.loaded = true;\n        if (_this2.handler instanceof AddonModGlossaryOfflineFormHandler) {\n          return;\n        }\n        CoreAnalytics.logEvent({\n          type: CoreAnalyticsEventType.VIEW_ITEM,\n          ws: 'mod_glossary_get_glossaries_by_courses',\n          name: _this2.glossary.name,\n          data: {\n            id: _this2.glossary.id,\n            category: 'glossary'\n          },\n          url: '/mod/glossary/edit.php' + (_this2.entry ? `?cmid=${_this2.cmId}&id=${_this2.entry.id}` : '')\n        });\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingglossary', true);\n        _this2.goBack();\n      }\n    })();\n  }\n  /**\n   * Reset the form data.\n   */\n  resetForm() {\n    this.originalData = undefined;\n    this.data.concept = '';\n    this.data.definition = '';\n    this.data.timecreated = 0;\n    this.data.categories = [];\n    this.data.aliases = '';\n    this.data.usedynalink = false;\n    this.data.casesensitive = false;\n    this.data.fullmatch = false;\n    this.data.attachments.length = 0; // Empty the array.\n    this.definitionControl.setValue('');\n  }\n  /**\n   * Definition changed.\n   *\n   * @param text The new text.\n   */\n  onDefinitionChange(text) {\n    this.data.definition = text !== null && text !== void 0 ? text : '';\n  }\n  /**\n   * Check if we can leave the page or not.\n   *\n   * @returns Resolved if we can leave it, rejected if not.\n   */\n  canLeave() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.saved) {\n        return true;\n      }\n      if (_this3.hasDataChanged()) {\n        // Show confirmation if some data has been modified.\n        yield CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n      }\n      // Delete the local files from the tmp folder.\n      CoreFileUploader.clearTmpFiles(_this3.data.attachments);\n      CoreForms.triggerFormCancelledEvent(_this3.formElement, CoreSites.getCurrentSiteId());\n      return true;\n    })();\n  }\n  /**\n   * Save the entry.\n   */\n  save() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this4.data.concept || !_this4.data.definition) {\n        CoreDomUtils.showErrorModal('addon.mod_glossary.fillfields', true);\n        return;\n      }\n      if (!_this4.glossary) {\n        return;\n      }\n      const modal = yield CoreDomUtils.showModalLoading('core.sending', true);\n      try {\n        const savedOnline = yield _this4.handler.save(_this4.glossary);\n        _this4.saved = true;\n        CoreForms.triggerFormSubmittedEvent(_this4.formElement, savedOnline, CoreSites.getCurrentSiteId());\n        _this4.goBack();\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.cannoteditentry', true);\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  /**\n   * Check if the form data has changed.\n   *\n   * @returns True if data has changed, false otherwise.\n   */\n  hasDataChanged() {\n    if (!this.originalData || this.originalData.concept === undefined) {\n      // There is no original data.\n      return !!(this.data.definition || this.data.concept || this.data.attachments.length > 0);\n    }\n    if (this.originalData.definition != this.data.definition || this.originalData.concept != this.data.concept) {\n      return true;\n    }\n    return CoreFileUploader.areFileListDifferent(this.data.attachments, this.originalData.attachments);\n  }\n  /**\n   * Helper function to go back.\n   */\n  goBack() {\n    var _this$splitView;\n    if ((_this$splitView = this.splitView) !== null && _this$splitView !== void 0 && _this$splitView.outletActivated) {\n      CoreNavigator.navigate('../../');\n    } else {\n      CoreNavigator.back();\n    }\n  }\n}\n/**\n * Helper to manage form data.\n */\n_class = AddonModGlossaryEditPage;\n_class.ɵfac = function AddonModGlossaryEditPage_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.CoreSplitViewComponent, 8));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-mod-glossary-edit\"]],\n  viewQuery: function AddonModGlossaryEditPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formElement = _t.first);\n    }\n  },\n  decls: 10,\n  vars: 6,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [4, \"ngIf\"], [3, \"hideUntil\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [\"editFormEl\", \"\"], [\"position\", \"stacked\"], [\"type\", \"text\", \"name\", \"concept\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"name\", \"addon_mod_glossary_edit\", \"contextLevel\", \"module\", \"elementId\", \"definition_editor\", 3, \"control\", \"placeholder\", \"component\", \"componentId\", \"autoSave\", \"contextInstanceId\", \"draftExtraParams\", \"contentChanged\"], [3, \"files\", \"component\", \"componentId\", \"allowOffline\", \"courseId\"], [\"expand\", \"block\", 1, \"ion-margin\", 3, \"disabled\", \"click\"], [\"multiple\", \"true\", \"interface\", \"action-sheet\", \"name\", \"categories\", 3, \"ngModel\", \"placeholder\", \"cancelText\", \"interfaceOptions\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"rows\", \"1\", \"name\", \"aliases\", 3, \"ngModel\", \"core-auto-rows\", \"ngModelChange\"], [1, \"ion-text-wrap\"], [\"name\", \"usedynalink\", \"slot\", \"end\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"casesensitive\", \"slot\", \"end\", 3, \"disabled\", \"ngModel\", \"ngModelChange\"], [\"name\", \"fullmatch\", \"slot\", \"end\", 3, \"disabled\", \"ngModel\", \"ngModelChange\"]],\n  template: function AddonModGlossaryEditPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\");\n      i0.ɵɵtemplate(6, AddonModGlossaryEditPage_h1_6_Template, 2, 3, \"h1\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(7, \"ion-content\")(8, \"core-loading\", 3);\n      i0.ɵɵtemplate(9, AddonModGlossaryEditPage_form_9_Template, 26, 34, \"form\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 4, \"core.back\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.glossary);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.glossary);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.CoreAttachmentsComponent, i5.CoreLoadingComponent, i6.CoreAutoRowsDirective, i7.CoreFormatTextDirective, i8.CoreContentDirective, i9.CoreUpdateNonReactiveAttributesDirective, i10.ɵNgNoValidate, i10.NgControlStatus, i10.NgControlStatusGroup, i10.NgModel, i10.NgForm, i11.IonButton, i11.IonButtons, i11.IonContent, i11.IonHeader, i11.IonInput, i11.IonItem, i11.IonItemDivider, i11.IonLabel, i11.IonSelect, i11.IonSelectOption, i11.IonTextarea, i11.IonTitle, i11.IonToggle, i11.IonToolbar, i11.BooleanValueAccessor, i11.SelectValueAccessor, i11.TextValueAccessor, i11.IonBackButton, i12.CoreEditorRichTextEditorComponent, i13.TranslatePipe],\n  encapsulation: 2\n});\nclass AddonModGlossaryFormHandler {\n  constructor(page) {\n    this.page = page;\n  }\n  /**\n   * Load form categories.\n   *\n   * @param glossary Glossary.\n   */\n  loadCategories(glossary) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.page.categories = yield AddonModGlossary.getAllCategories(glossary.id, {\n        cmId: _this5.page.cmId\n      });\n    })();\n  }\n  /**\n   * Upload attachments online.\n   *\n   * @param glossary Glossary.\n   * @returns Uploaded attachments item id.\n   */\n  uploadAttachments(glossary) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const data = _this6.page.data;\n      const itemId = yield CoreFileUploader.uploadOrReuploadFiles(data.attachments, AddonModGlossaryProvider.COMPONENT, glossary.id);\n      return itemId;\n    })();\n  }\n  /**\n   * Store attachments offline.\n   *\n   * @param glossary Glossary.\n   * @param timecreated Entry time created.\n   * @returns Storage result.\n   */\n  storeAttachments(glossary, timecreated) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const data = _this7.page.data;\n      const result = yield AddonModGlossaryHelper.storeFiles(glossary.id, data.concept, timecreated, data.attachments);\n      return result;\n    })();\n  }\n  /**\n   * Make sure that the new entry won't create any duplicates.\n   *\n   * @param glossary Glossary.\n   */\n  checkDuplicates(glossary) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (glossary.allowduplicatedentries) {\n        return;\n      }\n      const data = _this8.page.data;\n      const isUsed = yield AddonModGlossary.isConceptUsed(glossary.id, data.concept, {\n        timeCreated: data.timecreated,\n        cmId: _this8.page.cmId\n      });\n      if (isUsed) {\n        // There's a entry with same name, reject with error message.\n        throw new CoreError(Translate.instant('addon.mod_glossary.errconceptalreadyexists'));\n      }\n    })();\n  }\n  /**\n   * Get additional options to save an entry.\n   *\n   * @param glossary Glossary.\n   * @returns Options.\n   */\n  getSaveOptions(glossary) {\n    const data = this.page.data;\n    const options = {};\n    if (this.page.showAliases) {\n      options.aliases = data.aliases;\n    }\n    if (this.page.categories.length > 0) {\n      options.categories = data.categories.join(',');\n    }\n    if (glossary.usedynalink) {\n      options.usedynalink = data.usedynalink ? 1 : 0;\n      if (data.usedynalink) {\n        options.casesensitive = data.casesensitive ? 1 : 0;\n        options.fullmatch = data.fullmatch ? 1 : 0;\n      }\n    }\n    return options;\n  }\n}\n/**\n * Helper to manage the form data for an offline entry.\n */\nclass AddonModGlossaryOfflineFormHandler extends AddonModGlossaryFormHandler {\n  constructor(page, timecreated) {\n    super(page);\n    this.timecreated = timecreated;\n  }\n  /**\n   * @inheritdoc\n   */\n  loadData(glossary) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      var _entry$attachments;\n      const data = _this9.page.data;\n      const entry = yield AddonModGlossaryOffline.getOfflineEntry(glossary.id, _this9.timecreated);\n      data.concept = entry.concept || '';\n      data.definition = entry.definition || '';\n      data.timecreated = entry.timecreated;\n      if (entry.options) {\n        var _entry$options$catego, _entry$options$catego2, _entry$options$aliase;\n        data.categories = ((_entry$options$catego = (_entry$options$catego2 = entry.options.categories) === null || _entry$options$catego2 === void 0 ? void 0 : _entry$options$catego2.split(',')) !== null && _entry$options$catego !== void 0 ? _entry$options$catego : []).map(id => Number(id));\n        data.aliases = (_entry$options$aliase = entry.options.aliases) !== null && _entry$options$aliase !== void 0 ? _entry$options$aliase : '';\n        data.usedynalink = !!entry.options.usedynalink;\n        if (data.usedynalink) {\n          data.casesensitive = !!entry.options.casesensitive;\n          data.fullmatch = !!entry.options.fullmatch;\n        }\n      }\n      // Treat offline attachments if any.\n      if ((_entry$attachments = entry.attachments) !== null && _entry$attachments !== void 0 && _entry$attachments.offline) {\n        data.attachments = yield AddonModGlossaryHelper.getStoredFiles(glossary.id, entry.concept, entry.timecreated);\n      }\n      _this9.page.originalData = {\n        concept: data.concept,\n        definition: data.definition,\n        attachments: data.attachments.slice(),\n        timecreated: data.timecreated,\n        categories: data.categories.slice(),\n        aliases: data.aliases,\n        usedynalink: data.usedynalink,\n        casesensitive: data.casesensitive,\n        fullmatch: data.fullmatch\n      };\n      _this9.page.definitionControl.setValue(data.definition);\n      yield _this9.loadCategories(glossary);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  save(glossary) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const originalData = _this10.page.data;\n      const data = _this10.page.data;\n      // Upload attachments first if any.\n      let offlineAttachments = undefined;\n      if (data.attachments.length) {\n        offlineAttachments = yield _this10.storeAttachments(glossary, data.timecreated);\n      }\n      if (originalData.concept !== data.concept) {\n        yield AddonModGlossaryHelper.deleteStoredFiles(glossary.id, originalData.concept, data.timecreated);\n      }\n      // Save entry data.\n      yield _this10.updateOfflineEntry(glossary, offlineAttachments);\n      // Delete the local files from the tmp folder.\n      CoreFileUploader.clearTmpFiles(data.attachments);\n      return false;\n    })();\n  }\n  /**\n   * Update an offline entry.\n   *\n   * @param glossary Glossary.\n   * @param uploadedAttachments Uploaded attachments.\n   */\n  updateOfflineEntry(glossary, uploadedAttachments) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const originalData = _this11.page.originalData;\n      const data = _this11.page.data;\n      const options = _this11.getSaveOptions(glossary);\n      const definition = CoreTextUtils.formatHtmlLines(data.definition);\n      if (!originalData) {\n        return;\n      }\n      yield _this11.checkDuplicates(glossary);\n      yield AddonModGlossaryOffline.updateOfflineEntry({\n        glossaryid: glossary.id,\n        courseid: _this11.page.courseId,\n        concept: originalData.concept,\n        timecreated: originalData.timecreated\n      }, data.concept, definition, options, uploadedAttachments);\n    })();\n  }\n}\n/**\n * Helper to manage the form data for creating a new entry.\n */\nclass AddonModGlossaryNewFormHandler extends AddonModGlossaryFormHandler {\n  /**\n   * @inheritdoc\n   */\n  loadData(glossary) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      yield _this12.loadCategories(glossary);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  save(glossary) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const data = _this13.page.data;\n      const timecreated = Date.now();\n      // Upload attachments first if any.\n      let onlineAttachments = undefined;\n      let offlineAttachments = undefined;\n      if (data.attachments.length) {\n        try {\n          onlineAttachments = yield _this13.uploadAttachments(glossary);\n        } catch (error) {\n          if (CoreUtils.isWebServiceError(error)) {\n            throw error;\n          }\n          offlineAttachments = yield _this13.storeAttachments(glossary, timecreated);\n        }\n      }\n      // Save entry data.\n      const entryId = offlineAttachments ? yield _this13.createOfflineEntry(glossary, timecreated, offlineAttachments) : yield _this13.createOnlineEntry(glossary, timecreated, onlineAttachments, !data.attachments.length);\n      // Delete the local files from the tmp folder.\n      CoreFileUploader.clearTmpFiles(data.attachments);\n      if (entryId) {\n        // Data sent to server, delete stored files (if any).\n        AddonModGlossaryHelper.deleteStoredFiles(glossary.id, data.concept, timecreated);\n        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, {\n          module: 'glossary'\n        });\n      }\n      return !!entryId;\n    })();\n  }\n  /**\n   * Create an offline entry.\n   *\n   * @param glossary Glossary.\n   * @param timecreated Time created.\n   * @param uploadedAttachments Uploaded attachments.\n   */\n  createOfflineEntry(glossary, timecreated, uploadedAttachments) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const data = _this14.page.data;\n      const options = _this14.getSaveOptions(glossary);\n      const definition = CoreTextUtils.formatHtmlLines(data.definition);\n      yield _this14.checkDuplicates(glossary);\n      yield AddonModGlossaryOffline.addOfflineEntry(glossary.id, data.concept, definition, _this14.page.courseId, timecreated, options, uploadedAttachments, undefined, undefined);\n    })();\n  }\n  /**\n   * Create an online entry.\n   *\n   * @param glossary Glossary.\n   * @param timecreated Time created.\n   * @param uploadedAttachmentsId Id of the uploaded attachments.\n   * @param allowOffline Allow falling back to creating the entry offline.\n   * @returns Entry id.\n   */\n  createOnlineEntry(glossary, timecreated, uploadedAttachmentsId, allowOffline) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const data = _this15.page.data;\n      const options = _this15.getSaveOptions(glossary);\n      const definition = CoreTextUtils.formatHtmlLines(data.definition);\n      const entryId = yield AddonModGlossary.addEntry(glossary.id, data.concept, definition, _this15.page.courseId, options, uploadedAttachmentsId, {\n        timeCreated: timecreated,\n        allowOffline: allowOffline,\n        checkDuplicates: !glossary.allowduplicatedentries\n      });\n      return entryId;\n    })();\n  }\n}\n/**\n * Helper to manage the form data for an online entry.\n */\nclass AddonModGlossaryOnlineFormHandler extends AddonModGlossaryFormHandler {\n  constructor(page, entry) {\n    super(page);\n    this.entry = entry;\n  }\n  /**\n   * @inheritdoc\n   */\n  loadData() {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      const data = _this16.page.data;\n      data.concept = _this16.entry.concept;\n      data.definition = _this16.entry.definition || '';\n      data.timecreated = _this16.entry.timecreated;\n      data.usedynalink = _this16.entry.usedynalink;\n      if (data.usedynalink) {\n        data.casesensitive = _this16.entry.casesensitive;\n        data.fullmatch = _this16.entry.fullmatch;\n      }\n      // Treat offline attachments if any.\n      if (_this16.entry.attachments) {\n        data.attachments = _this16.entry.attachments;\n      }\n      _this16.page.originalData = {\n        concept: data.concept,\n        definition: data.definition,\n        attachments: data.attachments.slice(),\n        timecreated: data.timecreated,\n        categories: data.categories.slice(),\n        aliases: data.aliases,\n        usedynalink: data.usedynalink,\n        casesensitive: data.casesensitive,\n        fullmatch: data.fullmatch\n      };\n      _this16.page.definitionControl.setValue(data.definition);\n      _this16.page.showAliases = false;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  save(glossary) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      if (!CoreNetwork.isOnline()) {\n        throw new CoreNetworkError();\n      }\n      const data = _this17.page.data;\n      const options = _this17.getSaveOptions(glossary);\n      const definition = CoreTextUtils.formatHtmlLines(data.definition);\n      // Upload attachments, if any.\n      let attachmentsId = undefined;\n      if (data.attachments.length) {\n        attachmentsId = yield _this17.uploadAttachments(glossary);\n      }\n      // Save entry data.\n      yield AddonModGlossary.updateEntry(glossary.id, _this17.entry.id, data.concept, definition, options, attachmentsId);\n      // Delete the local files from the tmp folder.\n      CoreFileUploader.clearTmpFiles(data.attachments);\n      CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, {\n        module: 'glossary'\n      });\n      return true;\n    })();\n  }\n}","map":{"version":3,"names":["FormControl","CoreError","CoreNetworkError","CoreFileUploader","CoreNavigator","CoreNetwork","CoreSites","CoreDomUtils","CoreTextUtils","CoreUtils","Translate","CoreEvents","CoreForms","AddonModGlossary","AddonModGlossaryProvider","AddonModGlossaryHelper","AddonModGlossaryOffline","CoreAnalytics","CoreAnalyticsEventType","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r0","glossary","name","cmId","courseId","ɵɵtext","category_r7","id","ɵɵtextInterpolate1","ɵɵlistener","AddonModGlossaryEditPage_form_9_ion_item_14_Template_ion_select_ngModelChange_4_listener","$event","ɵɵrestoreView","_r9","ctx_r8","ɵɵnextContext","ɵɵresetView","data","categories","ɵɵtemplate","AddonModGlossaryEditPage_form_9_ion_item_14_ion_select_option_8_Template","ɵɵpipeBind1","ctx_r3","ɵɵpureFunction1","_c1","AddonModGlossaryEditPage_form_9_ion_item_15_Template_ion_textarea_ngModelChange_4_listener","_r11","ctx_r10","aliases","ctx_r4","ɵɵelementContainerStart","AddonModGlossaryEditPage_form_9_ng_container_22_Template_ion_toggle_ngModelChange_10_listener","_r13","ctx_r12","usedynalink","AddonModGlossaryEditPage_form_9_ng_container_22_Template_ion_toggle_ngModelChange_15_listener","ctx_r14","casesensitive","AddonModGlossaryEditPage_form_9_ng_container_22_Template_ion_toggle_ngModelChange_20_listener","ctx_r15","fullmatch","ɵɵelementContainerEnd","ɵɵtextInterpolate","ctx_r5","AddonModGlossaryEditPage_form_9_Template_ion_input_ngModelChange_6_listener","_r17","ctx_r16","concept","AddonModGlossaryEditPage_form_9_Template_core_rich_text_editor_contentChanged_12_listener","ctx_r18","onDefinitionChange","AddonModGlossaryEditPage_form_9_ion_item_14_Template","AddonModGlossaryEditPage_form_9_ion_item_15_Template","AddonModGlossaryEditPage_form_9_ng_container_22_Template","AddonModGlossaryEditPage_form_9_Template_ion_button_click_23_listener","ctx_r19","save","ctx_r1","definitionControl","component","editorExtraParams","length","showAliases","attachments","coursemodule","definition","AddonModGlossaryEditPage","constructor","route","splitView","COMPONENT","loaded","timecreated","isDestroyed","saved","ngOnInit","_this","_asyncToGenerator","entrySlug","getRouteParam","getRequiredRouteNumberParam","startsWith","Number","slice","handler","AddonModGlossaryOfflineFormHandler","entry","getEntry","AddonModGlossaryOnlineFormHandler","AddonModGlossaryNewFormHandler","error","showErrorModal","goBack","fetchData","_this2","getGlossary","loadData","logEvent","type","VIEW_ITEM","ws","category","url","showErrorModalDefault","resetForm","originalData","undefined","setValue","text","canLeave","_this3","hasDataChanged","showConfirm","instant","clearTmpFiles","triggerFormCancelledEvent","formElement","getCurrentSiteId","_this4","modal","showModalLoading","savedOnline","triggerFormSubmittedEvent","dismiss","areFileListDifferent","_this$splitView","outletActivated","navigate","back","_class","ɵɵdirectiveInject","i1","ActivatedRoute","i2","CoreSplitViewComponent","selectors","viewQuery","AddonModGlossaryEditPage_Query","rf","ctx","AddonModGlossaryEditPage_h1_6_Template","AddonModGlossaryEditPage_form_9_Template","AddonModGlossaryFormHandler","page","loadCategories","_this5","getAllCategories","uploadAttachments","_this6","itemId","uploadOrReuploadFiles","storeAttachments","_this7","result","storeFiles","checkDuplicates","_this8","allowduplicatedentries","isUsed","isConceptUsed","timeCreated","getSaveOptions","options","join","_this9","_entry$attachments","getOfflineEntry","_entry$options$catego","_entry$options$catego2","_entry$options$aliase","split","map","offline","getStoredFiles","_this10","offlineAttachments","deleteStoredFiles","updateOfflineEntry","uploadedAttachments","_this11","formatHtmlLines","glossaryid","courseid","_this12","_this13","Date","now","onlineAttachments","isWebServiceError","entryId","createOfflineEntry","createOnlineEntry","trigger","ACTIVITY_DATA_SENT","module","_this14","addOfflineEntry","uploadedAttachmentsId","allowOffline","_this15","addEntry","_this16","_this17","isOnline","attachmentsId","updateEntry"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/pages/edit/edit.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/pages/edit/edit.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild, ElementRef, Optional } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreNetworkError } from '@classes/errors/network-error';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { CanLeave } from '@guards/can-leave';\nimport { CoreFileEntry } from '@services/file-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreForms } from '@singletons/form';\nimport {\n    AddonModGlossary,\n    AddonModGlossaryCategory,\n    AddonModGlossaryEntry,\n    AddonModGlossaryEntryOption,\n    AddonModGlossaryGlossary,\n    AddonModGlossaryProvider,\n} from '../../services/glossary';\nimport { AddonModGlossaryHelper } from '../../services/glossary-helper';\nimport { AddonModGlossaryOffline } from '../../services/glossary-offline';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays the edit form.\n */\n@Component({\n    selector: 'page-addon-mod-glossary-edit',\n    templateUrl: 'edit.html',\n})\nexport class AddonModGlossaryEditPage implements OnInit, CanLeave {\n\n    @ViewChild('editFormEl') formElement?: ElementRef;\n\n    component = AddonModGlossaryProvider.COMPONENT;\n    cmId!: number;\n    courseId!: number;\n    loaded = false;\n    glossary?: AddonModGlossaryGlossary;\n    definitionControl = new FormControl();\n    categories: AddonModGlossaryCategory[] = [];\n    showAliases = true;\n    editorExtraParams: Record<string, unknown> = {};\n    handler!: AddonModGlossaryFormHandler;\n    data: AddonModGlossaryFormData = {\n        concept: '',\n        definition: '',\n        timecreated: 0,\n        attachments: [],\n        categories: [],\n        aliases: '',\n        usedynalink: false,\n        casesensitive: false,\n        fullmatch: false,\n    };\n\n    originalData?: AddonModGlossaryFormData;\n\n    protected entry?: AddonModGlossaryEntry;\n    protected syncId?: string;\n    protected syncObserver?: CoreEventObserver;\n    protected isDestroyed = false;\n    protected saved = false;\n\n    constructor(protected route: ActivatedRoute, @Optional() protected splitView: CoreSplitViewComponent) {}\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            const entrySlug = CoreNavigator.getRouteParam<string>('entrySlug');\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n\n            if (entrySlug?.startsWith('new-')) {\n                const timecreated = Number(entrySlug.slice(4));\n                this.editorExtraParams.timecreated = timecreated;\n                this.handler = new AddonModGlossaryOfflineFormHandler(this, timecreated);\n            } else if (entrySlug) {\n                const { entry } = await AddonModGlossary.getEntry(Number(entrySlug));\n\n                this.entry = entry;\n                this.editorExtraParams.timecreated = entry.timecreated;\n                this.handler = new AddonModGlossaryOnlineFormHandler(this, entry);\n            } else {\n                this.handler = new AddonModGlossaryNewFormHandler(this);\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            this.goBack();\n\n            return;\n        }\n\n        this.fetchData();\n    }\n\n    /**\n     * Fetch required data.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.glossary = await AddonModGlossary.getGlossary(this.courseId, this.cmId);\n\n            await this.handler.loadData(this.glossary);\n\n            this.loaded = true;\n\n            if (this.handler instanceof AddonModGlossaryOfflineFormHandler) {\n                return;\n            }\n\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM,\n                ws: 'mod_glossary_get_glossaries_by_courses',\n                name: this.glossary.name,\n                data: { id: this.glossary.id, category: 'glossary' },\n                url: '/mod/glossary/edit.php' + (this.entry ? `?cmid=${this.cmId}&id=${this.entry.id}` : ''),\n            });\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingglossary', true);\n\n            this.goBack();\n        }\n    }\n\n    /**\n     * Reset the form data.\n     */\n    protected resetForm(): void {\n        this.originalData = undefined;\n\n        this.data.concept = '';\n        this.data.definition = '';\n        this.data.timecreated = 0;\n        this.data.categories = [];\n        this.data.aliases = '';\n        this.data.usedynalink = false;\n        this.data.casesensitive = false;\n        this.data.fullmatch = false;\n        this.data.attachments.length = 0; // Empty the array.\n\n        this.definitionControl.setValue('');\n    }\n\n    /**\n     * Definition changed.\n     *\n     * @param text The new text.\n     */\n    onDefinitionChange(text?: string | null): void {\n        this.data.definition = text ?? '';\n    }\n\n    /**\n     * Check if we can leave the page or not.\n     *\n     * @returns Resolved if we can leave it, rejected if not.\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.saved) {\n            return true;\n        }\n\n        if (this.hasDataChanged()) {\n            // Show confirmation if some data has been modified.\n            await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n        }\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(this.data.attachments);\n\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n\n        return true;\n    }\n\n    /**\n     * Save the entry.\n     */\n    async save(): Promise<void> {\n        if (!this.data.concept || !this.data.definition) {\n            CoreDomUtils.showErrorModal('addon.mod_glossary.fillfields', true);\n\n            return;\n        }\n\n        if (!this.glossary) {\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n        try {\n            const savedOnline = await this.handler.save(this.glossary);\n\n            this.saved = true;\n\n            CoreForms.triggerFormSubmittedEvent(this.formElement, savedOnline, CoreSites.getCurrentSiteId());\n\n            this.goBack();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.cannoteditentry', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Check if the form data has changed.\n     *\n     * @returns True if data has changed, false otherwise.\n     */\n    protected hasDataChanged(): boolean {\n        if (!this.originalData || this.originalData.concept === undefined) {\n            // There is no original data.\n            return !!(this.data.definition || this.data.concept || this.data.attachments.length > 0);\n        }\n\n        if (this.originalData.definition != this.data.definition || this.originalData.concept != this.data.concept) {\n            return true;\n        }\n\n        return CoreFileUploader.areFileListDifferent(this.data.attachments, this.originalData.attachments);\n    }\n\n    /**\n     * Helper function to go back.\n     */\n    protected goBack(): void {\n        if (this.splitView?.outletActivated) {\n            CoreNavigator.navigate('../../');\n        } else {\n            CoreNavigator.back();\n        }\n    }\n\n}\n\n/**\n * Helper to manage form data.\n */\nabstract class AddonModGlossaryFormHandler {\n\n    constructor(protected page: AddonModGlossaryEditPage) {}\n\n    /**\n     * Load form data.\n     *\n     * @param glossary Glossary.\n     */\n    abstract loadData(glossary: AddonModGlossaryGlossary): Promise<void>;\n\n    /**\n     * Save form data.\n     *\n     * @param glossary Glossary.\n     * @returns Whether the form was saved online.\n     */\n    abstract save(glossary: AddonModGlossaryGlossary): Promise<boolean>;\n\n    /**\n     * Load form categories.\n     *\n     * @param glossary Glossary.\n     */\n    protected async loadCategories(glossary: AddonModGlossaryGlossary): Promise<void> {\n        this.page.categories = await AddonModGlossary.getAllCategories(glossary.id, {\n            cmId: this.page.cmId,\n        });\n    }\n\n    /**\n     * Upload attachments online.\n     *\n     * @param glossary Glossary.\n     * @returns Uploaded attachments item id.\n     */\n    protected async uploadAttachments(glossary: AddonModGlossaryGlossary): Promise<number> {\n        const data = this.page.data;\n        const itemId = await CoreFileUploader.uploadOrReuploadFiles(\n            data.attachments,\n            AddonModGlossaryProvider.COMPONENT,\n            glossary.id,\n        );\n\n        return itemId;\n    }\n\n    /**\n     * Store attachments offline.\n     *\n     * @param glossary Glossary.\n     * @param timecreated Entry time created.\n     * @returns Storage result.\n     */\n    protected async storeAttachments(\n        glossary: AddonModGlossaryGlossary,\n        timecreated: number,\n    ): Promise<CoreFileUploaderStoreFilesResult> {\n        const data = this.page.data;\n        const result = await AddonModGlossaryHelper.storeFiles(\n            glossary.id,\n            data.concept,\n            timecreated,\n            data.attachments,\n        );\n\n        return result;\n    }\n\n    /**\n     * Make sure that the new entry won't create any duplicates.\n     *\n     * @param glossary Glossary.\n     */\n    protected async checkDuplicates(glossary: AddonModGlossaryGlossary): Promise<void> {\n        if (glossary.allowduplicatedentries) {\n            return;\n        }\n\n        const data = this.page.data;\n        const isUsed = await AddonModGlossary.isConceptUsed(glossary.id, data.concept, {\n            timeCreated: data.timecreated,\n            cmId: this.page.cmId,\n        });\n\n        if (isUsed) {\n            // There's a entry with same name, reject with error message.\n            throw new CoreError(Translate.instant('addon.mod_glossary.errconceptalreadyexists'));\n        }\n    }\n\n    /**\n     * Get additional options to save an entry.\n     *\n     * @param glossary Glossary.\n     * @returns Options.\n     */\n    protected getSaveOptions(glossary: AddonModGlossaryGlossary): Record<string, AddonModGlossaryEntryOption> {\n        const data = this.page.data;\n        const options: Record<string, AddonModGlossaryEntryOption> = {};\n\n        if (this.page.showAliases) {\n            options.aliases = data.aliases;\n        }\n\n        if (this.page.categories.length > 0) {\n            options.categories = data.categories.join(',');\n        }\n\n        if (glossary.usedynalink) {\n            options.usedynalink = data.usedynalink ? 1 : 0;\n\n            if (data.usedynalink) {\n                options.casesensitive = data.casesensitive ? 1 : 0;\n                options.fullmatch = data.fullmatch ? 1 : 0;\n            }\n        }\n\n        return options;\n    }\n\n}\n\n/**\n * Helper to manage the form data for an offline entry.\n */\nclass AddonModGlossaryOfflineFormHandler extends AddonModGlossaryFormHandler {\n\n    private timecreated: number;\n\n    constructor(page: AddonModGlossaryEditPage, timecreated: number) {\n        super(page);\n\n        this.timecreated = timecreated;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async loadData(glossary: AddonModGlossaryGlossary): Promise<void> {\n        const data = this.page.data;\n        const entry = await AddonModGlossaryOffline.getOfflineEntry(glossary.id, this.timecreated);\n\n        data.concept = entry.concept || '';\n        data.definition = entry.definition || '';\n        data.timecreated = entry.timecreated;\n\n        if (entry.options) {\n            data.categories = ((entry.options.categories as string)?.split(',') ?? []).map(id => Number(id));\n            data.aliases = entry.options.aliases as string ?? '';\n            data.usedynalink = !!entry.options.usedynalink;\n\n            if (data.usedynalink) {\n                data.casesensitive = !!entry.options.casesensitive;\n                data.fullmatch = !!entry.options.fullmatch;\n            }\n        }\n\n        // Treat offline attachments if any.\n        if (entry.attachments?.offline) {\n            data.attachments = await AddonModGlossaryHelper.getStoredFiles(glossary.id, entry.concept, entry.timecreated);\n        }\n\n        this.page.originalData = {\n            concept: data.concept,\n            definition: data.definition,\n            attachments: data.attachments.slice(),\n            timecreated: data.timecreated,\n            categories: data.categories.slice(),\n            aliases: data.aliases,\n            usedynalink: data.usedynalink,\n            casesensitive: data.casesensitive,\n            fullmatch: data.fullmatch,\n        };\n\n        this.page.definitionControl.setValue(data.definition);\n\n        await this.loadCategories(glossary);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async save(glossary: AddonModGlossaryGlossary): Promise<boolean> {\n        const originalData = this.page.data;\n        const data = this.page.data;\n\n        // Upload attachments first if any.\n        let offlineAttachments: CoreFileUploaderStoreFilesResult | undefined = undefined;\n\n        if (data.attachments.length) {\n            offlineAttachments = await this.storeAttachments(glossary, data.timecreated);\n        }\n\n        if (originalData.concept !== data.concept) {\n            await AddonModGlossaryHelper.deleteStoredFiles(glossary.id, originalData.concept, data.timecreated);\n        }\n\n        // Save entry data.\n        await this.updateOfflineEntry(glossary, offlineAttachments);\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(data.attachments);\n\n        return false;\n    }\n\n    /**\n     * Update an offline entry.\n     *\n     * @param glossary Glossary.\n     * @param uploadedAttachments Uploaded attachments.\n     */\n    protected async updateOfflineEntry(\n        glossary: AddonModGlossaryGlossary,\n        uploadedAttachments?: CoreFileUploaderStoreFilesResult,\n    ): Promise<void> {\n        const originalData = this.page.originalData;\n        const data = this.page.data;\n        const options = this.getSaveOptions(glossary);\n        const definition = CoreTextUtils.formatHtmlLines(data.definition);\n\n        if (!originalData) {\n            return;\n        }\n\n        await this.checkDuplicates(glossary);\n        await AddonModGlossaryOffline.updateOfflineEntry(\n            {\n                glossaryid: glossary.id,\n                courseid: this.page.courseId,\n                concept: originalData.concept,\n                timecreated: originalData.timecreated,\n            },\n            data.concept,\n            definition,\n            options,\n            uploadedAttachments,\n        );\n    }\n\n}\n\n/**\n * Helper to manage the form data for creating a new entry.\n */\nclass AddonModGlossaryNewFormHandler extends AddonModGlossaryFormHandler {\n\n    /**\n     * @inheritdoc\n     */\n    async loadData(glossary: AddonModGlossaryGlossary): Promise<void> {\n        await this.loadCategories(glossary);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async save(glossary: AddonModGlossaryGlossary): Promise<boolean> {\n        const data = this.page.data;\n        const timecreated = Date.now();\n\n        // Upload attachments first if any.\n        let onlineAttachments: number | undefined = undefined;\n        let offlineAttachments: CoreFileUploaderStoreFilesResult | undefined = undefined;\n\n        if (data.attachments.length) {\n            try {\n                onlineAttachments = await this.uploadAttachments(glossary);\n            } catch (error) {\n                if (CoreUtils.isWebServiceError(error)) {\n                    throw error;\n                }\n\n                offlineAttachments = await this.storeAttachments(glossary, timecreated);\n            }\n        }\n\n        // Save entry data.\n        const entryId = offlineAttachments\n            ? await this.createOfflineEntry(glossary, timecreated, offlineAttachments)\n            : await this.createOnlineEntry(glossary, timecreated, onlineAttachments, !data.attachments.length);\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(data.attachments);\n\n        if (entryId) {\n            // Data sent to server, delete stored files (if any).\n            AddonModGlossaryHelper.deleteStoredFiles(glossary.id, data.concept, timecreated);\n            CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'glossary' });\n        }\n\n        return !!entryId;\n    }\n\n    /**\n     * Create an offline entry.\n     *\n     * @param glossary Glossary.\n     * @param timecreated Time created.\n     * @param uploadedAttachments Uploaded attachments.\n     */\n    protected async createOfflineEntry(\n        glossary: AddonModGlossaryGlossary,\n        timecreated: number,\n        uploadedAttachments?: CoreFileUploaderStoreFilesResult,\n    ): Promise<void> {\n        const data = this.page.data;\n        const options = this.getSaveOptions(glossary);\n        const definition = CoreTextUtils.formatHtmlLines(data.definition);\n\n        await this.checkDuplicates(glossary);\n        await AddonModGlossaryOffline.addOfflineEntry(\n            glossary.id,\n            data.concept,\n            definition,\n            this.page.courseId,\n            timecreated,\n            options,\n            uploadedAttachments,\n            undefined,\n            undefined,\n        );\n    }\n\n    /**\n     * Create an online entry.\n     *\n     * @param glossary Glossary.\n     * @param timecreated Time created.\n     * @param uploadedAttachmentsId Id of the uploaded attachments.\n     * @param allowOffline Allow falling back to creating the entry offline.\n     * @returns Entry id.\n     */\n    protected async createOnlineEntry(\n        glossary: AddonModGlossaryGlossary,\n        timecreated: number,\n        uploadedAttachmentsId?: number,\n        allowOffline?: boolean,\n    ): Promise<number | false> {\n        const data = this.page.data;\n        const options = this.getSaveOptions(glossary);\n        const definition = CoreTextUtils.formatHtmlLines(data.definition);\n        const entryId = await AddonModGlossary.addEntry(\n            glossary.id,\n            data.concept,\n            definition,\n            this.page.courseId,\n            options,\n            uploadedAttachmentsId,\n            {\n                timeCreated: timecreated,\n                allowOffline: allowOffline,\n                checkDuplicates: !glossary.allowduplicatedentries,\n            },\n        );\n\n        return entryId;\n    }\n\n}\n\n/**\n * Helper to manage the form data for an online entry.\n */\nclass AddonModGlossaryOnlineFormHandler extends AddonModGlossaryFormHandler {\n\n    private entry: AddonModGlossaryEntry;\n\n    constructor(page: AddonModGlossaryEditPage, entry: AddonModGlossaryEntry) {\n        super(page);\n\n        this.entry = entry;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async loadData(): Promise<void> {\n        const data = this.page.data;\n\n        data.concept = this.entry.concept;\n        data.definition = this.entry.definition || '';\n        data.timecreated = this.entry.timecreated;\n        data.usedynalink = this.entry.usedynalink;\n\n        if (data.usedynalink) {\n            data.casesensitive = this.entry.casesensitive;\n            data.fullmatch = this.entry.fullmatch;\n        }\n\n        // Treat offline attachments if any.\n        if (this.entry.attachments) {\n            data.attachments = this.entry.attachments;\n        }\n\n        this.page.originalData = {\n            concept: data.concept,\n            definition: data.definition,\n            attachments: data.attachments.slice(),\n            timecreated: data.timecreated,\n            categories: data.categories.slice(),\n            aliases: data.aliases,\n            usedynalink: data.usedynalink,\n            casesensitive: data.casesensitive,\n            fullmatch: data.fullmatch,\n        };\n\n        this.page.definitionControl.setValue(data.definition);\n        this.page.showAliases = false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async save(glossary: AddonModGlossaryGlossary): Promise<boolean> {\n        if (!CoreNetwork.isOnline()) {\n            throw new CoreNetworkError();\n        }\n\n        const data = this.page.data;\n        const options = this.getSaveOptions(glossary);\n        const definition = CoreTextUtils.formatHtmlLines(data.definition);\n\n        // Upload attachments, if any.\n        let attachmentsId: number | undefined = undefined;\n\n        if (data.attachments.length) {\n            attachmentsId = await this.uploadAttachments(glossary);\n        }\n\n        // Save entry data.\n        await AddonModGlossary.updateEntry(glossary.id, this.entry.id, data.concept, definition, options, attachmentsId);\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(data.attachments);\n\n        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'glossary' });\n\n        return true;\n    }\n\n}\n\n/**\n * Form data.\n */\ntype AddonModGlossaryFormData = {\n    concept: string;\n    definition: string;\n    timecreated: number;\n    attachments: CoreFileEntry[];\n    categories: number[];\n    aliases: string;\n    usedynalink: boolean;\n    casesensitive: boolean;\n    fullmatch: boolean;\n};\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1 *ngIf=\"glossary\">\n                <core-format-text [text]=\"glossary.name\" contextLevel=\"module\" [contextInstanceId]=\"cmId\" [courseId]=\"courseId\" />\n            </h1>\n        </ion-title>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <core-loading [hideUntil]=\"loaded\">\n        <form #editFormEl *ngIf=\"glossary\">\n            <ion-item>\n                <ion-label position=\"stacked\">{{ 'addon.mod_glossary.concept' | translate }}</ion-label>\n                <ion-input type=\"text\" [placeholder]=\"'addon.mod_glossary.concept' | translate\" [(ngModel)]=\"data.concept\" name=\"concept\" />\n            </ion-item>\n            <ion-item>\n                <ion-label position=\"stacked\">{{ 'addon.mod_glossary.definition' | translate }}</ion-label>\n                <core-rich-text-editor [control]=\"definitionControl\" (contentChanged)=\"onDefinitionChange($event)\"\n                    [placeholder]=\"'addon.mod_glossary.definition' | translate\" name=\"addon_mod_glossary_edit\" [component]=\"component\"\n                    [componentId]=\"cmId\" [autoSave]=\"true\" contextLevel=\"module\" [contextInstanceId]=\"cmId\" elementId=\"definition_editor\"\n                    [draftExtraParams]=\"editorExtraParams\" />\n            </ion-item>\n            <ion-item *ngIf=\"categories.length > 0\">\n                <ion-label position=\"stacked\">\n                    {{ 'addon.mod_glossary.categories' | translate }}\n                </ion-label>\n                <ion-select [(ngModel)]=\"data.categories\" multiple=\"true\" interface=\"action-sheet\"\n                    [placeholder]=\"'addon.mod_glossary.categories' | translate\" name=\"categories\" [cancelText]=\"'core.cancel' | translate\"\n                    [interfaceOptions]=\"{header: 'addon.mod_glossary.categories' | translate}\">\n                    <ion-select-option *ngFor=\"let category of categories\" [value]=\"category.id\">\n                        {{ category.name }}\n                    </ion-select-option>\n                </ion-select>\n            </ion-item>\n            <ion-item *ngIf=\"showAliases\">\n                <ion-label position=\"stacked\">\n                    {{ 'addon.mod_glossary.aliases' | translate }}\n                </ion-label>\n                <ion-textarea [(ngModel)]=\"data.aliases\" rows=\"1\" [core-auto-rows]=\"data.aliases\" name=\"aliases\" />\n            </ion-item>\n            <ion-item-divider>\n                <ion-label>\n                    <h2>{{ 'addon.mod_glossary.attachment' | translate }}</h2>\n                </ion-label>\n            </ion-item-divider>\n            <core-attachments [files]=\"data.attachments\" [component]=\"component\" [componentId]=\"glossary.coursemodule\" [allowOffline]=\"true\"\n                [courseId]=\"courseId\" />\n            <ng-container *ngIf=\"glossary.usedynalink\">\n                <ion-item-divider>\n                    <ion-label>\n                        <h2>{{ 'addon.mod_glossary.linking' | translate }}</h2>\n                    </ion-label>\n                </ion-item-divider>\n                <ion-item class=\"ion-text-wrap\">\n                    <ion-label>{{ 'addon.mod_glossary.entryusedynalink' | translate }}</ion-label>\n                    <ion-toggle [(ngModel)]=\"data.usedynalink\" name=\"usedynalink\" slot=\"end\" />\n                </ion-item>\n                <ion-item class=\"ion-text-wrap\">\n                    <ion-label>{{ 'addon.mod_glossary.casesensitive' | translate }}</ion-label>\n                    <ion-toggle [disabled]=\"!data.usedynalink\" [(ngModel)]=\"data.casesensitive\" name=\"casesensitive\" slot=\"end\" />\n                </ion-item>\n                <ion-item class=\"ion-text-wrap\">\n                    <ion-label>{{ 'addon.mod_glossary.fullmatch' | translate }}</ion-label>\n                    <ion-toggle [disabled]=\"!data.usedynalink\" [(ngModel)]=\"data.fullmatch\" name=\"fullmatch\" slot=\"end\" />\n                </ion-item>\n            </ng-container>\n            <ion-button class=\"ion-margin\" expand=\"block\" [disabled]=\"!data.concept || !data.definition\" (click)=\"save()\">\n                {{ 'core.save' | translate }}\n            </ion-button>\n        </form>\n    </core-loading>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}