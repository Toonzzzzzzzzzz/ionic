{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { FormGroup } from '@angular/forms';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreTag } from '@features/tag/services/tag';\nimport { IonContent } from '@ionic/angular';\nimport { CoreGroups } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreForms } from '@singletons/form';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModDataComponentsCompileModule } from '../../components/components-compile.module';\nimport { AddonModDataProvider, AddonModData, AddonModDataTemplateType } from '../../services/data';\nimport { AddonModDataHelper } from '../../services/data-helper';\nimport { CoreDom } from '@singletons/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../../../../core/components/group-selector/group-selector\";\nimport * as i3 from \"../../../../../core/components/loading/loading\";\nimport * as i4 from \"../../../../../core/components/style/style\";\nimport * as i5 from \"../../../../../core/directives/format-text\";\nimport * as i6 from \"../../../../../core/directives/content\";\nimport * as i7 from \"../../../../../core/directives/update-non-reactive-attributes\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@ionic/angular\";\nimport * as i10 from \"../../../../../core/features/compile/components/compile-html/compile-html\";\nimport * as i11 from \"@ngx-translate/core\";\nconst _c0 = [\"editFormEl\"];\nfunction AddonModDataEditPage_ion_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 8);\n    i0.ɵɵlistener(\"click\", function AddonModDataEditPage_ion_button_9_Template_ion_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.save($event));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"core.save\"), \" \");\n  }\n}\nfunction AddonModDataEditPage_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"core-style\", 9);\n    i0.ɵɵelementStart(2, \"form\", 10, 11);\n    i0.ɵɵlistener(\"ngSubmit\", function AddonModDataEditPage_div_13_Template_form_ngSubmit_2_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.save($event));\n    });\n    i0.ɵɵelement(4, \"core-compile-html\", 12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"addon-data-contents \", ctx_r1.cssClass, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"prefix\", \".\", ctx_r1.cssClass, \"\");\n    i0.ɵɵproperty(\"css\", ctx_r1.database.csstemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.editForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"text\", ctx_r1.editFormRender)(\"jsData\", ctx_r1.jsData)(\"extraImports\", ctx_r1.extraImports);\n  }\n}\n/**\n * Page that displays the view edit page.\n */\nexport class AddonModDataEditPage {\n  constructor() {\n    this.fieldsArray = [];\n    this.offline = false;\n    this.forceLeave = false; // To allow leaving the page without checking for changes.\n    this.isEditing = false;\n    this.originalData = {};\n    this.fields = {};\n    this.moduleId = 0;\n    this.title = '';\n    this.component = AddonModDataProvider.COMPONENT;\n    this.loaded = false;\n    this.selectedGroup = 0;\n    this.cssClass = '';\n    this.editFormRender = '';\n    this.extraImports = [AddonModDataComponentsCompileModule];\n    this.errors = {};\n    this.siteId = CoreSites.getCurrentSiteId();\n    this.editForm = new FormGroup({});\n    this.logView = CoreTime.once(() => {\n      if (!this.database) {\n        return;\n      }\n      CoreAnalytics.logEvent({\n        type: CoreAnalyticsEventType.VIEW_ITEM,\n        ws: this.isEditing ? 'mod_data_update_entry' : 'mod_data_add_entry',\n        name: this.title,\n        data: {\n          databaseid: this.database.id,\n          category: 'data'\n        },\n        url: '/mod/data/edit.php?' + (this.isEditing ? `d=${this.database.id}&rid=${this.entryId}` : `id=${this.moduleId}`)\n      });\n    });\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    try {\n      this.moduleId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n      this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n      this.title = CoreNavigator.getRouteParam('title') || '';\n      this.entryId = CoreNavigator.getRouteNumberParam('entryId') || undefined;\n      this.selectedGroup = CoreNavigator.getRouteNumberParam('group') || 0;\n    } catch (error) {\n      CoreDomUtils.showErrorModal(error);\n      CoreNavigator.back();\n      return;\n    }\n    // If entryId is lower than 0 or null, it is a new entry or an offline entry.\n    this.isEditing = this.entryId !== undefined && this.entryId > 0;\n    this.fetchEntryData(true);\n  }\n  /**\n   * Check if we can leave the page or not and ask to confirm the lost of data.\n   *\n   * @returns True if we can leave, false otherwise.\n   */\n  canLeave() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.forceLeave || !_this.entry) {\n        return true;\n      }\n      const inputData = _this.editForm.value;\n      let changed = AddonModDataHelper.hasEditDataChanged(inputData, _this.fieldsArray, _this.originalData);\n      changed = changed || !_this.isEditing && _this.initialSelectedGroup != _this.selectedGroup;\n      if (changed) {\n        // Show confirmation if some data has been modified.\n        yield CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n      }\n      // Delete the local files from the tmp folder.\n      const files = yield AddonModDataHelper.getEditTmpFiles(inputData, _this.fieldsArray, _this.entry.contents);\n      CoreFileUploader.clearTmpFiles(files);\n      CoreForms.triggerFormCancelledEvent(_this.formElement, _this.siteId);\n      return true;\n    })();\n  }\n  /**\n   * Fetch the entry data.\n   *\n   * @param refresh To refresh all downloaded data.\n   * @returns Resolved when done.\n   */\n  fetchEntryData(refresh = false) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this2.database = yield AddonModData.getDatabase(_this2.courseId, _this2.moduleId);\n        _this2.title = _this2.database.name || _this2.title;\n        _this2.cssClass = 'addon-data-entries-' + _this2.database.id;\n        _this2.fieldsArray = yield AddonModData.getFields(_this2.database.id, {\n          cmId: _this2.moduleId\n        });\n        _this2.fields = CoreUtils.arrayToObject(_this2.fieldsArray, 'id');\n        const entry = yield AddonModDataHelper.fetchEntry(_this2.database, _this2.fieldsArray, _this2.entryId || 0);\n        _this2.entry = entry.entry;\n        _this2.originalData = CoreUtils.clone(_this2.entry.contents);\n        if (_this2.entryId) {\n          // Load correct group.\n          _this2.selectedGroup = _this2.entry.groupid;\n        }\n        // Check permissions when adding a new entry or offline entry.\n        if (!_this2.isEditing) {\n          var _groupInfo, _groupInfo2;\n          let haveAccess = false;\n          let groupInfo = _this2.groupInfo;\n          if (refresh) {\n            groupInfo = yield CoreGroups.getActivityGroupInfo(_this2.database.coursemodule);\n            if (groupInfo.visibleGroups && groupInfo.groups.length) {\n              // There is a bug in Moodle with All participants and visible groups (MOBILE-3597). Remove it.\n              groupInfo.groups = groupInfo.groups.filter(group => group.id !== 0);\n              groupInfo.defaultGroupId = groupInfo.groups[0].id;\n            }\n            _this2.selectedGroup = CoreGroups.validateGroupId(_this2.selectedGroup, groupInfo);\n            _this2.initialSelectedGroup = _this2.selectedGroup;\n          }\n          if ((_groupInfo = groupInfo) !== null && _groupInfo !== void 0 && _groupInfo.groups && ((_groupInfo2 = groupInfo) === null || _groupInfo2 === void 0 ? void 0 : _groupInfo2.groups.length) > 0) {\n            if (refresh) {\n              const canAddGroup = {};\n              yield Promise.all(groupInfo.groups.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator(function* (group) {\n                  const accessData = yield AddonModData.getDatabaseAccessInformation(_this2.database.id, {\n                    cmId: _this2.moduleId,\n                    groupId: group.id\n                  });\n                  canAddGroup[group.id] = accessData.canaddentry;\n                });\n                return function (_x) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n              groupInfo.groups = groupInfo.groups.filter(group => !!canAddGroup[group.id]);\n              haveAccess = canAddGroup[_this2.selectedGroup];\n            } else {\n              // Groups already filtered, so it have access.\n              haveAccess = true;\n            }\n          } else {\n            const accessData = yield AddonModData.getDatabaseAccessInformation(_this2.database.id, {\n              cmId: _this2.moduleId\n            });\n            haveAccess = accessData.canaddentry;\n          }\n          _this2.groupInfo = groupInfo;\n          if (!haveAccess) {\n            // You shall not pass, go back.\n            CoreDomUtils.showErrorModal('addon.mod_data.noaccess', true);\n            // Go back to entry list.\n            _this2.forceLeave = true;\n            CoreNavigator.back();\n            return;\n          }\n        }\n        _this2.editFormRender = _this2.displayEditFields();\n        _this2.logView();\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n      }\n      _this2.loaded = true;\n    })();\n  }\n  /**\n   * Saves data.\n   *\n   * @param e Event.\n   * @returns Resolved when done.\n   */\n  save(e) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      e.preventDefault();\n      e.stopPropagation();\n      const inputData = _this3.editForm.value;\n      try {\n        var _this3$entry;\n        let changed = AddonModDataHelper.hasEditDataChanged(inputData, _this3.fieldsArray, ((_this3$entry = _this3.entry) === null || _this3$entry === void 0 ? void 0 : _this3$entry.contents) || {});\n        changed = changed || !_this3.isEditing && _this3.initialSelectedGroup != _this3.selectedGroup;\n        if (!changed) {\n          if (_this3.entryId) {\n            yield _this3.returnToEntryList();\n            return;\n          }\n          // New entry, no changes means no field filled, warn the user.\n          throw new CoreError(Translate.instant('addon.mod_data.emptyaddform'));\n        }\n        const modal = yield CoreDomUtils.showModalLoading('core.sending', true);\n        // Create an ID to assign files.\n        const entryTemp = _this3.entryId ? _this3.entryId : -Date.now();\n        let editData = [];\n        try {\n          try {\n            var _this3$entry2;\n            editData = yield AddonModDataHelper.getEditDataFromForm(inputData, _this3.fieldsArray, _this3.database.id, entryTemp, ((_this3$entry2 = _this3.entry) === null || _this3$entry2 === void 0 ? void 0 : _this3$entry2.contents) || {}, _this3.offline);\n          } catch (error) {\n            var _this3$entry3;\n            if (_this3.offline || CoreUtils.isWebServiceError(error)) {\n              throw error;\n            }\n            // Cannot submit in online, prepare for offline usage.\n            _this3.offline = true;\n            editData = yield AddonModDataHelper.getEditDataFromForm(inputData, _this3.fieldsArray, _this3.database.id, entryTemp, ((_this3$entry3 = _this3.entry) === null || _this3$entry3 === void 0 ? void 0 : _this3$entry3.contents) || {}, _this3.offline);\n          }\n          if (editData.length <= 0) {\n            // No field filled, warn the user.\n            throw new CoreError(Translate.instant('addon.mod_data.emptyaddform'));\n          }\n          let updateEntryResult;\n          if (_this3.isEditing) {\n            updateEntryResult = yield AddonModData.editEntry(_this3.database.id, _this3.entryId, _this3.courseId, editData, _this3.fieldsArray, _this3.siteId, _this3.offline);\n          } else {\n            updateEntryResult = yield AddonModData.addEntry(_this3.database.id, entryTemp, _this3.courseId, editData, _this3.selectedGroup, _this3.fieldsArray, _this3.siteId, _this3.offline);\n          }\n          // This is done if entry is updated when editing or creating if not.\n          if (_this3.isEditing && 'updated' in updateEntryResult && updateEntryResult.updated || !_this3.isEditing && 'newentryid' in updateEntryResult && updateEntryResult.newentryid) {\n            CoreForms.triggerFormSubmittedEvent(_this3.formElement, updateEntryResult.sent, _this3.siteId);\n            const promises = [];\n            if (updateEntryResult.sent) {\n              CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, {\n                module: 'data'\n              });\n              if (_this3.isEditing) {\n                promises.push(AddonModData.invalidateEntryData(_this3.database.id, _this3.entryId, _this3.siteId));\n              }\n              promises.push(AddonModData.invalidateEntriesData(_this3.database.id, _this3.siteId));\n            }\n            try {\n              yield Promise.all(promises);\n              CoreEvents.trigger(AddonModDataProvider.ENTRY_CHANGED, {\n                dataId: _this3.database.id,\n                entryId: _this3.entryId\n              }, _this3.siteId);\n            } finally {\n              _this3.returnToEntryList();\n            }\n          } else {\n            var _updateEntryResult$ge;\n            _this3.errors = {};\n            if (updateEntryResult.fieldnotifications) {\n              updateEntryResult.fieldnotifications.forEach(fieldNotif => {\n                const field = _this3.fieldsArray.find(field => field.name == fieldNotif.fieldname);\n                if (field) {\n                  _this3.errors[field.id] = fieldNotif.notification;\n                }\n              });\n            }\n            _this3.jsData.errors = _this3.errors;\n            _this3.scrollToFirstError();\n            if ((_updateEntryResult$ge = updateEntryResult.generalnotifications) !== null && _updateEntryResult$ge !== void 0 && _updateEntryResult$ge.length) {\n              CoreDomUtils.showAlertWithOptions({\n                header: Translate.instant('core.notice'),\n                message: CoreTextUtils.buildMessage(updateEntryResult.generalnotifications),\n                buttons: [Translate.instant('core.ok')]\n              });\n            }\n          }\n        } finally {\n          modal.dismiss();\n        }\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Cannot edit entry', true);\n      }\n    })();\n  }\n  /**\n   * Set group to see the database.\n   *\n   * @param groupId Group identifier to set.\n   * @returns Resolved when done.\n   */\n  setGroup(groupId) {\n    this.selectedGroup = groupId;\n    this.loaded = false;\n    return this.fetchEntryData();\n  }\n  /**\n   * Displays Edit Search Fields.\n   *\n   * @returns Generated HTML.\n   */\n  displayEditFields() {\n    var _this$entry;\n    this.jsData = {\n      fields: this.fields,\n      contents: CoreUtils.clone((_this$entry = this.entry) === null || _this$entry === void 0 ? void 0 : _this$entry.contents) || {},\n      form: this.editForm,\n      database: this.database,\n      errors: this.errors,\n      onFieldInit: data => this.onFieldInit(data)\n    };\n    let template = AddonModDataHelper.getTemplate(this.database, AddonModDataTemplateType.ADD, this.fieldsArray);\n    // Replace the fields found on template.\n    this.fieldsArray.forEach(field => {\n      let replace = '[[' + field.name + ']]';\n      replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n      let replaceRegEx = new RegExp(replace, 'gi');\n      // Replace field by a generic directive.\n      const render = '<addon-mod-data-field-plugin [class.has-errors]=\"!!errors[' + field.id + ']\" mode=\"edit\" \\\n                [field]=\"fields[' + field.id + ']\" [value]=\"contents[' + field.id + ']\" [form]=\"form\" [database]=\"database\" \\\n                [error]=\"errors[' + field.id + ']\" (onFieldInit)=\"onFieldInit($event)\"></addon-mod-data-field-plugin>';\n      template = template.replace(replaceRegEx, render);\n      // Replace the field id tag.\n      replace = '[[' + field.name + '#id]]';\n      replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n      replaceRegEx = new RegExp(replace, 'gi');\n      template = template.replace(replaceRegEx, 'field_' + field.id);\n      // Replace the field name tag.\n      replace = '[[' + field.name + '#name]]';\n      replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n      replaceRegEx = new RegExp(replace, 'gi');\n      template = template.replace(replaceRegEx, field.name);\n      // Replace the field description tag.\n      replace = '[[' + field.name + '#description]]';\n      replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n      replaceRegEx = new RegExp(replace, 'gi');\n      template = template.replace(replaceRegEx, field.description);\n    });\n    const regex = new RegExp('##otherfields##', 'gi');\n    if (template.match(regex)) {\n      const unusedFields = this.fieldsArray.filter(field => !template.includes(`[field]=\"fields[${field.id}]`)).map(field => `<p><strong>${field.name}</strong></p>` + '<p><addon-mod-data-field-plugin [class.has-errors]=\"!!errors[' + field.id + ']\" mode=\"edit\" \\\n                [field]=\"fields[' + field.id + ']\" [value]=\"contents[' + field.id + ']\" [form]=\"form\" [database]=\"database\" \\\n                [error]=\"errors[' + field.id + ']\" (onFieldInit)=\"onFieldInit($event)\"></addon-mod-data-field-plugin><p>');\n      template = template.replace(regex, unusedFields.join(''));\n    }\n    // Editing tags is not supported.\n    const replaceRegEx = new RegExp('##tags##', 'gi');\n    const message = CoreTag.areTagsAvailableInSite() ? '<p class=\"item-dimmed\">{{ \\'addon.mod_data.edittagsnotsupported\\' | translate }}</p>' : '';\n    template = template.replace(replaceRegEx, message);\n    return template;\n  }\n  /**\n   * A certain value has been initialized.\n   *\n   * @param data Data.\n   */\n  onFieldInit(data) {\n    if (!this.originalData[data.fieldid]) {\n      var _this$entry$id, _this$entry2, _data$content, _data$content2, _data$content3, _data$content4, _data$files;\n      this.originalData[data.fieldid] = {\n        id: 0,\n        recordid: (_this$entry$id = (_this$entry2 = this.entry) === null || _this$entry2 === void 0 ? void 0 : _this$entry2.id) !== null && _this$entry$id !== void 0 ? _this$entry$id : 0,\n        fieldid: data.fieldid,\n        content: data.content,\n        content1: (_data$content = data.content1) !== null && _data$content !== void 0 ? _data$content : null,\n        content2: (_data$content2 = data.content2) !== null && _data$content2 !== void 0 ? _data$content2 : null,\n        content3: (_data$content3 = data.content3) !== null && _data$content3 !== void 0 ? _data$content3 : null,\n        content4: (_data$content4 = data.content4) !== null && _data$content4 !== void 0 ? _data$content4 : null,\n        files: (_data$files = data.files) !== null && _data$files !== void 0 ? _data$files : []\n      };\n    }\n  }\n  /**\n   * Return to the entry list (previous page) discarding temp data.\n   *\n   * @returns Resolved when done.\n   */\n  returnToEntryList() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const inputData = _this4.editForm.value;\n      try {\n        var _this4$entry;\n        const files = yield AddonModDataHelper.getEditTmpFiles(inputData, _this4.fieldsArray, ((_this4$entry = _this4.entry) === null || _this4$entry === void 0 ? void 0 : _this4$entry.contents) || {});\n        CoreFileUploader.clearTmpFiles(files);\n      } finally {\n        // Go back to entry list.\n        _this4.forceLeave = true;\n        CoreNavigator.back();\n      }\n    })();\n  }\n  /**\n   * Scroll to first error or to the top if not found.\n   */\n  scrollToFirstError() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const scrolled = yield CoreDom.scrollToElement(_this5.formElement.nativeElement, '.addon-data-error');\n      if (!scrolled) {\n        var _this5$content;\n        (_this5$content = _this5.content) === null || _this5$content === void 0 || _this5$content.scrollToTop();\n      }\n    })();\n  }\n}\n_class = AddonModDataEditPage;\n_class.ɵfac = function AddonModDataEditPage_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-mod-data-edit\"]],\n  viewQuery: function AddonModDataEditPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(IonContent, 5);\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formElement = _t.first);\n    }\n  },\n  decls: 14,\n  vars: 12,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [\"slot\", \"end\"], [\"fill\", \"clear\", 3, \"click\", 4, \"ngIf\"], [3, \"hideUntil\"], [3, \"groupInfo\", \"selected\", \"courseId\", \"selectedChange\"], [3, \"class\", 4, \"ngIf\"], [\"fill\", \"clear\", 3, \"click\"], [3, \"css\", \"prefix\"], [3, \"formGroup\", \"ngSubmit\"], [\"editFormEl\", \"\"], [3, \"text\", \"jsData\", \"extraImports\"]],\n  template: function AddonModDataEditPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵelement(7, \"core-format-text\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"ion-buttons\", 3);\n      i0.ɵɵtemplate(9, AddonModDataEditPage_ion_button_9_Template, 3, 3, \"ion-button\", 4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"ion-content\")(11, \"core-loading\", 5)(12, \"core-group-selector\", 6);\n      i0.ɵɵlistener(\"selectedChange\", function AddonModDataEditPage_Template_core_group_selector_selectedChange_12_listener($event) {\n        return ctx.selectedGroup = $event;\n      })(\"selectedChange\", function AddonModDataEditPage_Template_core_group_selector_selectedChange_12_listener() {\n        return ctx.setGroup(ctx.selectedGroup);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, AddonModDataEditPage_div_13_Template, 5, 9, \"div\", 7);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 10, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"text\", ctx.title)(\"contextInstanceId\", ctx.moduleId)(\"courseId\", ctx.courseId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.entry);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"groupInfo\", ctx.groupInfo)(\"selected\", ctx.selectedGroup)(\"courseId\", ctx.database == null ? null : ctx.database.course);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.database);\n    }\n  },\n  dependencies: [i1.NgIf, i2.CoreGroupSelectorComponent, i3.CoreLoadingComponent, i4.CoreStyleComponent, i5.CoreFormatTextDirective, i6.CoreContentDirective, i7.CoreUpdateNonReactiveAttributesDirective, i8.ɵNgNoValidate, i8.NgControlStatusGroup, i9.IonButton, i9.IonButtons, i9.IonContent, i9.IonHeader, i9.IonTitle, i9.IonToolbar, i9.IonBackButton, i8.FormGroupDirective, i10.CoreCompileHtmlComponent, i11.TranslatePipe],\n  styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[_nghost-%COMP%] {\\n  --border-color: var(--stroke);\\n}\\n\\n.addon-data-contents[_ngcontent-%COMP%] {\\n  overflow: visible;\\n  white-space: normal;\\n  word-break: break-word;\\n  padding: 16px;\\n  background-color: var(--ion-item-background);\\n  border-bottom: 1px solid var(--border-color);\\n}\\n.addon-data-contents[_ngcontent-%COMP%]     table, .addon-data-contents[_ngcontent-%COMP%]     tbody {\\n  display: block;\\n}\\n.addon-data-contents[_ngcontent-%COMP%]     tr {\\n  display: flex;\\n  flex-wrap: wrap;\\n  padding: 0;\\n}\\n@media (max-width: 575.98px) {\\n  .addon-data-contents[_ngcontent-%COMP%]     tr {\\n    flex-direction: column;\\n  }\\n}\\n.addon-data-contents[_ngcontent-%COMP%]     td, .addon-data-contents[_ngcontent-%COMP%]     th {\\n  -webkit-padding-start: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\\n  padding-inline-start: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\\n  -webkit-padding-end: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\\n  padding-inline-end: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\\n  padding-top: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\\n  padding-bottom: var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));\\n  margin-left: 0;\\n  margin-right: 0;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  box-sizing: border-box;\\n  position: relative;\\n  flex-basis: 0;\\n  flex-grow: 1;\\n  width: 100%;\\n  max-width: 100%;\\n  min-height: auto;\\n}\\n@media (min-width: 576px) {\\n  .addon-data-contents[_ngcontent-%COMP%]     td, .addon-data-contents[_ngcontent-%COMP%]     th {\\n    -webkit-padding-start: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\\n    padding-inline-start: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\\n    -webkit-padding-end: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\\n    padding-inline-end: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\\n    padding-top: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\\n    padding-bottom: var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));\\n  }\\n}\\n@media (min-width: 768px) {\\n  .addon-data-contents[_ngcontent-%COMP%]     td, .addon-data-contents[_ngcontent-%COMP%]     th {\\n    -webkit-padding-start: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\\n    padding-inline-start: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\\n    -webkit-padding-end: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\\n    padding-inline-end: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\\n    padding-top: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\\n    padding-bottom: var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));\\n  }\\n}\\n@media (min-width: 992px) {\\n  .addon-data-contents[_ngcontent-%COMP%]     td, .addon-data-contents[_ngcontent-%COMP%]     th {\\n    -webkit-padding-start: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\\n    padding-inline-start: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\\n    -webkit-padding-end: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\\n    padding-inline-end: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\\n    padding-top: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\\n    padding-bottom: var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));\\n  }\\n}\\n@media (min-width: 1200px) {\\n  .addon-data-contents[_ngcontent-%COMP%]     td, .addon-data-contents[_ngcontent-%COMP%]     th {\\n    -webkit-padding-start: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\\n    padding-inline-start: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\\n    -webkit-padding-end: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\\n    padding-inline-end: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\\n    padding-top: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\\n    padding-bottom: var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));\\n  }\\n}\\n.addon-data-contents[_ngcontent-%COMP%]     address, .addon-data-contents[_ngcontent-%COMP%]     article, .addon-data-contents[_ngcontent-%COMP%]     aside, .addon-data-contents[_ngcontent-%COMP%]     blockquote, .addon-data-contents[_ngcontent-%COMP%]     canvas, .addon-data-contents[_ngcontent-%COMP%]     dd, .addon-data-contents[_ngcontent-%COMP%]     div, .addon-data-contents[_ngcontent-%COMP%]     dl, .addon-data-contents[_ngcontent-%COMP%]     dt, .addon-data-contents[_ngcontent-%COMP%]     fieldset, .addon-data-contents[_ngcontent-%COMP%]     figcaption, .addon-data-contents[_ngcontent-%COMP%]     figure, .addon-data-contents[_ngcontent-%COMP%]     footer, .addon-data-contents[_ngcontent-%COMP%]     form, .addon-data-contents[_ngcontent-%COMP%]     h1, .addon-data-contents[_ngcontent-%COMP%]     h2, .addon-data-contents[_ngcontent-%COMP%]     h3, .addon-data-contents[_ngcontent-%COMP%]     h4, .addon-data-contents[_ngcontent-%COMP%]     h5, .addon-data-contents[_ngcontent-%COMP%]     h6, .addon-data-contents[_ngcontent-%COMP%]     header, .addon-data-contents[_ngcontent-%COMP%]     li, .addon-data-contents[_ngcontent-%COMP%]     main, .addon-data-contents[_ngcontent-%COMP%]     nav, .addon-data-contents[_ngcontent-%COMP%]     noscript, .addon-data-contents[_ngcontent-%COMP%]     ol, .addon-data-contents[_ngcontent-%COMP%]     p, .addon-data-contents[_ngcontent-%COMP%]     pre, .addon-data-contents[_ngcontent-%COMP%]     section, .addon-data-contents[_ngcontent-%COMP%]     table, .addon-data-contents[_ngcontent-%COMP%]     tfoot, .addon-data-contents[_ngcontent-%COMP%]     ul, .addon-data-contents[_ngcontent-%COMP%]     video {\\n  width: auto !important;\\n  height: auto !important;\\n  min-width: auto !important;\\n  min-height: auto !important;\\n  max-height: none !important;\\n}\\n.addon-data-contents[_ngcontent-%COMP%]     hr {\\n  border-top: 1px solid var(--stroke);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[_nghost-%COMP%] {\\n  --input-border-color: var(--stroke);\\n  --input-border-width: 1px;\\n  --select-border-width: 0px;\\n}\\n[_nghost-%COMP%]     table {\\n  width: 100%;\\n}\\n[_nghost-%COMP%]     td {\\n  vertical-align: top;\\n}\\n[_nghost-%COMP%]     .addon-data-latlong {\\n  display: flex;\\n}\\n[_nghost-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%] {\\n  padding: 16px;\\n  width: 100%;\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%], [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%] {\\n  background-color: var(--ion-item-background);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-input, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-input {\\n  border-bottom: var(--input-border-width) solid var(--input-border-color);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-input.has-focus, [_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-input.has-focus.ion-valid, [_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-input.ion-touched.ion-invalid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-input.has-focus, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-input.has-focus.ion-valid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-input.ion-touched.ion-invalid {\\n  --input-border-width: 2px;\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-input.has-focus, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-input.has-focus {\\n  --input-border-color: var(--primary);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-input.has-focus.ion-valid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-input.has-focus.ion-valid {\\n  --input-border-color: var(--success);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-input.ion-touched.ion-invalid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-input.ion-touched.ion-invalid {\\n  --input-border-color: var(--danger);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     core-rich-text-editor, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     core-rich-text-editor {\\n  border-bottom: var(--select-border-width) solid var(--input-border-color);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     core-rich-text-editor.ion-touched.ng-valid, [_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     core-rich-text-editor.ion-touched.ng-invalid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     core-rich-text-editor.ion-touched.ng-valid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     core-rich-text-editor.ion-touched.ng-invalid {\\n  --select-border-width: 2px;\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     core-rich-text-editor.ion-touched.ng-valid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     core-rich-text-editor.ion-touched.ng-valid {\\n  --input-border-color: var(--success);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     core-rich-text-editor.ion-touched.ng-invalid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     core-rich-text-editor.ion-touched.ng-invalid {\\n  --input-border-color: var(--danger);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-select, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-select {\\n  border-bottom: var(--select-border-width) solid var(--input-border-color);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-select.ion-touched.ion-valid, [_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-select.ion-touched.ion-invalid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-select.ion-touched.ion-valid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-select.ion-touched.ion-invalid {\\n  --select-border-width: 2px;\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-select.ion-touched.ion-valid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-select.ion-touched.ion-valid {\\n  --input-border-color: var(--success);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     ion-select.ion-touched.ion-invalid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     ion-select.ion-touched.ion-invalid {\\n  --input-border-color: var(--danger);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     .has-errors ion-input.ion-invalid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     .has-errors ion-input.ion-invalid {\\n  --input-border-width: 2px;\\n  --input-border-color: var(--danger);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     .has-errors ion-select.ion-invalid, [_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     .has-errors core-rich-text-editor.ng-invalid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     .has-errors ion-select.ion-invalid, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     .has-errors core-rich-text-editor.ng-invalid {\\n  --select-border-width: 2px;\\n  --input-border-color: var(--danger);\\n}\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     .core-mark-required, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     .core-mark-required {\\n  float: right;\\n}\\n[dir=rtl][_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     .core-mark-required, [dir=rtl]   [_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     .core-mark-required, [dir=rtl][_nghost-%COMP%] form   .addon-data-advanced-search[_ngcontent-%COMP%]     .core-mark-required, [dir=rtl]   [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     .core-mark-required {\\n  float: left;\\n}\\n\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     .core-mark-required:dir(rtl), [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     .core-mark-required:dir(rtl) {\\n  float: left;\\n}\\n\\n[_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     .core-mark-required + ion-input, [_nghost-%COMP%]   .addon-data-contents[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]     .core-mark-required + ion-select, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     .core-mark-required + ion-input, [_nghost-%COMP%]   form[_ngcontent-%COMP%]   .addon-data-advanced-search[_ngcontent-%COMP%]     .core-mark-required + ion-select {\\n  -webkit-padding-end: 20px;\\n  padding-inline-end: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n});","map":{"version":3,"names":["FormGroup","CoreError","CoreFileUploader","CoreTag","IonContent","CoreGroups","CoreNavigator","CoreSites","CoreDomUtils","CoreForms","CoreUtils","Translate","CoreEvents","AddonModDataComponentsCompileModule","AddonModDataProvider","AddonModData","AddonModDataTemplateType","AddonModDataHelper","CoreDom","CoreTextUtils","CoreTime","CoreAnalytics","CoreAnalyticsEventType","i0","ɵɵelementStart","ɵɵlistener","AddonModDataEditPage_ion_button_9_Template_ion_button_click_0_listener","$event","ɵɵrestoreView","_r3","ctx_r2","ɵɵnextContext","ɵɵresetView","save","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind1","ɵɵelement","AddonModDataEditPage_div_13_Template_form_ngSubmit_2_listener","_r6","ctx_r5","ɵɵclassMapInterpolate1","ctx_r1","cssClass","ɵɵpropertyInterpolate1","ɵɵproperty","database","csstemplate","editForm","editFormRender","jsData","extraImports","AddonModDataEditPage","constructor","fieldsArray","offline","forceLeave","isEditing","originalData","fields","moduleId","title","component","COMPONENT","loaded","selectedGroup","errors","siteId","getCurrentSiteId","logView","once","logEvent","type","VIEW_ITEM","ws","name","data","databaseid","id","category","url","entryId","ngOnInit","getRequiredRouteNumberParam","courseId","getRouteParam","getRouteNumberParam","undefined","error","showErrorModal","back","fetchEntryData","canLeave","_this","_asyncToGenerator","entry","inputData","value","changed","hasEditDataChanged","initialSelectedGroup","showConfirm","instant","files","getEditTmpFiles","contents","clearTmpFiles","triggerFormCancelledEvent","formElement","refresh","_this2","getDatabase","getFields","cmId","arrayToObject","fetchEntry","clone","groupid","_groupInfo","_groupInfo2","haveAccess","groupInfo","getActivityGroupInfo","coursemodule","visibleGroups","groups","length","filter","group","defaultGroupId","validateGroupId","canAddGroup","Promise","all","map","_ref","accessData","getDatabaseAccessInformation","groupId","canaddentry","_x","apply","arguments","displayEditFields","showErrorModalDefault","e","_this3","preventDefault","stopPropagation","_this3$entry","returnToEntryList","modal","showModalLoading","entryTemp","Date","now","editData","_this3$entry2","getEditDataFromForm","_this3$entry3","isWebServiceError","updateEntryResult","editEntry","addEntry","updated","newentryid","triggerFormSubmittedEvent","sent","promises","trigger","ACTIVITY_DATA_SENT","module","push","invalidateEntryData","invalidateEntriesData","ENTRY_CHANGED","dataId","_updateEntryResult$ge","fieldnotifications","forEach","fieldNotif","field","find","fieldname","notification","scrollToFirstError","generalnotifications","showAlertWithOptions","header","message","buildMessage","buttons","dismiss","setGroup","_this$entry","form","onFieldInit","template","getTemplate","ADD","replace","replaceRegEx","RegExp","render","description","regex","match","unusedFields","includes","join","areTagsAvailableInSite","fieldid","_this$entry$id","_this$entry2","_data$content","_data$content2","_data$content3","_data$content4","_data$files","recordid","content","content1","content2","content3","content4","_this4","_this4$entry","_this5","scrolled","scrollToElement","nativeElement","_this5$content","scrollToTop","selectors","viewQuery","AddonModDataEditPage_Query","rf","ctx","ɵɵtemplate","AddonModDataEditPage_ion_button_9_Template","AddonModDataEditPage_Template_core_group_selector_selectedChange_12_listener","AddonModDataEditPage_div_13_Template","course"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/pages/edit/edit.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/pages/edit/edit.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild, ElementRef, Type } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreTag } from '@features/tag/services/tag';\nimport { IonContent } from '@ionic/angular';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreForms } from '@singletons/form';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModDataComponentsCompileModule } from '../../components/components-compile.module';\nimport {\n    AddonModDataData,\n    AddonModDataField,\n    AddonModDataProvider,\n    AddonModData,\n    AddonModDataTemplateType,\n    AddonModDataEntry,\n    AddonModDataEntryFields,\n    AddonModDataEditEntryResult,\n    AddonModDataAddEntryResult,\n    AddonModDataEntryWSField,\n} from '../../services/data';\nimport { AddonModDataHelper } from '../../services/data-helper';\nimport { CoreDom } from '@singletons/dom';\nimport { AddonModDataEntryFieldInitialized } from '../../classes/base-field-plugin-component';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays the view edit page.\n */\n@Component({\n    selector: 'page-addon-mod-data-edit',\n    templateUrl: 'edit.html',\n    styleUrls: ['../../data.scss', '../../data-forms.scss'],\n})\nexport class AddonModDataEditPage implements OnInit {\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild('editFormEl') formElement!: ElementRef;\n\n    protected entryId?: number;\n    protected fieldsArray: AddonModDataField[] = [];\n    protected siteId: string;\n    protected offline = false;\n    protected forceLeave = false; // To allow leaving the page without checking for changes.\n    protected initialSelectedGroup?: number;\n    protected isEditing = false;\n    protected originalData: AddonModDataEntryFields = {};\n    protected logView: () => void;\n\n    entry?: AddonModDataEntry;\n    fields: Record<number, AddonModDataField> = {};\n    courseId!: number;\n    moduleId = 0;\n    database?: AddonModDataData;\n    title = '';\n    component = AddonModDataProvider.COMPONENT;\n    loaded = false;\n    selectedGroup = 0;\n    cssClass = '';\n    groupInfo?: CoreGroupInfo;\n    editFormRender = '';\n    editForm: FormGroup;\n    extraImports: Type<unknown>[] = [AddonModDataComponentsCompileModule];\n    jsData?: {\n        fields: Record<number, AddonModDataField>;\n        database?: AddonModDataData;\n        contents: AddonModDataEntryFields;\n        errors?: Record<number, string>;\n        form: FormGroup;\n        onFieldInit: (data: AddonModDataEntryFieldInitialized) => void;\n    };\n\n    errors: Record<number, string> = {};\n\n    constructor() {\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.editForm = new FormGroup({});\n\n        this.logView = CoreTime.once(() => {\n            if (!this.database) {\n                return;\n            }\n\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM,\n                ws: this.isEditing ? 'mod_data_update_entry' : 'mod_data_add_entry',\n                name: this.title,\n                data: { databaseid: this.database.id, category: 'data' },\n                url: '/mod/data/edit.php?' + (this.isEditing ? `d=${this.database.id}&rid=${this.entryId}` : `id=${this.moduleId}`),\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        try {\n            this.moduleId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.title = CoreNavigator.getRouteParam<string>('title') || '';\n            this.entryId = CoreNavigator.getRouteNumberParam('entryId') || undefined;\n            this.selectedGroup = CoreNavigator.getRouteNumberParam('group') || 0;\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        // If entryId is lower than 0 or null, it is a new entry or an offline entry.\n        this.isEditing = this.entryId !== undefined && this.entryId > 0;\n\n        this.fetchEntryData(true);\n    }\n\n    /**\n     * Check if we can leave the page or not and ask to confirm the lost of data.\n     *\n     * @returns True if we can leave, false otherwise.\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.forceLeave || !this.entry) {\n            return true;\n        }\n\n        const inputData = this.editForm.value;\n\n        let changed = AddonModDataHelper.hasEditDataChanged(inputData, this.fieldsArray, this.originalData);\n        changed = changed || (!this.isEditing && this.initialSelectedGroup != this.selectedGroup);\n\n        if (changed) {\n            // Show confirmation if some data has been modified.\n            await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n        }\n\n        // Delete the local files from the tmp folder.\n        const files = await AddonModDataHelper.getEditTmpFiles(inputData, this.fieldsArray, this.entry!.contents);\n        CoreFileUploader.clearTmpFiles(files);\n\n        CoreForms.triggerFormCancelledEvent(this.formElement, this.siteId);\n\n        return true;\n    }\n\n    /**\n     * Fetch the entry data.\n     *\n     * @param refresh To refresh all downloaded data.\n     * @returns Resolved when done.\n     */\n    protected async fetchEntryData(refresh = false): Promise<void> {\n        try {\n            this.database = await AddonModData.getDatabase(this.courseId, this.moduleId);\n            this.title = this.database.name || this.title;\n            this.cssClass = 'addon-data-entries-' + this.database.id;\n\n            this.fieldsArray = await AddonModData.getFields(this.database.id, { cmId: this.moduleId });\n            this.fields = CoreUtils.arrayToObject(this.fieldsArray, 'id');\n\n            const entry = await AddonModDataHelper.fetchEntry(this.database, this.fieldsArray, this.entryId || 0);\n            this.entry = entry.entry;\n            this.originalData = CoreUtils.clone(this.entry.contents);\n\n            if (this.entryId) {\n                // Load correct group.\n                this.selectedGroup = this.entry.groupid;\n            }\n\n            // Check permissions when adding a new entry or offline entry.\n            if (!this.isEditing) {\n                let haveAccess = false;\n                let groupInfo: CoreGroupInfo | undefined = this.groupInfo;\n\n                if (refresh) {\n                    groupInfo = await CoreGroups.getActivityGroupInfo(this.database.coursemodule);\n                    if (groupInfo.visibleGroups && groupInfo.groups.length) {\n                        // There is a bug in Moodle with All participants and visible groups (MOBILE-3597). Remove it.\n                        groupInfo.groups = groupInfo.groups.filter(group => group.id !== 0);\n                        groupInfo.defaultGroupId = groupInfo.groups[0].id;\n                    }\n\n                    this.selectedGroup = CoreGroups.validateGroupId(this.selectedGroup, groupInfo);\n                    this.initialSelectedGroup = this.selectedGroup;\n                }\n\n                if (groupInfo?.groups && groupInfo?.groups.length > 0) {\n                    if (refresh) {\n                        const canAddGroup: Record<number, boolean> = {};\n\n                        await Promise.all(groupInfo.groups.map(async (group) => {\n                            const accessData = await AddonModData.getDatabaseAccessInformation(this.database!.id, {\n                                cmId: this.moduleId,\n                                groupId: group.id,\n                            });\n\n                            canAddGroup[group.id] = accessData.canaddentry;\n                        }));\n\n                        groupInfo.groups = groupInfo.groups.filter((group) => !!canAddGroup[group.id]);\n\n                        haveAccess = canAddGroup[this.selectedGroup];\n                    } else {\n                        // Groups already filtered, so it have access.\n                        haveAccess = true;\n                    }\n                } else {\n                    const accessData = await AddonModData.getDatabaseAccessInformation(this.database.id, { cmId: this.moduleId });\n                    haveAccess = accessData.canaddentry;\n                }\n\n                this.groupInfo = groupInfo;\n\n                if (!haveAccess) {\n                    // You shall not pass, go back.\n                    CoreDomUtils.showErrorModal('addon.mod_data.noaccess', true);\n\n                    // Go back to entry list.\n                    this.forceLeave = true;\n                    CoreNavigator.back();\n\n                    return;\n                }\n            }\n\n            this.editFormRender = this.displayEditFields();\n            this.logView();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        }\n\n        this.loaded = true;\n    }\n\n    /**\n     * Saves data.\n     *\n     * @param e Event.\n     * @returns Resolved when done.\n     */\n    async save(e: Event): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const inputData = this.editForm.value;\n\n        try {\n            let changed = AddonModDataHelper.hasEditDataChanged(\n                inputData,\n                this.fieldsArray,\n                this.entry?.contents || {},\n            );\n\n            changed = changed || (!this.isEditing && this.initialSelectedGroup != this.selectedGroup);\n            if (!changed) {\n                if (this.entryId) {\n                    await this.returnToEntryList();\n\n                    return;\n                }\n\n                // New entry, no changes means no field filled, warn the user.\n                throw new CoreError(Translate.instant('addon.mod_data.emptyaddform'));\n            }\n\n            const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n            // Create an ID to assign files.\n            const entryTemp = this.entryId ? this.entryId : - (Date.now());\n            let editData: AddonModDataEntryWSField[] = [];\n\n            try {\n                try {\n                    editData = await AddonModDataHelper.getEditDataFromForm(\n                        inputData,\n                        this.fieldsArray,\n                        this.database!.id,\n                        entryTemp,\n                        this.entry?.contents || {},\n                        this.offline,\n                    );\n                } catch (error) {\n                    if (this.offline || CoreUtils.isWebServiceError(error)) {\n                        throw error;\n                    }\n\n                    // Cannot submit in online, prepare for offline usage.\n                    this.offline = true;\n\n                    editData = await AddonModDataHelper.getEditDataFromForm(\n                        inputData,\n                        this.fieldsArray,\n                        this.database!.id,\n                        entryTemp,\n                        this.entry?.contents || {},\n                        this.offline,\n                    );\n                }\n\n                if (editData.length <= 0) {\n                    // No field filled, warn the user.\n                    throw new CoreError(Translate.instant('addon.mod_data.emptyaddform'));\n                }\n\n                let updateEntryResult: AddonModDataEditEntryResult | AddonModDataAddEntryResult | undefined;\n                if (this.isEditing) {\n                    updateEntryResult = await AddonModData.editEntry(\n                        this.database!.id,\n                        this.entryId!,\n                        this.courseId,\n                        editData,\n                        this.fieldsArray,\n                        this.siteId,\n                        this.offline,\n                    );\n                } else {\n                    updateEntryResult = await AddonModData.addEntry(\n                        this.database!.id,\n                        entryTemp,\n                        this.courseId,\n                        editData,\n                        this.selectedGroup,\n                        this.fieldsArray,\n                        this.siteId,\n                        this.offline,\n                    );\n                }\n\n                // This is done if entry is updated when editing or creating if not.\n                if ((this.isEditing && 'updated' in updateEntryResult && updateEntryResult.updated) ||\n                    (!this.isEditing && 'newentryid' in updateEntryResult && updateEntryResult.newentryid)) {\n\n                    CoreForms.triggerFormSubmittedEvent(this.formElement, updateEntryResult.sent, this.siteId);\n\n                    const promises: Promise<void>[] = [];\n\n                    if (updateEntryResult.sent) {\n                        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'data' });\n\n                        if (this.isEditing) {\n                            promises.push(AddonModData.invalidateEntryData(this.database!.id, this.entryId!, this.siteId));\n                        }\n                        promises.push(AddonModData.invalidateEntriesData(this.database!.id, this.siteId));\n                    }\n\n                    try {\n                        await Promise.all(promises);\n                        CoreEvents.trigger(\n                            AddonModDataProvider.ENTRY_CHANGED,\n                            { dataId: this.database!.id, entryId: this.entryId },\n\n                            this.siteId,\n                        );\n                    } finally {\n                        this.returnToEntryList();\n                    }\n                } else {\n                    this.errors = {};\n                    if (updateEntryResult.fieldnotifications) {\n                        updateEntryResult.fieldnotifications.forEach((fieldNotif) => {\n                            const field = this.fieldsArray.find((field) => field.name == fieldNotif.fieldname);\n                            if (field) {\n                                this.errors[field.id] = fieldNotif.notification;\n                            }\n                        });\n                    }\n\n                    this.jsData!.errors = this.errors;\n\n                    this.scrollToFirstError();\n\n                    if (updateEntryResult.generalnotifications?.length) {\n                        CoreDomUtils.showAlertWithOptions({\n                            header: Translate.instant('core.notice'),\n                            message: CoreTextUtils.buildMessage(updateEntryResult.generalnotifications),\n                            buttons: [Translate.instant('core.ok')],\n                        });\n                    }\n                }\n            } finally {\n                modal.dismiss();\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Cannot edit entry', true);\n        }\n    }\n\n    /**\n     * Set group to see the database.\n     *\n     * @param groupId Group identifier to set.\n     * @returns Resolved when done.\n     */\n    setGroup(groupId: number): Promise<void> {\n        this.selectedGroup = groupId;\n        this.loaded = false;\n\n        return this.fetchEntryData();\n    }\n\n    /**\n     * Displays Edit Search Fields.\n     *\n     * @returns Generated HTML.\n     */\n    protected displayEditFields(): string {\n        this.jsData = {\n            fields: this.fields,\n            contents: CoreUtils.clone(this.entry?.contents) || {},\n            form: this.editForm,\n            database: this.database,\n            errors: this.errors,\n            onFieldInit: (data) => this.onFieldInit(data),\n        };\n\n        let template = AddonModDataHelper.getTemplate(this.database!, AddonModDataTemplateType.ADD, this.fieldsArray);\n\n        // Replace the fields found on template.\n        this.fieldsArray.forEach((field) => {\n            let replace = '[[' + field.name + ']]';\n            replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n            let replaceRegEx = new RegExp(replace, 'gi');\n\n            // Replace field by a generic directive.\n            const render = '<addon-mod-data-field-plugin [class.has-errors]=\"!!errors[' + field.id + ']\" mode=\"edit\" \\\n                [field]=\"fields[' + field.id + ']\" [value]=\"contents[' + field.id + ']\" [form]=\"form\" [database]=\"database\" \\\n                [error]=\"errors[' + field.id + ']\" (onFieldInit)=\"onFieldInit($event)\"></addon-mod-data-field-plugin>';\n            template = template.replace(replaceRegEx, render);\n\n            // Replace the field id tag.\n            replace = '[[' + field.name + '#id]]';\n            replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n            replaceRegEx = new RegExp(replace, 'gi');\n\n            template = template.replace(replaceRegEx, 'field_' + field.id);\n\n            // Replace the field name tag.\n            replace = '[[' + field.name + '#name]]';\n            replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n            replaceRegEx = new RegExp(replace, 'gi');\n\n            template = template.replace(replaceRegEx, field.name);\n\n            // Replace the field description tag.\n            replace = '[[' + field.name + '#description]]';\n            replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n            replaceRegEx = new RegExp(replace, 'gi');\n\n            template = template.replace(replaceRegEx, field.description);\n        });\n\n        const regex = new RegExp('##otherfields##', 'gi');\n\n        if (template.match(regex)) {\n            const unusedFields = this.fieldsArray.filter(field => !template.includes(`[field]=\"fields[${field.id}]`)).map((field) =>\n                `<p><strong>${field.name}</strong></p>` +\n                '<p><addon-mod-data-field-plugin [class.has-errors]=\"!!errors[' + field.id + ']\" mode=\"edit\" \\\n                [field]=\"fields[' + field.id + ']\" [value]=\"contents[' + field.id + ']\" [form]=\"form\" [database]=\"database\" \\\n                [error]=\"errors[' + field.id + ']\" (onFieldInit)=\"onFieldInit($event)\"></addon-mod-data-field-plugin><p>');\n\n            template = template.replace(regex, unusedFields.join(''));\n        }\n\n        // Editing tags is not supported.\n        const replaceRegEx = new RegExp('##tags##', 'gi');\n        const message = CoreTag.areTagsAvailableInSite()\n            ? '<p class=\"item-dimmed\">{{ \\'addon.mod_data.edittagsnotsupported\\' | translate }}</p>'\n            : '';\n        template = template.replace(replaceRegEx, message);\n\n        return template;\n    }\n\n    /**\n     * A certain value has been initialized.\n     *\n     * @param data Data.\n     */\n    onFieldInit(data: AddonModDataEntryFieldInitialized): void {\n        if (!this.originalData[data.fieldid]) {\n            this.originalData[data.fieldid] = {\n                id: 0,\n                recordid: this.entry?.id ?? 0,\n                fieldid: data.fieldid,\n                content: data.content,\n                content1: data.content1 ?? null,\n                content2: data.content2 ?? null,\n                content3: data.content3 ?? null,\n                content4: data.content4 ?? null,\n                files: data.files ?? [],\n            };\n        }\n    }\n\n    /**\n     * Return to the entry list (previous page) discarding temp data.\n     *\n     * @returns Resolved when done.\n     */\n    protected async returnToEntryList(): Promise<void> {\n        const inputData = this.editForm.value;\n\n        try {\n            const files = await AddonModDataHelper.getEditTmpFiles(\n                inputData,\n                this.fieldsArray,\n                this.entry?.contents || {},\n            );\n\n            CoreFileUploader.clearTmpFiles(files);\n        } finally {\n            // Go back to entry list.\n            this.forceLeave = true;\n            CoreNavigator.back();\n        }\n    }\n\n    /**\n     * Scroll to first error or to the top if not found.\n     */\n    protected async scrollToFirstError(): Promise<void> {\n        const scrolled = await CoreDom.scrollToElement(this.formElement.nativeElement, '.addon-data-error');\n        if (!scrolled) {\n            this.content?.scrollToTop();\n        }\n    }\n\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>\n                <core-format-text [text]=\"title\" contextLevel=\"module\" [contextInstanceId]=\"moduleId\" [courseId]=\"courseId\" />\n            </h1>\n        </ion-title>\n        <ion-buttons slot=\"end\">\n            <ion-button *ngIf=\"entry\" fill=\"clear\" (click)=\"save($event)\">\n                {{ 'core.save' | translate }}\n            </ion-button>\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <core-loading [hideUntil]=\"loaded\">\n        <core-group-selector [groupInfo]=\"groupInfo\" [(selected)]=\"selectedGroup\" (selectedChange)=\"setGroup(selectedGroup)\"\n            [courseId]=\"database?.course\" />\n\n        <div class=\"addon-data-contents {{cssClass}}\" *ngIf=\"database\">\n            <core-style [css]=\"database.csstemplate\" prefix=\".{{cssClass}}\" />\n\n            <form (ngSubmit)=\"save($event)\" [formGroup]=\"editForm\" #editFormEl>\n                <core-compile-html [text]=\"editFormRender\" [jsData]=\"jsData\" [extraImports]=\"extraImports\" />\n            </form>\n        </div>\n    </core-loading>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}