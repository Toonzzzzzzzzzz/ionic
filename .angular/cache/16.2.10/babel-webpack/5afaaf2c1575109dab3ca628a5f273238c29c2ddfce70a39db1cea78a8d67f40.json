{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for enrol push notifications clicks.\n */\nexport class CoreCoursesEnrolPushClickHandlerService {\n  constructor() {\n    this.name = 'CoreCoursesEnrolPushClickHandler';\n    this.priority = 200;\n  }\n  /**\n   * Check if a notification click is handled by this handler.\n   *\n   * @param notification The notification to check.\n   * @returns Whether the notification click is handled by this handler\n   */\n  handles(notification) {\n    return _asyncToGenerator(function* () {\n      var _notification$moodlec;\n      return CoreUtils.isTrueOrOne(notification.notif) && ((_notification$moodlec = notification.moodlecomponent) === null || _notification$moodlec === void 0 ? void 0 : _notification$moodlec.indexOf('enrol_')) === 0 && notification.name == 'expiry_notification';\n    })();\n  }\n  /**\n   * Handle the notification click.\n   *\n   * @param notification The notification to check.\n   * @returns Promise resolved when done.\n   */\n  handleClick(notification) {\n    return _asyncToGenerator(function* () {\n      const courseId = notification.courseid;\n      const modal = yield CoreDomUtils.showModalLoading();\n      try {\n        var _notification$context;\n        const result = yield CoreCourseHelper.getCourse(courseId, notification.site);\n        const params = {\n          course: result.course\n        };\n        let page = 'course/' + courseId;\n        if (((_notification$context = notification.contexturl) === null || _notification$context === void 0 ? void 0 : _notification$context.indexOf('user/index.php')) != -1) {\n          // Open the participants tab.\n          params.selectedTab = 'participants'; // @todo Set this when participants is done.\n        } else if (!result.enrolled) {\n          // User not enrolled anymore, open the preview page.\n          page += '/summary';\n        }\n        yield CoreNavigator.navigateToSitePath(page, {\n          params,\n          siteId: notification.site\n        });\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error getting course.');\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n}\n_class = CoreCoursesEnrolPushClickHandlerService;\n_class.ɵfac = function CoreCoursesEnrolPushClickHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreCoursesEnrolPushClickHandler = makeSingleton(CoreCoursesEnrolPushClickHandlerService);","map":{"version":3,"names":["CoreCourseHelper","CoreNavigator","CoreDomUtils","CoreUtils","makeSingleton","CoreCoursesEnrolPushClickHandlerService","constructor","name","priority","handles","notification","_asyncToGenerator","_notification$moodlec","isTrueOrOne","notif","moodlecomponent","indexOf","handleClick","courseId","courseid","modal","showModalLoading","_notification$context","result","getCourse","site","params","course","page","contexturl","selectedTab","enrolled","navigateToSitePath","siteId","error","showErrorModalDefault","dismiss","factory","ɵfac","providedIn","CoreCoursesEnrolPushClickHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/courses/services/handlers/enrol-push-click.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CorePushNotificationsClickHandler } from '@features/pushnotifications/services/push-delegate';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Handler for enrol push notifications clicks.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreCoursesEnrolPushClickHandlerService implements CorePushNotificationsClickHandler {\n\n    name = 'CoreCoursesEnrolPushClickHandler';\n    priority = 200;\n\n    /**\n     * Check if a notification click is handled by this handler.\n     *\n     * @param notification The notification to check.\n     * @returns Whether the notification click is handled by this handler\n     */\n    async handles(notification: CorePushNotificationsNotificationBasicData): Promise<boolean> {\n        return CoreUtils.isTrueOrOne(notification.notif) && notification.moodlecomponent?.indexOf('enrol_') === 0 &&\n            notification.name == 'expiry_notification';\n    }\n\n    /**\n     * Handle the notification click.\n     *\n     * @param notification The notification to check.\n     * @returns Promise resolved when done.\n     */\n    async handleClick(notification: CoreCoursesEnrolNotificationData): Promise<void> {\n        const courseId = notification.courseid;\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            const result = await CoreCourseHelper.getCourse(courseId, notification.site);\n\n            const params: Params = {\n                course: result.course,\n            };\n            let page = 'course/' + courseId;\n\n            if (notification.contexturl?.indexOf('user/index.php') != -1) {\n                // Open the participants tab.\n                params.selectedTab = 'participants'; // @todo Set this when participants is done.\n            } else if (!result.enrolled) {\n                // User not enrolled anymore, open the preview page.\n                page += '/summary';\n            }\n\n            await CoreNavigator.navigateToSitePath(page, { params, siteId: notification.site });\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting course.');\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n}\n\nexport const CoreCoursesEnrolPushClickHandler = makeSingleton(CoreCoursesEnrolPushClickHandlerService);\n\ntype CoreCoursesEnrolNotificationData = CorePushNotificationsNotificationBasicData & {\n    courseid: number; // Course ID related to the notification.\n    contexturl?: string; // Context URL related to the notification.\n};\n"],"mappings":";;AAgBA,SAASA,gBAAgB,QAAQ,yCAAyC;AAG1E,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,uCAAuC;EADpDC,YAAA;IAGI,KAAAC,IAAI,GAAG,kCAAkC;IACzC,KAAAC,QAAQ,GAAG,GAAG;;EAEd;;;;;;EAMMC,OAAOA,CAACC,YAAwD;IAAA,OAAAC,iBAAA;MAAA,IAAAC,qBAAA;MAClE,OAAOT,SAAS,CAACU,WAAW,CAACH,YAAY,CAACI,KAAK,CAAC,IAAI,EAAAF,qBAAA,GAAAF,YAAY,CAACK,eAAe,cAAAH,qBAAA,uBAA5BA,qBAAA,CAA8BI,OAAO,CAAC,QAAQ,CAAC,MAAK,CAAC,IACrGN,YAAY,CAACH,IAAI,IAAI,qBAAqB;IAAC;EACnD;EAEA;;;;;;EAMMU,WAAWA,CAACP,YAA8C;IAAA,OAAAC,iBAAA;MAC5D,MAAMO,QAAQ,GAAGR,YAAY,CAACS,QAAQ;MAEtC,MAAMC,KAAK,SAASlB,YAAY,CAACmB,gBAAgB,EAAE;MAEnD,IAAI;QAAA,IAAAC,qBAAA;QACA,MAAMC,MAAM,SAASvB,gBAAgB,CAACwB,SAAS,CAACN,QAAQ,EAAER,YAAY,CAACe,IAAI,CAAC;QAE5E,MAAMC,MAAM,GAAW;UACnBC,MAAM,EAAEJ,MAAM,CAACI;SAClB;QACD,IAAIC,IAAI,GAAG,SAAS,GAAGV,QAAQ;QAE/B,IAAI,EAAAI,qBAAA,GAAAZ,YAAY,CAACmB,UAAU,cAAAP,qBAAA,uBAAvBA,qBAAA,CAAyBN,OAAO,CAAC,gBAAgB,CAAC,KAAI,CAAC,CAAC,EAAE;UAC1D;UACAU,MAAM,CAACI,WAAW,GAAG,cAAc,CAAC,CAAC;SACxC,MAAM,IAAI,CAACP,MAAM,CAACQ,QAAQ,EAAE;UACzB;UACAH,IAAI,IAAI,UAAU;;QAGtB,MAAM3B,aAAa,CAAC+B,kBAAkB,CAACJ,IAAI,EAAE;UAAEF,MAAM;UAAEO,MAAM,EAAEvB,YAAY,CAACe;QAAI,CAAE,CAAC;OACtF,CAAC,OAAOS,KAAK,EAAE;QACZhC,YAAY,CAACiC,qBAAqB,CAACD,KAAK,EAAE,uBAAuB,CAAC;OACrE,SAAS;QACNd,KAAK,CAACgB,OAAO,EAAE;;IAClB;EACL;;SAjDS/B,uCAAuC;;mBAAvCA,MAAuC;AAAA;;SAAvCA,MAAuC;EAAAgC,OAAA,EAAvChC,MAAuC,CAAAiC,IAAA;EAAAC,UAAA,EAD1B;AAAM;AAsDhC,OAAO,MAAMC,gCAAgC,GAAGpC,aAAa,CAACC,uCAAuC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}