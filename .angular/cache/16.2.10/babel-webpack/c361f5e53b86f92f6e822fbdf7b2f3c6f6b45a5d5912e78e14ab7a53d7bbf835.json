{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreConstants } from '@/core/constants';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreDatabaseTable } from './database-table';\n/**\n * Database wrapper that caches database records in memory to speed up read operations.\n *\n * Extensions of this class should only be used as singletons, or the data integrity of the inmemory cache\n * could be compromised.\n */\nexport class CoreInMemoryDatabaseTable extends CoreDatabaseTable {\n  /**\n   * @inheritdoc\n   */\n  initialize() {\n    var _superprop_getInitialize = () => super.initialize,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      var _CoreInMemoryDatabase;\n      yield _superprop_getInitialize().call(_this);\n      const activeTables = (_CoreInMemoryDatabase = CoreInMemoryDatabaseTable.ACTIVE_TABLES.get(_this.database)) !== null && _CoreInMemoryDatabase !== void 0 ? _CoreInMemoryDatabase : new Set();\n      if (activeTables.has(_this.tableName)) {\n        const message = `Trying to create multiple instances of an in-memory table for '${_this.tableName}', ` + 'use singletons instead.';\n        if (!CoreConstants.BUILD.isProduction) {\n          throw new Error(message);\n        }\n        CoreInMemoryDatabaseTable.LOGGER.warn(message);\n      }\n      activeTables.add(_this.tableName);\n      CoreInMemoryDatabaseTable.ACTIVE_TABLES.set(_this.database, activeTables);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  destroy() {\n    var _superprop_getDestroy = () => super.destroy,\n      _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _superprop_getDestroy().call(_this2);\n      const activeTables = CoreInMemoryDatabaseTable.ACTIVE_TABLES.get(_this2.database);\n      activeTables === null || activeTables === void 0 || activeTables.delete(_this2.tableName);\n      if ((activeTables === null || activeTables === void 0 ? void 0 : activeTables.size) === 0) {\n        CoreInMemoryDatabaseTable.ACTIVE_TABLES.delete(_this2.database);\n      }\n    })();\n  }\n}\n_class = CoreInMemoryDatabaseTable;\n_class.ACTIVE_TABLES = new WeakMap();\n_class.LOGGER = CoreLogger.getInstance('CoreInMemoryDatabaseTable');","map":{"version":3,"names":["CoreConstants","CoreLogger","CoreDatabaseTable","CoreInMemoryDatabaseTable","initialize","_superprop_getInitialize","_this","_asyncToGenerator","_CoreInMemoryDatabase","call","activeTables","ACTIVE_TABLES","get","database","Set","has","tableName","message","BUILD","isProduction","Error","LOGGER","warn","add","set","destroy","_superprop_getDestroy","_this2","delete","size","_class","WeakMap","getInstance"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/database/inmemory-database-table.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreConstants } from '@/core/constants';\nimport { SQLiteDB, SQLiteDBRecordValues } from '@classes/sqlitedb';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreDatabaseTable, GetDBRecordPrimaryKey } from './database-table';\n\n/**\n * Database wrapper that caches database records in memory to speed up read operations.\n *\n * Extensions of this class should only be used as singletons, or the data integrity of the inmemory cache\n * could be compromised.\n */\nexport abstract class CoreInMemoryDatabaseTable<\n    DBRecord extends SQLiteDBRecordValues = SQLiteDBRecordValues,\n    PrimaryKeyColumn extends keyof DBRecord = 'id',\n    PrimaryKey extends GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn> = GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn>\n> extends CoreDatabaseTable<DBRecord, PrimaryKeyColumn, PrimaryKey> {\n\n    private static readonly ACTIVE_TABLES: WeakMap<SQLiteDB, Set<string>> = new WeakMap();\n    private static readonly LOGGER: CoreLogger = CoreLogger.getInstance('CoreInMemoryDatabaseTable');\n\n    /**\n     * @inheritdoc\n     */\n    async initialize(): Promise<void> {\n        await super.initialize();\n\n        const activeTables = CoreInMemoryDatabaseTable.ACTIVE_TABLES.get(this.database) ?? new Set();\n\n        if (activeTables.has(this.tableName)) {\n            const message = `Trying to create multiple instances of an in-memory table for '${this.tableName}', ` +\n                'use singletons instead.';\n\n            if (!CoreConstants.BUILD.isProduction) {\n                throw new Error(message);\n            }\n\n            CoreInMemoryDatabaseTable.LOGGER.warn(message);\n        }\n\n        activeTables.add(this.tableName);\n        CoreInMemoryDatabaseTable.ACTIVE_TABLES.set(this.database, activeTables);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async destroy(): Promise<void> {\n        await super.destroy();\n\n        const activeTables = CoreInMemoryDatabaseTable.ACTIVE_TABLES.get(this.database);\n\n        activeTables?.delete(this.tableName);\n\n        if (activeTables?.size === 0) {\n            CoreInMemoryDatabaseTable.ACTIVE_TABLES.delete(this.database);\n        }\n    }\n\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,iBAAiB,QAA+B,kBAAkB;AAE3E;;;;;;AAMA,OAAM,MAAgBC,yBAIpB,SAAQD,iBAAyD;EAK/D;;;EAGME,UAAUA,CAAA;IAAA,IAAAC,wBAAA,GAAAA,CAAA,WAAAD,UAAA;MAAAE,KAAA;IAAA,OAAAC,iBAAA;MAAA,IAAAC,qBAAA;MACZ,MAAMH,wBAAA,GAAAI,IAAA,CAAAH,KAAgB,CAAE;MAExB,MAAMI,YAAY,IAAAF,qBAAA,GAAGL,yBAAyB,CAACQ,aAAa,CAACC,GAAG,CAACN,KAAI,CAACO,QAAQ,CAAC,cAAAL,qBAAA,cAAAA,qBAAA,GAAI,IAAIM,GAAG,EAAE;MAE5F,IAAIJ,YAAY,CAACK,GAAG,CAACT,KAAI,CAACU,SAAS,CAAC,EAAE;QAClC,MAAMC,OAAO,GAAG,kEAAkEX,KAAI,CAACU,SAAS,KAAK,GACjG,yBAAyB;QAE7B,IAAI,CAAChB,aAAa,CAACkB,KAAK,CAACC,YAAY,EAAE;UACnC,MAAM,IAAIC,KAAK,CAACH,OAAO,CAAC;;QAG5Bd,yBAAyB,CAACkB,MAAM,CAACC,IAAI,CAACL,OAAO,CAAC;;MAGlDP,YAAY,CAACa,GAAG,CAACjB,KAAI,CAACU,SAAS,CAAC;MAChCb,yBAAyB,CAACQ,aAAa,CAACa,GAAG,CAAClB,KAAI,CAACO,QAAQ,EAAEH,YAAY,CAAC;IAAC;EAC7E;EAEA;;;EAGMe,OAAOA,CAAA;IAAA,IAAAC,qBAAA,GAAAA,CAAA,WAAAD,OAAA;MAAAE,MAAA;IAAA,OAAApB,iBAAA;MACT,MAAMmB,qBAAA,GAAAjB,IAAA,CAAAkB,MAAa,CAAE;MAErB,MAAMjB,YAAY,GAAGP,yBAAyB,CAACQ,aAAa,CAACC,GAAG,CAACe,MAAI,CAACd,QAAQ,CAAC;MAE/EH,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEkB,MAAM,CAACD,MAAI,CAACX,SAAS,CAAC;MAEpC,IAAI,CAAAN,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEmB,IAAI,MAAK,CAAC,EAAE;QAC1B1B,yBAAyB,CAACQ,aAAa,CAACiB,MAAM,CAACD,MAAI,CAACd,QAAQ,CAAC;;IAChE;EACL;;SA7CkBV,yBAIpB;AAE0B2B,MAAA,CAAAnB,aAAa,GAAmC,IAAIoB,OAAO,EAAE;AAC7DD,MAAA,CAAAT,MAAM,GAAepB,UAAU,CAAC+B,WAAW,CAAC,2BAA2B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}