{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * A cache to store values in memory to speed up processes.\n *\n * The data is organized by \"entries\" that are identified by an ID. Each entry can have multiple values stored,\n * and each value has its own timemodified.\n *\n * Values expire after a certain time.\n */\nexport class CoreCache {\n  constructor() {\n    this.cacheStore = {};\n  }\n  /**\n   * Clear the cache.\n   */\n  clear() {\n    this.cacheStore = {};\n  }\n  /**\n   * Get all the data stored in the cache for a certain id.\n   *\n   * @param id The ID to identify the entry.\n   * @returns The data from the cache. Undefined if not found.\n   */\n  getEntry(id) {\n    if (!this.cacheStore[id]) {\n      this.cacheStore[id] = {};\n    }\n    return this.cacheStore[id];\n  }\n  /**\n   * Get the status of a module from the \"cache\".\n   *\n   * @param id The ID to identify the entry.\n   * @param name Name of the value to get.\n   * @param ignoreInvalidate Whether it should always return the cached data, even if it's expired.\n   * @returns Cached value. Undefined if not cached or expired.\n   */\n  getValue(id, name, ignoreInvalidate = false) {\n    const entry = this.getEntry(id);\n    if (entry[name] && entry[name].value !== undefined) {\n      const now = Date.now();\n      // Invalidate after 5 minutes.\n      if (ignoreInvalidate || entry[name].timemodified + 300000 >= now) {\n        return entry[name].value;\n      }\n    }\n    return undefined;\n  }\n  /**\n   * Invalidate all the cached data for a certain entry.\n   *\n   * @param id The ID to identify the entry.\n   */\n  invalidate(id) {\n    const entry = this.getEntry(id);\n    for (const name in entry) {\n      entry[name].timemodified = 0;\n    }\n  }\n  /**\n   * Update the status of a module in the \"cache\".\n   *\n   * @param id The ID to identify the entry.\n   * @param name Name of the value to set.\n   * @param value Value to set.\n   * @returns The set value.\n   */\n  setValue(id, name, value) {\n    const entry = this.getEntry(id);\n    entry[name] = {\n      value: value,\n      timemodified: Date.now()\n    };\n    return value;\n  }\n}","map":{"version":3,"names":["CoreCache","constructor","cacheStore","clear","getEntry","id","getValue","name","ignoreInvalidate","entry","value","undefined","now","Date","timemodified","invalidate","setValue"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/cache.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * A cache to store values in memory to speed up processes.\n *\n * The data is organized by \"entries\" that are identified by an ID. Each entry can have multiple values stored,\n * and each value has its own timemodified.\n *\n * Values expire after a certain time.\n */\nexport class CoreCache {\n\n    protected cacheStore: {\n        [key: string]: CoreCacheEntry;\n    } = {};\n\n    /**\n     * Clear the cache.\n     */\n    clear(): void {\n        this.cacheStore = {};\n    }\n\n    /**\n     * Get all the data stored in the cache for a certain id.\n     *\n     * @param id The ID to identify the entry.\n     * @returns The data from the cache. Undefined if not found.\n     */\n    getEntry(id: string): CoreCacheEntry {\n        if (!this.cacheStore[id]) {\n            this.cacheStore[id] = {};\n        }\n\n        return this.cacheStore[id];\n    }\n\n    /**\n     * Get the status of a module from the \"cache\".\n     *\n     * @param id The ID to identify the entry.\n     * @param name Name of the value to get.\n     * @param ignoreInvalidate Whether it should always return the cached data, even if it's expired.\n     * @returns Cached value. Undefined if not cached or expired.\n     */\n    getValue<T = unknown>(id: string, name: string, ignoreInvalidate = false): T | undefined {\n        const entry = this.getEntry(id);\n\n        if (entry[name] && entry[name].value !== undefined) {\n            const now = Date.now();\n            // Invalidate after 5 minutes.\n            if (ignoreInvalidate || entry[name].timemodified + 300000 >= now) {\n                return entry[name].value;\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Invalidate all the cached data for a certain entry.\n     *\n     * @param id The ID to identify the entry.\n     */\n    invalidate(id: string): void {\n        const entry = this.getEntry(id);\n        for (const name in entry) {\n            entry[name].timemodified = 0;\n        }\n    }\n\n    /**\n     * Update the status of a module in the \"cache\".\n     *\n     * @param id The ID to identify the entry.\n     * @param name Name of the value to set.\n     * @param value Value to set.\n     * @returns The set value.\n     */\n    setValue<T>(id: string, name: string, value: T): T {\n        const entry = this.getEntry(id);\n        entry[name] = {\n            value: value,\n            timemodified: Date.now(),\n        };\n\n        return value;\n    }\n\n}\n\n/**\n * Cache entry\n */\nexport type CoreCacheEntry = {\n    [name: string]: {\n        value?: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n        timemodified: number;\n    };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA,OAAM,MAAOA,SAAS;EAAtBC,YAAA;IAEc,KAAAC,UAAU,GAEhB,EAAE;EA2EV;EAzEI;;;EAGAC,KAAKA,CAAA;IACD,IAAI,CAACD,UAAU,GAAG,EAAE;EACxB;EAEA;;;;;;EAMAE,QAAQA,CAACC,EAAU;IACf,IAAI,CAAC,IAAI,CAACH,UAAU,CAACG,EAAE,CAAC,EAAE;MACtB,IAAI,CAACH,UAAU,CAACG,EAAE,CAAC,GAAG,EAAE;;IAG5B,OAAO,IAAI,CAACH,UAAU,CAACG,EAAE,CAAC;EAC9B;EAEA;;;;;;;;EAQAC,QAAQA,CAAcD,EAAU,EAAEE,IAAY,EAAEC,gBAAgB,GAAG,KAAK;IACpE,MAAMC,KAAK,GAAG,IAAI,CAACL,QAAQ,CAACC,EAAE,CAAC;IAE/B,IAAII,KAAK,CAACF,IAAI,CAAC,IAAIE,KAAK,CAACF,IAAI,CAAC,CAACG,KAAK,KAAKC,SAAS,EAAE;MAChD,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE;MACtB;MACA,IAAIJ,gBAAgB,IAAIC,KAAK,CAACF,IAAI,CAAC,CAACO,YAAY,GAAG,MAAM,IAAIF,GAAG,EAAE;QAC9D,OAAOH,KAAK,CAACF,IAAI,CAAC,CAACG,KAAK;;;IAIhC,OAAOC,SAAS;EACpB;EAEA;;;;;EAKAI,UAAUA,CAACV,EAAU;IACjB,MAAMI,KAAK,GAAG,IAAI,CAACL,QAAQ,CAACC,EAAE,CAAC;IAC/B,KAAK,MAAME,IAAI,IAAIE,KAAK,EAAE;MACtBA,KAAK,CAACF,IAAI,CAAC,CAACO,YAAY,GAAG,CAAC;;EAEpC;EAEA;;;;;;;;EAQAE,QAAQA,CAAIX,EAAU,EAAEE,IAAY,EAAEG,KAAQ;IAC1C,MAAMD,KAAK,GAAG,IAAI,CAACL,QAAQ,CAACC,EAAE,CAAC;IAC/BI,KAAK,CAACF,IAAI,CAAC,GAAG;MACVG,KAAK,EAAEA,KAAK;MACZI,YAAY,EAAED,IAAI,CAACD,GAAG;KACzB;IAED,OAAOF,KAAK;EAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}