{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModSurveyOffline } from './survey-offline';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaModSurvey:';\n/**\n * Service that provides some features for surveys.\n */\nexport class AddonModSurveyProvider {\n  /**\n   * Get a survey's questions.\n   *\n   * @param surveyId Survey ID.\n   * @param options Other options.\n   * @returns Promise resolved when the questions are retrieved.\n   */\n  getQuestions(surveyId, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        surveyid: surveyId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this.getQuestionsCacheKey(surveyId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: AddonModSurveyProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_survey_get_questions', params, preSets);\n      if (response.questions) {\n        return response.questions;\n      }\n      throw new CoreError('No questions were found.');\n    })();\n  }\n  /**\n   * Get cache key for survey questions WS calls.\n   *\n   * @param surveyId Survey ID.\n   * @returns Cache key.\n   */\n  getQuestionsCacheKey(surveyId) {\n    return ROOT_CACHE_KEY + 'questions:' + surveyId;\n  }\n  /**\n   * Get cache key for survey data WS calls.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getSurveyCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'survey:' + courseId;\n  }\n  /**\n   * Get a survey data.\n   *\n   * @param courseId Course ID.\n   * @param key Name of the property to check.\n   * @param value Value to search.\n   * @param options Other options.\n   * @returns Promise resolved when the survey is retrieved.\n   */\n  getSurveyDataByKey(courseId, key, value, options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        courseids: [courseId]\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this2.getSurveyCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: AddonModSurveyProvider.COMPONENT\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_survey_get_surveys_by_courses', params, preSets);\n      const currentSurvey = response.surveys.find(survey => survey[key] == value);\n      if (currentSurvey) {\n        return currentSurvey;\n      }\n      throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    })();\n  }\n  /**\n   * Get a survey by course module ID.\n   *\n   * @param courseId Course ID.\n   * @param cmId Course module ID.\n   * @param options Other options.\n   * @returns Promise resolved when the survey is retrieved.\n   */\n  getSurvey(courseId, cmId, options = {}) {\n    return this.getSurveyDataByKey(courseId, 'coursemodule', cmId, options);\n  }\n  /**\n   * Get a survey by ID.\n   *\n   * @param courseId Course ID.\n   * @param id Survey ID.\n   * @param options Other options.\n   * @returns Promise resolved when the survey is retrieved.\n   */\n  getSurveyById(courseId, id, options = {}) {\n    return this.getSurveyDataByKey(courseId, 'id', id, options);\n  }\n  /**\n   * Invalidate the prefetched content.\n   *\n   * @param moduleId The module ID.\n   * @param courseId Course ID of the module.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateContent(moduleId, courseId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const promises = [];\n      promises.push(_this3.getSurvey(courseId, moduleId).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (survey) {\n          const ps = [];\n          // Do not invalidate activity data before getting activity info, we need it!\n          ps.push(_this3.invalidateSurveyData(courseId, siteId));\n          ps.push(_this3.invalidateQuestions(survey.id, siteId));\n          yield Promise.all(ps);\n          return;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      promises.push(CoreFilepool.invalidateFilesByComponent(siteId, AddonModSurveyProvider.COMPONENT, moduleId));\n      yield CoreUtils.allPromises(promises);\n    })();\n  }\n  /**\n   * Invalidates survey questions.\n   *\n   * @param surveyId Survey ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateQuestions(surveyId, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this4.getQuestionsCacheKey(surveyId));\n    })();\n  }\n  /**\n   * Invalidates survey data.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateSurveyData(courseId, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this5.getSurveyCacheKey(courseId));\n    })();\n  }\n  /**\n   * Report the survey as being viewed.\n   *\n   * @param id Module ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logView(id, siteId) {\n    return _asyncToGenerator(function* () {\n      const params = {\n        surveyid: id\n      };\n      yield CoreCourseLogHelper.log('mod_survey_view_survey', params, AddonModSurveyProvider.COMPONENT, id, siteId);\n    })();\n  }\n  /**\n   * Send survey answers. If cannot send them to Moodle, they'll be stored in offline to be sent later.\n   *\n   * @param surveyId Survey ID.\n   * @param name Survey name.\n   * @param courseId Course ID the survey belongs to.\n   * @param answers Answers.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean if success: true if answers were sent to server,\n   *         false if stored in device.\n   */\n  submitAnswers(surveyId, name, courseId, answers, siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // Convenience function to store a survey to be synchronized later.\n      const storeOffline = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* () {\n          yield AddonModSurveyOffline.saveAnswers(surveyId, name, courseId, answers, siteId);\n          return false;\n        });\n        return function storeOffline() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      if (!CoreNetwork.isOnline()) {\n        // App is offline, store the message.\n        return storeOffline();\n      }\n      try {\n        // If there's already answers to be sent to the server, discard it first.\n        yield AddonModSurveyOffline.deleteSurveyAnswers(surveyId, siteId);\n        // Device is online, try to send them to server.\n        yield _this6.submitAnswersOnline(surveyId, answers, siteId);\n        return true;\n      } catch (error) {\n        if (CoreUtils.isWebServiceError(error)) {\n          // It's a WebService error, the user cannot send the message so don't store it.\n          throw error;\n        }\n        return storeOffline();\n      }\n    })();\n  }\n  /**\n   * Send survey answers to Moodle.\n   *\n   * @param surveyId Survey ID.\n   * @param answers Answers.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when answers are successfully submitted.\n   */\n  submitAnswersOnline(surveyId, answers, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        surveyid: surveyId,\n        answers: answers\n      };\n      const response = yield site.write('mod_survey_submit_answers', params);\n      if (!response.status) {\n        throw new CoreError('Error submitting answers.');\n      }\n    })();\n  }\n}\n_class = AddonModSurveyProvider;\n_class.COMPONENT = 'mmaModSurvey';\n_class.ɵfac = function AddonModSurveyProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModSurvey = makeSingleton(AddonModSurveyProvider);","map":{"version":3,"names":["CoreError","CoreSite","CoreCourseLogHelper","CoreNetwork","CoreFilepool","CoreSites","CoreUtils","makeSingleton","Translate","AddonModSurveyOffline","ROOT_CACHE_KEY","AddonModSurveyProvider","getQuestions","surveyId","options","_this","_asyncToGenerator","site","getSite","siteId","params","surveyid","preSets","_objectSpread","cacheKey","getQuestionsCacheKey","updateFrequency","FREQUENCY_RARELY","component","COMPONENT","componentId","cmId","getReadingStrategyPreSets","readingStrategy","response","read","questions","getSurveyCacheKey","courseId","getSurveyDataByKey","key","value","_this2","courseids","currentSurvey","surveys","find","survey","instant","getSurvey","getSurveyById","id","invalidateContent","moduleId","_this3","getCurrentSiteId","promises","push","then","_ref","ps","invalidateSurveyData","invalidateQuestions","Promise","all","_x","apply","arguments","invalidateFilesByComponent","allPromises","_this4","invalidateWsCacheForKey","_this5","logView","log","submitAnswers","name","answers","_this6","storeOffline","_ref2","saveAnswers","isOnline","deleteSurveyAnswers","submitAnswersOnline","error","isWebServiceError","write","status","_class","factory","ɵfac","providedIn","AddonModSurvey"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/survey/services/survey.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseCommonModWSOptions } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites, CoreSitesCommonWSOptions } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreStatusWithWarningsWSResponse, CoreWSExternalFile, CoreWSExternalWarning } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModSurveyOffline } from './survey-offline';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\n\nconst ROOT_CACHE_KEY = 'mmaModSurvey:';\n\n/**\n * Service that provides some features for surveys.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonModSurveyProvider {\n\n    static readonly COMPONENT = 'mmaModSurvey';\n\n    /**\n     * Get a survey's questions.\n     *\n     * @param surveyId Survey ID.\n     * @param options Other options.\n     * @returns Promise resolved when the questions are retrieved.\n     */\n    async getQuestions(surveyId: number, options: CoreCourseCommonModWSOptions = {}): Promise<AddonModSurveyQuestion[]> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModSurveyGetQuestionsWSParams = {\n            surveyid: surveyId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getQuestionsCacheKey(surveyId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: AddonModSurveyProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModSurveyGetQuestionsWSResponse>('mod_survey_get_questions', params, preSets);\n        if (response.questions) {\n            return response.questions;\n        }\n\n        throw new CoreError('No questions were found.');\n    }\n\n    /**\n     * Get cache key for survey questions WS calls.\n     *\n     * @param surveyId Survey ID.\n     * @returns Cache key.\n     */\n    protected getQuestionsCacheKey(surveyId: number): string {\n        return ROOT_CACHE_KEY + 'questions:' + surveyId;\n    }\n\n    /**\n     * Get cache key for survey data WS calls.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getSurveyCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'survey:' + courseId;\n    }\n\n    /**\n     * Get a survey data.\n     *\n     * @param courseId Course ID.\n     * @param key Name of the property to check.\n     * @param value Value to search.\n     * @param options Other options.\n     * @returns Promise resolved when the survey is retrieved.\n     */\n    protected async getSurveyDataByKey(\n        courseId: number,\n        key: string,\n        value: number,\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<AddonModSurveySurvey> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModSurveyGetSurveysByCoursesWSParams = {\n            courseids: [courseId],\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getSurveyCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: AddonModSurveyProvider.COMPONENT,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response =\n            await site.read<AddonModSurveyGetSurveysByCoursesWSResponse>('mod_survey_get_surveys_by_courses', params, preSets);\n\n        const currentSurvey = response.surveys.find((survey) => survey[key] == value);\n        if (currentSurvey) {\n            return currentSurvey;\n        }\n\n        throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    }\n\n    /**\n     * Get a survey by course module ID.\n     *\n     * @param courseId Course ID.\n     * @param cmId Course module ID.\n     * @param options Other options.\n     * @returns Promise resolved when the survey is retrieved.\n     */\n    getSurvey(courseId: number, cmId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModSurveySurvey> {\n        return this.getSurveyDataByKey(courseId, 'coursemodule', cmId, options);\n    }\n\n    /**\n     * Get a survey by ID.\n     *\n     * @param courseId Course ID.\n     * @param id Survey ID.\n     * @param options Other options.\n     * @returns Promise resolved when the survey is retrieved.\n     */\n    getSurveyById(courseId: number, id: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModSurveySurvey> {\n        return this.getSurveyDataByKey(courseId, 'id', id, options);\n    }\n\n    /**\n     * Invalidate the prefetched content.\n     *\n     * @param moduleId The module ID.\n     * @param courseId Course ID of the module.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateContent(moduleId: number, courseId: number, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const promises: Promise<void>[] = [];\n\n        promises.push(this.getSurvey(courseId, moduleId).then(async (survey) => {\n            const ps: Promise<void>[] = [];\n\n            // Do not invalidate activity data before getting activity info, we need it!\n            ps.push(this.invalidateSurveyData(courseId, siteId));\n            ps.push(this.invalidateQuestions(survey.id, siteId));\n\n            await Promise.all(ps);\n\n            return;\n        }));\n\n        promises.push(CoreFilepool.invalidateFilesByComponent(siteId, AddonModSurveyProvider.COMPONENT, moduleId));\n\n        await CoreUtils.allPromises(promises);\n    }\n\n    /**\n     * Invalidates survey questions.\n     *\n     * @param surveyId Survey ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateQuestions(surveyId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getQuestionsCacheKey(surveyId));\n    }\n\n    /**\n     * Invalidates survey data.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateSurveyData(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getSurveyCacheKey(courseId));\n    }\n\n    /**\n     * Report the survey as being viewed.\n     *\n     * @param id Module ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logView(id: number, siteId?: string): Promise<void> {\n        const params: AddonModSurveyViewSurveyWSParams = {\n            surveyid: id,\n        };\n\n        await CoreCourseLogHelper.log(\n            'mod_survey_view_survey',\n            params,\n            AddonModSurveyProvider.COMPONENT,\n            id,\n            siteId,\n        );\n    }\n\n    /**\n     * Send survey answers. If cannot send them to Moodle, they'll be stored in offline to be sent later.\n     *\n     * @param surveyId Survey ID.\n     * @param name Survey name.\n     * @param courseId Course ID the survey belongs to.\n     * @param answers Answers.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean if success: true if answers were sent to server,\n     *         false if stored in device.\n     */\n    async submitAnswers(\n        surveyId: number,\n        name: string,\n        courseId: number,\n        answers: AddonModSurveySubmitAnswerData[],\n        siteId?: string,\n    ): Promise<boolean> {\n\n        // Convenience function to store a survey to be synchronized later.\n        const storeOffline = async (): Promise<boolean> => {\n            await AddonModSurveyOffline.saveAnswers(surveyId, name, courseId, answers, siteId);\n\n            return false;\n        };\n\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        if (!CoreNetwork.isOnline()) {\n            // App is offline, store the message.\n            return storeOffline();\n        }\n\n        try {\n            // If there's already answers to be sent to the server, discard it first.\n            await AddonModSurveyOffline.deleteSurveyAnswers(surveyId, siteId);\n\n            // Device is online, try to send them to server.\n            await this.submitAnswersOnline(surveyId, answers, siteId);\n\n            return true;\n        } catch (error) {\n            if (CoreUtils.isWebServiceError(error)) {\n                // It's a WebService error, the user cannot send the message so don't store it.\n                throw error;\n            }\n\n            return storeOffline();\n        }\n    }\n\n    /**\n     * Send survey answers to Moodle.\n     *\n     * @param surveyId Survey ID.\n     * @param answers Answers.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when answers are successfully submitted.\n     */\n    async submitAnswersOnline(surveyId: number, answers: AddonModSurveySubmitAnswerData[], siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonModSurveySubmitAnswersWSParams = {\n            surveyid: surveyId,\n            answers: answers,\n        };\n\n        const response = await site.write<CoreStatusWithWarningsWSResponse>('mod_survey_submit_answers', params);\n        if (!response.status) {\n            throw new CoreError('Error submitting answers.');\n        }\n    }\n\n}\nexport const AddonModSurvey = makeSingleton(AddonModSurveyProvider);\n\n/**\n * Params of mod_survey_view_survey WS.\n */\ntype AddonModSurveyViewSurveyWSParams = {\n    surveyid: number; // Survey instance id.\n};\n\n/**\n * Survey returned by WS mod_survey_get_surveys_by_courses.\n */\nexport type AddonModSurveySurvey = {\n    id: number; // Survey id.\n    coursemodule: number; // Course module id.\n    course: number; // Course id.\n    name: string; // Survey name.\n    intro?: string; // The Survey intro.\n    introformat?: number; // Intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    introfiles?: CoreWSExternalFile[];\n    template?: number; // Survey type.\n    days?: number; // Days.\n    questions?: string; // Question ids.\n    surveydone?: number; // Did I finish the survey?.\n    timecreated?: number; // Time of creation.\n    timemodified?: number; // Time of last modification.\n    section?: number; // Course section id.\n    visible?: number; // Visible.\n    groupmode?: number; // Group mode.\n    groupingid?: number; // Group id.\n};\n\n/**\n * Survey question.\n */\nexport type AddonModSurveyQuestion = {\n    id: number; // Question id.\n    text: string; // Question text.\n    shorttext: string; // Question short text.\n    multi: string; // Subquestions ids.\n    intro: string; // The question intro.\n    type: number; // Question type.\n    options: string; // Question options.\n    parent: number; // Parent question (for subquestions).\n};\n\n/**\n * Params of mod_survey_get_questions WS.\n */\ntype AddonModSurveyGetQuestionsWSParams = {\n    surveyid: number; // Survey instance id.\n};\n\n/**\n * Data returned by mod_survey_get_questions WS.\n */\nexport type AddonModSurveyGetQuestionsWSResponse = {\n    questions: AddonModSurveyQuestion[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_survey_get_surveys_by_courses WS.\n */\ntype AddonModSurveyGetSurveysByCoursesWSParams = {\n    courseids?: number[]; // Array of course ids.\n};\n\n/**\n * Data returned by mod_survey_get_surveys_by_courses WS.\n */\nexport type AddonModSurveyGetSurveysByCoursesWSResponse = {\n    surveys: AddonModSurveySurvey[];\n    warnings?: CoreWSExternalWarning[];\n};\n\nexport type AddonModSurveySubmitAnswerData = {\n    key: string; // Answer key.\n    value: string; // Answer value.\n};\n\n/**\n * Params of mod_survey_submit_answers WS.\n */\ntype AddonModSurveySubmitAnswersWSParams = {\n    surveyid: number; // Survey id.\n    answers: AddonModSurveySubmitAnswerData[];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}