{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreFile } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils, CoreTextFormat } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonWorkshopAssessmentStrategyDelegate } from './assessment-strategy-delegate';\nimport { AddonModWorkshopExampleMode, AddonModWorkshopPhase, AddonModWorkshop, AddonModWorkshopAction, AddonModWorkshopOverallFeedbackMode } from './workshop';\nimport { AddonModWorkshopOffline } from './workshop-offline';\nimport { ADDON_MOD_WORKSHOP_COMPONENT } from '@addons/mod/workshop/constants';\nimport * as i0 from \"@angular/core\";\n/**\n * Helper to gather some common functions for workshop.\n */\nexport class AddonModWorkshopHelperProvider {\n  /**\n   * Get a task by code.\n   *\n   * @param tasks Array of tasks.\n   * @param taskCode Unique task code.\n   * @returns Task requested\n   */\n  getTask(tasks, taskCode) {\n    return tasks.find(task => task.code == taskCode);\n  }\n  /**\n   * Check is task code is done.\n   *\n   * @param tasks Array of tasks.\n   * @param taskCode Unique task code.\n   * @returns True if task is completed.\n   */\n  isTaskDone(tasks, taskCode) {\n    const task = this.getTask(tasks, taskCode);\n    if (task) {\n      return !!task.completed;\n    }\n    // Task not found, assume true.\n    return true;\n  }\n  /**\n   * Return if a user can submit a workshop.\n   *\n   * @param workshop Workshop info.\n   * @param access Access information.\n   * @param tasks Array of tasks.\n   * @returns True if the user can submit the workshop.\n   */\n  canSubmit(workshop, access, tasks) {\n    const examplesMust = workshop.useexamples && workshop.examplesmode == AddonModWorkshopExampleMode.EXAMPLES_BEFORE_SUBMISSION;\n    const examplesDone = access.canmanageexamples || workshop.examplesmode == AddonModWorkshopExampleMode.EXAMPLES_VOLUNTARY || this.isTaskDone(tasks, 'examples');\n    return workshop.phase > AddonModWorkshopPhase.PHASE_SETUP && access.cansubmit && (!examplesMust || examplesDone);\n  }\n  /**\n   * Return if a user can assess a workshop.\n   *\n   * @param workshop Workshop info.\n   * @param access Access information.\n   * @returns True if the user can assess the workshop.\n   */\n  canAssess(workshop, access) {\n    const examplesMust = workshop.useexamples && workshop.examplesmode == AddonModWorkshopExampleMode.EXAMPLES_BEFORE_ASSESSMENT;\n    const examplesDone = access.canmanageexamples;\n    return !examplesMust || examplesDone;\n  }\n  /**\n   * Return a particular user submission from the submission list.\n   *\n   * @param workshopId Workshop ID.\n   * @param options Other options.\n   * @returns Resolved with the submission, resolved with false if not found.\n   */\n  getUserSubmission(workshopId, options = {}) {\n    return _asyncToGenerator(function* () {\n      const userId = options.userId || CoreSites.getCurrentSiteUserId();\n      const submissions = yield AddonModWorkshop.getSubmissions(workshopId, options);\n      return submissions.find(submission => submission.authorid == userId);\n    })();\n  }\n  /**\n   * Return a particular submission. It will use prefetched data if fetch fails.\n   *\n   * @param workshopId Workshop ID.\n   * @param submissionId Submission ID.\n   * @param options Other options.\n   * @returns Resolved with the submission, resolved with false if not found.\n   */\n  getSubmissionById(workshopId, submissionId, options = {}) {\n    return _asyncToGenerator(function* () {\n      try {\n        return yield AddonModWorkshop.getSubmission(workshopId, submissionId, options);\n      } catch (_unused) {\n        const submissions = yield AddonModWorkshop.getSubmissions(workshopId, options);\n        const submission = submissions.find(submission => submission.id == submissionId);\n        if (!submission) {\n          throw new CoreError('Submission not found');\n        }\n        return submission;\n      }\n    })();\n  }\n  /**\n   * Return a particular assesment. It will use prefetched data if fetch fails. It will add assessment form data.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param options Other options.\n   * @returns Resolved with the assessment.\n   */\n  getReviewerAssessmentById(workshopId, assessmentId, options = {}) {\n    return _asyncToGenerator(function* () {\n      let assessment;\n      try {\n        assessment = yield AddonModWorkshop.getAssessment(workshopId, assessmentId, options);\n      } catch (error) {\n        const assessments = yield AddonModWorkshop.getReviewerAssessments(workshopId, options);\n        assessment = assessments.find(ass => ass.id === assessmentId);\n        if (!assessment) {\n          throw error;\n        }\n      }\n      assessment.form = yield AddonModWorkshop.getAssessmentForm(workshopId, assessmentId, options);\n      return assessment;\n    })();\n  }\n  /**\n   * Retrieves the assessment of the given user and all the related data.\n   *\n   * @param workshopId Workshop ID.\n   * @param options Other options.\n   * @returns Promise resolved when the workshop data is retrieved.\n   */\n  getReviewerAssessments(workshopId, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      options.siteId = options.siteId || CoreSites.getCurrentSiteId();\n      const assessments = yield AddonModWorkshop.getReviewerAssessments(workshopId, options);\n      const promises = [];\n      assessments.forEach(assessment => {\n        promises.push(_this.getSubmissionById(workshopId, assessment.submissionid, options).then(submission => {\n          assessment.submission = submission;\n          return;\n        }));\n        promises.push(AddonModWorkshop.getAssessmentForm(workshopId, assessment.id, options).then(assessmentForm => {\n          assessment.form = assessmentForm;\n          return;\n        }));\n      });\n      yield Promise.all(promises);\n      return assessments;\n    })();\n  }\n  /**\n   * Delete stored attachment files for a submission.\n   *\n   * @param workshopId Workshop ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when deleted.\n   */\n  deleteSubmissionStoredFiles(workshopId, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModWorkshopOffline.getSubmissionFolder(workshopId, siteId);\n      // Ignore any errors, CoreFileProvider.removeDir fails if folder doesn't exists.\n      yield CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    })();\n  }\n  /**\n   * Given a list of files (either online files or local files), store the local files in a local folder\n   * to be submitted later.\n   *\n   * @param workshopId Workshop ID.\n   * @param files List of files.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if success, rejected otherwise.\n   */\n  storeSubmissionFiles(workshopId, files, siteId) {\n    return _asyncToGenerator(function* () {\n      // Get the folder where to store the files.\n      const folderPath = yield AddonModWorkshopOffline.getSubmissionFolder(workshopId, siteId);\n      return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    })();\n  }\n  uploadOrStoreSubmissionFiles(workshopId, files, offline, siteId) {\n    if (offline) {\n      return this.storeSubmissionFiles(workshopId, files, siteId);\n    }\n    return CoreFileUploader.uploadOrReuploadFiles(files, ADDON_MOD_WORKSHOP_COMPONENT, workshopId, siteId);\n  }\n  /**\n   * Get a list of stored attachment files for a submission. See AddonModWorkshopHelperProvider#storeFiles.\n   *\n   * @param workshopId Workshop ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getStoredSubmissionFiles(workshopId, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModWorkshopOffline.getSubmissionFolder(workshopId, siteId);\n      // Ignore not found files.\n      return CoreUtils.ignoreErrors(CoreFileUploader.getStoredFiles(folderPath), []);\n    })();\n  }\n  /**\n   * Get a list of stored attachment files for a submission and online files also. See AddonModWorkshopHelperProvider#storeFiles.\n   *\n   * @param filesObject Files object combining offline and online information.\n   * @param workshopId Workshop ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getSubmissionFilesFromOfflineFilesObject(filesObject, workshopId, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModWorkshopOffline.getSubmissionFolder(workshopId, siteId);\n      return CoreFileUploader.getStoredFilesFromOfflineFilesObject(filesObject, folderPath);\n    })();\n  }\n  /**\n   * Delete stored attachment files for an assessment.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when deleted.\n   */\n  deleteAssessmentStoredFiles(workshopId, assessmentId, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModWorkshopOffline.getAssessmentFolder(workshopId, assessmentId, siteId);\n      // Ignore any errors, CoreFileProvider.removeDir fails if folder doesn't exists.\n      yield CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    })();\n  }\n  /**\n   * Given a list of files (either online files or local files), store the local files in a local folder\n   * to be submitted later.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param files List of files.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if success, rejected otherwise.\n   */\n  storeAssessmentFiles(workshopId, assessmentId, files, siteId) {\n    return _asyncToGenerator(function* () {\n      // Get the folder where to store the files.\n      const folderPath = yield AddonModWorkshopOffline.getAssessmentFolder(workshopId, assessmentId, siteId);\n      return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    })();\n  }\n  uploadOrStoreAssessmentFiles(workshopId, assessmentId, files, offline, siteId) {\n    if (offline) {\n      return this.storeAssessmentFiles(workshopId, assessmentId, files, siteId);\n    }\n    return CoreFileUploader.uploadOrReuploadFiles(files, ADDON_MOD_WORKSHOP_COMPONENT, workshopId, siteId);\n  }\n  /**\n   * Get a list of stored attachment files for an assessment. See AddonModWorkshopHelperProvider#storeFiles.\n   *\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getStoredAssessmentFiles(workshopId, assessmentId, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModWorkshopOffline.getAssessmentFolder(workshopId, assessmentId, siteId);\n      // Ignore not found files.\n      return CoreUtils.ignoreErrors(CoreFileUploader.getStoredFiles(folderPath), []);\n    })();\n  }\n  /**\n   * Get a list of stored attachment files for an assessment and online files also. See AddonModWorkshopHelperProvider#storeFiles.\n   *\n   * @param filesObject Files object combining offline and online information.\n   * @param workshopId Workshop ID.\n   * @param assessmentId Assessment ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getAssessmentFilesFromOfflineFilesObject(filesObject, workshopId, assessmentId, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModWorkshopOffline.getAssessmentFolder(workshopId, assessmentId, siteId);\n      return CoreFileUploader.getStoredFilesFromOfflineFilesObject(filesObject, folderPath);\n    })();\n  }\n  /**\n   * Applies offline data to submission.\n   *\n   * @param submission Submission object to be modified.\n   * @param actions Offline actions to be applied to the given submission.\n   * @returns Promise resolved with the files.\n   */\n  applyOfflineData(submission, actions = []) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (actions.length === 0) {\n        return submission;\n      }\n      const baseSubmission = submission !== null && submission !== void 0 ? submission : {\n        id: 0,\n        workshopid: 0,\n        title: '',\n        content: '',\n        timemodified: 0,\n        example: false,\n        authorid: 0,\n        timecreated: 0,\n        contenttrust: 0,\n        attachment: 0,\n        published: false,\n        late: 0\n      };\n      let attachmentsId;\n      const workshopId = actions[0].workshopid;\n      actions.forEach(action => {\n        switch (action.action) {\n          case AddonModWorkshopAction.ADD:\n          case AddonModWorkshopAction.UPDATE:\n            baseSubmission.title = action.title;\n            baseSubmission.content = action.content;\n            baseSubmission.title = action.title;\n            baseSubmission.courseid = action.courseid;\n            baseSubmission.submissionmodified = action.timemodified / 1000;\n            baseSubmission.offline = true;\n            attachmentsId = action.attachmentsid;\n            break;\n          case AddonModWorkshopAction.DELETE:\n            baseSubmission.deleted = true;\n            baseSubmission.submissionmodified = action.timemodified / 1000;\n            break;\n          default:\n        }\n      });\n      // Check offline files for latest attachmentsid.\n      if (attachmentsId) {\n        baseSubmission.attachmentfiles = yield _this2.getSubmissionFilesFromOfflineFilesObject(attachmentsId, workshopId);\n      } else {\n        baseSubmission.attachmentfiles = [];\n      }\n      return baseSubmission;\n    })();\n  }\n  /**\n   * Prepare assessment data to be sent to the server.\n   *\n   * @param workshop Workshop object.\n   * @param selectedValues Assessment current values\n   * @param feedbackText Feedback text.\n   * @param form Assessment form original data.\n   * @param attachmentsId The draft file area id for attachments.\n   * @returns Promise resolved with the data to be sent. Or rejected with the input errors object.\n   */\n  prepareAssessmentData(workshop, selectedValues, feedbackText, form, attachmentsId = 0) {\n    return _asyncToGenerator(function* () {\n      var _workshop$strategy;\n      if (workshop.overallfeedbackmode == AddonModWorkshopOverallFeedbackMode.ENABLED_REQUIRED && !feedbackText) {\n        const errors = {\n          feedbackauthor: Translate.instant('core.err_required')\n        };\n        throw errors;\n      }\n      const data = (yield AddonWorkshopAssessmentStrategyDelegate.prepareAssessmentData((_workshop$strategy = workshop.strategy) !== null && _workshop$strategy !== void 0 ? _workshop$strategy : '', selectedValues, form)) || {};\n      data.feedbackauthor = feedbackText;\n      data.feedbackauthorformat = CoreTextFormat.FORMAT_HTML;\n      data.feedbackauthorattachmentsid = attachmentsId;\n      data.nodims = form.dimenssionscount;\n      return data;\n    })();\n  }\n  /**\n   * Calculates the real value of a grade based on real_grade_value.\n   *\n   * @param value Percentual value from 0 to 100.\n   * @param max The maximal grade.\n   * @param decimals Decimals to show in the formatted grade.\n   * @returns Real grade formatted.\n   */\n  realGradeValueHelper(value, max = 0, decimals = 0) {\n    if (typeof value === 'string') {\n      // Already treated.\n      return value;\n    }\n    if (value === null || value === undefined) {\n      return undefined;\n    }\n    if (max === 0) {\n      return '0';\n    }\n    value = CoreTextUtils.roundToDecimals(max * value / 100, decimals);\n    return CoreUtils.formatFloat(value);\n  }\n  /**\n   * Calculates the real value of a grades of an assessment.\n   *\n   * @param workshop Workshop object.\n   * @param assessment Assessment data.\n   * @returns Assessment with real grades.\n   */\n  realGradeValue(workshop, assessment) {\n    assessment.grade = this.realGradeValueHelper(assessment.grade, workshop.grade, workshop.gradedecimals);\n    assessment.gradinggrade = this.realGradeValueHelper(assessment.gradinggrade, workshop.gradinggrade, workshop.gradedecimals);\n    assessment.gradinggradeover = this.realGradeValueHelper(assessment.gradinggradeover, workshop.gradinggrade, workshop.gradedecimals);\n    return assessment;\n  }\n  /**\n   * Check grade should be shown\n   *\n   * @param grade Grade to be shown\n   * @returns If grade should be shown or not.\n   */\n  showGrade(grade) {\n    return grade !== undefined && grade !== null;\n  }\n}\n_class = AddonModWorkshopHelperProvider;\n_class.ɵfac = function AddonModWorkshopHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModWorkshopHelper = makeSingleton(AddonModWorkshopHelperProvider);","map":{"version":3,"names":["CoreError","CoreFileUploader","CoreFile","CoreSites","CoreTextUtils","CoreTextFormat","CoreUtils","makeSingleton","Translate","AddonWorkshopAssessmentStrategyDelegate","AddonModWorkshopExampleMode","AddonModWorkshopPhase","AddonModWorkshop","AddonModWorkshopAction","AddonModWorkshopOverallFeedbackMode","AddonModWorkshopOffline","ADDON_MOD_WORKSHOP_COMPONENT","AddonModWorkshopHelperProvider","getTask","tasks","taskCode","find","task","code","isTaskDone","completed","canSubmit","workshop","access","examplesMust","useexamples","examplesmode","EXAMPLES_BEFORE_SUBMISSION","examplesDone","canmanageexamples","EXAMPLES_VOLUNTARY","phase","PHASE_SETUP","cansubmit","canAssess","EXAMPLES_BEFORE_ASSESSMENT","getUserSubmission","workshopId","options","_asyncToGenerator","userId","getCurrentSiteUserId","submissions","getSubmissions","submission","authorid","getSubmissionById","submissionId","getSubmission","_unused","id","getReviewerAssessmentById","assessmentId","assessment","getAssessment","error","assessments","getReviewerAssessments","ass","form","getAssessmentForm","_this","siteId","getCurrentSiteId","promises","forEach","push","submissionid","then","assessmentForm","Promise","all","deleteSubmissionStoredFiles","folderPath","getSubmissionFolder","ignoreErrors","removeDir","storeSubmissionFiles","files","storeFilesToUpload","uploadOrStoreSubmissionFiles","offline","uploadOrReuploadFiles","getStoredSubmissionFiles","getStoredFiles","getSubmissionFilesFromOfflineFilesObject","filesObject","getStoredFilesFromOfflineFilesObject","deleteAssessmentStoredFiles","getAssessmentFolder","storeAssessmentFiles","uploadOrStoreAssessmentFiles","getStoredAssessmentFiles","getAssessmentFilesFromOfflineFilesObject","applyOfflineData","actions","_this2","length","baseSubmission","workshopid","title","content","timemodified","example","timecreated","contenttrust","attachment","published","late","attachmentsId","action","ADD","UPDATE","courseid","submissionmodified","attachmentsid","DELETE","deleted","attachmentfiles","prepareAssessmentData","selectedValues","feedbackText","_workshop$strategy","overallfeedbackmode","ENABLED_REQUIRED","errors","feedbackauthor","instant","data","strategy","feedbackauthorformat","FORMAT_HTML","feedbackauthorattachmentsid","nodims","dimenssionscount","realGradeValueHelper","value","max","decimals","undefined","roundToDecimals","formatFloat","realGradeValue","grade","gradedecimals","gradinggrade","gradinggradeover","showGrade","factory","ɵfac","providedIn","AddonModWorkshopHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/workshop/services/workshop-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { FileEntry } from '@awesome-cordova-plugins/file/ngx';\nimport { CoreFile } from '@services/file';\nimport { CoreFileEntry } from '@services/file-helper';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils, CoreTextFormat } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreFormFields } from '@singletons/form';\nimport { AddonModWorkshopAssessmentStrategyFieldErrors } from '../components/assessment-strategy/assessment-strategy';\nimport { AddonWorkshopAssessmentStrategyDelegate } from './assessment-strategy-delegate';\nimport {\n    AddonModWorkshopExampleMode,\n    AddonModWorkshopPhase,\n    AddonModWorkshopUserOptions,\n    AddonModWorkshopData,\n    AddonModWorkshop,\n    AddonModWorkshopSubmissionData,\n    AddonModWorkshopGetWorkshopAccessInformationWSResponse,\n    AddonModWorkshopPhaseTaskData,\n    AddonModWorkshopSubmissionAssessmentData,\n    AddonModWorkshopGetAssessmentFormDefinitionData,\n    AddonModWorkshopAction,\n    AddonModWorkshopOverallFeedbackMode,\n    AddonModWorkshopGetAssessmentFormFieldsParsedData,\n} from './workshop';\nimport { AddonModWorkshopOffline, AddonModWorkshopOfflineSubmission } from './workshop-offline';\nimport { ADDON_MOD_WORKSHOP_COMPONENT } from '@addons/mod/workshop/constants';\n\n/**\n * Helper to gather some common functions for workshop.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModWorkshopHelperProvider {\n\n    /**\n     * Get a task by code.\n     *\n     * @param tasks Array of tasks.\n     * @param taskCode Unique task code.\n     * @returns Task requested\n     */\n    getTask(tasks: AddonModWorkshopPhaseTaskData[], taskCode: string): AddonModWorkshopPhaseTaskData | undefined {\n        return tasks.find((task) => task.code == taskCode);\n    }\n\n    /**\n     * Check is task code is done.\n     *\n     * @param tasks Array of tasks.\n     * @param taskCode Unique task code.\n     * @returns True if task is completed.\n     */\n    isTaskDone(tasks: AddonModWorkshopPhaseTaskData[], taskCode: string): boolean {\n        const task = this.getTask(tasks, taskCode);\n\n        if (task) {\n            return !!task.completed;\n        }\n\n        // Task not found, assume true.\n        return true;\n    }\n\n    /**\n     * Return if a user can submit a workshop.\n     *\n     * @param workshop Workshop info.\n     * @param access Access information.\n     * @param tasks Array of tasks.\n     * @returns True if the user can submit the workshop.\n     */\n    canSubmit(\n        workshop: AddonModWorkshopData,\n        access: AddonModWorkshopGetWorkshopAccessInformationWSResponse,\n        tasks: AddonModWorkshopPhaseTaskData[],\n    ): boolean {\n        const examplesMust = workshop.useexamples &&\n            workshop.examplesmode == AddonModWorkshopExampleMode.EXAMPLES_BEFORE_SUBMISSION;\n        const examplesDone = access.canmanageexamples ||\n            workshop.examplesmode == AddonModWorkshopExampleMode.EXAMPLES_VOLUNTARY ||\n            this.isTaskDone(tasks, 'examples');\n\n        return workshop.phase > AddonModWorkshopPhase.PHASE_SETUP && access.cansubmit && (!examplesMust || examplesDone);\n    }\n\n    /**\n     * Return if a user can assess a workshop.\n     *\n     * @param workshop Workshop info.\n     * @param access Access information.\n     * @returns True if the user can assess the workshop.\n     */\n    canAssess(workshop: AddonModWorkshopData, access: AddonModWorkshopGetWorkshopAccessInformationWSResponse): boolean {\n        const examplesMust = workshop.useexamples &&\n            workshop.examplesmode == AddonModWorkshopExampleMode.EXAMPLES_BEFORE_ASSESSMENT;\n\n        const examplesDone = access.canmanageexamples;\n\n        return !examplesMust || examplesDone;\n    }\n\n    /**\n     * Return a particular user submission from the submission list.\n     *\n     * @param workshopId Workshop ID.\n     * @param options Other options.\n     * @returns Resolved with the submission, resolved with false if not found.\n     */\n    async getUserSubmission(\n        workshopId: number,\n        options: AddonModWorkshopUserOptions = {},\n    ): Promise<AddonModWorkshopSubmissionData | undefined> {\n        const userId = options.userId || CoreSites.getCurrentSiteUserId();\n\n        const submissions = await AddonModWorkshop.getSubmissions(workshopId, options);\n\n        return submissions.find((submission) => submission.authorid == userId);\n    }\n\n    /**\n     * Return a particular submission. It will use prefetched data if fetch fails.\n     *\n     * @param workshopId Workshop ID.\n     * @param submissionId Submission ID.\n     * @param options Other options.\n     * @returns Resolved with the submission, resolved with false if not found.\n     */\n    async getSubmissionById(\n        workshopId: number,\n        submissionId: number,\n        options: AddonModWorkshopUserOptions = {},\n    ): Promise<AddonModWorkshopSubmissionData> {\n        try {\n            return await AddonModWorkshop.getSubmission(workshopId, submissionId, options);\n        } catch {\n            const submissions = await AddonModWorkshop.getSubmissions(workshopId, options);\n\n            const submission = submissions.find((submission) => submission.id == submissionId);\n\n            if (!submission) {\n                throw new CoreError('Submission not found');\n            }\n\n            return submission;\n        }\n    }\n\n    /**\n     * Return a particular assesment. It will use prefetched data if fetch fails. It will add assessment form data.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param options Other options.\n     * @returns Resolved with the assessment.\n     */\n    async getReviewerAssessmentById(\n        workshopId: number,\n        assessmentId: number,\n        options: AddonModWorkshopUserOptions = {},\n    ): Promise<AddonModWorkshopSubmissionAssessmentWithFormData> {\n        let assessment: AddonModWorkshopSubmissionAssessmentWithFormData | undefined;\n\n        try {\n            assessment = await AddonModWorkshop.getAssessment(workshopId, assessmentId, options);\n        } catch (error) {\n            const assessments = await AddonModWorkshop.getReviewerAssessments(workshopId, options);\n            assessment = assessments.find((ass) => ass.id === assessmentId);\n\n            if (!assessment) {\n                throw error;\n            }\n        }\n\n        assessment.form = await AddonModWorkshop.getAssessmentForm(workshopId, assessmentId, options);\n\n        return assessment;\n    }\n\n    /**\n     * Retrieves the assessment of the given user and all the related data.\n     *\n     * @param workshopId Workshop ID.\n     * @param options Other options.\n     * @returns Promise resolved when the workshop data is retrieved.\n     */\n    async getReviewerAssessments(\n        workshopId: number,\n        options: AddonModWorkshopUserOptions = {},\n    ): Promise<AddonModWorkshopSubmissionAssessmentWithFormData[]> {\n        options.siteId = options.siteId || CoreSites.getCurrentSiteId();\n\n        const assessments: AddonModWorkshopSubmissionAssessmentWithFormData[] =\n            await AddonModWorkshop.getReviewerAssessments(workshopId, options);\n\n        const promises: Promise<void>[] = [];\n        assessments.forEach((assessment) => {\n            promises.push(this.getSubmissionById(workshopId, assessment.submissionid, options).then((submission) => {\n                assessment.submission = submission;\n\n                return;\n            }));\n            promises.push(AddonModWorkshop.getAssessmentForm(workshopId, assessment.id, options).then((assessmentForm) => {\n                assessment.form = assessmentForm;\n\n                return;\n            }));\n\n        });\n        await Promise.all(promises);\n\n        return assessments;\n    }\n\n    /**\n     * Delete stored attachment files for a submission.\n     *\n     * @param workshopId Workshop ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when deleted.\n     */\n    async deleteSubmissionStoredFiles(workshopId: number, siteId?: string): Promise<void> {\n        const folderPath = await AddonModWorkshopOffline.getSubmissionFolder(workshopId, siteId);\n\n        // Ignore any errors, CoreFileProvider.removeDir fails if folder doesn't exists.\n        await CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    }\n\n    /**\n     * Given a list of files (either online files or local files), store the local files in a local folder\n     * to be submitted later.\n     *\n     * @param workshopId Workshop ID.\n     * @param files List of files.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success, rejected otherwise.\n     */\n    async storeSubmissionFiles(\n        workshopId: number,\n        files: CoreFileEntry[],\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult> {\n        // Get the folder where to store the files.\n        const folderPath = await AddonModWorkshopOffline.getSubmissionFolder(workshopId, siteId);\n\n        return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    }\n\n    /**\n     * Upload or store some files for a submission, depending if the user is offline or not.\n     *\n     * @param workshopId Workshop ID.\n     * @param files List of files.\n     * @param offline True if files sould be stored for offline, false to upload them.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success.\n     */\n    uploadOrStoreSubmissionFiles(\n        workshopId: number,\n        files: CoreFileEntry[],\n        offline: true,\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult>;\n    uploadOrStoreSubmissionFiles(\n        workshopId: number,\n        files: CoreFileEntry[],\n        offline: false,\n        siteId?: string,\n    ): Promise<number>;\n    uploadOrStoreSubmissionFiles(\n        workshopId: number,\n        files: CoreFileEntry[],\n        offline: boolean,\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult | number> {\n        if (offline) {\n            return this.storeSubmissionFiles(workshopId, files, siteId);\n        }\n\n        return CoreFileUploader.uploadOrReuploadFiles(files, ADDON_MOD_WORKSHOP_COMPONENT, workshopId, siteId);\n    }\n\n    /**\n     * Get a list of stored attachment files for a submission. See AddonModWorkshopHelperProvider#storeFiles.\n     *\n     * @param workshopId Workshop ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getStoredSubmissionFiles(\n        workshopId: number,\n        siteId?: string,\n    ): Promise<FileEntry[]> {\n        const folderPath = await AddonModWorkshopOffline.getSubmissionFolder(workshopId, siteId);\n\n        // Ignore not found files.\n        return CoreUtils.ignoreErrors(CoreFileUploader.getStoredFiles(folderPath), []);\n    }\n\n    /**\n     * Get a list of stored attachment files for a submission and online files also. See AddonModWorkshopHelperProvider#storeFiles.\n     *\n     * @param filesObject Files object combining offline and online information.\n     * @param workshopId Workshop ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getSubmissionFilesFromOfflineFilesObject(\n        filesObject: CoreFileUploaderStoreFilesResult,\n        workshopId: number,\n        siteId?: string,\n    ): Promise<CoreFileEntry[]> {\n        const folderPath = await AddonModWorkshopOffline.getSubmissionFolder(workshopId, siteId);\n\n        return CoreFileUploader.getStoredFilesFromOfflineFilesObject(filesObject, folderPath);\n    }\n\n    /**\n     * Delete stored attachment files for an assessment.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when deleted.\n     */\n    async deleteAssessmentStoredFiles(workshopId: number, assessmentId: number, siteId?: string): Promise<void> {\n        const folderPath = await AddonModWorkshopOffline.getAssessmentFolder(workshopId, assessmentId, siteId);\n\n        // Ignore any errors, CoreFileProvider.removeDir fails if folder doesn't exists.\n        await CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    }\n\n    /**\n     * Given a list of files (either online files or local files), store the local files in a local folder\n     * to be submitted later.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param files List of files.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success, rejected otherwise.\n     */\n    async storeAssessmentFiles(\n        workshopId: number,\n        assessmentId: number,\n        files: CoreFileEntry[],\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult> {\n        // Get the folder where to store the files.\n        const folderPath = await AddonModWorkshopOffline.getAssessmentFolder(workshopId, assessmentId, siteId);\n\n        return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    }\n\n    /**\n     * Upload or store some files for an assessment, depending if the user is offline or not.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId ID.\n     * @param files List of files.\n     * @param offline True if files sould be stored for offline, false to upload them.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success.\n     */\n    uploadOrStoreAssessmentFiles(\n        workshopId: number,\n        assessmentId: number,\n        files: CoreFileEntry[],\n        offline: true,\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult>;\n    uploadOrStoreAssessmentFiles(\n        workshopId: number,\n        assessmentId: number,\n        files: CoreFileEntry[],\n        offline: false,\n        siteId?: string,\n    ): Promise<number>;\n    uploadOrStoreAssessmentFiles(\n        workshopId: number,\n        assessmentId: number,\n        files: CoreFileEntry[],\n        offline: boolean,\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult | number> {\n        if (offline) {\n            return this.storeAssessmentFiles(workshopId, assessmentId, files, siteId);\n        }\n\n        return CoreFileUploader.uploadOrReuploadFiles(files, ADDON_MOD_WORKSHOP_COMPONENT, workshopId, siteId);\n    }\n\n    /**\n     * Get a list of stored attachment files for an assessment. See AddonModWorkshopHelperProvider#storeFiles.\n     *\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getStoredAssessmentFiles(workshopId: number, assessmentId: number, siteId?: string): Promise<FileEntry[]> {\n        const folderPath = await AddonModWorkshopOffline.getAssessmentFolder(workshopId, assessmentId, siteId);\n\n        // Ignore not found files.\n        return CoreUtils.ignoreErrors(CoreFileUploader.getStoredFiles(folderPath), []);\n    }\n\n    /**\n     * Get a list of stored attachment files for an assessment and online files also. See AddonModWorkshopHelperProvider#storeFiles.\n     *\n     * @param filesObject Files object combining offline and online information.\n     * @param workshopId Workshop ID.\n     * @param assessmentId Assessment ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getAssessmentFilesFromOfflineFilesObject(\n        filesObject: CoreFileUploaderStoreFilesResult,\n        workshopId: number,\n        assessmentId: number,\n        siteId?: string,\n    ): Promise<CoreFileEntry[]> {\n        const folderPath = await AddonModWorkshopOffline.getAssessmentFolder(workshopId, assessmentId, siteId);\n\n        return CoreFileUploader.getStoredFilesFromOfflineFilesObject(filesObject, folderPath);\n    }\n\n    /**\n     * Applies offline data to submission.\n     *\n     * @param submission Submission object to be modified.\n     * @param actions Offline actions to be applied to the given submission.\n     * @returns Promise resolved with the files.\n     */\n    async applyOfflineData(\n        submission?: AddonModWorkshopSubmissionDataWithOfflineData,\n        actions: AddonModWorkshopOfflineSubmission[] = [],\n    ): Promise<AddonModWorkshopSubmissionDataWithOfflineData | undefined> {\n        if (actions.length === 0) {\n            return submission;\n        }\n\n        const baseSubmission = submission ?? {\n            id: 0,\n            workshopid: 0,\n            title: '',\n            content: '',\n            timemodified: 0,\n            example: false,\n            authorid: 0,\n            timecreated: 0,\n            contenttrust: 0,\n            attachment: 0,\n            published: false,\n            late: 0,\n        };\n\n        let attachmentsId: CoreFileUploaderStoreFilesResult | undefined;\n        const workshopId = actions[0].workshopid;\n\n        actions.forEach((action) => {\n            switch (action.action) {\n                case AddonModWorkshopAction.ADD:\n                case AddonModWorkshopAction.UPDATE:\n                    baseSubmission.title = action.title;\n                    baseSubmission.content = action.content;\n                    baseSubmission.title = action.title;\n                    baseSubmission.courseid = action.courseid;\n                    baseSubmission.submissionmodified = action.timemodified / 1000;\n                    baseSubmission.offline = true;\n                    attachmentsId = action.attachmentsid as CoreFileUploaderStoreFilesResult;\n                    break;\n                case AddonModWorkshopAction.DELETE:\n                    baseSubmission.deleted = true;\n                    baseSubmission.submissionmodified = action.timemodified / 1000;\n                    break;\n                default:\n            }\n        });\n\n        // Check offline files for latest attachmentsid.\n        if (attachmentsId) {\n            baseSubmission.attachmentfiles =\n                await this.getSubmissionFilesFromOfflineFilesObject(attachmentsId, workshopId);\n        } else {\n            baseSubmission.attachmentfiles = [];\n        }\n\n        return baseSubmission;\n    }\n\n    /**\n     * Prepare assessment data to be sent to the server.\n     *\n     * @param workshop Workshop object.\n     * @param selectedValues Assessment current values\n     * @param feedbackText Feedback text.\n     * @param form Assessment form original data.\n     * @param attachmentsId The draft file area id for attachments.\n     * @returns Promise resolved with the data to be sent. Or rejected with the input errors object.\n     */\n    async prepareAssessmentData(\n        workshop: AddonModWorkshopData,\n        selectedValues: AddonModWorkshopGetAssessmentFormFieldsParsedData[],\n        feedbackText: string,\n        form: AddonModWorkshopGetAssessmentFormDefinitionData,\n        attachmentsId: CoreFileUploaderStoreFilesResult | number = 0,\n    ): Promise<CoreFormFields<unknown>> {\n\n        if (workshop.overallfeedbackmode == AddonModWorkshopOverallFeedbackMode.ENABLED_REQUIRED && !feedbackText) {\n            const errors: AddonModWorkshopAssessmentStrategyFieldErrors =\n                { feedbackauthor: Translate.instant('core.err_required') };\n            throw errors;\n        }\n\n        const data =\n            (await AddonWorkshopAssessmentStrategyDelegate.prepareAssessmentData(workshop.strategy ?? '', selectedValues, form)) ||\n            {};\n        data.feedbackauthor = feedbackText;\n        data.feedbackauthorformat = CoreTextFormat.FORMAT_HTML;\n        data.feedbackauthorattachmentsid = attachmentsId;\n        data.nodims = form.dimenssionscount;\n\n        return data;\n    }\n\n    /**\n     * Calculates the real value of a grade based on real_grade_value.\n     *\n     * @param value Percentual value from 0 to 100.\n     * @param max The maximal grade.\n     * @param decimals Decimals to show in the formatted grade.\n     * @returns Real grade formatted.\n     */\n    protected realGradeValueHelper(value?: number | string, max = 0, decimals = 0): string | undefined {\n        if (typeof value === 'string') {\n            // Already treated.\n            return value;\n        }\n\n        if (value === null || value === undefined) {\n            return undefined;\n        }\n\n        if (max === 0) {\n            return '0';\n        }\n\n        value = CoreTextUtils.roundToDecimals(max * value / 100, decimals);\n\n        return CoreUtils.formatFloat(value);\n    }\n\n    /**\n     * Calculates the real value of a grades of an assessment.\n     *\n     * @param workshop Workshop object.\n     * @param assessment Assessment data.\n     * @returns Assessment with real grades.\n     */\n    realGradeValue(\n        workshop: AddonModWorkshopData,\n        assessment: AddonModWorkshopSubmissionAssessmentWithFormData,\n    ): AddonModWorkshopSubmissionAssessmentWithFormData {\n        assessment.grade = this.realGradeValueHelper(assessment.grade, workshop.grade, workshop.gradedecimals);\n        assessment.gradinggrade = this.realGradeValueHelper(assessment.gradinggrade, workshop.gradinggrade, workshop.gradedecimals);\n\n        assessment.gradinggradeover = this.realGradeValueHelper(\n            assessment.gradinggradeover,\n            workshop.gradinggrade,\n            workshop.gradedecimals,\n        );\n\n        return assessment;\n    }\n\n    /**\n     * Check grade should be shown\n     *\n     * @param grade Grade to be shown\n     * @returns If grade should be shown or not.\n     */\n    showGrade(grade?: number|string): boolean {\n        return grade !== undefined && grade !== null;\n    }\n\n}\nexport const AddonModWorkshopHelper = makeSingleton(AddonModWorkshopHelperProvider);\n\nexport type AddonModWorkshopSubmissionAssessmentWithFormData =\n    Omit<AddonModWorkshopSubmissionAssessmentData, 'grade'|'gradinggrade'|'gradinggradeover'|'feedbackattachmentfiles'> & {\n        form?: AddonModWorkshopGetAssessmentFormDefinitionData;\n        submission?: AddonModWorkshopSubmissionData;\n        offline?: boolean;\n        strategy?: string;\n        grade?: string | number;\n        gradinggrade?: string | number;\n        gradinggradeover?: string | number;\n        ownAssessment?: boolean;\n        feedbackauthor?: string;\n        feedbackattachmentfiles: CoreFileEntry[]; // Feedbackattachmentfiles.\n    };\n\nexport type AddonModWorkshopSubmissionDataWithOfflineData = Omit<AddonModWorkshopSubmissionData, 'attachmentfiles'> & {\n    courseid?: number;\n    submissionmodified?: number;\n    offline?: boolean;\n    deleted?: boolean;\n    attachmentfiles?: CoreFileEntry[];\n    reviewedby?: AddonModWorkshopSubmissionAssessmentWithFormData[];\n    reviewerof?: AddonModWorkshopSubmissionAssessmentWithFormData[];\n    gradinggrade?: number;\n    reviewedbydone?: number;\n    reviewerofdone?: number;\n    reviewedbycount?: number;\n    reviewerofcount?: number;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}