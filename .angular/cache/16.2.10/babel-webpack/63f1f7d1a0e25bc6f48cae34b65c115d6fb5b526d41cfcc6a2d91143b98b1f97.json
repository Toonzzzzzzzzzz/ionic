{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreDelegate } from '@classes/delegate';\nimport { Subject } from 'rxjs';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./handlers/default-block\";\n/**\n * Delegate to register block handlers.\n */\nexport class CoreBlockDelegateService extends CoreDelegate {\n  constructor(defaultHandler) {\n    super('CoreBlockDelegate', true);\n    this.defaultHandler = defaultHandler;\n    this.handlerNameProperty = 'blockName';\n    this.featurePrefix = 'CoreBlockDelegate_';\n    this.blocksUpdateObservable = new Subject();\n  }\n  /**\n   * Check if blocks are disabled in a certain site.\n   *\n   * @param site Site. If not defined, use current site.\n   * @returns Whether it's disabled.\n   */\n  areBlocksDisabledInSite(site) {\n    site = site || CoreSites.getCurrentSite();\n    return !!site && site.isFeatureDisabled('NoDelegate_SiteBlocks');\n  }\n  /**\n   * Check if blocks are disabled in a certain site for courses.\n   *\n   * @param site Site. If not defined, use current site.\n   * @returns Whether it's disabled.\n   */\n  areBlocksDisabledInCourses(site) {\n    site = site || CoreSites.getCurrentSite();\n    return !!site && site.isFeatureDisabled('NoDelegate_CourseBlocks');\n  }\n  /**\n   * Check if blocks are disabled in a certain site.\n   *\n   * @param siteId Site Id. If not defined, use current site.\n   * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n   */\n  areBlocksDisabled(siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this.areBlocksDisabledInSite(site);\n    })();\n  }\n  /**\n   * Get the display data for a certain block.\n   *\n   * @param block The block to render.\n   * @param contextLevel The context where the block will be used.\n   * @param instanceId The instance ID associated with the context level.\n   * @returns Promise resolved with the display data.\n   */\n  getBlockDisplayData(block, contextLevel, instanceId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.executeFunctionOnEnabled(block.name, 'getDisplayData', [block, contextLevel, instanceId]);\n    })();\n  }\n  /**\n   * Check if any of the blocks in a list is supported.\n   *\n   * @param blocks The list of blocks.\n   * @returns Whether any of the blocks is supported.\n   */\n  hasSupportedBlock(blocks) {\n    blocks = blocks || [];\n    return !!blocks.find(block => this.isBlockSupported(block.name));\n  }\n  /**\n   * Check if a block is supported.\n   *\n   * @param name Block \"name\". E.g. 'activity_modules'.\n   * @returns Whether it's supported.\n   */\n  isBlockSupported(name) {\n    return this.hasHandler(name, true);\n  }\n  /**\n   * Check if feature is enabled or disabled in the site, depending on the feature prefix and the handler name.\n   *\n   * @param handler Handler to check.\n   * @param site Site to check.\n   * @returns Whether is enabled or disabled in site.\n   */\n  isFeatureDisabled(handler, site) {\n    // Allow displaying my overview even if all blocks are disabled, to avoid having an empty My Courses.\n    return this.areBlocksDisabledInSite(site) && handler.blockName !== 'myoverview' || super.isFeatureDisabled(handler, site);\n  }\n  /**\n   * Called when there are new block handlers available. Informs anyone who subscribed to the\n   * observable.\n   */\n  updateData() {\n    this.blocksUpdateObservable.next();\n  }\n}\n_class = CoreBlockDelegateService;\n_class.ɵfac = function CoreBlockDelegateService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.CoreBlockDefaultHandler));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreBlockDelegate = makeSingleton(CoreBlockDelegateService);","map":{"version":3,"names":["CoreSites","CoreDelegate","Subject","makeSingleton","CoreBlockDelegateService","constructor","defaultHandler","handlerNameProperty","featurePrefix","blocksUpdateObservable","areBlocksDisabledInSite","site","getCurrentSite","isFeatureDisabled","areBlocksDisabledInCourses","areBlocksDisabled","siteId","_this","_asyncToGenerator","getSite","getBlockDisplayData","block","contextLevel","instanceId","_this2","executeFunctionOnEnabled","name","hasSupportedBlock","blocks","find","isBlockSupported","hasHandler","handler","blockName","updateData","next","i0","ɵɵinject","i1","CoreBlockDefaultHandler","factory","ɵfac","providedIn","CoreBlockDelegate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/block/services/block-delegate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport { CoreDelegate, CoreDelegateHandler } from '@classes/delegate';\nimport { CoreSite } from '@classes/sites/site';\nimport { Subject } from 'rxjs';\nimport { CoreCourseBlock } from '@features/course/services/course';\nimport { Params } from '@angular/router';\nimport { makeSingleton } from '@singletons';\nimport { CoreBlockDefaultHandler } from './handlers/default-block';\nimport { CoreNavigationOptions } from '@services/navigator';\nimport type { ICoreBlockComponent } from '@features/block/classes/base-block-component';\n\n/**\n * Interface that all blocks must implement.\n */\nexport interface CoreBlockHandler extends CoreDelegateHandler {\n    /**\n     * Name of the block the handler supports. E.g. 'activity_modules'.\n     */\n    blockName: string;\n\n    /**\n     * Returns the data needed to render the block.\n     *\n     * @param block The block to render.\n     * @param contextLevel The context where the block will be used.\n     * @param instanceId The instance ID associated with the context level.\n     * @returns Data or promise resolved with the data.\n     */\n    getDisplayData?(\n        block: CoreCourseBlock,\n        contextLevel: string,\n        instanceId: number,\n    ): undefined | CoreBlockHandlerData | Promise<CoreBlockHandlerData>;\n}\n\n/**\n * Data needed to render a block. It's returned by the handler.\n */\nexport interface CoreBlockHandlerData {\n    /**\n     * Title to display for the block.\n     */\n    title: string;\n\n    /**\n     * Class to add to the displayed block.\n     */\n    class?: string;\n\n    /**\n     * The component to render the contents of the block.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     */\n    component: Type<ICoreBlockComponent>;\n\n    /**\n     * Data to pass to the component. All the properties in this object will be passed to the component as inputs.\n     */\n    componentData?: Record<string | number, unknown>;\n\n    /**\n     * Link to go when showing only title.\n     */\n    link?: string;\n\n    /**\n     * Params of the link.\n     */\n    linkParams?: Params;\n\n    /**\n     * Navigation options.\n     */\n    navOptions?: CoreNavigationOptions;\n}\n\n/**\n * Delegate to register block handlers.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreBlockDelegateService extends CoreDelegate<CoreBlockHandler> {\n\n    protected handlerNameProperty = 'blockName';\n\n    protected featurePrefix = 'CoreBlockDelegate_';\n\n    blocksUpdateObservable: Subject<void>;\n\n    constructor(\n        protected defaultHandler: CoreBlockDefaultHandler,\n    ) {\n        super('CoreBlockDelegate', true);\n\n        this.blocksUpdateObservable = new Subject<void>();\n    }\n\n    /**\n     * Check if blocks are disabled in a certain site.\n     *\n     * @param site Site. If not defined, use current site.\n     * @returns Whether it's disabled.\n     */\n    areBlocksDisabledInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site && site.isFeatureDisabled('NoDelegate_SiteBlocks');\n    }\n\n    /**\n     * Check if blocks are disabled in a certain site for courses.\n     *\n     * @param site Site. If not defined, use current site.\n     * @returns Whether it's disabled.\n     */\n    areBlocksDisabledInCourses(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site && site.isFeatureDisabled('NoDelegate_CourseBlocks');\n    }\n\n    /**\n     * Check if blocks are disabled in a certain site.\n     *\n     * @param siteId Site Id. If not defined, use current site.\n     * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n     */\n    async areBlocksDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.areBlocksDisabledInSite(site);\n    }\n\n    /**\n     * Get the display data for a certain block.\n     *\n     * @param block The block to render.\n     * @param contextLevel The context where the block will be used.\n     * @param instanceId The instance ID associated with the context level.\n     * @returns Promise resolved with the display data.\n     */\n    async getBlockDisplayData(\n        block: CoreCourseBlock,\n        contextLevel: string,\n        instanceId: number,\n    ): Promise<CoreBlockHandlerData | undefined> {\n        return this.executeFunctionOnEnabled(\n            block.name,\n            'getDisplayData',\n            [block, contextLevel, instanceId],\n        );\n    }\n\n    /**\n     * Check if any of the blocks in a list is supported.\n     *\n     * @param blocks The list of blocks.\n     * @returns Whether any of the blocks is supported.\n     */\n    hasSupportedBlock(blocks: CoreCourseBlock[]): boolean {\n        blocks = blocks || [];\n\n        return !!blocks.find((block) => this.isBlockSupported(block.name));\n    }\n\n    /**\n     * Check if a block is supported.\n     *\n     * @param name Block \"name\". E.g. 'activity_modules'.\n     * @returns Whether it's supported.\n     */\n    isBlockSupported(name: string): boolean {\n        return this.hasHandler(name, true);\n    }\n\n    /**\n     * Check if feature is enabled or disabled in the site, depending on the feature prefix and the handler name.\n     *\n     * @param handler Handler to check.\n     * @param site Site to check.\n     * @returns Whether is enabled or disabled in site.\n     */\n    protected isFeatureDisabled(handler: CoreBlockHandler, site: CoreSite): boolean {\n        // Allow displaying my overview even if all blocks are disabled, to avoid having an empty My Courses.\n        return (this.areBlocksDisabledInSite(site) && handler.blockName !== 'myoverview') ||\n            super.isFeatureDisabled(handler, site);\n    }\n\n    /**\n     * Called when there are new block handlers available. Informs anyone who subscribed to the\n     * observable.\n     */\n    updateData(): void {\n        this.blocksUpdateObservable.next();\n    }\n\n}\n\nexport const CoreBlockDelegate = makeSingleton(CoreBlockDelegateService);\n"],"mappings":";;AAeA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,YAAY,QAA6B,mBAAmB;AAErE,SAASC,OAAO,QAAQ,MAAM;AAG9B,SAASC,aAAa,QAAQ,aAAa;;;AAsE3C;;;AAIA,OAAM,MAAOC,wBAAyB,SAAQH,YAA8B;EAQxEI,YACcC,cAAuC;IAEjD,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAAC;IAFtB,KAAAA,cAAc,GAAdA,cAAc;IAPlB,KAAAC,mBAAmB,GAAG,WAAW;IAEjC,KAAAC,aAAa,GAAG,oBAAoB;IAS1C,IAAI,CAACC,sBAAsB,GAAG,IAAIP,OAAO,EAAQ;EACrD;EAEA;;;;;;EAMAQ,uBAAuBA,CAACC,IAAe;IACnCA,IAAI,GAAGA,IAAI,IAAIX,SAAS,CAACY,cAAc,EAAE;IAEzC,OAAO,CAAC,CAACD,IAAI,IAAIA,IAAI,CAACE,iBAAiB,CAAC,uBAAuB,CAAC;EACpE;EAEA;;;;;;EAMAC,0BAA0BA,CAACH,IAAe;IACtCA,IAAI,GAAGA,IAAI,IAAIX,SAAS,CAACY,cAAc,EAAE;IAEzC,OAAO,CAAC,CAACD,IAAI,IAAIA,IAAI,CAACE,iBAAiB,CAAC,yBAAyB,CAAC;EACtE;EAEA;;;;;;EAMME,iBAAiBA,CAACC,MAAe;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACnC,MAAMP,IAAI,SAASX,SAAS,CAACmB,OAAO,CAACH,MAAM,CAAC;MAE5C,OAAOC,KAAI,CAACP,uBAAuB,CAACC,IAAI,CAAC;IAAC;EAC9C;EAEA;;;;;;;;EAQMS,mBAAmBA,CACrBC,KAAsB,EACtBC,YAAoB,EACpBC,UAAkB;IAAA,IAAAC,MAAA;IAAA,OAAAN,iBAAA;MAElB,OAAOM,MAAI,CAACC,wBAAwB,CAChCJ,KAAK,CAACK,IAAI,EACV,gBAAgB,EAChB,CAACL,KAAK,EAAEC,YAAY,EAAEC,UAAU,CAAC,CACpC;IAAC;EACN;EAEA;;;;;;EAMAI,iBAAiBA,CAACC,MAAyB;IACvCA,MAAM,GAAGA,MAAM,IAAI,EAAE;IAErB,OAAO,CAAC,CAACA,MAAM,CAACC,IAAI,CAAER,KAAK,IAAK,IAAI,CAACS,gBAAgB,CAACT,KAAK,CAACK,IAAI,CAAC,CAAC;EACtE;EAEA;;;;;;EAMAI,gBAAgBA,CAACJ,IAAY;IACzB,OAAO,IAAI,CAACK,UAAU,CAACL,IAAI,EAAE,IAAI,CAAC;EACtC;EAEA;;;;;;;EAOUb,iBAAiBA,CAACmB,OAAyB,EAAErB,IAAc;IACjE;IACA,OAAQ,IAAI,CAACD,uBAAuB,CAACC,IAAI,CAAC,IAAIqB,OAAO,CAACC,SAAS,KAAK,YAAY,IAC5E,KAAK,CAACpB,iBAAiB,CAACmB,OAAO,EAAErB,IAAI,CAAC;EAC9C;EAEA;;;;EAIAuB,UAAUA,CAAA;IACN,IAAI,CAACzB,sBAAsB,CAAC0B,IAAI,EAAE;EACtC;;SAjHS/B,wBAAyB;;mBAAzBA,MAAwB,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,uBAAA;AAAA;;SAAxBnC,MAAwB;EAAAoC,OAAA,EAAxBpC,MAAwB,CAAAqC,IAAA;EAAAC,UAAA,EADX;AAAM;AAsHhC,OAAO,MAAMC,iBAAiB,GAAGxC,aAAa,CAACC,wBAAwB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}