{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreSite } from '@classes/sites/site';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreMimetypeUtils } from '@services/utils/mimetype';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreError } from '@classes/errors/error';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaModUrl:';\n/**\n * Service that provides some features for urls.\n */\nexport class AddonModUrlProvider {\n  /**\n   * Get the final display type for a certain URL. Based on Moodle's url_get_final_display_type.\n   *\n   * @param url URL data.\n   * @returns Final display type.\n   */\n  getFinalDisplayType(url) {\n    var _url$externalurl$matc;\n    if (!url) {\n      return -1;\n    }\n    const extension = CoreMimetypeUtils.guessExtensionFromUrl(url.externalurl);\n    // PDFs can be embedded in web, but not in the Mobile app.\n    if (url.display == CoreConstants.RESOURCELIB_DISPLAY_EMBED && extension == 'pdf') {\n      return CoreConstants.RESOURCELIB_DISPLAY_DOWNLOAD;\n    }\n    if (url.display != CoreConstants.RESOURCELIB_DISPLAY_AUTO) {\n      return url.display;\n    }\n    // Detect links to local moodle pages.\n    const currentSite = CoreSites.getCurrentSite();\n    if (currentSite && currentSite.containsUrl(url.externalurl)) {\n      if (url.externalurl.indexOf('file.php') == -1 && url.externalurl.indexOf('.php') != -1) {\n        // Most probably our moodle page with navigation.\n        return CoreConstants.RESOURCELIB_DISPLAY_OPEN;\n      }\n    }\n    const download = ['application/zip', 'application/x-tar', 'application/g-zip', 'application/pdf', 'text/html'];\n    let mimetype = CoreMimetypeUtils.getMimeType(extension);\n    if (url.externalurl.indexOf('.php') != -1 || url.externalurl.slice(-1) === '/' || url.externalurl.indexOf('//') != -1 && ((_url$externalurl$matc = url.externalurl.match(/\\//g)) === null || _url$externalurl$matc === void 0 ? void 0 : _url$externalurl$matc.length) == 2) {\n      // Seems to be a web, use HTML mimetype.\n      mimetype = 'text/html';\n    }\n    if (mimetype && download.indexOf(mimetype) != -1) {\n      return CoreConstants.RESOURCELIB_DISPLAY_DOWNLOAD;\n    }\n    if (extension && CoreMimetypeUtils.canBeEmbedded(extension)) {\n      return CoreConstants.RESOURCELIB_DISPLAY_EMBED;\n    }\n    // Let the browser deal with it somehow.\n    return CoreConstants.RESOURCELIB_DISPLAY_OPEN;\n  }\n  /**\n   * Get cache key for url data WS calls.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getUrlCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'url:' + courseId;\n  }\n  /**\n   * Get a url data.\n   *\n   * @param courseId Course ID.\n   * @param key Name of the property to check.\n   * @param value Value to search.\n   * @param options Other options.\n   * @returns Promise resolved when the url is retrieved.\n   */\n  getUrlDataByKey(courseId, key, value, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        courseids: [courseId]\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this.getUrlCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: AddonModUrlProvider.COMPONENT\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_url_get_urls_by_courses', params, preSets);\n      const currentUrl = response.urls.find(url => url[key] == value);\n      if (currentUrl) {\n        return currentUrl;\n      }\n      throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    })();\n  }\n  /**\n   * Get a url by course module ID.\n   *\n   * @param courseId Course ID.\n   * @param cmId Course module ID.\n   * @param options Other options.\n   * @returns Promise resolved when the url is retrieved.\n   */\n  getUrl(courseId, cmId, options = {}) {\n    return this.getUrlDataByKey(courseId, 'coursemodule', cmId, options);\n  }\n  /**\n   * Guess the icon for a certain URL. Based on Moodle's url_guess_icon.\n   *\n   * @param url URL to check.\n   * @returns Icon, empty if it should use the default icon.\n   */\n  guessIcon(url) {\n    url = url || '';\n    const matches = url.match(/\\//g);\n    const extension = CoreMimetypeUtils.getFileExtension(url);\n    if (!matches || matches.length < 3 || url.slice(-1) === '/' || extension == 'php') {\n      // Use default icon.\n      return '';\n    }\n    const icon = CoreMimetypeUtils.getFileIcon(url);\n    // We do not want to return those icon types, the module icon is more appropriate.\n    if (icon === CoreMimetypeUtils.getFileIconForType('unknown') || icon === CoreMimetypeUtils.getFileIconForType('html')) {\n      return '';\n    }\n    return icon;\n  }\n  /**\n   * Invalidate the prefetched content.\n   *\n   * @param moduleId The module ID.\n   * @param courseId Course ID of the module.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateContent(moduleId, courseId, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    const promises = [];\n    promises.push(this.invalidateUrlData(courseId, siteId));\n    promises.push(CoreCourse.invalidateModule(moduleId, siteId, 'url'));\n    return CoreUtils.allPromises(promises);\n  }\n  /**\n   * Invalidates url data.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateUrlData(courseId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this2.getUrlCacheKey(courseId));\n    })();\n  }\n  /**\n   * Report the url as being viewed.\n   *\n   * @param id Module ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logView(id, siteId) {\n    const params = {\n      urlid: id\n    };\n    return CoreCourseLogHelper.log('mod_url_view_url', params, AddonModUrlProvider.COMPONENT, id, siteId);\n  }\n}\n_class = AddonModUrlProvider;\n_class.COMPONENT = 'mmaModUrl';\n_class.ɵfac = function AddonModUrlProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModUrl = makeSingleton(AddonModUrlProvider);","map":{"version":3,"names":["CoreSites","CoreSite","makeSingleton","Translate","CoreConstants","CoreMimetypeUtils","CoreCourse","CoreUtils","CoreCourseLogHelper","CoreError","ROOT_CACHE_KEY","AddonModUrlProvider","getFinalDisplayType","url","_url$externalurl$matc","extension","guessExtensionFromUrl","externalurl","display","RESOURCELIB_DISPLAY_EMBED","RESOURCELIB_DISPLAY_DOWNLOAD","RESOURCELIB_DISPLAY_AUTO","currentSite","getCurrentSite","containsUrl","indexOf","RESOURCELIB_DISPLAY_OPEN","download","mimetype","getMimeType","slice","match","length","canBeEmbedded","getUrlCacheKey","courseId","getUrlDataByKey","key","value","options","_this","_asyncToGenerator","site","getSite","siteId","params","courseids","preSets","_objectSpread","cacheKey","updateFrequency","FREQUENCY_RARELY","component","COMPONENT","getReadingStrategyPreSets","readingStrategy","response","read","currentUrl","urls","find","instant","getUrl","cmId","guessIcon","matches","getFileExtension","icon","getFileIcon","getFileIconForType","invalidateContent","moduleId","getCurrentSiteId","promises","push","invalidateUrlData","invalidateModule","allPromises","_this2","invalidateWsCacheForKey","logView","id","urlid","log","_class","factory","ɵfac","providedIn","AddonModUrl"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/url/services/url.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSites, CoreSitesCommonWSOptions } from '@services/sites';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreWSExternalWarning, CoreWSExternalFile } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreMimetypeUtils } from '@services/utils/mimetype';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\n\nconst ROOT_CACHE_KEY = 'mmaModUrl:';\n\n/**\n * Service that provides some features for urls.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModUrlProvider {\n\n    static readonly COMPONENT = 'mmaModUrl';\n\n    /**\n     * Get the final display type for a certain URL. Based on Moodle's url_get_final_display_type.\n     *\n     * @param url URL data.\n     * @returns Final display type.\n     */\n    getFinalDisplayType(url?: AddonModUrlUrl): number {\n        if (!url) {\n            return -1;\n        }\n\n        const extension = CoreMimetypeUtils.guessExtensionFromUrl(url.externalurl);\n\n        // PDFs can be embedded in web, but not in the Mobile app.\n        if (url.display == CoreConstants.RESOURCELIB_DISPLAY_EMBED && extension == 'pdf') {\n            return CoreConstants.RESOURCELIB_DISPLAY_DOWNLOAD;\n        }\n\n        if (url.display != CoreConstants.RESOURCELIB_DISPLAY_AUTO) {\n            return url.display;\n        }\n\n        // Detect links to local moodle pages.\n        const currentSite = CoreSites.getCurrentSite();\n        if (currentSite && currentSite.containsUrl(url.externalurl)) {\n            if (url.externalurl.indexOf('file.php') == -1 && url.externalurl.indexOf('.php') != -1) {\n                // Most probably our moodle page with navigation.\n                return CoreConstants.RESOURCELIB_DISPLAY_OPEN;\n            }\n        }\n\n        const download = ['application/zip', 'application/x-tar', 'application/g-zip', 'application/pdf', 'text/html'];\n        let mimetype = CoreMimetypeUtils.getMimeType(extension);\n\n        if (url.externalurl.indexOf('.php') != -1 || url.externalurl.slice(-1) === '/' ||\n                (url.externalurl.indexOf('//') != -1 && url.externalurl.match(/\\//g)?.length == 2)) {\n            // Seems to be a web, use HTML mimetype.\n            mimetype = 'text/html';\n        }\n\n        if (mimetype && download.indexOf(mimetype) != -1) {\n            return CoreConstants.RESOURCELIB_DISPLAY_DOWNLOAD;\n        }\n\n        if (extension && CoreMimetypeUtils.canBeEmbedded(extension)) {\n            return CoreConstants.RESOURCELIB_DISPLAY_EMBED;\n        }\n\n        // Let the browser deal with it somehow.\n        return CoreConstants.RESOURCELIB_DISPLAY_OPEN;\n    }\n\n    /**\n     * Get cache key for url data WS calls.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getUrlCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'url:' + courseId;\n    }\n\n    /**\n     * Get a url data.\n     *\n     * @param courseId Course ID.\n     * @param key Name of the property to check.\n     * @param value Value to search.\n     * @param options Other options.\n     * @returns Promise resolved when the url is retrieved.\n     */\n    protected async getUrlDataByKey(\n        courseId: number,\n        key: string,\n        value: number,\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<AddonModUrlUrl> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModUrlGetUrlsByCoursesWSParams = {\n            courseids: [courseId],\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getUrlCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: AddonModUrlProvider.COMPONENT,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy),\n        };\n\n        const response = await site.read<AddonModUrlGetUrlsByCoursesResult>('mod_url_get_urls_by_courses', params, preSets);\n\n        const currentUrl = response.urls.find((url) => url[key] == value);\n        if (currentUrl) {\n            return currentUrl;\n        }\n\n        throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    }\n\n    /**\n     * Get a url by course module ID.\n     *\n     * @param courseId Course ID.\n     * @param cmId Course module ID.\n     * @param options Other options.\n     * @returns Promise resolved when the url is retrieved.\n     */\n    getUrl(courseId: number, cmId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModUrlUrl> {\n        return this.getUrlDataByKey(courseId, 'coursemodule', cmId, options);\n    }\n\n    /**\n     * Guess the icon for a certain URL. Based on Moodle's url_guess_icon.\n     *\n     * @param url URL to check.\n     * @returns Icon, empty if it should use the default icon.\n     */\n    guessIcon(url: string): string {\n        url = url || '';\n\n        const matches = url.match(/\\//g);\n        const extension = CoreMimetypeUtils.getFileExtension(url);\n\n        if (!matches || matches.length < 3 || url.slice(-1) === '/' || extension == 'php') {\n            // Use default icon.\n            return '';\n        }\n\n        const icon = CoreMimetypeUtils.getFileIcon(url);\n\n        // We do not want to return those icon types, the module icon is more appropriate.\n        if (icon === CoreMimetypeUtils.getFileIconForType('unknown') ||\n            icon === CoreMimetypeUtils.getFileIconForType('html')) {\n            return '';\n        }\n\n        return icon;\n    }\n\n    /**\n     * Invalidate the prefetched content.\n     *\n     * @param moduleId The module ID.\n     * @param courseId Course ID of the module.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    invalidateContent(moduleId: number, courseId: number, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const promises: Promise<void>[] = [];\n\n        promises.push(this.invalidateUrlData(courseId, siteId));\n        promises.push(CoreCourse.invalidateModule(moduleId, siteId, 'url'));\n\n        return CoreUtils.allPromises(promises);\n    }\n\n    /**\n     * Invalidates url data.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateUrlData(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getUrlCacheKey(courseId));\n    }\n\n    /**\n     * Report the url as being viewed.\n     *\n     * @param id Module ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    logView(id: number, siteId?: string): Promise<void> {\n        const params: AddonModUrlViewUrlWSParams = {\n            urlid: id,\n        };\n\n        return CoreCourseLogHelper.log(\n            'mod_url_view_url',\n            params,\n            AddonModUrlProvider.COMPONENT,\n            id,\n            siteId,\n        );\n    }\n\n}\nexport const AddonModUrl = makeSingleton(AddonModUrlProvider);\n\n/**\n * Params of mod_url_get_urls_by_courses WS.\n */\ntype AddonModUrlGetUrlsByCoursesWSParams = {\n    courseids?: number[]; // Array of course ids.\n};\n\n/**\n * Params of mod_url_view_url WS.\n */\ntype AddonModUrlViewUrlWSParams = {\n    urlid: number; // Url instance id.\n};\n\n/**\n * URL returnd by mod_url_get_urls_by_courses.\n */\nexport type AddonModUrlUrl = {\n    id: number; // Module id.\n    coursemodule: number; // Course module id.\n    course: number; // Course id.\n    name: string; // URL name.\n    intro: string; // Summary.\n    introformat: number; // Intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    introfiles: CoreWSExternalFile[];\n    externalurl: string; // External URL.\n    display: number; // How to display the url.\n    displayoptions: string; // Display options (width, height).\n    parameters: string; // Parameters to append to the URL.\n    timemodified: number; // Last time the url was modified.\n    section: number; // Course section id.\n    visible: number; // Module visibility.\n    groupmode: number; // Group mode.\n    groupingid: number; // Grouping id.\n};\n\n/**\n * Result of WS mod_url_get_urls_by_courses.\n */\nexport type AddonModUrlGetUrlsByCoursesResult = {\n    urls: AddonModUrlUrl[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Url Display options as object.\n */\nexport type AddonModUrlDisplayOptions = {\n    printintro?: boolean;\n};\n"],"mappings":";;;AAeA,SAASA,SAAS,QAAkC,iBAAiB;AACrE,SAASC,QAAQ,QAAQ,qBAAqB;AAE9C,SAASC,aAAa,EAAEC,SAAS,QAAQ,aAAa;AACtD,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,UAAU,QAAQ,kCAAkC;AAC7D,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,SAASC,SAAS,QAAQ,uBAAuB;;AAGjD,MAAMC,cAAc,GAAG,YAAY;AAEnC;;;AAIA,OAAM,MAAOC,mBAAmB;EAI5B;;;;;;EAMAC,mBAAmBA,CAACC,GAAoB;IAAA,IAAAC,qBAAA;IACpC,IAAI,CAACD,GAAG,EAAE;MACN,OAAO,CAAC,CAAC;;IAGb,MAAME,SAAS,GAAGV,iBAAiB,CAACW,qBAAqB,CAACH,GAAG,CAACI,WAAW,CAAC;IAE1E;IACA,IAAIJ,GAAG,CAACK,OAAO,IAAId,aAAa,CAACe,yBAAyB,IAAIJ,SAAS,IAAI,KAAK,EAAE;MAC9E,OAAOX,aAAa,CAACgB,4BAA4B;;IAGrD,IAAIP,GAAG,CAACK,OAAO,IAAId,aAAa,CAACiB,wBAAwB,EAAE;MACvD,OAAOR,GAAG,CAACK,OAAO;;IAGtB;IACA,MAAMI,WAAW,GAAGtB,SAAS,CAACuB,cAAc,EAAE;IAC9C,IAAID,WAAW,IAAIA,WAAW,CAACE,WAAW,CAACX,GAAG,CAACI,WAAW,CAAC,EAAE;MACzD,IAAIJ,GAAG,CAACI,WAAW,CAACQ,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAIZ,GAAG,CAACI,WAAW,CAACQ,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;QACpF;QACA,OAAOrB,aAAa,CAACsB,wBAAwB;;;IAIrD,MAAMC,QAAQ,GAAG,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,WAAW,CAAC;IAC9G,IAAIC,QAAQ,GAAGvB,iBAAiB,CAACwB,WAAW,CAACd,SAAS,CAAC;IAEvD,IAAIF,GAAG,CAACI,WAAW,CAACQ,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAIZ,GAAG,CAACI,WAAW,CAACa,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IACrEjB,GAAG,CAACI,WAAW,CAACQ,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAAX,qBAAA,GAAAD,GAAG,CAACI,WAAW,CAACc,KAAK,CAAC,KAAK,CAAC,cAAAjB,qBAAA,uBAA5BA,qBAAA,CAA8BkB,MAAM,KAAI,CAAE,EAAE;MACxF;MACAJ,QAAQ,GAAG,WAAW;;IAG1B,IAAIA,QAAQ,IAAID,QAAQ,CAACF,OAAO,CAACG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE;MAC9C,OAAOxB,aAAa,CAACgB,4BAA4B;;IAGrD,IAAIL,SAAS,IAAIV,iBAAiB,CAAC4B,aAAa,CAAClB,SAAS,CAAC,EAAE;MACzD,OAAOX,aAAa,CAACe,yBAAyB;;IAGlD;IACA,OAAOf,aAAa,CAACsB,wBAAwB;EACjD;EAEA;;;;;;EAMUQ,cAAcA,CAACC,QAAgB;IACrC,OAAOzB,cAAc,GAAG,MAAM,GAAGyB,QAAQ;EAC7C;EAEA;;;;;;;;;EASgBC,eAAeA,CAC3BD,QAAgB,EAChBE,GAAW,EACXC,KAAa,EACbC,OAAA,GAAoC,EAAE;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEtC,MAAMC,IAAI,SAAS1C,SAAS,CAAC2C,OAAO,CAACJ,OAAO,CAACK,MAAM,CAAC;MAEpD,MAAMC,MAAM,GAAwC;QAChDC,SAAS,EAAE,CAACX,QAAQ;OACvB;MAED,MAAMY,OAAO,GAAAC,aAAA;QACTC,QAAQ,EAAET,KAAI,CAACN,cAAc,CAACC,QAAQ,CAAC;QACvCe,eAAe,EAAEjD,QAAQ,CAACkD,gBAAgB;QAC1CC,SAAS,EAAEzC,mBAAmB,CAAC0C;MAAS,GACrCrD,SAAS,CAACsD,yBAAyB,CAACf,OAAO,CAACgB,eAAe,CAAC,CAClE;MAED,MAAMC,QAAQ,SAASd,IAAI,CAACe,IAAI,CAAoC,6BAA6B,EAAEZ,MAAM,EAAEE,OAAO,CAAC;MAEnH,MAAMW,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAAE/C,GAAG,IAAKA,GAAG,CAACwB,GAAG,CAAC,IAAIC,KAAK,CAAC;MACjE,IAAIoB,UAAU,EAAE;QACZ,OAAOA,UAAU;;MAGrB,MAAM,IAAIjD,SAAS,CAACN,SAAS,CAAC0D,OAAO,CAAC,4BAA4B,CAAC,CAAC;IAAC;EACzE;EAEA;;;;;;;;EAQAC,MAAMA,CAAC3B,QAAgB,EAAE4B,IAAY,EAAExB,OAAA,GAAoC,EAAE;IACzE,OAAO,IAAI,CAACH,eAAe,CAACD,QAAQ,EAAE,cAAc,EAAE4B,IAAI,EAAExB,OAAO,CAAC;EACxE;EAEA;;;;;;EAMAyB,SAASA,CAACnD,GAAW;IACjBA,GAAG,GAAGA,GAAG,IAAI,EAAE;IAEf,MAAMoD,OAAO,GAAGpD,GAAG,CAACkB,KAAK,CAAC,KAAK,CAAC;IAChC,MAAMhB,SAAS,GAAGV,iBAAiB,CAAC6D,gBAAgB,CAACrD,GAAG,CAAC;IAEzD,IAAI,CAACoD,OAAO,IAAIA,OAAO,CAACjC,MAAM,GAAG,CAAC,IAAInB,GAAG,CAACiB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIf,SAAS,IAAI,KAAK,EAAE;MAC/E;MACA,OAAO,EAAE;;IAGb,MAAMoD,IAAI,GAAG9D,iBAAiB,CAAC+D,WAAW,CAACvD,GAAG,CAAC;IAE/C;IACA,IAAIsD,IAAI,KAAK9D,iBAAiB,CAACgE,kBAAkB,CAAC,SAAS,CAAC,IACxDF,IAAI,KAAK9D,iBAAiB,CAACgE,kBAAkB,CAAC,MAAM,CAAC,EAAE;MACvD,OAAO,EAAE;;IAGb,OAAOF,IAAI;EACf;EAEA;;;;;;;;EAQAG,iBAAiBA,CAACC,QAAgB,EAAEpC,QAAgB,EAAES,MAAe;IACjEA,MAAM,GAAGA,MAAM,IAAI5C,SAAS,CAACwE,gBAAgB,EAAE;IAE/C,MAAMC,QAAQ,GAAoB,EAAE;IAEpCA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACC,iBAAiB,CAACxC,QAAQ,EAAES,MAAM,CAAC,CAAC;IACvD6B,QAAQ,CAACC,IAAI,CAACpE,UAAU,CAACsE,gBAAgB,CAACL,QAAQ,EAAE3B,MAAM,EAAE,KAAK,CAAC,CAAC;IAEnE,OAAOrC,SAAS,CAACsE,WAAW,CAACJ,QAAQ,CAAC;EAC1C;EAEA;;;;;;;EAOME,iBAAiBA,CAACxC,QAAgB,EAAES,MAAe;IAAA,IAAAkC,MAAA;IAAA,OAAArC,iBAAA;MACrD,MAAMC,IAAI,SAAS1C,SAAS,CAAC2C,OAAO,CAACC,MAAM,CAAC;MAE5C,MAAMF,IAAI,CAACqC,uBAAuB,CAACD,MAAI,CAAC5C,cAAc,CAACC,QAAQ,CAAC,CAAC;IAAC;EACtE;EAEA;;;;;;;EAOA6C,OAAOA,CAACC,EAAU,EAAErC,MAAe;IAC/B,MAAMC,MAAM,GAA+B;MACvCqC,KAAK,EAAED;KACV;IAED,OAAOzE,mBAAmB,CAAC2E,GAAG,CAC1B,kBAAkB,EAClBtC,MAAM,EACNlC,mBAAmB,CAAC0C,SAAS,EAC7B4B,EAAE,EACFrC,MAAM,CACT;EACL;;SAnMSjC,mBAAmB;AAEZyE,MAAA,CAAA/B,SAAS,GAAG,WAAW;;mBAF9B1C,MAAmB;AAAA;;SAAnBA,MAAmB;EAAA0E,OAAA,EAAnB1E,MAAmB,CAAA2E,IAAA;EAAAC,UAAA,EADN;AAAM;AAuMhC,OAAO,MAAMC,WAAW,GAAGtF,aAAa,CAACS,mBAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}