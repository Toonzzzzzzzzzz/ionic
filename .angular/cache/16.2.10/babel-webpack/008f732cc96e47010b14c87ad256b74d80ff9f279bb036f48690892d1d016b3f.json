{"ast":null,"code":"var _class;\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { makeSingleton } from '@singletons';\nimport { AddonModQuizHelper } from '../quiz-helper';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to treat links to quiz review.\n */\nexport class AddonModQuizReviewLinkHandlerService extends CoreContentLinksHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModQuizReviewLinkHandler';\n    this.featureName = 'CoreCourseModuleDelegate_AddonModQuiz';\n    this.pattern = /\\/mod\\/quiz\\/review\\.php.*([&?]attempt=\\d+)/;\n  }\n  /**\n   * Get the list of actions for a link (url).\n   *\n   * @param siteIds List of sites the URL belongs to.\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @param courseId Course ID related to the URL. Optional but recommended.\n   * @param data Extra data to handle the URL.\n   * @returns List of (or promise resolved with list of) actions.\n   */\n  getActions(siteIds, url, params, courseId, data) {\n    const quizId = data !== null && data !== void 0 && data.instance ? Number(data.instance) : undefined;\n    return [{\n      action: siteId => {\n        const attemptId = parseInt(params.attempt, 10);\n        const page = parseInt(params.page, 10);\n        AddonModQuizHelper.handleReviewLink(attemptId, page, quizId, siteId);\n      }\n    }];\n  }\n}\n_class = AddonModQuizReviewLinkHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModQuizReviewLinkHandlerService_BaseFactory;\n  return function AddonModQuizReviewLinkHandlerService_Factory(t) {\n    return (ɵAddonModQuizReviewLinkHandlerService_BaseFactory || (ɵAddonModQuizReviewLinkHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModQuizReviewLinkHandler = makeSingleton(AddonModQuizReviewLinkHandlerService);","map":{"version":3,"names":["CoreContentLinksHandlerBase","makeSingleton","AddonModQuizHelper","AddonModQuizReviewLinkHandlerService","constructor","name","featureName","pattern","getActions","siteIds","url","params","courseId","data","quizId","instance","Number","undefined","action","siteId","attemptId","parseInt","attempt","page","handleReviewLink","t","factory","ɵfac","providedIn","AddonModQuizReviewLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/quiz/services/handlers/review-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { makeSingleton } from '@singletons';\nimport { AddonModQuizHelper } from '../quiz-helper';\n\n/**\n * Handler to treat links to quiz review.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModQuizReviewLinkHandlerService extends CoreContentLinksHandlerBase {\n\n    name = 'AddonModQuizReviewLinkHandler';\n    featureName = 'CoreCourseModuleDelegate_AddonModQuiz';\n    pattern = /\\/mod\\/quiz\\/review\\.php.*([&?]attempt=\\d+)/;\n\n    /**\n     * Get the list of actions for a link (url).\n     *\n     * @param siteIds List of sites the URL belongs to.\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @param courseId Course ID related to the URL. Optional but recommended.\n     * @param data Extra data to handle the URL.\n     * @returns List of (or promise resolved with list of) actions.\n     */\n\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Record<string, string>,\n        courseId?: number,\n        data?: Record<string, unknown>,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n        const quizId = data?.instance ? Number(data.instance) : undefined;\n\n        return [{\n            action: (siteId): void => {\n                const attemptId = parseInt(params.attempt, 10);\n                const page = parseInt(params.page, 10);\n                AddonModQuizHelper.handleReviewLink(attemptId, page, quizId, siteId);\n            },\n        }];\n    }\n\n}\n\nexport const AddonModQuizReviewLinkHandler = makeSingleton(AddonModQuizReviewLinkHandlerService);\n"],"mappings":";AAeA,SAASA,2BAA2B,QAAQ,6CAA6C;AAEzF,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,kBAAkB,QAAQ,gBAAgB;;AAEnD;;;AAIA,OAAM,MAAOC,oCAAqC,SAAQH,2BAA2B;EADrFI,YAAA;;IAGI,KAAAC,IAAI,GAAG,+BAA+B;IACtC,KAAAC,WAAW,GAAG,uCAAuC;IACrD,KAAAC,OAAO,GAAG,6CAA6C;;EAEvD;;;;;;;;;;EAWAC,UAAUA,CACNC,OAAiB,EACjBC,GAAW,EACXC,MAA8B,EAC9BC,QAAiB,EACjBC,IAA8B;IAE9B,MAAMC,MAAM,GAAGD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEE,QAAQ,GAAGC,MAAM,CAACH,IAAI,CAACE,QAAQ,CAAC,GAAGE,SAAS;IAEjE,OAAO,CAAC;MACJC,MAAM,EAAGC,MAAM,IAAU;QACrB,MAAMC,SAAS,GAAGC,QAAQ,CAACV,MAAM,CAACW,OAAO,EAAE,EAAE,CAAC;QAC9C,MAAMC,IAAI,GAAGF,QAAQ,CAACV,MAAM,CAACY,IAAI,EAAE,EAAE,CAAC;QACtCrB,kBAAkB,CAACsB,gBAAgB,CAACJ,SAAS,EAAEG,IAAI,EAAET,MAAM,EAAEK,MAAM,CAAC;MACxE;KACH,CAAC;EACN;;SAjCShB,oCAAqC;;;;+IAArCA,MAAoC,IAAAsB,CAAA,IAApCtB,MAAoC;EAAA;AAAA;;SAApCA,MAAoC;EAAAuB,OAAA,EAApCvB,MAAoC,CAAAwB,IAAA;EAAAC,UAAA,EADvB;AAAM;AAsChC,OAAO,MAAMC,6BAA6B,GAAG5B,aAAa,CAACE,oCAAoC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}