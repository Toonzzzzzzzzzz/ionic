{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreContentLinksModuleIndexHandler } from '@features/contentlinks/classes/module-index-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModLesson } from '../lesson';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to treat links to lesson index.\n */\nexport class AddonModLessonIndexLinkHandlerService extends CoreContentLinksModuleIndexHandler {\n  constructor() {\n    super('AddonModLesson', 'lesson');\n    this.name = 'AddonModLessonIndexLinkHandler';\n  }\n  /**\n   * Get the list of actions for a link (url).\n   *\n   * @param siteIds List of sites the URL belongs to.\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @param courseId Course ID related to the URL. Optional but recommended.\n   * @returns List of (or promise resolved with list of) actions.\n   */\n  getActions(siteIds, url, params, courseId) {\n    courseId = Number(courseId || params.courseid || params.cid);\n    return [{\n      action: siteId => {\n        /* Ignore the pageid param. If we open the lesson player with a certain page and the user hasn't started\n           the lesson, an error is thrown: could not find lesson_timer records. */\n        if (params.userpassword) {\n          this.navigateToModuleWithPassword(parseInt(params.id, 10), courseId, params.userpassword, siteId);\n        } else {\n          CoreCourseHelper.navigateToModule(parseInt(params.id, 10), {\n            courseId,\n            siteId\n          });\n        }\n      }\n    }];\n  }\n  /**\n   * Navigate to a lesson module (index page) with a fixed password.\n   *\n   * @param moduleId Module ID.\n   * @param courseId Course ID.\n   * @param password Password.\n   * @param siteId Site ID.\n   * @returns Promise resolved when navigated.\n   */\n  navigateToModuleWithPassword(moduleId, courseId, password, siteId) {\n    return _asyncToGenerator(function* () {\n      const modal = yield CoreDomUtils.showModalLoading();\n      try {\n        // Get the module.\n        const module = yield CoreCourse.getModuleBasicInfo(moduleId, {\n          siteId,\n          readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n        });\n        // Store the password so it's automatically used.\n        yield CoreUtils.ignoreErrors(AddonModLesson.storePassword(module.instance, password, siteId));\n        yield CoreCourseHelper.navigateToModule(moduleId, {\n          courseId: module.course,\n          sectionId: module.section,\n          siteId\n        });\n      } catch (_unused) {\n        // Error, go to index page.\n        yield CoreCourseHelper.navigateToModule(moduleId, {\n          courseId,\n          siteId\n        });\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n}\n_class = AddonModLessonIndexLinkHandlerService;\n_class.ɵfac = function AddonModLessonIndexLinkHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModLessonIndexLinkHandler = makeSingleton(AddonModLessonIndexLinkHandlerService);","map":{"version":3,"names":["CoreContentLinksModuleIndexHandler","CoreCourse","CoreCourseHelper","CoreDomUtils","CoreUtils","makeSingleton","AddonModLesson","AddonModLessonIndexLinkHandlerService","constructor","name","getActions","siteIds","url","params","courseId","Number","courseid","cid","action","siteId","userpassword","navigateToModuleWithPassword","parseInt","id","navigateToModule","moduleId","password","_asyncToGenerator","modal","showModalLoading","module","getModuleBasicInfo","readingStrategy","ignoreErrors","storePassword","instance","course","sectionId","section","_unused","dismiss","factory","ɵfac","providedIn","AddonModLessonIndexLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/lesson/services/handlers/index-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreContentLinksModuleIndexHandler } from '@features/contentlinks/classes/module-index-handler';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModLesson } from '../lesson';\n\n/**\n * Handler to treat links to lesson index.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModLessonIndexLinkHandlerService extends CoreContentLinksModuleIndexHandler {\n\n    name = 'AddonModLessonIndexLinkHandler';\n\n    constructor() {\n        super('AddonModLesson', 'lesson');\n    }\n\n    /**\n     * Get the list of actions for a link (url).\n     *\n     * @param siteIds List of sites the URL belongs to.\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @param courseId Course ID related to the URL. Optional but recommended.\n     * @returns List of (or promise resolved with list of) actions.\n     */\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Record<string, string>,\n        courseId?: number,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n\n        courseId = Number(courseId || params.courseid || params.cid);\n\n        return [{\n            action: (siteId): void => {\n                /* Ignore the pageid param. If we open the lesson player with a certain page and the user hasn't started\n                   the lesson, an error is thrown: could not find lesson_timer records. */\n                if (params.userpassword) {\n                    this.navigateToModuleWithPassword(parseInt(params.id, 10), courseId!, params.userpassword, siteId);\n                } else {\n                    CoreCourseHelper.navigateToModule(parseInt(params.id, 10), {\n                        courseId,\n                        siteId,\n                    });\n                }\n            },\n        }];\n    }\n\n    /**\n     * Navigate to a lesson module (index page) with a fixed password.\n     *\n     * @param moduleId Module ID.\n     * @param courseId Course ID.\n     * @param password Password.\n     * @param siteId Site ID.\n     * @returns Promise resolved when navigated.\n     */\n    protected async navigateToModuleWithPassword(\n        moduleId: number,\n        courseId: number,\n        password: string,\n        siteId: string,\n    ): Promise<void> {\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            // Get the module.\n            const module = await CoreCourse.getModuleBasicInfo(\n                moduleId,\n                { siteId, readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE },\n            );\n\n            // Store the password so it's automatically used.\n            await CoreUtils.ignoreErrors(AddonModLesson.storePassword(module.instance, password, siteId));\n\n            await CoreCourseHelper.navigateToModule(moduleId, {\n                courseId: module.course,\n                sectionId: module.section,\n                siteId,\n            });\n        } catch {\n            // Error, go to index page.\n            await CoreCourseHelper.navigateToModule(moduleId, {\n                courseId,\n                siteId,\n            });\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n}\n\nexport const AddonModLessonIndexLinkHandler = makeSingleton(AddonModLessonIndexLinkHandlerService);\n"],"mappings":";;AAgBA,SAASA,kCAAkC,QAAQ,qDAAqD;AAExG,SAASC,UAAU,QAAQ,kCAAkC;AAC7D,SAASC,gBAAgB,QAAQ,yCAAyC;AAE1E,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,cAAc,QAAQ,WAAW;;AAE1C;;;AAIA,OAAM,MAAOC,qCAAsC,SAAQP,kCAAkC;EAIzFQ,YAAA;IACI,KAAK,CAAC,gBAAgB,EAAE,QAAQ,CAAC;IAHrC,KAAAC,IAAI,GAAG,gCAAgC;EAIvC;EAEA;;;;;;;;;EASAC,UAAUA,CACNC,OAAiB,EACjBC,GAAW,EACXC,MAA8B,EAC9BC,QAAiB;IAGjBA,QAAQ,GAAGC,MAAM,CAACD,QAAQ,IAAID,MAAM,CAACG,QAAQ,IAAIH,MAAM,CAACI,GAAG,CAAC;IAE5D,OAAO,CAAC;MACJC,MAAM,EAAGC,MAAM,IAAU;QACrB;;QAEA,IAAIN,MAAM,CAACO,YAAY,EAAE;UACrB,IAAI,CAACC,4BAA4B,CAACC,QAAQ,CAACT,MAAM,CAACU,EAAE,EAAE,EAAE,CAAC,EAAET,QAAS,EAAED,MAAM,CAACO,YAAY,EAAED,MAAM,CAAC;SACrG,MAAM;UACHjB,gBAAgB,CAACsB,gBAAgB,CAACF,QAAQ,CAACT,MAAM,CAACU,EAAE,EAAE,EAAE,CAAC,EAAE;YACvDT,QAAQ;YACRK;WACH,CAAC;;MAEV;KACH,CAAC;EACN;EAEA;;;;;;;;;EASgBE,4BAA4BA,CACxCI,QAAgB,EAChBX,QAAgB,EAChBY,QAAgB,EAChBP,MAAc;IAAA,OAAAQ,iBAAA;MAEd,MAAMC,KAAK,SAASzB,YAAY,CAAC0B,gBAAgB,EAAE;MAEnD,IAAI;QACA;QACA,MAAMC,MAAM,SAAS7B,UAAU,CAAC8B,kBAAkB,CAC9CN,QAAQ,EACR;UAAEN,MAAM;UAAEa,eAAe;QAAuC,CAAE,CACrE;QAED;QACA,MAAM5B,SAAS,CAAC6B,YAAY,CAAC3B,cAAc,CAAC4B,aAAa,CAACJ,MAAM,CAACK,QAAQ,EAAET,QAAQ,EAAEP,MAAM,CAAC,CAAC;QAE7F,MAAMjB,gBAAgB,CAACsB,gBAAgB,CAACC,QAAQ,EAAE;UAC9CX,QAAQ,EAAEgB,MAAM,CAACM,MAAM;UACvBC,SAAS,EAAEP,MAAM,CAACQ,OAAO;UACzBnB;SACH,CAAC;OACL,CAAC,OAAAoB,OAAA,EAAM;QACJ;QACA,MAAMrC,gBAAgB,CAACsB,gBAAgB,CAACC,QAAQ,EAAE;UAC9CX,QAAQ;UACRK;SACH,CAAC;OACL,SAAS;QACNS,KAAK,CAACY,OAAO,EAAE;;IAClB;EACL;;SAnFSjC,qCAAsC;;mBAAtCA,MAAqC;AAAA;;SAArCA,MAAqC;EAAAkC,OAAA,EAArClC,MAAqC,CAAAmC,IAAA;EAAAC,UAAA,EADxB;AAAM;AAwFhC,OAAO,MAAMC,8BAA8B,GAAGvC,aAAa,CAACE,qCAAqC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}