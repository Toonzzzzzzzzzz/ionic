{"ast":null,"code":"var _class;\nimport { CoreAuthenticatedSite } from '@classes/sites/authenticated-site';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreUnauthenticatedSite } from '@classes/sites/unauthenticated-site';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/*\n * Provider to create sites instances.\n*/\nexport class CoreSitesFactoryService {\n  /**\n   * Create a site instance.\n   *\n   * @param id Site ID.\n   * @param siteUrl Site URL.\n   * @param token Site's WS token.\n   * @param otherData Other data.\n   * @returns Site instance.\n   */\n  makeSite(id, siteUrl, token, otherData = {}) {\n    return new CoreSite(id, siteUrl, token, otherData);\n  }\n  /**\n   * Create an authenticated site instance.\n   *\n   * @param siteUrl Site URL.\n   * @param token Site's WS token.\n   * @param options Other options.\n   * @returns Authenticated site instance.\n   */\n  makeAuthenticatedSite(siteUrl, token, options = {}) {\n    return new CoreAuthenticatedSite(siteUrl, token, options);\n  }\n  /**\n   * Create an unauthenticated site instance.\n   *\n   * @param siteUrl Site URL.\n   * @param publicConfig Site public config.\n   * @returns Unauthenticated site instance.\n   */\n  makeUnauthenticatedSite(siteUrl, publicConfig) {\n    return new CoreUnauthenticatedSite(siteUrl, publicConfig);\n  }\n}\n_class = CoreSitesFactoryService;\n_class.ɵfac = function CoreSitesFactoryService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreSitesFactory = makeSingleton(CoreSitesFactoryService);","map":{"version":3,"names":["CoreAuthenticatedSite","CoreSite","CoreUnauthenticatedSite","makeSingleton","CoreSitesFactoryService","makeSite","id","siteUrl","token","otherData","makeAuthenticatedSite","options","makeUnauthenticatedSite","publicConfig","factory","ɵfac","providedIn","CoreSitesFactory"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/sites-factory.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreAuthenticatedSite, CoreAuthenticatedSiteOptionalData } from '@classes/sites/authenticated-site';\n\nimport { CoreSite, CoreSiteOptionalData } from '@classes/sites/site';\nimport { CoreUnauthenticatedSite, CoreSitePublicConfigResponse } from '@classes/sites/unauthenticated-site';\nimport { makeSingleton } from '@singletons';\n\n/*\n * Provider to create sites instances.\n*/\n@Injectable({ providedIn: 'root' })\nexport class CoreSitesFactoryService {\n\n    /**\n     * Create a site instance.\n     *\n     * @param id Site ID.\n     * @param siteUrl Site URL.\n     * @param token Site's WS token.\n     * @param otherData Other data.\n     * @returns Site instance.\n     */\n    makeSite(\n        id: string,\n        siteUrl: string,\n        token: string,\n        otherData: CoreSiteOptionalData = {},\n    ): CoreSite {\n        return new CoreSite(id, siteUrl, token, otherData);\n    }\n\n    /**\n     * Create an authenticated site instance.\n     *\n     * @param siteUrl Site URL.\n     * @param token Site's WS token.\n     * @param options Other options.\n     * @returns Authenticated site instance.\n     */\n    makeAuthenticatedSite(siteUrl: string, token: string, options: CoreAuthenticatedSiteOptionalData = {}): CoreAuthenticatedSite {\n        return new CoreAuthenticatedSite(siteUrl, token, options);\n    }\n\n    /**\n     * Create an unauthenticated site instance.\n     *\n     * @param siteUrl Site URL.\n     * @param publicConfig Site public config.\n     * @returns Unauthenticated site instance.\n     */\n    makeUnauthenticatedSite(siteUrl: string, publicConfig?: CoreSitePublicConfigResponse): CoreUnauthenticatedSite {\n        return new CoreUnauthenticatedSite(siteUrl, publicConfig);\n    }\n\n}\n\nexport const CoreSitesFactory = makeSingleton(CoreSitesFactoryService);\n"],"mappings":";AAeA,SAASA,qBAAqB,QAA2C,mCAAmC;AAE5G,SAASC,QAAQ,QAA8B,qBAAqB;AACpE,SAASC,uBAAuB,QAAsC,qCAAqC;AAC3G,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,uBAAuB;EAEhC;;;;;;;;;EASAC,QAAQA,CACJC,EAAU,EACVC,OAAe,EACfC,KAAa,EACbC,SAAA,GAAkC,EAAE;IAEpC,OAAO,IAAIR,QAAQ,CAACK,EAAE,EAAEC,OAAO,EAAEC,KAAK,EAAEC,SAAS,CAAC;EACtD;EAEA;;;;;;;;EAQAC,qBAAqBA,CAACH,OAAe,EAAEC,KAAa,EAAEG,OAAA,GAA6C,EAAE;IACjG,OAAO,IAAIX,qBAAqB,CAACO,OAAO,EAAEC,KAAK,EAAEG,OAAO,CAAC;EAC7D;EAEA;;;;;;;EAOAC,uBAAuBA,CAACL,OAAe,EAAEM,YAA2C;IAChF,OAAO,IAAIX,uBAAuB,CAACK,OAAO,EAAEM,YAAY,CAAC;EAC7D;;SAzCST,uBAAuB;;mBAAvBA,MAAuB;AAAA;;SAAvBA,MAAuB;EAAAU,OAAA,EAAvBV,MAAuB,CAAAW,IAAA;EAAAC,UAAA,EADV;AAAM;AA8ChC,OAAO,MAAMC,gBAAgB,GAAGd,aAAa,CAACC,uBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}