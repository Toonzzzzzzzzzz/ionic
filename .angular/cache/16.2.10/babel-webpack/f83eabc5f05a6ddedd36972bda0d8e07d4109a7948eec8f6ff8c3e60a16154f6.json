{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { AddonLegacyNotificationsNotificationsSource } from '@addons/notifications/classes/legacy-notifications-source';\nimport { AddonNotificationsNotificationsSource } from '@addons/notifications/classes/notifications-source';\nimport { AddonNotifications } from '@addons/notifications/services/notifications';\nimport { AddonNotificationsHelper } from '@addons/notifications/services/notifications-helper';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { CoreContentLinksDelegate } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { Translate } from '@singletons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../../../core/components/loading/loading\";\nimport * as i3 from \"../../../../core/components/user-avatar/user-avatar\";\nimport * as i4 from \"../../../../core/directives/external-content\";\nimport * as i5 from \"../../../../core/directives/fa-icon\";\nimport * as i6 from \"../../../../core/directives/format-text\";\nimport * as i7 from \"../../../../core/directives/swipe-navigation\";\nimport * as i8 from \"../../../../core/directives/collapsible-footer\";\nimport * as i9 from \"../../../../core/directives/content\";\nimport * as i10 from \"../../../../core/directives/update-non-reactive-attributes\";\nimport * as i11 from \"@ionic/angular\";\nimport * as i12 from \"../../../../core/pipes/create-links\";\nimport * as i13 from \"../../../../core/pipes/time-ago\";\nimport * as i14 from \"@ngx-translate/core\";\nfunction AddonNotificationsNotificationPage_div_11_core_user_avatar_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelement(1, \"img\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r5.notification.iconurl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction AddonNotificationsNotificationPage_div_11_core_user_avatar_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"core-user-avatar\", 14);\n    i0.ɵɵtemplate(1, AddonNotificationsNotificationPage_div_11_core_user_avatar_2_div_1_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"userId\", ctx_r2.notification.useridfrom)(\"profileUrl\", ctx_r2.notification.profileimageurlfrom)(\"fullname\", ctx_r2.notification.userfromfullname);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.notification.iconurl);\n  }\n}\nfunction AddonNotificationsNotificationPage_div_11_ng_container_3_img_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"src\", ctx_r6.notification.imgUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction AddonNotificationsNotificationPage_div_11_ng_container_3_div_2_img_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 24);\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"src\", ctx_r8.notification.iconurl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction AddonNotificationsNotificationPage_div_11_ng_container_3_div_2_ion_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 25);\n  }\n}\nfunction AddonNotificationsNotificationPage_div_11_ng_container_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtemplate(1, AddonNotificationsNotificationPage_div_11_ng_container_3_div_2_img_1_Template, 1, 1, \"img\", 22);\n    i0.ɵɵtemplate(2, AddonNotificationsNotificationPage_div_11_ng_container_3_div_2_ion_icon_2_Template, 1, 0, \"ion-icon\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.notification.iconurl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.notification.iconurl);\n  }\n}\nfunction AddonNotificationsNotificationPage_div_11_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AddonNotificationsNotificationPage_div_11_ng_container_3_img_1_Template, 1, 1, \"img\", 18);\n    i0.ɵɵtemplate(2, AddonNotificationsNotificationPage_div_11_ng_container_3_div_2_Template, 3, 2, \"div\", 19);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.notification.imgUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.notification.imgUrl);\n  }\n}\nfunction AddonNotificationsNotificationPage_div_11_p_7_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \\u00B7 \", ctx_r10.notification.userfromfullname, \"\");\n  }\n}\nfunction AddonNotificationsNotificationPage_div_11_p_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"coreTimeAgo\");\n    i0.ɵɵtemplate(3, AddonNotificationsNotificationPage_div_11_p_7_ng_container_3_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 2, ctx_r4.notification.timecreated), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.notification.useridfrom > 0);\n  }\n}\nfunction AddonNotificationsNotificationPage_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"ion-item\", 7);\n    i0.ɵɵtemplate(2, AddonNotificationsNotificationPage_div_11_core_user_avatar_2_Template, 2, 4, \"core-user-avatar\", 8);\n    i0.ɵɵtemplate(3, AddonNotificationsNotificationPage_div_11_ng_container_3_Template, 3, 2, \"ng-container\", 9);\n    i0.ɵɵelementStart(4, \"ion-label\")(5, \"p\", 10);\n    i0.ɵɵelement(6, \"core-format-text\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, AddonNotificationsNotificationPage_div_11_p_7_Template, 4, 4, \"p\", 9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"ion-item\", 12)(9, \"ion-label\");\n    i0.ɵɵelement(10, \"core-format-text\", 13);\n    i0.ɵɵpipe(11, \"coreCreateLinks\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.notification.useridfrom > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.notification.useridfrom <= 0);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"text\", ctx_r0.notification.subject)(\"contextInstanceId\", 0)(\"wsNotFiltered\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.notification.timecreated > 0);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(11, 8, ctx_r0.notification.mobiletext))(\"contextInstanceId\", 0);\n  }\n}\nfunction AddonNotificationsNotificationPage_div_12_ion_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 29);\n    i0.ɵɵlistener(\"click\", function AddonNotificationsNotificationPage_div_12_ion_button_2_Template_ion_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const action_r12 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(action_r12.action());\n    });\n    i0.ɵɵelement(1, \"ion-icon\", 30);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const action_r12 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", action_r12.icon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 2, action_r12.message), \" \");\n  }\n}\nfunction AddonNotificationsNotificationPage_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26)(1, \"div\", 27);\n    i0.ɵɵtemplate(2, AddonNotificationsNotificationPage_div_12_ion_button_2_Template, 4, 4, \"ion-button\", 28);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.actions);\n  }\n}\n/**\n * Page to render a notification.\n */\nexport class AddonNotificationsNotificationPage {\n  constructor() {\n    this.loaded = false;\n    // Actions data.\n    this.actions = [];\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let notification;\n      try {\n        notification = _this.getNotification();\n      } catch (error) {\n        CoreDomUtils.showErrorModal(error);\n        CoreNavigator.back();\n        return;\n      }\n      _this.notification = 'subject' in notification ? notification : yield AddonNotifications.convertPushToMessage(notification);\n      yield _this.loadActions(_this.notification);\n      AddonNotificationsHelper.markNotificationAsRead(notification);\n      _this.loaded = true;\n      if (notification.id) {\n        CoreAnalytics.logEvent({\n          type: CoreAnalyticsEventType.VIEW_ITEM,\n          ws: 'core_message_get_messages',\n          name: Translate.instant('addon.notifications.notifications'),\n          data: {\n            id: notification.id,\n            category: 'notifications'\n          },\n          url: `/message/output/popup/notifications.php?notificationid=${notification.id}&offset=0`\n        });\n      }\n    })();\n  }\n  /**\n   * Get notification.\n   *\n   * @returns notification.\n   */\n  getNotification() {\n    const id = CoreNavigator.getRouteNumberParam('id');\n    const notification = id ? this.getNotificationById(id) : undefined;\n    return notification !== null && notification !== void 0 ? notification : CoreNavigator.getRequiredRouteParam('notification');\n  }\n  /**\n   * Obtain notification by passed id.\n   *\n   * @param notificationId Notification id.\n   * @returns Found notification.\n   */\n  getNotificationById(notificationId) {\n    var _source$getItems;\n    const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(CoreSites.getRequiredCurrentSite().isVersionGreaterEqualThan('4.0') ? AddonNotificationsNotificationsSource : AddonLegacyNotificationsNotificationsSource, []);\n    const notification = (_source$getItems = source.getItems()) === null || _source$getItems === void 0 ? void 0 : _source$getItems.find(({\n      id\n    }) => id === notificationId);\n    if (!notification) {\n      return;\n    }\n    this.loadNotifications(source);\n    return notification;\n  }\n  /**\n   * Load notifications from source.\n   *\n   * @param source Notifications source\n   */\n  loadNotifications(source) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.notifications = new AddonNotificationSwipeItemsManager(source);\n      yield _this2.notifications.start();\n    })();\n  }\n  /**\n   * Load notification actions\n   *\n   * @param notification Notification.\n   * @returns Promise resolved when done.\n   */\n  loadActions(notification) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _this3$actionsData;\n      if (!notification.contexturl && (!notification.customdata || !notification.customdata.appurl)) {\n        // No URL, nothing to do.\n        return;\n      }\n      let actions = [];\n      _this3.actionsData = notification.customdata;\n      _this3.contextUrl = notification.contexturl || undefined;\n      _this3.courseId = 'courseid' in notification ? notification.courseid : undefined;\n      // Treat appurl first if any.\n      if ((_this3$actionsData = _this3.actionsData) !== null && _this3$actionsData !== void 0 && _this3$actionsData.appurl) {\n        actions = yield CoreContentLinksDelegate.getActionsFor(_this3.actionsData.appurl, _this3.courseId, undefined, _this3.actionsData);\n      }\n      if (!actions.length && _this3.contextUrl) {\n        // No appurl or cannot handle it. Try with contextUrl.\n        actions = yield CoreContentLinksDelegate.getActionsFor(_this3.contextUrl, _this3.courseId, undefined, _this3.actionsData);\n      }\n      if (!actions.length) {\n        // URL is not supported. Add an action to open it in browser.\n        actions.push({\n          message: 'core.view',\n          icon: 'fas-eye',\n          action: siteId => _this3.openInBrowser(siteId)\n        });\n      }\n      _this3.actions = actions;\n    })();\n  }\n  /**\n   * Default action. Open in browser.\n   *\n   * @param siteId Site ID to use.\n   */\n  openInBrowser(siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      var _this4$actionsData;\n      const url = ((_this4$actionsData = _this4.actionsData) === null || _this4$actionsData === void 0 ? void 0 : _this4$actionsData.appurl) || _this4.contextUrl;\n      if (!url) {\n        return;\n      }\n      const site = yield CoreSites.getSite(siteId);\n      site.openInBrowserWithAutoLogin(url);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$notifications;\n    (_this$notifications = this.notifications) === null || _this$notifications === void 0 || _this$notifications.destroy();\n  }\n}\n/**\n * Helper to manage swiping within a collection of notifications.\n */\n_class = AddonNotificationsNotificationPage;\n_class.ɵfac = function AddonNotificationsNotificationPage_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-notifications-notification\"]],\n  decls: 13,\n  vars: 10,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [3, \"core-swipe-navigation\"], [3, \"hideUntil\"], [\"class\", \"list-item-limited-width\", 4, \"ngIf\"], [\"collapsible-footer\", \"\", \"appearOnBottom\", \"\", \"slot\", \"fixed\", 4, \"ngIf\"], [1, \"list-item-limited-width\"], [\"lines\", \"full\", 1, \"ion-text-wrap\", \"core-notification-title\"], [\"slot\", \"start\", 3, \"userId\", \"profileUrl\", \"fullname\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"item-heading\"], [\"contextLevel\", \"system\", 3, \"text\", \"contextInstanceId\", \"wsNotFiltered\"], [1, \"ion-text-wrap\", \"core-notification-body\"], [\"contextLevel\", \"system\", 3, \"text\", \"contextInstanceId\"], [\"slot\", \"start\", 3, \"userId\", \"profileUrl\", \"fullname\"], [\"class\", \"core-avatar-extra-img\", 4, \"ngIf\"], [1, \"core-avatar-extra-img\"], [\"alt\", \"\", \"role\", \"presentation\", 3, \"src\"], [\"class\", \"core-notification-img\", \"core-external-content\", \"\", \"alt\", \"\", \"role\", \"presentation\", \"slot\", \"start\", 3, \"src\", 4, \"ngIf\"], [\"class\", \"core-notification-icon\", \"slot\", \"start\", 4, \"ngIf\"], [\"core-external-content\", \"\", \"alt\", \"\", \"role\", \"presentation\", \"slot\", \"start\", 1, \"core-notification-img\", 3, \"src\"], [\"slot\", \"start\", 1, \"core-notification-icon\"], [\"core-external-content\", \"\", \"alt\", \"\", \"role\", \"presentation\", 3, \"src\", 4, \"ngIf\"], [\"name\", \"fas-bell\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"core-external-content\", \"\", \"alt\", \"\", \"role\", \"presentation\", 3, \"src\"], [\"name\", \"fas-bell\", \"aria-hidden\", \"true\"], [\"collapsible-footer\", \"\", \"appearOnBottom\", \"\", \"slot\", \"fixed\"], [1, \"list-item-limited-width\", \"adaptable-buttons-row\"], [\"expand\", \"block\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [\"expand\", \"block\", 3, \"click\"], [\"slot\", \"start\", \"aria-hidden\", \"true\", 3, \"name\"]],\n  template: function AddonNotificationsNotificationPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵtext(7);\n      i0.ɵɵpipe(8, \"translate\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(9, \"ion-content\", 2)(10, \"core-loading\", 3);\n      i0.ɵɵtemplate(11, AddonNotificationsNotificationPage_div_11_Template, 12, 10, \"div\", 4);\n      i0.ɵɵtemplate(12, AddonNotificationsNotificationPage_div_12_Template, 3, 1, \"div\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 6, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 8, \"addon.notifications.notifications\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"core-swipe-navigation\", ctx.notifications);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.notification);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loaded && ctx.actions && ctx.actions.length > 0);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.CoreLoadingComponent, i3.CoreUserAvatarComponent, i4.CoreExternalContentDirective, i5.CoreFaIconDirective, i6.CoreFormatTextDirective, i7.CoreSwipeNavigationDirective, i8.CoreCollapsibleFooterDirective, i9.CoreContentDirective, i10.CoreUpdateNonReactiveAttributesDirective, i11.IonButton, i11.IonButtons, i11.IonContent, i11.IonHeader, i11.IonIcon, i11.IonItem, i11.IonLabel, i11.IonTitle, i11.IonToolbar, i11.IonBackButton, i12.CoreCreateLinksPipe, i13.CoreTimeAgoPipe, i14.TranslatePipe],\n  styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[_nghost-%COMP%] {\\n  --extra-icon-size: 16px;\\n  --icon-size: 24px;\\n}\\n[_nghost-%COMP%]     core-user-avatar .core-avatar-extra-img, [_nghost-%COMP%]     core-user-avatar core-mod-icon {\\n  margin: 0 !important;\\n  position: absolute;\\n  right: -4px;\\n  bottom: -4px;\\n  --padding: 0.2rem;\\n}\\n[_nghost-%COMP%]     core-user-avatar .core-avatar-extra-img {\\n  background: var(--background-color);\\n  border-radius: var(--radius-sm);\\n}\\n[_nghost-%COMP%]     core-user-avatar .core-avatar-extra-img img {\\n  max-width: var(--extra-icon-size);\\n  max-height: var(--extra-icon-size);\\n  display: block;\\n}\\n[_nghost-%COMP%]     core-user-avatar core-mod-icon {\\n  --size: var(--extra-icon-size);\\n}\\n[_nghost-%COMP%]   div.core-notification-icon[_ngcontent-%COMP%] {\\n  padding: 0.7rem;\\n  background: var(--background-color);\\n  border-radius: var(--radius-xs);\\n}\\n[_nghost-%COMP%]   div.core-notification-icon[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n  width: var(--icon-size);\\n  height: var(--icon-size);\\n}\\n[_nghost-%COMP%]   div.core-notification-icon[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%] {\\n  font-size: var(--icon-size);\\n}\\n[_nghost-%COMP%]   .core-notification-icon[_ngcontent-%COMP%] {\\n  --module-icon-size: var(--icon-size);\\n  -webkit-margin-start: 0px;\\n  margin-inline-start: 0px;\\n  -webkit-margin-end: 8px;\\n  margin-inline-end: 8px;\\n  margin-top: 6px;\\n  margin-bottom: 6px;\\n}\\n[_nghost-%COMP%]   .core-notification-img[_ngcontent-%COMP%] {\\n  -webkit-margin-start: 0px;\\n  margin-inline-start: 0px;\\n  -webkit-margin-end: 8px;\\n  margin-inline-end: 8px;\\n  margin-top: 6px;\\n  margin-bottom: 6px;\\n  width: var(--core-avatar-size);\\n  height: var(--core-avatar-size);\\n  object-fit: cover;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9nbG9iYWxzLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvdGhlbWUvaGVscGVycy9pb25pYy5mdW5jdGlvbnMuc3RyaW5nLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvdGhlbWUvaGVscGVycy9pb25pYy5mdW5jdGlvbnMuY29sb3Iuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9oZWxwZXJzL2lvbmljLm1peGlucy5zY3NzIiwid2VicGFjazovLy4vc3JjL3RoZW1lL2hlbHBlcnMvaW9uaWMuY29tcG9uZW50cy5taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9oZWxwZXJzL2N1c3RvbS5taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9nbG9iYWxzLmN1c3RvbS5zY3NzIiwid2VicGFjazovLy4vc3JjL3RoZW1lL2dsb2JhbHMudmFyaWFibGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvYWRkb25zL25vdGlmaWNhdGlvbnMvbm90aWZpY2F0aW9ucy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0VBQUE7QUNBQTs7Ozs7RUFBQTtBQ0FBOzs7OztFQUFBO0FDQUE7Ozs7O0VBQUE7QUNBQTs7Ozs7O0VBQUE7QUNFQTs7OztFQUFBO0FBNEdBOztFQUFBO0FDOUdBOzs7O0VBQUE7QUNBQTs7OztFQUFBO0FBK0RBOzs7O0VBQUE7QUM3REE7RUFDSSx1QkFBQTtFQUNBLGlCQUFBO0FBb0RKO0FBakRROztFQUVJLG9CQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0FBbURaO0FBaERRO0VBQ0ksbUNBQUE7RUFDQSwrQkFBQTtBQWtEWjtBQWpEWTtFQUNJLGlDQUFBO0VBQ0Esa0NBQUE7RUFDQSxjQUFBO0FBbURoQjtBQS9DUTtFQUNJLDhCQUFBO0FBaURaO0FBN0NJO0VBUUksZUFBQTtFQUNBLG1DQUFBO0VBQ0EsK0JBQUE7QUF3Q1I7QUFqRFE7RUFDSSx1QkFBQTtFQUNBLHdCQUFBO0FBbURaO0FBakRRO0VBQ0ksMkJBQUE7QUFtRFo7QUE1Q0k7RUFDSSxvQ0FBQTtFTHdRSix5Qkt2UW1DO0VMd1FuQyx3Qkt4UW1DO0VMeVFuQyx1Qkt6UXlCO0VMMFF6QixzQksxUXlCO0VMd1IzQixlS3hSc0I7RUx5UnRCLGtCS3pSZ0M7QUFtRGxDO0FBaERJO0VMb1FBLHlCS25RbUM7RUxvUW5DLHdCS3BRbUM7RUxxUW5DLHVCS3JReUI7RUxzUXpCLHNCS3RReUI7RUxvUjNCLGVLcFJzQjtFTHFSdEIsa0JLclJnQztFQUMxQiw4QkFBQTtFQUNBLCtCQUFBO0VBQ0EsaUJBQUE7QUF1RFIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFwcCBHbG9iYWwgdmFyaWFibGVzIFNDU1NcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBsYWNlIGhlcmUgdGhlIGRpZmZlcmVudCBmaWxlcyB5b3Ugc2hvdWxkIGltcG9ydCB0byB1c2UgZ2xvYmFsIHZhcmlhYmxlcy5cbiAqL1xuXG4kZm9udC1wYXRoOiBcIi4uL2Fzc2V0cy9mb250c1wiO1xuJGFzc2V0cy1wYXRoOiBcIi4uL2Fzc2V0c1wiO1xuXG5AaW1wb3J0IFwiLi9oZWxwZXJzL2hlbHBlcnMuc2Nzc1wiO1xuQGltcG9ydCBcIi4vZ2xvYmFscy5jdXN0b20uc2Nzc1wiO1xuQGltcG9ydCBcIi4vZ2xvYmFscy52YXJpYWJsZXMuc2Nzc1wiO1xuIiwiLyoqXG4gKiBJbXBvcnRlZCBpb25pYyBzdHJpbmcgZnVuY3Rpb25zIGZvciBTQ1NTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFeHRyYWN0ZWQgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL3RoZW1lcy9pb25pYy5mdW5jdGlvbnMuc3RyaW5nLnNjc3NcbiAqL1xuXG5cbi8vIFN0cmluZyBVdGlsaXR5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gU3RyaW5nIFJlcGxhY2UgRnVuY3Rpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBmdW5jdGlvbiBzdHItcmVwbGFjZSgkc3RyaW5nLCAkc2VhcmNoLCAkcmVwbGFjZTogXCJcIikge1xuICAkaW5kZXg6IHN0ci1pbmRleCgkc3RyaW5nLCAkc2VhcmNoKTtcblxuICBAaWYgJGluZGV4IHtcbiAgICBAcmV0dXJuIHN0ci1zbGljZSgkc3RyaW5nLCAxLCAkaW5kZXggLSAxKSArICRyZXBsYWNlICsgc3RyLXJlcGxhY2Uoc3RyLXNsaWNlKCRzdHJpbmcsICRpbmRleCArIHN0ci1sZW5ndGgoJHNlYXJjaCkpLCAkc2VhcmNoLCAkcmVwbGFjZSk7XG4gIH1cblxuICBAcmV0dXJuICRzdHJpbmc7XG59XG5cbi8vIFN0cmluZyBTcGxpdCBGdW5jdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG5AZnVuY3Rpb24gc3RyLXNwbGl0KCRzdHJpbmcsICRzZXBhcmF0b3IpIHtcbiAgLy8gZW1wdHkgYXJyYXkvbGlzdFxuICAkc3BsaXQtYXJyOiAoKTtcbiAgLy8gZmlyc3QgaW5kZXggb2Ygc2VwYXJhdG9yIGluIHN0cmluZ1xuICAkaW5kZXg6IHN0ci1pbmRleCgkc3RyaW5nLCAkc2VwYXJhdG9yKTtcbiAgLy8gbG9vcCB0aHJvdWdoIHN0cmluZ1xuICBAd2hpbGUgJGluZGV4ICE9IG51bGwge1xuICAgIC8vIGdldCB0aGUgc3Vic3RyaW5nIGZyb20gdGhlIGZpcnN0IGNoYXJhY3RlciB0byB0aGUgc2VwYXJhdG9yXG4gICAgJGl0ZW06IHN0ci1zbGljZSgkc3RyaW5nLCAxLCAkaW5kZXggLSAxKTtcbiAgICAvLyBwdXNoIGl0ZW0gdG8gYXJyYXlcbiAgICAkc3BsaXQtYXJyOiBhcHBlbmQoJHNwbGl0LWFyciwgJGl0ZW0pO1xuICAgIC8vIHJlbW92ZSBpdGVtIGFuZCBzZXBhcmF0b3IgZnJvbSBzdHJpbmdcbiAgICAkc3RyaW5nOiBzdHItc2xpY2UoJHN0cmluZywgJGluZGV4ICsgMSk7XG4gICAgLy8gZmluZCBuZXcgaW5kZXggb2Ygc2VwYXJhdG9yXG4gICAgJGluZGV4OiBzdHItaW5kZXgoJHN0cmluZywgJHNlcGFyYXRvcik7XG4gIH1cbiAgLy8gYWRkIHRoZSByZW1haW5pbmcgc3RyaW5nIHRvIGxpc3QgKHRoZSBsYXN0IGl0ZW0pXG4gICRzcGxpdC1hcnI6IGFwcGVuZCgkc3BsaXQtYXJyLCAkc3RyaW5nKTtcblxuICBAcmV0dXJuICRzcGxpdC1hcnI7XG59XG5cblxuLy8gU3RyaW5nIEV4dHJhY3QgRnVuY3Rpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBmdW5jdGlvbiBzdHItZXh0cmFjdCgkc3RyaW5nLCAkc3RhcnQsICRlbmQpIHtcbiAgJHN0YXJ0LWluZGV4OiBzdHItaW5kZXgoJHN0cmluZywgJHN0YXJ0KTtcblxuICBAaWYgJHN0YXJ0LWluZGV4IHtcbiAgICAkcG9zdDogc3RyLXNsaWNlKCRzdHJpbmcsICRzdGFydC1pbmRleCArIHN0ci1sZW5ndGgoJHN0YXJ0KSk7XG4gICAgJGVuZC1pbmRleDogc3RyLWluZGV4KCRwb3N0LCAkZW5kKTtcblxuICAgIEBpZiAkZW5kLWluZGV4IHtcbiAgICAgIEByZXR1cm4gc3RyLXNsaWNlKCRwb3N0LCAxLCAkZW5kLWluZGV4IC0gMSk7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiBudWxsO1xufVxuXG5cbi8vIFN0cmluZyBDb250YWlucyBGdW5jdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQGZ1bmN0aW9uIHN0ci1jb250YWlucygkc3RyaW5nLCAkbmVlZGxlKSB7XG4gIEBpZiAodHlwZS1vZigkc3RyaW5nKSA9PSBzdHJpbmcpIHtcbiAgICBAcmV0dXJuIHN0ci1pbmRleCgkc3RyaW5nLCAkbmVlZGxlKSAhPSBudWxsO1xuICB9XG5cbiAgQHJldHVybiBmYWxzZTtcbn1cblxuXG4vLyBVUkwgRW5jb2RlIEZ1bmN0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AZnVuY3Rpb24gdXJsLWVuY29kZSgkdmFsKSB7XG4gICRzcGFjZXM6IHN0ci1yZXBsYWNlKCR2YWwsIFwiIFwiLCBcIiUyMFwiKTtcbiAgJGVuY29kZWQ6IHN0ci1yZXBsYWNlKCRzcGFjZXMsIFwiI1wiLCBcIiUyM1wiKTtcbiAgQHJldHVybiAkZW5jb2RlZDtcbn1cblxuXG4vLyBBZGQgUm9vdCBTZWxlY3RvclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEFkZHMgYSByb290IHNlbGVjdG9yIHVzaW5nIGhvc3QgYmFzZWQgb24gdGhlIHNlbGVjdG9yIHBhc3NlZFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQGZ1bmN0aW9uIGFkZC1yb290LXNlbGVjdG9yKCRyb290LCAkYWRkSG9zdFNlbGVjdG9yKSB7XG4gICRzZWxlY3RvcnM6IHN0ci1zcGxpdCgkcm9vdCwgXCIsXCIpO1xuXG4gICRsaXN0OiAoKTtcblxuICBAZWFjaCAkc2VsZWN0b3IgaW4gJHNlbGVjdG9ycyB7XG4gICAgLy8gSWYgdGhlIHNlbGVjdG9yIGNvbnRhaW5zIDpob3N0KCBpdCBtZWFucyBpdCBpcyB0YXJnZXRpbmcgYSBjbGFzcyBvbiB0aGUgaG9zdFxuICAgIC8vIGVsZW1lbnQgc28gd2UgbmVlZCB0byBjaGFuZ2UgaG93IHdlIHRhcmdldCBpdDpcbiAgICAvLyBAaW5jbHVkZSBhZGQtcm9vdC1zZWxlY3RvcihcIjpob3N0KC5maXhlZClcIiwgXCJbZGlyPXJ0bF1cIilcbiAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLmZpeGVkKVxuICAgIC8vIC0tPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuZml4ZWRcbiAgICBAaWYgc3RyLWNvbnRhaW5zKCRzZWxlY3RvciwgXCI6aG9zdChcIikge1xuICAgICAgLy8gQGluY2x1ZGUgYWRkLXJvb3Qtc2VsZWN0b3IoXCI6aG9zdCguZml4ZWQpXCIsIFwiW2Rpcj1ydGxdXCIpXG4gICAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLmZpeGVkKVxuICAgICAgJHNoYWRvdy1lbGVtZW50OiBzdHItcmVwbGFjZSgkc2VsZWN0b3IsIFwiOmhvc3QoXCIsIFwiOmhvc3QtY29udGV4dCgjeyRhZGRIb3N0U2VsZWN0b3J9KTpob3N0KFwiKTtcbiAgICAgICRsaXN0OiBhcHBlbmQoJGxpc3QsICRzaGFkb3ctZWxlbWVudCwgY29tbWEpO1xuXG4gICAgICAkbmV3LWVsZW1lbnQ6ICgpO1xuICAgICAgJGVsZW1lbnRzOiBzdHItc3BsaXQoJHNlbGVjdG9yLCBcIiBcIik7XG5cbiAgICAgIEBlYWNoICRlbGVtZW50IGluICRlbGVtZW50cyB7XG4gICAgICAgIEBpZiBzdHItY29udGFpbnMoJGVsZW1lbnQsIFwiOmhvc3QoXCIpIHtcbiAgICAgICAgICAkc2NvcGVkLWVsZW1lbnQ6ICRlbGVtZW50O1xuXG4gICAgICAgICAgLy8gUmVwbGFjZSB0aGUgOmhvc3QoIGFuZCApIHNvIGFsbCB3ZSBoYXZlIGxlZnQgaXMgdGhlIGNsYXNzXG4gICAgICAgICAgLy8gaW5zaWRlIG9mIGl0OlxuICAgICAgICAgIC8vIDpob3N0KC5maXhlZCkgLT4gLmZpeGVkXG4gICAgICAgICAgJHNjb3BlZC1lbGVtZW50OiBzdHItcmVwbGFjZSgkc2NvcGVkLWVsZW1lbnQsIFwiKVwiLCBcIlwiKTtcbiAgICAgICAgICAkc2NvcGVkLWVsZW1lbnQ6IHN0ci1yZXBsYWNlKCRzY29wZWQtZWxlbWVudCwgXCI6aG9zdChcIiwgXCJcIik7XG5cbiAgICAgICAgICAvLyBBZGQgdGhlIGNsYXNzIGJhY2sgaW5zaWRlIG9mIGhvc3Qgd2l0aCB0aGUgcnRsIHNlbGVjdG9yOlxuICAgICAgICAgIC8vIC5maXhlZCAtPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuZml4ZWRcbiAgICAgICAgICAkc2NvcGVkLWVsZW1lbnQ6IHN0ci1yZXBsYWNlKCRzY29wZWQtZWxlbWVudCwgJHNjb3BlZC1lbGVtZW50LCBcIjpob3N0LWNvbnRleHQoI3skYWRkSG9zdFNlbGVjdG9yfSkjeyRzY29wZWQtZWxlbWVudH1cIik7XG5cbiAgICAgICAgICAvLyBAaW5jbHVkZSBhZGQtcm9vdC1zZWxlY3RvcihcIjpob3N0KC5maXhlZClcIiwgXCJbZGlyPXJ0bF1cIilcbiAgICAgICAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLmZpeGVkXG4gICAgICAgICAgJG5ldy1lbGVtZW50OiBhcHBlbmQoJG5ldy1lbGVtZW50LCAkc2NvcGVkLWVsZW1lbnQsIHNwYWNlKTtcbiAgICAgICAgfSBAZWxzZSB7XG4gICAgICAgICAgLy8gQWRkIGJhY2sgYW55IHNlbGVjdG9ycyB0aGF0IGZvbGxvd2VkIHRoZSBob3N0IGFmdGVyIHRyYW5zZm9ybWluZyB0aGVcbiAgICAgICAgICAvLyBmaXJzdCBzZWxlY3RvcjpcbiAgICAgICAgICAvLyA6aG9zdCguZml4ZWQpIDo6c2xvdHRlZChpb24taWNvbilcbiAgICAgICAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLmZpeGVkKSA6OnNsb3R0ZWQoaW9uLWljb24pXG4gICAgICAgICAgLy8gLS0+IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5maXhlZCA6OnNsb3R0ZWQoaW9uLWljb24pXG4gICAgICAgICAgJG5ldy1lbGVtZW50OiBhcHBlbmQoJG5ldy1lbGVtZW50LCAkZWxlbWVudCwgc3BhY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRsaXN0OiBhcHBlbmQoJGxpc3QsICRuZXctZWxlbWVudCwgY29tbWEpO1xuICAgIC8vIElmIHRoZSBzZWxlY3RvciBjb250YWlucyA6aG9zdCB3aXRob3V0IGEgcGFyYW50aGVzZXNcbiAgICAvLyBpdCBtZWFucyBpdCBpcyB0YXJnZXRpbmcganVzdCB0aGUgaG9zdFxuICAgIC8vIGVsZW1lbnQgc28gd2UgY2FuIGNoYW5nZSBpdCB0byBsb29rIGZvciBob3N0LWNvbnRleHRcbiAgICAvLyBAaW5jbHVkZSBhZGQtcm9vdC1zZWxlY3RvcihcIjpob3N0XCIsIFwiW2Rpcj1ydGxdXCIpXG4gICAgLy8gLS0+IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKVxuICAgIC8vIC0tPiA6aG9zdDpkaXIocnRsKVxuICAgIH0gQGVsc2UgaWYgc3RyLWNvbnRhaW5zKCRzZWxlY3RvciwgXCI6aG9zdFwiKSB7XG4gICAgICAkbmV3LWVsZW1lbnQ6ICgpO1xuICAgICAgJGVsZW1lbnRzOiBzdHItc3BsaXQoJHNlbGVjdG9yLCBcIiBcIik7XG5cbiAgICAgIEBlYWNoICRlbGVtZW50IGluICRlbGVtZW50cyB7XG4gICAgICAgIEBpZiBzdHItY29udGFpbnMoJGVsZW1lbnQsIFwiOmhvc3RcIikge1xuICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIDpob3N0IHdpdGggdGhlIGFkZEhvc3RTZWxlY3RvcjpcbiAgICAgICAgICAvLyA6aG9zdCAtPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSlcbiAgICAgICAgICAkdXBkYXRlZC1lbGVtZW50OiBzdHItcmVwbGFjZSgkZWxlbWVudCwgXCI6aG9zdFwiLCBcIjpob3N0LWNvbnRleHQoI3skYWRkSG9zdFNlbGVjdG9yfSlcIik7XG5cbiAgICAgICAgICAvLyBBZGQgdGhlIGZpbmFsIHNlbGVjdG9yIGFmdGVyIGFsbCB0cmFuc2Zvcm1hdGlvbnM6XG4gICAgICAgICAgLy8gOmhvc3QgLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pXG4gICAgICAgICAgJG5ldy1lbGVtZW50OiBhcHBlbmQoJG5ldy1lbGVtZW50LCAkdXBkYXRlZC1lbGVtZW50LCBzcGFjZSk7XG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgIC8vIEFkZCBiYWNrIGFueSBzZWxlY3RvcnMgdGhhdCBmb2xsb3dlZCB0aGUgaG9zdCBhZnRlciB0cmFuc2Zvcm1pbmcgdGhlXG4gICAgICAgICAgLy8gZmlyc3Qgc2VsZWN0b3I6XG4gICAgICAgICAgLy8gOmhvc3QgOjpzbG90dGVkKGlvbi1pY29uKSAtPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgOjpzbG90dGVkKGlvbi1pY29uKVxuICAgICAgICAgICRuZXctZWxlbWVudDogYXBwZW5kKCRuZXctZWxlbWVudCwgJGVsZW1lbnQsIHNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkbGlzdDogYXBwZW5kKCRsaXN0LCAkbmV3LWVsZW1lbnQsIGNvbW1hKTtcbiAgICAvLyBJZiB0aGUgc2VsZWN0b3IgZG9lcyBub3QgY29udGFpbiBob3N0IGF0IGFsbCBpdCBpcyBlaXRoZXIgYSBzaGFkb3dcbiAgICAvLyBvciBub3JtYWwgZWxlbWVudCBzbyBhcHBlbmQgYm90aCB0aGUgYWRkSG9zdFNlbGVjdG9yIGFuZCBob3N0LWNvbnRleHRcbiAgICAvLyBAaW5jbHVkZSBhZGQtcm9vdC1zZWxlY3RvcihcImlvbi1jb21wb25lbnRcIiwgXCJbZGlyPXJ0bF1cIilcbiAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIGlvbi1jb21wb25lbnRcbiAgICAvLyAtLT4gW2Rpcj1ydGxdIGlvbi1jb21wb25lbnRcbiAgICB9IEBlbHNlIHtcbiAgICAgICRsaXN0OiBhcHBlbmQoJGxpc3QsIFwiI3skYWRkSG9zdFNlbGVjdG9yfSAjeyRzZWxlY3Rvcn1cIiwgY29tbWEpO1xuICAgICAgJGxpc3Q6IGFwcGVuZCgkbGlzdCwgXCI6aG9zdC1jb250ZXh0KCN7JGFkZEhvc3RTZWxlY3Rvcn0pICN7JHNlbGVjdG9yfVwiLCBjb21tYSk7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkbGlzdDtcbn1cbiIsIi8qKlxuICogSW1wb3J0ZWQgaW9uaWMgY29sb3IgZnVuY3Rpb25zIGZvciBTQ1NTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFeHRyYWN0ZWQgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL3RoZW1lcy9pb25pYy5mdW5jdGlvbnMuY29sb3Iuc2Nzc1xuICovXG5cbi8vIEdldHMgdGhlIGFjdGl2ZSBjb2xvcidzIGNzcyB2YXJpYWJsZSBmcm9tIGEgdmFyaWF0aW9uLiBBbHBoYSBpcyBvcHRpb25hbC5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeGFtcGxlIHVzYWdlOlxuLy8gY3VycmVudC1jb2xvcihiYXNlKSA9PiB2YXIoLS1pb24tY29sb3ItYmFzZSlcbi8vIGN1cnJlbnQtY29sb3IoY29udHJhc3QsIDAuMSkgPT4gcmdiYSh2YXIoLS1pb24tY29sb3ItY29udHJhc3QtcmdiKSwgMC4xKVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBjdXJyZW50LWNvbG9yKCR2YXJpYXRpb24sICRhbHBoYTogbnVsbCkge1xuICBAaWYgJGFscGhhID09IG51bGwge1xuICAgIEByZXR1cm4gdmFyKC0taW9uLWNvbG9yLSN7JHZhcmlhdGlvbn0pO1xuICB9IEBlbHNlIHtcbiAgICBAcmV0dXJuIHJnYmEodmFyKC0taW9uLWNvbG9yLSN7JHZhcmlhdGlvbn0tcmdiKSwgI3skYWxwaGF9KTtcbiAgfVxufVxuXG4vLyBHZXRzIHRoZSBzcGVjaWZpYyBjb2xvcidzIGNzcyB2YXJpYWJsZSBmcm9tIHRoZSBuYW1lIGFuZCB2YXJpYXRpb24uIEFscGhhL3JnYiBhcmUgb3B0aW9uYWwuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhhbXBsZSB1c2FnZTpcbi8vIGlvbi1jb2xvcihwcmltYXJ5LCBiYXNlKSA9PiB2YXIoLS1pb24tY29sb3ItcHJpbWFyeSwgIzM4ODBmZilcbi8vIGlvbi1jb2xvcihzZWNvbmRhcnksIGNvbnRyYXN0KSA9PiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5LWNvbnRyYXN0KVxuLy8gaW9uLWNvbG9yKHByaW1hcnksIGJhc2UsIDAuNSkgPT4gcmdiYSh2YXIoLS1pb24tY29sb3ItcHJpbWFyeS1yZ2IsIDU2LCAxMjgsIDI1NSksIDAuNSlcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZnVuY3Rpb24gaW9uLWNvbG9yKCRuYW1lLCAkdmFyaWF0aW9uLCAkYWxwaGE6IG51bGwsICRyZ2I6IG51bGwpIHtcbiAgJHZhbHVlczogbWFwLWdldCgkY29sb3JzLCAkbmFtZSk7XG4gICR2YWx1ZTogbWFwLWdldCgkdmFsdWVzLCAkdmFyaWF0aW9uKTtcbiAgJHZhcmlhYmxlOiAtLWlvbi1jb2xvci0jeyRuYW1lfS0jeyR2YXJpYXRpb259O1xuXG4gIEBpZiAoJHZhcmlhdGlvbiA9PSBiYXNlKSB7XG4gICAgJHZhcmlhYmxlOiAtLWlvbi1jb2xvci0jeyRuYW1lfTtcbiAgfVxuXG4gIEBpZiAoJGFscGhhKSB7XG4gICAgJHZhbHVlOiBjb2xvci10by1yZ2ItbGlzdCgkdmFsdWUpO1xuICAgIEByZXR1cm4gcmdiYSh2YXIoI3skdmFyaWFibGV9LXJnYiwgJHZhbHVlKSwgJGFscGhhKTtcbiAgfVxuICBAaWYgKCRyZ2IpIHtcbiAgICAkdmFsdWU6IGNvbG9yLXRvLXJnYi1saXN0KCR2YWx1ZSk7XG4gICAgJHZhcmlhYmxlOiAjeyR2YXJpYWJsZX0tcmdiO1xuICB9XG5cbiAgQHJldHVybiB2YXIoI3skdmFyaWFibGV9LCAkdmFsdWUpO1xufVxuXG4vLyBNaXhlcyBhIGNvbG9yIHdpdGggYmxhY2sgdG8gY3JlYXRlIGl0cyBzaGFkZS5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZnVuY3Rpb24gZ2V0LWNvbG9yLXNoYWRlKCRjb2xvcikge1xuICBAcmV0dXJuIG1peCgjMDAwLCAkY29sb3IsIDEyJSk7XG59XG5cbi8vIE1peGVzIGEgY29sb3Igd2l0aCB3aGl0ZSB0byBjcmVhdGUgaXRzIHRpbnQuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIGdldC1jb2xvci10aW50KCRjb2xvcikge1xuICBAcmV0dXJuIG1peCgjZmZmLCAkY29sb3IsIDEwJSk7XG59XG5cbi8vIENvbnZlcnRzIGEgY29sb3IgdG8gYSBjb21tYSBzZXBhcmF0ZWQgcmdiLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBjb2xvci10by1yZ2ItbGlzdCgkY29sb3IpIHtcbiAgQHJldHVybiAje3JlZCgkY29sb3IpfSwje2dyZWVuKCRjb2xvcil9LCN7Ymx1ZSgkY29sb3IpfTtcbn1cbiIsIi8qKlxuICogSW1wb3J0ZWQgaW9uaWMgbWl4aW5zIGZvciBTQ1NTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFeHRyYWN0ZWQgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL3RoZW1lcy9pb25pYy5taXhpbnMuc2Nzc1xuICovXG5cbkBtaXhpbiBpbnB1dC1jb3ZlcigpIHtcbiAgQGluY2x1ZGUgcG9zaXRpb24oMCwgbnVsbCwgbnVsbCwgMCk7XG4gIEBpbmNsdWRlIG1hcmdpbigwKTtcblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcblxuICBib3JkZXI6IDA7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgYXBwZWFyYW5jZTogbm9uZTtcbiAgb3V0bGluZTogbm9uZTtcblxuICAmOjotbW96LWZvY3VzLWlubmVyIHtcbiAgICBib3JkZXI6IDA7XG4gIH1cbn1cblxuQG1peGluIHZpc3VhbGx5LWhpZGRlbigpIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuXG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuXG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcblxuICBib3JkZXI6IDA7XG4gIG91dGxpbmU6IDA7XG4gIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG5cbiAgb3BhY2l0eTogMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuQG1peGluIHRleHQtaW5oZXJpdCgpIHtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgZm9udC1zdHlsZTogaW5oZXJpdDtcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XG4gIGxldHRlci1zcGFjaW5nOiBpbmhlcml0O1xuICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQ7XG4gIHRleHQtaW5kZW50OiBpbmhlcml0O1xuICB0ZXh0LW92ZXJmbG93OiBpbmhlcml0O1xuICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdDtcbiAgdGV4dC1hbGlnbjogaW5oZXJpdDtcbiAgd2hpdGUtc3BhY2U6IGluaGVyaXQ7XG4gIGNvbG9yOiBpbmhlcml0O1xufVxuXG5AbWl4aW4gYnV0dG9uLXN0YXRlKCkge1xuICBAaW5jbHVkZSBwb3NpdGlvbigwLCAwLCAwLCAwKTtcblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgY29udGVudDogXCJcIjtcblxuICBvcGFjaXR5OiAwO1xufVxuXG4vLyBGb250IHNtb290aGluZ1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQG1peGluIGZvbnQtc21vb3RoaW5nKCkge1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbn1cblxuLy8gR2V0IHRoZSBrZXkgZnJvbSBhIG1hcCBiYXNlZCBvbiB0aGUgaW5kZXhcbkBmdW5jdGlvbiBpbmRleC10by1rZXkoJG1hcCwgJGluZGV4KSB7XG4gICRrZXlzOiBtYXAta2V5cygkbWFwKTtcblxuICBAcmV0dXJuIG50aCgka2V5cywgJGluZGV4KTtcbn1cblxuXG4vLyBCcmVha3BvaW50IE1peGluc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEJyZWFrcG9pbnQgdmlld3BvcnQgc2l6ZXMgYW5kIG1lZGlhIHF1ZXJpZXMuXG4vL1xuLy8gQnJlYWtwb2ludHMgYXJlIGRlZmluZWQgYXMgYSBtYXAgb2YgKG5hbWU6IG1pbmltdW0gd2lkdGgpLCBvcmRlciBmcm9tIHNtYWxsIHRvIGxhcmdlOlxuLy9cbi8vICAgICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweClcbi8vXG4vLyBUaGUgbWFwIGRlZmluZWQgaW4gdGhlIGAkc2NyZWVuLWJyZWFrcG9pbnRzYCBnbG9iYWwgdmFyaWFibGUgaXMgdXNlZCBhcyB0aGUgYCRicmVha3BvaW50c2AgYXJndW1lbnQgYnkgZGVmYXVsdC5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIE1pbmltdW0gYnJlYWtwb2ludCB3aWR0aC4gTnVsbCBmb3IgdGhlIHNtYWxsZXN0IChmaXJzdCkgYnJlYWtwb2ludC5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LW1pbihzbSwgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KSlcbi8vICAgIDU3NnB4XG5AZnVuY3Rpb24gYnJlYWtwb2ludC1taW4oJG5hbWUsICRicmVha3BvaW50czogJHNjcmVlbi1icmVha3BvaW50cykge1xuICAkbWluOiBtYXAtZ2V0KCRicmVha3BvaW50cywgJG5hbWUpO1xuXG4gIEByZXR1cm4gaWYoJG5hbWUgIT0gaW5kZXgtdG8ta2V5KCRicmVha3BvaW50cywgMSksICRtaW4sIG51bGwpO1xufVxuXG4vLyBSZXR1cm5zIGEgYmxhbmsgc3RyaW5nIGlmIHNtYWxsZXN0IGJyZWFrcG9pbnQsIG90aGVyd2lzZSByZXR1cm5zIHRoZSBuYW1lIHdpdGggYSBkYXNoIGluZnJvbnQuXG4vLyBVc2VmdWwgZm9yIG1ha2luZyByZXNwb25zaXZlIHV0aWxpdGllcy5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LWluZml4KHhzLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgXCJcIiAgKFJldHVybnMgYSBibGFuayBzdHJpbmcpXG4vLyAgICA+PiBicmVha3BvaW50LWluZml4KHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgXCItc21cIlxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtaW5maXgoJG5hbWUsICRicmVha3BvaW50czogJHNjcmVlbi1icmVha3BvaW50cykge1xuICBAcmV0dXJuIGlmKGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpID09IG51bGwsIFwiXCIsIFwiLSN7JG5hbWV9XCIpO1xufVxuXG4vLyBNZWRpYSBvZiBhdCBsZWFzdCB0aGUgbWluaW11bSBicmVha3BvaW50IHdpZHRoLiBObyBxdWVyeSBmb3IgdGhlIHNtYWxsZXN0IGJyZWFrcG9pbnQuXG4vLyBNYWtlcyB0aGUgQGNvbnRlbnQgYXBwbHkgdG8gdGhlIGdpdmVuIGJyZWFrcG9pbnQgYW5kIHdpZGVyLlxuQG1peGluIG1lZGlhLWJyZWFrcG9pbnQtdXAoJG5hbWUsICRicmVha3BvaW50czogJHNjcmVlbi1icmVha3BvaW50cykge1xuICAkbWluOiBicmVha3BvaW50LW1pbigkbmFtZSwgJGJyZWFrcG9pbnRzKTtcbiAgQGlmICRtaW4ge1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiAkbWluKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vIE5hbWUgb2YgdGhlIG5leHQgYnJlYWtwb2ludCwgb3IgbnVsbCBmb3IgdGhlIGxhc3QgYnJlYWtwb2ludC5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LW5leHQoc20pXG4vLyAgICBtZFxuLy8gICAgPj4gYnJlYWtwb2ludC1uZXh0KHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgbWRcbi8vICAgID4+IGJyZWFrcG9pbnQtbmV4dChzbSwgJGJyZWFrcG9pbnQtbmFtZXM6ICh4cyBzbSBtZCBsZyB4bCkpXG4vLyAgICBtZFxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtbmV4dCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludC1uYW1lczogbWFwLWtleXMoJGJyZWFrcG9pbnRzKSkge1xuICAkbjogaW5kZXgoJGJyZWFrcG9pbnQtbmFtZXMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbiA8IGxlbmd0aCgkYnJlYWtwb2ludC1uYW1lcyksIG50aCgkYnJlYWtwb2ludC1uYW1lcywgJG4gKyAxKSwgbnVsbCk7XG59XG5cbi8vIE1heGltdW0gYnJlYWtwb2ludCB3aWR0aC4gTnVsbCBmb3IgdGhlIHNtYWxsZXN0IChmaXJzdCkgYnJlYWtwb2ludC5cbi8vIFRoZSBtYXhpbXVtIHZhbHVlIGlzIHJlZHVjZWQgYnkgMC4wMnB4IHRvIHdvcmsgYXJvdW5kIHRoZSBsaW1pdGF0aW9ucyBvZlxuLy8gYG1pbi1gIGFuZCBgbWF4LWAgcHJlZml4ZXMgYW5kIHZpZXdwb3J0cyB3aXRoIGZyYWN0aW9uYWwgd2lkdGhzLlxuLy9cbi8vIFNlZSBodHRwczovL3d3dy53My5vcmcvVFIvbWVkaWFxdWVyaWVzLTQvI21xLW1pbi1tYXhcbi8vIFVzZXMgMC4wMnB4IHJhdGhlciB0aGFuIDAuMDFweCB0byB3b3JrIGFyb3VuZCBhIGN1cnJlbnQgcm91bmRpbmcgYnVnIGluIFNhZmFyaS5cdC8vIFVzZXMgMC4wMnB4IHJhdGhlciB0aGFuIDAuMDFweCB0byB3b3JrIGFyb3VuZCBhIGN1cnJlbnQgcm91bmRpbmcgYnVnIGluIFNhZmFyaS5cbi8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTc4MjYxXHQvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE3ODI2MVxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbWF4KG1kLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgNzY3Ljk4cHhcbkBmdW5jdGlvbiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzKSB7XG4gICRtYXg6IG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAkbmFtZSk7XG4gIEByZXR1cm4gaWYoJG1heCBhbmQgJG1heCA+IDAsICRtYXggLSAuMDIsIG51bGwpO1xufVxuXG4vLyBNZWRpYSBvZiBhdCBtb3N0IHRoZSBtYXhpbXVtIGJyZWFrcG9pbnQgd2lkdGguIE5vIHF1ZXJ5IGZvciB0aGUgbGFyZ2VzdCBicmVha3BvaW50LlxuLy8gTWFrZXMgdGhlIEBjb250ZW50IGFwcGx5IHRvIHRoZSBnaXZlbiBicmVha3BvaW50IGFuZCBuYXJyb3dlci5cbkBtaXhpbiBtZWRpYS1icmVha3BvaW50LWRvd24oJG5hbWUsICRicmVha3BvaW50czogJHNjcmVlbi1icmVha3BvaW50cykge1xuICAkbWF4OiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzKTtcbiAgQGlmICRtYXgge1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbWF4KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cblxuLy8gVGV4dCBEaXJlY3Rpb24gLSBsdHIgLyBydGxcbi8vXG4vLyBDU1MgZGVmYXVsdHMgdG8gdXNlIHRoZSBsdHIgY3NzLCBhbmQgYWRkcyBbZGlyPXJ0bF0gc2VsZWN0b3JzXG4vLyB0byBvdmVycmlkZSBsdHIgZGVmYXVsdHMuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBtaXhpbiBtdWx0aS1kaXIoKSB7XG4gIEBjb250ZW50O1xuXG4gIC8vICRyb290OiAjeyZ9O1xuICAvLyBAYXQtcm9vdCBbZGlyXSB7XG4gIC8vICAgI3skcm9vdH0ge1xuICAvLyAgICAgQGNvbnRlbnQ7XG4gIC8vICAgfVxuICAvLyB9XG59XG5cbkBtaXhpbiBydGwoKSB7XG4gICRyb290OiAjeyZ9O1xuXG4gICRyb290U3BsaXQ6IHN0ci1zcGxpdCgkcm9vdCwgXCIsXCIpO1xuICAkc2VsZWN0b3JzOiAje2FkZC1yb290LXNlbGVjdG9yKCRyb290LCBcIltkaXI9cnRsXVwiKX07XG4gICRzZWxlY3RvcnNTcGxpdDogc3RyLXNwbGl0KCRzZWxlY3RvcnMsIFwiLFwiKTtcblxuICAkaG9zdENvbnRleHRTZWxlY3RvcnM6ICgpO1xuICAkcmVzdFNlbGVjdG9yczogKCk7XG4gICRkaXJTZWxlY3RvcnM6ICgpO1xuXG4gIC8vIFNlbGVjdG9ycyBtdXN0IGJlIHNwbGl0IGludG8gaW5kaXZpZHVhbCBzZWxlY3RvcnMgaW4gY2FzZSB0aGUgYnJvd3NlclxuICAvLyBkb2Vzbid0IHN1cHBvcnQgYSBzcGVjaWZpYyBzZWxlY3Rvci5cbiAgLy8gRm9yIGV4YW1wbGUsIEZpcmVmb3ggYW5kIFNhZmFyaSBkb2Vzbid0IHN1cHBvcnQgYDpob3N0LWNvbnRleHQoKWAuXG4gIC8vIElmIGFuIGludmFsaWQgc2VsZWN0b3IgaXMgdXNlZCwgdGhlbiB0aGUgZW50aXJlIGdyb3VwIG9mIHNlbGVjdG9yc1xuICAvLyB3aWxsIGJlIGlnbm9yZWQuXG4gIC8vIEBsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMtMy8jZ3JvdXBpbmdcbiAgQGVhY2ggJHNlbGVjdG9yIGluICRzZWxlY3RvcnNTcGxpdCB7XG4gICAgLy8gR3JvdXAgdGhlIHNlbGVjdG9ycyBiYWNrIGludG8gYSBzaW5nbGUgc2VsZWN0b3IgdG8gb3B0aW1pemUgdGhlIG91dHB1dC5cbiAgICBAaWYgc3RyLWluZGV4KCRzZWxlY3RvciwgXCI6aG9zdC1jb250ZXh0XCIpIHtcbiAgICAgICRob3N0Q29udGV4dFNlbGVjdG9yczogYXBwZW5kKCRob3N0Q29udGV4dFNlbGVjdG9ycywgJHNlbGVjdG9yLCBjb21tYSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAvLyBHcm91cCB0aGUgc2VsZWN0b3JzIGJhY2sgaW50byBhIHNpbmdsZSBzZWxlY3RvciB0byBvcHRpbWl6ZSB0aGUgb3V0cHV0LlxuICAgICAgJHJlc3RTZWxlY3RvcnM6IGFwcGVuZCgkcmVzdFNlbGVjdG9ycywgJHNlbGVjdG9yLCBjb21tYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3VwcG9ydGVkIGJ5IENocm9tZS5cbiAgQGlmIGxlbmd0aCgkaG9zdENvbnRleHRTZWxlY3RvcnMpID4gMCB7XG4gICAgQGF0LXJvb3QgI3skaG9zdENvbnRleHRTZWxlY3RvcnN9IHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuXG4gIC8vIFN1cHBvcnRlZCBieSBhbGwgYnJvd3NlcnMuXG4gIEBpZiBsZW5ndGgoJHJlc3RTZWxlY3RvcnMpID4gMCB7XG4gICAgQGF0LXJvb3QgI3skcmVzdFNlbGVjdG9yc30ge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgYnJvd3NlciBjYW4gc3VwcG9ydCBgOmRpcigpYCwgdGhlbiBhZGQgdGhlIGA6ZGlyKClgIHNlbGVjdG9ycy5cbiAgLy8gQHN1cHBvcnRzIHNlbGVjdG9yKDpkaXIocnRsKSkgeyAvLyBAIElNUE9UQU5UIE5PVEU6IFRoaXMgaGFzIGJlZW4gcmVtb3ZlZCBiZWNhdXNlIHNlbGVjdG9yIGZ1bmN0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gY3VycmVudCBTQ1NTXG4gIC8vIEFkZGluZyA6ZGlyKCkgaW4gY2FzZSB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgYDpob3N0LWNvbnRleHQoKWAgYW5kIGRvZXMgc3VwcG9ydCBgOmRpcigpYC5cbiAgLy8gYDpob3N0LWNvbnRleHQoKWAgaXMgYWRkZWQ6XG4gIC8vIC0gdGhyb3VnaCB0aGUgYGFkZC1yb290LXNlbGVjdG9yKClgIGZ1bmN0aW9uLlxuICAvLyAtIGZpcnN0IHNvIHRoYXQgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGA6ZGlyKClgLlxuICAvLyBGb3IgZXhhbXBsZSxcbiAgLy8gLSBGaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBgOmhvc3QtY29udGV4dCgpYCwgYnV0IGRvZXMgc3VwcG9ydCBgOmRpcigpYC5cbiAgLy8gLSBTYWZhcmkgZG9lc24ndCBzdXBwb3J0IGA6aG9zdC1jb250ZXh0KClgLCBidXQgU2FmYXJpIDE2LjQrIHN1cHBvcnRzIGA6ZGlyKClgXG4gIC8vIEBsaW5rIGh0dHBzOi8vd2Via2l0Lm9yZy9ibG9nLzEzOTY2L3dlYmtpdC1mZWF0dXJlcy1pbi1zYWZhcmktMTYtNC9cbiAgQGVhY2ggJHNlbGVjdG9yIGluICRyb290U3BsaXQge1xuICAgICRkaXJTZWxlY3RvcjogXCIjeyRzZWxlY3Rvcn06ZGlyKHJ0bClcIjtcbiAgICAvLyBHcm91cCB0aGUgc2VsZWN0b3JzIGJhY2sgaW50byBhIHNpbmdsZSBzZWxlY3RvciB0byBvcHRpbWl6ZSB0aGUgb3V0cHV0LlxuICAgICRkaXJTZWxlY3RvcnM6IGFwcGVuZCgkZGlyU2VsZWN0b3JzLCAkZGlyU2VsZWN0b3IsIGNvbW1hKTtcbiAgfVxuXG4gIC8vIFN1cHBvcnRlZCBieSBGaXJlZm94LlxuICBAaWYgbGVuZ3RoKCRkaXJTZWxlY3RvcnMpID4gMCB7XG4gICAgQGF0LXJvb3QgI3skZGlyU2VsZWN0b3JzfSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbiAgLy99XG59XG5cbkBtaXhpbiBsdHIoKSB7XG4gIEBjb250ZW50O1xufVxuXG5cbi8vIFNWRyBCYWNrZ3JvdW5kIEltYWdlIE1peGluXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN2Z1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIHN2Zy1iYWNrZ3JvdW5kLWltYWdlKCRzdmcsICRmbGlwLXJ0bDogZmFsc2UpIHtcbiAgJHVybDogdXJsLWVuY29kZSgkc3ZnKTtcbiAgJHZpZXdCb3g6IHN0ci1zcGxpdChzdHItZXh0cmFjdCgkc3ZnLCBcInZpZXdCb3g9J1wiLCBcIidcIiksIFwiIFwiKTtcblxuICBAaWYgJGZsaXAtcnRsICE9IHRydWUgb3IgJHZpZXdCb3ggPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbXVsdGktZGlyKCkge1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsI3skdXJsfVwiKTtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgICR0cmFuc2Zvcm06IFwidHJhbnNmb3JtPSd0cmFuc2xhdGUoI3tudGgoJHZpZXdCb3gsIDMpfSwgMCkgc2NhbGUoLTEsIDEpJ1wiO1xuICAgICRmbGlwcGVkLXVybDogJHN2ZztcbiAgICAkZmxpcHBlZC11cmw6IHN0ci1yZXBsYWNlKCRmbGlwcGVkLXVybCwgXCI8cGF0aFwiLCBcIjxwYXRoICN7JHRyYW5zZm9ybX1cIik7XG4gICAgJGZsaXBwZWQtdXJsOiBzdHItcmVwbGFjZSgkZmxpcHBlZC11cmwsIFwiPGxpbmVcIiwgXCI8bGluZSAjeyR0cmFuc2Zvcm19XCIpO1xuICAgICRmbGlwcGVkLXVybDogc3RyLXJlcGxhY2UoJGZsaXBwZWQtdXJsLCBcIjxwb2x5Z29uXCIsIFwiPHBvbHlnb24gI3skdHJhbnNmb3JtfVwiKTtcbiAgICAkZmxpcHBlZC11cmw6IHVybC1lbmNvZGUoJGZsaXBwZWQtdXJsKTtcblxuICAgIEBpbmNsdWRlIGx0ciAoKSB7XG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwjeyR1cmx9XCIpO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwjeyRmbGlwcGVkLXVybH1cIik7XG4gICAgfVxuICB9XG59XG5cbi8vIEFkZCBwcm9wZXJ0eSBob3Jpem9udGFsXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyBAcGFyYW0ge3N0cmluZ30gJGVuZFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIHByb3BlcnR5LWhvcml6b250YWwoJHByb3AsICRzdGFydCwgJGVuZDogJHN0YXJ0KSB7XG4gIEBpZiAkc3RhcnQgPT0gMCBhbmQgJGVuZCA9PSAwIHtcbiAgICAjeyRwcm9wfS1sZWZ0OiAkc3RhcnQ7XG4gICAgI3skcHJvcH0tcmlnaHQ6ICRlbmQ7XG5cbiAgfSBAZWxzZSB7XG4gICAgLXdlYmtpdC0jeyRwcm9wfS1zdGFydDogJHN0YXJ0O1xuICAgICN7JHByb3B9LWlubGluZS1zdGFydDogJHN0YXJ0O1xuICAgIC13ZWJraXQtI3skcHJvcH0tZW5kOiAkZW5kO1xuICAgICN7JHByb3B9LWlubGluZS1lbmQ6ICRlbmQ7XG4gIH1cbn1cblxuLy8gQWRkIHByb3BlcnR5IGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICRwcm9wXG4vLyBAcGFyYW0ge3N0cmluZ30gJHRvcFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkYm90dG9tXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyBAcGFyYW0ge2Jvb2xlYW59ICRjb250ZW50IGluY2x1ZGUgY29udGVudCBvciB1c2UgZGVmYXVsdFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIHByb3BlcnR5KCRwcm9wLCAkdG9wLCAkZW5kOiAkdG9wLCAkYm90dG9tOiAkdG9wLCAkc3RhcnQ6ICRlbmQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHktaG9yaXpvbnRhbCgkcHJvcCwgJHN0YXJ0LCAkZW5kKTtcbiAgI3skcHJvcH0tdG9wOiAkdG9wO1xuICAjeyRwcm9wfS1ib3R0b206ICRib3R0b207XG59XG5cbi8vIEFkZCBwYWRkaW5nIGhvcml6b250YWxcbi8vIEBwYXJhbSB7c3RyaW5nfSAkc3RhcnRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gcGFkZGluZy1ob3Jpem9udGFsKCRzdGFydCwgJGVuZDogJHN0YXJ0KSB7XG4gIEBpbmNsdWRlIHByb3BlcnR5LWhvcml6b250YWwocGFkZGluZywgJHN0YXJ0LCAkZW5kKTtcbn1cblxuLy8gQWRkIHBhZGRpbmcgZm9yIGFsbCBkaXJlY3Rpb25zXG4vLyBAcGFyYW0ge3N0cmluZ30gJHRvcFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkYm90dG9tXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gcGFkZGluZygkdG9wLCAkZW5kOiAkdG9wLCAkYm90dG9tOiAkdG9wLCAkc3RhcnQ6ICRlbmQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHkocGFkZGluZywgJHRvcCwgJGVuZCwgJGJvdHRvbSwgJHN0YXJ0KTtcbn1cblxuLy8gQWRkIG1hcmdpbiBob3Jpem9udGFsXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyBAcGFyYW0ge3N0cmluZ30gJGVuZFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIG1hcmdpbi1ob3Jpem9udGFsKCRzdGFydCwgJGVuZDogJHN0YXJ0KSB7XG4gIEBpbmNsdWRlIHByb3BlcnR5LWhvcml6b250YWwobWFyZ2luLCAkc3RhcnQsICRlbmQpO1xufVxuXG4vLyBBZGQgbWFyZ2luIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICR0b3Bcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyBAcGFyYW0ge3N0cmluZ30gJGJvdHRvbVxuLy8gQHBhcmFtIHtzdHJpbmd9ICRzdGFydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIG1hcmdpbigkdG9wLCAkZW5kOiAkdG9wLCAkYm90dG9tOiAkdG9wLCAkc3RhcnQ6ICRlbmQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHkobWFyZ2luLCAkdG9wLCAkZW5kLCAkYm90dG9tLCAkc3RhcnQpO1xufVxuXG4vLyBBZGQgcG9zaXRpb24gaG9yaXpvbnRhbFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRzdGFydCAtIGFtb3VudCB0byBwb3NpdGlvbiBzdGFydFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmQgLSBhbW91bnQgdG8gbGVmdDogMDsgZW5kXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gcG9zaXRpb24taG9yaXpvbnRhbCgkc3RhcnQ6IG51bGwsICRlbmQ6IG51bGwpIHtcbiAgQGlmICRzdGFydCA9PSAkZW5kIHtcbiAgICBAaW5jbHVkZSBtdWx0aS1kaXIoKSB7XG4gICAgICBsZWZ0OiAkc3RhcnQ7XG4gICAgICByaWdodDogJGVuZDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBhdC1yb290IHtcbiAgICAgIEBzdXBwb3J0cyAoaW5zZXQtaW5saW5lLXN0YXJ0OiAwKSB7XG4gICAgICAgICYge1xuICAgICAgICAgIGluc2V0LWlubGluZS1zdGFydDogJHN0YXJ0O1xuICAgICAgICAgIGluc2V0LWlubGluZS1lbmQ6ICRlbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPIEZXLTM3NjZcbiAgICBAYXQtcm9vdCB7XG4gICAgICBAc3VwcG9ydHMgbm90IChpbnNldC1pbmxpbmUtc3RhcnQ6IDApIHtcbiAgICAgICAgJiB7XG4gICAgICAgICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgICAgICAgbGVmdDogJHN0YXJ0O1xuICAgICAgICAgICAgcmlnaHQ6ICRlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIEBpbmNsdWRlIHJ0bCgpIHtcbiAgICAgICAgICAgIGxlZnQ6IHVuc2V0O1xuICAgICAgICAgICAgcmlnaHQ6IHVuc2V0O1xuXG4gICAgICAgICAgICBsZWZ0OiAkZW5kO1xuICAgICAgICAgICAgcmlnaHQ6ICRzdGFydDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQWRkIHBvc2l0aW9uIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICR0b3Bcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyBAcGFyYW0ge3N0cmluZ30gJGJvdHRvbVxuLy8gQHBhcmFtIHtzdHJpbmd9ICRzdGFydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIHBvc2l0aW9uKCR0b3A6IG51bGwsICRlbmQ6IG51bGwsICRib3R0b206IG51bGwsICRzdGFydDogbnVsbCkge1xuICBAaW5jbHVkZSBwb3NpdGlvbi1ob3Jpem9udGFsKCRzdGFydCwgJGVuZCk7XG4gIHRvcDogJHRvcDtcbiAgYm90dG9tOiAkYm90dG9tO1xufVxuXG4vLyBBZGQgYm9yZGVyIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICR0b3Bcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyBAcGFyYW0ge3N0cmluZ30gJGJvdHRvbVxuLy8gQHBhcmFtIHtzdHJpbmd9ICRzdGFydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIGJvcmRlcigkdG9wLCAkZW5kOiAkdG9wLCAkYm90dG9tOiAkdG9wLCAkc3RhcnQ6ICRlbmQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHkoYm9yZGVyLCAkdG9wLCAkZW5kLCAkYm90dG9tLCAkc3RhcnQpO1xufVxuXG4vLyBBZGQgYm9yZGVyIHJhZGl1cyBmb3IgYWxsIGRpcmVjdGlvbnNcbi8vIEBwYXJhbSB7c3RyaW5nfSAkdG9wLXN0YXJ0XG4vLyBAcGFyYW0ge3N0cmluZ30gJHRvcC1lbmRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkYm90dG9tLWVuZFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRib3R0b20tc3RhcnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBtaXhpbiBib3JkZXItcmFkaXVzKCR0b3Atc3RhcnQsICR0b3AtZW5kOiAkdG9wLXN0YXJ0LCAkYm90dG9tLWVuZDogJHRvcC1zdGFydCwgJGJvdHRvbS1zdGFydDogJHRvcC1lbmQpIHtcbiAgQGlmICR0b3Atc3RhcnQgPT0gJHRvcC1lbmQgYW5kICR0b3Atc3RhcnQgPT0gJGJvdHRvbS1lbmQgYW5kICR0b3Atc3RhcnQgPT0gJGJvdHRvbS1zdGFydCB7XG4gICAgQGluY2x1ZGUgbXVsdGktZGlyKCkge1xuICAgICAgYm9yZGVyLXJhZGl1czogJHRvcC1zdGFydDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIGx0cigpIHtcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR0b3Atc3RhcnQ7XG4gICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJHRvcC1lbmQ7XG4gICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogJGJvdHRvbS1lbmQ7XG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAkYm90dG9tLXN0YXJ0O1xuICAgIH1cblxuICAgIEBpbmNsdWRlIHJ0bCgpIHtcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR0b3AtZW5kO1xuICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICR0b3Atc3RhcnQ7XG4gICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogJGJvdHRvbS1zdGFydDtcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRib3R0b20tZW5kO1xuICAgIH1cbiAgfVxufVxuXG4vLyBBZGQgZGlyZWN0aW9uIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICRkaXIgLSBEaXJlY3Rpb24gb24gTFRSXG5AbWl4aW4gZGlyZWN0aW9uKCRkaXIpIHtcbiAgJG90aGVyLWRpcjogbnVsbDtcblxuICBAaWYgJGRpciA9PSBsdHIge1xuICAgICRvdGhlci1kaXI6IHJ0bDtcbiAgfSBAZWxzZSB7XG4gICAgJG90aGVyLWRpcjogbHRyO1xuICB9XG5cbiAgQGluY2x1ZGUgbHRyKCkge1xuICAgIGRpcmVjdGlvbjogJGRpcjtcbiAgfVxuICBAaW5jbHVkZSBydGwoKSB7XG4gICAgZGlyZWN0aW9uOiAkb3RoZXItZGlyO1xuICB9XG59XG5cbi8vIEFkZCBmbG9hdCBmb3IgYWxsIGRpcmVjdGlvbnNcbi8vIEBwYXJhbSB7c3RyaW5nfSAkc2lkZVxuLy8gQHBhcmFtIHtzdHJpbmd9ICRkZWNvcmF0b3IgLSAhaW1wb3J0YW50XG5AbWl4aW4gZmxvYXQoJHNpZGUsICRkZWNvcmF0b3I6IG51bGwpIHtcbiAgQGlmICRzaWRlID09IHN0YXJ0IHtcbiAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICBmbG9hdDogbGVmdCAkZGVjb3JhdG9yO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICBmbG9hdDogcmlnaHQgJGRlY29yYXRvcjtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJHNpZGUgPT0gZW5kIHtcbiAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICBmbG9hdDogcmlnaHQgJGRlY29yYXRvcjtcbiAgICB9XG4gICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgZmxvYXQ6IGxlZnQgJGRlY29yYXRvcjtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIG11bHRpLWRpcigpIHtcbiAgICAgIGZsb2F0OiAkc2lkZSAkZGVjb3JhdG9yO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gYmFja2dyb3VuZC1wb3NpdGlvbigkaG9yaXpvbnRhbCwgJGhvcml6b250YWwtYW1vdW50OiBudWxsLCAkdmVydGljYWw6IG51bGwsICR2ZXJ0aWNhbC1hbW91bnQ6IG51bGwpIHtcbiAgQGlmICRob3Jpem9udGFsID09IHN0YXJ0IG9yICRob3Jpem9udGFsID09IGVuZCB7XG4gICAgJGhvcml6b250YWwtbHRyOiBudWxsO1xuICAgICRob3Jpem9udGFsLXJ0bDogbnVsbDtcbiAgICBAaWYgJGhvcml6b250YWwgPT0gc3RhcnQge1xuICAgICAgJGhvcml6b250YWwtbHRyOiBsZWZ0O1xuICAgICAgJGhvcml6b250YWwtcnRsOiByaWdodDtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRob3Jpem9udGFsLWx0cjogcmlnaHQ7XG4gICAgICAkaG9yaXpvbnRhbC1ydGw6IGxlZnQ7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogJGhvcml6b250YWwtbHRyICRob3Jpem9udGFsLWFtb3VudCAkdmVydGljYWwgJHZlcnRpY2FsLWFtb3VudDtcbiAgICB9XG4gICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogJGhvcml6b250YWwtcnRsICRob3Jpem9udGFsLWFtb3VudCAkdmVydGljYWwgJHZlcnRpY2FsLWFtb3VudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIG11bHRpLWRpcigpIHtcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246ICRob3Jpem9udGFsICRob3Jpem9udGFsLWFtb3VudCAkdmVydGljYWwgJHZlcnRpY2FsLWFtb3VudDtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHRyYW5zZm9ybS1vcmlnaW4oJHgtYXhpcywgJHktYXhpczogbnVsbCkge1xuICBAaWYgJHgtYXhpcyA9PSBzdGFydCB7XG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCAkeS1heGlzO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCAkeS1heGlzO1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkeC1heGlzID09IGVuZCB7XG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgJHktYXhpcztcbiAgICB9XG4gICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCAkeS1heGlzO1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkeC1heGlzID09IGxlZnQgb3IgJHgtYXhpcyA9PSByaWdodCB7XG4gICAgQGluY2x1ZGUgbXVsdGktZGlyKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogJHgtYXhpcyAkeS1heGlzO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogJHgtYXhpcyAkeS1heGlzO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjYWxjKDEwMCUgLSAjeyR4LWF4aXN9KSAkeS1heGlzO1xuICAgIH1cbiAgfVxufVxuXG4vLyBBZGQgdHJhbnNmb3JtIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICR0cmFuc2Zvcm1zIC0gY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgdHJhbnNmb3Jtc1xuQG1peGluIHRyYW5zZm9ybSgkdHJhbnNmb3Jtcy4uLikge1xuICAkZXh0cmE6IG51bGw7XG5cbiAgJHg6IG51bGw7XG4gICRsdHItdHJhbnNsYXRlOiBudWxsO1xuICAkcnRsLXRyYW5zbGF0ZTogbnVsbDtcblxuICBAZWFjaCAkdHJhbnNmb3JtIGluICR0cmFuc2Zvcm1zIHtcbiAgICBAaWYgKHN0ci1pbmRleCgkdHJhbnNmb3JtLCB0cmFuc2xhdGUzZCkpIHtcbiAgICAgICR0cmFuc2Zvcm06IHN0ci1yZXBsYWNlKCR0cmFuc2Zvcm0sICd0cmFuc2xhdGUzZCgnKTtcbiAgICAgICR0cmFuc2Zvcm06IHN0ci1yZXBsYWNlKCR0cmFuc2Zvcm0sICcpJyk7XG5cbiAgICAgICRjb29yZGluYXRlczogc3RyLXNwbGl0KCR0cmFuc2Zvcm0sICcsJyk7XG5cbiAgICAgICR4OiBudGgoJGNvb3JkaW5hdGVzLCAxKTtcbiAgICAgICR5OiBudGgoJGNvb3JkaW5hdGVzLCAyKTtcbiAgICAgICR6OiBudGgoJGNvb3JkaW5hdGVzLCAzKTtcblxuICAgICAgJGx0ci10cmFuc2xhdGU6IHRyYW5zbGF0ZTNkKCR4LCAkeSwgJHopO1xuICAgICAgJHJ0bC10cmFuc2xhdGU6IHRyYW5zbGF0ZTNkKGNhbGMoLTEgKiAjeyR4fSksICR5LCAkeik7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAaWYgJGV4dHJhID09IG51bGwge1xuICAgICAgICAkZXh0cmE6ICR0cmFuc2Zvcm07XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgJGV4dHJhOiAkZXh0cmEgJHRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAaWYgJHggPT0gJzAnIG9yICR4ID09IG51bGwge1xuICAgIEBpbmNsdWRlIG11bHRpLWRpcigpIHtcbiAgICAgIHRyYW5zZm9ybTogJGx0ci10cmFuc2xhdGUgJGV4dHJhO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgdHJhbnNmb3JtOiAkbHRyLXRyYW5zbGF0ZSAkZXh0cmE7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgdHJhbnNmb3JtOiAkcnRsLXRyYW5zbGF0ZSAkZXh0cmE7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIEltcG9ydGVkIGlvbmljIG1peGlucyBmb3IgU0NTUyBmcm9tIGRpZmZlcmVudCBjb21wb25lbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFeHRyYWN0ZWQgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL2NvbXBvbmVudHMvZ3JpZC9ncmlkLm1peGlucy5zY3NzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvY29yZS9zcmMvY29tcG9uZW50cy9pdGVtL2l0ZW0ubWl4aW5zLnNjc3NcbiAqL1xuXG4vLyBSZXNwb25zaXZlIE1peGluc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4vLyBDcmVhdGVzIGEgZml4ZWQgd2lkdGggZm9yIHRoZSBncmlkIGJhc2VkIG9uIHRoZSBzY3JlZW4gc2l6ZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBtaXhpbiBtYWtlLWdyaWQtd2lkdGhzKCR3aWR0aHM6ICRncmlkLXdpZHRocywgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzKSB7XG4gIEBlYWNoICRicmVha3BvaW50LCAkd2lkdGggaW4gJHdpZHRocyB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC11cCgkYnJlYWtwb2ludCwgJGJyZWFrcG9pbnRzKSB7XG4gICAgICB3aWR0aDogJHdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuXG4vLyBBZGRzIHBhZGRpbmcgdG8gdGhlIGVsZW1lbnQgYmFzZWQgb24gYnJlYWtwb2ludHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AbWl4aW4gbWFrZS1icmVha3BvaW50LXBhZGRpbmcoJHBhZGRpbmdzKSB7XG4gIEBlYWNoICRicmVha3BvaW50IGluIG1hcC1rZXlzKCRwYWRkaW5ncykge1xuICAgIEBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtdXAoJGJyZWFrcG9pbnQpIHtcbiAgICAgICRwYWRkaW5nOiBtYXAtZ2V0KCRwYWRkaW5ncywgJGJyZWFrcG9pbnQpO1xuXG4gICAgICBAaW5jbHVkZSBwYWRkaW5nKCRwYWRkaW5nKTtcbiAgICB9XG4gIH1cbn1cblxuXG4vLyBJdGVtIE1peGluc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQG1peGluIGl0ZW0tcHVzaC1zdmctdXJsKCRmaWxsKSB7XG4gICRpdGVtLWRldGFpbC1wdXNoLXN2ZzogXCI8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDEyIDIwJz48cGF0aCBkPSdNMiwyMGwtMi0ybDgtOEwwLDJsMi0ybDEwLDEwTDIsMjB6JyBmaWxsPScjeyRmaWxsfScvPjwvc3ZnPlwiO1xuXG4gIEBpbmNsdWRlIHN2Zy1iYWNrZ3JvdW5kLWltYWdlKCRpdGVtLWRldGFpbC1wdXNoLXN2ZywgdHJ1ZSk7XG59XG4iLCJAdXNlIFwic2FzczptYXRoXCIgYXMgbWF0aDtcblxuLyoqXG4gKiBBcHAgY3VzdG9tIG1peGlucyBmb3IgU0NTU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUGxhY2UgaGVyZSBvdXIgY3VzdG9tIG1peGlucy5cbiAqL1xuXG4vLyBNaXhlcyBhIGNvbG9yIHdpdGggYmxhY2sgdG8gY3JlYXRlIGl0cyBzaGFkZS5cbi8vIERlZmF1bHQgdG8gYm9vdHN0cmFwIGxldmVsIDYuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIGdldC1jb2xvci1zaGFkZS1wZXJjZW50KCRjb2xvciwgJHBlcmNlbnQ6IDQ4JSkge1xuICAgIEByZXR1cm4gbWl4KCMwMDAsICRjb2xvciwgJHBlcmNlbnQpO1xufVxuXG4vLyBNaXhlcyBhIGNvbG9yIHdpdGggd2hpdGUgdG8gY3JlYXRlIGl0cyB0aW50LlxuLy8gRGVmYXVsdCB0byBib290c3RyYXAgbGV2ZWwgLTEwLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBnZXQtY29sb3ItdGludC1wZXJjZW50KCRjb2xvciwgJHBlcmNlbnQ6IDgwJSkge1xuICAgIEByZXR1cm4gbWl4KCNmZmYsICRjb2xvciwgJHBlcmNlbnQpO1xufVxuXG4vLyBJb25pYyBDb2xvcnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBHZW5lcmF0ZXMgdGhlIGNvbG9yIGNsYXNzZXMgYW5kIHZhcmlhYmxlcyBiYXNlZCBvbiB0aGVcbi8vIGNvbG9ycyBtYXBcblxuQG1peGluIGdlbmVyYXRlLWNvbG9yKCRjb2xvci1uYW1lLCAkY29sb3JzLCAkdGhlbWUpIHtcbiAgICAkY29sb3ItdGhlbWVzOiBtYXAtZ2V0KCRjb2xvcnMsICRjb2xvci1uYW1lKTtcbiAgICAkYmFzZTogbWFwLWdldCgkY29sb3ItdGhlbWVzLCAkdGhlbWUpO1xuXG4gICAgQGlmICR0aGVtZSA9PSAnZGFyaycge1xuICAgICAgICAkYmFzZTogbWl4KG1hcC1nZXQoJGNvbG9yLXRoZW1lcywgJ2xpZ2h0JyksIHdoaXRlLCA4MCUpICFkZWZhdWx0O1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGdlbmVyYXRlLWNvbG9yLXZhcmlhbnRzKCRjb2xvci1uYW1lLCAkYmFzZSk7XG59XG5cbkBtaXhpbiBnZW5lcmF0ZS1jb2xvci12YXJpYW50cygkY29sb3ItbmFtZSwgJGJhc2UpIHtcbiAgICAkY29udHJhc3Q6IGdldF9jb250cmFzdF9jb2xvcigkYmFzZSk7XG4gICAgJHNoYWRlOiBnZXQtY29sb3Itc2hhZGUtcGVyY2VudCgkYmFzZSk7XG4gICAgJHRpbnQ6IGdldC1jb2xvci10aW50LXBlcmNlbnQoJGJhc2UpO1xuXG4gICAgLS0jeyRjb2xvci1uYW1lfTogI3skYmFzZX07XG4gICAgLS0jeyRjb2xvci1uYW1lfS1zaGFkZTogI3skc2hhZGV9O1xuICAgIC0tI3skY29sb3ItbmFtZX0tdGludDogI3skdGludH07XG4gICAgLS0jeyRjb2xvci1uYW1lfS1jb250cmFzdDogI3skY29udHJhc3R9O1xuXG4gICAgLy8gSW50ZXJuYWwgaW9uaWMgdXNlIG9ubHkuXG4gICAgLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX06IHZhcigtLSN7JGNvbG9yLW5hbWV9KTtcbiAgICAtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS1iYXNlOiB2YXIoLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0pO1xuICAgIC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LXJnYjogI3tjb2xvci10by1yZ2ItbGlzdCgkYmFzZSl9O1xuICAgIC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LWNvbnRyYXN0OiAjeyRjb250cmFzdH07XG4gICAgLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tY29udHJhc3QtcmdiOiAje2NvbG9yLXRvLXJnYi1saXN0KCRjb250cmFzdCl9O1xuICAgIC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LXNoYWRlOiAjeyRzaGFkZX07XG4gICAgLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tdGludDogI3skdGludH07XG5cbiAgICAuaW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9IHtcbiAgICAgICAgLS1pb24tY29sb3I6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfSk7XG4gICAgICAgIC0taW9uLWNvbG9yLWJhc2U6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS1iYXNlKTtcbiAgICAgICAgLS1pb24tY29sb3ItcmdiOiB2YXIoLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tcmdiKTtcbiAgICAgICAgLS1pb24tY29sb3ItY29udHJhc3Q6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS1jb250cmFzdCk7XG4gICAgICAgIC0taW9uLWNvbG9yLWNvbnRyYXN0LXJnYjogdmFyKC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LWNvbnRyYXN0LXJnYik7XG4gICAgICAgIC0taW9uLWNvbG9yLXNoYWRlOiB2YXIoLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tc2hhZGUpO1xuICAgICAgICAtLWlvbi1jb2xvci10aW50OiB2YXIoLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tdGludCk7XG4gICAgfVxufVxuXG5AbWl4aW4gY29yZS1mb2N1cygpIHtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAmOjphZnRlciB7XG4gICAgICAgIEBpbmNsdWRlIHBvc2l0aW9uKDAsIDAsIDAsIDApO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIEBpbmNsdWRlIGNvcmUtZm9jdXMtc3R5bGUoKTtcbiAgICB9XG59XG5cbkBtaXhpbiBjb3JlLWZvY3VzLXN0eWxlKCkge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCB2YXIoLS1hMTF5LWZvY3VzLXdpZHRoKSAxcHggdmFyKC0tYTExeS1mb2N1cy1jb2xvcik7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7XG4gICAgLy8gVGhpY2tlciBvcHRpb246XG4gICAgLy8gYm9yZGVyOiB2YXIoLS1hMTF5LWZvY3VzLXdpZHRoKSBzb2xpZCB2YXIoLS1hMTF5LWZvY3VzLWNvbG9yKTtcbn1cblxuQG1peGluIGNvcmUtdHJhbnNpdGlvbigkcHJvcGVydGllczogYWxsLCAkZHVyYXRpb246IDUwMG1zLCAkdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dCkge1xuICAgICR0cmFuc2l0aW9uczogKCk7XG4gICAgQGVhY2ggJHByb3BlcnR5IGluICRwcm9wZXJ0aWVzIHtcbiAgICAgICR0cmFuc2l0aW9uczogYXBwZW5kKCR0cmFuc2l0aW9ucywgJHByb3BlcnR5ICRkdXJhdGlvbiAkdGltaW5nLWZ1bmN0aW9uLCBjb21tYSk7XG4gICAgfVxuXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAkdHJhbnNpdGlvbnM7XG4gICAgdHJhbnNpdGlvbjogJHRyYW5zaXRpb25zO1xufVxuXG5AbWl4aW4gc3Itb25seSgpIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDFweDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogLTFweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBib3JkZXI6IDA7XG59XG5cbi8qKlxuICogU2FtZSBhcyBpdGVtLXB1c2gtc3ZnLXVybCBidXQgYWRtaXRzIGZsaXAtcnRsXG4gKi9cbkBtaXhpbiBwdXNoLWFycm93LWNvbG9yKCRmaWxsOiA2MjYyNjIsICRmbGlwLXJ0bDogZmFsc2UpIHtcbiAgICAkaXRlbS1kZXRhaWwtcHVzaC1zdmc6IFwiPHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMiAyMCc+PHBhdGggZD0nTTIsMjBsLTItMmw4LThMMCwybDItMmwxMCwxMEwyLDIweicgZmlsbD0nI3skZmlsbH0nLz48L3N2Zz5cIjtcblxuICAgIEBpbmNsdWRlIHN2Zy1iYWNrZ3JvdW5kLWltYWdlKCRpdGVtLWRldGFpbC1wdXNoLXN2ZywgJGZsaXAtcnRsKTtcbn1cblxuQG1peGluIGJvcmRlci1zdGFydCgkcHgsICR0eXBlOiBudWxsLCAkY29sb3I6IG51bGwpIHtcbiAgICBAaW5jbHVkZSBwcm9wZXJ0eS1ob3Jpem9udGFsKGJvcmRlciwgJHB4ICR0eXBlICRjb2xvciwgbnVsbCk7XG59XG5cbkBtaXhpbiBib3JkZXItZW5kKCRweCwgJHR5cGU6IG51bGwsICRjb2xvcjogbnVsbCkge1xuICAgIEBpbmNsdWRlIHByb3BlcnR5LWhvcml6b250YWwoYm9yZGVyLCBudWxsLCAkcHggJHR5cGUgJGNvbG9yKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1ib3JkZXItc3RhcnQoJHB4LCAkdHlwZSwgJGNvbG9yKSB7XG4gICAgJHNhZmUtYXJlYS1wb3NpdGlvbjogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLWxlZnQpICsgI3skcHh9KTtcblxuICAgIEBpbmNsdWRlIGJvcmRlci1zdGFydCgkc2FmZS1hcmVhLXBvc2l0aW9uLCAkdHlwZSwgJGNvbG9yKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1ib3JkZXItZW5kKCRweCwgJHR5cGUsICRjb2xvcikge1xuICAgICRzYWZlLWFyZWEtcG9zaXRpb246IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCkgKyAjeyRweH0pO1xuXG4gICAgQGluY2x1ZGUgYm9yZGVyLWVuZCgkc2FmZS1hcmVhLXBvc2l0aW9uLCAkdHlwZSwgJGNvbG9yKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1tYXJnaW4taG9yaXpvbnRhbCgkc3RhcnQsICRlbmQ6ICRzdGFydCkge1xuICAgICRzYWZlLWFyZWEtZW5kOiBudWxsO1xuICAgICRzYWZlLWFyZWEtc3RhcnQ6IG51bGw7XG5cbiAgICBAaWYgKCRlbmQpIHtcbiAgICAgICAgJHNhZmUtYXJlYS1lbmQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCkgKyAjeyRlbmR9KTtcbiAgICB9XG4gICAgQGlmICgkc3RhcnQpIHtcbiAgICAgICAgJHNhZmUtYXJlYS1zdGFydDogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLWxlZnQpICsgI3skc3RhcnR9KTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBtYXJnaW4taG9yaXpvbnRhbCgkc2FmZS1hcmVhLXN0YXJ0LCAkc2FmZS1hcmVhLWVuZCk7XG59XG5cbkBtaXhpbiBzYWZlLWFyZWEtbWFyZ2luLXN0YXJ0KCRzdGFydCwgJGVuZCkge1xuICAgICRzYWZlLWFyZWEtc3RhcnQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0KSArICN7JHN0YXJ0fSk7XG5cbiAgICBAaW5jbHVkZSBtYXJnaW4taG9yaXpvbnRhbCgkc2FmZS1hcmVhLXN0YXJ0LCAkZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1tYXJnaW4tZW5kKCRzdGFydCwgJGVuZCkge1xuICAgICRzYWZlLWFyZWEtZW5kOiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtcmlnaHQpICsgI3skZW5kfSk7XG5cbiAgICBAaW5jbHVkZSBtYXJnaW4taG9yaXpvbnRhbCgkc3RhcnQsICRzYWZlLWFyZWEtZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1wYWRkaW5nLWhvcml6b250YWwoJHN0YXJ0LCAkZW5kOiAkc3RhcnQpIHtcbiAgICAkc2FmZS1hcmVhLWVuZDogbnVsbDtcbiAgICAkc2FmZS1hcmVhLXN0YXJ0OiBudWxsO1xuXG4gICAgQGlmICgkZW5kKSB7XG4gICAgICAgICRzYWZlLWFyZWEtZW5kOiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtcmlnaHQpICsgI3skZW5kfSk7XG4gICAgfVxuICAgIEBpZiAoJHN0YXJ0KSB7XG4gICAgICAgICRzYWZlLWFyZWEtc3RhcnQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0KSArICN7JHN0YXJ0fSk7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgcGFkZGluZy1ob3Jpem9udGFsKCRzYWZlLWFyZWEtc3RhcnQsICRzYWZlLWFyZWEtZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1wYWRkaW5nLXN0YXJ0KCRzdGFydCwgJGVuZCkge1xuICAgICRzYWZlLWFyZWEtc3RhcnQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0KSArICN7JHN0YXJ0fSk7XG5cbiAgICBAaW5jbHVkZSBwYWRkaW5nLWhvcml6b250YWwoJHNhZmUtYXJlYS1zdGFydCwgJGVuZCk7XG59XG5cbkBtaXhpbiBzYWZlLWFyZWEtcGFkZGluZy1lbmQoJHN0YXJ0LCAkZW5kKSB7XG4gICAgJHNhZmUtYXJlYS1lbmQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCkgKyAjeyRlbmR9KTtcblxuICAgIEBpbmNsdWRlIHBhZGRpbmctaG9yaXpvbnRhbCgkc3RhcnQsICRzYWZlLWFyZWEtZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1wb3NpdGlvbigkdG9wOiBudWxsLCAkZW5kOiBudWxsLCAkYm90dG9tOiBudWxsLCAkc3RhcnQ6IG51bGwpIHtcbiAgICAkc2FmZS1hcmVhLXN0YXJ0OiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtbGVmdCkgKyAjeyRzdGFydH0pO1xuICAgICRzYWZlLWFyZWEtZW5kOiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtcmlnaHQpICsgI3skZW5kfSk7XG5cbiAgICBAaW5jbHVkZSBwb3NpdGlvbigkdG9wLCAkc2FmZS1hcmVhLWVuZCwgJGJvdHRvbSwgJHNhZmUtYXJlYS1zdGFydCk7XG59XG5cbkBtaXhpbiBjb3JlLWhlYWRpbmdzKCkge1xuICAgIGgxIHtcbiAgICAgICAgZm9udC1zaXplOiAyNnB4O1xuICAgIH1cbiAgICBoMiwgLml0ZW0taGVhZGluZyB7XG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICB9XG4gICAgaDMge1xuICAgICAgICBmb250LXNpemU6IDIycHg7XG4gICAgfVxuICAgIGg0IHtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgIH1cbiAgICBoNSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICB9XG4gICAgaDYge1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxufVxuXG5AbWl4aW4gZGFya21vZGUoKSB7XG4gICAgJHJvb3Q6ICN7Jn07XG5cbiAgICBAYXQtcm9vdCAje2FkZC1yb290LXNlbGVjdG9yKCRyb290LCBcImh0bWwuZGFya1wiKX0ge1xuICAgICAgICBAY29udGVudDtcbiAgICB9XG59XG5cbkBtaXhpbiBob3Jpem9udGFsX3Njcm9sbF9pdGVtKCR3aWR0aCwgJG1pbi13aWR0aCwgJG1heC13aWR0aCkge1xuICAgIGZsZXg6IDAgMCAkd2lkdGg7XG4gICAgbWluLXdpZHRoOiAkbWluLXdpZHRoO1xuICAgIG1heC13aWR0aDogJG1heC13aWR0aDtcbiAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgaW9uLWNhcmQge1xuICAgICAgICAtLXZlcnRpY2FsLW1hcmdpbjogMTBweDtcbiAgICAgICAgLS1ob3Jpem9udGFsLW1hcmdpbjogMTBweDtcblxuICAgICAgICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0taG9yaXpvbnRhbC1tYXJnaW4pIC0gdmFyKC0taG9yaXpvbnRhbC1tYXJnaW4pKTtcbiAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSB2YXIoLS12ZXJ0aWNhbC1tYXJnaW4pIC0gdmFyKC0tdmVydGljYWwtbWFyZ2luKSk7XG4gICAgICAgIG1hcmdpbjogdmFyKC0tdmVydGljYWwtbWFyZ2luKSB2YXIoLS1ob3Jpem9udGFsLW1hcmdpbik7XG5cbiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDM2MHB4KSB7XG4gICAgICAgICAgICAtLWhvcml6b250YWwtbWFyZ2luOiA2cHg7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIENvbG9yIG1peGlucy5cbkBmdW5jdGlvbiBnZXRfYnJpZ2h0bmVzcygkY29sb3IpIHtcbiAgICBAcmV0dXJuIG1hdGguZGl2KHJlZCgkY29sb3IpICsgZ3JlZW4oJGNvbG9yKSArIGJsdWUoJGNvbG9yKSwgMyk7XG59XG5cbi8vIEdldCB0aGUgYmV0dGVyIGNvbG9yIGNvbnRyYXN0IHVzaW5nIFdDQUcgYWxnb3J5dGhtLlxuQGZ1bmN0aW9uIGdldF9jb250cmFzdF9jb2xvcigkY29sb3IpIHtcbiAgICAkbHVtaWFuY2U6IGx1bWluYW5jZSgkY29sb3IpO1xuXG4gICAgLy8gV2hpdGUgbHVtaWFuY2UgaXMgMS5cbiAgICAkd2hpdGVDb250cmFzdDogbWF0aC5kaXYoJGx1bWlhbmNlICsgMC4wNSwgMSArIDAuMDUpO1xuICAgIC8vIFdoaXRlIGx1bWlhbmNlIGlzIDAuXG4gICAgJGJsYWNrQ29udHJhc3Q6IG1hdGguZGl2KDAuMDUsICRsdW1pYW5jZSArIDAuMDUpO1xuXG4gICAgQHJldHVybiBpZigkd2hpdGVDb250cmFzdCA8ICRibGFja0NvbnRyYXN0LCB3aGl0ZSwgYmxhY2spO1xufVxuXG4vLyBDb2xvciBjb250cmFzdCB1c2luZyB5aXEgYXByb3hpbWF0aW9uIHdpdGggMTUwIHRocmVzaG9sZC5cbkBmdW5jdGlvbiBnZXRfY29udHJhc3RfY29sb3JfeWlxKCRjb2xvciwgJGRhcms6IGJsYWNrLCAkbGlnaHQ6IHdoaXRlKSB7XG4gICAgJHI6IHJlZCgkY29sb3IpO1xuICAgICRnOiBncmVlbigkY29sb3IpO1xuICAgICRiOiBibHVlKCRjb2xvcik7XG5cbiAgICAkeWlxOiBtYXRoLmRpdigoJHIgKiAyOTkpICsgKCRnICogNTg3KSArICgkYiAqIDExNCksIDEwMDApO1xuXG4gICAgQHJldHVybiBpZigkeWlxID49IDEyOCwgJGRhcmssICRsaWdodCk7XG59XG5cbi8vIFdDQUcgY29udHJhc3QgYWxnb3JpdGhtXG5AZnVuY3Rpb24gY2hlY2stY29udHJhc3QoJGZvcmVncm91bmQsICRiYWNrZ3JvdW5kKSB7XG4gICAgJGZvcmVncm91bmRMdW1pYW5jZTogbHVtaW5hbmNlKCRmb3JlZ3JvdW5kKTtcbiAgICAkYmFja2dyb3VuZEx1bWluYW5jZTogbHVtaW5hbmNlKCRiYWNrZ3JvdW5kKTtcblxuICAgIEBpZiAoJGJhY2tncm91bmRMdW1pbmFuY2UgPCAkZm9yZWdyb3VuZEx1bWlhbmNlKSB7XG4gICAgICAgIEByZXR1cm4gbWF0aC5kaXYoJGJhY2tncm91bmRMdW1pbmFuY2UgKyAwLjA1LCAkZm9yZWdyb3VuZEx1bWlhbmNlICsgMC4wNSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAgIEByZXR1cm4gbWF0aC5kaXYoJGZvcmVncm91bmRMdW1pYW5jZSArIDAuMDUsICRiYWNrZ3JvdW5kTHVtaW5hbmNlICsgMC4wNSk7XG4gICAgfVxufVxuXG5AZnVuY3Rpb24gbHVtaW5hbmNlKCRjb2xvcikge1xuICAgICRyOiByZWQoJGNvbG9yKTtcbiAgICAkZzogZ3JlZW4oJGNvbG9yKTtcbiAgICAkYjogYmx1ZSgkY29sb3IpO1xuXG4gICAgJHI6IGNvbXBvbmVudC1sdW1pbmFuY2UoJHIpO1xuICAgICRnOiBjb21wb25lbnQtbHVtaW5hbmNlKCRnKTtcbiAgICAkYjogY29tcG9uZW50LWx1bWluYW5jZSgkYik7XG5cbiAgICBAcmV0dXJuICRyICogMC4yMTI2ICsgJGcgKiAwLjcxNTIgKyAkYiAqIDAuMDcyMjtcbn1cblxuQGZ1bmN0aW9uIGNvbXBvbmVudC1sdW1pbmFuY2UoJHZhbHVlKSB7XG4gICAgJHZhbHVlOiBtYXRoLmRpdigkdmFsdWUsIDI1NSk7XG5cbiAgICBAaWYgKCR2YWx1ZSA8PSAwLjAzOTI4KSB7XG4gICAgICAgIEByZXR1cm4gbWF0aC5kaXYoJHZhbHVlLCAxMi45Mik7XG4gICAgfSBAZWxzZSB7XG4gICAgICAgIEByZXR1cm4gbWF0aC5wb3cobWF0aC5kaXYoJHZhbHVlICsgMC4wNTUsIDEuMDU1KSwgMi40KTtcbiAgICB9XG59XG4iLCIvKlxuICogQXBwIEN1c3RvbSBBcHAgdmFyaWFibGVzIFNDU1NcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBsYWNlIGhlcmUgYWxsIGN1c3RvbSBhcHAgdmFyaWFibGVzLlxuICovXG4iLCIvKlxuICogQXBwIEdsb2JhbCB2YXJpYWJsZXMgU0NTU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUGxhY2UgaGVyZSBhbGwgZ2xvYmFsIHZhcmlhYmxlcy5cbiAqL1xuXG4kd2hpdGU6ICAgICAgICNmZmZmZmYgIWRlZmF1bHQ7XG4kZ3JheS0xMDA6ICAgICNmOGY5ZmEgIWRlZmF1bHQ7XG4kZ3JheS0yMDA6ICAgICNlOWVjZWYgIWRlZmF1bHQ7XG4kZ3JheS0zMDA6ICAgICNkZWUyZTYgIWRlZmF1bHQ7IC8vIFN0cm9rZVxuJGdyYXktNDAwOiAgICAjY2VkNGRhICFkZWZhdWx0O1xuJGdyYXktNTAwOiAgICAjOGY5NTllICFkZWZhdWx0OyAvLyBTdHJva2Ugb24gaW5wdXRzXG4kZ3JheS02MDA6ICAgICM2YTczN2IgIWRlZmF1bHQ7XG4kZ3JheS03MDA6ICAgICM0OTUwNTcgIWRlZmF1bHQ7XG4kZ3JheS04MDA6ICAgICMzNDNhNDAgIWRlZmF1bHQ7XG4kZ3JheS05MDA6ICAgICMyODI4MjggIWRlZmF1bHQ7IC8vIENvcHkgdGV4dFxuJGJsYWNrOiAgICAgICAjMDAwMDAwICFkZWZhdWx0OyAvLyBBdm9pZCB1c2FnZVxuXG4kYmx1ZTogICAgICAgICMwZjZjYmYgIWRlZmF1bHQ7XG4kY3lhbjogICAgICAgICMwMDgxOTYgIWRlZmF1bHQ7IC8vIE5vdCB1c2VkLlxuJGdyZWVuOiAgICAgICAjMzU3YTMyICFkZWZhdWx0O1xuJHJlZDogICAgICAgICAjY2EzMTIwICFkZWZhdWx0O1xuJHllbGxvdzogICAgICAjZjBhZDRlICFkZWZhdWx0O1xuXG4kYnJhbmQtY29sb3I6ICNmOTgwMTIgIWRlZmF1bHQ7XG5cbiR0ZXh0LWNvbG9yOiAgICAgICAgICAgICAgICRncmF5LTkwMCAhZGVmYXVsdDtcbiR0ZXh0LWNvbG9yLXJnYjogICAgICAgICAgIGNvbG9yLXRvLXJnYi1saXN0KCR0ZXh0LWNvbG9yKSAhZGVmYXVsdDtcbiR0ZXh0LWNvbG9yLWRhcms6ICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcbiR0ZXh0LWNvbG9yLWRhcmstcmdiOiAgICAgIGNvbG9yLXRvLXJnYi1saXN0KCR0ZXh0LWNvbG9yLWRhcmspICFkZWZhdWx0O1xuXG4kYmFja2dyb3VuZC1jb2xvcjogICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJGJhY2tncm91bmQtY29sb3ItcmdiOiAgICAgIGNvbG9yLXRvLXJnYi1saXN0KCRiYWNrZ3JvdW5kLWNvbG9yKSAhZGVmYXVsdDtcbiRiYWNrZ3JvdW5kLWNvbG9yLWRhcms6ICAgICAkZ3JheS05MDAgIWRlZmF1bHQ7IC8vICMxYTFhMWFcbiRiYWNrZ3JvdW5kLWNvbG9yLWRhcmstcmdiOiBjb2xvci10by1yZ2ItbGlzdCgkYmFja2dyb3VuZC1jb2xvci1kYXJrKSAhZGVmYXVsdDtcblxuJGlvbi1pdGVtLWJhY2tncm91bmQ6ICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJGlvbi1pdGVtLWJhY2tncm91bmQtcmdiOiAgY29sb3ItdG8tcmdiLWxpc3QoJGlvbi1pdGVtLWJhY2tncm91bmQpICFkZWZhdWx0O1xuJGlvbi1pdGVtLWJhY2tncm91bmQtZGFyazogJGdyYXktOTAwICFkZWZhdWx0O1xuJGlvbi1pdGVtLWJhY2tncm91bmQtZGFyay1yZ2I6IGNvbG9yLXRvLXJnYi1saXN0KCRpb24taXRlbS1iYWNrZ3JvdW5kLWRhcmspICFkZWZhdWx0O1xuXG4kcHJpbWFyeTogICAgJGJyYW5kLWNvbG9yICFkZWZhdWx0O1xuJHNlY29uZGFyeTogICRncmF5LTMwMCAhZGVmYXVsdDtcbiRkYW5nZXI6ICAgICAkcmVkICFkZWZhdWx0O1xuJHdhcm5pbmc6ICAgICR5ZWxsb3cgIWRlZmF1bHQ7XG4kc3VjY2VzczogICAgJGdyZWVuICFkZWZhdWx0O1xuJGluZm86ICAgICAgICRibHVlICFkZWZhdWx0O1xuJGxpZ2h0OiAgICAgICRncmF5LTEwMCAhZGVmYXVsdDtcbiRtZWRpdW06ICAgICAkZ3JheS03MDAgIWRlZmF1bHQ7XG4kZGFyazogICAgICAgJGdyYXktOTAwICFkZWZhdWx0O1xuXG4kY29sb3JzOiAgKFxuICAgIHByaW1hcnk6IChsaWdodDogJHByaW1hcnksIGRhcms6ICRwcmltYXJ5KSxcbiAgICBzZWNvbmRhcnk6IChsaWdodDogJHNlY29uZGFyeSwgZGFyazogJGdyYXktNzAwKSxcbiAgICBzdWNjZXNzOiAobGlnaHQ6ICRzdWNjZXNzKSxcbiAgICB3YXJuaW5nOiAobGlnaHQ6ICR3YXJuaW5nKSxcbiAgICBkYW5nZXI6ICAobGlnaHQ6ICRkYW5nZXIpLFxuICAgIGluZm86IChsaWdodDogJGluZm8pLFxuICAgIGxpZ2h0OiAobGlnaHQ6ICRsaWdodCwgZGFyazogJGRhcmspLFxuICAgIG1lZGl1bTogKGxpZ2h0OiAkbWVkaXVtLCBkYXJrOiAkZ3JheS0yMDApLFxuICAgIGRhcms6IChsaWdodDogJGRhcmssIGRhcms6ICRsaWdodCksXG4pICFkZWZhdWx0O1xuXG4vKipcbiAqIExheW91dCBCcmVha3BvaW50c1xuICpcbiAqIGh0dHBzOi8vaW9uaWNmcmFtZXdvcmsuY29tL2RvY3MvbGF5b3V0L2dyaWQjZGVmYXVsdC1icmVha3BvaW50c1xuICovXG5cbi8vIFRoZSBtaW5pbXVtIGRpbWVuc2lvbnMgYXQgd2hpY2ggeW91ciBsYXlvdXQgd2lsbCBjaGFuZ2UsXG4vLyBhZGFwdGluZyB0byBkaWZmZXJlbnQgc2NyZWVuIHNpemVzLCBmb3IgdXNlIGluIG1lZGlhIHF1ZXJpZXNcbiRzY3JlZW4tYnJlYWtwb2ludHM6IChcbiAgICB4czogMHB4LFxuICAgIHNtOiA1NzZweCxcbiAgICBtZDogNzY4cHgsXG4gICAgbGc6IDk5MnB4LFxuICAgIHRhYmxldDogOTkycHgsXG4gICAgeGw6IDEyMDBweFxuKSAhZGVmYXVsdDtcblxuJGNvcmUtY291cnNlLWltYWdlLWJhY2tncm91bmQ6ICM4MWVjZWMsICM3NGI5ZmYsICNhMjliZmUsICNkZmU2ZTksICMwMGI4OTQsICMwOTg0ZTMsICNiMmJlYzMsICNmZGNiNmUsICNmZDc5YTgsICM2YzVjZTcgIWRlZmF1bHQ7XG4kY29yZS1kZC1xdWVzdGlvbi1jb2xvcnM6ICNGRkZGRkYsICNCMEM0REUsICNEQ0RDREMsICNEOEJGRDgsICM4N0NFRkEsICNEQUE1MjAsICNGRkQ3MDAsICNGMEU2OEMgIWRlZmF1bHQ7XG4kY29yZS10ZXh0LWhpZ2h0bGlnaHQtYmFja2dyb3VuZC1jb2xvcjogbGlnaHRlbigkYmx1ZSwgNDAlKSAhZGVmYXVsdDtcblxuJGNvcmUtZml4ZWQtdXJsOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWRhc2hib2FyZC1sb2dvOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWFsd2F5cy1zaG93LW1haW4tbWVudTogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1mb3JtYXQtdGV4dC1uZXZlci1zaG9ydGVuOiBmYWxzZSAhZGVmYXVsdDtcblxuJGNvcmUtaGlkZS1jb3Vyc2VpbWFnZS1vbi1jb3Vyc2U6IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtaGlkZS1wcm9ncmVzcy1vbi1jb3Vyc2U6IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtaGlkZS1wcm9ncmVzcy1vbi1zZWN0aW9uLXNlbGVjdG9yOiBmYWxzZSAhZGVmYXVsdDtcblxuJGNvcmUtY291cnNlLWhpZGUtdGh1bWItb24tY2FyZHM6IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtY291cnNlLXRodW1iLW9uLWNhcmRzLWJhY2tncm91bmQ6IG51bGwgIWRlZmF1bHQ7XG4kY29yZS1jb3Vyc2UtaGlkZS1wcm9ncmVzcy1vbi1jYXJkczogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgbG9naW4gcGFnZS5cbiRjb3JlLWxvZ2luLWJ1dHRvbi1vdXRsaW5lOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWxvZ2luLWJ1dHRvbi1vdXRsaW5lLWRhcms6ICRjb3JlLWxvZ2luLWJ1dHRvbi1vdXRsaW5lICFkZWZhdWx0O1xuJGNvcmUtbG9naW4tbG9hZGluZy1jb2xvcjogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1sb2dpbi1sb2FkaW5nLWNvbG9yLWRhcms6ICR0ZXh0LWNvbG9yLWRhcmsgIWRlZmF1bHQ7XG4kY29yZS1sb2dpbi1oaWRlLWZvcmdvdC1wYXNzd29yZDogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1sb2dpbi1oaWRlLW5lZWQtaGVscDogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1sb2dpbi1oaWRlLXFyY29kZTogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgbW9yZSBwYWdlLiAoZGVwcmVjYXRlZCBvbiA0LjApXG4kY29yZS1tb3JlLWhpZGUtc2l0ZWluZm86IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtbW9yZS1oaWRlLXNpdGVuYW1lOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLW1vcmUtaGlkZS1zaXRldXJsOiBmYWxzZSAhZGVmYXVsdDtcblxuLy8gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB1c2VyIHBhZ2UuXG4kY29yZS11c2VyLWhpZGUtc2l0ZWluZm86ICRjb3JlLW1vcmUtaGlkZS1zaXRlaW5mbyAhZGVmYXVsdDtcbiRjb3JlLXVzZXItaGlkZS1zaXRlbmFtZTogJGNvcmUtbW9yZS1oaWRlLXNpdGVuYW1lICFkZWZhdWx0O1xuJGNvcmUtdXNlci1oaWRlLXNpdGV1cmw6ICRjb3JlLW1vcmUtaGlkZS1zaXRldXJsICFkZWZhdWx0O1xuXG4vLyBBY3Rpdml0eSBpY29uIGJhY2tncm91bmQgY29sb3JzLlxuJGFjdGl2aXR5LWljb24tY29sb3JzOiAoXG4gICAgYWRtaW5pc3RyYXRpb246ICM1ZDYzZjYsXG4gICAgYXNzZXNzbWVudDogI2ViNjZhMixcbiAgICBjb2xsYWJvcmF0aW9uOiAjZjc2MzRkLFxuICAgIGNvbW11bmljYXRpb246ICMxMWE2NzYsXG4gICAgY29udGVudDogIzM5OWJlMixcbiAgICBpbnRlcmZhY2U6ICNhMzc4ZmZcbikgIWRlZmF1bHQ7XG5cbiRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1jYXRlZ29yeTogIzhlMjRhYSAhZGVmYXVsdDtcbiRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1jb3Vyc2U6ICRyZWQgIWRlZmF1bHQ7XG4kY2FsZW5kYXItZXZlbnQtY2F0ZWdvcnktZ3JvdXA6ICR5ZWxsb3cgIWRlZmF1bHQ7XG4kY2FsZW5kYXItZXZlbnQtY2F0ZWdvcnktdXNlcjogJGJsdWUgIWRlZmF1bHQ7XG4kY2FsZW5kYXItZXZlbnQtY2F0ZWdvcnktc2l0ZTogJGdyZWVuICFkZWZhdWx0O1xuXG4vLyBDYWxlbmRhciBldmVudCBjYXRlZ29yeSBiYWNrZ3JvdW5kIGNvbG9ycy5cbiRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1jb2xvcnM6IChcbiAgICBjYXRlZ29yeTogJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LWNhdGVnb3J5LFxuICAgIGNvdXJzZTogJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LWNvdXJzZSxcbiAgICBncm91cDogJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LWdyb3VwLFxuICAgIHVzZXI6ICRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS11c2VyLFxuICAgIHNpdGU6ICRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1zaXRlLFxuKSAhZGVmYXVsdDtcbiIsIkB1c2UgXCJ0aGVtZS9nbG9iYWxzXCIgYXMgKjtcblxuOmhvc3Qge1xuICAgIC0tZXh0cmEtaWNvbi1zaXplOiAxNnB4O1xuICAgIC0taWNvbi1zaXplOiAyNHB4O1xuXG4gICAgOjpuZy1kZWVwIGNvcmUtdXNlci1hdmF0YXIge1xuICAgICAgICAuY29yZS1hdmF0YXItZXh0cmEtaW1nLFxuICAgICAgICBjb3JlLW1vZC1pY29uIHtcbiAgICAgICAgICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgcmlnaHQ6IC00cHg7XG4gICAgICAgICAgICBib3R0b206IC00cHg7XG4gICAgICAgICAgICAtLXBhZGRpbmc6IDAuMnJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jb3JlLWF2YXRhci1leHRyYS1pbWcge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1yYWRpdXMtc20pO1xuICAgICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IHZhcigtLWV4dHJhLWljb24tc2l6ZSk7XG4gICAgICAgICAgICAgICAgbWF4LWhlaWdodDogdmFyKC0tZXh0cmEtaWNvbi1zaXplKTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmUtbW9kLWljb24gIHtcbiAgICAgICAgICAgIC0tc2l6ZTogdmFyKC0tZXh0cmEtaWNvbi1zaXplKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpdi5jb3JlLW5vdGlmaWNhdGlvbi1pY29uIHtcbiAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIHdpZHRoOiB2YXIoLS1pY29uLXNpemUpO1xuICAgICAgICAgICAgaGVpZ2h0OiB2YXIoLS1pY29uLXNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGlvbi1pY29uIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogdmFyKC0taWNvbi1zaXplKTtcbiAgICAgICAgfVxuICAgICAgICBwYWRkaW5nOiAwLjdyZW07XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtY29sb3IpO1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1yYWRpdXMteHMpO1xuICAgIH1cblxuICAgIC5jb3JlLW5vdGlmaWNhdGlvbi1pY29uIHtcbiAgICAgICAgLS1tb2R1bGUtaWNvbi1zaXplOiB2YXIoLS1pY29uLXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBtYXJnaW4oNnB4LCA4cHgsIDZweCwgMHB4KTtcbiAgICB9XG5cbiAgICAuY29yZS1ub3RpZmljYXRpb24taW1nIHtcbiAgICAgICAgQGluY2x1ZGUgbWFyZ2luKDZweCwgOHB4LCA2cHgsIDBweCk7XG4gICAgICAgIHdpZHRoOiB2YXIoLS1jb3JlLWF2YXRhci1zaXplKTtcbiAgICAgICAgaGVpZ2h0OiB2YXIoLS1jb3JlLWF2YXRhci1zaXplKTtcbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\", \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[_nghost-%COMP%]   .core-notification-title[_ngcontent-%COMP%]   [slot=start][_ngcontent-%COMP%] {\\n  align-self: start;\\n  margin-top: 16px;\\n}\\n[_nghost-%COMP%]   .core-notification-title[_ngcontent-%COMP%]   p.item-heading[_ngcontent-%COMP%] {\\n  font-size: 16px;\\n}\\n[_nghost-%COMP%]   .core-notification-title[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 12px;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%] {\\n  font-size: var(--text-size);\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .forumpost {\\n  border: 1px solid var(--gray-200);\\n  width: 100%;\\n  margin: 0 0 1em 0;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .forumpost td {\\n  padding: 10px;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .forumpost .header {\\n  background-color: var(--light);\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .forumpost .header .picture {\\n  width: 48px;\\n  text-align: center;\\n  -webkit-padding-start: 4px;\\n  padding-inline-start: 4px;\\n  -webkit-padding-end: 0px;\\n  padding-inline-end: 0px;\\n  padding-top: 8px;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .forumpost .header .picture img {\\n  width: 44px !important;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .forumpost .subject {\\n  font-weight: 700;\\n  margin-bottom: 1rem;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     a {\\n  text-decoration: none;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .userpicture {\\n  border-radius: 50%;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .mdl-right {\\n  text-align: end;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .mdl-right a {\\n  display: none;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .mdl-right font {\\n  font-size: 0.9em;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     .commands {\\n  display: none;\\n}\\n[_nghost-%COMP%]   .core-notification-body[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%]     hr {\\n  margin-top: 1.5rem;\\n  margin-bottom: 1.5rem;\\n  background-color: var(--gray-200);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n});\nclass AddonNotificationSwipeItemsManager extends CoreSwipeNavigationItemsManager {\n  /**\n   * @inheritdoc\n   */\n  getSelectedItemPathFromRoute(route) {\n    return route.params.id;\n  }\n}","map":{"version":3,"names":["AddonLegacyNotificationsNotificationsSource","AddonNotificationsNotificationsSource","AddonNotifications","AddonNotificationsHelper","CoreRoutedItemsManagerSourcesTracker","CoreSwipeNavigationItemsManager","CoreContentLinksDelegate","CoreAnalytics","CoreAnalyticsEventType","CoreNavigator","CoreSites","CoreDomUtils","Translate","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r5","notification","iconurl","ɵɵsanitizeUrl","ɵɵtemplate","AddonNotificationsNotificationPage_div_11_core_user_avatar_2_div_1_Template","ctx_r2","useridfrom","profileimageurlfrom","userfromfullname","ctx_r6","imgUrl","ctx_r8","AddonNotificationsNotificationPage_div_11_ng_container_3_div_2_img_1_Template","AddonNotificationsNotificationPage_div_11_ng_container_3_div_2_ion_icon_2_Template","ctx_r7","ɵɵelementContainerStart","AddonNotificationsNotificationPage_div_11_ng_container_3_img_1_Template","AddonNotificationsNotificationPage_div_11_ng_container_3_div_2_Template","ɵɵelementContainerEnd","ctx_r3","ɵɵtext","ɵɵtextInterpolate1","ctx_r10","AddonNotificationsNotificationPage_div_11_p_7_ng_container_3_Template","ɵɵpipeBind1","ctx_r4","timecreated","AddonNotificationsNotificationPage_div_11_core_user_avatar_2_Template","AddonNotificationsNotificationPage_div_11_ng_container_3_Template","AddonNotificationsNotificationPage_div_11_p_7_Template","ctx_r0","subject","mobiletext","ɵɵlistener","AddonNotificationsNotificationPage_div_12_ion_button_2_Template_ion_button_click_0_listener","restoredCtx","ɵɵrestoreView","_r14","action_r12","$implicit","ɵɵresetView","action","ɵɵpropertyInterpolate","icon","message","AddonNotificationsNotificationPage_div_12_ion_button_2_Template","ctx_r1","actions","AddonNotificationsNotificationPage","constructor","loaded","ngOnInit","_this","_asyncToGenerator","getNotification","error","showErrorModal","back","convertPushToMessage","loadActions","markNotificationAsRead","id","logEvent","type","VIEW_ITEM","ws","name","instant","data","category","url","getRouteNumberParam","getNotificationById","undefined","getRequiredRouteParam","notificationId","_source$getItems","source","getOrCreateSource","getRequiredCurrentSite","isVersionGreaterEqualThan","getItems","find","loadNotifications","_this2","notifications","AddonNotificationSwipeItemsManager","start","_this3","_this3$actionsData","contexturl","customdata","appurl","actionsData","contextUrl","courseId","courseid","getActionsFor","length","push","siteId","openInBrowser","_this4","_this4$actionsData","site","getSite","openInBrowserWithAutoLogin","ngOnDestroy","_this$notifications","destroy","_class","selectors","decls","vars","consts","template","AddonNotificationsNotificationPage_Template","rf","ctx","AddonNotificationsNotificationPage_div_11_Template","AddonNotificationsNotificationPage_div_12_Template","ɵɵtextInterpolate","getSelectedItemPathFromRoute","route","params"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/notifications/pages/notification/notification.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/notifications/pages/notification/notification.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AddonLegacyNotificationsNotificationsSource } from '@addons/notifications/classes/legacy-notifications-source';\nimport { AddonNotificationsNotificationsSource } from '@addons/notifications/classes/notifications-source';\nimport { AddonNotificationsPushNotification } from '@addons/notifications/services/handlers/push-click';\nimport { AddonNotifications, AddonNotificationsNotificationMessageFormatted } from '@addons/notifications/services/notifications';\nimport {\n    AddonNotificationsHelper,\n} from '@addons/notifications/services/notifications-helper';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { CoreContentLinksAction, CoreContentLinksDelegate } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { Translate } from '@singletons';\n\n/**\n * Page to render a notification.\n */\n@Component({\n    selector: 'page-addon-notifications-notification',\n    templateUrl: 'notification.html',\n    styleUrls: ['../../notifications.scss', 'notification.scss'],\n})\nexport class AddonNotificationsNotificationPage implements OnInit, OnDestroy {\n\n    notifications?: AddonNotificationSwipeItemsManager;\n    notification?: AddonNotificationsNotificationMessageFormatted;\n    profileImageUrlFrom?: string; // Avatar of the user who sent the notification.\n    loaded = false;\n\n    // Actions data.\n    actions: CoreContentLinksAction[] = [];\n    protected contextUrl?: string;\n    protected courseId?: number;\n    protected actionsData?: Record<string, string|number>; // Extra data to handle the URL.\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        let notification: AddonNotificationsNotification;\n\n        try {\n            notification = this.getNotification();\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.notification = 'subject' in notification ?\n            notification :\n            await AddonNotifications.convertPushToMessage(notification);\n\n        await this.loadActions(this.notification);\n        AddonNotificationsHelper.markNotificationAsRead(notification);\n\n        this.loaded = true;\n\n        if (notification.id) {\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM,\n                ws: 'core_message_get_messages',\n                name: Translate.instant('addon.notifications.notifications'),\n                data: { id: notification.id, category: 'notifications' },\n                url: `/message/output/popup/notifications.php?notificationid=${notification.id}&offset=0`,\n            });\n        }\n    }\n\n    /**\n     * Get notification.\n     *\n     * @returns notification.\n     */\n    getNotification(): AddonNotificationsNotification {\n        const id = CoreNavigator.getRouteNumberParam('id');\n        const notification = id ? this.getNotificationById(id) : undefined;\n\n        return notification ?? CoreNavigator.getRequiredRouteParam('notification');\n    }\n\n    /**\n     * Obtain notification by passed id.\n     *\n     * @param notificationId Notification id.\n     * @returns Found notification.\n     */\n    getNotificationById(notificationId: number): AddonNotificationsNotification | undefined {\n        const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n            CoreSites.getRequiredCurrentSite().isVersionGreaterEqualThan('4.0')\n                ? AddonNotificationsNotificationsSource\n                : AddonLegacyNotificationsNotificationsSource,\n            [],\n        );\n        const notification = source.getItems()?.find(({ id }) => id === notificationId);\n\n        if (!notification) {\n            return;\n        }\n\n        this.loadNotifications(source);\n\n        return notification;\n    }\n\n    /**\n     * Load notifications from source.\n     *\n     * @param source Notifications source\n     */\n    async loadNotifications(source: AddonNotificationsNotificationsSource): Promise<void> {\n        this.notifications = new AddonNotificationSwipeItemsManager(source);\n\n        await this.notifications.start();\n    }\n\n    /**\n     * Load notification actions\n     *\n     * @param notification Notification.\n     * @returns Promise resolved when done.\n     */\n    async loadActions(notification: AddonNotificationsNotificationMessageFormatted): Promise<void> {\n        if (!notification.contexturl && (!notification.customdata || !notification.customdata.appurl)) {\n            // No URL, nothing to do.\n            return;\n        }\n\n        let actions: CoreContentLinksAction[] = [];\n        this.actionsData = notification.customdata;\n        this.contextUrl = notification.contexturl || undefined;\n        this.courseId = 'courseid' in notification ? notification.courseid : undefined;\n\n        // Treat appurl first if any.\n        if (this.actionsData?.appurl) {\n            actions = await CoreContentLinksDelegate.getActionsFor(\n                <string> this.actionsData.appurl,\n                this.courseId,\n                undefined,\n                this.actionsData,\n            );\n        }\n\n        if (!actions.length && this.contextUrl) {\n            // No appurl or cannot handle it. Try with contextUrl.\n            actions = await CoreContentLinksDelegate.getActionsFor(this.contextUrl, this.courseId, undefined, this.actionsData);\n        }\n\n        if (!actions.length) {\n            // URL is not supported. Add an action to open it in browser.\n            actions.push({\n                message: 'core.view',\n                icon: 'fas-eye',\n                action: (siteId) => this.openInBrowser(siteId),\n            });\n        }\n\n        this.actions = actions;\n    }\n\n    /**\n     * Default action. Open in browser.\n     *\n     * @param siteId Site ID to use.\n     */\n    protected async openInBrowser(siteId?: string): Promise<void> {\n        const url = <string> this.actionsData?.appurl || this.contextUrl;\n\n        if (!url) {\n            return;\n        }\n\n        const site = await CoreSites.getSite(siteId);\n\n        site.openInBrowserWithAutoLogin(url);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.notifications?.destroy();\n    }\n\n}\n\n/**\n * Helper to manage swiping within a collection of notifications.\n */\nclass AddonNotificationSwipeItemsManager extends CoreSwipeNavigationItemsManager {\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        return route.params.id;\n    }\n\n}\n\ntype AddonNotificationsNotification = AddonNotificationsNotificationMessageFormatted | AddonNotificationsPushNotification;\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>{{ 'addon.notifications.notifications' | translate }}</h1>\n        </ion-title>\n    </ion-toolbar>\n</ion-header>\n<ion-content [core-swipe-navigation]=\"notifications\">\n    <core-loading [hideUntil]=\"loaded\">\n        <div class=\"list-item-limited-width\" *ngIf=\"notification\">\n\n            <ion-item class=\"ion-text-wrap core-notification-title\" lines=\"full\">\n                <core-user-avatar *ngIf=\"notification.useridfrom > 0\" slot=\"start\" [userId]=\"notification.useridfrom\"\n                    [profileUrl]=\"notification.profileimageurlfrom\" [fullname]=\"notification.userfromfullname\">\n                    <div class=\"core-avatar-extra-img\" *ngIf=\"notification.iconurl\">\n                        <img [src]=\"notification.iconurl\" alt=\"\" role=\"presentation\">\n                    </div>\n                </core-user-avatar>\n\n                <ng-container *ngIf=\"notification.useridfrom <= 0\">\n                    <img *ngIf=\"notification.imgUrl\" class=\"core-notification-img\" [src]=\"notification.imgUrl\" core-external-content alt=\"\"\n                        role=\"presentation\" slot=\"start\">\n                    <div class=\"core-notification-icon\" *ngIf=\"!notification.imgUrl\" slot=\"start\">\n                        <img *ngIf=\"notification.iconurl\" [src]=\"notification.iconurl\" core-external-content alt=\"\" role=\"presentation\">\n                        <ion-icon *ngIf=\"!notification.iconurl\" name=\"fas-bell\" aria-hidden=\"true\" />\n                    </div>\n                </ng-container>\n\n                <ion-label>\n                    <p class=\"item-heading\">\n                        <core-format-text [text]=\"notification.subject\" contextLevel=\"system\" [contextInstanceId]=\"0\"\n                            [wsNotFiltered]=\"true\" />\n                    </p>\n                    <p *ngIf=\"notification.timecreated > 0\">\n                        {{ notification.timecreated | coreTimeAgo }}\n                        <ng-container *ngIf=\"notification.useridfrom > 0\"> · {{ notification.userfromfullname }}</ng-container>\n                    </p>\n                </ion-label>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap core-notification-body\">\n                <ion-label>\n                    <core-format-text [text]=\"notification.mobiletext | coreCreateLinks\" contextLevel=\"system\" [contextInstanceId]=\"0\" />\n                </ion-label>\n            </ion-item>\n        </div>\n\n        <div collapsible-footer appearOnBottom *ngIf=\"loaded && actions && actions.length > 0\" slot=\"fixed\">\n            <div class=\"list-item-limited-width adaptable-buttons-row\">\n                <ion-button expand=\"block\" (click)=\"action.action()\" *ngFor=\"let action of actions\">\n                    <ion-icon slot=\"start\" name=\"{{action.icon}}\" aria-hidden=\"true\" />\n                    {{ action.message | translate }}\n                </ion-button>\n            </div>\n        </div>\n    </core-loading>\n</ion-content>\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,2CAA2C,QAAQ,2DAA2D;AACvH,SAASC,qCAAqC,QAAQ,oDAAoD;AAE1G,SAASC,kBAAkB,QAAwD,8CAA8C;AACjI,SACIC,wBAAwB,QACrB,qDAAqD;AAG5D,SAASC,oCAAoC,QAAQ,gEAAgE;AACrH,SAASC,+BAA+B,QAAQ,0DAA0D;AAC1G,SAAiCC,wBAAwB,QAAQ,uDAAuD;AACxH,SAASC,aAAa,EAAEC,sBAAsB,QAAQ,qBAAqB;AAC3E,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,QAAQ,aAAa;;;;;;;;;;;;;;;;;;ICbnBC,EAAA,CAAAC,cAAA,cAAgE;IAC5DD,EAAA,CAAAE,SAAA,cAA6D;IACjEF,EAAA,CAAAG,YAAA,EAAM;;;;IADGH,EAAA,CAAAI,SAAA,GAA4B;IAA5BJ,EAAA,CAAAK,UAAA,QAAAC,MAAA,CAAAC,YAAA,CAAAC,OAAA,EAAAR,EAAA,CAAAS,aAAA,CAA4B;;;;;IAHzCT,EAAA,CAAAC,cAAA,2BAC+F;IAC3FD,EAAA,CAAAU,UAAA,IAAAC,2EAAA,kBAEM;IACVX,EAAA,CAAAG,YAAA,EAAmB;;;;IALgDH,EAAA,CAAAK,UAAA,WAAAO,MAAA,CAAAL,YAAA,CAAAM,UAAA,CAAkC,eAAAD,MAAA,CAAAL,YAAA,CAAAO,mBAAA,cAAAF,MAAA,CAAAL,YAAA,CAAAQ,gBAAA;IAE7Df,EAAA,CAAAI,SAAA,GAA0B;IAA1BJ,EAAA,CAAAK,UAAA,SAAAO,MAAA,CAAAL,YAAA,CAAAC,OAAA,CAA0B;;;;;IAM9DR,EAAA,CAAAE,SAAA,cACqC;;;;IAD0BF,EAAA,CAAAK,UAAA,QAAAW,MAAA,CAAAT,YAAA,CAAAU,MAAA,EAAAjB,EAAA,CAAAS,aAAA,CAA2B;;;;;IAGtFT,EAAA,CAAAE,SAAA,cAAgH;;;;IAA9EF,EAAA,CAAAK,UAAA,QAAAa,MAAA,CAAAX,YAAA,CAAAC,OAAA,EAAAR,EAAA,CAAAS,aAAA,CAA4B;;;;;IAC9DT,EAAA,CAAAE,SAAA,mBAA6E;;;;;IAFjFF,EAAA,CAAAC,cAAA,cAA8E;IAC1ED,EAAA,CAAAU,UAAA,IAAAS,6EAAA,kBAAgH;IAChHnB,EAAA,CAAAU,UAAA,IAAAU,kFAAA,uBAA6E;IACjFpB,EAAA,CAAAG,YAAA,EAAM;;;;IAFIH,EAAA,CAAAI,SAAA,GAA0B;IAA1BJ,EAAA,CAAAK,UAAA,SAAAgB,MAAA,CAAAd,YAAA,CAAAC,OAAA,CAA0B;IACrBR,EAAA,CAAAI,SAAA,GAA2B;IAA3BJ,EAAA,CAAAK,UAAA,UAAAgB,MAAA,CAAAd,YAAA,CAAAC,OAAA,CAA2B;;;;;IAL9CR,EAAA,CAAAsB,uBAAA,GAAmD;IAC/CtB,EAAA,CAAAU,UAAA,IAAAa,uEAAA,kBACqC;IACrCvB,EAAA,CAAAU,UAAA,IAAAc,uEAAA,kBAGM;IACVxB,EAAA,CAAAyB,qBAAA,EAAe;;;;IANLzB,EAAA,CAAAI,SAAA,GAAyB;IAAzBJ,EAAA,CAAAK,UAAA,SAAAqB,MAAA,CAAAnB,YAAA,CAAAU,MAAA,CAAyB;IAEMjB,EAAA,CAAAI,SAAA,GAA0B;IAA1BJ,EAAA,CAAAK,UAAA,UAAAqB,MAAA,CAAAnB,YAAA,CAAAU,MAAA,CAA0B;;;;;IAa3DjB,EAAA,CAAAsB,uBAAA,GAAkD;IAACtB,EAAA,CAAA2B,MAAA,GAAqC;IAAA3B,EAAA,CAAAyB,qBAAA,EAAe;;;;IAApDzB,EAAA,CAAAI,SAAA,GAAqC;IAArCJ,EAAA,CAAA4B,kBAAA,aAAAC,OAAA,CAAAtB,YAAA,CAAAQ,gBAAA,KAAqC;;;;;IAF5Ff,EAAA,CAAAC,cAAA,QAAwC;IACpCD,EAAA,CAAA2B,MAAA,GACA;;IAAA3B,EAAA,CAAAU,UAAA,IAAAoB,qEAAA,0BAAuG;IAC3G9B,EAAA,CAAAG,YAAA,EAAI;;;;IAFAH,EAAA,CAAAI,SAAA,GACA;IADAJ,EAAA,CAAA4B,kBAAA,MAAA5B,EAAA,CAAA+B,WAAA,OAAAC,MAAA,CAAAzB,YAAA,CAAA0B,WAAA,OACA;IAAejC,EAAA,CAAAI,SAAA,GAAiC;IAAjCJ,EAAA,CAAAK,UAAA,SAAA2B,MAAA,CAAAzB,YAAA,CAAAM,UAAA,KAAiC;;;;;IA1BhEb,EAAA,CAAAC,cAAA,aAA0D;IAGlDD,EAAA,CAAAU,UAAA,IAAAwB,qEAAA,8BAKmB;IAEnBlC,EAAA,CAAAU,UAAA,IAAAyB,iEAAA,0BAOe;IAEfnC,EAAA,CAAAC,cAAA,gBAAW;IAEHD,EAAA,CAAAE,SAAA,2BAC6B;IACjCF,EAAA,CAAAG,YAAA,EAAI;IACJH,EAAA,CAAAU,UAAA,IAAA0B,sDAAA,eAGI;IACRpC,EAAA,CAAAG,YAAA,EAAY;IAEhBH,EAAA,CAAAC,cAAA,mBAAuD;IAE/CD,EAAA,CAAAE,SAAA,4BAAqH;;IACzHF,EAAA,CAAAG,YAAA,EAAY;;;;IA9BOH,EAAA,CAAAI,SAAA,GAAiC;IAAjCJ,EAAA,CAAAK,UAAA,SAAAgC,MAAA,CAAA9B,YAAA,CAAAM,UAAA,KAAiC;IAOrCb,EAAA,CAAAI,SAAA,GAAkC;IAAlCJ,EAAA,CAAAK,UAAA,SAAAgC,MAAA,CAAA9B,YAAA,CAAAM,UAAA,MAAkC;IAWvBb,EAAA,CAAAI,SAAA,GAA6B;IAA7BJ,EAAA,CAAAK,UAAA,SAAAgC,MAAA,CAAA9B,YAAA,CAAA+B,OAAA,CAA6B;IAG/CtC,EAAA,CAAAI,SAAA,GAAkC;IAAlCJ,EAAA,CAAAK,UAAA,SAAAgC,MAAA,CAAA9B,YAAA,CAAA0B,WAAA,KAAkC;IAQpBjC,EAAA,CAAAI,SAAA,GAAkD;IAAlDJ,EAAA,CAAAK,UAAA,SAAAL,EAAA,CAAA+B,WAAA,QAAAM,MAAA,CAAA9B,YAAA,CAAAgC,UAAA,EAAkD;;;;;;IAOxEvC,EAAA,CAAAC,cAAA,qBAAoF;IAAzDD,EAAA,CAAAwC,UAAA,mBAAAC,4FAAA;MAAA,MAAAC,WAAA,GAAA1C,EAAA,CAAA2C,aAAA,CAAAC,IAAA;MAAA,MAAAC,UAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,OAAS9C,EAAA,CAAA+C,WAAA,CAAAF,UAAA,CAAAG,MAAA,EAAe;IAAA,EAAC;IAChDhD,EAAA,CAAAE,SAAA,mBAAmE;IACnEF,EAAA,CAAA2B,MAAA,GACJ;;IAAA3B,EAAA,CAAAG,YAAA,EAAa;;;;IAFcH,EAAA,CAAAI,SAAA,GAAsB;IAAtBJ,EAAA,CAAAiD,qBAAA,SAAAJ,UAAA,CAAAK,IAAA,CAAsB;IAC7ClD,EAAA,CAAAI,SAAA,GACJ;IADIJ,EAAA,CAAA4B,kBAAA,MAAA5B,EAAA,CAAA+B,WAAA,OAAAc,UAAA,CAAAM,OAAA,OACJ;;;;;IALRnD,EAAA,CAAAC,cAAA,cAAoG;IAE5FD,EAAA,CAAAU,UAAA,IAAA0C,+DAAA,yBAGa;IACjBpD,EAAA,CAAAG,YAAA,EAAM;;;;IAJsEH,EAAA,CAAAI,SAAA,GAAU;IAAVJ,EAAA,CAAAK,UAAA,YAAAgD,MAAA,CAAAC,OAAA,CAAU;;;ADnBlG;;;AAQA,OAAM,MAAOC,kCAAkC;EAL/CC,YAAA;IAUI,KAAAC,MAAM,GAAG,KAAK;IAEd;IACA,KAAAH,OAAO,GAA6B,EAAE;;EAKtC;;;EAGMI,QAAQA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACV,IAAIrD,YAA4C;MAEhD,IAAI;QACAA,YAAY,GAAGoD,KAAI,CAACE,eAAe,EAAE;OACxC,CAAC,OAAOC,KAAK,EAAE;QACZhE,YAAY,CAACiE,cAAc,CAACD,KAAK,CAAC;QAClClE,aAAa,CAACoE,IAAI,EAAE;QAEpB;;MAGJL,KAAI,CAACpD,YAAY,GAAG,SAAS,IAAIA,YAAY,GACzCA,YAAY,SACNlB,kBAAkB,CAAC4E,oBAAoB,CAAC1D,YAAY,CAAC;MAE/D,MAAMoD,KAAI,CAACO,WAAW,CAACP,KAAI,CAACpD,YAAY,CAAC;MACzCjB,wBAAwB,CAAC6E,sBAAsB,CAAC5D,YAAY,CAAC;MAE7DoD,KAAI,CAACF,MAAM,GAAG,IAAI;MAElB,IAAIlD,YAAY,CAAC6D,EAAE,EAAE;QACjB1E,aAAa,CAAC2E,QAAQ,CAAC;UACnBC,IAAI,EAAE3E,sBAAsB,CAAC4E,SAAS;UACtCC,EAAE,EAAE,2BAA2B;UAC/BC,IAAI,EAAE1E,SAAS,CAAC2E,OAAO,CAAC,mCAAmC,CAAC;UAC5DC,IAAI,EAAE;YAAEP,EAAE,EAAE7D,YAAY,CAAC6D,EAAE;YAAEQ,QAAQ,EAAE;UAAe,CAAE;UACxDC,GAAG,EAAE,0DAA0DtE,YAAY,CAAC6D,EAAE;SACjF,CAAC;;IACL;EACL;EAEA;;;;;EAKAP,eAAeA,CAAA;IACX,MAAMO,EAAE,GAAGxE,aAAa,CAACkF,mBAAmB,CAAC,IAAI,CAAC;IAClD,MAAMvE,YAAY,GAAG6D,EAAE,GAAG,IAAI,CAACW,mBAAmB,CAACX,EAAE,CAAC,GAAGY,SAAS;IAElE,OAAOzE,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAIX,aAAa,CAACqF,qBAAqB,CAAC,cAAc,CAAC;EAC9E;EAEA;;;;;;EAMAF,mBAAmBA,CAACG,cAAsB;IAAA,IAAAC,gBAAA;IACtC,MAAMC,MAAM,GAAG7F,oCAAoC,CAAC8F,iBAAiB,CACjExF,SAAS,CAACyF,sBAAsB,EAAE,CAACC,yBAAyB,CAAC,KAAK,CAAC,GAC7DnG,qCAAqC,GACrCD,2CAA2C,EACjD,EAAE,CACL;IACD,MAAMoB,YAAY,IAAA4E,gBAAA,GAAGC,MAAM,CAACI,QAAQ,EAAE,cAAAL,gBAAA,uBAAjBA,gBAAA,CAAmBM,IAAI,CAAC,CAAC;MAAErB;IAAE,CAAE,KAAKA,EAAE,KAAKc,cAAc,CAAC;IAE/E,IAAI,CAAC3E,YAAY,EAAE;MACf;;IAGJ,IAAI,CAACmF,iBAAiB,CAACN,MAAM,CAAC;IAE9B,OAAO7E,YAAY;EACvB;EAEA;;;;;EAKMmF,iBAAiBA,CAACN,MAA6C;IAAA,IAAAO,MAAA;IAAA,OAAA/B,iBAAA;MACjE+B,MAAI,CAACC,aAAa,GAAG,IAAIC,kCAAkC,CAACT,MAAM,CAAC;MAEnE,MAAMO,MAAI,CAACC,aAAa,CAACE,KAAK,EAAE;IAAC;EACrC;EAEA;;;;;;EAMM5B,WAAWA,CAAC3D,YAA4D;IAAA,IAAAwF,MAAA;IAAA,OAAAnC,iBAAA;MAAA,IAAAoC,kBAAA;MAC1E,IAAI,CAACzF,YAAY,CAAC0F,UAAU,KAAK,CAAC1F,YAAY,CAAC2F,UAAU,IAAI,CAAC3F,YAAY,CAAC2F,UAAU,CAACC,MAAM,CAAC,EAAE;QAC3F;QACA;;MAGJ,IAAI7C,OAAO,GAA6B,EAAE;MAC1CyC,MAAI,CAACK,WAAW,GAAG7F,YAAY,CAAC2F,UAAU;MAC1CH,MAAI,CAACM,UAAU,GAAG9F,YAAY,CAAC0F,UAAU,IAAIjB,SAAS;MACtDe,MAAI,CAACO,QAAQ,GAAG,UAAU,IAAI/F,YAAY,GAAGA,YAAY,CAACgG,QAAQ,GAAGvB,SAAS;MAE9E;MACA,KAAAgB,kBAAA,GAAID,MAAI,CAACK,WAAW,cAAAJ,kBAAA,eAAhBA,kBAAA,CAAkBG,MAAM,EAAE;QAC1B7C,OAAO,SAAS7D,wBAAwB,CAAC+G,aAAa,CACzCT,MAAI,CAACK,WAAW,CAACD,MAAM,EAChCJ,MAAI,CAACO,QAAQ,EACbtB,SAAS,EACTe,MAAI,CAACK,WAAW,CACnB;;MAGL,IAAI,CAAC9C,OAAO,CAACmD,MAAM,IAAIV,MAAI,CAACM,UAAU,EAAE;QACpC;QACA/C,OAAO,SAAS7D,wBAAwB,CAAC+G,aAAa,CAACT,MAAI,CAACM,UAAU,EAAEN,MAAI,CAACO,QAAQ,EAAEtB,SAAS,EAAEe,MAAI,CAACK,WAAW,CAAC;;MAGvH,IAAI,CAAC9C,OAAO,CAACmD,MAAM,EAAE;QACjB;QACAnD,OAAO,CAACoD,IAAI,CAAC;UACTvD,OAAO,EAAE,WAAW;UACpBD,IAAI,EAAE,SAAS;UACfF,MAAM,EAAG2D,MAAM,IAAKZ,MAAI,CAACa,aAAa,CAACD,MAAM;SAChD,CAAC;;MAGNZ,MAAI,CAACzC,OAAO,GAAGA,OAAO;IAAC;EAC3B;EAEA;;;;;EAKgBsD,aAAaA,CAACD,MAAe;IAAA,IAAAE,MAAA;IAAA,OAAAjD,iBAAA;MAAA,IAAAkD,kBAAA;MACzC,MAAMjC,GAAG,GAAY,EAAAiC,kBAAA,GAAAD,MAAI,CAACT,WAAW,cAAAU,kBAAA,uBAAhBA,kBAAA,CAAkBX,MAAM,KAAIU,MAAI,CAACR,UAAU;MAEhE,IAAI,CAACxB,GAAG,EAAE;QACN;;MAGJ,MAAMkC,IAAI,SAASlH,SAAS,CAACmH,OAAO,CAACL,MAAM,CAAC;MAE5CI,IAAI,CAACE,0BAA0B,CAACpC,GAAG,CAAC;IAAC;EACzC;EAEA;;;EAGAqC,WAAWA,CAAA;IAAA,IAAAC,mBAAA;IACP,CAAAA,mBAAA,OAAI,CAACvB,aAAa,cAAAuB,mBAAA,eAAlBA,mBAAA,CAAoBC,OAAO,EAAE;EACjC;;AAIJ;;;AAAAC,MAAA,GArKa9D,kCAAkC;;mBAAlCA,MAAkC;AAAA;;QAAlCA,MAAkC;EAAA+D,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,4CAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCxC/C5H,EAAA,CAAAC,cAAA,iBAAY;MAGAD,EAAA,CAAAE,SAAA,yBAAoD;;MACxDF,EAAA,CAAAG,YAAA,EAAc;MACdH,EAAA,CAAAC,cAAA,gBAAW;MACHD,EAAA,CAAA2B,MAAA,GAAqD;;MAAA3B,EAAA,CAAAG,YAAA,EAAK;MAI1EH,EAAA,CAAAC,cAAA,qBAAqD;MAE7CD,EAAA,CAAAU,UAAA,KAAAoH,kDAAA,mBAmCM;MAEN9H,EAAA,CAAAU,UAAA,KAAAqH,kDAAA,iBAOM;MACV/H,EAAA,CAAAG,YAAA,EAAe;;;MAtDUH,EAAA,CAAAI,SAAA,GAAgC;MAAhCJ,EAAA,CAAAK,UAAA,SAAAL,EAAA,CAAA+B,WAAA,oBAAgC;MAG7C/B,EAAA,CAAAI,SAAA,GAAqD;MAArDJ,EAAA,CAAAgI,iBAAA,CAAAhI,EAAA,CAAA+B,WAAA,4CAAqD;MAIxD/B,EAAA,CAAAI,SAAA,GAAuC;MAAvCJ,EAAA,CAAAK,UAAA,0BAAAwH,GAAA,CAAAjC,aAAA,CAAuC;MAClC5F,EAAA,CAAAI,SAAA,GAAoB;MAApBJ,EAAA,CAAAK,UAAA,cAAAwH,GAAA,CAAApE,MAAA,CAAoB;MACQzD,EAAA,CAAAI,SAAA,GAAkB;MAAlBJ,EAAA,CAAAK,UAAA,SAAAwH,GAAA,CAAAtH,YAAA,CAAkB;MAqChBP,EAAA,CAAAI,SAAA,GAA6C;MAA7CJ,EAAA,CAAAK,UAAA,SAAAwH,GAAA,CAAApE,MAAA,IAAAoE,GAAA,CAAAvE,OAAA,IAAAuE,GAAA,CAAAvE,OAAA,CAAAmD,MAAA,KAA6C;;;;;;AD+J7F,MAAMZ,kCAAmC,SAAQrG,+BAA+B;EAE5E;;;EAGUyI,4BAA4BA,CAACC,KAA6B;IAChE,OAAOA,KAAK,CAACC,MAAM,CAAC/D,EAAE;EAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}