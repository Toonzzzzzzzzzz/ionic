{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaModResource:';\n/**\n * Service that provides some features for resources.\n */\nexport class AddonModResourceProvider {\n  /**\n   * Get cache key for resource data WS calls.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getResourceCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'resource:' + courseId;\n  }\n  /**\n   * Get a resource data.\n   *\n   * @param courseId Course ID.\n   * @param key Name of the property to check.\n   * @param value Value to search.\n   * @param options Other options.\n   * @returns Promise resolved when the resource is retrieved.\n   */\n  getResourceDataByKey(courseId, key, value, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        courseids: [courseId]\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this.getResourceCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: AddonModResourceProvider.COMPONENT\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_resource_get_resources_by_courses', params, preSets);\n      const currentResource = response.resources.find(resource => resource[key] == value);\n      if (currentResource) {\n        return currentResource;\n      }\n      throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    })();\n  }\n  /**\n   * Get a resource by course module ID.\n   *\n   * @param courseId Course ID.\n   * @param cmId Course module ID.\n   * @param options Other options.\n   * @returns Promise resolved when the resource is retrieved.\n   */\n  getResourceData(courseId, cmId, options = {}) {\n    return this.getResourceDataByKey(courseId, 'coursemodule', cmId, options);\n  }\n  /**\n   * Invalidate the prefetched content.\n   *\n   * @param moduleId The module ID.\n   * @param courseId Course ID of the module.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateContent(moduleId, courseId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const promises = [];\n      promises.push(_this2.invalidateResourceData(courseId, siteId));\n      promises.push(CoreFilepool.invalidateFilesByComponent(siteId, AddonModResourceProvider.COMPONENT, moduleId));\n      promises.push(CoreCourse.invalidateModule(moduleId, siteId, 'resource'));\n      yield CoreUtils.allPromises(promises);\n    })();\n  }\n  /**\n   * Invalidates resource data.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateResourceData(courseId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this3.getResourceCacheKey(courseId));\n    })();\n  }\n  /**\n   * Return whether or not the plugin is enabled.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with true if plugin is enabled, rejected or resolved with false otherwise.\n   */\n  isPluginEnabled(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.canDownloadFiles();\n    })();\n  }\n  /**\n   * Report the resource as being viewed.\n   *\n   * @param id Module ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logView(id, siteId) {\n    return _asyncToGenerator(function* () {\n      const params = {\n        resourceid: id\n      };\n      yield CoreCourseLogHelper.log('mod_resource_view_resource', params, AddonModResourceProvider.COMPONENT, id, siteId);\n    })();\n  }\n}\n_class = AddonModResourceProvider;\n_class.COMPONENT = 'mmaModResource';\n_class.ɵfac = function AddonModResourceProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModResource = makeSingleton(AddonModResourceProvider);","map":{"version":3,"names":["CoreError","CoreSite","CoreCourse","CoreCourseLogHelper","CoreFilepool","CoreSites","CoreUtils","makeSingleton","Translate","ROOT_CACHE_KEY","AddonModResourceProvider","getResourceCacheKey","courseId","getResourceDataByKey","key","value","options","_this","_asyncToGenerator","site","getSite","siteId","params","courseids","preSets","_objectSpread","cacheKey","updateFrequency","FREQUENCY_RARELY","component","COMPONENT","getReadingStrategyPreSets","readingStrategy","response","read","currentResource","resources","find","resource","instant","getResourceData","cmId","invalidateContent","moduleId","_this2","getCurrentSiteId","promises","push","invalidateResourceData","invalidateFilesByComponent","invalidateModule","allPromises","_this3","invalidateWsCacheForKey","isPluginEnabled","canDownloadFiles","logView","id","resourceid","log","_class","factory","ɵfac","providedIn","AddonModResource"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/resource/services/resource.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites, CoreSitesCommonWSOptions } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSExternalFile, CoreWSExternalWarning } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\n\nconst ROOT_CACHE_KEY = 'mmaModResource:';\n\n/**\n * Service that provides some features for resources.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModResourceProvider {\n\n    static readonly COMPONENT = 'mmaModResource';\n\n    /**\n     * Get cache key for resource data WS calls.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getResourceCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'resource:' + courseId;\n    }\n\n    /**\n     * Get a resource data.\n     *\n     * @param courseId Course ID.\n     * @param key Name of the property to check.\n     * @param value Value to search.\n     * @param options Other options.\n     * @returns Promise resolved when the resource is retrieved.\n     */\n    protected async getResourceDataByKey(\n        courseId: number,\n        key: string,\n        value: number,\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<AddonModResourceResource> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModResourceGetResourcesByCoursesWSParams = {\n            courseids: [courseId],\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getResourceCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: AddonModResourceProvider.COMPONENT,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy),\n        };\n\n        const response = await site.read<AddonModResourceGetResourcesByCoursesWSResponse>(\n            'mod_resource_get_resources_by_courses',\n            params,\n            preSets,\n        );\n\n        const currentResource = response.resources.find((resource) => resource[key] == value);\n        if (currentResource) {\n            return currentResource;\n        }\n\n        throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    }\n\n    /**\n     * Get a resource by course module ID.\n     *\n     * @param courseId Course ID.\n     * @param cmId Course module ID.\n     * @param options Other options.\n     * @returns Promise resolved when the resource is retrieved.\n     */\n    getResourceData(courseId: number, cmId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModResourceResource> {\n        return this.getResourceDataByKey(courseId, 'coursemodule', cmId, options);\n    }\n\n    /**\n     * Invalidate the prefetched content.\n     *\n     * @param moduleId The module ID.\n     * @param courseId Course ID of the module.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateContent(moduleId: number, courseId: number, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const promises: Promise<void>[] = [];\n\n        promises.push(this.invalidateResourceData(courseId, siteId));\n        promises.push(CoreFilepool.invalidateFilesByComponent(siteId, AddonModResourceProvider.COMPONENT, moduleId));\n        promises.push(CoreCourse.invalidateModule(moduleId, siteId, 'resource'));\n\n        await CoreUtils.allPromises(promises);\n    }\n\n    /**\n     * Invalidates resource data.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateResourceData(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getResourceCacheKey(courseId));\n    }\n\n    /**\n     * Return whether or not the plugin is enabled.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with true if plugin is enabled, rejected or resolved with false otherwise.\n     */\n    async isPluginEnabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.canDownloadFiles();\n    }\n\n    /**\n     * Report the resource as being viewed.\n     *\n     * @param id Module ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logView(id: number, siteId?: string): Promise<void> {\n        const params: AddonModResourceViewResourceWSParams = {\n            resourceid: id,\n        };\n\n        await CoreCourseLogHelper.log(\n            'mod_resource_view_resource',\n            params,\n            AddonModResourceProvider.COMPONENT,\n            id,\n            siteId,\n        );\n    }\n\n}\nexport const AddonModResource = makeSingleton(AddonModResourceProvider);\n\n/**\n * Params of mod_resource_view_resource WS.\n */\ntype AddonModResourceViewResourceWSParams = {\n    resourceid: number; // Resource instance id.\n};\n\n/**\n * Resource returned by mod_resource_get_resources_by_courses.\n */\nexport type AddonModResourceResource = {\n    id: number; // Module id.\n    coursemodule: number; // Course module id.\n    course: number; // Course id.\n    name: string; // Page name.\n    intro: string; // Summary.\n    introformat: number; // Intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    introfiles: CoreWSExternalFile[];\n    contentfiles: CoreWSExternalFile[];\n    tobemigrated: number; // Whether this resource was migrated.\n    legacyfiles: number; // Legacy files flag.\n    legacyfileslast: number; // Legacy files last control flag.\n    display: number; // How to display the resource.\n    displayoptions: string; // Display options (width, height).\n    filterfiles: number; // If filters should be applied to the resource content.\n    revision: number; // Incremented when after each file changes, to avoid cache.\n    timemodified: number; // Last time the resource was modified.\n    section: number; // Course section id.\n    visible: number; // Module visibility.\n    groupmode: number; // Group mode.\n    groupingid: number; // Grouping id.\n};\n\nexport type AddonModResourceCustomData = {\n    filedetails?: {\n        isref?: boolean; // If file is a reference the 'size' or 'date' attribute can not be cached.\n        // If showsize is true.\n        size?: number; // Size in bytes.\n        // If showtype is true.\n        type?: string; // Mimetype description (already translated).\n        mimetype?: string; // @since LMS 3.7\n        extension?: string; // @since LMS 4.3\n        // If showdate is true.\n        modifieddate?: number; // Only if file has been modified.\n        uploadeddate?: number; // Only if file has NOT been modified.\n\n    };\n    showsize?: boolean;\n    showtype?: boolean;\n    showdate?: boolean;\n    printintro?: boolean;\n};\n\n/**\n * Params of mod_resource_get_resources_by_courses WS.\n */\ntype AddonModResourceGetResourcesByCoursesWSParams = {\n    courseids?: number[]; // Array of course ids.\n};\n\n/**\n * Data returned by mod_resource_get_resources_by_courses WS.\n */\ntype AddonModResourceGetResourcesByCoursesWSResponse = {\n    resources: AddonModResourceResource[];\n    warnings?: CoreWSExternalWarning[];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}