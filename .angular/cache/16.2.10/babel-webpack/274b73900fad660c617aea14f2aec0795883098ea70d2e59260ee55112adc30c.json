{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreSiteError } from '@classes/errors/siteerror';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreUserAuthenticatedSupportConfig } from '@features/user/classes/support/authenticated-support-config';\nimport { CoreUserNullSupportConfig } from '@features/user/classes/support/null-support-config';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { CoreCustomURLSchemes } from '@services/urlschemes';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nlet lastInAppUrl = null;\n/**\n *\n */\nexport default function () {\n  // Check URLs loaded in any InAppBrowser.\n  CoreEvents.on(CoreEvents.IAB_LOAD_START, /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (event) {\n      // URLs with a custom scheme can be prefixed with \"http://\" or \"https://\", we need to remove this.\n      const protocol = CoreUrlUtils.getUrlProtocol(event.url);\n      const url = event.url.replace(/^https?:\\/\\//, '');\n      const urlScheme = CoreUrlUtils.getUrlProtocol(url);\n      const isExternalApp = urlScheme && urlScheme !== 'file' && urlScheme !== 'cdvfile';\n      if (CoreCustomURLSchemes.isCustomURL(url)) {\n        // Close the browser if it's a valid SSO URL.\n        CoreCustomURLSchemes.handleCustomURL(url).catch(error => {\n          CoreCustomURLSchemes.treatHandleCustomURLError(error);\n        });\n        CoreUtils.closeInAppBrowser();\n        return;\n      }\n      if (isExternalApp && url.includes('://token=')) {\n        // It's an SSO token for another app. Close the IAB and show an error.\n        CoreUtils.closeInAppBrowser();\n        CoreDomUtils.showErrorModal(new CoreSiteError({\n          supportConfig: CoreSites.getCurrentSite() ? CoreUserAuthenticatedSupportConfig.forCurrentSite() : new CoreUserNullSupportConfig(),\n          message: Translate.instant('core.errorurlschemeinvalidscheme', {\n            $a: urlScheme\n          })\n        }));\n        return;\n      }\n      if (!CorePlatform.isAndroid()) {\n        return;\n      }\n      // Check if the URL has a custom URL scheme. In Android they need to be opened manually.\n      if (!isExternalApp) {\n        lastInAppUrl = protocol ? `${protocol}://${url}` : url;\n        return;\n      }\n      // Open in browser should launch the right app if found and do nothing if not found.\n      CoreUtils.openInBrowser(url, {\n        showBrowserWarning: false\n      });\n      // At this point the InAppBrowser is showing a \"Webpage not available\" error message.\n      // Try to navigate to last loaded URL so this error message isn't found.\n      if (lastInAppUrl) {\n        CoreUtils.openInApp(lastInAppUrl);\n      } else {\n        // No last URL loaded, close the InAppBrowser.\n        CoreUtils.closeInAppBrowser();\n      }\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  // Check InAppBrowser closed.\n  CoreEvents.on(CoreEvents.IAB_EXIT, () => {\n    lastInAppUrl = null;\n    if (CoreLoginHelper.isWaitingForBrowser()) {\n      CoreLoginHelper.stopWaitingForBrowser();\n      CoreLoginHelper.checkLogout();\n    }\n  });\n}","map":{"version":3,"names":["CoreSiteError","CoreLoginHelper","CoreUserAuthenticatedSupportConfig","CoreUserNullSupportConfig","CorePlatform","CoreSites","CoreCustomURLSchemes","CoreDomUtils","CoreUrlUtils","CoreUtils","Translate","CoreEvents","lastInAppUrl","on","IAB_LOAD_START","_ref","_asyncToGenerator","event","protocol","getUrlProtocol","url","replace","urlScheme","isExternalApp","isCustomURL","handleCustomURL","catch","error","treatHandleCustomURLError","closeInAppBrowser","includes","showErrorModal","supportConfig","getCurrentSite","forCurrentSite","message","instant","$a","isAndroid","openInBrowser","showBrowserWarning","openInApp","_x","apply","arguments","IAB_EXIT","isWaitingForBrowser","stopWaitingForBrowser","checkLogout"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/initializers/prepare-inapp-browser.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSiteError } from '@classes/errors/siteerror';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreUserAuthenticatedSupportConfig } from '@features/user/classes/support/authenticated-support-config';\nimport { CoreUserNullSupportConfig } from '@features/user/classes/support/null-support-config';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { CoreCustomURLSchemes } from '@services/urlschemes';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\n\nlet lastInAppUrl: string | null = null;\n\n/**\n *\n */\nexport default function(): void {\n    // Check URLs loaded in any InAppBrowser.\n    CoreEvents.on(CoreEvents.IAB_LOAD_START, async (event) => {\n        // URLs with a custom scheme can be prefixed with \"http://\" or \"https://\", we need to remove this.\n        const protocol = CoreUrlUtils.getUrlProtocol(event.url);\n        const url = event.url.replace(/^https?:\\/\\//, '');\n        const urlScheme = CoreUrlUtils.getUrlProtocol(url);\n        const isExternalApp = urlScheme && urlScheme !== 'file' && urlScheme !== 'cdvfile';\n\n        if (CoreCustomURLSchemes.isCustomURL(url)) {\n            // Close the browser if it's a valid SSO URL.\n            CoreCustomURLSchemes.handleCustomURL(url).catch((error) => {\n                CoreCustomURLSchemes.treatHandleCustomURLError(error);\n            });\n            CoreUtils.closeInAppBrowser();\n\n            return;\n        }\n\n        if (isExternalApp && url.includes('://token=')) {\n            // It's an SSO token for another app. Close the IAB and show an error.\n            CoreUtils.closeInAppBrowser();\n            CoreDomUtils.showErrorModal(new CoreSiteError({\n                supportConfig: CoreSites.getCurrentSite()\n                    ? CoreUserAuthenticatedSupportConfig.forCurrentSite()\n                    : new CoreUserNullSupportConfig(),\n                message: Translate.instant('core.errorurlschemeinvalidscheme', { $a: urlScheme }),\n            }));\n\n            return;\n        }\n\n        if (!CorePlatform.isAndroid()) {\n            return;\n        }\n\n        // Check if the URL has a custom URL scheme. In Android they need to be opened manually.\n        if (!isExternalApp) {\n            lastInAppUrl = protocol ? `${protocol}://${url}` : url;\n\n            return;\n        }\n\n        // Open in browser should launch the right app if found and do nothing if not found.\n        CoreUtils.openInBrowser(url, { showBrowserWarning: false });\n\n        // At this point the InAppBrowser is showing a \"Webpage not available\" error message.\n        // Try to navigate to last loaded URL so this error message isn't found.\n        if (lastInAppUrl) {\n            CoreUtils.openInApp(lastInAppUrl);\n        } else {\n            // No last URL loaded, close the InAppBrowser.\n            CoreUtils.closeInAppBrowser();\n        }\n    });\n\n    // Check InAppBrowser closed.\n    CoreEvents.on(CoreEvents.IAB_EXIT, () => {\n        lastInAppUrl = null;\n\n        if (CoreLoginHelper.isWaitingForBrowser()) {\n            CoreLoginHelper.stopWaitingForBrowser();\n            CoreLoginHelper.checkLogout();\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}