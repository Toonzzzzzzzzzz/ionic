{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModH5PActivity } from '../h5pactivity';\nimport { AddonModH5PActivityModuleHandlerService } from './module';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to treat links to H5P activity report.\n */\nexport class AddonModH5PActivityReportLinkHandlerService extends CoreContentLinksHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModH5PActivityReportLinkHandler';\n    this.featureName = 'CoreCourseModuleDelegate_AddonModH5PActivity';\n    this.pattern = /\\/mod\\/h5pactivity\\/report\\.php.*([&?]a=\\d+)/;\n  }\n  /**\n   * @inheritdoc\n   */\n  getActions(siteIds, url, params) {\n    var _this = this;\n    return [{\n      action: function () {\n        var _ref = _asyncToGenerator(function* (siteId) {\n          const modal = yield CoreDomUtils.showModalLoading();\n          try {\n            const instanceId = Number(params.a);\n            const module = yield CoreCourse.getModuleBasicInfoByInstance(instanceId, 'h5pactivity', {\n              siteId,\n              readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n            });\n            if (params.attemptid !== undefined) {\n              _this.openAttemptResults(module.id, Number(params.attemptid), module.course, siteId);\n            } else {\n              const userId = params.userid ? Number(params.userid) : undefined;\n              yield _this.openUserAttempts(module.id, module.course, instanceId, siteId, userId);\n            }\n          } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error processing link.');\n          } finally {\n            modal.dismiss();\n          }\n        });\n        return function action(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    }];\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return AddonModH5PActivity.isPluginEnabled();\n  }\n  /**\n   * Open attempt results.\n   *\n   * @param cmId Module ID.\n   * @param attemptId Attempt ID.\n   * @param courseId Course ID.\n   * @param siteId Site ID.\n   */\n  openAttemptResults(cmId, attemptId, courseId, siteId) {\n    const path = AddonModH5PActivityModuleHandlerService.PAGE_NAME + `/${courseId}/${cmId}/attemptresults/${attemptId}`;\n    CoreNavigator.navigateToSitePath(path, {\n      siteId\n    });\n  }\n  /**\n   * Open user attempts.\n   *\n   * @param cmId Module ID.\n   * @param courseId Course ID.\n   * @param id Instance ID.\n   * @param siteId Site ID.\n   * @param userId User ID. If not defined, current user in site.\n   * @returns Promise resolved when done.\n   */\n  openUserAttempts(cmId, courseId, id, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      let canViewAllAttempts = false;\n      if (!userId) {\n        // No user ID specified. Check if current user can view all attempts.\n        userId = CoreSites.getCurrentSiteUserId();\n        canViewAllAttempts = yield AddonModH5PActivity.canGetUsersAttempts(siteId);\n        if (canViewAllAttempts) {\n          const accessInfo = yield CoreUtils.ignoreErrors(AddonModH5PActivity.getAccessInformation(id, {\n            cmId,\n            siteId\n          }));\n          canViewAllAttempts = !!(accessInfo !== null && accessInfo !== void 0 && accessInfo.canreviewattempts);\n        }\n      }\n      let path;\n      if (canViewAllAttempts) {\n        path = `${AddonModH5PActivityModuleHandlerService.PAGE_NAME}/${courseId}/${cmId}/users`;\n      } else {\n        path = `${AddonModH5PActivityModuleHandlerService.PAGE_NAME}/${courseId}/${cmId}/userattempts/${userId}`;\n      }\n      CoreNavigator.navigateToSitePath(path, {\n        siteId\n      });\n    })();\n  }\n}\n_class = AddonModH5PActivityReportLinkHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModH5PActivityReportLinkHandlerService_BaseFactory;\n  return function AddonModH5PActivityReportLinkHandlerService_Factory(t) {\n    return (ɵAddonModH5PActivityReportLinkHandlerService_BaseFactory || (ɵAddonModH5PActivityReportLinkHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModH5PActivityReportLinkHandler = makeSingleton(AddonModH5PActivityReportLinkHandlerService);","map":{"version":3,"names":["CoreContentLinksHandlerBase","CoreCourse","CoreNavigator","CoreSites","CoreDomUtils","CoreUtils","makeSingleton","AddonModH5PActivity","AddonModH5PActivityModuleHandlerService","AddonModH5PActivityReportLinkHandlerService","constructor","name","featureName","pattern","getActions","siteIds","url","params","_this","action","_ref","_asyncToGenerator","siteId","modal","showModalLoading","instanceId","Number","a","module","getModuleBasicInfoByInstance","readingStrategy","attemptid","undefined","openAttemptResults","id","course","userId","userid","openUserAttempts","error","showErrorModalDefault","dismiss","_x","apply","arguments","isEnabled","isPluginEnabled","cmId","attemptId","courseId","path","PAGE_NAME","navigateToSitePath","canViewAllAttempts","getCurrentSiteUserId","canGetUsersAttempts","accessInfo","ignoreErrors","getAccessInformation","canreviewattempts","t","factory","ɵfac","providedIn","AddonModH5PActivityReportLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/h5pactivity/services/handlers/report-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModH5PActivity } from '../h5pactivity';\nimport { AddonModH5PActivityModuleHandlerService } from './module';\n\n/**\n * Handler to treat links to H5P activity report.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModH5PActivityReportLinkHandlerService extends CoreContentLinksHandlerBase {\n\n    name = 'AddonModH5PActivityReportLinkHandler';\n    featureName = 'CoreCourseModuleDelegate_AddonModH5PActivity';\n    pattern = /\\/mod\\/h5pactivity\\/report\\.php.*([&?]a=\\d+)/;\n\n    /**\n     * @inheritdoc\n     */\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Record<string, string>,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n        return [{\n            action: async (siteId) => {\n                const modal = await CoreDomUtils.showModalLoading();\n\n                try {\n                    const instanceId = Number(params.a);\n\n                    const module = await CoreCourse.getModuleBasicInfoByInstance(\n                        instanceId,\n                        'h5pactivity',\n                        { siteId, readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE },\n                    );\n\n                    if (params.attemptid !== undefined) {\n                        this.openAttemptResults(module.id, Number(params.attemptid), module.course, siteId);\n                    } else {\n                        const userId = params.userid ? Number(params.userid) : undefined;\n\n                        await this.openUserAttempts(module.id, module.course, instanceId, siteId, userId);\n                    }\n                } catch (error) {\n                    CoreDomUtils.showErrorModalDefault(error, 'Error processing link.');\n                } finally {\n                    modal.dismiss();\n                }\n            },\n        }];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isEnabled(): Promise<boolean> {\n        return AddonModH5PActivity.isPluginEnabled();\n    }\n\n    /**\n     * Open attempt results.\n     *\n     * @param cmId Module ID.\n     * @param attemptId Attempt ID.\n     * @param courseId Course ID.\n     * @param siteId Site ID.\n     */\n    protected openAttemptResults(cmId: number, attemptId: number, courseId: number, siteId: string): void {\n        const path = AddonModH5PActivityModuleHandlerService.PAGE_NAME + `/${courseId}/${cmId}/attemptresults/${attemptId}`;\n\n        CoreNavigator.navigateToSitePath(path, {\n            siteId,\n        });\n    }\n\n    /**\n     * Open user attempts.\n     *\n     * @param cmId Module ID.\n     * @param courseId Course ID.\n     * @param id Instance ID.\n     * @param siteId Site ID.\n     * @param userId User ID. If not defined, current user in site.\n     * @returns Promise resolved when done.\n     */\n    protected async openUserAttempts(cmId: number, courseId: number, id: number, siteId: string, userId?: number): Promise<void> {\n        let canViewAllAttempts = false;\n\n        if (!userId) {\n            // No user ID specified. Check if current user can view all attempts.\n            userId = CoreSites.getCurrentSiteUserId();\n            canViewAllAttempts = await AddonModH5PActivity.canGetUsersAttempts(siteId);\n\n            if (canViewAllAttempts) {\n                const accessInfo = await CoreUtils.ignoreErrors(AddonModH5PActivity.getAccessInformation(id, {\n                    cmId,\n                    siteId,\n                }));\n\n                canViewAllAttempts = !!accessInfo?.canreviewattempts;\n            }\n        }\n\n        let path: string;\n        if (canViewAllAttempts) {\n            path = `${AddonModH5PActivityModuleHandlerService.PAGE_NAME}/${courseId}/${cmId}/users`;\n        } else {\n            path = `${AddonModH5PActivityModuleHandlerService.PAGE_NAME}/${courseId}/${cmId}/userattempts/${userId}`;\n        }\n\n        CoreNavigator.navigateToSitePath(path, {\n            siteId,\n        });\n    }\n\n}\n\nexport const AddonModH5PActivityReportLinkHandler = makeSingleton(AddonModH5PActivityReportLinkHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}