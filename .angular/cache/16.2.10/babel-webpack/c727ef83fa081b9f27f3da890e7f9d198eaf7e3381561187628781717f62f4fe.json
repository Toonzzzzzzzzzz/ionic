{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreError } from '@classes/errors/error';\nimport { CoreFile } from '@services/file';\nimport { Translate } from '@singletons';\nimport { CorePath } from '@singletons/path';\nimport { CoreH5PCore } from './core';\n/**\n * Equivalent to H5P's H5PValidator class.\n */\nexport class CoreH5PValidator {\n  constructor(h5pFramework) {\n    this.h5pFramework = h5pFramework;\n  }\n  /**\n   * Get library data.\n   * This function won't validate most things because it should've been done by the server already.\n   *\n   * @param libDir Directory where the library files are.\n   * @param libPath Path to the directory where the library files are.\n   * @returns Promise resolved with library data.\n   */\n  getLibraryData(libDir, libPath) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Read the required files.\n      const results = yield Promise.all([_this.readLibraryJsonFile(libPath), _this.readLibrarySemanticsFile(libPath), _this.readLibraryLanguageFiles(libPath), _this.libraryHasIcon(libPath)]);\n      const libraryData = results[0];\n      libraryData.semantics = results[1];\n      libraryData.language = results[2];\n      libraryData.hasIcon = results[3];\n      return libraryData;\n    })();\n  }\n  /**\n   * Use the dependency declarations to find any missing libraries.\n   *\n   * @param libraries Libraries to check.\n   * @returns Promise resolved with the missing dependencies.\n   */\n  getMissingLibraries(libraries) {\n    const missing = {};\n    Object.values(libraries).forEach(library => {\n      if (library.preloadedDependencies !== undefined) {\n        Object.assign(missing, this.getMissingDependencies(library.preloadedDependencies, library, libraries));\n      }\n      if (library.dynamicDependencies !== undefined) {\n        Object.assign(missing, this.getMissingDependencies(library.dynamicDependencies, library, libraries));\n      }\n      if (library.editorDependencies !== undefined) {\n        Object.assign(missing, this.getMissingDependencies(library.editorDependencies, library, libraries));\n      }\n    });\n    return missing;\n  }\n  /**\n   * Helper function for getMissingLibraries, searches for dependency required libraries in the provided list of libraries.\n   *\n   * @param dependencies Dependencies to check.\n   * @param library Library that has these dependencies.\n   * @param libraries Libraries.\n   * @returns Promise resolved with missing dependencies.\n   */\n  getMissingDependencies(dependencies, library, libraries) {\n    const missing = {};\n    dependencies.forEach(dependency => {\n      const libString = CoreH5PCore.libraryToString(dependency);\n      if (!libraries[libString]) {\n        missing[libString] = Object.assign(dependency, {\n          libString: CoreH5PCore.libraryToString(library)\n        });\n      }\n    });\n    return missing;\n  }\n  /**\n   * Get library data for all libraries in an H5P package.\n   *\n   * @param packagePath The path to the package folder.\n   * @param entries List of files and directories in the root of the package folder.\n   * @returns Promise resolved with the libraries data.\n   */\n  getPackageLibrariesData(packagePath, entries) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const libraries = {};\n      yield Promise.all(entries.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (entry) {\n          if (entry.name[0] == '.' || entry.name[0] == '_' || entry.name == 'content' || entry.isFile) {\n            // Skip files, the content folder and any folder starting with a . or _.\n            return;\n          }\n          const libDirPath = CorePath.concatenatePaths(packagePath, entry.name);\n          const libraryData = yield _this2.getLibraryData(entry, libDirPath);\n          libraryData.uploadDirectory = libDirPath;\n          libraries[CoreH5PCore.libraryToString(libraryData)] = libraryData;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      return libraries;\n    })();\n  }\n  /**\n   * Check if the library has an icon file.\n   *\n   * @param libPath Path to the directory where the library files are.\n   * @returns Promise resolved with boolean: whether the library has an icon file.\n   */\n  libraryHasIcon(libPath) {\n    return _asyncToGenerator(function* () {\n      const path = CorePath.concatenatePaths(libPath, 'icon.svg');\n      try {\n        // Check if the file exists.\n        yield CoreFile.getFile(path);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    })();\n  }\n  /**\n   * Process libraries from an H5P library, getting the required data to save them.\n   * This code is inspired on the isValidPackage function in Moodle's H5PValidator.\n   * This function won't validate most things because it should've been done by the server already.\n   *\n   * @param packagePath The path to the package folder.\n   * @param entries List of files and directories in the root of the package folder.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  processH5PFiles(packagePath, entries, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // Read the needed files.\n      const results = yield Promise.all([_this3.readH5PJsonFile(packagePath), _this3.readH5PContentJsonFile(packagePath), _this3.getPackageLibrariesData(packagePath, entries)]);\n      // Check if there are missing libraries.\n      const missingLibraries = _this3.getMissingLibraries(results[2]);\n      // Check if the missing libraries are already installed in the app.\n      yield Promise.all(Object.keys(missingLibraries).map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (libString) {\n          const dependency = missingLibraries[libString];\n          const dependencyId = yield _this3.h5pFramework.getLibraryIdByData(dependency, siteId);\n          if (dependencyId) {\n            // Lib is installed.\n            delete missingLibraries[libString];\n          }\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      if (Object.keys(missingLibraries).length > 0) {\n        // Missing library, throw error.\n        const libString = Object.keys(missingLibraries)[0];\n        const missingLibrary = missingLibraries[libString];\n        throw new CoreError(Translate.instant('core.h5p.missingdependency', {\n          $a: {\n            lib: missingLibrary.libString,\n            dep: libString\n          }\n        }));\n      }\n      return {\n        librariesJsonData: results[2],\n        mainJsonData: results[0],\n        contentJsonData: results[1]\n      };\n    })();\n  }\n  /**\n   * Read content.json file and return its parsed contents.\n   *\n   * @param packagePath The path to the package folder.\n   * @returns Promise resolved with the parsed file contents.\n   */\n  readH5PContentJsonFile(packagePath) {\n    const path = CorePath.concatenatePaths(packagePath, 'content/content.json');\n    return CoreFile.readFile(path, 4 /* CoreFileFormat.FORMATJSON */);\n  }\n  /**\n   * Read h5p.json file and return its parsed contents.\n   *\n   * @param packagePath The path to the package folder.\n   * @returns Promise resolved with the parsed file contents.\n   */\n  readH5PJsonFile(packagePath) {\n    const path = CorePath.concatenatePaths(packagePath, 'h5p.json');\n    return CoreFile.readFile(path, 4 /* CoreFileFormat.FORMATJSON */);\n  }\n  /**\n   * Read library.json file and return its parsed contents.\n   *\n   * @param libPath Path to the directory where the library files are.\n   * @returns Promise resolved with the parsed file contents.\n   */\n  readLibraryJsonFile(libPath) {\n    const path = CorePath.concatenatePaths(libPath, 'library.json');\n    return CoreFile.readFile(path, 4 /* CoreFileFormat.FORMATJSON */);\n  }\n  /**\n   * Read all language files and return their contents indexed by language code.\n   *\n   * @param libPath Path to the directory where the library files are.\n   * @returns Promise resolved with the language data.\n   */\n  readLibraryLanguageFiles(libPath) {\n    return _asyncToGenerator(function* () {\n      try {\n        const path = CorePath.concatenatePaths(libPath, 'language');\n        const langIndex = {};\n        // Read all the files in the language directory.\n        const entries = yield CoreFile.getDirectoryContents(path);\n        yield Promise.all(entries.map( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (entry) {\n            const langFilePath = CorePath.concatenatePaths(path, entry.name);\n            try {\n              const langFileData = yield CoreFile.readFile(langFilePath, 4 /* CoreFileFormat.FORMATJSON */);\n              const parts = entry.name.split('.'); // The language code is in parts[0].\n              langIndex[parts[0]] = langFileData;\n            } catch (_unused) {\n              // Ignore this language.\n            }\n          });\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }()));\n        return langIndex;\n      } catch (error) {\n        // Probably doesn't exist, ignore.\n      }\n    })();\n  }\n  /**\n   * Read semantics.json file and return its parsed contents.\n   *\n   * @param libPath Path to the directory where the library files are.\n   * @returns Promise resolved with the parsed file contents.\n   */\n  readLibrarySemanticsFile(libPath) {\n    return _asyncToGenerator(function* () {\n      try {\n        const path = CorePath.concatenatePaths(libPath, 'semantics.json');\n        return yield CoreFile.readFile(path, 4 /* CoreFileFormat.FORMATJSON */);\n      } catch (error) {\n        // Probably doesn't exist, ignore.\n      }\n    })();\n  }\n}","map":{"version":3,"names":["CoreError","CoreFile","Translate","CorePath","CoreH5PCore","CoreH5PValidator","constructor","h5pFramework","getLibraryData","libDir","libPath","_this","_asyncToGenerator","results","Promise","all","readLibraryJsonFile","readLibrarySemanticsFile","readLibraryLanguageFiles","libraryHasIcon","libraryData","semantics","language","hasIcon","getMissingLibraries","libraries","missing","Object","values","forEach","library","preloadedDependencies","undefined","assign","getMissingDependencies","dynamicDependencies","editorDependencies","dependencies","dependency","libString","libraryToString","getPackageLibrariesData","packagePath","entries","_this2","map","_ref","entry","name","isFile","libDirPath","concatenatePaths","uploadDirectory","_x","apply","arguments","path","getFile","error","processH5PFiles","siteId","_this3","readH5PJsonFile","readH5PContentJsonFile","missingLibraries","keys","_ref2","dependencyId","getLibraryIdByData","_x2","length","missingLibrary","instant","$a","lib","dep","librariesJsonData","mainJsonData","contentJsonData","readFile","langIndex","getDirectoryContents","_ref3","langFilePath","langFileData","parts","split","_unused","_x3"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/h5p/classes/validator.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreError } from '@classes/errors/error';\nimport { FileEntry, DirectoryEntry } from '@awesome-cordova-plugins/file/ngx';\nimport { CoreFile, CoreFileFormat } from '@services/file';\nimport { Translate } from '@singletons';\nimport { CorePath } from '@singletons/path';\nimport { CoreH5PSemantics } from './content-validator';\nimport { CoreH5PCore, CoreH5PLibraryBasicData, CoreH5PMissingLibrary } from './core';\nimport { CoreH5PFramework } from './framework';\n\n/**\n * Equivalent to H5P's H5PValidator class.\n */\nexport class CoreH5PValidator {\n\n    constructor(public h5pFramework: CoreH5PFramework) {\n    }\n\n    /**\n     * Get library data.\n     * This function won't validate most things because it should've been done by the server already.\n     *\n     * @param libDir Directory where the library files are.\n     * @param libPath Path to the directory where the library files are.\n     * @returns Promise resolved with library data.\n     */\n    protected async getLibraryData(libDir: DirectoryEntry, libPath: string): Promise<CoreH5PLibraryJsonData> {\n\n        // Read the required files.\n        const results = await Promise.all([\n            this.readLibraryJsonFile(libPath),\n            this.readLibrarySemanticsFile(libPath),\n            this.readLibraryLanguageFiles(libPath),\n            this.libraryHasIcon(libPath),\n        ]);\n\n        const libraryData: CoreH5PLibraryJsonData = results[0];\n        libraryData.semantics = results[1];\n        libraryData.language = results[2];\n        libraryData.hasIcon = results[3];\n\n        return libraryData;\n    }\n\n    /**\n     * Use the dependency declarations to find any missing libraries.\n     *\n     * @param libraries Libraries to check.\n     * @returns Promise resolved with the missing dependencies.\n     */\n    protected getMissingLibraries(libraries: CoreH5PLibrariesJsonData): Record<string, CoreH5PMissingLibrary> {\n        const missing: Record<string, CoreH5PMissingLibrary> = {};\n\n        Object.values(libraries).forEach((library) => {\n            if (library.preloadedDependencies !== undefined) {\n                Object.assign(missing, this.getMissingDependencies(library.preloadedDependencies, library, libraries));\n            }\n            if (library.dynamicDependencies !== undefined) {\n                Object.assign(missing, this.getMissingDependencies(library.dynamicDependencies, library, libraries));\n            }\n            if (library.editorDependencies !== undefined) {\n                Object.assign(missing, this.getMissingDependencies(library.editorDependencies, library, libraries));\n            }\n        });\n\n        return missing;\n    }\n\n    /**\n     * Helper function for getMissingLibraries, searches for dependency required libraries in the provided list of libraries.\n     *\n     * @param dependencies Dependencies to check.\n     * @param library Library that has these dependencies.\n     * @param libraries Libraries.\n     * @returns Promise resolved with missing dependencies.\n     */\n    protected getMissingDependencies(\n        dependencies: CoreH5PLibraryBasicData[],\n        library: CoreH5PLibraryJsonData,\n        libraries: CoreH5PLibrariesJsonData,\n    ): Record<string, CoreH5PLibraryBasicData> {\n        const missing: Record<string, CoreH5PMissingLibrary> = {};\n\n        dependencies.forEach((dependency) => {\n            const libString  = CoreH5PCore.libraryToString(dependency);\n            if (!libraries[libString]) {\n                missing[libString] = Object.assign(dependency, {\n                    libString: CoreH5PCore.libraryToString(library),\n                });\n            }\n        });\n\n        return missing;\n    }\n\n    /**\n     * Get library data for all libraries in an H5P package.\n     *\n     * @param packagePath The path to the package folder.\n     * @param entries List of files and directories in the root of the package folder.\n     * @returns Promise resolved with the libraries data.\n     */\n    protected async getPackageLibrariesData(\n        packagePath: string,\n        entries: (DirectoryEntry | FileEntry)[],\n    ): Promise<CoreH5PLibrariesJsonData> {\n\n        const libraries: CoreH5PLibrariesJsonData = {};\n\n        await Promise.all(entries.map(async (entry) => {\n            if (entry.name[0] == '.' || entry.name[0] == '_' || entry.name == 'content' || entry.isFile) {\n                // Skip files, the content folder and any folder starting with a . or _.\n                return;\n            }\n\n            const libDirPath = CorePath.concatenatePaths(packagePath, entry.name);\n\n            const libraryData = await this.getLibraryData(<DirectoryEntry> entry, libDirPath);\n\n            libraryData.uploadDirectory = libDirPath;\n            libraries[CoreH5PCore.libraryToString(libraryData)] = libraryData;\n        }));\n\n        return libraries;\n    }\n\n    /**\n     * Check if the library has an icon file.\n     *\n     * @param libPath Path to the directory where the library files are.\n     * @returns Promise resolved with boolean: whether the library has an icon file.\n     */\n    protected async libraryHasIcon(libPath: string): Promise<boolean> {\n        const path = CorePath.concatenatePaths(libPath, 'icon.svg');\n\n        try {\n            // Check if the file exists.\n            await CoreFile.getFile(path);\n\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * Process libraries from an H5P library, getting the required data to save them.\n     * This code is inspired on the isValidPackage function in Moodle's H5PValidator.\n     * This function won't validate most things because it should've been done by the server already.\n     *\n     * @param packagePath The path to the package folder.\n     * @param entries List of files and directories in the root of the package folder.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async processH5PFiles(\n        packagePath: string,\n        entries: (DirectoryEntry | FileEntry)[],\n        siteId?: string,\n    ): Promise<CoreH5PMainJSONFilesData> {\n\n        // Read the needed files.\n        const results = await Promise.all([\n            this.readH5PJsonFile(packagePath),\n            this.readH5PContentJsonFile(packagePath),\n            this.getPackageLibrariesData(packagePath, entries),\n        ]);\n\n        // Check if there are missing libraries.\n        const missingLibraries = this.getMissingLibraries(results[2]);\n\n        // Check if the missing libraries are already installed in the app.\n        await Promise.all(Object.keys(missingLibraries).map(async (libString) => {\n            const dependency = missingLibraries[libString];\n            const dependencyId = await this.h5pFramework.getLibraryIdByData(dependency, siteId);\n\n            if (dependencyId) {\n                // Lib is installed.\n                delete missingLibraries[libString];\n            }\n        }));\n\n        if (Object.keys(missingLibraries).length > 0) {\n            // Missing library, throw error.\n            const libString = Object.keys(missingLibraries)[0];\n            const missingLibrary = missingLibraries[libString];\n\n            throw new CoreError(Translate.instant('core.h5p.missingdependency', { $a: {\n                lib: missingLibrary.libString,\n                dep: libString,\n            } }));\n        }\n\n        return {\n            librariesJsonData: results[2],\n            mainJsonData: results[0],\n            contentJsonData: results[1],\n        };\n\n    }\n\n    /**\n     * Read content.json file and return its parsed contents.\n     *\n     * @param packagePath The path to the package folder.\n     * @returns Promise resolved with the parsed file contents.\n     */\n    protected readH5PContentJsonFile(packagePath: string): Promise<unknown> {\n        const path = CorePath.concatenatePaths(packagePath, 'content/content.json');\n\n        return CoreFile.readFile(path, CoreFileFormat.FORMATJSON);\n    }\n\n    /**\n     * Read h5p.json file and return its parsed contents.\n     *\n     * @param packagePath The path to the package folder.\n     * @returns Promise resolved with the parsed file contents.\n     */\n    protected readH5PJsonFile(packagePath: string): Promise<CoreH5PMainJSONData> {\n        const path = CorePath.concatenatePaths(packagePath, 'h5p.json');\n\n        return CoreFile.readFile(path, CoreFileFormat.FORMATJSON);\n    }\n\n    /**\n     * Read library.json file and return its parsed contents.\n     *\n     * @param libPath Path to the directory where the library files are.\n     * @returns Promise resolved with the parsed file contents.\n     */\n    protected readLibraryJsonFile(libPath: string): Promise<CoreH5PLibraryMainJsonData> {\n        const path = CorePath.concatenatePaths(libPath, 'library.json');\n\n        return CoreFile.readFile<CoreH5PLibraryMainJsonData>(path, CoreFileFormat.FORMATJSON);\n    }\n\n    /**\n     * Read all language files and return their contents indexed by language code.\n     *\n     * @param libPath Path to the directory where the library files are.\n     * @returns Promise resolved with the language data.\n     */\n    protected async readLibraryLanguageFiles(libPath: string): Promise<CoreH5PLibraryLangsJsonData | undefined> {\n        try {\n            const path = CorePath.concatenatePaths(libPath, 'language');\n            const langIndex: CoreH5PLibraryLangsJsonData = {};\n\n            // Read all the files in the language directory.\n            const entries = await CoreFile.getDirectoryContents(path);\n\n            await Promise.all(entries.map(async (entry) => {\n                const langFilePath = CorePath.concatenatePaths(path, entry.name);\n\n                try {\n                    const langFileData = await CoreFile.readFile<CoreH5PLibraryLangJsonData>(\n                        langFilePath,\n                        CoreFileFormat.FORMATJSON,\n                    );\n\n                    const parts = entry.name.split('.'); // The language code is in parts[0].\n                    langIndex[parts[0]] = langFileData;\n                } catch {\n                    // Ignore this language.\n                }\n            }));\n\n            return langIndex;\n\n        } catch (error) {\n            // Probably doesn't exist, ignore.\n        }\n    }\n\n    /**\n     * Read semantics.json file and return its parsed contents.\n     *\n     * @param libPath Path to the directory where the library files are.\n     * @returns Promise resolved with the parsed file contents.\n     */\n    protected async readLibrarySemanticsFile(libPath: string): Promise<CoreH5PSemantics[] | undefined> {\n        try {\n            const path = CorePath.concatenatePaths(libPath, 'semantics.json');\n\n            return await CoreFile.readFile<CoreH5PSemantics[]>(path, CoreFileFormat.FORMATJSON);\n        } catch (error) {\n            // Probably doesn't exist, ignore.\n        }\n    }\n\n}\n\n/**\n * Data of the main JSON H5P files.\n */\nexport type CoreH5PMainJSONFilesData = {\n    contentJsonData: unknown; // Contents of content.json file.\n    librariesJsonData: CoreH5PLibrariesJsonData; // JSON data about each library.\n    mainJsonData: CoreH5PMainJSONData; // Contents of h5p.json file.\n};\n\n/**\n * Data stored in h5p.json file of a content. More info in https://h5p.org/documentation/developers/json-file-definitions\n */\nexport type CoreH5PMainJSONData = {\n    title: string; // Title of the content.\n    mainLibrary: string; // The main H5P library for this content.\n    language: string; // Language code.\n    preloadedDependencies?: CoreH5PLibraryBasicData[]; // Dependencies.\n    embedTypes?: ('div' | 'iframe')[]; // List of possible ways to embed the package in the page.\n    authors?: { // The name and role of the content authors\n        name: string;\n        role: string;\n    }[];\n    source?: string; // The source (a URL) of the licensed material.\n    license?: string; // A code for the content license.\n    licenseVersion?: string; // The version of the license above as a string.\n    licenseExtras?: string; // Any additional information about the license.\n    yearFrom?: string; // If a license is valid for a certain period of time, this represents the start year (as a string).\n    yearTo?: string; // If a license is valid for a certain period of time, this represents the end year (as a string).\n    changes?: { // The changelog.\n        date: string;\n        author: string;\n        log: string;\n    }[];\n    authorComments?: string; // Comments for the editor of the content.\n};\n\n/**\n * All JSON data for libraries of a package.\n */\nexport type CoreH5PLibrariesJsonData = {[libString: string]: CoreH5PLibraryJsonData};\n\n/**\n * All JSON data for a library, including semantics and language.\n */\nexport type CoreH5PLibraryJsonData = CoreH5PLibraryMainJsonData & {\n    semantics?: CoreH5PSemantics[]; // Data in semantics.json.\n    language?: CoreH5PLibraryLangsJsonData; // Language JSON data.\n    hasIcon?: boolean; // Whether the library has an icon.\n    uploadDirectory?: string; // Path where the lib is stored.\n};\n\n/**\n * Data stored in library.json file of a library. More info in https://h5p.org/library-definition\n */\nexport type CoreH5PLibraryMainJsonData = {\n    title: string; // The human readable name of this library.\n    machineName: string; // The library machine name.\n    majorVersion: number; // Major version.\n    minorVersion: number; // Minor version.\n    patchVersion: number; // Patch version.\n    runnable: number; // Whether or not this library is runnable.\n    coreApi?: { // Required version of H5P Core API.\n        majorVersion: number;\n        minorVersion: number;\n    };\n    author?: string; // The name of the library author.\n    license?: string; // A code for the content license.\n    description?: string; // Textual description of the library.\n    preloadedDependencies?: CoreH5PLibraryBasicData[]; // Dependencies.\n    dynamicDependencies?: CoreH5PLibraryBasicData[]; // Dependencies.\n    editorDependencies?: CoreH5PLibraryBasicData[]; // Dependencies.\n    preloadedJs?: { path: string }[]; // List of path to the javascript files required for the library.\n    preloadedCss?: { path: string }[]; // List of path to the CSS files to be loaded with the library.\n    embedTypes?: ('div' | 'iframe')[]; // List of possible ways to embed the package in the page.\n    fullscreen?: number; // Enables the integrated full-screen button.\n    metadataSettings?: CoreH5PLibraryMetadataSettings; // Metadata settings.\n    addTo?: CoreH5PLibraryAddTo;\n};\n\n/**\n * Library metadata settings.\n */\nexport type CoreH5PLibraryMetadataSettings = {\n    disable?: boolean | number;\n    disableExtraTitleField?: boolean | number;\n};\n\n/**\n * Library plugin configuration data.\n */\nexport type CoreH5PLibraryAddTo = {\n    content?: {\n        types?: {\n            text?: {\n                regex?: string;\n            };\n        }[];\n    };\n};\n\n/**\n * Data stored in all languages JSON file of a library.\n */\nexport type CoreH5PLibraryLangsJsonData = {[code: string]: CoreH5PLibraryLangJsonData};\n\n/**\n * Data stored in each language JSON file of a library.\n */\nexport type CoreH5PLibraryLangJsonData = {\n    semantics?: CoreH5PSemantics[];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}