{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport { CoreCourseModuleDelegate } from '@features/course/services/module-delegate';\nimport { CoreCourseUnsupportedModuleComponent } from '@features/course/components/unsupported-module/unsupported-module';\nimport { CoreDynamicComponent } from '@components/dynamic-component/dynamic-component';\nimport { CoreCourse } from '@features/course/services/course';\nimport * as i0 from \"@angular/core\";\n/**\n * Component to display single activity format. It will determine the right component to use and instantiate it.\n *\n * The instantiated component will receive the course and the module as inputs.\n */\nexport class CoreCourseFormatSingleActivityComponent {\n  constructor() {\n    this.completionChanged = new EventEmitter(); // Notify when any module completion changes.\n    this.data = {}; // Data to pass to the component.\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnChanges(changes) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _this$sections;\n      if (!changes.course && !changes.sections) {\n        return;\n      }\n      if (!_this.course || !_this.sections || !_this.sections.length) {\n        return;\n      }\n      // In single activity the module should only have 1 section and 1 module. Get the module.\n      const module = (_this$sections = _this.sections) === null || _this$sections === void 0 || (_this$sections = _this$sections[0].modules) === null || _this$sections === void 0 ? void 0 : _this$sections[0];\n      _this.data.courseId = _this.course.id;\n      _this.data.module = module;\n      if (module && !_this.componentClass) {\n        // We haven't obtained the class yet. Get it now.\n        const component = yield CoreCourseModuleDelegate.getMainComponent(_this.course, module);\n        _this.componentClass = component || CoreCourseUnsupportedModuleComponent;\n      }\n    })();\n  }\n  /**\n   * Refresh the data.\n   *\n   * @param refresher Refresher.\n   * @param done Function to call when done.\n   * @param afterCompletionChange Whether the refresh is due to a completion change.\n   * @returns Promise resolved when done.\n   */\n  doRefresh(refresher, done, afterCompletionChange) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var _this2$dynamicCompone;\n      if (afterCompletionChange) {\n        // Don't refresh the view after a completion change since completion isn't displayed.\n        return;\n      }\n      yield (_this2$dynamicCompone = _this2.dynamicComponent) === null || _this2$dynamicCompone === void 0 ? void 0 : _this2$dynamicCompone.callComponentMethod('doRefresh', refresher);\n      if (_this2.course) {\n        const courseId = _this2.course.id;\n        yield CoreCourse.invalidateCourseBlocks(courseId);\n      }\n    })();\n  }\n  /**\n   * User entered the page that contains the component.\n   */\n  ionViewDidEnter() {\n    var _this$dynamicComponen;\n    (_this$dynamicComponen = this.dynamicComponent) === null || _this$dynamicComponen === void 0 || _this$dynamicComponen.callComponentMethod('ionViewDidEnter');\n  }\n  /**\n   * User left the page that contains the component.\n   */\n  ionViewDidLeave() {\n    var _this$dynamicComponen2;\n    (_this$dynamicComponen2 = this.dynamicComponent) === null || _this$dynamicComponen2 === void 0 || _this$dynamicComponen2.callComponentMethod('ionViewDidLeave');\n  }\n}\n_class = CoreCourseFormatSingleActivityComponent;\n_class.ɵfac = function CoreCourseFormatSingleActivityComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-course-format-single-activity\"]],\n  viewQuery: function CoreCourseFormatSingleActivityComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CoreDynamicComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dynamicComponent = _t.first);\n    }\n  },\n  inputs: {\n    course: \"course\",\n    sections: \"sections\",\n    initialSectionId: \"initialSectionId\",\n    initialSectionNumber: \"initialSectionNumber\",\n    moduleId: \"moduleId\"\n  },\n  outputs: {\n    completionChanged: \"completionChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"list-item-limited-width\"], [3, \"component\", \"data\"]],\n  template: function CoreCourseFormatSingleActivityComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"core-dynamic-component\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"component\", ctx.componentClass)(\"data\", ctx.data);\n    }\n  },\n  styles: [\"[_nghost-%COMP%]     ion-item[collapsible] {\\n  display: none;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9jb3JlL2ZlYXR1cmVzL2NvdXJzZS9mb3JtYXQvc2luZ2xlYWN0aXZpdHkvY29tcG9uZW50cy9zaW5nbGUtYWN0aXZpdHkuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IDo6bmctZGVlcCBpb24taXRlbVtjb2xsYXBzaWJsZV0ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["EventEmitter","CoreCourseModuleDelegate","CoreCourseUnsupportedModuleComponent","CoreDynamicComponent","CoreCourse","CoreCourseFormatSingleActivityComponent","constructor","completionChanged","data","ngOnChanges","changes","_this","_asyncToGenerator","_this$sections","course","sections","length","module","modules","courseId","id","componentClass","component","getMainComponent","doRefresh","refresher","done","afterCompletionChange","_this2","_this2$dynamicCompone","dynamicComponent","callComponentMethod","invalidateCourseBlocks","ionViewDidEnter","_this$dynamicComponen","ionViewDidLeave","_this$dynamicComponen2","selectors","viewQuery","CoreCourseFormatSingleActivityComponent_Query","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/format/singleactivity/components/singleactivity.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/format/singleactivity/components/core-course-format-single-activity.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, OnChanges, SimpleChange, ViewChild, Output, EventEmitter, Type } from '@angular/core';\n\nimport { CoreCourseModuleDelegate } from '@features/course/services/module-delegate';\nimport { CoreCourseUnsupportedModuleComponent } from '@features/course/components/unsupported-module/unsupported-module';\nimport { CoreDynamicComponent } from '@components/dynamic-component/dynamic-component';\nimport { CoreCourseAnyCourseData } from '@features/courses/services/courses';\nimport { CoreCourseModuleCompletionData, CoreCourseSection } from '@features/course/services/course-helper';\nimport { CoreCourse } from '@features/course/services/course';\nimport type { CoreCourseModuleMainActivityComponent } from '@features/course/classes/main-activity-component';\n\n/**\n * Component to display single activity format. It will determine the right component to use and instantiate it.\n *\n * The instantiated component will receive the course and the module as inputs.\n */\n@Component({\n    selector: 'core-course-format-single-activity',\n    templateUrl: 'core-course-format-single-activity.html',\n    styleUrls: ['single-activity.scss'],\n})\nexport class CoreCourseFormatSingleActivityComponent implements OnChanges {\n\n    @Input() course?: CoreCourseAnyCourseData; // The course to render.\n    @Input() sections?: CoreCourseSection[]; // List of course sections.\n    @Input() initialSectionId?: number; // The section to load first (by ID).\n    @Input() initialSectionNumber?: number; // The section to load first (by number).\n    @Input() moduleId?: number; // The module ID to scroll to. Must be inside the initial selected section.\n    @Output() completionChanged = new EventEmitter<CoreCourseModuleCompletionData>(); // Notify when any module completion changes.\n\n    @ViewChild(CoreDynamicComponent) dynamicComponent?: CoreDynamicComponent<CoreCourseModuleMainActivityComponent>;\n\n    componentClass?: Type<unknown>; // The class of the component to render.\n    data: Record<string | number, unknown> = {}; // Data to pass to the component.\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnChanges(changes: { [name: string]: SimpleChange }): Promise<void> {\n        if (!changes.course && !changes.sections) {\n            return;\n        }\n\n        if (!this.course || !this.sections || !this.sections.length) {\n            return;\n        }\n\n        // In single activity the module should only have 1 section and 1 module. Get the module.\n        const module = this.sections?.[0].modules?.[0];\n\n        this.data.courseId = this.course.id;\n        this.data.module = module;\n\n        if (module && !this.componentClass) {\n            // We haven't obtained the class yet. Get it now.\n            const component = await CoreCourseModuleDelegate.getMainComponent(this.course, module);\n            this.componentClass = component || CoreCourseUnsupportedModuleComponent;\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @param done Function to call when done.\n     * @param afterCompletionChange Whether the refresh is due to a completion change.\n     * @returns Promise resolved when done.\n     */\n    async doRefresh(refresher?: HTMLIonRefresherElement, done?: () => void, afterCompletionChange?: boolean): Promise<void> {\n        if (afterCompletionChange) {\n            // Don't refresh the view after a completion change since completion isn't displayed.\n            return;\n        }\n\n        await this.dynamicComponent?.callComponentMethod('doRefresh', refresher);\n\n        if (this.course) {\n            const courseId = this.course.id;\n            await CoreCourse.invalidateCourseBlocks(courseId);\n        }\n    }\n\n    /**\n     * User entered the page that contains the component.\n     */\n    ionViewDidEnter(): void {\n        this.dynamicComponent?.callComponentMethod('ionViewDidEnter');\n    }\n\n    /**\n     * User left the page that contains the component.\n     */\n    ionViewDidLeave(): void {\n        this.dynamicComponent?.callComponentMethod('ionViewDidLeave');\n    }\n\n}\n","<div class=\"list-item-limited-width\">\n    <core-dynamic-component [component]=\"componentClass\" [data]=\"data\" />\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}