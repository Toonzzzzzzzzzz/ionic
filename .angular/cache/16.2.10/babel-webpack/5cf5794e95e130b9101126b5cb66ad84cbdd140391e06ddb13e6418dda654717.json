{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreSync } from '@services/sync';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModScormDataModel12 } from '../../classes/data-model-12';\nimport { AddonModScormTocComponent } from '../../components/toc/toc';\nimport { AddonModScorm, AddonModScormProvider } from '../../services/scorm';\nimport { AddonModScormHelper } from '../../services/scorm-helper';\nimport { AddonModScormSync } from '../../services/scorm-sync';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@features/mainmenu/pages/menu/menu\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../../core/components/button-with-spinner/button-with-spinner\";\nimport * as i4 from \"../../../../../core/components/iframe/iframe\";\nimport * as i5 from \"../../../../../core/components/loading/loading\";\nimport * as i6 from \"../../../../../core/components/navigation-bar/navigation-bar\";\nimport * as i7 from \"../../../../../core/directives/fa-icon\";\nimport * as i8 from \"../../../../../core/directives/format-text\";\nimport * as i9 from \"../../../../../core/directives/collapsible-footer\";\nimport * as i10 from \"../../../../../core/directives/content\";\nimport * as i11 from \"../../../../../core/directives/update-non-reactive-attributes\";\nimport * as i12 from \"@ionic/angular\";\nimport * as i13 from \"@ngx-translate/core\";\nfunction AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 11);\n    i0.ɵɵlistener(\"click\", function AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.openToc());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelement(2, \"ion-icon\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 1, \"addon.mod_scorm.toc\"));\n  }\n}\nfunction AddonModScormPlayerPage_core_button_with_spinner_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"core-button-with-spinner\", 9);\n    i0.ɵɵtemplate(1, AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template, 3, 3, \"ion-button\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"loading\", ctx_r0.loadingToc);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.toc.length);\n  }\n}\nfunction AddonModScormPlayerPage_core_iframe_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-iframe\", 13);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r1.src)(\"iframeWidth\", ctx_r1.scormWidth)(\"iframeHeight\", ctx_r1.scormHeight)(\"showFullscreenOnToolbar\", true)(\"autoFullscreenOnRotate\", true);\n  }\n}\nfunction AddonModScormPlayerPage_p_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r2.errorMessage));\n  }\n}\nfunction AddonModScormPlayerPage_core_navigation_bar_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"core-navigation-bar\", 14);\n    i0.ɵɵlistener(\"action\", function AddonModScormPlayerPage_core_navigation_bar_14_Template_core_navigation_bar_action_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.loadSco($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"items\", ctx_r3.navigationItems);\n  }\n}\n/**\n * Page that allows playing a SCORM.\n */\nexport class AddonModScormPlayerPage {\n  constructor(mainMenuPage) {\n    this.mainMenuPage = mainMenuPage;\n    this.showToc = false; // Whether to show the table of contents (TOC).\n    this.loadingToc = true; // Whether the TOC is being loaded.\n    this.toc = []; // List of SCOs.\n    this.loaded = false; // Whether the data has been loaded.\n    this.incomplete = false; // Whether last attempt is incomplete.\n    this.navigationItems = [];\n    this.newAttempt = false; // Whether to start a new attempt.\n    this.attempt = 0; // The attempt number.\n    this.offline = false; // Whether it's offline mode.\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n        _this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n        _this.mode = CoreNavigator.getRouteParam('mode') || AddonModScormProvider.MODENORMAL;\n        _this.moduleUrl = CoreNavigator.getRouteParam('moduleUrl') || '';\n        _this.newAttempt = !!CoreNavigator.getRouteBooleanParam('newAttempt');\n        _this.organizationId = CoreNavigator.getRouteParam('organizationId');\n        _this.initialScoId = CoreNavigator.getRouteNumberParam('scoId');\n        _this.siteId = CoreSites.getRequiredCurrentSite().getId();\n      } catch (error) {\n        CoreDomUtils.showErrorModal(error);\n        CoreNavigator.back();\n        return;\n      }\n      try {\n        // Fetch the SCORM data.\n        yield _this.fetchData();\n        if (!_this.currentSco) {\n          CoreNavigator.back();\n          return;\n        }\n        // Set start time if it's a new attempt.\n        if (_this.newAttempt) {\n          try {\n            yield _this.setStartTime(_this.currentSco.id);\n          } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_scorm.errorgetscorm', true);\n          }\n        }\n        // Load SCO.\n        _this.loadSco(_this.currentSco);\n      } finally {\n        _this.loaded = true;\n      }\n    })();\n  }\n  get canSaveTracks() {\n    return !this.accessInfo || !!this.accessInfo.cansavetrack;\n  }\n  /**\n   * Initialize.\n   *\n   * @returns Promise resolved when done.\n   */\n  initialize() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Get the SCORM instance.\n      _this2.scorm = yield AddonModScorm.getScorm(_this2.courseId, _this2.cmId, {\n        moduleUrl: _this2.moduleUrl,\n        readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n      });\n      // Block the SCORM so it cannot be synchronized.\n      CoreSync.blockOperation(AddonModScormProvider.COMPONENT, _this2.scorm.id, 'player');\n      // We use SCORM name at start, later we'll use the SCO title.\n      _this2.title = _this2.scorm.name;\n      _this2.showToc = AddonModScorm.displayTocInPlayer(_this2.scorm);\n      if (_this2.scorm.popup) {\n        // If we receive a value > 100 we assume it's a fixed pixel size.\n        if (_this2.scorm.width && _this2.scorm.width > 100) {\n          _this2.scormWidth = _this2.scorm.width;\n          // Only get fixed size on height if width is also fixed.\n          if (_this2.scorm.height && _this2.scorm.height > 100) {\n            _this2.scormHeight = _this2.scorm.height;\n          }\n        }\n      }\n      // Listen for events to update the TOC, navigate through SCOs and go offline.\n      _this2.tocObserver = CoreEvents.on(AddonModScormProvider.UPDATE_TOC_EVENT, data => {\n        if (data.scormId !== _this2.scorm.id) {\n          return;\n        }\n        if (_this2.offline) {\n          // Wait a bit to make sure data is stored.\n          setTimeout(() => _this2.refreshToc(), 100);\n        } else {\n          _this2.refreshToc();\n        }\n      }, _this2.siteId);\n      _this2.launchNextObserver = CoreEvents.on(AddonModScormProvider.LAUNCH_NEXT_SCO_EVENT, data => {\n        if (data.scormId === _this2.scorm.id && _this2.currentSco) {\n          const nextSco = AddonModScormHelper.getNextScoFromToc(_this2.toc, _this2.currentSco.id);\n          if (nextSco) {\n            _this2.loadSco(nextSco);\n          }\n        }\n      }, _this2.siteId);\n      _this2.launchPrevObserver = CoreEvents.on(AddonModScormProvider.LAUNCH_PREV_SCO_EVENT, data => {\n        if (data.scormId === _this2.scorm.id && _this2.currentSco) {\n          const previousSco = AddonModScormHelper.getPreviousScoFromToc(_this2.toc, _this2.currentSco.id);\n          if (previousSco) {\n            _this2.loadSco(previousSco);\n          }\n        }\n      }, _this2.siteId);\n      _this2.goOfflineObserver = CoreEvents.on(AddonModScormProvider.GO_OFFLINE_EVENT, data => {\n        if (data.scormId !== _this2.scorm.id || _this2.offline) {\n          return;\n        }\n        _this2.offline = true;\n        // Wait a bit to prevent collisions between this store and SCORM API's store.\n        setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n          try {\n            AddonModScormHelper.convertAttemptToOffline(_this2.scorm, _this2.attempt);\n          } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n          }\n          _this2.refreshToc();\n        }), 200);\n      }, _this2.siteId);\n    })();\n  }\n  /**\n   * Calculate the next and previous SCO.\n   *\n   * @param scoId Current SCO ID.\n   */\n  calculateNavigationItems(scoId) {\n    this.navigationItems = this.toc.filter(item => item.isvisible).map(item => ({\n      item: item,\n      title: item.title,\n      current: item.id == scoId,\n      enabled: !!(item.prereq && item.launch)\n    }));\n  }\n  /**\n   * Determine the attempt to use, the mode (normal/preview) and if it's offline or online.\n   *\n   * @param attemptsData Attempts count.\n   * @param accessInfo Access info.\n   * @returns Promise resolved when done.\n   */\n  determineAttemptAndMode(attemptsData, accessInfo) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const data = yield AddonModScormHelper.determineAttemptToContinue(_this3.scorm, attemptsData);\n      let incomplete = false;\n      _this3.attempt = data.num;\n      _this3.offline = data.offline;\n      if (_this3.attempt != attemptsData.lastAttempt.num) {\n        _this3.attemptToContinue = _this3.attempt;\n      }\n      // Check if current attempt is incomplete.\n      if (_this3.attempt > 0) {\n        incomplete = yield AddonModScorm.isAttemptIncomplete(_this3.scorm.id, _this3.attempt, {\n          offline: _this3.offline,\n          cmId: _this3.cmId\n        });\n      }\n      // Determine mode and attempt to use.\n      const result = AddonModScorm.determineAttemptAndMode(_this3.scorm, _this3.mode, _this3.attempt, _this3.newAttempt, incomplete, accessInfo.cansavetrack);\n      if (result.attempt > _this3.attempt) {\n        // We're creating a new attempt.\n        if (_this3.offline) {\n          // Last attempt was offline, so we'll create a new offline attempt.\n          yield AddonModScormHelper.createOfflineAttempt(_this3.scorm, result.attempt, attemptsData.online.length);\n        } else {\n          try {\n            // Last attempt was online, verify that we can create a new online attempt. We ignore cache.\n            yield AddonModScorm.getScormUserData(_this3.scorm.id, result.attempt, {\n              cmId: _this3.cmId,\n              readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */\n            });\n          } catch (_unused) {\n            // Cannot communicate with the server, create an offline attempt.\n            _this3.offline = true;\n            yield AddonModScormHelper.createOfflineAttempt(_this3.scorm, result.attempt, attemptsData.online.length);\n          }\n        }\n      }\n      _this3.mode = result.mode;\n      _this3.newAttempt = result.newAttempt;\n      _this3.attempt = result.attempt;\n    })();\n  }\n  /**\n   * Fetch data needed to play the SCORM.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchData() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this4.scorm) {\n        yield _this4.initialize();\n      }\n      // Wait for any ongoing sync to finish. We won't sync a SCORM while it's being played.\n      yield AddonModScormSync.waitForSync(_this4.scorm.id);\n      try {\n        // Get attempts data.\n        const [attemptsData, accessInfo] = yield Promise.all([AddonModScorm.getAttemptCount(_this4.scorm.id, {\n          cmId: _this4.cmId\n        }), AddonModScorm.getAccessInformation(_this4.scorm.id, {\n          cmId: _this4.cmId\n        })]);\n        _this4.accessInfo = accessInfo;\n        yield _this4.determineAttemptAndMode(attemptsData, accessInfo);\n        const [data] = yield Promise.all([AddonModScorm.getScormUserData(_this4.scorm.id, _this4.attempt, {\n          cmId: _this4.cmId,\n          offline: _this4.offline\n        }), _this4.fetchToc()]);\n        _this4.userData = data;\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_scorm.errorgetscorm', true);\n      }\n    })();\n  }\n  /**\n   * Fetch the TOC.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchToc() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.loadingToc = true;\n      try {\n        // We need to check incomplete again: attempt number or status might have changed.\n        _this5.incomplete = yield AddonModScorm.isAttemptIncomplete(_this5.scorm.id, _this5.attempt, {\n          offline: _this5.offline,\n          cmId: _this5.cmId\n        });\n        // Get TOC.\n        _this5.toc = yield AddonModScormHelper.getToc(_this5.scorm.id, _this5.attempt, _this5.incomplete, {\n          organization: _this5.organizationId,\n          offline: _this5.offline,\n          cmId: _this5.cmId\n        });\n        if (_this5.currentSco) {\n          return;\n        }\n        if (_this5.newAttempt) {\n          // Creating a new attempt, use the first SCO defined by the SCORM.\n          _this5.initialScoId = _this5.scorm.launch;\n        }\n        // Determine current SCO if we received an ID.\n        if (_this5.initialScoId && _this5.initialScoId > 0) {\n          // SCO set by parameter, get it from TOC.\n          _this5.currentSco = AddonModScormHelper.getScoFromToc(_this5.toc, _this5.initialScoId);\n        }\n        if (_this5.currentSco) {\n          return;\n        }\n        // No SCO defined. Get the first valid one.\n        const sco = yield AddonModScormHelper.getFirstSco(_this5.scorm.id, _this5.attempt, {\n          toc: _this5.toc,\n          organization: _this5.organizationId,\n          mode: _this5.mode,\n          offline: _this5.offline,\n          cmId: _this5.cmId\n        });\n        if (sco) {\n          _this5.currentSco = sco;\n        } else {\n          // We couldn't find a SCO to load: they're all inactive or without launch URL.\n          _this5.errorMessage = 'addon.mod_scorm.errornovalidsco';\n        }\n      } finally {\n        _this5.loadingToc = false;\n      }\n    })();\n  }\n  /**\n   * Load a SCO.\n   *\n   * @param sco The SCO to load.\n   * @returns Promise resolved when done.\n   */\n  loadSco(sco) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this6.dataModel) {\n        var _this6$userData;\n        // Create the model.\n        _this6.dataModel = new AddonModScormDataModel12(_this6.siteId, _this6.scorm, sco.id, _this6.attempt, (_this6$userData = _this6.userData) !== null && _this6$userData !== void 0 ? _this6$userData : {}, _this6.mode, _this6.offline, _this6.canSaveTracks);\n        // Add the model to the window so the SCORM can access it.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.API = _this6.dataModel;\n      } else {\n        // Changing SCO. First unload the existing SCO to make sure the callback to send the data has been called.\n        _this6.src = '';\n        yield CoreUtils.nextTick();\n        // Load the SCO in the existing model.\n        _this6.dataModel.loadSco(sco.id);\n      }\n      _this6.currentSco = sco;\n      _this6.title = sco.title || _this6.scorm.name; // Try to use SCO title.\n      _this6.calculateNavigationItems(sco.id);\n      // Load the SCO source.\n      _this6.src = yield AddonModScorm.getScoSrc(_this6.scorm, sco);\n      if (sco.scormtype == 'asset') {\n        // Mark the asset as completed.\n        _this6.markCompleted(sco);\n      }\n      _this6.logEvent(sco.id);\n    })();\n  }\n  /**\n   * Given an SCO, mark it as completed.\n   *\n   * @param sco SCO to mark.\n   * @returns Promise resolved when done.\n   */\n  markCompleted(sco) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this7.canSaveTracks) {\n        return;\n      }\n      const tracks = [{\n        element: 'cmi.core.lesson_status',\n        value: 'completed'\n      }];\n      try {\n        AddonModScorm.saveTracks(sco.id, _this7.attempt, tracks, _this7.scorm, _this7.offline);\n      } catch (_unused2) {\n        // Error saving data. Go offline if needed.\n        if (_this7.offline) {\n          return;\n        }\n        const data = yield AddonModScorm.getScormUserData(_this7.scorm.id, _this7.attempt, {\n          cmId: _this7.cmId\n        });\n        if (data[sco.id] && data[sco.id].userdata['cmi.core.lesson_status'] == 'completed') {\n          // Already marked as completed.\n          return;\n        }\n        try {\n          var _this7$dataModel;\n          // Go offline.\n          yield AddonModScormHelper.convertAttemptToOffline(_this7.scorm, _this7.attempt);\n          _this7.offline = true;\n          (_this7$dataModel = _this7.dataModel) === null || _this7$dataModel === void 0 || _this7$dataModel.setOffline(true);\n          yield AddonModScorm.saveTracks(sco.id, _this7.attempt, tracks, _this7.scorm, true);\n        } catch (error) {\n          CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n        }\n      } finally {\n        // Refresh TOC, some prerequisites might have changed.\n        _this7.refreshToc();\n      }\n    })();\n  }\n  /**\n   * Show the TOC.\n   */\n  openToc() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const modalData = yield CoreDomUtils.openSideModal({\n        component: AddonModScormTocComponent,\n        componentProps: {\n          toc: _this8.toc,\n          attemptToContinue: _this8.attemptToContinue,\n          selected: _this8.currentSco && _this8.currentSco.id,\n          moduleId: _this8.cmId,\n          courseId: _this8.courseId,\n          accessInfo: _this8.accessInfo,\n          mode: _this8.mode\n        }\n      });\n      if (modalData) {\n        _this8.loadSco(modalData);\n      }\n    })();\n  }\n  /**\n   * Refresh the TOC.\n   *\n   * @returns Promise resolved when done.\n   */\n  refreshToc() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield CoreUtils.ignoreErrors(AddonModScorm.invalidateAllScormData(_this9.scorm.id));\n        yield _this9.fetchToc();\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_scorm.errorgetscorm', true);\n      }\n    })();\n  }\n  /**\n   * Set SCORM start time.\n   *\n   * @param scoId SCO ID.\n   * @returns Promise resolved when done.\n   */\n  setStartTime(scoId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this10.canSaveTracks) {\n        return;\n      }\n      const tracks = [{\n        element: 'x.start.time',\n        value: String(CoreTimeUtils.timestamp())\n      }];\n      yield AddonModScorm.saveTracks(scoId, _this10.attempt, tracks, _this10.scorm, _this10.offline);\n      if (_this10.offline) {\n        return;\n      }\n      // New online attempt created, update cached data about online attempts.\n      yield CoreUtils.ignoreErrors(AddonModScorm.getAttemptCount(_this10.scorm.id, {\n        cmId: _this10.cmId,\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */\n      }));\n    })();\n  }\n  /**\n   * Log event.\n   */\n  logEvent(scoId) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreUtils.ignoreErrors(AddonModScorm.logLaunchSco(_this11.scorm.id, scoId));\n      let url = '/mod/scorm/player.php';\n      if (_this11.scorm.popup) {\n        url += `?a=${_this11.scorm.id}&currentorg=${_this11.organizationId}&scoid=${scoId}` + `&display=popup&mode=${_this11.mode}`;\n      }\n      CoreAnalytics.logEvent({\n        type: CoreAnalyticsEventType.VIEW_ITEM,\n        ws: 'mod_scorm_get_scorm_user_data',\n        name: _this11.scorm.name,\n        data: {\n          id: _this11.scorm.id,\n          scoid: scoId,\n          organization: _this11.organizationId,\n          category: 'scorm'\n        },\n        url\n      });\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$tocObserver, _this$launchNextObser, _this$launchPrevObser;\n    // Empty src when leaving the state so unload event is triggered in the iframe.\n    this.src = '';\n    CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, {\n      module: 'scorm'\n    });\n    // Stop listening for events.\n    (_this$tocObserver = this.tocObserver) === null || _this$tocObserver === void 0 || _this$tocObserver.off();\n    (_this$launchNextObser = this.launchNextObserver) === null || _this$launchNextObser === void 0 || _this$launchNextObser.off();\n    (_this$launchPrevObser = this.launchPrevObserver) === null || _this$launchPrevObser === void 0 || _this$launchPrevObser.off();\n    setTimeout(() => {\n      var _this$goOfflineObserv;\n      (_this$goOfflineObserv = this.goOfflineObserver) === null || _this$goOfflineObserv === void 0 || _this$goOfflineObserv.off();\n    }, 500);\n    // Unblock the SCORM so it can be synced.\n    CoreSync.unblockOperation(AddonModScormProvider.COMPONENT, this.scorm.id, 'player');\n  }\n}\n_class = AddonModScormPlayerPage;\n_class.ɵfac = function AddonModScormPlayerPage_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.CoreMainMenuPage));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-mod-scorm-player\"]],\n  decls: 15,\n  vars: 11,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [\"slot\", \"end\"], [3, \"loading\", 4, \"ngIf\"], [3, \"hideUntil\"], [\"id\", \"scorm_object\", 3, \"src\", \"iframeWidth\", \"iframeHeight\", \"showFullscreenOnToolbar\", \"autoFullscreenOnRotate\", 4, \"ngIf\"], [4, \"ngIf\"], [\"collapsible-footer\", \"\", \"appearOnBottom\", \"\", \"slot\", \"fixed\", 3, \"items\", \"action\", 4, \"ngIf\"], [3, \"loading\"], [\"fill\", \"clear\", \"aria-haspopup\", \"true\", 3, \"click\", 4, \"ngIf\"], [\"fill\", \"clear\", \"aria-haspopup\", \"true\", 3, \"click\"], [\"name\", \"fas-bookmark\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [\"id\", \"scorm_object\", 3, \"src\", \"iframeWidth\", \"iframeHeight\", \"showFullscreenOnToolbar\", \"autoFullscreenOnRotate\"], [\"collapsible-footer\", \"\", \"appearOnBottom\", \"\", \"slot\", \"fixed\", 3, \"items\", \"action\"]],\n  template: function AddonModScormPlayerPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵelement(7, \"core-format-text\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"ion-buttons\", 3);\n      i0.ɵɵtemplate(9, AddonModScormPlayerPage_core_button_with_spinner_9_Template, 2, 2, \"core-button-with-spinner\", 4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"ion-content\")(11, \"core-loading\", 5);\n      i0.ɵɵtemplate(12, AddonModScormPlayerPage_core_iframe_12_Template, 1, 5, \"core-iframe\", 6);\n      i0.ɵɵtemplate(13, AddonModScormPlayerPage_p_13_Template, 3, 3, \"p\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, AddonModScormPlayerPage_core_navigation_bar_14_Template, 1, 1, \"core-navigation-bar\", 8);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 9, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"text\", ctx.title)(\"contextInstanceId\", ctx.cmId)(\"courseId\", ctx.courseId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showToc);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.src && ctx.errorMessage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loaded && ctx.navigationItems.length > 1);\n    }\n  },\n  dependencies: [i2.NgIf, i3.CoreButtonWithSpinnerComponent, i4.CoreIframeComponent, i5.CoreLoadingComponent, i6.CoreNavigationBarComponent, i7.CoreFaIconDirective, i8.CoreFormatTextDirective, i9.CoreCollapsibleFooterDirective, i10.CoreContentDirective, i11.CoreUpdateNonReactiveAttributesDirective, i12.IonButton, i12.IonButtons, i12.IonContent, i12.IonHeader, i12.IonIcon, i12.IonTitle, i12.IonToolbar, i12.IonBackButton, i13.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreNavigator","CoreSites","CoreSync","CoreDomUtils","CoreTimeUtils","CoreUtils","CoreEvents","AddonModScormDataModel12","AddonModScormTocComponent","AddonModScorm","AddonModScormProvider","AddonModScormHelper","AddonModScormSync","CoreAnalytics","CoreAnalyticsEventType","i0","ɵɵelementStart","ɵɵlistener","AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template_ion_button_click_0_listener","ɵɵrestoreView","_r6","ctx_r5","ɵɵnextContext","ɵɵresetView","openToc","ɵɵelement","ɵɵelementEnd","ɵɵattribute","ɵɵpipeBind1","ɵɵtemplate","AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template","ɵɵproperty","ctx_r0","loadingToc","ɵɵadvance","toc","length","ctx_r1","src","scormWidth","scormHeight","ɵɵtext","ɵɵtextInterpolate","ctx_r2","errorMessage","AddonModScormPlayerPage_core_navigation_bar_14_Template_core_navigation_bar_action_0_listener","$event","_r8","ctx_r7","loadSco","ctx_r3","navigationItems","AddonModScormPlayerPage","constructor","mainMenuPage","showToc","loaded","incomplete","newAttempt","attempt","offline","ngOnInit","_this","_asyncToGenerator","cmId","getRequiredRouteNumberParam","courseId","mode","getRouteParam","MODENORMAL","moduleUrl","getRouteBooleanParam","organizationId","initialScoId","getRouteNumberParam","siteId","getRequiredCurrentSite","getId","error","showErrorModal","back","fetchData","currentSco","setStartTime","id","showErrorModalDefault","canSaveTracks","accessInfo","cansavetrack","initialize","_this2","scorm","getScorm","readingStrategy","blockOperation","COMPONENT","title","name","displayTocInPlayer","popup","width","height","tocObserver","on","UPDATE_TOC_EVENT","data","scormId","setTimeout","refreshToc","launchNextObserver","LAUNCH_NEXT_SCO_EVENT","nextSco","getNextScoFromToc","launchPrevObserver","LAUNCH_PREV_SCO_EVENT","previousSco","getPreviousScoFromToc","goOfflineObserver","GO_OFFLINE_EVENT","convertAttemptToOffline","calculateNavigationItems","scoId","filter","item","isvisible","map","current","enabled","prereq","launch","determineAttemptAndMode","attemptsData","_this3","determineAttemptToContinue","num","lastAttempt","attemptToContinue","isAttemptIncomplete","result","createOfflineAttempt","online","getScormUserData","_unused","_this4","waitForSync","Promise","all","getAttemptCount","getAccessInformation","fetchToc","userData","_this5","getToc","organization","getScoFromToc","sco","getFirstSco","_this6","dataModel","_this6$userData","window","API","nextTick","getScoSrc","scormtype","markCompleted","logEvent","_this7","tracks","element","value","saveTracks","_unused2","userdata","_this7$dataModel","setOffline","_this8","modalData","openSideModal","component","componentProps","selected","moduleId","_this9","ignoreErrors","invalidateAllScormData","_this10","String","timestamp","_this11","logLaunchSco","url","type","VIEW_ITEM","ws","scoid","category","ngOnDestroy","_this$tocObserver","_this$launchNextObser","_this$launchPrevObser","trigger","ACTIVITY_DATA_SENT","module","off","_this$goOfflineObserv","unblockOperation","ɵɵdirectiveInject","i1","CoreMainMenuPage","selectors","decls","vars","consts","template","AddonModScormPlayerPage_Template","rf","ctx","AddonModScormPlayerPage_core_button_with_spinner_9_Template","AddonModScormPlayerPage_core_iframe_12_Template","AddonModScormPlayerPage_p_13_Template","AddonModScormPlayerPage_core_navigation_bar_14_Template"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/scorm/pages/player/player.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/scorm/pages/player/player.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { CoreNavigationBarItem } from '@components/navigation-bar/navigation-bar';\nimport { CoreMainMenuPage } from '@features/mainmenu/pages/menu/menu';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreSync } from '@services/sync';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { AddonModScormDataModel12 } from '../../classes/data-model-12';\nimport { AddonModScormTocComponent } from '../../components/toc/toc';\nimport {\n    AddonModScorm,\n    AddonModScormAttemptCountResult,\n    AddonModScormGetScormAccessInformationWSResponse,\n    AddonModScormProvider,\n    AddonModScormScorm,\n    AddonModScormScoWithData,\n    AddonModScormUserDataMap,\n} from '../../services/scorm';\nimport { AddonModScormHelper, AddonModScormTOCScoWithIcon } from '../../services/scorm-helper';\nimport { AddonModScormSync } from '../../services/scorm-sync';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that allows playing a SCORM.\n */\n@Component({\n    selector: 'page-addon-mod-scorm-player',\n    templateUrl: 'player.html',\n})\nexport class AddonModScormPlayerPage implements OnInit, OnDestroy {\n\n    title?: string; // Title.\n    scorm!: AddonModScormScorm; // The SCORM object.\n    showToc = false; // Whether to show the table of contents (TOC).\n    loadingToc = true; // Whether the TOC is being loaded.\n    toc: AddonModScormTOCScoWithIcon[] = []; // List of SCOs.\n    loaded = false; // Whether the data has been loaded.\n    src?: string; // Iframe src.\n    errorMessage?: string; // Error message.\n    accessInfo?: AddonModScormGetScormAccessInformationWSResponse; // Access information.\n    scormWidth?: number; // Width applied to scorm iframe.\n    scormHeight?: number; // Height applied to scorm iframe.\n    incomplete = false; // Whether last attempt is incomplete.\n    cmId!: number; // Course module ID.\n    courseId!: number; // Course ID.\n    navigationItems: CoreNavigationBarItem<AddonModScormTOCScoWithIcon>[] = [];\n\n    protected siteId!: string;\n    protected mode!: string; // Mode to play the SCORM.\n    protected moduleUrl!: string; // Module URL.\n    protected newAttempt = false; // Whether to start a new attempt.\n    protected organizationId?: string; // Organization ID to load.\n    protected attempt = 0; // The attempt number.\n    protected offline = false; // Whether it's offline mode.\n    protected userData?: AddonModScormUserDataMap; // User data.\n    protected initialScoId?: number; // Initial SCO ID to load.\n    protected currentSco?: AddonModScormScoWithData; // Current SCO.\n    protected dataModel?: AddonModScormDataModel12; // Data Model.\n    protected attemptToContinue?: number; // Attempt to continue (for the popover).\n\n    // Observers.\n    protected tocObserver?: CoreEventObserver;\n    protected launchNextObserver?: CoreEventObserver;\n    protected launchPrevObserver?: CoreEventObserver;\n    protected goOfflineObserver?: CoreEventObserver;\n\n    constructor(\n        protected mainMenuPage: CoreMainMenuPage,\n    ) {}\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.mode = CoreNavigator.getRouteParam('mode') || AddonModScormProvider.MODENORMAL;\n            this.moduleUrl = CoreNavigator.getRouteParam('moduleUrl') || '';\n            this.newAttempt = !!CoreNavigator.getRouteBooleanParam('newAttempt');\n            this.organizationId = CoreNavigator.getRouteParam('organizationId');\n            this.initialScoId = CoreNavigator.getRouteNumberParam('scoId');\n            this.siteId = CoreSites.getRequiredCurrentSite().getId();\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        try {\n            // Fetch the SCORM data.\n            await this.fetchData();\n\n            if (!this.currentSco) {\n                CoreNavigator.back();\n\n                return;\n            }\n\n            // Set start time if it's a new attempt.\n            if (this.newAttempt) {\n                try {\n                    await this.setStartTime(this.currentSco.id);\n                } catch (error) {\n                    CoreDomUtils.showErrorModalDefault(error, 'addon.mod_scorm.errorgetscorm', true);\n                }\n            }\n\n            // Load SCO.\n            this.loadSco(this.currentSco);\n        } finally {\n            this.loaded = true;\n        }\n\n    }\n\n    get canSaveTracks(): boolean {\n        return !this.accessInfo || !!this.accessInfo.cansavetrack;\n    }\n\n    /**\n     * Initialize.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async initialize(): Promise<void> {\n        // Get the SCORM instance.\n        this.scorm = await AddonModScorm.getScorm(this.courseId, this.cmId, {\n            moduleUrl: this.moduleUrl,\n            readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE,\n        });\n\n        // Block the SCORM so it cannot be synchronized.\n        CoreSync.blockOperation(AddonModScormProvider.COMPONENT, this.scorm.id, 'player');\n\n        // We use SCORM name at start, later we'll use the SCO title.\n        this.title = this.scorm.name;\n        this.showToc = AddonModScorm.displayTocInPlayer(this.scorm);\n\n        if (this.scorm.popup) {\n            // If we receive a value > 100 we assume it's a fixed pixel size.\n            if (this.scorm.width && this.scorm.width > 100) {\n                this.scormWidth = this.scorm.width;\n\n                // Only get fixed size on height if width is also fixed.\n                if (this.scorm.height && this.scorm.height > 100) {\n                    this.scormHeight = this.scorm.height;\n                }\n            }\n        }\n\n        // Listen for events to update the TOC, navigate through SCOs and go offline.\n        this.tocObserver = CoreEvents.on(AddonModScormProvider.UPDATE_TOC_EVENT, (data) => {\n            if (data.scormId !== this.scorm.id) {\n                return;\n            }\n\n            if (this.offline) {\n                // Wait a bit to make sure data is stored.\n                setTimeout(() => this.refreshToc(), 100);\n            } else {\n                this.refreshToc();\n            }\n        }, this.siteId);\n\n        this.launchNextObserver = CoreEvents.on(AddonModScormProvider.LAUNCH_NEXT_SCO_EVENT, (data) => {\n            if (data.scormId === this.scorm.id && this.currentSco) {\n                const nextSco = AddonModScormHelper.getNextScoFromToc(this.toc, this.currentSco.id);\n                if (nextSco) {\n                    this.loadSco(nextSco);\n                }\n            }\n        }, this.siteId);\n\n        this.launchPrevObserver = CoreEvents.on(AddonModScormProvider.LAUNCH_PREV_SCO_EVENT, (data) => {\n            if (data.scormId === this.scorm.id && this.currentSco) {\n                const previousSco = AddonModScormHelper.getPreviousScoFromToc(this.toc, this.currentSco.id);\n                if (previousSco) {\n                    this.loadSco(previousSco);\n                }\n            }\n        }, this.siteId);\n\n        this.goOfflineObserver = CoreEvents.on(AddonModScormProvider.GO_OFFLINE_EVENT, (data) => {\n            if (data.scormId !== this.scorm.id || this.offline) {\n                return;\n            }\n            this.offline = true;\n\n            // Wait a bit to prevent collisions between this store and SCORM API's store.\n            setTimeout(async () => {\n                try {\n                    AddonModScormHelper.convertAttemptToOffline(this.scorm, this.attempt);\n                } catch (error) {\n                    CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n                }\n\n                this.refreshToc();\n            }, 200);\n        }, this.siteId);\n    }\n\n    /**\n     * Calculate the next and previous SCO.\n     *\n     * @param scoId Current SCO ID.\n     */\n    protected calculateNavigationItems(scoId: number): void {\n        this.navigationItems = this.toc\n            .filter((item) => item.isvisible)\n            .map<CoreNavigationBarItem<AddonModScormTOCScoWithIcon>>((item) =>\n            ({\n                item: item,\n                title: item.title,\n                current: item.id == scoId,\n                enabled: !!(item.prereq && item.launch),\n            }));\n    }\n\n    /**\n     * Determine the attempt to use, the mode (normal/preview) and if it's offline or online.\n     *\n     * @param attemptsData Attempts count.\n     * @param accessInfo Access info.\n     * @returns Promise resolved when done.\n     */\n    protected async determineAttemptAndMode(\n        attemptsData: AddonModScormAttemptCountResult,\n        accessInfo: AddonModScormGetScormAccessInformationWSResponse,\n    ): Promise<void> {\n        const data = await AddonModScormHelper.determineAttemptToContinue(this.scorm, attemptsData);\n\n        let incomplete = false;\n        this.attempt = data.num;\n        this.offline = data.offline;\n\n        if (this.attempt != attemptsData.lastAttempt.num) {\n            this.attemptToContinue = this.attempt;\n        }\n\n        // Check if current attempt is incomplete.\n        if (this.attempt > 0) {\n            incomplete = await AddonModScorm.isAttemptIncomplete(this.scorm.id, this.attempt, {\n                offline: this.offline,\n                cmId: this.cmId,\n            });\n        }\n\n        // Determine mode and attempt to use.\n        const result = AddonModScorm.determineAttemptAndMode(\n            this.scorm,\n            this.mode,\n            this.attempt,\n            this.newAttempt,\n            incomplete,\n            accessInfo.cansavetrack,\n        );\n\n        if (result.attempt > this.attempt) {\n            // We're creating a new attempt.\n            if (this.offline) {\n                // Last attempt was offline, so we'll create a new offline attempt.\n                await AddonModScormHelper.createOfflineAttempt(this.scorm, result.attempt, attemptsData.online.length);\n            } else {\n                try {\n                    // Last attempt was online, verify that we can create a new online attempt. We ignore cache.\n                    await AddonModScorm.getScormUserData(this.scorm.id, result.attempt, {\n                        cmId: this.cmId,\n                        readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n                    });\n                } catch {\n                    // Cannot communicate with the server, create an offline attempt.\n                    this.offline = true;\n\n                    await AddonModScormHelper.createOfflineAttempt(this.scorm, result.attempt, attemptsData.online.length);\n                }\n            }\n        }\n\n        this.mode = result.mode;\n        this.newAttempt = result.newAttempt;\n        this.attempt = result.attempt;\n    }\n\n    /**\n     * Fetch data needed to play the SCORM.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        if (!this.scorm) {\n            await this.initialize();\n        }\n\n        // Wait for any ongoing sync to finish. We won't sync a SCORM while it's being played.\n        await AddonModScormSync.waitForSync(this.scorm.id);\n\n        try {\n            // Get attempts data.\n            const [attemptsData, accessInfo] = await Promise.all([\n                AddonModScorm.getAttemptCount(this.scorm.id, { cmId: this.cmId }),\n                AddonModScorm.getAccessInformation(this.scorm.id, {\n                    cmId: this.cmId,\n                }),\n            ]);\n\n            this.accessInfo = accessInfo;\n\n            await this.determineAttemptAndMode(attemptsData, accessInfo);\n\n            const [data] = await Promise.all([\n                AddonModScorm.getScormUserData(this.scorm.id, this.attempt, {\n                    cmId: this.cmId,\n                    offline: this.offline,\n                }),\n                this.fetchToc(),\n            ]);\n\n            this.userData = data;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_scorm.errorgetscorm', true);\n        }\n    }\n\n    /**\n     * Fetch the TOC.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchToc(): Promise<void> {\n        this.loadingToc = true;\n\n        try {\n            // We need to check incomplete again: attempt number or status might have changed.\n            this.incomplete = await AddonModScorm.isAttemptIncomplete(this.scorm.id, this.attempt, {\n                offline: this.offline,\n                cmId: this.cmId,\n            });\n\n            // Get TOC.\n            this.toc = await AddonModScormHelper.getToc(this.scorm.id, this.attempt, this.incomplete, {\n                organization: this.organizationId,\n                offline: this.offline,\n                cmId: this.cmId,\n            });\n\n            if (this.currentSco) {\n                return;\n            }\n\n            if (this.newAttempt) {\n                // Creating a new attempt, use the first SCO defined by the SCORM.\n                this.initialScoId = this.scorm.launch;\n            }\n\n            // Determine current SCO if we received an ID.\n            if (this.initialScoId && this.initialScoId > 0) {\n                // SCO set by parameter, get it from TOC.\n                this.currentSco = AddonModScormHelper.getScoFromToc(this.toc, this.initialScoId);\n            }\n\n            if (this.currentSco) {\n                return;\n            }\n\n            // No SCO defined. Get the first valid one.\n            const sco = await AddonModScormHelper.getFirstSco(this.scorm.id, this.attempt, {\n                toc: this.toc,\n                organization: this.organizationId,\n                mode: this.mode,\n                offline: this.offline,\n                cmId: this.cmId,\n            });\n\n            if (sco) {\n                this.currentSco = sco;\n            } else {\n                // We couldn't find a SCO to load: they're all inactive or without launch URL.\n                this.errorMessage = 'addon.mod_scorm.errornovalidsco';\n            }\n        } finally {\n            this.loadingToc = false;\n        }\n    }\n\n    /**\n     * Load a SCO.\n     *\n     * @param sco The SCO to load.\n     * @returns Promise resolved when done.\n     */\n    async loadSco(sco: AddonModScormScoWithData): Promise<void> {\n        if (!this.dataModel) {\n            // Create the model.\n            this.dataModel = new AddonModScormDataModel12(\n                this.siteId,\n                this.scorm,\n                sco.id,\n                this.attempt,\n                this.userData ?? {},\n                this.mode,\n                this.offline,\n                this.canSaveTracks,\n            );\n\n            // Add the model to the window so the SCORM can access it.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (<any> window).API = this.dataModel;\n        } else {\n            // Changing SCO. First unload the existing SCO to make sure the callback to send the data has been called.\n            this.src = '';\n\n            await CoreUtils.nextTick();\n\n            // Load the SCO in the existing model.\n            this.dataModel.loadSco(sco.id);\n        }\n\n        this.currentSco = sco;\n        this.title = sco.title || this.scorm.name; // Try to use SCO title.\n\n        this.calculateNavigationItems(sco.id);\n\n        // Load the SCO source.\n        this.src = await AddonModScorm.getScoSrc(this.scorm, sco);\n\n        if (sco.scormtype == 'asset') {\n            // Mark the asset as completed.\n            this.markCompleted(sco);\n        }\n\n        this.logEvent(sco.id);\n    }\n\n    /**\n     * Given an SCO, mark it as completed.\n     *\n     * @param sco SCO to mark.\n     * @returns Promise resolved when done.\n     */\n    protected async markCompleted(sco: AddonModScormScoWithData): Promise<void> {\n        if (!this.canSaveTracks) {\n            return;\n        }\n\n        const tracks = [{\n            element: 'cmi.core.lesson_status',\n            value: 'completed',\n        }];\n\n        try {\n            AddonModScorm.saveTracks(sco.id, this.attempt, tracks, this.scorm, this.offline);\n        } catch {\n            // Error saving data. Go offline if needed.\n            if (this.offline) {\n                return;\n            }\n\n            const data = await AddonModScorm.getScormUserData(this.scorm.id, this.attempt, {\n                cmId: this.cmId,\n            });\n\n            if (data[sco.id] && data[sco.id].userdata['cmi.core.lesson_status'] == 'completed') {\n                // Already marked as completed.\n                return;\n            }\n\n            try {\n                // Go offline.\n                await AddonModScormHelper.convertAttemptToOffline(this.scorm, this.attempt);\n\n                this.offline = true;\n                this.dataModel?.setOffline(true);\n\n                await AddonModScorm.saveTracks(sco.id, this.attempt, tracks, this.scorm, true);\n            } catch (error) {\n                CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n            }\n        } finally {\n            // Refresh TOC, some prerequisites might have changed.\n            this.refreshToc();\n        }\n    }\n\n    /**\n     * Show the TOC.\n     */\n    async openToc(): Promise<void> {\n        const modalData = await CoreDomUtils.openSideModal<AddonModScormScoWithData>({\n            component: AddonModScormTocComponent,\n            componentProps: {\n                toc: this.toc,\n                attemptToContinue: this.attemptToContinue,\n                selected: this.currentSco && this.currentSco.id,\n                moduleId: this.cmId,\n                courseId: this.courseId,\n                accessInfo: this.accessInfo,\n                mode: this.mode,\n            },\n        });\n\n        if (modalData) {\n            this.loadSco(modalData);\n        }\n    }\n\n    /**\n     * Refresh the TOC.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async refreshToc(): Promise<void> {\n        try {\n            await CoreUtils.ignoreErrors(AddonModScorm.invalidateAllScormData(this.scorm.id));\n\n            await this.fetchToc();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_scorm.errorgetscorm', true);\n        }\n    }\n\n    /**\n     * Set SCORM start time.\n     *\n     * @param scoId SCO ID.\n     * @returns Promise resolved when done.\n     */\n    protected async setStartTime(scoId: number): Promise<void> {\n        if (!this.canSaveTracks) {\n            return;\n        }\n\n        const tracks = [{\n            element: 'x.start.time',\n            value: String(CoreTimeUtils.timestamp()),\n        }];\n\n        await AddonModScorm.saveTracks(scoId, this.attempt, tracks, this.scorm, this.offline);\n\n        if (this.offline) {\n            return;\n        }\n\n        // New online attempt created, update cached data about online attempts.\n        await CoreUtils.ignoreErrors(AddonModScorm.getAttemptCount(this.scorm.id, {\n            cmId: this.cmId,\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n        }));\n    }\n\n    /**\n     * Log event.\n     */\n    protected async logEvent(scoId: number): Promise<void> {\n        await CoreUtils.ignoreErrors(AddonModScorm.logLaunchSco(this.scorm.id, scoId));\n\n        let url = '/mod/scorm/player.php';\n        if (this.scorm.popup) {\n            url += `?a=${this.scorm.id}&currentorg=${this.organizationId}&scoid=${scoId}` +\n                `&display=popup&mode=${this.mode}`;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: 'mod_scorm_get_scorm_user_data',\n            name: this.scorm.name,\n            data: { id: this.scorm.id, scoid: scoId, organization: this.organizationId, category: 'scorm' },\n            url,\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        // Empty src when leaving the state so unload event is triggered in the iframe.\n        this.src = '';\n        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'scorm' });\n\n        // Stop listening for events.\n        this.tocObserver?.off();\n        this.launchNextObserver?.off();\n        this.launchPrevObserver?.off();\n        setTimeout(() => {\n            this.goOfflineObserver?.off();\n        }, 500);\n\n        // Unblock the SCORM so it can be synced.\n        CoreSync.unblockOperation(AddonModScormProvider.COMPONENT, this.scorm.id, 'player');\n    }\n\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>\n                <core-format-text [text]=\"title\" contextLevel=\"module\" [contextInstanceId]=\"cmId\" [courseId]=\"courseId\" />\n            </h1>\n        </ion-title>\n        <ion-buttons slot=\"end\">\n            <core-button-with-spinner *ngIf=\"showToc\" [loading]=\"loadingToc\">\n                <ion-button fill=\"clear\" *ngIf=\"toc.length\" (click)=\"openToc()\" [attr.aria-label]=\"'addon.mod_scorm.toc' | translate\"\n                    aria-haspopup=\"true\">\n                    <ion-icon name=\"fas-bookmark\" slot=\"icon-only\" aria-hidden=\"true\" />\n                </ion-button>\n            </core-button-with-spinner>\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <core-loading [hideUntil]=\"loaded\">\n        <core-iframe *ngIf=\"loaded\" id=\"scorm_object\" [src]=\"src\" [iframeWidth]=\"scormWidth\" [iframeHeight]=\"scormHeight\"\n            [showFullscreenOnToolbar]=\"true\" [autoFullscreenOnRotate]=\"true\" />\n\n        <p *ngIf=\"!src && errorMessage\">{{ errorMessage | translate }}</p>\n    </core-loading>\n\n    <core-navigation-bar collapsible-footer appearOnBottom *ngIf=\"loaded && navigationItems.length > 1\" [items]=\"navigationItems\"\n        (action)=\"loadSco($event)\" slot=\"fixed\" />\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}