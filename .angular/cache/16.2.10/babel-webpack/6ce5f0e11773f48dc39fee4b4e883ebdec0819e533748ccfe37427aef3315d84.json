{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonQtypeCalculatedComponent } from '../../component/calculated';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to support calculated question type.\n */\nexport class AddonQtypeCalculatedHandlerService {\n  constructor() {\n    this.name = 'AddonQtypeCalculated';\n    this.type = 'qtype_calculated';\n  }\n  /**\n   * @inheritdoc\n   */\n  getComponent() {\n    return AddonQtypeCalculatedComponent;\n  }\n  /**\n   * Check if the units are in a separate field for the question.\n   *\n   * @param question Question.\n   * @returns Whether units are in a separate field.\n   */\n  hasSeparateUnitField(question) {\n    if (!question.parsedSettings) {\n      const element = CoreDomUtils.convertToElement(question.html);\n      return !!(element.querySelector('select[name*=unit]') || element.querySelector('input[type=\"radio\"]'));\n    }\n    return question.parsedSettings.unitdisplay === AddonQtypeCalculatedHandlerService.UNITRADIO || question.parsedSettings.unitdisplay === AddonQtypeCalculatedHandlerService.UNITSELECT;\n  }\n  /**\n   * @inheritdoc\n   */\n  isCompleteResponse(question, answers) {\n    if (!this.isGradableResponse(question, answers)) {\n      return 0;\n    }\n    const {\n      answer,\n      unit\n    } = this.parseAnswer(question, answers.answer);\n    if (answer === null) {\n      return 0;\n    }\n    if (!question.parsedSettings) {\n      if (this.hasSeparateUnitField(question)) {\n        return this.isValidValue(answers.unit) ? 1 : 0;\n      }\n      // We cannot know if the answer should contain units or not.\n      return -1;\n    }\n    if (question.parsedSettings.unitdisplay != AddonQtypeCalculatedHandlerService.UNITINPUT && unit) {\n      // There should be no units or be outside of the input, not valid.\n      return 0;\n    }\n    if (this.hasSeparateUnitField(question) && !this.isValidValue(answers.unit)) {\n      // Unit not supplied as a separate field and it's required.\n      return 0;\n    }\n    if (question.parsedSettings.unitdisplay == AddonQtypeCalculatedHandlerService.UNITINPUT && question.parsedSettings.unitgradingtype == AddonQtypeCalculatedHandlerService.UNITGRADED && !this.isValidValue(unit)) {\n      // Unit not supplied inside the input and it's required.\n      return 0;\n    }\n    return 1;\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  isGradableResponse(question, answers) {\n    return this.isValidValue(answers.answer) ? 1 : 0;\n  }\n  /**\n   * @inheritdoc\n   */\n  isSameResponse(question, prevAnswers, newAnswers) {\n    return CoreUtils.sameAtKeyMissingIsBlank(prevAnswers, newAnswers, 'answer') && CoreUtils.sameAtKeyMissingIsBlank(prevAnswers, newAnswers, 'unit');\n  }\n  /**\n   * Check if a value is valid (not empty).\n   *\n   * @param value Value to check.\n   * @returns Whether the value is valid.\n   */\n  isValidValue(value) {\n    return !!value || value === '0' || value === 0;\n  }\n  /**\n   * Parse an answer string.\n   *\n   * @param question Question.\n   * @param answer Answer.\n   * @returns Answer and unit.\n   */\n  parseAnswer(question, answer) {\n    if (!answer) {\n      return {\n        answer: null,\n        unit: null\n      };\n    }\n    let regexString = '[+-]?(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[-+]?\\\\d+)?';\n    // Strip spaces (which may be thousands separators) and change other forms of writing e to e.\n    answer = answer.replace(/ /g, '');\n    answer = answer.replace(/(?:e|E|(?:x|\\*|×)10(?:\\^|\\*\\*))([+-]?\\d+)/, 'e$1');\n    // If a '.' is present or there are multiple ',' (i.e. 2,456,789) assume ',' is a thousands separator and strip it.\n    // Else assume it is a decimal separator, and change it to '.'.\n    if (answer.indexOf('.') != -1 || answer.split(',').length - 1 > 1) {\n      answer = answer.replace(',', '');\n    } else {\n      answer = answer.replace(',', '.');\n    }\n    let unitsLeft = false;\n    let match = null;\n    if (!question.parsedSettings || question.parsedSettings.unitsleft === null) {\n      // We don't know if units should be before or after so we check both.\n      match = answer.match(new RegExp('^' + regexString));\n      if (!match) {\n        unitsLeft = true;\n        match = answer.match(new RegExp(regexString + '$'));\n      }\n    } else {\n      unitsLeft = question.parsedSettings.unitsleft == '1';\n      regexString = unitsLeft ? regexString + '$' : '^' + regexString;\n      match = answer.match(new RegExp(regexString));\n    }\n    if (!match) {\n      return {\n        answer: null,\n        unit: null\n      };\n    }\n    const numberString = match[0];\n    const unit = unitsLeft ? answer.substring(0, answer.length - match[0].length) : answer.substring(match[0].length);\n    // No need to calculate the multiplier.\n    return {\n      answer: Number(numberString),\n      unit\n    };\n  }\n}\n_class = AddonQtypeCalculatedHandlerService;\n_class.UNITINPUT = '0';\n_class.UNITRADIO = '1';\n_class.UNITSELECT = '2';\n_class.UNITNONE = '3';\n_class.UNITGRADED = '1';\n_class.UNITOPTIONAL = '0';\n_class.ɵfac = function AddonQtypeCalculatedHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonQtypeCalculatedHandler = makeSingleton(AddonQtypeCalculatedHandlerService);","map":{"version":3,"names":["CoreDomUtils","CoreUtils","makeSingleton","AddonQtypeCalculatedComponent","AddonQtypeCalculatedHandlerService","constructor","name","type","getComponent","hasSeparateUnitField","question","parsedSettings","element","convertToElement","html","querySelector","unitdisplay","UNITRADIO","UNITSELECT","isCompleteResponse","answers","isGradableResponse","answer","unit","parseAnswer","isValidValue","UNITINPUT","unitgradingtype","UNITGRADED","isEnabled","_asyncToGenerator","isSameResponse","prevAnswers","newAnswers","sameAtKeyMissingIsBlank","value","regexString","replace","indexOf","split","length","unitsLeft","match","unitsleft","RegExp","numberString","substring","Number","_class","UNITNONE","UNITOPTIONAL","factory","ɵfac","providedIn","AddonQtypeCalculatedHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/qtype/calculated/services/handlers/calculated.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\n\nimport { CoreQuestionQuestionParsed, CoreQuestionsAnswers } from '@features/question/services/question';\nimport { CoreQuestionHandler } from '@features/question/services/question-delegate';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonQtypeCalculatedComponent } from '../../component/calculated';\n\n/**\n * Handler to support calculated question type.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonQtypeCalculatedHandlerService implements CoreQuestionHandler {\n\n    static readonly UNITINPUT = '0';\n    static readonly UNITRADIO = '1';\n    static readonly UNITSELECT = '2';\n    static readonly UNITNONE = '3';\n\n    static readonly UNITGRADED = '1';\n    static readonly UNITOPTIONAL = '0';\n\n    name = 'AddonQtypeCalculated';\n    type = 'qtype_calculated';\n\n    /**\n     * @inheritdoc\n     */\n    getComponent(): Type<unknown> {\n        return AddonQtypeCalculatedComponent;\n    }\n\n    /**\n     * Check if the units are in a separate field for the question.\n     *\n     * @param question Question.\n     * @returns Whether units are in a separate field.\n     */\n    hasSeparateUnitField(question: CoreQuestionQuestionParsed): boolean {\n        if (!question.parsedSettings) {\n            const element = CoreDomUtils.convertToElement(question.html);\n\n            return !!(element.querySelector('select[name*=unit]') || element.querySelector('input[type=\"radio\"]'));\n        }\n\n        return question.parsedSettings.unitdisplay === AddonQtypeCalculatedHandlerService.UNITRADIO ||\n            question.parsedSettings.unitdisplay === AddonQtypeCalculatedHandlerService.UNITSELECT;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isCompleteResponse(\n        question: CoreQuestionQuestionParsed,\n        answers: CoreQuestionsAnswers,\n    ): number {\n        if (!this.isGradableResponse(question, answers)) {\n            return 0;\n        }\n\n        const { answer, unit } = this.parseAnswer(question, <string> answers.answer);\n        if (answer === null) {\n            return 0;\n        }\n\n        if (!question.parsedSettings) {\n            if (this.hasSeparateUnitField(question)) {\n                return this.isValidValue(<string> answers.unit) ? 1 : 0;\n            }\n\n            // We cannot know if the answer should contain units or not.\n            return -1;\n        }\n\n        if (question.parsedSettings.unitdisplay != AddonQtypeCalculatedHandlerService.UNITINPUT && unit) {\n            // There should be no units or be outside of the input, not valid.\n            return 0;\n        }\n\n        if (this.hasSeparateUnitField(question) && !this.isValidValue(<string> answers.unit)) {\n            // Unit not supplied as a separate field and it's required.\n            return 0;\n        }\n\n        if (question.parsedSettings.unitdisplay == AddonQtypeCalculatedHandlerService.UNITINPUT &&\n                question.parsedSettings.unitgradingtype == AddonQtypeCalculatedHandlerService.UNITGRADED &&\n                !this.isValidValue(unit)) {\n            // Unit not supplied inside the input and it's required.\n            return 0;\n        }\n\n        return 1;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isGradableResponse(\n        question: CoreQuestionQuestionParsed,\n        answers: CoreQuestionsAnswers,\n    ): number {\n        return this.isValidValue(<string> answers.answer) ? 1 : 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isSameResponse(\n        question: CoreQuestionQuestionParsed,\n        prevAnswers: CoreQuestionsAnswers,\n        newAnswers: CoreQuestionsAnswers,\n    ): boolean {\n        return CoreUtils.sameAtKeyMissingIsBlank(prevAnswers, newAnswers, 'answer') &&\n            CoreUtils.sameAtKeyMissingIsBlank(prevAnswers, newAnswers, 'unit');\n    }\n\n    /**\n     * Check if a value is valid (not empty).\n     *\n     * @param value Value to check.\n     * @returns Whether the value is valid.\n     */\n    isValidValue(value: string | number | null): boolean {\n        return !!value || value === '0' || value === 0;\n    }\n\n    /**\n     * Parse an answer string.\n     *\n     * @param question Question.\n     * @param answer Answer.\n     * @returns Answer and unit.\n     */\n    parseAnswer(question: CoreQuestionQuestionParsed, answer: string): { answer: number | null; unit: string | null } {\n        if (!answer) {\n            return { answer: null, unit: null };\n        }\n\n        let regexString = '[+-]?(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[-+]?\\\\d+)?';\n\n        // Strip spaces (which may be thousands separators) and change other forms of writing e to e.\n        answer = answer.replace(/ /g, '');\n        answer = answer.replace(/(?:e|E|(?:x|\\*|×)10(?:\\^|\\*\\*))([+-]?\\d+)/, 'e$1');\n\n        // If a '.' is present or there are multiple ',' (i.e. 2,456,789) assume ',' is a thousands separator and strip it.\n        // Else assume it is a decimal separator, and change it to '.'.\n        if (answer.indexOf('.') != -1 || answer.split(',').length - 1 > 1) {\n            answer = answer.replace(',', '');\n        } else {\n            answer = answer.replace(',', '.');\n        }\n\n        let unitsLeft = false;\n        let match: RegExpMatchArray | null = null;\n\n        if (!question.parsedSettings || question.parsedSettings.unitsleft === null) {\n            // We don't know if units should be before or after so we check both.\n            match = answer.match(new RegExp('^' + regexString));\n            if (!match) {\n                unitsLeft = true;\n                match = answer.match(new RegExp(regexString + '$'));\n            }\n        } else {\n            unitsLeft = question.parsedSettings.unitsleft == '1';\n            regexString = unitsLeft ? regexString + '$' : '^' + regexString;\n\n            match = answer.match(new RegExp(regexString));\n        }\n\n        if (!match) {\n            return { answer: null, unit: null };\n        }\n\n        const numberString = match[0];\n        const unit = unitsLeft ? answer.substring(0, answer.length - match[0].length) : answer.substring(match[0].length);\n\n        // No need to calculate the multiplier.\n        return { answer: Number(numberString), unit };\n    }\n\n}\n\nexport const AddonQtypeCalculatedHandler = makeSingleton(AddonQtypeCalculatedHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}