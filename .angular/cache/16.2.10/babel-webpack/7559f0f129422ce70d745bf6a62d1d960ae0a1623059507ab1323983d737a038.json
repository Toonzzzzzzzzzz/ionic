{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton } from '@singletons';\nimport { CoreSites } from '@services/sites';\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreSite } from '@classes/sites/site';\nimport * as i0 from \"@angular/core\";\nexport const CORE_SEARCH_GLOBAL_SEARCH_PAGE_LENGTH = 10;\nexport const CORE_SEARCH_GLOBAL_SEARCH_FILTERS_UPDATED = 'core-search-global-search-filters-updated';\n/**\n * Service to perform global searches.\n */\nexport class CoreSearchGlobalSearchService {\n  /**\n   * Check whether global search is enabled or not.\n   *\n   * @returns Whether global search is enabled or not.\n   */\n  isEnabled(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = siteId ? yield CoreSites.getSite(siteId) : CoreSites.getRequiredCurrentSite();\n      return !(site !== null && site !== void 0 && site.isFeatureDisabled('NoDelegate_GlobalSearch')) && (site === null || site === void 0 ? void 0 : site.wsAvailable('core_search_get_results')) // @since 4.3\n      && (site === null || site === void 0 ? void 0 : site.canUseAdvancedFeature('enableglobalsearch'));\n    })();\n  }\n  /**\n   * Get results.\n   *\n   * @param query Search query.\n   * @param filters Search filters.\n   * @param page Page.\n   * @returns Search results.\n   */\n  getResults(query, filters, page) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.filtersYieldEmptyResults(filters)) {\n        return {\n          results: [],\n          total: 0,\n          canLoadMore: false\n        };\n      }\n      const site = CoreSites.getRequiredCurrentSite();\n      const params = {\n        query,\n        page,\n        filters: yield _this.prepareAdvancedWSFilters(filters)\n      };\n      const preSets = CoreSites.getReadingStrategyPreSets(3 /* CoreSitesReadingStrategy.PREFER_NETWORK */);\n      const {\n        totalcount,\n        results\n      } = yield site.read('core_search_get_results', params, preSets);\n      return {\n        results: yield Promise.all((results !== null && results !== void 0 ? results : []).map(result => _this.formatWSResult(result))),\n        total: totalcount,\n        canLoadMore: totalcount > (page + 1) * CORE_SEARCH_GLOBAL_SEARCH_PAGE_LENGTH\n      };\n    })();\n  }\n  /**\n   * Get available search areas.\n   *\n   * @returns Search areas.\n   */\n  getSearchAreas() {\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      const params = {};\n      const {\n        areas\n      } = yield site.read('core_search_get_search_areas_list', params, {\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        cacheKey: CoreSearchGlobalSearchService.SEARCH_AREAS_CACHE_KEY\n      });\n      return areas.map(area => ({\n        id: area.id,\n        name: area.name,\n        category: {\n          id: area.categoryid,\n          name: area.categoryname\n        }\n      }));\n    })();\n  }\n  /**\n   * Invalidate search areas cache.\n   */\n  invalidateSearchAreas() {\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      yield site.invalidateWsCacheForKey(CoreSearchGlobalSearchService.SEARCH_AREAS_CACHE_KEY);\n    })();\n  }\n  /**\n   * Log event for viewing results.\n   *\n   * @param query Search query.\n   * @param filters Search filters.\n   */\n  logViewResults(query, filters) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      const params = {\n        query,\n        filters: yield _this2.prepareBasicWSFilters(filters)\n      };\n      yield site.write('core_search_view_results', params);\n    })();\n  }\n  /**\n   * Format a WS result to be used in the app.\n   *\n   * @param wsResult WS result.\n   * @returns App result.\n   */\n  formatWSResult(wsResult) {\n    return _asyncToGenerator(function* () {\n      const result = {\n        id: wsResult.itemid,\n        title: wsResult.title,\n        url: wsResult.docurl,\n        content: wsResult.content\n      };\n      if (wsResult.componentname === 'core_user') {\n        const user = yield CoreUser.getProfile(wsResult.itemid);\n        result.user = user;\n      } else if (wsResult.componentname === 'core_course' && wsResult.areaname === 'course') {\n        const course = yield CoreCourses.getCourseByField('id', wsResult.itemid);\n        result.course = course;\n      } else {\n        if (wsResult.userfullname || wsResult.coursefullname) {\n          result.context = {\n            userName: wsResult.userfullname,\n            courseName: wsResult.coursefullname\n          };\n        }\n        if (wsResult.iconurl) {\n          if (wsResult.componentname.startsWith('mod_')) {\n            result.module = {\n              name: wsResult.componentname.substring(4),\n              iconurl: wsResult.iconurl,\n              area: wsResult.areaname\n            };\n          } else {\n            result.component = {\n              name: wsResult.componentname,\n              iconurl: wsResult.iconurl\n            };\n          }\n        }\n      }\n      return result;\n    })();\n  }\n  /**\n   * Check whether the given filter will necessarily yield an empty list of results.\n   *\n   * @param filters Filters.\n   * @returns Whether the given filters will return 0 results.\n   */\n  filtersYieldEmptyResults(filters) {\n    var _filters$courseIds, _filters$contextIds, _filters$searchAreaId, _filters$searchAreaCa;\n    return ((_filters$courseIds = filters.courseIds) === null || _filters$courseIds === void 0 ? void 0 : _filters$courseIds.length) === 0 || ((_filters$contextIds = filters.contextIds) === null || _filters$contextIds === void 0 ? void 0 : _filters$contextIds.length) === 0 || ((_filters$searchAreaId = filters.searchAreaIds) === null || _filters$searchAreaId === void 0 ? void 0 : _filters$searchAreaId.length) === 0 || ((_filters$searchAreaCa = filters.searchAreaCategoryIds) === null || _filters$searchAreaCa === void 0 ? void 0 : _filters$searchAreaCa.length) === 0;\n  }\n  /**\n   * Prepare basic search filters before sending to WS.\n   *\n   * @param filters App filters.\n   * @returns Basic WS filters.\n   */\n  prepareBasicWSFilters(filters) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const wsFilters = {};\n      if (filters.courseIds) {\n        wsFilters.courseids = filters.courseIds;\n      }\n      if (filters.searchAreaIds) {\n        wsFilters.areaids = filters.searchAreaIds;\n      }\n      if (filters.searchAreaCategoryIds) {\n        const searchAreas = yield _this3.getSearchAreas();\n        wsFilters.areaids = searchAreas.filter(({\n          id,\n          category\n        }) => {\n          var _filters$searchAreaCa2;\n          if (filters.searchAreaIds && !filters.searchAreaIds.includes(id)) {\n            return false;\n          }\n          return (_filters$searchAreaCa2 = filters.searchAreaCategoryIds) === null || _filters$searchAreaCa2 === void 0 ? void 0 : _filters$searchAreaCa2.includes(category.id);\n        }).map(({\n          id\n        }) => id);\n      }\n      return wsFilters;\n    })();\n  }\n  /**\n   * Prepare advanced search filters before sending to WS.\n   *\n   * @param filters App filters.\n   * @returns Advanced WS filters.\n   */\n  prepareAdvancedWSFilters(filters) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const wsFilters = yield _this4.prepareBasicWSFilters(filters);\n      if (filters.contextIds) {\n        wsFilters.contextids = filters.contextIds;\n      }\n      return wsFilters;\n    })();\n  }\n}\n_class = CoreSearchGlobalSearchService;\n_class.SEARCH_AREAS_CACHE_KEY = 'CoreSearchGlobalSearch:SearchAreas';\n_class.ɵfac = function CoreSearchGlobalSearchService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreSearchGlobalSearch = makeSingleton(CoreSearchGlobalSearchService);","map":{"version":3,"names":["makeSingleton","CoreSites","CoreCourses","CoreUser","CoreSite","CORE_SEARCH_GLOBAL_SEARCH_PAGE_LENGTH","CORE_SEARCH_GLOBAL_SEARCH_FILTERS_UPDATED","CoreSearchGlobalSearchService","isEnabled","siteId","_asyncToGenerator","site","getSite","getRequiredCurrentSite","isFeatureDisabled","wsAvailable","canUseAdvancedFeature","getResults","query","filters","page","_this","filtersYieldEmptyResults","results","total","canLoadMore","params","prepareAdvancedWSFilters","preSets","getReadingStrategyPreSets","totalcount","read","Promise","all","map","result","formatWSResult","getSearchAreas","areas","updateFrequency","FREQUENCY_RARELY","cacheKey","SEARCH_AREAS_CACHE_KEY","area","id","name","category","categoryid","categoryname","invalidateSearchAreas","invalidateWsCacheForKey","logViewResults","_this2","prepareBasicWSFilters","write","wsResult","itemid","title","url","docurl","content","componentname","user","getProfile","areaname","course","getCourseByField","userfullname","coursefullname","context","userName","courseName","iconurl","startsWith","module","substring","component","_filters$courseIds","_filters$contextIds","_filters$searchAreaId","_filters$searchAreaCa","courseIds","length","contextIds","searchAreaIds","searchAreaCategoryIds","_this3","wsFilters","courseids","areaids","searchAreas","filter","_filters$searchAreaCa2","includes","_this4","contextids","_class","factory","ɵfac","providedIn","CoreSearchGlobalSearch"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/search/services/global-search.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { makeSingleton } from '@singletons';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { CoreCourseListItem, CoreCourses } from '@features/courses/services/courses';\nimport { CoreUserWithAvatar } from '@components/user-avatar/user-avatar';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreSite } from '@classes/sites/site';\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [CORE_SEARCH_GLOBAL_SEARCH_FILTERS_UPDATED]: CoreSearchGlobalSearchFilters;\n    }\n\n}\n\nexport const CORE_SEARCH_GLOBAL_SEARCH_PAGE_LENGTH = 10;\nexport const CORE_SEARCH_GLOBAL_SEARCH_FILTERS_UPDATED = 'core-search-global-search-filters-updated';\n\nexport type CoreSearchGlobalSearchResult = {\n    id: number;\n    title: string;\n    url: string;\n    content?: string;\n    context?: CoreSearchGlobalSearchResultContext;\n    module?: CoreSearchGlobalSearchResultModule;\n    component?: CoreSearchGlobalSearchResultComponent;\n    course?: CoreCourseListItem;\n    user?: CoreUserWithAvatar;\n};\n\nexport type CoreSearchGlobalSearchResultContext = {\n    userName?: string;\n    courseName?: string;\n};\n\nexport type CoreSearchGlobalSearchResultModule = {\n    name: string;\n    iconurl: string;\n    area: string;\n};\n\nexport type CoreSearchGlobalSearchResultComponent = {\n    name: string;\n    iconurl: string;\n};\n\nexport type CoreSearchGlobalSearchSearchAreaCategory = {\n    id: string;\n    name: string;\n};\n\nexport type CoreSearchGlobalSearchSearchArea = {\n    id: string;\n    name: string;\n    category: CoreSearchGlobalSearchSearchAreaCategory;\n};\n\nexport interface CoreSearchGlobalSearchFilters {\n    searchAreaCategoryIds?: string[];\n    searchAreaIds?: string[];\n    courseIds?: number[];\n    contextIds?: number[];\n}\n\n/**\n * Service to perform global searches.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreSearchGlobalSearchService {\n\n    private static readonly SEARCH_AREAS_CACHE_KEY = 'CoreSearchGlobalSearch:SearchAreas';\n\n    /**\n     * Check whether global search is enabled or not.\n     *\n     * @returns Whether global search is enabled or not.\n     */\n    async isEnabled(siteId?: string): Promise<boolean> {\n        const site = siteId\n            ? await CoreSites.getSite(siteId)\n            : CoreSites.getRequiredCurrentSite();\n\n        return !site?.isFeatureDisabled('NoDelegate_GlobalSearch')\n            && site?.wsAvailable('core_search_get_results') // @since 4.3\n            && site?.canUseAdvancedFeature('enableglobalsearch');\n    }\n\n    /**\n     * Get results.\n     *\n     * @param query Search query.\n     * @param filters Search filters.\n     * @param page Page.\n     * @returns Search results.\n     */\n    async getResults(\n        query: string,\n        filters: CoreSearchGlobalSearchFilters,\n        page: number,\n    ): Promise<{ results: CoreSearchGlobalSearchResult[]; total: number; canLoadMore: boolean }> {\n        if (this.filtersYieldEmptyResults(filters)) {\n            return {\n                results: [],\n                total: 0,\n                canLoadMore: false,\n            };\n        }\n\n        const site = CoreSites.getRequiredCurrentSite();\n        const params: CoreSearchGetResultsWSParams = {\n            query,\n            page,\n            filters: await this.prepareAdvancedWSFilters(filters),\n        };\n        const preSets = CoreSites.getReadingStrategyPreSets(CoreSitesReadingStrategy.PREFER_NETWORK);\n\n        const { totalcount, results } = await site.read<CoreSearchGetResultsWSResponse>('core_search_get_results', params, preSets);\n\n        return {\n            results: await Promise.all((results ?? []).map(result => this.formatWSResult(result))),\n            total: totalcount,\n            canLoadMore: totalcount > (page + 1) * CORE_SEARCH_GLOBAL_SEARCH_PAGE_LENGTH,\n        };\n    }\n\n    /**\n     * Get available search areas.\n     *\n     * @returns Search areas.\n     */\n    async getSearchAreas(): Promise<CoreSearchGlobalSearchSearchArea[]> {\n        const site = CoreSites.getRequiredCurrentSite();\n        const params: CoreSearchGetSearchAreasListWSParams = {};\n\n        const { areas } = await site.read<CoreSearchGetSearchAreasListWSResponse>('core_search_get_search_areas_list', params, {\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            cacheKey: CoreSearchGlobalSearchService.SEARCH_AREAS_CACHE_KEY,\n        });\n\n        return areas.map(area => ({\n            id: area.id,\n            name: area.name,\n            category: {\n                id: area.categoryid,\n                name: area.categoryname,\n            },\n        }));\n    }\n\n    /**\n     * Invalidate search areas cache.\n     */\n    async invalidateSearchAreas(): Promise<void> {\n        const site = CoreSites.getRequiredCurrentSite();\n\n        await site.invalidateWsCacheForKey(CoreSearchGlobalSearchService.SEARCH_AREAS_CACHE_KEY);\n    }\n\n    /**\n     * Log event for viewing results.\n     *\n     * @param query Search query.\n     * @param filters Search filters.\n     */\n    async logViewResults(query: string, filters: CoreSearchGlobalSearchFilters): Promise<void> {\n        const site = CoreSites.getRequiredCurrentSite();\n        const params: CoreSearchViewResultsWSParams = {\n            query,\n            filters: await this.prepareBasicWSFilters(filters),\n        };\n\n        await site.write<CoreSearchViewResultsWSResponse>('core_search_view_results', params);\n    }\n\n    /**\n     * Format a WS result to be used in the app.\n     *\n     * @param wsResult WS result.\n     * @returns App result.\n     */\n    protected async formatWSResult(wsResult: CoreSearchWSResult): Promise<CoreSearchGlobalSearchResult> {\n        const result: CoreSearchGlobalSearchResult = {\n            id: wsResult.itemid,\n            title: wsResult.title,\n            url: wsResult.docurl,\n            content: wsResult.content,\n        };\n\n        if (wsResult.componentname === 'core_user') {\n            const user = await CoreUser.getProfile(wsResult.itemid);\n\n            result.user = user;\n        } else if (wsResult.componentname === 'core_course' && wsResult.areaname === 'course') {\n            const course = await CoreCourses.getCourseByField('id', wsResult.itemid);\n\n            result.course = course;\n        } else {\n            if (wsResult.userfullname || wsResult.coursefullname) {\n                result.context = {\n                    userName: wsResult.userfullname,\n                    courseName: wsResult.coursefullname,\n                };\n            }\n\n            if (wsResult.iconurl) {\n                if (wsResult.componentname.startsWith('mod_')) {\n                    result.module = {\n                        name: wsResult.componentname.substring(4),\n                        iconurl: wsResult.iconurl,\n                        area: wsResult.areaname,\n                    };\n                } else {\n                    result.component = {\n                        name: wsResult.componentname,\n                        iconurl: wsResult.iconurl,\n                    };\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check whether the given filter will necessarily yield an empty list of results.\n     *\n     * @param filters Filters.\n     * @returns Whether the given filters will return 0 results.\n     */\n    protected filtersYieldEmptyResults(filters: CoreSearchGlobalSearchFilters): boolean {\n        return filters.courseIds?.length === 0\n            || filters.contextIds?.length === 0\n            || filters.searchAreaIds?.length === 0\n            || filters.searchAreaCategoryIds?.length === 0;\n    }\n\n    /**\n     * Prepare basic search filters before sending to WS.\n     *\n     * @param filters App filters.\n     * @returns Basic WS filters.\n     */\n    protected async prepareBasicWSFilters(filters: CoreSearchGlobalSearchFilters): Promise<CoreSearchBasicWSFilters> {\n        const wsFilters: CoreSearchBasicWSFilters = {};\n\n        if (filters.courseIds) {\n            wsFilters.courseids = filters.courseIds;\n        }\n\n        if (filters.searchAreaIds) {\n            wsFilters.areaids = filters.searchAreaIds;\n        }\n\n        if (filters.searchAreaCategoryIds) {\n            const searchAreas = await this.getSearchAreas();\n\n            wsFilters.areaids = searchAreas\n                .filter(({ id, category }) => {\n                    if (filters.searchAreaIds && !filters.searchAreaIds.includes(id)) {\n                        return false;\n                    }\n\n                    return filters.searchAreaCategoryIds?.includes(category.id);\n                })\n                .map(({ id }) => id);\n        }\n\n        return wsFilters;\n    }\n\n    /**\n     * Prepare advanced search filters before sending to WS.\n     *\n     * @param filters App filters.\n     * @returns Advanced WS filters.\n     */\n    protected async prepareAdvancedWSFilters(filters: CoreSearchGlobalSearchFilters): Promise<CoreSearchAdvancedWSFilters> {\n        const wsFilters: CoreSearchAdvancedWSFilters = await this.prepareBasicWSFilters(filters);\n\n        if (filters.contextIds) {\n            wsFilters.contextids = filters.contextIds;\n        }\n\n        return wsFilters;\n    }\n\n}\n\nexport const CoreSearchGlobalSearch = makeSingleton(CoreSearchGlobalSearchService);\n\n/**\n * Params of core_search_get_results WS.\n */\ntype CoreSearchGetResultsWSParams = {\n    query: string; // The search query.\n    filters?: CoreSearchAdvancedWSFilters; // Filters to apply.\n    page?: number; // Results page number starting from 0, defaults to the first page.\n};\n\n/**\n * Params of core_search_get_search_areas_list WS.\n */\ntype CoreSearchGetSearchAreasListWSParams = {\n    cat?: string; // Category to filter areas.\n};\n\n/**\n * Params of core_search_view_results WS.\n */\ntype CoreSearchViewResultsWSParams = {\n    query: string; // The search query.\n    filters?: CoreSearchBasicWSFilters; // Filters to apply.\n    page?: number; // Results page number starting from 0, defaults to the first page.\n};\n\n/**\n * Search result returned in WS.\n */\ntype CoreSearchWSResult = { // Search results.\n    itemid: number; // Unique id in the search area scope.\n    componentname: string; // Component name.\n    areaname: string; // Search area name.\n    courseurl: string; // Result course url.\n    coursefullname: string; // Result course fullname.\n    timemodified: number; // Result modified time.\n    title: string; // Result title.\n    docurl: string; // Result url.\n    iconurl?: string; // Icon url.\n    content?: string; // Result contents.\n    contextid: number; // Result context id.\n    contexturl: string; // Result context url.\n    description1?: string; // Extra result contents, depends on the search area.\n    description2?: string; // Extra result contents, depends on the search area.\n    multiplefiles?: number; // Whether multiple files are returned or not.\n    filenames?: string[]; // Result file names if present.\n    filename?: string; // Result file name if present.\n    userid?: number; // User id.\n    userurl?: string; // User url.\n    userfullname?: string; // User fullname.\n    textformat: number; // Text fields format, it is the same for all of them.\n};\n\n/**\n * Basic search filters used in WS.\n */\ntype CoreSearchBasicWSFilters = {\n    title?: string; // Result title.\n    areaids?: string[]; // Restrict results to these areas.\n    courseids?: number[]; // Restrict results to these courses.\n    timestart?: number; // Docs modified after this date.\n    timeend?: number; // Docs modified before this date.\n};\n\n/**\n * Advanced search filters used in WS.\n */\ntype CoreSearchAdvancedWSFilters = CoreSearchBasicWSFilters & {\n    contextids?: number[]; // Restrict results to these contexts.\n    cat?: string; // Category to filter areas.\n    userids?: number[]; // Restrict results to these users.\n    groupids?: number[]; // Restrict results to these groups.\n    mycoursesonly?: boolean; // Only results from my courses.\n    order?: string; // How to order.\n};\n\n/**\n * Data returned by core_search_get_results WS.\n */\ntype CoreSearchGetResultsWSResponse = {\n    totalcount: number; // Total number of results.\n    results?: CoreSearchWSResult[];\n};\n\n/**\n * Data returned by core_search_get_search_areas_list WS.\n */\ntype CoreSearchGetSearchAreasListWSResponse = {\n    areas: { // Search areas.\n        id: string; // Search area id.\n        categoryid: string; // Category id.\n        categoryname: string; // Category name.\n        name: string; // Search area name.\n    }[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Data returned by core_search_view_results WS.\n */\ntype CoreSearchViewResultsWSResponse = {\n    status: boolean; // Status: true if success.\n    warnings?: CoreWSExternalWarning[];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}