{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreError } from '@classes/errors/error';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to provide grade functionalities.\n */\nexport class CoreGradesProvider {\n  // Moodle's GRADE_TYPE_TEXT.\n  constructor() {\n    this.ROOT_CACHE_KEY = 'mmGrades:';\n    this.logger = CoreLogger.getInstance('CoreGradesProvider');\n  }\n  /**\n   * Get cache key for grade table data WS calls.\n   *\n   * @param courseId ID of the course to get the grades from.\n   * @param userId ID of the user to get the grades from.\n   * @returns Cache key.\n   */\n  getCourseGradesCacheKey(courseId, userId) {\n    return this.getCourseGradesPrefixCacheKey(courseId) + userId;\n  }\n  /**\n   * Get cache key for grade items data WS calls.\n   *\n   * @param courseId ID of the course to get the grades from.\n   * @param userId ID of the user to get the grades from.\n   * @param groupId ID of the group to get the grades from. Default: 0.\n   * @returns Cache key.\n   */\n  getCourseGradesItemsCacheKey(courseId, userId, groupId) {\n    var _groupId;\n    groupId = (_groupId = groupId) !== null && _groupId !== void 0 ? _groupId : 0;\n    return this.getCourseGradesPrefixCacheKey(courseId) + userId + ':' + groupId;\n  }\n  /**\n   * Get prefix cache key for grade table data WS calls.\n   *\n   * @param courseId ID of the course to get the grades from.\n   * @returns Cache key.\n   */\n  getCourseGradesPrefixCacheKey(courseId) {\n    return this.ROOT_CACHE_KEY + 'items:' + courseId + ':';\n  }\n  /**\n   * Get prefix cache key for grade permissions WS calls.\n   *\n   * @param courseId ID of the course to check permissions.\n   * @returns Cache key.\n   */\n  getCourseGradesPermissionsCacheKey(courseId) {\n    return this.getCourseGradesPrefixCacheKey(courseId) + ':canviewallgrades';\n  }\n  /**\n   * Get cache key for courses grade WS calls.\n   *\n   * @returns Cache key.\n   */\n  getCoursesGradesCacheKey() {\n    return this.ROOT_CACHE_KEY + 'coursesgrades';\n  }\n  /**\n   * Get the grade items for a certain module. Keep in mind that may have more than one item to include outcomes and scales.\n   *\n   * @param courseId ID of the course to get the grades from.\n   * @param userId ID of the user to get the grades from. If not defined use site's current user.\n   * @param groupId ID of the group to get the grades from. Not used for old gradebook table.\n   * @param siteId Site ID. If not defined, current site.\n   * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n   * @returns Promise to be resolved when the grades are retrieved.\n   */\n  getGradeItems(courseId, userId, groupId, siteId, ignoreCache = false) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      return _this.getCourseGradesItems(courseId, userId, groupId, siteId, ignoreCache);\n    })();\n  }\n  /**\n   * Get the grade items for a certain course.\n   *\n   * @param courseId ID of the course to get the grades from.\n   * @param userId ID of the user to get the grades from.\n   * @param groupId ID of the group to get the grades from. Default 0.\n   * @param siteId Site ID. If not defined, current site.\n   * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n   * @returns Promise to be resolved when the grades table is retrieved.\n   */\n  getCourseGradesItems(courseId, userId, groupId, siteId, ignoreCache = false) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var _grades$usergrades;\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      groupId = groupId || 0;\n      _this2.logger.debug(`Get grades for course '${courseId}' and user '${userId}'`);\n      const params = {\n        courseid: courseId,\n        userid: userId,\n        groupid: groupId\n      };\n      const preSets = {\n        cacheKey: _this2.getCourseGradesItemsCacheKey(courseId, userId, groupId)\n      };\n      if (ignoreCache) {\n        preSets.getFromCache = false;\n        preSets.emergencyCache = false;\n      }\n      const grades = yield site.read('gradereport_user_get_grade_items', params, preSets);\n      if (!(grades !== null && grades !== void 0 && (_grades$usergrades = grades.usergrades) !== null && _grades$usergrades !== void 0 && _grades$usergrades[0])) {\n        throw new CoreError('Couldn\\'t get course grades items');\n      }\n      return grades.usergrades[0].gradeitems;\n    })();\n  }\n  /**\n   * Get the grades for a certain course.\n   *\n   * @param courseId ID of the course to get the grades from.\n   * @param userId ID of the user to get the grades from.\n   * @param siteId Site ID. If not defined, current site.\n   * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n   * @returns Promise to be resolved when the grades table is retrieved.\n   */\n  getCourseGradesTable(courseId, userId, siteId, ignoreCache = false) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _table$tables;\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      _this3.logger.debug(`Get grades for course '${courseId}' and user '${userId}'`);\n      const params = {\n        courseid: courseId,\n        userid: userId\n      };\n      const preSets = {\n        cacheKey: _this3.getCourseGradesCacheKey(courseId, userId)\n      };\n      if (ignoreCache) {\n        preSets.getFromCache = false;\n        preSets.emergencyCache = false;\n      }\n      const table = yield site.read('gradereport_user_get_grades_table', params, preSets);\n      if (!(table !== null && table !== void 0 && (_table$tables = table.tables) !== null && _table$tables !== void 0 && _table$tables[0])) {\n        throw new CoreError('Couldn\\'t get course grades table');\n      }\n      return table.tables[0];\n    })();\n  }\n  /**\n   * Get the grades for a certain course.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise to be resolved when the grades are retrieved.\n   */\n  getCoursesGrades(siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      _this4.logger.debug('Get course grades');\n      const params = {};\n      const preSets = {\n        cacheKey: _this4.getCoursesGradesCacheKey()\n      };\n      const data = yield site.read('gradereport_overview_get_course_grades', params, preSets);\n      if (!(data !== null && data !== void 0 && data.grades)) {\n        throw new Error('Couldn\\'t get course grades');\n      }\n      return data.grades;\n    })();\n  }\n  /**\n   * Invalidates courses grade table and items WS calls for all users.\n   *\n   * @param courseId ID of the course to get the grades from.\n   * @param siteId Site ID (empty for current site).\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAllCourseGradesData(courseId, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKeyStartingWith(_this5.getCourseGradesPrefixCacheKey(courseId));\n    })();\n  }\n  /**\n   * Invalidates grade table data WS calls.\n   *\n   * @param courseId Course ID.\n   * @param userId User ID.\n   * @param siteId Site id (empty for current site).\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateCourseGradesData(courseId, userId, siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      yield site.invalidateWsCacheForKey(_this6.getCourseGradesCacheKey(courseId, userId));\n    })();\n  }\n  /**\n   * Invalidates courses grade data WS calls.\n   *\n   * @param siteId Site id (empty for current site).\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateCoursesGradesData(siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this7.getCoursesGradesCacheKey());\n    })();\n  }\n  /**\n   * Invalidates courses grade items data WS calls.\n   *\n   * @param courseId ID of the course to get the grades from.\n   * @param userId ID of the user to get the grades from.\n   * @param groupId ID of the group to get the grades from. Default: 0.\n   * @param siteId Site id (empty for current site).\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateCourseGradesItemsData(courseId, userId, groupId, siteId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this8.getCourseGradesItemsCacheKey(courseId, userId, groupId));\n    })();\n  }\n  /**\n   * Invalidates course grade permissions WS calls.\n   *\n   * @param courseId ID of the course to get the permissions from.\n   */\n  invalidateCourseGradesPermissionsData(courseId) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      yield site.invalidateWsCacheForKey(_this9.getCourseGradesPermissionsCacheKey(courseId));\n    })();\n  }\n  /**\n   * Returns whether or not the plugin is enabled for a certain site.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Resolve with true if plugin is enabled, false otherwise.\n   */\n  isCourseGradesEnabled(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      // Check that the configurable mygradesurl is pointing to the gradereport_overview plugin.\n      const url = site.getStoredConfig('mygradesurl') || '';\n      return url.indexOf('/grade/report/overview/') !== -1;\n    })();\n  }\n  /**\n   * Returns whether or not the grade addon is enabled for a certain course.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with true if plugin is enabled, rejected or resolved with false otherwise.\n   */\n  isPluginEnabledForCourse(courseId, siteId) {\n    return _asyncToGenerator(function* () {\n      if (!courseId) {\n        return false;\n      }\n      const course = yield CoreCourses.getUserCourse(courseId, true, siteId);\n      return !(course && course.showgrades !== undefined && !course.showgrades);\n    })();\n  }\n  /**\n   * Log Course grades view in Moodle.\n   *\n   * @param courseId Course ID.\n   * @param userId User ID.\n   * @returns Promise resolved when done.\n   */\n  logCourseGradesView(courseId, userId) {\n    return _asyncToGenerator(function* () {\n      userId = userId || CoreSites.getCurrentSiteUserId();\n      const site = CoreSites.getCurrentSite();\n      const params = {\n        courseid: courseId,\n        userid: userId\n      };\n      yield site === null || site === void 0 ? void 0 : site.write('gradereport_user_view_grade_report', params);\n    })();\n  }\n  /**\n   * Log Courses grades view in Moodle.\n   *\n   * @param courseId Course ID. If not defined, site Home ID.\n   * @returns Promise resolved when done.\n   */\n  logCoursesGradesView(courseId) {\n    return _asyncToGenerator(function* () {\n      if (!courseId) {\n        courseId = CoreSites.getCurrentSiteHomeId();\n      }\n      const params = {\n        courseid: courseId\n      };\n      const site = CoreSites.getCurrentSite();\n      yield site === null || site === void 0 ? void 0 : site.write('gradereport_overview_view_grade_report', params);\n    })();\n  }\n  /**\n   * Check whether the current user can view all the grades in the course.\n   *\n   * @param courseId Course id.\n   * @returns Whether the current user can view all the grades.\n   */\n  canViewAllGrades(courseId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getRequiredCurrentSite();\n      if (!site.wsAvailable('gradereport_user_get_access_information')) {\n        return false;\n      }\n      const params = {\n        courseid: courseId\n      };\n      const preSets = {\n        cacheKey: _this10.getCourseGradesPermissionsCacheKey(courseId)\n      };\n      const access = yield site.read('gradereport_user_get_access_information', params, preSets);\n      return access.canviewallgrades;\n    })();\n  }\n}\n_class = CoreGradesProvider;\n_class.TYPE_NONE = 0;\n// Moodle's GRADE_TYPE_NONE.\n_class.TYPE_VALUE = 1;\n// Moodle's GRADE_TYPE_VALUE.\n_class.TYPE_SCALE = 2;\n// Moodle's GRADE_TYPE_SCALE.\n_class.TYPE_TEXT = 3;\n_class.ɵfac = function CoreGradesProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreGrades = makeSingleton(CoreGradesProvider);","map":{"version":3,"names":["CoreCourses","CoreSites","makeSingleton","CoreLogger","CoreError","CoreGradesProvider","constructor","ROOT_CACHE_KEY","logger","getInstance","getCourseGradesCacheKey","courseId","userId","getCourseGradesPrefixCacheKey","getCourseGradesItemsCacheKey","groupId","_groupId","getCourseGradesPermissionsCacheKey","getCoursesGradesCacheKey","getGradeItems","siteId","ignoreCache","_this","_asyncToGenerator","getCurrentSiteId","site","getSite","getUserId","getCourseGradesItems","_this2","_grades$usergrades","debug","params","courseid","userid","groupid","preSets","cacheKey","getFromCache","emergencyCache","grades","read","usergrades","gradeitems","getCourseGradesTable","_this3","_table$tables","table","tables","getCoursesGrades","_this4","data","Error","invalidateAllCourseGradesData","_this5","invalidateWsCacheForKeyStartingWith","invalidateCourseGradesData","_this6","invalidateWsCacheForKey","invalidateCoursesGradesData","_this7","invalidateCourseGradesItemsData","_this8","invalidateCourseGradesPermissionsData","_this9","getRequiredCurrentSite","isCourseGradesEnabled","url","getStoredConfig","indexOf","isPluginEnabledForCourse","course","getUserCourse","showgrades","undefined","logCourseGradesView","getCurrentSiteUserId","getCurrentSite","write","logCoursesGradesView","getCurrentSiteHomeId","canViewAllGrades","_this10","wsAvailable","access","canviewallgrades","_class","TYPE_NONE","TYPE_VALUE","TYPE_SCALE","TYPE_TEXT","factory","ɵfac","providedIn","CoreGrades"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/grades/services/grades.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreError } from '@classes/errors/error';\nimport { SafeNumber } from '@/core/utils/types';\n\n/**\n * Service to provide grade functionalities.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreGradesProvider {\n\n    static readonly TYPE_NONE = 0; // Moodle's GRADE_TYPE_NONE.\n    static readonly TYPE_VALUE = 1; // Moodle's GRADE_TYPE_VALUE.\n    static readonly TYPE_SCALE = 2; // Moodle's GRADE_TYPE_SCALE.\n    static readonly TYPE_TEXT = 3; // Moodle's GRADE_TYPE_TEXT.\n\n    protected readonly ROOT_CACHE_KEY = 'mmGrades:';\n\n    protected logger: CoreLogger;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreGradesProvider');\n    }\n\n    /**\n     * Get cache key for grade table data WS calls.\n     *\n     * @param courseId ID of the course to get the grades from.\n     * @param userId ID of the user to get the grades from.\n     * @returns Cache key.\n     */\n    protected getCourseGradesCacheKey(courseId: number, userId: number): string {\n        return this.getCourseGradesPrefixCacheKey(courseId) + userId;\n    }\n\n    /**\n     * Get cache key for grade items data WS calls.\n     *\n     * @param courseId ID of the course to get the grades from.\n     * @param userId ID of the user to get the grades from.\n     * @param groupId ID of the group to get the grades from. Default: 0.\n     * @returns Cache key.\n     */\n    protected getCourseGradesItemsCacheKey(courseId: number, userId: number, groupId?: number): string {\n        groupId = groupId ?? 0;\n\n        return this.getCourseGradesPrefixCacheKey(courseId) + userId + ':' + groupId;\n    }\n\n    /**\n     * Get prefix cache key for grade table data WS calls.\n     *\n     * @param courseId ID of the course to get the grades from.\n     * @returns Cache key.\n     */\n    protected getCourseGradesPrefixCacheKey(courseId: number): string {\n        return this.ROOT_CACHE_KEY + 'items:' + courseId + ':';\n    }\n\n    /**\n     * Get prefix cache key for grade permissions WS calls.\n     *\n     * @param courseId ID of the course to check permissions.\n     * @returns Cache key.\n     */\n    protected getCourseGradesPermissionsCacheKey(courseId: number): string {\n        return this.getCourseGradesPrefixCacheKey(courseId) + ':canviewallgrades';\n    }\n\n    /**\n     * Get cache key for courses grade WS calls.\n     *\n     * @returns Cache key.\n     */\n    protected getCoursesGradesCacheKey(): string {\n        return this.ROOT_CACHE_KEY + 'coursesgrades';\n    }\n\n    /**\n     * Get the grade items for a certain module. Keep in mind that may have more than one item to include outcomes and scales.\n     *\n     * @param courseId ID of the course to get the grades from.\n     * @param userId ID of the user to get the grades from. If not defined use site's current user.\n     * @param groupId ID of the group to get the grades from. Not used for old gradebook table.\n     * @param siteId Site ID. If not defined, current site.\n     * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n     * @returns Promise to be resolved when the grades are retrieved.\n     */\n    async getGradeItems(\n        courseId: number,\n        userId?: number,\n        groupId?: number,\n        siteId?: string,\n        ignoreCache: boolean = false,\n    ): Promise<CoreGradesGradeItem[]> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const site = await CoreSites.getSite(siteId);\n\n        userId = userId || site.getUserId();\n\n        return this.getCourseGradesItems(courseId, userId, groupId, siteId, ignoreCache);\n    }\n\n    /**\n     * Get the grade items for a certain course.\n     *\n     * @param courseId ID of the course to get the grades from.\n     * @param userId ID of the user to get the grades from.\n     * @param groupId ID of the group to get the grades from. Default 0.\n     * @param siteId Site ID. If not defined, current site.\n     * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n     * @returns Promise to be resolved when the grades table is retrieved.\n     */\n    async getCourseGradesItems(\n        courseId: number,\n        userId?: number,\n        groupId?: number,\n        siteId?: string,\n        ignoreCache: boolean = false,\n    ): Promise<CoreGradesGradeItem[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        userId = userId || site.getUserId();\n        groupId = groupId || 0;\n\n        this.logger.debug(`Get grades for course '${courseId}' and user '${userId}'`);\n\n        const params: CoreGradesGetUserGradeItemsWSParams = {\n            courseid: courseId,\n            userid: userId,\n            groupid: groupId,\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getCourseGradesItemsCacheKey(courseId, userId, groupId),\n        };\n\n        if (ignoreCache) {\n            preSets.getFromCache = false;\n            preSets.emergencyCache = false;\n        }\n\n        const grades = await site.read<CoreGradesGetUserGradeItemsWSResponse>(\n            'gradereport_user_get_grade_items',\n            params,\n            preSets,\n        );\n\n        if (!grades?.usergrades?.[0]) {\n            throw new CoreError('Couldn\\'t get course grades items');\n        }\n\n        return grades.usergrades[0].gradeitems;\n    }\n\n    /**\n     * Get the grades for a certain course.\n     *\n     * @param courseId ID of the course to get the grades from.\n     * @param userId ID of the user to get the grades from.\n     * @param siteId Site ID. If not defined, current site.\n     * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n     * @returns Promise to be resolved when the grades table is retrieved.\n     */\n    async getCourseGradesTable(\n        courseId: number,\n        userId?: number,\n        siteId?: string,\n        ignoreCache: boolean = false,\n    ): Promise<CoreGradesTable> {\n        const site = await CoreSites.getSite(siteId);\n\n        userId = userId || site.getUserId();\n\n        this.logger.debug(`Get grades for course '${courseId}' and user '${userId}'`);\n\n        const params: CoreGradesGetUserGradesTableWSParams = {\n            courseid: courseId,\n            userid: userId,\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getCourseGradesCacheKey(courseId, userId),\n        };\n\n        if (ignoreCache) {\n            preSets.getFromCache = false;\n            preSets.emergencyCache = false;\n        }\n\n        const table = await site.read<CoreGradesGetUserGradesTableWSResponse>('gradereport_user_get_grades_table', params, preSets);\n\n        if (!table?.tables?.[0]) {\n            throw new CoreError('Couldn\\'t get course grades table');\n        }\n\n        return table.tables[0];\n    }\n\n    /**\n     * Get the grades for a certain course.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise to be resolved when the grades are retrieved.\n     */\n    async getCoursesGrades(siteId?: string): Promise<CoreGradesGradeOverview[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        this.logger.debug('Get course grades');\n\n        const params: CoreGradesGetOverviewCourseGradesWSParams = {};\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getCoursesGradesCacheKey(),\n        };\n\n        const data = await site.read<CoreGradesGetOverviewCourseGradesWSResponse>(\n            'gradereport_overview_get_course_grades',\n            params,\n            preSets,\n        );\n\n        if (!data?.grades) {\n            throw new Error('Couldn\\'t get course grades');\n        }\n\n        return data.grades;\n    }\n\n    /**\n     * Invalidates courses grade table and items WS calls for all users.\n     *\n     * @param courseId ID of the course to get the grades from.\n     * @param siteId Site ID (empty for current site).\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAllCourseGradesData(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKeyStartingWith(this.getCourseGradesPrefixCacheKey(courseId));\n    }\n\n    /**\n     * Invalidates grade table data WS calls.\n     *\n     * @param courseId Course ID.\n     * @param userId User ID.\n     * @param siteId Site id (empty for current site).\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateCourseGradesData(courseId: number, userId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        await site.invalidateWsCacheForKey(this.getCourseGradesCacheKey(courseId, userId));\n    }\n\n    /**\n     * Invalidates courses grade data WS calls.\n     *\n     * @param siteId Site id (empty for current site).\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateCoursesGradesData(siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getCoursesGradesCacheKey());\n    }\n\n    /**\n     * Invalidates courses grade items data WS calls.\n     *\n     * @param courseId ID of the course to get the grades from.\n     * @param userId ID of the user to get the grades from.\n     * @param groupId ID of the group to get the grades from. Default: 0.\n     * @param siteId Site id (empty for current site).\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateCourseGradesItemsData(courseId: number, userId: number, groupId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getCourseGradesItemsCacheKey(courseId, userId, groupId));\n    }\n\n    /**\n     * Invalidates course grade permissions WS calls.\n     *\n     * @param courseId ID of the course to get the permissions from.\n     */\n    async invalidateCourseGradesPermissionsData(courseId: number): Promise<void> {\n        const site = CoreSites.getRequiredCurrentSite();\n\n        await site.invalidateWsCacheForKey(this.getCourseGradesPermissionsCacheKey(courseId));\n    }\n\n    /**\n     * Returns whether or not the plugin is enabled for a certain site.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Resolve with true if plugin is enabled, false otherwise.\n     */\n    async isCourseGradesEnabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        // Check that the configurable mygradesurl is pointing to the gradereport_overview plugin.\n        const url = site.getStoredConfig('mygradesurl') || '';\n\n        return url.indexOf('/grade/report/overview/') !== -1;\n    }\n\n    /**\n     * Returns whether or not the grade addon is enabled for a certain course.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with true if plugin is enabled, rejected or resolved with false otherwise.\n     */\n    async isPluginEnabledForCourse(courseId?: number, siteId?: string): Promise<boolean> {\n        if (!courseId) {\n            return false;\n        }\n\n        const course = await CoreCourses.getUserCourse(courseId, true, siteId);\n\n        return !(course && course.showgrades !== undefined && !course.showgrades);\n    }\n\n    /**\n     * Log Course grades view in Moodle.\n     *\n     * @param courseId Course ID.\n     * @param userId User ID.\n     * @returns Promise resolved when done.\n     */\n    async logCourseGradesView(courseId: number, userId: number): Promise<void> {\n        userId = userId || CoreSites.getCurrentSiteUserId();\n\n        const site = CoreSites.getCurrentSite();\n\n        const params: CoreGradesGradereportViewGradeReportWSParams = { courseid: courseId, userid: userId };\n\n        await site?.write('gradereport_user_view_grade_report', params);\n    }\n\n    /**\n     * Log Courses grades view in Moodle.\n     *\n     * @param courseId Course ID. If not defined, site Home ID.\n     * @returns Promise resolved when done.\n     */\n    async logCoursesGradesView(courseId?: number): Promise<void> {\n        if (!courseId) {\n            courseId = CoreSites.getCurrentSiteHomeId();\n        }\n\n        const params: CoreGradesGradereportViewGradeReportWSParams = {\n            courseid: courseId,\n        };\n\n        const site = CoreSites.getCurrentSite();\n\n        await site?.write('gradereport_overview_view_grade_report', params);\n    }\n\n    /**\n     * Check whether the current user can view all the grades in the course.\n     *\n     * @param courseId Course id.\n     * @returns Whether the current user can view all the grades.\n     */\n    async canViewAllGrades(courseId: number): Promise<boolean> {\n        const site = CoreSites.getRequiredCurrentSite();\n\n        if (!site.wsAvailable('gradereport_user_get_access_information')) {\n            return false;\n        }\n\n        const params: CoreGradesGetUserAccessInformationWSParams = { courseid: courseId };\n        const preSets: CoreSiteWSPreSets = { cacheKey: this.getCourseGradesPermissionsCacheKey(courseId) };\n        const access = await site.read<CoreGradesGetUserAccessInformationWSResponse>(\n            'gradereport_user_get_access_information',\n            params,\n            preSets,\n        );\n\n        return access.canviewallgrades;\n    }\n\n}\n\nexport const CoreGrades = makeSingleton(CoreGradesProvider);\n\n/**\n * Params of gradereport_user_view_grade_report and gradereport_overview_view_grade_report WS.\n */\ntype CoreGradesGradereportViewGradeReportWSParams = {\n    courseid: number; // Id of the course.\n    userid?: number; // Id of the user, 0 means current user.\n};\n\n/**\n * Params of gradereport_user_get_grade_items WS.\n */\ntype CoreGradesGetUserGradeItemsWSParams = {\n    courseid: number; // Course Id.\n    userid?: number; // Return grades only for this user (optional).\n    groupid?: number; // Get users from this group only.\n};\n\n/**\n * Params of gradereport_user_get_grades_table WS.\n */\ntype CoreGradesGetUserGradesTableWSParams = {\n    courseid: number; // Course Id.\n    userid?: number; // Return grades only for this user (optional).\n    groupid?: number; // Get users from this group only.\n};\n\n/**\n * Params of gradereport_overview_get_course_grades WS.\n */\ntype CoreGradesGetOverviewCourseGradesWSParams = {\n    userid?: number; // Get grades for this user (optional, default current).\n};\n\n/**\n * Params of gradereport_user_get_access_information WS.\n */\ntype CoreGradesGetUserAccessInformationWSParams = {\n    courseid: number; // Id of the course.\n};\n\n/**\n * Data returned by gradereport_user_get_grade_items WS.\n */\nexport type CoreGradesGetUserGradeItemsWSResponse = {\n    usergrades: {\n        courseid: number; // Course id.\n        userid: number; // User id.\n        userfullname: string; // User fullname.\n        useridnumber: string; // User idnumber.\n        maxdepth: number; // Table max depth (needed for printing it).\n        gradeitems: CoreGradesGradeItem[];\n    }[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Data returned by gradereport_user_get_grades_table WS.\n */\nexport type CoreGradesGetUserGradesTableWSResponse = {\n    tables: CoreGradesTable[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Data returned by gradereport_overview_get_course_grades WS.\n */\nexport type CoreGradesGetOverviewCourseGradesWSResponse = {\n    grades: CoreGradesGradeOverview[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Data returned by gradereport_user_get_access_information WS.\n */\ntype CoreGradesGetUserAccessInformationWSResponse = {\n    canviewusergradereport: boolean;\n    canviewmygrades: boolean;\n    canviewallgrades: boolean;\n};\n\n/**\n * Grade item data.\n */\nexport type CoreGradesGradeItem = {\n    id: number; // Grade item id.\n    itemname: string; // Grade item name.\n    itemtype: string; // Grade item type.\n    itemmodule: string; // Grade item module.\n    iteminstance: number; // Grade item instance.\n    itemnumber: number; // Grade item item number.\n    idnumber: string; // Grade item idnumber.\n    categoryid: number; // Grade item category id.\n    outcomeid: number; // Outcome id.\n    scaleid: number; // Scale id.\n    locked?: boolean; // Grade item for user locked?.\n    cmid?: number; // Course module id (if type mod).\n    weightraw?: number; // Weight raw.\n    weightformatted?: string; // Weight.\n    status?: string; // Status.\n    graderaw?: SafeNumber; // Grade raw.\n    gradedatesubmitted?: number; // Grade submit date.\n    gradedategraded?: number; // Grade graded date.\n    gradehiddenbydate?: boolean; // Grade hidden by date?.\n    gradeneedsupdate?: boolean; // Grade needs update?.\n    gradeishidden?: boolean; // Grade is hidden?.\n    gradeislocked?: boolean; // Grade is locked?.\n    gradeisoverridden?: boolean; // Grade overridden?.\n    gradeformatted?: string; // The grade formatted.\n    grademin?: number; // Grade min.\n    grademax?: number; // Grade max.\n    rangeformatted?: string; // Range formatted.\n    percentageformatted?: string; // Percentage.\n    lettergradeformatted?: string; // Letter grade.\n    rank?: number; // Rank in the course.\n    numusers?: number; // Num users in course.\n    averageformatted?: string; // Grade average.\n    feedback?: string; // Grade feedback.\n    feedbackformat?: number; // Feedback format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n};\n\n/**\n * Grade table data.\n */\nexport type CoreGradesTable = {\n    courseid: number; // Course id.\n    userid: number; // User id.\n    userfullname: string; // User fullname.\n    maxdepth: number; // Table max depth (needed for printing it).\n    tabledata: CoreGradesTableRow[];\n};\n\n/**\n * Grade table data item.\n */\nexport type CoreGradesTableRow = {\n    itemname?: CoreGradesTableItemNameColumn; // The item returned data.\n    leader?: CoreGradesTableLeaderColumn; // The item returned data.\n    weight?: CoreGradesTableCommonColumn; // Weight column.\n    grade?: CoreGradesTableCommonColumn; // Grade column.\n    range?: CoreGradesTableCommonColumn; // Range column.\n    percentage?: CoreGradesTableCommonColumn; // Percentage column.\n    lettergrade?: CoreGradesTableCommonColumn; // Lettergrade column.\n    rank?: CoreGradesTableCommonColumn; // Rank column.\n    average?: CoreGradesTableCommonColumn; // Average column.\n    feedback?: CoreGradesTableCommonColumn; // Feedback column.\n    contributiontocoursetotal?: CoreGradesTableCommonColumn; // Contributiontocoursetotal column.\n};\n\n/**\n * Grade table common column data.\n */\nexport type CoreGradesTableCommonColumn = {\n    class: string; // Class.\n    content: string; // Cell content.\n    headers: string; // Headers.\n};\n\n/**\n * Grade table item name column.\n */\nexport type CoreGradesTableItemNameColumn = {\n    class: string; // Class.\n    colspan: number; // Col span.\n    content: string; // Cell content.\n    celltype: string; // Cell type.\n    id: string; // Id.\n};\n\n/**\n * Grade table leader column.\n */\nexport type CoreGradesTableLeaderColumn = {\n    class: string; // Class.\n    rowspan: number; // Row span.\n    content: undefined; // The WS doesn't return this data, but we declare it to make it coherent with the other columns.\n};\n\n/**\n * Grade table column.\n */\nexport type CoreGradesTableColumn = CoreGradesTableCommonColumn | CoreGradesTableItemNameColumn | CoreGradesTableLeaderColumn;\n\n/**\n * Grade overview data.\n */\nexport type CoreGradesGradeOverview = {\n    courseid: number; // Course id.\n    grade: string; // Grade formatted.\n    rawgrade: string; // Raw grade, not formatted.\n    rank?: number; // Your rank in the course.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}