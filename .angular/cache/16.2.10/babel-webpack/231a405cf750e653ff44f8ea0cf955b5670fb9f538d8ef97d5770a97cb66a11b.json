{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreEventFormAction, CoreEvents } from '@singletons/events';\n/**\n * Singleton with helper functions for Forms.\n */\nexport class CoreForms {\n  /**\n   * Get the data from a form. It will only collect elements that have a name.\n   *\n   * @param form The form to get the data from.\n   * @returns Object with the data. The keys are the names of the inputs.\n   */\n  static getDataFromForm(form) {\n    if (!form || !form.elements) {\n      return {};\n    }\n    const data = {};\n    for (let i = 0; i < form.elements.length; i++) {\n      const element = form.elements[i];\n      const name = element.name || '';\n      // Ignore submit inputs.\n      if (!name || element.type == 'submit' || element.tagName == 'BUTTON') {\n        continue;\n      }\n      // Get the value.\n      if (element.type == 'checkbox') {\n        data[name] = !!element.checked;\n      } else if (element.type == 'radio') {\n        if (element.checked) {\n          data[name] = element.value;\n        }\n      } else {\n        data[name] = element.value;\n      }\n    }\n    return data;\n  }\n  /**\n   * Trigger form cancelled event.\n   *\n   * @param formRef Form element.\n   * @param siteId The site affected. If not provided, no site affected.\n   */\n  static triggerFormCancelledEvent(formRef, siteId) {\n    if (!formRef) {\n      return;\n    }\n    CoreEvents.trigger(CoreEvents.FORM_ACTION, {\n      action: CoreEventFormAction.CANCEL,\n      form: formRef.nativeElement || formRef\n    }, siteId);\n  }\n  /**\n   * Trigger form submitted event.\n   *\n   * @param formRef Form element.\n   * @param online Whether the action was done in offline or not.\n   * @param siteId The site affected. If not provided, no site affected.\n   */\n  static triggerFormSubmittedEvent(formRef, online, siteId) {\n    if (!formRef) {\n      return;\n    }\n    CoreEvents.trigger(CoreEvents.FORM_ACTION, {\n      action: CoreEventFormAction.SUBMIT,\n      form: formRef.nativeElement || formRef,\n      online: !!online\n    }, siteId);\n  }\n  /**\n   * Generate a unique id for a form input using the given name.\n   *\n   * @param name Form input name.\n   * @returns Unique id.\n   */\n  static uniqueId(name) {\n    var _this$formIds$name;\n    const count = (_this$formIds$name = this.formIds[name]) !== null && _this$formIds$name !== void 0 ? _this$formIds$name : 0;\n    return `${name}-${this.formIds[name] = count + 1}`;\n  }\n}\n_class = CoreForms;\n_class.formIds = {};","map":{"version":3,"names":["CoreEventFormAction","CoreEvents","CoreForms","getDataFromForm","form","elements","data","i","length","element","name","type","tagName","checked","value","triggerFormCancelledEvent","formRef","siteId","trigger","FORM_ACTION","action","CANCEL","nativeElement","triggerFormSubmittedEvent","online","SUBMIT","uniqueId","_this$formIds$name","count","formIds","_class"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/singletons/form.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ElementRef } from '@angular/core';\nimport { CoreEventFormAction, CoreEvents } from '@singletons/events';\n\n/**\n * Singleton with helper functions for Forms.\n */\nexport class CoreForms {\n\n    private static formIds: Record<string, number> = {};\n\n    /**\n     * Get the data from a form. It will only collect elements that have a name.\n     *\n     * @param form The form to get the data from.\n     * @returns Object with the data. The keys are the names of the inputs.\n     */\n    static getDataFromForm(form: HTMLFormElement): CoreFormFields {\n        if (!form || !form.elements) {\n            return {};\n        }\n\n        const data: CoreFormFields = {};\n\n        for (let i = 0; i < form.elements.length; i++) {\n            const element = <HTMLInputElement> form.elements[i];\n            const name = element.name || '';\n\n            // Ignore submit inputs.\n            if (!name || element.type == 'submit' || element.tagName == 'BUTTON') {\n                continue;\n            }\n\n            // Get the value.\n            if (element.type == 'checkbox') {\n                data[name] = !!element.checked;\n            } else if (element.type == 'radio') {\n                if (element.checked) {\n                    data[name] = element.value;\n                }\n            } else {\n                data[name] = element.value;\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * Trigger form cancelled event.\n     *\n     * @param formRef Form element.\n     * @param siteId The site affected. If not provided, no site affected.\n     */\n    static triggerFormCancelledEvent(formRef?: ElementRef | HTMLFormElement | undefined, siteId?: string): void {\n        if (!formRef) {\n            return;\n        }\n\n        CoreEvents.trigger(CoreEvents.FORM_ACTION, {\n            action: CoreEventFormAction.CANCEL,\n            form: formRef.nativeElement || formRef,\n        }, siteId);\n    }\n\n    /**\n     * Trigger form submitted event.\n     *\n     * @param formRef Form element.\n     * @param online Whether the action was done in offline or not.\n     * @param siteId The site affected. If not provided, no site affected.\n     */\n    static triggerFormSubmittedEvent(formRef?: ElementRef | HTMLFormElement | undefined, online?: boolean, siteId?: string): void {\n        if (!formRef) {\n            return;\n        }\n\n        CoreEvents.trigger(CoreEvents.FORM_ACTION, {\n            action: CoreEventFormAction.SUBMIT,\n            form: formRef.nativeElement || formRef,\n            online: !!online,\n        }, siteId);\n    }\n\n    /**\n     * Generate a unique id for a form input using the given name.\n     *\n     * @param name Form input name.\n     * @returns Unique id.\n     */\n    static uniqueId(name: string): string {\n        const count = this.formIds[name] ?? 0;\n\n        return `${name}-${this.formIds[name] = count + 1}`;\n    }\n\n}\n\nexport type CoreFormFields<T = unknown> = Record<string, T>;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,mBAAmB,EAAEC,UAAU,QAAQ,oBAAoB;AAEpE;;;AAGA,OAAM,MAAOC,SAAS;EAIlB;;;;;;EAMA,OAAOC,eAAeA,CAACC,IAAqB;IACxC,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,QAAQ,EAAE;MACzB,OAAO,EAAE;;IAGb,MAAMC,IAAI,GAAmB,EAAE;IAE/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACC,QAAQ,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3C,MAAME,OAAO,GAAsBL,IAAI,CAACC,QAAQ,CAACE,CAAC,CAAC;MACnD,MAAMG,IAAI,GAAGD,OAAO,CAACC,IAAI,IAAI,EAAE;MAE/B;MACA,IAAI,CAACA,IAAI,IAAID,OAAO,CAACE,IAAI,IAAI,QAAQ,IAAIF,OAAO,CAACG,OAAO,IAAI,QAAQ,EAAE;QAClE;;MAGJ;MACA,IAAIH,OAAO,CAACE,IAAI,IAAI,UAAU,EAAE;QAC5BL,IAAI,CAACI,IAAI,CAAC,GAAG,CAAC,CAACD,OAAO,CAACI,OAAO;OACjC,MAAM,IAAIJ,OAAO,CAACE,IAAI,IAAI,OAAO,EAAE;QAChC,IAAIF,OAAO,CAACI,OAAO,EAAE;UACjBP,IAAI,CAACI,IAAI,CAAC,GAAGD,OAAO,CAACK,KAAK;;OAEjC,MAAM;QACHR,IAAI,CAACI,IAAI,CAAC,GAAGD,OAAO,CAACK,KAAK;;;IAIlC,OAAOR,IAAI;EACf;EAEA;;;;;;EAMA,OAAOS,yBAAyBA,CAACC,OAAkD,EAAEC,MAAe;IAChG,IAAI,CAACD,OAAO,EAAE;MACV;;IAGJf,UAAU,CAACiB,OAAO,CAACjB,UAAU,CAACkB,WAAW,EAAE;MACvCC,MAAM,EAAEpB,mBAAmB,CAACqB,MAAM;MAClCjB,IAAI,EAAEY,OAAO,CAACM,aAAa,IAAIN;KAClC,EAAEC,MAAM,CAAC;EACd;EAEA;;;;;;;EAOA,OAAOM,yBAAyBA,CAACP,OAAkD,EAAEQ,MAAgB,EAAEP,MAAe;IAClH,IAAI,CAACD,OAAO,EAAE;MACV;;IAGJf,UAAU,CAACiB,OAAO,CAACjB,UAAU,CAACkB,WAAW,EAAE;MACvCC,MAAM,EAAEpB,mBAAmB,CAACyB,MAAM;MAClCrB,IAAI,EAAEY,OAAO,CAACM,aAAa,IAAIN,OAAO;MACtCQ,MAAM,EAAE,CAAC,CAACA;KACb,EAAEP,MAAM,CAAC;EACd;EAEA;;;;;;EAMA,OAAOS,QAAQA,CAAChB,IAAY;IAAA,IAAAiB,kBAAA;IACxB,MAAMC,KAAK,IAAAD,kBAAA,GAAG,IAAI,CAACE,OAAO,CAACnB,IAAI,CAAC,cAAAiB,kBAAA,cAAAA,kBAAA,GAAI,CAAC;IAErC,OAAO,GAAGjB,IAAI,IAAI,IAAI,CAACmB,OAAO,CAACnB,IAAI,CAAC,GAAGkB,KAAK,GAAG,CAAC,EAAE;EACtD;;SAvFS1B,SAAS;AAEH4B,MAAA,CAAAD,OAAO,GAA2B,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}