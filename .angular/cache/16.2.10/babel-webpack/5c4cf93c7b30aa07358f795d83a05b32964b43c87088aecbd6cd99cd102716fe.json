{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreH5P } from '@features/h5p/services/h5p';\nimport { makeSingleton, Translate } from '@singletons/index';\nimport { CoreWSError } from '@classes/errors/wserror';\nimport { CoreError } from '@classes/errors/error';\nimport { AddonModH5PActivitySyncProvider } from './h5pactivity-sync';\nimport { CoreTime } from '@singletons/time';\nimport * as i0 from \"@angular/core\";\nexport const MOD_H5PACTIVITY_STATE_ID = 'state';\nconst ROOT_CACHE_KEY = 'mmaModH5PActivity:';\n/**\n * Service that provides some features for H5P activity.\n */\nexport class AddonModH5PActivityProvider {\n  // Use first attempt results for grading.\n  /**\n   * Check if a certain site allows viewing list of users and their attempts.\n   *\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Whether can view users.\n   * @since 3.11\n   */\n  canGetUsersAttempts(siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this.canGetUsersAttemptsInSite(site);\n    })();\n  }\n  /**\n   * Check if a certain site allows viewing list of users and their attempts.\n   *\n   * @param site Site. If not defined, use current site.\n   * @returns Whether can view users.\n   * @since 3.11\n   */\n  canGetUsersAttemptsInSite(site) {\n    var _site;\n    site = site || CoreSites.getCurrentSite();\n    return !!((_site = site) !== null && _site !== void 0 && _site.wsAvailable('mod_h5pactivity_get_user_attempts'));\n  }\n  /**\n   * Format an attempt's data.\n   *\n   * @param attempt Attempt to format.\n   * @returns Formatted attempt.\n   */\n  formatAttempt(attempt) {\n    var _formattedAttempt$suc;\n    const formattedAttempt = attempt;\n    formattedAttempt.timecreated = attempt.timecreated * 1000; // Convert to milliseconds.\n    formattedAttempt.timemodified = attempt.timemodified * 1000; // Convert to milliseconds.\n    formattedAttempt.success = (_formattedAttempt$suc = formattedAttempt.success) !== null && _formattedAttempt$suc !== void 0 ? _formattedAttempt$suc : null;\n    if (!attempt.duration) {\n      formattedAttempt.durationReadable = '-';\n      formattedAttempt.durationCompact = '-';\n    } else {\n      formattedAttempt.durationReadable = CoreTime.formatTime(attempt.duration, 3);\n      formattedAttempt.durationCompact = CoreTime.formatTimeShort(attempt.duration);\n    }\n    return formattedAttempt;\n  }\n  /**\n   * Format attempt data and results.\n   *\n   * @param attempt Attempt and results to format.\n   * @returns Attemp data and results.\n   */\n  formatAttemptResults(attempt) {\n    var _formattedAttempt$res;\n    const formattedAttempt = this.formatAttempt(attempt);\n    formattedAttempt.results = (_formattedAttempt$res = formattedAttempt.results) === null || _formattedAttempt$res === void 0 ? void 0 : _formattedAttempt$res.map(result => this.formatResult(result));\n    return formattedAttempt;\n  }\n  /**\n   * Format the attempts of a user.\n   *\n   * @param data Data to format.\n   * @returns Formatted data.\n   */\n  formatUserAttempts(data) {\n    const formatted = data;\n    formatted.attempts = formatted.attempts.map(attempt => this.formatAttempt(attempt));\n    if (formatted.scored) {\n      formatted.scored.attempts = formatted.scored.attempts.map(attempt => this.formatAttempt(attempt));\n    }\n    return formatted;\n  }\n  /**\n   * Format an attempt's result.\n   *\n   * @param result Result to format.\n   * @returns Attempts results\n   */\n  formatResult(result) {\n    result.timecreated = result.timecreated * 1000; // Convert to milliseconds.\n    return result;\n  }\n  /**\n   * Get cache key for access information WS calls.\n   *\n   * @param id H5P activity ID.\n   * @returns Cache key.\n   */\n  getAccessInformationCacheKey(id) {\n    return ROOT_CACHE_KEY + 'accessInfo:' + id;\n  }\n  /**\n   * Get access information for a given H5P activity.\n   *\n   * @param id H5P activity ID.\n   * @param options Other options.\n   * @returns Promise resolved with the data.\n   */\n  getAccessInformation(id, options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        h5pactivityid: id\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this2.getAccessInformationCacheKey(id),\n        updateFrequency: CoreSite.FREQUENCY_OFTEN,\n        component: AddonModH5PActivityProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      return site.read('mod_h5pactivity_get_h5pactivity_access_information', params, preSets);\n    })();\n  }\n  /**\n   * Get attempt results for all user attempts.\n   *\n   * @param id Activity ID.\n   * @param options Other options.\n   * @returns Promise resolved with the results of the attempt.\n   */\n  getAllAttemptsResults(id, options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const userAttempts = yield _this3.getUserAttempts(id, options);\n      const attemptIds = userAttempts.attempts.map(attempt => attempt.id);\n      if (attemptIds.length) {\n        // Get all the attempts with a single call.\n        return _this3.getAttemptsResults(id, attemptIds, options);\n      } else {\n        // No attempts.\n        return {\n          activityid: id,\n          attempts: [],\n          warnings: []\n        };\n      }\n    })();\n  }\n  /**\n   * Get all pages of users attempts.\n   *\n   * @param id Activity ID.\n   * @param options Other options.\n   * @returns Promise resolved with the list of user.\n   */\n  getAllUsersAttempts(id, options) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const optionsWithPage = _objectSpread({}, options);\n      optionsWithPage.page = 0;\n      let canLoadMore = true;\n      let users = [];\n      while (canLoadMore) {\n        try {\n          const result = yield _this4.getUsersAttempts(id, optionsWithPage);\n          optionsWithPage.page = optionsWithPage.page + 1;\n          users = users.concat(result.users);\n          canLoadMore = result.canLoadMore;\n        } catch (error) {\n          if (optionsWithPage.dontFailOnError) {\n            return users;\n          }\n          throw error;\n        }\n      }\n      return users;\n    })();\n  }\n  /**\n   * Get list of users and their attempts.\n   *\n   * @param id H5P Activity ID.\n   * @param options Options.\n   * @returns Promise resolved with list of users and whether can load more attempts.\n   * @since 3.11\n   */\n  getUsersAttempts(id, options) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var _options$perPage, _response$warnings;\n      options = options || {};\n      options.page = options.page || 0;\n      options.perPage = (_options$perPage = options.perPage) !== null && _options$perPage !== void 0 ? _options$perPage : AddonModH5PActivityProvider.USERS_PER_PAGE;\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        h5pactivityid: id,\n        page: options.page,\n        perpage: options.perPage === 0 ? 0 : options.perPage + 1,\n        sortorder: options.sortOrder,\n        firstinitial: options.firstInitial,\n        lastinitial: options.lastInitial\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this5.getUsersAttemptsCacheKey(id, options),\n        updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n        component: AddonModH5PActivityProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_h5pactivity_get_user_attempts', params, preSets);\n      if ((_response$warnings = response.warnings) !== null && _response$warnings !== void 0 && _response$warnings[0]) {\n        throw new CoreWSError(response.warnings[0]);\n      }\n      let canLoadMore = false;\n      if (options.perPage > 0) {\n        canLoadMore = response.usersattempts.length > options.perPage;\n        response.usersattempts = response.usersattempts.slice(0, options.perPage);\n      }\n      return {\n        canLoadMore: canLoadMore,\n        users: response.usersattempts.map(userAttempts => _this5.formatUserAttempts(userAttempts))\n      };\n    })();\n  }\n  /**\n   * Get cache key for get users attempts WS calls.\n   *\n   * @param id Instance ID.\n   * @param options Get attempts options.\n   * @returns Cache key.\n   */\n  getUsersAttemptsCacheKey(id, options) {\n    return this.getUsersAttemptsCommonCacheKey(id) + `:${options.page}:${options.perPage}` + `:${options.sortOrder || ''}:${options.firstInitial || ''}:${options.lastInitial || ''}`;\n  }\n  /**\n   * Get common cache key for get users attempts WS calls.\n   *\n   * @param id Instance ID.\n   * @returns Cache key.\n   */\n  getUsersAttemptsCommonCacheKey(id) {\n    return ROOT_CACHE_KEY + 'userAttempts:' + id;\n  }\n  /**\n   * Get cache key for results WS calls.\n   *\n   * @param id Instance ID.\n   * @param attemptsIds Attempts IDs.\n   * @returns Cache key.\n   */\n  getAttemptResultsCacheKey(id, attemptsIds) {\n    return this.getAttemptResultsCommonCacheKey(id) + ':' + JSON.stringify(attemptsIds);\n  }\n  /**\n   * Get common cache key for results WS calls.\n   *\n   * @param id Instance ID.\n   * @returns Cache key.\n   */\n  getAttemptResultsCommonCacheKey(id) {\n    return ROOT_CACHE_KEY + 'results:' + id;\n  }\n  /**\n   * Get attempt results.\n   *\n   * @param id Activity ID.\n   * @param attemptId Attempt ID.\n   * @param options Other options.\n   * @returns Promise resolved with the results of the attempt.\n   */\n  getAttemptResults(id, attemptId, options) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      options = options || {};\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        h5pactivityid: id\n      };\n      params.attemptids = [attemptId];\n      const preSets = _objectSpread({\n        cacheKey: _this6.getAttemptResultsCacheKey(id, params.attemptids),\n        updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n        component: AddonModH5PActivityProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      try {\n        var _response$warnings2;\n        const response = yield site.read('mod_h5pactivity_get_results', params, preSets);\n        if ((_response$warnings2 = response.warnings) !== null && _response$warnings2 !== void 0 && _response$warnings2[0]) {\n          throw new CoreWSError(response.warnings[0]); // Cannot view attempt.\n        }\n\n        return _this6.formatAttemptResults(response.attempts[0]);\n      } catch (error) {\n        if (CoreUtils.isWebServiceError(error)) {\n          throw error;\n        }\n        // Check if the full list of results is cached. If so, get the results from there.\n        const cacheOptions = _objectSpread(_objectSpread({}, options), {}, {\n          readingStrategy: 0 /* CoreSitesReadingStrategy.ONLY_CACHE */\n        });\n\n        const attemptsResults = yield AddonModH5PActivity.getAllAttemptsResults(id, cacheOptions);\n        const attempt = attemptsResults.attempts.find(attempt => attempt.id == attemptId);\n        if (!attempt) {\n          throw error;\n        }\n        return attempt;\n      }\n    })();\n  }\n  /**\n   * Get attempts results.\n   *\n   * @param id Activity ID.\n   * @param attemptsIds Attempts IDs.\n   * @param options Other options.\n   * @returns Promise resolved with all the attempts.\n   */\n  getAttemptsResults(id, attemptsIds, options) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      options = options || {};\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        h5pactivityid: id,\n        attemptids: attemptsIds\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this7.getAttemptResultsCommonCacheKey(id),\n        updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n        component: AddonModH5PActivityProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_h5pactivity_get_results', params, preSets);\n      response.attempts = response.attempts.map(attempt => _this7.formatAttemptResults(attempt));\n      return response;\n    })();\n  }\n  /**\n   * Get deployed file from an H5P activity instance.\n   *\n   * @param h5pActivity Activity instance.\n   * @param options Options\n   * @returns Promise resolved with the file.\n   */\n  getDeployedFile(h5pActivity, options) {\n    return _asyncToGenerator(function* () {\n      if (h5pActivity.deployedfile) {\n        // File already deployed and still valid, use this one.\n        return h5pActivity.deployedfile;\n      }\n      if (!h5pActivity.package || !h5pActivity.package[0]) {\n        // Shouldn't happen.\n        throw new CoreError('No H5P package found.');\n      }\n      options = options || {};\n      // Deploy the file in the server.\n      return CoreH5P.getTrustedH5PFile(h5pActivity.package[0].fileurl, options.displayOptions, options.ignoreCache, options.siteId);\n    })();\n  }\n  /**\n   * Get cache key for H5P activity data WS calls.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getH5PActivityDataCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'h5pactivity:' + courseId;\n  }\n  /**\n   * Get an H5P activity with key=value. If more than one is found, only the first will be returned.\n   *\n   * @param courseId Course ID.\n   * @param key Name of the property to check.\n   * @param value Value to search.\n   * @param options Other options.\n   * @returns Promise resolved with the activity data.\n   */\n  getH5PActivityByField(courseId, key, value, options = {}) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        courseids: [courseId]\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this8.getH5PActivityDataCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: AddonModH5PActivityProvider.COMPONENT\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_h5pactivity_get_h5pactivities_by_courses', params, preSets);\n      const currentActivity = response.h5pactivities.find(h5pActivity => h5pActivity[key] == value);\n      if (currentActivity) {\n        return _objectSpread(_objectSpread({}, currentActivity), response.h5pglobalsettings);\n      }\n      throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    })();\n  }\n  /**\n   * Get an H5P activity by module ID.\n   *\n   * @param courseId Course ID.\n   * @param cmId Course module ID.\n   * @param options Other options.\n   * @returns Promise resolved with the activity data.\n   */\n  getH5PActivity(courseId, cmId, options = {}) {\n    return this.getH5PActivityByField(courseId, 'coursemodule', cmId, options);\n  }\n  /**\n   * Get an H5P activity by context ID.\n   *\n   * @param courseId Course ID.\n   * @param contextId Context ID.\n   * @param options Other options.\n   * @returns Promise resolved with the activity data.\n   */\n  getH5PActivityByContextId(courseId, contextId, options = {}) {\n    return this.getH5PActivityByField(courseId, 'context', contextId, options);\n  }\n  /**\n   * Get an H5P activity by instance ID.\n   *\n   * @param courseId Course ID.\n   * @param id Instance ID.\n   * @param options Other options.\n   * @returns Promise resolved with the activity data.\n   */\n  getH5PActivityById(courseId, id, options = {}) {\n    return this.getH5PActivityByField(courseId, 'id', id, options);\n  }\n  /**\n   * Get cache key for attemps WS calls.\n   *\n   * @param id Instance ID.\n   * @param userIds User IDs.\n   * @returns Cache key.\n   */\n  getUserAttemptsCacheKey(id, userIds) {\n    return this.getUserAttemptsCommonCacheKey(id) + ':' + JSON.stringify(userIds);\n  }\n  /**\n   * Get common cache key for attempts WS calls.\n   *\n   * @param id Instance ID.\n   * @returns Cache key.\n   */\n  getUserAttemptsCommonCacheKey(id) {\n    return ROOT_CACHE_KEY + 'attempts:' + id;\n  }\n  /**\n   * Get attempts of a certain user.\n   *\n   * @param id Activity ID.\n   * @param options Other options.\n   * @returns Promise resolved with the attempts of the user.\n   */\n  getUserAttempts(id, options = {}) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const userId = options.userId || site.getUserId();\n      try {\n        var _response$warnings3;\n        const params = {\n          h5pactivityid: id\n        };\n        params.userids = [userId];\n        const preSets = _objectSpread({\n          cacheKey: _this9.getUserAttemptsCacheKey(id, params.userids),\n          updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n          component: AddonModH5PActivityProvider.COMPONENT,\n          componentId: options.cmId\n        }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n        const response = yield site.read('mod_h5pactivity_get_attempts', params, preSets);\n        if ((_response$warnings3 = response.warnings) !== null && _response$warnings3 !== void 0 && _response$warnings3[0]) {\n          throw new CoreWSError(response.warnings[0]); // Cannot view user attempts.\n        }\n\n        return _this9.formatUserAttempts(response.usersattempts[0]);\n      } catch (error) {\n        if (CoreUtils.isWebServiceError(error)) {\n          throw error;\n        }\n        try {\n          // Check if the full list of users is cached. If so, get the user attempts from there.\n          const users = yield _this9.getAllUsersAttempts(id, _objectSpread(_objectSpread({}, options), {}, {\n            readingStrategy: 0 /* CoreSitesReadingStrategy.ONLY_CACHE */,\n            dontFailOnError: true\n          }));\n          const user = users.find(user => user.userid === userId);\n          if (!user) {\n            throw error;\n          }\n          return _this9.formatUserAttempts(user);\n        } catch (_unused) {\n          throw error;\n        }\n      }\n    })();\n  }\n  /**\n   * Invalidates access information.\n   *\n   * @param id H5P activity ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAccessInformation(id, siteId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this10.getAccessInformationCacheKey(id));\n    })();\n  }\n  /**\n   * Invalidates H5P activity data.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateActivityData(courseId, siteId) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this11.getH5PActivityDataCacheKey(courseId));\n    })();\n  }\n  /**\n   * Invalidates all attempts results for H5P activity.\n   *\n   * @param id Activity ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAllResults(id, siteId) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this12.getAttemptResultsCommonCacheKey(id));\n    })();\n  }\n  /**\n   * Invalidates results of a certain attempt for H5P activity.\n   *\n   * @param id Activity ID.\n   * @param attemptId Attempt ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAttemptResults(id, attemptId, siteId) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this13.getAttemptResultsCacheKey(id, [attemptId]));\n    })();\n  }\n  /**\n   * Invalidates list of users for H5P activity.\n   *\n   * @param id Activity ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAllUsersAttempts(id, siteId) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKeyStartingWith(_this14.getUsersAttemptsCommonCacheKey(id));\n    })();\n  }\n  /**\n   * Invalidates attempts of a certain user for H5P activity.\n   *\n   * @param id Activity ID.\n   * @param userId User ID. If not defined, current user in the site.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateUserAttempts(id, userId, siteId) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      yield site.invalidateWsCacheForKey(_this15.getUserAttemptsCacheKey(id, [userId]));\n    })();\n  }\n  /**\n   * Delete launcher.\n   *\n   * @returns Promise resolved when the launcher file is deleted.\n   * @since 3.9\n   */\n  isPluginEnabled(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.wsAvailable('mod_h5pactivity_get_h5pactivities_by_courses');\n    })();\n  }\n  /**\n   * Check if save state is enabled for a certain activity.\n   *\n   * @param h5pActivity Activity.\n   * @param accessInfo Access info.\n   * @returns Whether save state is enabled.\n   */\n  isSaveStateEnabled(h5pActivity, accessInfo) {\n    return !!(h5pActivity.enabletracking && h5pActivity.enablesavestate && (!accessInfo || accessInfo.cansubmit));\n  }\n  /**\n   * Report an H5P activity as being viewed.\n   *\n   * @param id H5P activity ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logView(id, siteId) {\n    const params = {\n      h5pactivityid: id\n    };\n    return CoreCourseLogHelper.log('mod_h5pactivity_view_h5pactivity', params, AddonModH5PActivityProvider.COMPONENT, id, siteId);\n  }\n  /**\n   * Report an H5P activity report as being viewed.\n   *\n   * @param id H5P activity ID.\n   * @param options Options.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logViewReport(id, options = {}) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      if (!site.wsAvailable('mod_h5pactivity_log_report_viewed')) {\n        // Site doesn't support the WS, stop. Added in Moodle 3.11.\n        return;\n      }\n      const params = {\n        h5pactivityid: id,\n        userid: options.userId,\n        attemptid: options.attemptId\n      };\n      return CoreCourseLogHelper.log('mod_h5pactivity_log_report_viewed', params, AddonModH5PActivityProvider.COMPONENT, id, site.getId());\n    })();\n  }\n}\n_class = AddonModH5PActivityProvider;\n_class.COMPONENT = 'mmaModH5PActivity';\n_class.TRACK_COMPONENT = 'mod_h5pactivity';\n// Component for tracking.\n_class.USERS_PER_PAGE = 20;\n// Grade type constants.\n_class.GRADEMANUAL = 0;\n// No automathic grading using attempt results.\n_class.GRADEHIGHESTATTEMPT = 1;\n// Use highest attempt results for grading.\n_class.GRADEAVERAGEATTEMPT = 2;\n// Use average attempt results for grading.\n_class.GRADELASTATTEMPT = 3;\n// Use last attempt results for grading.\n_class.GRADEFIRSTATTEMPT = 4;\n_class.ɵfac = function AddonModH5PActivityProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModH5PActivity = makeSingleton(AddonModH5PActivityProvider);","map":{"version":3,"names":["CoreSites","CoreSitesReadingStrategy","CoreUtils","CoreSite","CoreCourseLogHelper","CoreH5P","makeSingleton","Translate","CoreWSError","CoreError","AddonModH5PActivitySyncProvider","CoreTime","MOD_H5PACTIVITY_STATE_ID","ROOT_CACHE_KEY","AddonModH5PActivityProvider","canGetUsersAttempts","siteId","_this","_asyncToGenerator","site","getSite","canGetUsersAttemptsInSite","_site","getCurrentSite","wsAvailable","formatAttempt","attempt","_formattedAttempt$suc","formattedAttempt","timecreated","timemodified","success","duration","durationReadable","durationCompact","formatTime","formatTimeShort","formatAttemptResults","_formattedAttempt$res","results","map","result","formatResult","formatUserAttempts","data","formatted","attempts","scored","getAccessInformationCacheKey","id","getAccessInformation","options","_this2","params","h5pactivityid","preSets","_objectSpread","cacheKey","updateFrequency","FREQUENCY_OFTEN","component","COMPONENT","componentId","cmId","getReadingStrategyPreSets","readingStrategy","read","getAllAttemptsResults","_this3","userAttempts","getUserAttempts","attemptIds","length","getAttemptsResults","activityid","warnings","getAllUsersAttempts","_this4","optionsWithPage","page","canLoadMore","users","getUsersAttempts","concat","error","dontFailOnError","_this5","_options$perPage","_response$warnings","perPage","USERS_PER_PAGE","perpage","sortorder","sortOrder","firstinitial","firstInitial","lastinitial","lastInitial","getUsersAttemptsCacheKey","FREQUENCY_SOMETIMES","response","usersattempts","slice","getUsersAttemptsCommonCacheKey","getAttemptResultsCacheKey","attemptsIds","getAttemptResultsCommonCacheKey","JSON","stringify","getAttemptResults","attemptId","_this6","attemptids","_response$warnings2","isWebServiceError","cacheOptions","attemptsResults","AddonModH5PActivity","find","_this7","getDeployedFile","h5pActivity","deployedfile","package","getTrustedH5PFile","fileurl","displayOptions","ignoreCache","getH5PActivityDataCacheKey","courseId","getH5PActivityByField","key","value","_this8","courseids","FREQUENCY_RARELY","currentActivity","h5pactivities","h5pglobalsettings","instant","getH5PActivity","getH5PActivityByContextId","contextId","getH5PActivityById","getUserAttemptsCacheKey","userIds","getUserAttemptsCommonCacheKey","_this9","userId","getUserId","_response$warnings3","userids","user","userid","_unused","invalidateAccessInformation","_this10","invalidateWsCacheForKey","invalidateActivityData","_this11","invalidateAllResults","_this12","invalidateAttemptResults","_this13","invalidateAllUsersAttempts","_this14","invalidateWsCacheForKeyStartingWith","invalidateUserAttempts","_this15","isPluginEnabled","isSaveStateEnabled","accessInfo","enabletracking","enablesavestate","cansubmit","logView","log","logViewReport","attemptid","getId","_class","TRACK_COMPONENT","GRADEMANUAL","GRADEHIGHESTATTEMPT","GRADEAVERAGEATTEMPT","GRADELASTATTEMPT","GRADEFIRSTATTEMPT","factory","ɵfac","providedIn"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/h5pactivity/services/h5pactivity.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreSites, CoreSitesCommonWSOptions, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreWSExternalWarning, CoreWSExternalFile, CoreWSFile } from '@services/ws';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreH5P } from '@features/h5p/services/h5p';\nimport { CoreH5PDisplayOptions } from '@features/h5p/classes/core';\nimport { CoreCourseCommonModWSOptions } from '@features/course/services/course';\nimport { makeSingleton, Translate } from '@singletons/index';\nimport { CoreWSError } from '@classes/errors/wserror';\nimport { CoreError } from '@classes/errors/error';\nimport { AddonModH5PActivityAutoSyncData, AddonModH5PActivitySyncProvider } from './h5pactivity-sync';\nimport { CoreTime } from '@singletons/time';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\n\nexport const MOD_H5PACTIVITY_STATE_ID = 'state';\n\nconst ROOT_CACHE_KEY = 'mmaModH5PActivity:';\n\n/**\n * Service that provides some features for H5P activity.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModH5PActivityProvider {\n\n    static readonly COMPONENT = 'mmaModH5PActivity';\n    static readonly TRACK_COMPONENT = 'mod_h5pactivity'; // Component for tracking.\n    static readonly USERS_PER_PAGE = 20;\n\n    // Grade type constants.\n    static readonly GRADEMANUAL = 0; // No automathic grading using attempt results.\n    static readonly GRADEHIGHESTATTEMPT = 1; // Use highest attempt results for grading.\n    static readonly GRADEAVERAGEATTEMPT = 2; // Use average attempt results for grading.\n    static readonly GRADELASTATTEMPT = 3; // Use last attempt results for grading.\n    static readonly GRADEFIRSTATTEMPT = 4; // Use first attempt results for grading.\n\n    /**\n     * Check if a certain site allows viewing list of users and their attempts.\n     *\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Whether can view users.\n     * @since 3.11\n     */\n    async canGetUsersAttempts(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.canGetUsersAttemptsInSite(site);\n    }\n\n    /**\n     * Check if a certain site allows viewing list of users and their attempts.\n     *\n     * @param site Site. If not defined, use current site.\n     * @returns Whether can view users.\n     * @since 3.11\n     */\n    canGetUsersAttemptsInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site?.wsAvailable('mod_h5pactivity_get_user_attempts');\n    }\n\n    /**\n     * Format an attempt's data.\n     *\n     * @param attempt Attempt to format.\n     * @returns Formatted attempt.\n     */\n    protected formatAttempt(attempt: AddonModH5PActivityWSAttempt): AddonModH5PActivityAttempt {\n        const formattedAttempt: AddonModH5PActivityAttempt = attempt;\n\n        formattedAttempt.timecreated = attempt.timecreated * 1000; // Convert to milliseconds.\n        formattedAttempt.timemodified = attempt.timemodified * 1000; // Convert to milliseconds.\n        formattedAttempt.success = formattedAttempt.success ?? null;\n\n        if (!attempt.duration) {\n            formattedAttempt.durationReadable = '-';\n            formattedAttempt.durationCompact = '-';\n        } else {\n            formattedAttempt.durationReadable = CoreTime.formatTime(attempt.duration, 3);\n            formattedAttempt.durationCompact = CoreTime.formatTimeShort(attempt.duration);\n        }\n\n        return formattedAttempt;\n    }\n\n    /**\n     * Format attempt data and results.\n     *\n     * @param attempt Attempt and results to format.\n     * @returns Attemp data and results.\n     */\n    protected formatAttemptResults(attempt: AddonModH5PActivityWSAttemptResults): AddonModH5PActivityAttemptResults {\n        const formattedAttempt: AddonModH5PActivityAttemptResults = this.formatAttempt(attempt);\n\n        formattedAttempt.results = formattedAttempt.results?.map((result) => this.formatResult(result));\n\n        return formattedAttempt;\n    }\n\n    /**\n     * Format the attempts of a user.\n     *\n     * @param data Data to format.\n     * @returns Formatted data.\n     */\n    protected formatUserAttempts(data: AddonModH5PActivityWSUserAttempts): AddonModH5PActivityUserAttempts {\n        const formatted: AddonModH5PActivityUserAttempts = data;\n\n        formatted.attempts = formatted.attempts.map((attempt) => this.formatAttempt(attempt));\n\n        if (formatted.scored) {\n            formatted.scored.attempts = formatted.scored.attempts.map((attempt) => this.formatAttempt(attempt));\n        }\n\n        return formatted;\n    }\n\n    /**\n     * Format an attempt's result.\n     *\n     * @param result Result to format.\n     * @returns Attempts results\n     */\n    protected formatResult(result: AddonModH5PActivityWSResult): AddonModH5PActivityWSResult {\n        result.timecreated = result.timecreated * 1000; // Convert to milliseconds.\n\n        return result;\n    }\n\n    /**\n     * Get cache key for access information WS calls.\n     *\n     * @param id H5P activity ID.\n     * @returns Cache key.\n     */\n    protected getAccessInformationCacheKey(id: number): string {\n        return ROOT_CACHE_KEY + 'accessInfo:' + id;\n    }\n\n    /**\n     * Get access information for a given H5P activity.\n     *\n     * @param id H5P activity ID.\n     * @param options Other options.\n     * @returns Promise resolved with the data.\n     */\n    async getAccessInformation(id: number, options: CoreCourseCommonModWSOptions = {}): Promise<AddonModH5PActivityAccessInfo> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModH5pactivityGetH5pactivityAccessInformationWSParams = {\n            h5pactivityid: id,\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getAccessInformationCacheKey(id),\n            updateFrequency: CoreSite.FREQUENCY_OFTEN,\n            component: AddonModH5PActivityProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        return site.read('mod_h5pactivity_get_h5pactivity_access_information', params, preSets);\n    }\n\n    /**\n     * Get attempt results for all user attempts.\n     *\n     * @param id Activity ID.\n     * @param options Other options.\n     * @returns Promise resolved with the results of the attempt.\n     */\n    async getAllAttemptsResults(\n        id: number,\n        options?: AddonModH5PActivityGetAttemptResultsOptions,\n    ): Promise<AddonModH5PActivityAttemptsResults> {\n\n        const userAttempts = await this.getUserAttempts(id, options);\n\n        const attemptIds = userAttempts.attempts.map((attempt) => attempt.id);\n\n        if (attemptIds.length) {\n            // Get all the attempts with a single call.\n            return this.getAttemptsResults(id, attemptIds, options);\n        } else {\n            // No attempts.\n            return {\n                activityid: id,\n                attempts: [],\n                warnings: [],\n            };\n        }\n    }\n\n    /**\n     * Get all pages of users attempts.\n     *\n     * @param id Activity ID.\n     * @param options Other options.\n     * @returns Promise resolved with the list of user.\n     */\n    async getAllUsersAttempts(\n        id: number,\n        options?: AddonModH5PActivityGetAllUsersAttemptsOptions,\n    ): Promise<AddonModH5PActivityUserAttempts[]> {\n\n        const optionsWithPage: AddonModH5PActivityGetAllUsersAttemptsOptions = {\n            ...options,\n        };\n        optionsWithPage.page = 0;\n        let canLoadMore = true;\n        let users: AddonModH5PActivityUserAttempts[] = [];\n\n        while (canLoadMore) {\n            try {\n                const result = await this.getUsersAttempts(id, optionsWithPage);\n\n                optionsWithPage.page = optionsWithPage.page + 1;\n                users = users.concat(result.users);\n                canLoadMore = result.canLoadMore;\n            } catch (error) {\n                if (optionsWithPage.dontFailOnError) {\n                    return users;\n                }\n\n                throw error;\n            }\n        }\n\n        return users;\n    }\n\n    /**\n     * Get list of users and their attempts.\n     *\n     * @param id H5P Activity ID.\n     * @param options Options.\n     * @returns Promise resolved with list of users and whether can load more attempts.\n     * @since 3.11\n     */\n    async getUsersAttempts(\n        id: number,\n        options?: AddonModH5PActivityGetUsersAttemptsOptions,\n    ): Promise<{users: AddonModH5PActivityUserAttempts[]; canLoadMore: boolean}> {\n        options = options || {};\n        options.page = options.page || 0;\n        options.perPage = options.perPage ?? AddonModH5PActivityProvider.USERS_PER_PAGE;\n\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModH5pactivityGetUserAttemptsWSParams = {\n            h5pactivityid: id,\n            page: options.page,\n            perpage: options.perPage === 0 ? 0 : options.perPage + 1, // Get 1 more to be able to know if there are more to load.\n            sortorder: options.sortOrder,\n            firstinitial: options.firstInitial,\n            lastinitial: options.lastInitial,\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getUsersAttemptsCacheKey(id, options),\n            updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n            component: AddonModH5PActivityProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModH5pactivityGetUserAttemptsWSResponse>(\n            'mod_h5pactivity_get_user_attempts',\n            params,\n            preSets,\n        );\n\n        if (response.warnings?.[0]) {\n            throw new CoreWSError(response.warnings[0]);\n        }\n\n        let canLoadMore = false;\n        if (options.perPage > 0) {\n            canLoadMore = response.usersattempts.length > options.perPage;\n            response.usersattempts = response.usersattempts.slice(0, options.perPage);\n        }\n\n        return {\n            canLoadMore: canLoadMore,\n            users: response.usersattempts.map(userAttempts => this.formatUserAttempts(userAttempts)),\n        };\n    }\n\n    /**\n     * Get cache key for get users attempts WS calls.\n     *\n     * @param id Instance ID.\n     * @param options Get attempts options.\n     * @returns Cache key.\n     */\n    protected getUsersAttemptsCacheKey(id: number, options: AddonModH5PActivityGetUsersAttemptsOptions): string {\n        return this.getUsersAttemptsCommonCacheKey(id) + `:${options.page}:${options.perPage}` +\n            `:${options.sortOrder || ''}:${options.firstInitial || ''}:${options.lastInitial || ''}`;\n    }\n\n    /**\n     * Get common cache key for get users attempts WS calls.\n     *\n     * @param id Instance ID.\n     * @returns Cache key.\n     */\n    protected getUsersAttemptsCommonCacheKey(id: number): string {\n        return ROOT_CACHE_KEY + 'userAttempts:' + id;\n    }\n\n    /**\n     * Get cache key for results WS calls.\n     *\n     * @param id Instance ID.\n     * @param attemptsIds Attempts IDs.\n     * @returns Cache key.\n     */\n    protected getAttemptResultsCacheKey(id: number, attemptsIds: number[]): string {\n        return this.getAttemptResultsCommonCacheKey(id) + ':' + JSON.stringify(attemptsIds);\n    }\n\n    /**\n     * Get common cache key for results WS calls.\n     *\n     * @param id Instance ID.\n     * @returns Cache key.\n     */\n    protected getAttemptResultsCommonCacheKey(id: number): string {\n        return ROOT_CACHE_KEY + 'results:' + id;\n    }\n\n    /**\n     * Get attempt results.\n     *\n     * @param id Activity ID.\n     * @param attemptId Attempt ID.\n     * @param options Other options.\n     * @returns Promise resolved with the results of the attempt.\n     */\n    async getAttemptResults(\n        id: number,\n        attemptId: number,\n        options?: AddonModH5PActivityGetAttemptResultsOptions,\n    ): Promise<AddonModH5PActivityAttemptResults> {\n\n        options = options || {};\n\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModH5pactivityGetResultsWSParams = {\n            h5pactivityid: id,\n        };\n        params.attemptids = [attemptId];\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getAttemptResultsCacheKey(id, params.attemptids),\n            updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n            component: AddonModH5PActivityProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        try {\n            const response = await site.read<AddonModH5pactivityGetResultsWSResponse>(\n                'mod_h5pactivity_get_results',\n                params,\n                preSets,\n            );\n\n            if (response.warnings?.[0]) {\n                throw new CoreWSError(response.warnings[0]); // Cannot view attempt.\n            }\n\n            return this.formatAttemptResults(response.attempts[0]);\n        } catch (error) {\n            if (CoreUtils.isWebServiceError(error)) {\n                throw error;\n            }\n\n            // Check if the full list of results is cached. If so, get the results from there.\n            const cacheOptions: AddonModH5PActivityGetAttemptResultsOptions = {\n                ...options, // Include all the original options.\n                readingStrategy: CoreSitesReadingStrategy.ONLY_CACHE,\n            };\n\n            const attemptsResults = await AddonModH5PActivity.getAllAttemptsResults(id, cacheOptions);\n\n            const attempt = attemptsResults.attempts.find((attempt) => attempt.id == attemptId);\n\n            if (!attempt) {\n                throw error;\n            }\n\n            return attempt;\n        }\n    }\n\n    /**\n     * Get attempts results.\n     *\n     * @param id Activity ID.\n     * @param attemptsIds Attempts IDs.\n     * @param options Other options.\n     * @returns Promise resolved with all the attempts.\n     */\n    async getAttemptsResults(\n        id: number,\n        attemptsIds: number[],\n        options?: AddonModH5PActivityGetAttemptResultsOptions,\n    ): Promise<AddonModH5PActivityAttemptsResults> {\n\n        options = options || {};\n\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModH5pactivityGetResultsWSParams = {\n            h5pactivityid: id,\n            attemptids: attemptsIds,\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getAttemptResultsCommonCacheKey(id),\n            updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n            component: AddonModH5PActivityProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModH5pactivityGetResultsWSResponse>(\n            'mod_h5pactivity_get_results',\n            params,\n            preSets,\n        );\n\n        response.attempts = response.attempts.map((attempt) => this.formatAttemptResults(attempt));\n\n        return response;\n    }\n\n    /**\n     * Get deployed file from an H5P activity instance.\n     *\n     * @param h5pActivity Activity instance.\n     * @param options Options\n     * @returns Promise resolved with the file.\n     */\n    async getDeployedFile(\n        h5pActivity: AddonModH5PActivityData,\n        options?: AddonModH5PActivityGetDeployedFileOptions,\n    ): Promise<CoreWSFile> {\n\n        if (h5pActivity.deployedfile) {\n            // File already deployed and still valid, use this one.\n            return h5pActivity.deployedfile;\n        }\n\n        if (!h5pActivity.package || !h5pActivity.package[0]) {\n            // Shouldn't happen.\n            throw new CoreError('No H5P package found.');\n        }\n\n        options = options || {};\n\n        // Deploy the file in the server.\n        return CoreH5P.getTrustedH5PFile(\n            h5pActivity.package[0].fileurl,\n            options.displayOptions,\n            options.ignoreCache,\n            options.siteId,\n        );\n    }\n\n    /**\n     * Get cache key for H5P activity data WS calls.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getH5PActivityDataCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'h5pactivity:' + courseId;\n    }\n\n    /**\n     * Get an H5P activity with key=value. If more than one is found, only the first will be returned.\n     *\n     * @param courseId Course ID.\n     * @param key Name of the property to check.\n     * @param value Value to search.\n     * @param options Other options.\n     * @returns Promise resolved with the activity data.\n     */\n    protected async getH5PActivityByField(\n        courseId: number,\n        key: string,\n        value: unknown,\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<AddonModH5PActivityData> {\n\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModH5pactivityGetByCoursesWSParams = {\n            courseids: [courseId],\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getH5PActivityDataCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: AddonModH5PActivityProvider.COMPONENT,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModH5pactivityGetByCoursesWSResponse>(\n            'mod_h5pactivity_get_h5pactivities_by_courses',\n            params,\n            preSets,\n        );\n\n        const currentActivity = response.h5pactivities.find((h5pActivity) => h5pActivity[key] == value);\n\n        if (currentActivity) {\n            return {\n                ...currentActivity,\n                ...response.h5pglobalsettings,\n            };\n        }\n\n        throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    }\n\n    /**\n     * Get an H5P activity by module ID.\n     *\n     * @param courseId Course ID.\n     * @param cmId Course module ID.\n     * @param options Other options.\n     * @returns Promise resolved with the activity data.\n     */\n    getH5PActivity(courseId: number, cmId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModH5PActivityData> {\n        return this.getH5PActivityByField(courseId, 'coursemodule', cmId, options);\n    }\n\n    /**\n     * Get an H5P activity by context ID.\n     *\n     * @param courseId Course ID.\n     * @param contextId Context ID.\n     * @param options Other options.\n     * @returns Promise resolved with the activity data.\n     */\n    getH5PActivityByContextId(\n        courseId: number,\n        contextId: number,\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<AddonModH5PActivityData> {\n        return this.getH5PActivityByField(courseId, 'context', contextId, options);\n    }\n\n    /**\n     * Get an H5P activity by instance ID.\n     *\n     * @param courseId Course ID.\n     * @param id Instance ID.\n     * @param options Other options.\n     * @returns Promise resolved with the activity data.\n     */\n    getH5PActivityById(courseId: number, id: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModH5PActivityData> {\n        return this.getH5PActivityByField(courseId, 'id', id, options);\n    }\n\n    /**\n     * Get cache key for attemps WS calls.\n     *\n     * @param id Instance ID.\n     * @param userIds User IDs.\n     * @returns Cache key.\n     */\n    protected getUserAttemptsCacheKey(id: number, userIds: number[]): string {\n        return this.getUserAttemptsCommonCacheKey(id) + ':' + JSON.stringify(userIds);\n    }\n\n    /**\n     * Get common cache key for attempts WS calls.\n     *\n     * @param id Instance ID.\n     * @returns Cache key.\n     */\n    protected getUserAttemptsCommonCacheKey(id: number): string {\n        return ROOT_CACHE_KEY + 'attempts:' + id;\n    }\n\n    /**\n     * Get attempts of a certain user.\n     *\n     * @param id Activity ID.\n     * @param options Other options.\n     * @returns Promise resolved with the attempts of the user.\n     */\n    async getUserAttempts(\n        id: number,\n        options: AddonModH5PActivityGetAttemptsOptions = {},\n    ): Promise<AddonModH5PActivityUserAttempts> {\n\n        const site = await CoreSites.getSite(options.siteId);\n        const userId = options.userId || site.getUserId();\n\n        try {\n            const params: AddonModH5pactivityGetAttemptsWSParams = {\n                h5pactivityid: id,\n            };\n            params.userids = [userId];\n\n            const preSets: CoreSiteWSPreSets = {\n                cacheKey: this.getUserAttemptsCacheKey(id, params.userids),\n                updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n                component: AddonModH5PActivityProvider.COMPONENT,\n                componentId: options.cmId,\n                ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n            };\n\n            const response = await site.read<AddonModH5pactivityGetAttemptsWSResponse>(\n                'mod_h5pactivity_get_attempts',\n                params,\n                preSets,\n            );\n\n            if (response.warnings?.[0]) {\n                throw new CoreWSError(response.warnings[0]); // Cannot view user attempts.\n            }\n\n            return this.formatUserAttempts(response.usersattempts[0]);\n        } catch (error) {\n            if (CoreUtils.isWebServiceError(error)) {\n                throw error;\n            }\n\n            try {\n                // Check if the full list of users is cached. If so, get the user attempts from there.\n                const users = await this.getAllUsersAttempts(id, {\n                    ...options,\n                    readingStrategy: CoreSitesReadingStrategy.ONLY_CACHE,\n                    dontFailOnError: true,\n                });\n\n                const user = users.find(user => user.userid === userId);\n                if (!user) {\n                    throw error;\n                }\n\n                return this.formatUserAttempts(user);\n            } catch {\n                throw error;\n            }\n        }\n\n    }\n\n    /**\n     * Invalidates access information.\n     *\n     * @param id H5P activity ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAccessInformation(id: number, siteId?: string): Promise<void> {\n\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getAccessInformationCacheKey(id));\n    }\n\n    /**\n     * Invalidates H5P activity data.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateActivityData(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getH5PActivityDataCacheKey(courseId));\n    }\n\n    /**\n     * Invalidates all attempts results for H5P activity.\n     *\n     * @param id Activity ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAllResults(id: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getAttemptResultsCommonCacheKey(id));\n    }\n\n    /**\n     * Invalidates results of a certain attempt for H5P activity.\n     *\n     * @param id Activity ID.\n     * @param attemptId Attempt ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAttemptResults(id: number, attemptId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getAttemptResultsCacheKey(id, [attemptId]));\n    }\n\n    /**\n     * Invalidates list of users for H5P activity.\n     *\n     * @param id Activity ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAllUsersAttempts(id: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKeyStartingWith(this.getUsersAttemptsCommonCacheKey(id));\n    }\n\n    /**\n     * Invalidates attempts of a certain user for H5P activity.\n     *\n     * @param id Activity ID.\n     * @param userId User ID. If not defined, current user in the site.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateUserAttempts(id: number, userId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        userId = userId || site.getUserId();\n\n        await site.invalidateWsCacheForKey(this.getUserAttemptsCacheKey(id, [userId]));\n    }\n\n    /**\n     * Delete launcher.\n     *\n     * @returns Promise resolved when the launcher file is deleted.\n     * @since 3.9\n     */\n    async isPluginEnabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.wsAvailable('mod_h5pactivity_get_h5pactivities_by_courses');\n    }\n\n    /**\n     * Check if save state is enabled for a certain activity.\n     *\n     * @param h5pActivity Activity.\n     * @param accessInfo Access info.\n     * @returns Whether save state is enabled.\n     */\n    isSaveStateEnabled(h5pActivity: AddonModH5PActivityData, accessInfo?: AddonModH5PActivityAccessInfo): boolean {\n        return !!(h5pActivity.enabletracking && h5pActivity.enablesavestate && (!accessInfo || accessInfo.cansubmit));\n    }\n\n    /**\n     * Report an H5P activity as being viewed.\n     *\n     * @param id H5P activity ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    logView(id: number, siteId?: string): Promise<void> {\n        const params: AddonModH5PActivityViewH5pactivityWSParams = {\n            h5pactivityid: id,\n        };\n\n        return CoreCourseLogHelper.log(\n            'mod_h5pactivity_view_h5pactivity',\n            params,\n            AddonModH5PActivityProvider.COMPONENT,\n            id,\n            siteId,\n        );\n    }\n\n    /**\n     * Report an H5P activity report as being viewed.\n     *\n     * @param id H5P activity ID.\n     * @param options Options.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logViewReport(id: number, options: AddonModH5PActivityViewReportOptions = {}): Promise<void> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        if (!site.wsAvailable('mod_h5pactivity_log_report_viewed')) {\n            // Site doesn't support the WS, stop. Added in Moodle 3.11.\n            return;\n        }\n\n        const params: AddonModH5PActivityLogReportViewedWSParams = {\n            h5pactivityid: id,\n            userid: options.userId,\n            attemptid: options.attemptId,\n        };\n\n        return CoreCourseLogHelper.log(\n            'mod_h5pactivity_log_report_viewed',\n            params,\n            AddonModH5PActivityProvider.COMPONENT,\n            id,\n            site.getId(),\n        );\n    }\n\n}\n\nexport const AddonModH5PActivity = makeSingleton(AddonModH5PActivityProvider);\n\n/**\n * Basic data for an H5P activity, exported by Moodle class h5pactivity_summary_exporter.\n */\nexport type AddonModH5PActivityWSData = {\n    id: number; // The primary key of the record.\n    course: number; // Course id this h5p activity is part of.\n    name: string; // The name of the activity module instance.\n    timecreated?: number; // Timestamp of when the instance was added to the course.\n    timemodified?: number; // Timestamp of when the instance was last modified.\n    intro: string; // H5P activity description.\n    introformat: number; // Intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    grade?: number; // The maximum grade for submission.\n    displayoptions: number; // H5P Button display options.\n    enabletracking: number; // Enable xAPI tracking.\n    grademethod: number; // Which H5P attempt is used for grading.\n    contenthash?: string; // Sha1 hash of file content.\n    coursemodule: number; // Coursemodule.\n    context: number; // Context ID.\n    introfiles: CoreWSExternalFile[];\n    package: CoreWSExternalFile[];\n    deployedfile?: {\n        filename?: string; // File name.\n        filepath?: string; // File path.\n        filesize?: number; // File size.\n        fileurl: string; // Downloadable file url.\n        timemodified?: number; // Time modified.\n        mimetype?: string; // File mime type.\n    };\n};\n\n/**\n * Basic data for an H5P activity, with some calculated data.\n */\nexport type AddonModH5PActivityData = AddonModH5PActivityWSData & Partial<AddonModH5pactivityGlobalSettings>;\n\n/**\n * Global settings for H5P activities.\n */\nexport type AddonModH5pactivityGlobalSettings = {\n    enablesavestate: boolean; // Whether saving state is enabled.\n    savestatefreq?: number; // How often (in seconds) the state is saved.\n};\n\n/**\n * Params of mod_h5pactivity_get_h5pactivities_by_courses WS.\n */\nexport type AddonModH5pactivityGetByCoursesWSParams = {\n    courseids?: number[]; // Array of course ids.\n};\n\n/**\n * Data returned by mod_h5pactivity_get_h5pactivities_by_courses WS.\n */\nexport type AddonModH5pactivityGetByCoursesWSResponse = {\n    h5pactivities: AddonModH5PActivityWSData[];\n    h5pglobalsettings?: AddonModH5pactivityGlobalSettings;\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_h5pactivity_get_h5pactivity_access_information WS.\n */\nexport type AddonModH5pactivityGetH5pactivityAccessInformationWSParams = {\n    h5pactivityid: number; // H5p activity instance id.\n};\n\n/**\n * Data returned by mod_h5pactivity_get_h5pactivity_access_information WS.\n */\nexport type AddonModH5pactivityGetH5pactivityAccessInformationWSResponse = {\n    warnings?: CoreWSExternalWarning[];\n    canview?: boolean; // Whether the user has the capability mod/h5pactivity:view allowed.\n    canaddinstance?: boolean; // Whether the user has the capability mod/h5pactivity:addinstance allowed.\n    cansubmit?: boolean; // Whether the user has the capability mod/h5pactivity:submit allowed.\n    canreviewattempts?: boolean; // Whether the user has the capability mod/h5pactivity:reviewattempts allowed.\n};\n\n/**\n * Result of WS mod_h5pactivity_get_h5pactivity_access_information.\n */\nexport type AddonModH5PActivityAccessInfo = AddonModH5pactivityGetH5pactivityAccessInformationWSResponse;\n\n/**\n * Params of mod_h5pactivity_get_attempts WS.\n */\nexport type AddonModH5pactivityGetAttemptsWSParams = {\n    h5pactivityid: number; // H5p activity instance id.\n    userids?: number[]; // User ids.\n};\n\n/**\n * Data returned by mod_h5pactivity_get_attempts WS.\n */\nexport type AddonModH5pactivityGetAttemptsWSResponse = {\n    activityid: number; // Activity course module ID.\n    usersattempts: AddonModH5PActivityWSUserAttempts[]; // The complete users attempts list.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_h5pactivity_get_results WS.\n */\nexport type AddonModH5pactivityGetResultsWSParams = {\n    h5pactivityid: number; // H5p activity instance id.\n    attemptids?: number[]; // Attempt ids.\n};\n\n/**\n * Data returned by mod_h5pactivity_get_results WS.\n */\nexport type AddonModH5pactivityGetResultsWSResponse = {\n    activityid: number; // Activity course module ID.\n    attempts: AddonModH5PActivityWSAttemptResults[]; // The complete attempts list.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Attempts results with some calculated data.\n */\nexport type AddonModH5PActivityAttemptsResults = Omit<AddonModH5pactivityGetResultsWSResponse, 'attempts'> & {\n    attempts: AddonModH5PActivityAttemptResults[]; // The complete attempts list.\n};\n\n/**\n * Attempts data for a user as returned by the WS mod_h5pactivity_get_attempts.\n */\nexport type AddonModH5PActivityWSUserAttempts = {\n    userid: number; // The user id.\n    attempts: AddonModH5PActivityWSAttempt[]; // The complete attempts list.\n    scored?: { // Attempts used to grade the activity.\n        title: string; // Scored attempts title.\n        grademethod: string; // Scored attempts title.\n        attempts: AddonModH5PActivityWSAttempt[]; // List of the grading attempts.\n    };\n};\n\n/**\n * Attempt data as returned by the WS mod_h5pactivity_get_attempts.\n */\nexport type AddonModH5PActivityWSAttempt = {\n    id: number; // ID of the context.\n    h5pactivityid: number; // ID of the H5P activity.\n    userid: number; // ID of the user.\n    timecreated: number; // Attempt creation.\n    timemodified: number; // Attempt modified.\n    attempt: number; // Attempt number.\n    rawscore: number; // Attempt score value.\n    maxscore: number; // Attempt max score.\n    duration: number; // Attempt duration in seconds.\n    completion?: number; // Attempt completion.\n    success?: number | null; // Attempt success.\n    scaled: number; // Attempt scaled.\n};\n\n/**\n * Attempt and results data as returned by the WS mod_h5pactivity_get_results.\n */\nexport type AddonModH5PActivityWSAttemptResults = AddonModH5PActivityWSAttempt & {\n    results?: AddonModH5PActivityWSResult[]; // The results of the attempt.\n};\n\n/**\n * Attempt result data as returned by the WS mod_h5pactivity_get_results.\n */\nexport type AddonModH5PActivityWSResult = {\n    id: number; // ID of the context.\n    attemptid: number; // ID of the H5P attempt.\n    subcontent: string; // Subcontent identifier.\n    timecreated: number; // Result creation.\n    interactiontype: string; // Interaction type.\n    description: string; // Result description.\n    content?: string; // Result extra content.\n    rawscore: number; // Result score value.\n    maxscore: number; // Result max score.\n    duration?: number; // Result duration in seconds.\n    completion?: number; // Result completion.\n    success?: number | null; // Result success.\n    optionslabel?: string; // Label used for result options.\n    correctlabel?: string; // Label used for correct answers.\n    answerlabel?: string; // Label used for user answers.\n    track?: boolean; // If the result has valid track information.\n    options?: { // The statement options.\n        description: string; // Option description.\n        id: number; // Option identifier.\n        correctanswer: AddonModH5PActivityWSResultAnswer; // The option correct answer.\n        useranswer: AddonModH5PActivityWSResultAnswer; // The option user answer.\n    }[];\n};\n\n/**\n * Result answer as returned by the WS mod_h5pactivity_get_results.\n */\nexport type AddonModH5PActivityWSResultAnswer = {\n    answer?: string; // Option text value.\n    correct?: boolean; // If has to be displayed as correct.\n    incorrect?: boolean; // If has to be displayed as incorrect.\n    text?: boolean; // If has to be displayed as simple text.\n    checked?: boolean; // If has to be displayed as a checked option.\n    unchecked?: boolean; // If has to be displayed as a unchecked option.\n    pass?: boolean; // If has to be displayed as passed.\n    fail?: boolean; // If has to be displayed as failed.\n};\n\n/**\n * User attempts data with some calculated data.\n */\nexport type AddonModH5PActivityUserAttempts = Omit<AddonModH5PActivityWSUserAttempts, 'attempts'|'scored'> & {\n    attempts: AddonModH5PActivityAttempt[]; // The complete attempts list.\n    scored?: { // Attempts used to grade the activity.\n        title: string; // Scored attempts title.\n        grademethod: string; // Scored attempts title.\n        attempts: AddonModH5PActivityAttempt[]; // List of the grading attempts.\n    };\n};\n\n/**\n * Attempt with some calculated data.\n */\nexport type AddonModH5PActivityAttempt = AddonModH5PActivityWSAttempt & {\n    durationReadable?: string; // Duration in a human readable format.\n    durationCompact?: string; // Duration in a \"short\" human readable format.\n};\n\n/**\n * Attempt and results data with some calculated data.\n */\nexport type AddonModH5PActivityAttemptResults = AddonModH5PActivityAttempt & {\n    results?: AddonModH5PActivityWSResult[]; // The results of the attempt.\n};\n\n/**\n * Options to pass to getDeployedFile function.\n */\nexport type AddonModH5PActivityGetDeployedFileOptions = {\n    displayOptions?: CoreH5PDisplayOptions; // Display options\n    ignoreCache?: boolean; // Whether to ignore cache. Will fail if offline or server down.\n    siteId?: string; // Site ID. If not defined, current site.\n};\n\n/**\n * Options to pass to getAttemptResults function.\n */\nexport type AddonModH5PActivityGetAttemptResultsOptions = CoreCourseCommonModWSOptions & {\n    userId?: number; // User ID. If not defined, user of the site.\n};\n\n/**\n * Options to pass to getAttempts function.\n */\nexport type AddonModH5PActivityGetAttemptsOptions = AddonModH5PActivityGetAttemptResultsOptions;\n\n/**\n * Params of mod_h5pactivity_view_h5pactivity WS.\n */\nexport type AddonModH5PActivityViewH5pactivityWSParams = {\n    h5pactivityid: number; // H5P activity instance id.\n};\n\n/**\n * Params of mod_h5pactivity_log_report_viewed WS.\n */\nexport type AddonModH5PActivityLogReportViewedWSParams = {\n    h5pactivityid: number; // H5P activity instance id.\n    userid?: number | null; // The user id to log attempt (null means only current user).\n    attemptid?: number | null; // The attempt id.\n};\n\n/**\n * Options for logViewReport.\n */\nexport type AddonModH5PActivityViewReportOptions = {\n    userId?: number; // User ID being viewed. Undefined for current user or when viewing an attempt.\n    attemptId?: number; // Attempt ID being viewed. Undefined if no attempt.\n    siteId?: string; // Site ID. If not defined, current site.\n};\n\n/**\n * Params of mod_h5pactivity_get_user_attempts WS.\n */\nexport type AddonModH5pactivityGetUserAttemptsWSParams = {\n    h5pactivityid: number; // H5p activity instance id.\n    sortorder?: string; // Sort by this element: id, firstname.\n    page?: number; // Current page.\n    perpage?: number; // Items per page.\n    firstinitial?: string; // Users whose first name starts with firstinitial.\n    lastinitial?: string; // Users whose last name starts with lastinitial.\n};\n\n/**\n * Data returned by mod_h5pactivity_get_user_attempts WS.\n */\nexport type AddonModH5pactivityGetUserAttemptsWSResponse = {\n    activityid: number; // Activity course module ID.\n    usersattempts: AddonModH5PActivityWSUserAttempts[]; // The complete users attempts list.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Options for getUsersAttempts.\n */\nexport type AddonModH5PActivityGetUsersAttemptsOptions = CoreCourseCommonModWSOptions & {\n    sortOrder?: string; // Sort by this element: id, firstname.\n    page?: number; // Current page. Defaults to 0.\n    perPage?: number; // Items per page. Defaults to USERS_PER_PAGE.\n    firstInitial?: string; // Users whose first name starts with firstInitial.\n    lastInitial?: string; // Users whose last name starts with lastInitial.\n};\n\n/**\n * Options for getAllUsersAttempts.\n */\nexport type AddonModH5PActivityGetAllUsersAttemptsOptions = AddonModH5PActivityGetUsersAttemptsOptions & {\n    dontFailOnError?: boolean; // If true the function will return the users it's able to retrieve, until a call fails.\n};\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [AddonModH5PActivitySyncProvider.AUTO_SYNCED]: AddonModH5PActivityAutoSyncData;\n    }\n\n}\n\n/**\n * Data to be sent using xAPI.\n */\nexport type AddonModH5PActivityXAPIBasicData = {\n    action: string;\n    component: string;\n    context: string;\n    environment: string;\n};\n\n/**\n * Statements data to be sent using xAPI.\n */\nexport type AddonModH5PActivityXAPIStatementsData = AddonModH5PActivityXAPIBasicData & {\n    statements: AddonModH5PActivityStatement[];\n};\n\n/**\n * States data to be sent using xAPI.\n */\nexport type AddonModH5PActivityXAPIStateData = AddonModH5PActivityXAPIBasicData & {\n    activityId: string;\n    agent: Record<string, unknown>;\n    stateId: string;\n};\n\n/**\n * Post state data to be sent using xAPI.\n */\nexport type AddonModH5PActivityXAPIPostStateData = AddonModH5PActivityXAPIStateData & {\n    stateData: string;\n};\n\n/**\n * xAPI statement.\n */\nexport type AddonModH5PActivityStatement = {\n    actor: Record<string, string>;\n    context: Record<string, unknown>;\n    object: {\n        id: string;\n        definition: Record<string, unknown>;\n        objectType: string;\n    };\n    result: {\n        completion: boolean;\n        duration: string;\n        score: {\n            min: number;\n            max: number;\n            raw: number;\n            scaled: number;\n        };\n        success?: boolean;\n        response?: string;\n    };\n    verb: {\n        id: string;\n        display: Record<string, string>;\n    };\n    timestamp?: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}