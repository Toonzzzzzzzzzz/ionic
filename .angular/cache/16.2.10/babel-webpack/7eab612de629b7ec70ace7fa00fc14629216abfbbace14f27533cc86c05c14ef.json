{"ast":null,"code":"var _class;\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Md5 } from 'ts-md5';\nimport { CoreSitePluginsCallWSOnClickBaseDirective } from '../classes/call-ws-click-directive';\nimport { CoreSitePlugins } from '../services/siteplugins';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../components/plugin-content/plugin-content\";\n/**\n * Directive to call a WS when the element is clicked and load a new content passing the WS result as args. This new content\n * can be displayed in a new page or in the same page (only if current page is already displaying a site plugin content).\n *\n * If you don't need to load some new content when done, @see CoreSitePluginsCallWSDirective.\n *\n * @see CoreSitePluginsCallWSOnClickBaseDirective.\n *\n * Example usages:\n *\n * A button to get some data from the server without using cache, showing default confirm and displaying a new page:\n *\n * <ion-button core-site-plugins-call-ws-new-content name=\"mod_certificate_get_issued_certificates\"\n *             [params]=\"{certificateid: <% certificate.id %>}\" [preSets]=\"{getFromCache: 0, saveToCache: 0}\" confirmMessage\n *             title=\"<% certificate.name %>\" component=\"mod_certificate\" method=\"mobile_issues_view\"\n *             [args]=\"{cmid: <% cmid %>, courseid: <% courseid %>}\">\n *     {{ 'plugin.mod_certificate_coursecertificate.getissued' | translate }}\n * </ion-button>\n *\n * A button to get some data from the server using cache, without confirm, displaying new content in same page and using\n * userid from otherdata:\n *\n * <ion-button core-site-plugins-call-ws-new-content name=\"mod_certificate_get_issued_certificates\"\n *             [params]=\"{certificateid: <% certificate.id %>}\" component=\"mod_certificate\" method=\"mobile_issues_view\"\n *             [args]=\"{cmid: <% cmid %>, courseid: <% courseid %>}\" samePage=\"true\" [useOtherData]=\"['userid']\">\n *     {{ 'plugin.mod_certificate_coursecertificate.getissued' | translate }}\n * </ion-button>\n */\nexport class CoreSitePluginsCallWSNewContentDirective extends CoreSitePluginsCallWSOnClickBaseDirective {\n  constructor(element, parentContent) {\n    super(element, parentContent);\n  }\n  /**\n   * @inheritdoc\n   */\n  wsCallSuccess(result) {\n    let args = this.args || {};\n    if (this.parentContent) {\n      args = CoreSitePlugins.loadOtherDataInArgs(this.args, this.parentContent.otherData, this.useOtherData);\n    }\n    // Add the properties from the WS call result to the args.\n    args = Object.assign(args, result);\n    let jsData = this.jsData || {};\n    if (jsData === true) {\n      var _this$parentContent;\n      jsData = ((_this$parentContent = this.parentContent) === null || _this$parentContent === void 0 ? void 0 : _this$parentContent.data) || {};\n    }\n    if (CoreUtils.isTrueOrOne(this.samePage)) {\n      var _this$parentContent2;\n      // Update the parent content (if it exists).\n      (_this$parentContent2 = this.parentContent) === null || _this$parentContent2 === void 0 || _this$parentContent2.updateContent(args, this.component, this.method, jsData, this.newContentPreSets);\n    } else {\n      var _this$parentContent3, _this$parentContent4, _this$parentContent5, _this$parentContent6;\n      const component = this.component || ((_this$parentContent3 = this.parentContent) === null || _this$parentContent3 === void 0 ? void 0 : _this$parentContent3.component);\n      const method = this.method || ((_this$parentContent4 = this.parentContent) === null || _this$parentContent4 === void 0 ? void 0 : _this$parentContent4.method);\n      const hash = Md5.hashAsciiStr(JSON.stringify(args));\n      CoreNavigator.navigateToSitePath(`siteplugins/content/${component}/${method}/${hash}`, {\n        params: {\n          title: this.title || ((_this$parentContent5 = this.parentContent) === null || _this$parentContent5 === void 0 ? void 0 : _this$parentContent5.pageTitle),\n          args,\n          initResult: (_this$parentContent6 = this.parentContent) === null || _this$parentContent6 === void 0 ? void 0 : _this$parentContent6.initResult,\n          jsData,\n          preSets: this.newContentPreSets,\n          ptrEnabled: this.ptrEnabled\n        }\n      });\n    }\n  }\n}\n_class = CoreSitePluginsCallWSNewContentDirective;\n_class.ɵfac = function CoreSitePluginsCallWSNewContentDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CoreSitePluginsPluginContentComponent, 8));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"\", \"core-site-plugins-call-ws-new-content\", \"\"]],\n  inputs: {\n    component: \"component\",\n    method: \"method\",\n    args: \"args\",\n    title: \"title\",\n    samePage: \"samePage\",\n    useOtherData: \"useOtherData\",\n    form: \"form\",\n    jsData: \"jsData\",\n    newContentPreSets: \"newContentPreSets\",\n    ptrEnabled: \"ptrEnabled\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});","map":{"version":3,"names":["CoreNavigator","CoreUtils","Md5","CoreSitePluginsCallWSOnClickBaseDirective","CoreSitePlugins","CoreSitePluginsCallWSNewContentDirective","constructor","element","parentContent","wsCallSuccess","result","args","loadOtherDataInArgs","otherData","useOtherData","Object","assign","jsData","_this$parentContent","data","isTrueOrOne","samePage","_this$parentContent2","updateContent","component","method","newContentPreSets","_this$parentContent3","_this$parentContent4","_this$parentContent5","_this$parentContent6","hash","hashAsciiStr","JSON","stringify","navigateToSitePath","params","title","pageTitle","initResult","preSets","ptrEnabled","i0","ɵɵdirectiveInject","ElementRef","i1","CoreSitePluginsPluginContentComponent","selectors","inputs","form","features","ɵɵInheritDefinitionFeature"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/siteplugins/directives/call-ws-new-content.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Directive, Input, ElementRef, Optional } from '@angular/core';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Md5 } from 'ts-md5';\n\nimport { CoreSitePluginsCallWSOnClickBaseDirective } from '../classes/call-ws-click-directive';\nimport { CoreSitePluginsPluginContentComponent } from '../components/plugin-content/plugin-content';\nimport { CoreSitePlugins } from '../services/siteplugins';\n\n/**\n * Directive to call a WS when the element is clicked and load a new content passing the WS result as args. This new content\n * can be displayed in a new page or in the same page (only if current page is already displaying a site plugin content).\n *\n * If you don't need to load some new content when done, @see CoreSitePluginsCallWSDirective.\n *\n * @see CoreSitePluginsCallWSOnClickBaseDirective.\n *\n * Example usages:\n *\n * A button to get some data from the server without using cache, showing default confirm and displaying a new page:\n *\n * <ion-button core-site-plugins-call-ws-new-content name=\"mod_certificate_get_issued_certificates\"\n *             [params]=\"{certificateid: <% certificate.id %>}\" [preSets]=\"{getFromCache: 0, saveToCache: 0}\" confirmMessage\n *             title=\"<% certificate.name %>\" component=\"mod_certificate\" method=\"mobile_issues_view\"\n *             [args]=\"{cmid: <% cmid %>, courseid: <% courseid %>}\">\n *     {{ 'plugin.mod_certificate_coursecertificate.getissued' | translate }}\n * </ion-button>\n *\n * A button to get some data from the server using cache, without confirm, displaying new content in same page and using\n * userid from otherdata:\n *\n * <ion-button core-site-plugins-call-ws-new-content name=\"mod_certificate_get_issued_certificates\"\n *             [params]=\"{certificateid: <% certificate.id %>}\" component=\"mod_certificate\" method=\"mobile_issues_view\"\n *             [args]=\"{cmid: <% cmid %>, courseid: <% courseid %>}\" samePage=\"true\" [useOtherData]=\"['userid']\">\n *     {{ 'plugin.mod_certificate_coursecertificate.getissued' | translate }}\n * </ion-button>\n */\n@Directive({\n    selector: '[core-site-plugins-call-ws-new-content]',\n})\nexport class CoreSitePluginsCallWSNewContentDirective extends CoreSitePluginsCallWSOnClickBaseDirective {\n\n    @Input() component?: string; // The component of the new content. If not provided, use the same component as current page.\n    @Input() method?: string; // The method to get the new content. If not provided, use the same method as current page.\n    @Input() args?: Record<string, unknown>; // The params to get the new content.\n    @Input() title?: string; // The title to display with the new content. Only if samePage=false.\n    @Input() samePage?: boolean | string; // Whether to display the content in same page or open a new one. Defaults to new page.\n    @Input() useOtherData?: string[] | unknown; // Whether to include other data in the args.\n    @Input() form?: string; // ID or name to identify a form. The form data will be retrieved and sent to the WS.\n    // JS variables to pass to the new page so they can be used in the template or JS.\n    // If true is supplied instead of an object, all initial variables from current page will be copied.\n    @Input() jsData?: Record<string, unknown> | boolean;\n    @Input() newContentPreSets?: CoreSiteWSPreSets; // The preSets for the WS call of the new content.\n    @Input() ptrEnabled?: boolean | string; // Whether PTR should be enabled in the new page. Defaults to true.\n\n    constructor(\n        element: ElementRef,\n        @Optional() parentContent: CoreSitePluginsPluginContentComponent,\n    ) {\n        super(element, parentContent);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected wsCallSuccess(result: unknown): void {\n        let args = this.args || {};\n\n        if (this.parentContent) {\n            args = CoreSitePlugins.loadOtherDataInArgs(this.args, this.parentContent.otherData, this.useOtherData);\n        }\n\n        // Add the properties from the WS call result to the args.\n        args = Object.assign(args, result);\n\n        let jsData = this.jsData || {};\n        if (jsData === true) {\n            jsData = this.parentContent?.data || {};\n        }\n\n        if (CoreUtils.isTrueOrOne(this.samePage)) {\n            // Update the parent content (if it exists).\n            this.parentContent?.updateContent(args, this.component, this.method, jsData, this.newContentPreSets);\n        } else {\n            const component = this.component || this.parentContent?.component;\n            const method = this.method || this.parentContent?.method;\n            const hash = <string> Md5.hashAsciiStr(JSON.stringify(args));\n\n            CoreNavigator.navigateToSitePath(`siteplugins/content/${component}/${method}/${hash}`, {\n                params: {\n                    title: this.title || this.parentContent?.pageTitle,\n                    args,\n                    initResult: this.parentContent?.initResult,\n                    jsData,\n                    preSets: this.newContentPreSets,\n                    ptrEnabled: this.ptrEnabled,\n                },\n            });\n        }\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}