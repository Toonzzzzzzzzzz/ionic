{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreSilentError } from '@classes/errors/silenterror';\n/**\n * Helper to manage a collection of items in a page.\n */\nexport class CoreItemsManager {\n  constructor(source) {\n    this.itemsMap = null;\n    this.selectedItem = null;\n    this.listeners = [];\n    this.setSource(source);\n  }\n  /**\n   * Get source.\n   *\n   * @returns Source.\n   */\n  getSource() {\n    if (!this.source) {\n      throw new CoreSilentError('Source is missing from items manager');\n    }\n    return this.source.instance;\n  }\n  /**\n   * Set source.\n   *\n   * @param newSource New source.\n   */\n  setSource(newSource) {\n    if (this.source) {\n      this.source.unsubscribe();\n      delete this.source;\n      this.onSourceReset();\n    }\n    if (newSource) {\n      this.source = {\n        instance: newSource,\n        unsubscribe: newSource.addListener({\n          onItemsUpdated: items => this.onSourceItemsUpdated(items),\n          onReset: () => this.onSourceReset()\n        })\n      };\n      const items = newSource.getItems();\n      if (items) {\n        this.onSourceItemsUpdated(items);\n      }\n    }\n  }\n  /**\n   * Process page destroyed operations.\n   */\n  destroy() {\n    this.setSource(null);\n  }\n  /**\n   * Get selected item.\n   *\n   * @returns Selected item, null if none.\n   */\n  getSelectedItem() {\n    return this.selectedItem;\n  }\n  /**\n   * Set selected item.\n   *\n   * @param item Item, null if none.\n   */\n  setSelectedItem(item) {\n    if (item === this.selectedItem) {\n      return;\n    }\n    this.selectedItem = item;\n    this.listeners.forEach(listener => {\n      var _listener$onSelectedI;\n      return (_listener$onSelectedI = listener.onSelectedItemUpdated) === null || _listener$onSelectedI === void 0 ? void 0 : _listener$onSelectedI.call(listener, item);\n    });\n  }\n  /**\n   * Register a listener.\n   *\n   * @param listener Listener.\n   * @returns Unsubscribe function.\n   */\n  addListener(listener) {\n    this.listeners.push(listener);\n    return () => this.removeListener(listener);\n  }\n  /**\n   * Remove a listener.\n   *\n   * @param listener Listener.\n   */\n  removeListener(listener) {\n    const index = this.listeners.indexOf(listener);\n    if (index === -1) {\n      return;\n    }\n    this.listeners.splice(index, 1);\n  }\n  /**\n   * Called when source items have been updated.\n   *\n   * @param items New items.\n   */\n  onSourceItemsUpdated(items) {\n    this.itemsMap = items.reduce((map, item) => {\n      map[this.getItemId(item)] = item;\n      return map;\n    }, {});\n  }\n  /**\n   * Called when source has been updated.\n   */\n  onSourceReset() {\n    this.itemsMap = null;\n    this.selectedItem = null;\n  }\n  /**\n   * Get item by ID.\n   *\n   * @param id ID\n   * @returns Item, null if not found.\n   */\n  getItemById(id) {\n    var _this$itemsMap$id, _this$itemsMap;\n    return (_this$itemsMap$id = (_this$itemsMap = this.itemsMap) === null || _this$itemsMap === void 0 ? void 0 : _this$itemsMap[id]) !== null && _this$itemsMap$id !== void 0 ? _this$itemsMap$id : null;\n  }\n}","map":{"version":3,"names":["CoreSilentError","CoreItemsManager","constructor","source","itemsMap","selectedItem","listeners","setSource","getSource","instance","newSource","unsubscribe","onSourceReset","addListener","onItemsUpdated","items","onSourceItemsUpdated","onReset","getItems","destroy","getSelectedItem","setSelectedItem","item","forEach","listener","_listener$onSelectedI","onSelectedItemUpdated","call","push","removeListener","index","indexOf","splice","reduce","map","getItemId","getItemById","id","_this$itemsMap$id","_this$itemsMap"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/items-management/items-manager.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSilentError } from '@classes/errors/silenterror';\nimport { CoreItemsManagerSource } from './items-manager-source';\n\n/**\n * Listeners.\n */\nexport interface CoreItemsanagerListener<Item> {\n    onSelectedItemUpdated?(item: Item): void;\n}\n\n/**\n * Helper to manage a collection of items in a page.\n */\nexport abstract class CoreItemsManager<\n    Item = unknown,\n    Source extends CoreItemsManagerSource<Item> = CoreItemsManagerSource<Item>,\n> {\n\n    protected source?: { instance: Source; unsubscribe: () => void };\n    protected itemsMap: Record<string, Item> | null = null;\n    protected selectedItem: Item | null = null;\n    protected listeners: CoreItemsanagerListener<Item>[] = [];\n\n    constructor(source: Source) {\n        this.setSource(source);\n    }\n\n    /**\n     * Get source.\n     *\n     * @returns Source.\n     */\n    getSource(): Source {\n        if (!this.source) {\n            throw new CoreSilentError('Source is missing from items manager');\n        }\n\n        return this.source.instance;\n    }\n\n    /**\n     * Set source.\n     *\n     * @param newSource New source.\n     */\n    setSource(newSource: Source | null): void {\n        if (this.source) {\n            this.source.unsubscribe();\n            delete this.source;\n\n            this.onSourceReset();\n        }\n\n        if (newSource) {\n            this.source = {\n                instance: newSource,\n                unsubscribe: newSource.addListener({\n                    onItemsUpdated: items => this.onSourceItemsUpdated(items),\n                    onReset: () => this.onSourceReset(),\n                }),\n            };\n\n            const items = newSource.getItems();\n\n            if (items) {\n                this.onSourceItemsUpdated(items);\n            }\n        }\n    }\n\n    /**\n     * Process page destroyed operations.\n     */\n    destroy(): void {\n        this.setSource(null);\n    }\n\n    /**\n     * Get selected item.\n     *\n     * @returns Selected item, null if none.\n     */\n    getSelectedItem(): Item | null {\n        return this.selectedItem;\n    }\n\n    /**\n     * Set selected item.\n     *\n     * @param item Item, null if none.\n     */\n    setSelectedItem(item: Item | null): void {\n        if (item === this.selectedItem) {\n            return;\n        }\n\n        this.selectedItem = item;\n\n        this.listeners.forEach(listener => listener.onSelectedItemUpdated?.call(listener, item));\n    }\n\n    /**\n     * Register a listener.\n     *\n     * @param listener Listener.\n     * @returns Unsubscribe function.\n     */\n    addListener(listener: CoreItemsanagerListener<Item>): () => void {\n        this.listeners.push(listener);\n\n        return () => this.removeListener(listener);\n    }\n\n    /**\n     * Remove a listener.\n     *\n     * @param listener Listener.\n     */\n    removeListener(listener: CoreItemsanagerListener<Item>): void {\n        const index = this.listeners.indexOf(listener);\n\n        if (index === -1) {\n            return;\n        }\n\n        this.listeners.splice(index, 1);\n    }\n\n    /**\n     * Called when source items have been updated.\n     *\n     * @param items New items.\n     */\n    protected onSourceItemsUpdated(items: Item[]): void {\n        this.itemsMap = items.reduce((map, item) => {\n            map[this.getItemId(item)] = item;\n\n            return map;\n        }, {});\n    }\n\n    /**\n     * Called when source has been updated.\n     */\n    protected onSourceReset(): void {\n        this.itemsMap = null;\n        this.selectedItem = null;\n    }\n\n    /**\n     * Get item by ID.\n     *\n     * @param id ID\n     * @returns Item, null if not found.\n     */\n    getItemById(id: string | number): Item | null {\n        return this.itemsMap?.[id] ?? null;\n    }\n\n    /**\n     * Get an ID to identify an item.\n     *\n     * @param item Data about the item.\n     * @returns Item ID.\n     */\n    abstract getItemId(item: Item): string | number;\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}