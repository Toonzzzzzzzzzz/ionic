{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport { CoreComments, CoreCommentsProvider } from '@features/comments/services/comments';\nimport { CoreCommentsSync, CoreCommentsSyncProvider } from '@features/comments/services/comments-sync';\nimport { IonContent } from '@ionic/angular';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreNavigator } from '@services/navigator';\nimport { NgZone, Translate } from '@singletons';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDomUtils, ToastDuration } from '@services/utils/dom';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCommentsOffline } from '@features/comments/services/comments-offline';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreApp } from '@services/app';\nimport { CoreNetwork } from '@services/network';\nimport moment from 'moment-timezone';\nimport { CoreAnimations } from '@components/animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../components/context-menu/context-menu\";\nimport * as i4 from \"../../../../components/context-menu/context-menu-item\";\nimport * as i5 from \"../../../../components/empty-box/empty-box\";\nimport * as i6 from \"../../../../components/infinite-loading/infinite-loading\";\nimport * as i7 from \"../../../../components/loading/loading\";\nimport * as i8 from \"../../../../components/message/message\";\nimport * as i9 from \"../../../../components/send-message-form/send-message-form\";\nimport * as i10 from \"../../../../directives/fa-icon\";\nimport * as i11 from \"../../../../directives/format-text\";\nimport * as i12 from \"../../../../directives/content\";\nimport * as i13 from \"../../../../directives/update-non-reactive-attributes\";\nimport * as i14 from \"@ionic/angular\";\nimport * as i15 from \"../../../../pipes/format-date\";\nimport * as i16 from \"@ngx-translate/core\";\nfunction CoreCommentsViewerPage_ion_button_9_ion_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 19);\n  }\n}\nfunction CoreCommentsViewerPage_ion_button_9_ion_icon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 20);\n  }\n}\nfunction CoreCommentsViewerPage_ion_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 16);\n    i0.ɵɵlistener(\"click\", function CoreCommentsViewerPage_ion_button_9_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.toggleDelete());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵtemplate(2, CoreCommentsViewerPage_ion_button_9_ion_icon_2_Template, 1, 0, \"ion-icon\", 17);\n    i0.ɵɵtemplate(3, CoreCommentsViewerPage_ion_button_9_ion_icon_3_Template, 1, 0, \"ion-icon\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 3, \"core.toggledelete\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.showDelete);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showDelete);\n  }\n}\nfunction CoreCommentsViewerPage_core_empty_box_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-empty-box\", 21);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"message\", i0.ɵɵpipeBind1(1, 1, \"core.comments.nocomments\"));\n  }\n}\nfunction CoreCommentsViewerPage_ng_container_23_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"coreFormatDate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const comment_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, comment_r10.timecreated * 1000, \"strftimedayshort\"), \" \");\n  }\n}\nfunction CoreCommentsViewerPage_ng_container_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CoreCommentsViewerPage_ng_container_23_p_1_Template, 3, 4, \"p\", 22);\n    i0.ɵɵelementStart(2, \"core-message\", 23);\n    i0.ɵɵlistener(\"onDeleteMessage\", function CoreCommentsViewerPage_ng_container_23_Template_core_message_onDeleteMessage_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const comment_r10 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.deleteComment(comment_r10));\n    })(\"onUndoDeleteMessage\", function CoreCommentsViewerPage_ng_container_23_Template_core_message_onUndoDeleteMessage_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const comment_r10 = restoredCtx.$implicit;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.undoDeleteComment(comment_r10));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const comment_r10 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", comment_r10.showDate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"message\", comment_r10)(\"text\", comment_r10.content)(\"time\", comment_r10.timecreated * 1000)(\"user\", comment_r10)(\"showDelete\", ctx_r2.showDelete)(\"contextLevel\", ctx_r2.contextLevel)(\"instanceId\", ctx_r2.instanceId)(\"courseId\", ctx_r2.courseId);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    $a: a0\n  };\n};\nfunction CoreCommentsViewerPage_ion_badge_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-badge\", 25);\n    i0.ɵɵelement(1, \"ion-icon\", 26);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵpipe(4, \"lowercase\");\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(3, 1, \"core.thereisdatatosync\", i0.ɵɵpureFunction1(8, _c0, i0.ɵɵpipeBind1(4, 4, i0.ɵɵpipeBind1(5, 6, \"core.comments.comments\")))), \" \");\n  }\n}\nfunction CoreCommentsViewerPage_core_message_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"core-message\", 27);\n    i0.ɵɵlistener(\"onDeleteMessage\", function CoreCommentsViewerPage_core_message_25_Template_core_message_onDeleteMessage_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.deleteComment(ctx_r18.offlineComment));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"message\", ctx_r4.offlineComment)(\"text\", ctx_r4.offlineComment.content)(\"user\", ctx_r4.offlineComment)(\"showDelete\", ctx_r4.showDelete)(\"contextLevel\", ctx_r4.contextLevel)(\"instanceId\", ctx_r4.instanceId)(\"courseId\", ctx_r4.courseId);\n  }\n}\nfunction CoreCommentsViewerPage_ion_footer_26_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-footer\", 28)(1, \"ion-toolbar\")(2, \"core-send-message-form\", 29);\n    i0.ɵɵlistener(\"onSubmit\", function CoreCommentsViewerPage_ion_footer_26_Template_core_send_message_form_onSubmit_2_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.addComment($event));\n    });\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"sendDisabled\", ctx_r5.sending)(\"message\", ctx_r5.newComment)(\"placeholder\", i0.ɵɵpipeBind1(3, 3, \"core.comments.addcomment\"));\n  }\n}\n/**\n * Page that displays comments.\n */\nexport class CoreCommentsViewerPage {\n  constructor(route) {\n    this.route = route;\n    this.comments = [];\n    this.commentsLoaded = false;\n    this.itemId = 0;\n    this.area = '';\n    this.page = 0;\n    this.title = '';\n    this.canLoadMore = false;\n    this.loadMoreError = false;\n    this.canAddComments = false;\n    this.canDeleteComments = false;\n    this.showDelete = false;\n    this.hasOffline = false;\n    this.refreshIcon = CoreConstants.ICON_LOADING;\n    this.syncIcon = CoreConstants.ICON_LOADING;\n    this.sending = false;\n    this.newComment = '';\n    this.addDeleteCommentsAvailable = false;\n    this.viewDestroyed = false;\n    this.currentUserId = CoreSites.getCurrentSiteUserId();\n    // Refresh data if comments are synchronized automatically.\n    this.syncObserver = CoreEvents.on(CoreCommentsSyncProvider.AUTO_SYNCED, data => {\n      if (data.contextLevel == this.contextLevel && data.instanceId == this.instanceId && data.componentName == this.componentName && data.itemId == this.itemId && data.area == this.area) {\n        // Show the sync warnings.\n        this.showSyncWarnings(data.warnings);\n        // Refresh the data.\n        this.commentsLoaded = false;\n        this.refreshIcon = CoreConstants.ICON_LOADING;\n        this.syncIcon = CoreConstants.ICON_LOADING;\n        this.page = 0;\n        this.comments = [];\n        this.fetchComments(false);\n      }\n    }, CoreSites.getCurrentSiteId());\n    this.isOnline = CoreNetwork.isOnline();\n    this.onlineObserver = CoreNetwork.onChange().subscribe(() => {\n      // Execute the callback in the Angular zone, so change detection doesn't stop working.\n      NgZone.run(() => {\n        this.isOnline = CoreNetwork.isOnline();\n      });\n    });\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this.contextLevel = CoreNavigator.getRequiredRouteParam('contextLevel');\n        _this.instanceId = CoreNavigator.getRequiredRouteNumberParam('instanceId');\n        _this.componentName = CoreNavigator.getRequiredRouteParam('componentName');\n        _this.itemId = CoreNavigator.getRequiredRouteNumberParam('itemId');\n        _this.area = CoreNavigator.getRouteParam('area') || '';\n        _this.title = CoreNavigator.getRouteParam('title') || Translate.instant('core.comments.comments');\n        _this.courseId = CoreNavigator.getRouteNumberParam('courseId');\n      } catch (error) {\n        CoreDomUtils.showErrorModal(error);\n        CoreNavigator.back();\n        return;\n      }\n      // Is implicit the user can delete if he can add.\n      _this.addDeleteCommentsAvailable = yield CoreComments.isAddCommentsAvailable();\n      _this.currentUserId = CoreSites.getCurrentSiteUserId();\n      _this.commentsLoaded = false;\n      yield _this.fetchComments(true);\n    })();\n  }\n  /**\n   * Fetches the comments.\n   *\n   * @param sync When to resync comments.\n   * @param showErrors When to display errors or not.\n   * @returns Resolved when done.\n   */\n  fetchComments(sync, showErrors = false) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.loadMoreError = false;\n      if (sync) {\n        yield CoreUtils.ignoreErrors(_this2.syncComments(showErrors));\n      }\n      try {\n        // Get comments data.\n        const commentsResponse = yield CoreComments.getComments(_this2.contextLevel, _this2.instanceId, _this2.componentName, _this2.itemId, _this2.area, _this2.page);\n        _this2.canAddComments = _this2.addDeleteCommentsAvailable && !!commentsResponse.canpost;\n        let comments = commentsResponse.comments.sort((a, b) => a.timecreated - b.timecreated);\n        if (commentsResponse.count !== undefined) {\n          _this2.canLoadMore = _this2.comments.length + comments.length < commentsResponse.count;\n        } else {\n          // Old style.\n          _this2.canLoadMore = commentsResponse.comments.length > 0 && commentsResponse.comments.length >= CoreCommentsProvider.pageSize;\n        }\n        comments = yield Promise.all(comments.map(comment => _this2.loadCommentProfile(comment)));\n        _this2.comments = comments.concat(_this2.comments);\n        _this2.comments.forEach((comment, index) => _this2.calculateCommentData(comment, _this2.comments[index - 1]));\n        _this2.canDeleteComments = _this2.addDeleteCommentsAvailable && (_this2.hasOffline || _this2.comments.some(comment => !!comment.delete));\n        yield _this2.loadOfflineData();\n      } catch (error) {\n        _this2.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\n        if (error && _this2.componentName == 'assignsubmission_comments') {\n          CoreDomUtils.showAlertTranslated('core.notice', 'core.comments.commentsnotworking');\n        } else {\n          CoreDomUtils.showErrorModalDefault(error, Translate.instant('core.error') + ': get_comments');\n        }\n      } finally {\n        _this2.commentsLoaded = true;\n        _this2.refreshIcon = CoreConstants.ICON_REFRESH;\n        _this2.syncIcon = CoreConstants.ICON_SYNC;\n        if (_this2.page == 0) {\n          _this2.scrollToBottom();\n        }\n      }\n    })();\n  }\n  /**\n   * Calculate some comment data.\n   *\n   * @param comment Comment.\n   * @param prevComment Previous comment.\n   */\n  calculateCommentData(comment, prevComment) {\n    var _comment$delete;\n    comment.showDate = this.showDate(comment, prevComment);\n    comment.showUserData = this.showUserData(comment, prevComment);\n    comment.showTail = this.showTail(comment, prevComment);\n    comment.delete = (_comment$delete = comment.delete) !== null && _comment$delete !== void 0 ? _comment$delete : false; // If this property is undefined, core-message assumes comment can be deleted.\n  }\n  /**\n   * Function to load more commemts.\n   *\n   * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n   * @returns Resolved when done.\n   */\n  loadPrevious(infiniteComplete) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.page++;\n      _this3.canLoadMore = false;\n      try {\n        yield _this3.fetchComments(true);\n      } finally {\n        infiniteComplete && infiniteComplete();\n      }\n    })();\n  }\n  /**\n   * Refresh the comments.\n   *\n   * @param showErrors Whether to display errors or not.\n   * @param refresher Refresher.\n   * @returns Resolved when done.\n   */\n  refreshComments(showErrors, refresher) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.commentsLoaded = false;\n      _this4.refreshIcon = CoreConstants.ICON_LOADING;\n      _this4.syncIcon = CoreConstants.ICON_LOADING;\n      yield CoreUtils.ignoreErrors(_this4.invalidateComments());\n      _this4.page = 0;\n      _this4.comments = [];\n      try {\n        yield _this4.fetchComments(true, showErrors);\n      } finally {\n        refresher === null || refresher === void 0 || refresher.complete();\n      }\n    })();\n  }\n  /**\n   * Show sync warnings if any.\n   *\n   * @param warnings the warnings\n   */\n  showSyncWarnings(warnings) {\n    const message = CoreTextUtils.buildMessage(warnings);\n    if (message) {\n      CoreDomUtils.showAlert(undefined, message);\n    }\n  }\n  /**\n   * Tries to synchronize comments.\n   *\n   * @param showErrors Whether to display errors or not.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  syncComments(showErrors) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield CoreCommentsSync.syncComments(_this5.contextLevel, _this5.instanceId, _this5.componentName, _this5.itemId, _this5.area);\n        _this5.showSyncWarnings((result === null || result === void 0 ? void 0 : result.warnings) || []);\n      } catch (error) {\n        if (showErrors) {\n          CoreDomUtils.showErrorModalDefault(error, 'core.errorsync', true);\n        }\n        throw new CoreError(error);\n      }\n    })();\n  }\n  /**\n   * Send the comment or store it offline.\n   *\n   * @param text Comment text to add.\n   */\n  addComment(text) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      CoreApp.closeKeyboard();\n      const loadingModal = yield CoreDomUtils.showModalLoading('core.sending', true);\n      // Freeze the add comment button.\n      _this6.sending = true;\n      try {\n        const commentsResponse = yield CoreComments.addComment(text, _this6.contextLevel, _this6.instanceId, _this6.componentName, _this6.itemId, _this6.area);\n        CoreDomUtils.showToast(commentsResponse ? 'core.comments.eventcommentcreated' : 'core.datastoredoffline', true, ToastDuration.LONG);\n        if (commentsResponse) {\n          _this6.invalidateComments();\n          const addedComment = yield _this6.loadCommentProfile(commentsResponse);\n          _this6.calculateCommentData(addedComment, _this6.comments[_this6.comments.length - 1]);\n          // Add the comment to the top.\n          _this6.comments = _this6.comments.concat([addedComment]);\n          _this6.canDeleteComments = _this6.addDeleteCommentsAvailable;\n          CoreEvents.trigger(CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT, {\n            contextLevel: _this6.contextLevel,\n            instanceId: _this6.instanceId,\n            component: _this6.componentName,\n            itemId: _this6.itemId,\n            area: _this6.area,\n            countChange: 1\n          }, CoreSites.getCurrentSiteId());\n          _this6.refreshInBackground();\n        } else if (commentsResponse === false) {\n          // Comments added in offline mode.\n          yield _this6.loadOfflineData();\n        }\n      } catch (error) {\n        CoreDomUtils.showErrorModal(error);\n      } finally {\n        loadingModal.dismiss();\n        _this6.sending = false;\n        // New comments.\n        _this6.scrollToBottom();\n      }\n    })();\n  }\n  /**\n   * Delete a comment.\n   *\n   * @param comment Comment to delete.\n   */\n  deleteComment(comment) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const modified = 'lastmodified' in comment ? comment.lastmodified : comment.timecreated;\n      const time = CoreTimeUtils.userDate(modified * 1000, 'core.strftimerecentfull');\n      const deleteComment = {\n        contextlevel: _this7.contextLevel,\n        instanceid: _this7.instanceId,\n        component: _this7.componentName,\n        itemid: _this7.itemId,\n        area: _this7.area,\n        content: comment.content,\n        id: 'id' in comment ? comment.id : undefined\n      };\n      try {\n        yield CoreDomUtils.showDeleteConfirm('core.comments.deletecommentbyon', {\n          $a: {\n            user: comment.fullname || '',\n            time: time\n          }\n        });\n      } catch (_unused) {\n        // User cancelled, nothing to do.\n        return;\n      }\n      try {\n        const deletedOnline = yield CoreComments.deleteComment(deleteComment);\n        _this7.showDelete = false;\n        if (deletedOnline && 'id' in comment) {\n          const index = _this7.comments.findIndex(commentinList => commentinList.id == comment.id);\n          if (index >= 0) {\n            _this7.comments.splice(index, 1);\n            CoreEvents.trigger(CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT, {\n              contextLevel: _this7.contextLevel,\n              instanceId: _this7.instanceId,\n              component: _this7.componentName,\n              itemId: _this7.itemId,\n              area: _this7.area,\n              countChange: -1\n            }, CoreSites.getCurrentSiteId());\n            _this7.refreshInBackground();\n          }\n        } else {\n          _this7.loadOfflineData();\n        }\n        _this7.invalidateComments();\n        CoreDomUtils.showToast('core.comments.eventcommentdeleted', true, ToastDuration.LONG);\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Delete comment failed.');\n      }\n    })();\n  }\n  /**\n   * Invalidate comments.\n   *\n   * @returns Resolved when done.\n   */\n  invalidateComments() {\n    return CoreComments.invalidateCommentsData(this.contextLevel, this.instanceId, this.componentName, this.itemId, this.area);\n  }\n  /**\n   * Loads the profile info onto the comment object.\n   *\n   * @param comment Comment object.\n   * @returns Promise resolved with modified comment when done.\n   */\n  loadCommentProfile(comment) {\n    return _asyncToGenerator(function* () {\n      if (!comment.userid) {\n        return comment;\n      }\n      try {\n        // Get the user profile image.\n        const user = yield CoreUser.getProfile(comment.userid, undefined, true);\n        comment.profileimageurl = user.profileimageurl;\n        comment.fullname = user.fullname;\n      } catch (_unused2) {\n        // Ignore errors.\n      }\n      return comment;\n    })();\n  }\n  /**\n   * Check if the user info should be displayed for the current message.\n   * User data is only displayed if the previous message was from another user.\n   *\n   * @param comment Comment object.\n   * @param prevComment Previous comment object.\n   * @returns Whether user data should be shown.\n   */\n  showUserData(comment, prevComment) {\n    return comment.userid != this.currentUserId && (!prevComment || prevComment.userid != comment.userid || !!comment.showDate);\n  }\n  /**\n   * Check if a css tail should be shown.\n   *\n   * @param comment Comment object.\n   * @param nextComment Previous comment object.\n   * @returns Whether user data should be shown.\n   */\n  showTail(comment, nextComment) {\n    return !nextComment || nextComment.userid != comment.userid || !!nextComment.showDate;\n  }\n  /**\n   * Check if the date should be displayed between messages (when the day changes at midnight for example).\n   *\n   * @param comment Comment object.\n   * @param prevComment Previous comment object.\n   * @returns True if messages are from diferent days, false othetwise.\n   */\n  showDate(comment, prevComment) {\n    if (!prevComment) {\n      return true;\n    }\n    // Check if day has changed.\n    return !moment(comment.timecreated * 1000).isSame(prevComment.timecreated * 1000, 'day');\n  }\n  /**\n   * Load offline comments.\n   *\n   * @returns Promise resolved when done.\n   */\n  loadOfflineData() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      let hasDeletedComments = false;\n      // Load the only offline comment allowed if any.\n      promises.push(CoreCommentsOffline.getComment(_this8.contextLevel, _this8.instanceId, _this8.componentName, _this8.itemId, _this8.area).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (offlineComment) {\n          _this8.offlineComment = offlineComment;\n          if (!_this8.offlineComment) {\n            return;\n          }\n          if (_this8.newComment == '') {\n            _this8.newComment = _this8.offlineComment.content;\n          }\n          _this8.offlineComment.userid = _this8.currentUserId;\n          _this8.offlineComment.pending = true;\n          return;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      // Load deleted comments offline.\n      promises.push(CoreCommentsOffline.getDeletedComments(_this8.contextLevel, _this8.instanceId, _this8.componentName, _this8.itemId, _this8.area).then(deletedComments => {\n        hasDeletedComments = deletedComments && deletedComments.length > 0;\n        if (hasDeletedComments) {\n          deletedComments.forEach(deletedComment => {\n            const comment = _this8.comments.find(comment => comment.id == deletedComment.commentid);\n            if (comment) {\n              comment.deleted = !!deletedComment.deleted;\n            }\n          });\n        }\n        return;\n      }));\n      yield Promise.all(promises);\n      _this8.hasOffline = !!_this8.offlineComment || hasDeletedComments;\n    })();\n  }\n  /**\n   * Restore a comment.\n   *\n   * @param comment Comment to delete.\n   */\n  undoDeleteComment(comment) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreCommentsOffline.undoDeleteComment(comment.id);\n      comment.deleted = false;\n      _this9.showDelete = false;\n    })();\n  }\n  /**\n   * Scroll bottom when render has finished.\n   */\n  scrollToBottom() {\n    // Need a timeout to leave time to the view to be rendered.\n    setTimeout(() => {\n      if (!this.viewDestroyed) {\n        var _this$content;\n        (_this$content = this.content) === null || _this$content === void 0 || _this$content.scrollToBottom();\n      }\n    }, 100);\n  }\n  /**\n   * Toggle delete.\n   */\n  toggleDelete() {\n    this.showDelete = !this.showDelete;\n  }\n  /**\n   * Refresh cached data in background.\n   */\n  refreshInBackground() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreUtils.ignoreErrors(_this10.invalidateComments());\n      const promises = [];\n      for (let i = 0; i <= _this10.page; i++) {\n        promises.push(CoreComments.getComments(_this10.contextLevel, _this10.instanceId, _this10.componentName, _this10.itemId, _this10.area, i));\n      }\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$syncObserver;\n    (_this$syncObserver = this.syncObserver) === null || _this$syncObserver === void 0 || _this$syncObserver.off();\n    this.onlineObserver.unsubscribe();\n    this.viewDestroyed = true;\n  }\n}\n_class = CoreCommentsViewerPage;\n_class.ɵfac = function CoreCommentsViewerPage_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-core-comments-viewer\"]],\n  viewQuery: function CoreCommentsViewerPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(IonContent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n    }\n  },\n  decls: 27,\n  vars: 34,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [3, \"text\", \"contextLevel\", \"contextInstanceId\", \"courseId\"], [\"slot\", \"end\"], [\"slot\", \"end\", \"fill\", \"clear\", 3, \"click\", 4, \"ngIf\"], [3, \"hidden\", \"priority\", \"content\", \"iconAction\", \"closeOnClick\", \"action\"], [\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [3, \"hideUntil\"], [\"icon\", \"fas-comments\", 3, \"message\", 4, \"ngIf\"], [\"position\", \"top\", 3, \"enabled\", \"error\", \"action\"], [1, \"addon-messages-discussion-container\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"ion-text-wrap\", \"color\", \"info\", 4, \"ngIf\"], [3, \"message\", \"text\", \"user\", \"showDelete\", \"contextLevel\", \"instanceId\", \"courseId\", \"onDeleteMessage\", 4, \"ngIf\"], [\"class\", \"footer-adjustable\", 4, \"ngIf\"], [\"slot\", \"end\", \"fill\", \"clear\", 3, \"click\"], [\"name\", \"fas-pen\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"name\", \"fas-check\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"name\", \"fas-pen\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [\"name\", \"fas-check\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [\"icon\", \"fas-comments\", 3, \"message\"], [\"class\", \"ion-text-center addon-messages-date\", 4, \"ngIf\"], [3, \"message\", \"text\", \"time\", \"user\", \"showDelete\", \"contextLevel\", \"instanceId\", \"courseId\", \"onDeleteMessage\", \"onUndoDeleteMessage\"], [1, \"ion-text-center\", \"addon-messages-date\"], [\"color\", \"info\", 1, \"ion-text-wrap\"], [\"name\", \"fas-triangle-exclamation\", \"aria-hidden\", \"true\"], [3, \"message\", \"text\", \"user\", \"showDelete\", \"contextLevel\", \"instanceId\", \"courseId\", \"onDeleteMessage\"], [1, \"footer-adjustable\"], [3, \"sendDisabled\", \"message\", \"placeholder\", \"onSubmit\"]],\n  template: function CoreCommentsViewerPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵelement(7, \"core-format-text\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"ion-buttons\", 3);\n      i0.ɵɵtemplate(9, CoreCommentsViewerPage_ion_button_9_Template, 4, 5, \"ion-button\", 4);\n      i0.ɵɵelementStart(10, \"core-context-menu\")(11, \"core-context-menu-item\", 5);\n      i0.ɵɵlistener(\"action\", function CoreCommentsViewerPage_Template_core_context_menu_item_action_11_listener() {\n        return ctx.refreshComments(false);\n      });\n      i0.ɵɵpipe(12, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"core-context-menu-item\", 5);\n      i0.ɵɵlistener(\"action\", function CoreCommentsViewerPage_Template_core_context_menu_item_action_13_listener() {\n        return ctx.refreshComments(true);\n      });\n      i0.ɵɵpipe(14, \"translate\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(15, \"ion-content\")(16, \"ion-refresher\", 6);\n      i0.ɵɵlistener(\"ionRefresh\", function CoreCommentsViewerPage_Template_ion_refresher_ionRefresh_16_listener($event) {\n        return ctx.refreshComments(false, $event.target);\n      });\n      i0.ɵɵelement(17, \"ion-refresher-content\", 7);\n      i0.ɵɵpipe(18, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"core-loading\", 8);\n      i0.ɵɵtemplate(20, CoreCommentsViewerPage_core_empty_box_20_Template, 2, 3, \"core-empty-box\", 9);\n      i0.ɵɵelementStart(21, \"core-infinite-loading\", 10);\n      i0.ɵɵlistener(\"action\", function CoreCommentsViewerPage_Template_core_infinite_loading_action_21_listener($event) {\n        return ctx.loadPrevious($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"ion-list\", 11);\n      i0.ɵɵtemplate(23, CoreCommentsViewerPage_ng_container_23_Template, 3, 9, \"ng-container\", 12);\n      i0.ɵɵtemplate(24, CoreCommentsViewerPage_ion_badge_24_Template, 6, 10, \"ion-badge\", 13);\n      i0.ɵɵtemplate(25, CoreCommentsViewerPage_core_message_25_Template, 1, 7, \"core-message\", 14);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(26, CoreCommentsViewerPage_ion_footer_26_Template, 4, 5, \"ion-footer\", 15);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 26, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"text\", ctx.title)(\"contextLevel\", ctx.contextLevel)(\"contextInstanceId\", ctx.instanceId)(\"courseId\", ctx.courseId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.canDeleteComments);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hidden\", !(ctx.commentsLoaded && !ctx.hasOffline))(\"priority\", 100)(\"content\", i0.ɵɵpipeBind1(12, 28, \"core.refresh\"))(\"iconAction\", ctx.refreshIcon)(\"closeOnClick\", true);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hidden\", !(ctx.commentsLoaded && ctx.hasOffline && ctx.isOnline))(\"priority\", 100)(\"content\", i0.ɵɵpipeBind1(14, 30, \"core.settings.synchronizenow\"))(\"iconAction\", ctx.syncIcon)(\"closeOnClick\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", !ctx.commentsLoaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(18, 32, \"core.pulltorefresh\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.commentsLoaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.comments == null ? null : ctx.comments.length) && !ctx.offlineComment);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"enabled\", ctx.canLoadMore)(\"error\", ctx.loadMoreError);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.comments);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasOffline);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasOffline && ctx.offlineComment);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.commentsLoaded && ctx.canAddComments);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.CoreContextMenuComponent, i4.CoreContextMenuItemComponent, i5.CoreEmptyBoxComponent, i6.CoreInfiniteLoadingComponent, i7.CoreLoadingComponent, i8.CoreMessageComponent, i9.CoreSendMessageFormComponent, i10.CoreFaIconDirective, i11.CoreFormatTextDirective, i12.CoreContentDirective, i13.CoreUpdateNonReactiveAttributesDirective, i14.IonBadge, i14.IonButton, i14.IonButtons, i14.IonContent, i14.IonFooter, i14.IonHeader, i14.IonIcon, i14.IonList, i14.IonRefresher, i14.IonRefresherContent, i14.IonTitle, i14.IonToolbar, i14.IonBackButton, i2.LowerCasePipe, i15.CoreFormatDatePipe, i16.TranslatePipe],\n  styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n.ios[_nghost-%COMP%]   ion-footer[_ngcontent-%COMP%]   .toolbar[_ngcontent-%COMP%]:last-child, .ios   [_nghost-%COMP%]   ion-footer[_ngcontent-%COMP%]   .toolbar[_ngcontent-%COMP%]:last-child {\\n  padding-bottom: 4px;\\n  min-height: 0;\\n}\\n\\nion-content[_ngcontent-%COMP%] {\\n  --content-background: var(--background-alternative);\\n  --background: var(--content-background);\\n}\\nion-content[_ngcontent-%COMP%]::part(scroll) {\\n  padding-bottom: 0 !important;\\n}\\n\\n.addon-messages-discussion-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  padding-bottom: 16px !important;\\n  background: var(--content-background);\\n}\\n\\n.addon-messages-date[_ngcontent-%COMP%] {\\n  font-weight: normal;\\n  font-size: 0.9rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"ion-badge[_ngcontent-%COMP%] {\\n  margin: 8px auto;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9jb3JlL2ZlYXR1cmVzL2NvbW1lbnRzL3BhZ2VzL3ZpZXdlci92aWV3ZXIuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGdCQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tYmFkZ2Uge1xuICAgIG1hcmdpbjogOHB4IGF1dG87XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"],\n  data: {\n    animation: [CoreAnimations.SLIDE_IN_OUT]\n  }\n});","map":{"version":3,"names":["CoreEvents","CoreSites","CoreComments","CoreCommentsProvider","CoreCommentsSync","CoreCommentsSyncProvider","IonContent","CoreConstants","CoreNavigator","NgZone","Translate","CoreUtils","CoreDomUtils","ToastDuration","CoreUser","CoreTextUtils","CoreError","CoreCommentsOffline","CoreTimeUtils","CoreApp","CoreNetwork","moment","CoreAnimations","i0","ɵɵelement","ɵɵelementStart","ɵɵlistener","CoreCommentsViewerPage_ion_button_9_Template_ion_button_click_0_listener","ɵɵrestoreView","_r9","ctx_r8","ɵɵnextContext","ɵɵresetView","toggleDelete","ɵɵtemplate","CoreCommentsViewerPage_ion_button_9_ion_icon_2_Template","CoreCommentsViewerPage_ion_button_9_ion_icon_3_Template","ɵɵelementEnd","ɵɵattribute","ɵɵpipeBind1","ɵɵadvance","ɵɵproperty","ctx_r0","showDelete","ɵɵtext","ɵɵtextInterpolate1","ɵɵpipeBind2","comment_r10","timecreated","ɵɵelementContainerStart","CoreCommentsViewerPage_ng_container_23_p_1_Template","CoreCommentsViewerPage_ng_container_23_Template_core_message_onDeleteMessage_2_listener","restoredCtx","_r16","$implicit","ctx_r15","deleteComment","CoreCommentsViewerPage_ng_container_23_Template_core_message_onUndoDeleteMessage_2_listener","ctx_r17","undoDeleteComment","ɵɵelementContainerEnd","showDate","content","ctx_r2","contextLevel","instanceId","courseId","ɵɵpureFunction1","_c0","CoreCommentsViewerPage_core_message_25_Template_core_message_onDeleteMessage_0_listener","_r19","ctx_r18","offlineComment","ctx_r4","CoreCommentsViewerPage_ion_footer_26_Template_core_send_message_form_onSubmit_2_listener","$event","_r21","ctx_r20","addComment","ctx_r5","sending","newComment","CoreCommentsViewerPage","constructor","route","comments","commentsLoaded","itemId","area","page","title","canLoadMore","loadMoreError","canAddComments","canDeleteComments","hasOffline","refreshIcon","ICON_LOADING","syncIcon","addDeleteCommentsAvailable","viewDestroyed","currentUserId","getCurrentSiteUserId","syncObserver","on","AUTO_SYNCED","data","componentName","showSyncWarnings","warnings","fetchComments","getCurrentSiteId","isOnline","onlineObserver","onChange","subscribe","run","ngOnInit","_this","_asyncToGenerator","getRequiredRouteParam","getRequiredRouteNumberParam","getRouteParam","instant","getRouteNumberParam","error","showErrorModal","back","isAddCommentsAvailable","sync","showErrors","_this2","ignoreErrors","syncComments","commentsResponse","getComments","canpost","sort","a","b","count","undefined","length","pageSize","Promise","all","map","comment","loadCommentProfile","concat","forEach","index","calculateCommentData","some","delete","loadOfflineData","showAlertTranslated","showErrorModalDefault","ICON_REFRESH","ICON_SYNC","scrollToBottom","prevComment","_comment$delete","showUserData","showTail","loadPrevious","infiniteComplete","_this3","refreshComments","refresher","_this4","invalidateComments","complete","message","buildMessage","showAlert","_this5","result","text","_this6","closeKeyboard","loadingModal","showModalLoading","showToast","LONG","addedComment","trigger","COMMENTS_COUNT_CHANGED_EVENT","component","countChange","refreshInBackground","dismiss","_this7","modified","lastmodified","time","userDate","contextlevel","instanceid","itemid","id","showDeleteConfirm","$a","user","fullname","_unused","deletedOnline","findIndex","commentinList","splice","invalidateCommentsData","userid","getProfile","profileimageurl","_unused2","nextComment","isSame","_this8","promises","hasDeletedComments","push","getComment","then","_ref","pending","_x","apply","arguments","getDeletedComments","deletedComments","deletedComment","find","commentid","deleted","_this9","setTimeout","_this$content","_this10","i","ngOnDestroy","_this$syncObserver","off","unsubscribe","ɵɵdirectiveInject","i1","ActivatedRoute","selectors","viewQuery","CoreCommentsViewerPage_Query","rf","ctx","CoreCommentsViewerPage_ion_button_9_Template","CoreCommentsViewerPage_Template_core_context_menu_item_action_11_listener","CoreCommentsViewerPage_Template_core_context_menu_item_action_13_listener","CoreCommentsViewerPage_Template_ion_refresher_ionRefresh_16_listener","target","CoreCommentsViewerPage_core_empty_box_20_Template","CoreCommentsViewerPage_Template_core_infinite_loading_action_21_listener","CoreCommentsViewerPage_ng_container_23_Template","CoreCommentsViewerPage_ion_badge_24_Template","CoreCommentsViewerPage_core_message_25_Template","CoreCommentsViewerPage_ion_footer_26_Template","ɵɵpropertyInterpolate","SLIDE_IN_OUT"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/comments/pages/viewer/viewer.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/comments/pages/viewer/viewer.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreSites } from '@services/sites';\nimport {\n    CoreComments,\n    CoreCommentsCommentBasicData,\n    CoreCommentsData,\n    CoreCommentsProvider,\n} from '@features/comments/services/comments';\nimport {\n    CoreCommentsSync,\n    CoreCommentsSyncProvider,\n} from '@features/comments/services/comments-sync';\nimport { IonContent } from '@ionic/angular';\nimport { ContextLevel, CoreConstants } from '@/core/constants';\nimport { CoreNavigator } from '@services/navigator';\nimport { NgZone, Translate } from '@singletons';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDomUtils, ToastDuration } from '@services/utils/dom';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCommentsOffline } from '@features/comments/services/comments-offline';\nimport { CoreCommentsDBRecord } from '@features/comments/services/database/comments';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreApp } from '@services/app';\nimport { CoreNetwork } from '@services/network';\nimport moment from 'moment-timezone';\nimport { Subscription } from 'rxjs';\nimport { CoreAnimations } from '@components/animations';\n\n/**\n * Page that displays comments.\n */\n@Component({\n    selector: 'page-core-comments-viewer',\n    templateUrl: 'viewer.html',\n    animations: [CoreAnimations.SLIDE_IN_OUT],\n    styleUrls: ['../../../../../theme/components/discussion.scss', 'viewer.scss'],\n})\nexport class CoreCommentsViewerPage implements OnInit, OnDestroy {\n\n    @ViewChild(IonContent) content?: IonContent;\n\n    comments: CoreCommentsDataToDisplay[] = [];\n    commentsLoaded = false;\n    contextLevel!: ContextLevel;\n    instanceId!: number;\n    componentName!: string;\n    itemId = 0;\n    area = '';\n    page = 0;\n    title = '';\n    courseId?: number;\n    canLoadMore = false;\n    loadMoreError = false;\n    canAddComments = false;\n    canDeleteComments = false;\n    showDelete = false;\n    hasOffline = false;\n    refreshIcon = CoreConstants.ICON_LOADING;\n    syncIcon = CoreConstants.ICON_LOADING;\n    offlineComment?: CoreCommentsOfflineWithUser & { pending?: boolean };\n    currentUserId: number;\n    sending = false;\n    newComment = '';\n    isOnline: boolean;\n\n    protected addDeleteCommentsAvailable = false;\n    protected syncObserver?: CoreEventObserver;\n    protected onlineObserver: Subscription;\n    protected viewDestroyed = false;\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n\n        // Refresh data if comments are synchronized automatically.\n        this.syncObserver = CoreEvents.on(CoreCommentsSyncProvider.AUTO_SYNCED, (data) => {\n            if (data.contextLevel == this.contextLevel && data.instanceId == this.instanceId &&\n                    data.componentName == this.componentName && data.itemId == this.itemId && data.area == this.area) {\n                // Show the sync warnings.\n                this.showSyncWarnings(data.warnings);\n\n                // Refresh the data.\n                this.commentsLoaded = false;\n                this.refreshIcon = CoreConstants.ICON_LOADING;\n                this.syncIcon = CoreConstants.ICON_LOADING;\n\n                this.page = 0;\n                this.comments = [];\n                this.fetchComments(false);\n            }\n        }, CoreSites.getCurrentSiteId());\n\n        this.isOnline = CoreNetwork.isOnline();\n        this.onlineObserver = CoreNetwork.onChange().subscribe(() => {\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\n            NgZone.run(() => {\n                this.isOnline = CoreNetwork.isOnline();\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            this.contextLevel = CoreNavigator.getRequiredRouteParam<ContextLevel>('contextLevel');\n            this.instanceId = CoreNavigator.getRequiredRouteNumberParam('instanceId');\n            this.componentName = CoreNavigator.getRequiredRouteParam<string>('componentName');\n            this.itemId = CoreNavigator.getRequiredRouteNumberParam('itemId');\n            this.area = CoreNavigator.getRouteParam('area') || '';\n            this.title = CoreNavigator.getRouteParam('title') ||\n                Translate.instant('core.comments.comments');\n            this.courseId = CoreNavigator.getRouteNumberParam('courseId');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        // Is implicit the user can delete if he can add.\n        this.addDeleteCommentsAvailable = await CoreComments.isAddCommentsAvailable();\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n\n        this.commentsLoaded = false;\n\n        await this.fetchComments(true);\n    }\n\n    /**\n     * Fetches the comments.\n     *\n     * @param sync When to resync comments.\n     * @param showErrors When to display errors or not.\n     * @returns Resolved when done.\n     */\n    protected async fetchComments(sync: boolean, showErrors = false): Promise<void> {\n        this.loadMoreError = false;\n\n        if (sync) {\n            await CoreUtils.ignoreErrors(this.syncComments(showErrors));\n        }\n\n        try {\n            // Get comments data.\n            const commentsResponse = await CoreComments.getComments(\n                this.contextLevel,\n                this.instanceId,\n                this.componentName,\n                this.itemId,\n                this.area,\n                this.page,\n            );\n            this.canAddComments = this.addDeleteCommentsAvailable && !!commentsResponse.canpost;\n\n            let comments = commentsResponse.comments.sort((a, b) => a.timecreated - b.timecreated);\n            if (commentsResponse.count !== undefined) {\n                this.canLoadMore = (this.comments.length + comments.length) < commentsResponse.count;\n            } else {\n                // Old style.\n                this.canLoadMore = commentsResponse.comments.length > 0 &&\n                    commentsResponse.comments.length >= CoreCommentsProvider.pageSize;\n            }\n\n            comments = await Promise.all(comments.map((comment) => this.loadCommentProfile(comment)));\n\n            this.comments = comments.concat(this.comments);\n\n            this.comments.forEach((comment, index) => this.calculateCommentData(comment, this.comments[index - 1]));\n\n            this.canDeleteComments = this.addDeleteCommentsAvailable &&\n                (this.hasOffline || this.comments.some((comment) => !!comment.delete));\n\n            await this.loadOfflineData();\n        } catch (error) {\n            this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\n            if (error && this.componentName == 'assignsubmission_comments') {\n                CoreDomUtils.showAlertTranslated('core.notice', 'core.comments.commentsnotworking');\n            } else {\n                CoreDomUtils.showErrorModalDefault(error, Translate.instant('core.error') + ': get_comments');\n            }\n        } finally {\n            this.commentsLoaded = true;\n            this.refreshIcon = CoreConstants.ICON_REFRESH;\n            this.syncIcon = CoreConstants.ICON_SYNC;\n\n            if (this.page == 0) {\n                this.scrollToBottom();\n            }\n        }\n\n    }\n\n    /**\n     * Calculate some comment data.\n     *\n     * @param comment Comment.\n     * @param prevComment Previous comment.\n     */\n    protected calculateCommentData(comment: CoreCommentsDataToDisplay, prevComment?: CoreCommentsDataToDisplay): void {\n        comment.showDate = this.showDate(comment, prevComment);\n        comment.showUserData = this.showUserData(comment, prevComment);\n        comment.showTail = this.showTail(comment, prevComment);\n        comment.delete = comment.delete ?? false; // If this property is undefined, core-message assumes comment can be deleted.\n    }\n\n    /**\n     * Function to load more commemts.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @returns Resolved when done.\n     */\n    async loadPrevious(infiniteComplete?: () => void): Promise<void> {\n        this.page++;\n        this.canLoadMore = false;\n\n        try {\n            await this.fetchComments(true);\n        } finally {\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Refresh the comments.\n     *\n     * @param showErrors Whether to display errors or not.\n     * @param refresher Refresher.\n     * @returns Resolved when done.\n     */\n    async refreshComments(showErrors: boolean, refresher?: HTMLIonRefresherElement): Promise<void> {\n        this.commentsLoaded = false;\n        this.refreshIcon = CoreConstants.ICON_LOADING;\n        this.syncIcon = CoreConstants.ICON_LOADING;\n\n        await CoreUtils.ignoreErrors(this.invalidateComments());\n\n        this.page = 0;\n        this.comments = [];\n\n        try {\n            await this.fetchComments(true, showErrors);\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Show sync warnings if any.\n     *\n     * @param warnings the warnings\n     */\n    private showSyncWarnings(warnings: string[]): void {\n        const message = CoreTextUtils.buildMessage(warnings);\n        if (message) {\n            CoreDomUtils.showAlert(undefined, message);\n        }\n    }\n\n    /**\n     * Tries to synchronize comments.\n     *\n     * @param showErrors Whether to display errors or not.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    private async syncComments(showErrors: boolean): Promise<void> {\n        try {\n            const result = await CoreCommentsSync.syncComments(\n                this.contextLevel,\n                this.instanceId,\n                this.componentName,\n                this.itemId,\n                this.area,\n            );\n            this.showSyncWarnings(result?.warnings || []);\n        } catch (error) {\n            if (showErrors) {\n                CoreDomUtils.showErrorModalDefault(error, 'core.errorsync', true);\n            }\n\n            throw new CoreError(error);\n        }\n    }\n\n    /**\n     * Send the comment or store it offline.\n     *\n     * @param text Comment text to add.\n     */\n    async addComment(text: string): Promise<void> {\n        CoreApp.closeKeyboard();\n        const loadingModal = await CoreDomUtils.showModalLoading('core.sending', true);\n        // Freeze the add comment button.\n        this.sending = true;\n        try {\n            const commentsResponse = await CoreComments.addComment(\n                text,\n                this.contextLevel,\n                this.instanceId,\n                this.componentName,\n                this.itemId,\n                this.area,\n            );\n\n            CoreDomUtils.showToast(\n                commentsResponse ? 'core.comments.eventcommentcreated' : 'core.datastoredoffline',\n                true,\n                ToastDuration.LONG,\n            );\n\n            if (commentsResponse) {\n                this.invalidateComments();\n\n                const addedComment = await this.loadCommentProfile(commentsResponse);\n                this.calculateCommentData(addedComment, this.comments[this.comments.length - 1]);\n\n                // Add the comment to the top.\n                this.comments = this.comments.concat([addedComment]);\n                this.canDeleteComments = this.addDeleteCommentsAvailable;\n\n                CoreEvents.trigger(CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT, {\n                    contextLevel: this.contextLevel,\n                    instanceId: this.instanceId,\n                    component: this.componentName,\n                    itemId: this.itemId,\n                    area: this.area,\n                    countChange: 1,\n                }, CoreSites.getCurrentSiteId());\n\n                this.refreshInBackground();\n\n            } else if (commentsResponse === false) {\n                // Comments added in offline mode.\n                await this.loadOfflineData();\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n        } finally {\n            loadingModal.dismiss();\n            this.sending = false;\n\n            // New comments.\n            this.scrollToBottom();\n        }\n    }\n\n    /**\n     * Delete a comment.\n     *\n     * @param comment Comment to delete.\n     */\n    async deleteComment(comment: CoreCommentsDataToDisplay | CoreCommentsOfflineWithUser): Promise<void> {\n        const modified = 'lastmodified' in comment\n            ? comment.lastmodified\n            : comment.timecreated;\n        const time = CoreTimeUtils.userDate(\n            modified * 1000,\n            'core.strftimerecentfull',\n        );\n\n        const deleteComment: CoreCommentsCommentBasicData = {\n            contextlevel: this.contextLevel,\n            instanceid: this.instanceId,\n            component: this.componentName,\n            itemid: this.itemId,\n            area: this.area,\n            content: comment.content,\n            id: 'id' in comment ? comment.id : undefined,\n        };\n\n        try {\n            await CoreDomUtils.showDeleteConfirm('core.comments.deletecommentbyon', {\n                $a:\n                    { user: comment.fullname || '', time: time },\n            });\n        } catch {\n            // User cancelled, nothing to do.\n            return;\n        }\n\n        try {\n            const deletedOnline = await CoreComments.deleteComment(deleteComment);\n            this.showDelete = false;\n\n            if (deletedOnline && 'id' in comment) {\n                const index = this.comments.findIndex((commentinList) => commentinList.id == comment.id);\n\n                if (index >= 0) {\n                    this.comments.splice(index, 1);\n\n                    CoreEvents.trigger(CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT, {\n                        contextLevel: this.contextLevel,\n                        instanceId: this.instanceId,\n                        component: this.componentName,\n                        itemId: this.itemId,\n                        area: this.area,\n                        countChange: -1,\n                    }, CoreSites.getCurrentSiteId());\n\n                    this.refreshInBackground();\n                }\n            } else {\n                this.loadOfflineData();\n            }\n\n            this.invalidateComments();\n\n            CoreDomUtils.showToast('core.comments.eventcommentdeleted', true, ToastDuration.LONG);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Delete comment failed.');\n        }\n    }\n\n    /**\n     * Invalidate comments.\n     *\n     * @returns Resolved when done.\n     */\n    protected invalidateComments(): Promise<void> {\n        return CoreComments.invalidateCommentsData(\n            this.contextLevel,\n            this.instanceId,\n            this.componentName,\n            this.itemId,\n            this.area,\n        );\n    }\n\n    /**\n     * Loads the profile info onto the comment object.\n     *\n     * @param comment Comment object.\n     * @returns Promise resolved with modified comment when done.\n     */\n    protected async loadCommentProfile(comment: CoreCommentsDataToDisplay): Promise<CoreCommentsDataToDisplay> {\n        if (!comment.userid) {\n            return comment;\n        }\n\n        try {\n            // Get the user profile image.\n            const user = await CoreUser.getProfile(comment.userid, undefined, true);\n            comment.profileimageurl = user.profileimageurl;\n            comment.fullname = user.fullname;\n        } catch {\n            // Ignore errors.\n        }\n\n        return comment;\n\n    }\n\n    /**\n     * Check if the user info should be displayed for the current message.\n     * User data is only displayed if the previous message was from another user.\n     *\n     * @param comment Comment object.\n     * @param prevComment Previous comment object.\n     * @returns Whether user data should be shown.\n     */\n    protected showUserData(\n        comment: CoreCommentsDataToDisplay,\n        prevComment?: CoreCommentsDataToDisplay,\n    ): boolean {\n        return comment.userid != this.currentUserId && (!prevComment || prevComment.userid != comment.userid || !!comment.showDate);\n    }\n\n    /**\n     * Check if a css tail should be shown.\n     *\n     * @param comment Comment object.\n     * @param nextComment Previous comment object.\n     * @returns Whether user data should be shown.\n     */\n    protected showTail(\n        comment: CoreCommentsDataToDisplay,\n        nextComment?: CoreCommentsDataToDisplay,\n    ): boolean {\n        return !nextComment || nextComment.userid != comment.userid || !!nextComment.showDate;\n    }\n\n    /**\n     * Check if the date should be displayed between messages (when the day changes at midnight for example).\n     *\n     * @param comment Comment object.\n     * @param prevComment Previous comment object.\n     * @returns True if messages are from diferent days, false othetwise.\n     */\n    protected showDate(\n        comment: CoreCommentsDataToDisplay,\n        prevComment?: CoreCommentsDataToDisplay,\n    ): boolean {\n        if (!prevComment) {\n            return true;\n        }\n\n        // Check if day has changed.\n        return !moment(comment.timecreated * 1000).isSame(prevComment.timecreated * 1000, 'day');\n    }\n\n    /**\n     * Load offline comments.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async loadOfflineData(): Promise<void> {\n        const promises: Promise<void>[] = [];\n        let hasDeletedComments = false;\n\n        // Load the only offline comment allowed if any.\n        promises.push(CoreCommentsOffline.getComment(\n            this.contextLevel,\n            this.instanceId,\n            this.componentName,\n            this.itemId,\n            this.area,\n        ).then(async (offlineComment) => {\n            this.offlineComment = offlineComment;\n\n            if (!this.offlineComment) {\n                return;\n            }\n\n            if (this.newComment == '') {\n                this.newComment = this.offlineComment.content;\n            }\n\n            this.offlineComment.userid = this.currentUserId;\n            this.offlineComment.pending = true;\n\n            return;\n        }));\n\n        // Load deleted comments offline.\n        promises.push(CoreCommentsOffline.getDeletedComments(\n            this.contextLevel,\n            this.instanceId,\n            this.componentName,\n            this.itemId,\n            this.area,\n        ).then((deletedComments) => {\n            hasDeletedComments = deletedComments && deletedComments.length > 0;\n\n            if (hasDeletedComments) {\n                deletedComments.forEach((deletedComment) => {\n                    const comment = this.comments.find((comment) => comment.id == deletedComment.commentid);\n\n                    if (comment) {\n                        comment.deleted = !!deletedComment.deleted;\n                    }\n                });\n            }\n\n            return;\n        }));\n\n        await Promise.all(promises);\n\n        this.hasOffline = !!this.offlineComment || hasDeletedComments;\n    }\n\n    /**\n     * Restore a comment.\n     *\n     * @param comment Comment to delete.\n     */\n    async undoDeleteComment(comment: CoreCommentsDataToDisplay): Promise<void> {\n        await CoreCommentsOffline.undoDeleteComment(comment.id);\n\n        comment.deleted = false;\n        this.showDelete = false;\n    }\n\n    /**\n     * Scroll bottom when render has finished.\n     */\n    protected scrollToBottom(): void {\n        // Need a timeout to leave time to the view to be rendered.\n        setTimeout(() => {\n            if (!this.viewDestroyed) {\n                this.content?.scrollToBottom();\n            }\n        }, 100);\n    }\n\n    /**\n     * Toggle delete.\n     */\n    toggleDelete(): void {\n        this.showDelete = !this.showDelete;\n    }\n\n    /**\n     * Refresh cached data in background.\n     */\n    protected async refreshInBackground(): Promise<void> {\n        await CoreUtils.ignoreErrors(this.invalidateComments());\n\n        const promises: Promise<unknown>[] = [];\n\n        for (let i = 0; i <= this.page; i++) {\n            promises.push(CoreComments.getComments(\n                this.contextLevel,\n                this.instanceId,\n                this.componentName,\n                this.itemId,\n                this.area,\n                i,\n            ));\n        }\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.syncObserver?.off();\n        this.onlineObserver.unsubscribe();\n        this.viewDestroyed = true;\n    }\n\n}\n\nexport type CoreCommentsDataToDisplay = CoreCommentsData & {\n    profileimageurl?: string;\n    fullname?: string;\n    deleted?: boolean;\n    showDate?: boolean;\n    showTail?: boolean;\n    showUserData?: boolean;\n};\n\nexport type CoreCommentsOfflineWithUser = CoreCommentsDBRecord & {\n    profileimageurl?: string;\n    fullname?: string;\n    userid?: number;\n    deleted?: boolean;\n};\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>\n                <core-format-text [text]=\"title\" [contextLevel]=\"contextLevel\" [contextInstanceId]=\"instanceId\" [courseId]=\"courseId\" />\n            </h1>\n        </ion-title>\n        <ion-buttons slot=\"end\">\n            <ion-button *ngIf=\"canDeleteComments\" slot=\"end\" fill=\"clear\" (click)=\"toggleDelete()\"\n                [attr.aria-label]=\"'core.toggledelete' | translate\">\n                <ion-icon *ngIf=\"!showDelete\" name=\"fas-pen\" slot=\"icon-only\" aria-hidden=\"true\" />\n                <ion-icon *ngIf=\"showDelete\" name=\"fas-check\" slot=\"icon-only\" aria-hidden=\"true\" />\n            </ion-button>\n            <core-context-menu>\n                <core-context-menu-item [hidden]=\"!(commentsLoaded && !hasOffline)\" [priority]=\"100\" [content]=\"'core.refresh' | translate\"\n                    (action)=\"refreshComments(false)\" [iconAction]=\"refreshIcon\" [closeOnClick]=\"true\" />\n                <core-context-menu-item [hidden]=\"!(commentsLoaded && hasOffline && isOnline)\" [priority]=\"100\"\n                    [content]=\"'core.settings.synchronizenow' | translate\" (action)=\"refreshComments(true)\" [iconAction]=\"syncIcon\"\n                    [closeOnClick]=\"false\" />\n            </core-context-menu>\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <ion-refresher slot=\"fixed\" [disabled]=\"!commentsLoaded\" (ionRefresh)=\"refreshComments(false, $event.target)\">\n        <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n    </ion-refresher>\n    <core-loading [hideUntil]=\"commentsLoaded\">\n        <core-empty-box *ngIf=\"!comments?.length && !offlineComment\" icon=\"fas-comments\"\n            [message]=\"'core.comments.nocomments' | translate\" />\n\n        <!-- Load previous messages. -->\n        <core-infinite-loading [enabled]=\"canLoadMore\" position=\"top\" (action)=\"loadPrevious($event)\" [error]=\"loadMoreError\" />\n\n        <ion-list class=\"addon-messages-discussion-container\">\n            <ng-container *ngFor=\"let comment of comments; index as index; last as last\">\n\n                <p class=\"ion-text-center addon-messages-date\" *ngIf=\"comment.showDate\">\n                    {{ comment.timecreated * 1000 | coreFormatDate: \"strftimedayshort\" }}\n                </p>\n\n                <core-message [message]=\"comment\" [text]=\"comment.content\" [time]=\"comment.timecreated * 1000\" [user]=\"comment\"\n                    [showDelete]=\"showDelete\" [contextLevel]=\"contextLevel\" [instanceId]=\"instanceId\" [courseId]=\"courseId\"\n                    (onDeleteMessage)=\"deleteComment(comment)\" (onUndoDeleteMessage)=\"undoDeleteComment(comment)\" />\n            </ng-container>\n\n            <ion-badge class=\"ion-text-wrap\" color=\"info\" *ngIf=\"hasOffline\">\n                <ion-icon name=\"fas-triangle-exclamation\" aria-hidden=\"true\" />\n                {{ 'core.thereisdatatosync' | translate:{$a: 'core.comments.comments' | translate | lowercase } }}\n            </ion-badge>\n            <core-message *ngIf=\"hasOffline && offlineComment\" [message]=\"offlineComment\" [text]=\"offlineComment.content\"\n                [user]=\"offlineComment\" [showDelete]=\"showDelete\" [contextLevel]=\"contextLevel\" [instanceId]=\"instanceId\"\n                [courseId]=\"courseId\" (onDeleteMessage)=\"deleteComment(offlineComment)\" />\n        </ion-list>\n\n    </core-loading>\n</ion-content>\n<ion-footer class=\"footer-adjustable\" *ngIf=\"commentsLoaded && canAddComments\">\n    <ion-toolbar>\n        <core-send-message-form [sendDisabled]=\"sending\" [message]=\"newComment\" (onSubmit)=\"addComment($event)\"\n            [placeholder]=\"'core.comments.addcomment' | translate\" />\n    </ion-toolbar>\n</ion-footer>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}