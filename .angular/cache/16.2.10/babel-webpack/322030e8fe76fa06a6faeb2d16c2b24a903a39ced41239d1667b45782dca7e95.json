{"ast":null,"code":"var _class;\nimport { CoreSortedDelegate } from '@classes/delegate-sorted';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to interact with addons to be shown in app settings. Provides functions to register a plugin\n * and notify an update in the data.\n */\nexport class CoreSettingsDelegateService extends CoreSortedDelegate {\n  constructor() {\n    super('CoreSettingsDelegate');\n  }\n}\n_class = CoreSettingsDelegateService;\n_class.ɵfac = function CoreSettingsDelegateService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreSettingsDelegate = makeSingleton(CoreSettingsDelegateService);","map":{"version":3,"names":["CoreSortedDelegate","makeSingleton","CoreSettingsDelegateService","constructor","factory","ɵfac","providedIn","CoreSettingsDelegate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/settings/services/settings-delegate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\n\nimport { CoreDelegateDisplayHandler, CoreDelegateToDisplay } from '@classes/delegate';\nimport { CoreSortedDelegate } from '@classes/delegate-sorted';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Interface that all settings handlers must implement.\n */\nexport type CoreSettingsHandler = CoreDelegateDisplayHandler<CoreSettingsHandlerToDisplay>;\n\n/**\n * Main data returned by the handler.\n */\ninterface CoreSettingsHandlerBaseData {\n    /**\n     * Title to display for the handler.\n     */\n    title: string;\n\n    /**\n     * Name of the icon to display for the handler.\n     */\n    icon?: string; // Name of the icon to display in the menu.\n\n    /**\n     * Class to add to the displayed handler.\n     */\n    class?: string;\n}\n\ninterface CoreSettingsToggleHandlerData extends CoreSettingsHandlerBaseData {\n    /**\n     * Toggle checked.\n     */\n    toggleChecked?: boolean;\n\n    /**\n     * Method for emit events to the handler.\n     */\n    toggle(checked: boolean): void;\n}\n\ninterface CoreSettingsPageHandlerData extends CoreSettingsHandlerBaseData {\n    /**\n     * Name of the page to load for the handler.\n     */\n    page: string;\n\n    /**\n     * Params list of the page to load for the handler.\n     */\n    params?: Params;\n}\n\n/**\n * Data needed to render a setting handler. It's returned by the handler.\n */\nexport type CoreSettingsHandlerData = CoreSettingsPageHandlerData | CoreSettingsToggleHandlerData;\n\n/**\n * Data returned by the delegate for each handler.\n */\nexport type CoreSettingsHandlerToDisplay = CoreDelegateToDisplay & CoreSettingsHandlerData;\n\n/**\n * Data returned by the delegate for each handler to be displayed in pages.\n */\nexport type CoreSettingsPageHandlerToDisplay = CoreDelegateToDisplay & CoreSettingsPageHandlerData;\n\n/**\n * Service to interact with addons to be shown in app settings. Provides functions to register a plugin\n * and notify an update in the data.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreSettingsDelegateService extends CoreSortedDelegate<CoreSettingsHandlerToDisplay, CoreSettingsHandler> {\n\n    constructor() {\n        super('CoreSettingsDelegate');\n    }\n\n}\n\nexport const CoreSettingsDelegate = makeSingleton(CoreSettingsDelegateService);\n"],"mappings":";AAkBA,SAASA,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,aAAa,QAAQ,aAAa;;AAkE3C;;;;AAKA,OAAM,MAAOC,2BAA4B,SAAQF,kBAAqE;EAElHG,YAAA;IACI,KAAK,CAAC,sBAAsB,CAAC;EACjC;;SAJSD,2BAA4B;;mBAA5BA,MAA2B;AAAA;;SAA3BA,MAA2B;EAAAE,OAAA,EAA3BF,MAA2B,CAAAG,IAAA;EAAAC,UAAA,EADd;AAAM;AAShC,OAAO,MAAMC,oBAAoB,GAAGN,aAAa,CAACC,2BAA2B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}