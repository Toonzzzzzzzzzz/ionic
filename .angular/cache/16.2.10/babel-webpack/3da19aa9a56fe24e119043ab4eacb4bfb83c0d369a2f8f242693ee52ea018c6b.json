{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CorePromisedValue } from '@classes/promised-value';\n/**\n * A queue to prevent having too many concurrent executions.\n */\nexport class CoreQueueRunner {\n  constructor(maxParallel = 1) {\n    this.maxParallel = maxParallel;\n    this.queue = {};\n    this.orderedQueue = [];\n    this.numberRunning = 0;\n  }\n  /**\n   * Get unique ID.\n   *\n   * @param id ID.\n   * @returns Unique ID.\n   */\n  getUniqueId(id) {\n    let newId = id;\n    let num = 1;\n    do {\n      newId = id + '-' + num;\n      num++;\n    } while (newId in this.queue);\n    return newId;\n  }\n  /**\n   * Process next item in the queue.\n   *\n   * @returns Promise resolved when next item has been treated.\n   */\n  processNextItem() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.orderedQueue.length || _this.numberRunning >= _this.maxParallel) {\n        // Queue is empty or max number of parallel runs reached, stop.\n        return;\n      }\n      const item = _this.orderedQueue.shift();\n      if (!item) {\n        // No item found.\n        return;\n      }\n      _this.numberRunning++;\n      try {\n        const result = yield item.fn();\n        item.deferred.resolve(result);\n      } catch (error) {\n        item.deferred.reject(error);\n      } finally {\n        delete _this.queue[item.id];\n        _this.numberRunning--;\n        _this.processNextItem();\n      }\n    })();\n  }\n  /**\n   * Add an item to the queue.\n   *\n   * @param id ID.\n   * @param fn Function to call.\n   * @param options Options.\n   * @returns Promise resolved when the function has been executed.\n   */\n  run(id, fn, options) {\n    options = options || {};\n    if (id in this.queue) {\n      if (!options.allowRepeated) {\n        // Item already in queue, return its promise.\n        return this.queue[id].deferred;\n      }\n      id = this.getUniqueId(id);\n    }\n    // Add the item in the queue.\n    const item = {\n      id,\n      fn,\n      deferred: new CorePromisedValue()\n    };\n    this.queue[id] = item;\n    this.orderedQueue.push(item);\n    // Process next item if we haven't reached the max yet.\n    this.processNextItem();\n    return item.deferred;\n  }\n}","map":{"version":3,"names":["CorePromisedValue","CoreQueueRunner","constructor","maxParallel","queue","orderedQueue","numberRunning","getUniqueId","id","newId","num","processNextItem","_this","_asyncToGenerator","length","item","shift","result","fn","deferred","resolve","error","reject","run","options","allowRepeated","push"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/queue-runner.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CorePromisedValue } from '@classes/promised-value';\n\n/**\n * Function to add to the queue.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type CoreQueueRunnerFunction<T> = (...args: any[]) => T | Promise<T>;\n\n/**\n * Queue item.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type CoreQueueRunnerItem<T = any> = {\n    /**\n     * Item ID.\n     */\n    id: string;\n\n    /**\n     * Function to execute.\n     */\n    fn: CoreQueueRunnerFunction<T>;\n\n    /**\n     * Deferred with a promise resolved/rejected with the result of the function.\n     */\n    deferred: CorePromisedValue<T>;\n};\n\n/**\n * Options to pass to add item.\n */\nexport type CoreQueueRunnerAddOptions = {\n    /**\n     * Whether to allow having multiple entries with same ID in the queue.\n     */\n    allowRepeated?: boolean;\n};\n\n/**\n * A queue to prevent having too many concurrent executions.\n */\nexport class CoreQueueRunner {\n\n    protected queue: {[id: string]: CoreQueueRunnerItem} = {};\n    protected orderedQueue: CoreQueueRunnerItem[] = [];\n    protected numberRunning = 0;\n\n    constructor(protected maxParallel: number = 1) { }\n\n    /**\n     * Get unique ID.\n     *\n     * @param id ID.\n     * @returns Unique ID.\n     */\n    protected getUniqueId(id: string): string {\n        let newId = id;\n        let num = 1;\n\n        do {\n            newId = id + '-' + num;\n            num++;\n        } while (newId in this.queue);\n\n        return newId;\n    }\n\n    /**\n     * Process next item in the queue.\n     *\n     * @returns Promise resolved when next item has been treated.\n     */\n    protected async processNextItem(): Promise<void> {\n        if (!this.orderedQueue.length || this.numberRunning >= this.maxParallel) {\n            // Queue is empty or max number of parallel runs reached, stop.\n            return;\n        }\n\n        const item = this.orderedQueue.shift();\n        if (!item) {\n            // No item found.\n            return;\n        }\n\n        this.numberRunning++;\n\n        try {\n            const result = await item.fn();\n\n            item.deferred.resolve(result);\n        } catch (error) {\n            item.deferred.reject(error);\n        } finally {\n            delete this.queue[item.id];\n            this.numberRunning--;\n\n            this.processNextItem();\n        }\n    }\n\n    /**\n     * Add an item to the queue.\n     *\n     * @param id ID.\n     * @param fn Function to call.\n     * @param options Options.\n     * @returns Promise resolved when the function has been executed.\n     */\n    run<T>(id: string, fn: CoreQueueRunnerFunction<T>, options?: CoreQueueRunnerAddOptions): Promise<T> {\n        options = options || {};\n\n        if (id in this.queue) {\n            if (!options.allowRepeated) {\n                // Item already in queue, return its promise.\n                return this.queue[id].deferred;\n            }\n\n            id = this.getUniqueId(id);\n        }\n\n        // Add the item in the queue.\n        const item = {\n            id,\n            fn,\n            deferred: new CorePromisedValue<T>(),\n        };\n\n        this.queue[id] = item;\n        this.orderedQueue.push(item);\n\n        // Process next item if we haven't reached the max yet.\n        this.processNextItem();\n\n        return item.deferred;\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,iBAAiB,QAAQ,yBAAyB;AAuC3D;;;AAGA,OAAM,MAAOC,eAAe;EAMxBC,YAAsBC,WAAA,GAAsB,CAAC;IAAvB,KAAAA,WAAW,GAAXA,WAAW;IAJvB,KAAAC,KAAK,GAAwC,EAAE;IAC/C,KAAAC,YAAY,GAA0B,EAAE;IACxC,KAAAC,aAAa,GAAG,CAAC;EAEsB;EAEjD;;;;;;EAMUC,WAAWA,CAACC,EAAU;IAC5B,IAAIC,KAAK,GAAGD,EAAE;IACd,IAAIE,GAAG,GAAG,CAAC;IAEX,GAAG;MACCD,KAAK,GAAGD,EAAE,GAAG,GAAG,GAAGE,GAAG;MACtBA,GAAG,EAAE;KACR,QAAQD,KAAK,IAAI,IAAI,CAACL,KAAK;IAE5B,OAAOK,KAAK;EAChB;EAEA;;;;;EAKgBE,eAAeA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC3B,IAAI,CAACD,KAAI,CAACP,YAAY,CAACS,MAAM,IAAIF,KAAI,CAACN,aAAa,IAAIM,KAAI,CAACT,WAAW,EAAE;QACrE;QACA;;MAGJ,MAAMY,IAAI,GAAGH,KAAI,CAACP,YAAY,CAACW,KAAK,EAAE;MACtC,IAAI,CAACD,IAAI,EAAE;QACP;QACA;;MAGJH,KAAI,CAACN,aAAa,EAAE;MAEpB,IAAI;QACA,MAAMW,MAAM,SAASF,IAAI,CAACG,EAAE,EAAE;QAE9BH,IAAI,CAACI,QAAQ,CAACC,OAAO,CAACH,MAAM,CAAC;OAChC,CAAC,OAAOI,KAAK,EAAE;QACZN,IAAI,CAACI,QAAQ,CAACG,MAAM,CAACD,KAAK,CAAC;OAC9B,SAAS;QACN,OAAOT,KAAI,CAACR,KAAK,CAACW,IAAI,CAACP,EAAE,CAAC;QAC1BI,KAAI,CAACN,aAAa,EAAE;QAEpBM,KAAI,CAACD,eAAe,EAAE;;IACzB;EACL;EAEA;;;;;;;;EAQAY,GAAGA,CAAIf,EAAU,EAAEU,EAA8B,EAAEM,OAAmC;IAClFA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAEvB,IAAIhB,EAAE,IAAI,IAAI,CAACJ,KAAK,EAAE;MAClB,IAAI,CAACoB,OAAO,CAACC,aAAa,EAAE;QACxB;QACA,OAAO,IAAI,CAACrB,KAAK,CAACI,EAAE,CAAC,CAACW,QAAQ;;MAGlCX,EAAE,GAAG,IAAI,CAACD,WAAW,CAACC,EAAE,CAAC;;IAG7B;IACA,MAAMO,IAAI,GAAG;MACTP,EAAE;MACFU,EAAE;MACFC,QAAQ,EAAE,IAAInB,iBAAiB;KAClC;IAED,IAAI,CAACI,KAAK,CAACI,EAAE,CAAC,GAAGO,IAAI;IACrB,IAAI,CAACV,YAAY,CAACqB,IAAI,CAACX,IAAI,CAAC;IAE5B;IACA,IAAI,CAACJ,eAAe,EAAE;IAEtB,OAAOI,IAAI,CAACI,QAAQ;EACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}