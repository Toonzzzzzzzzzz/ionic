{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreReminders, CoreRemindersService } from '@features/reminders/services/reminders';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreRemindersSetReminderMenuComponent } from '../set-reminder-menu/set-reminder-menu';\nimport { Translate } from '@singletons';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../../../directives/fa-icon\";\nimport * as i3 from \"../../../../directives/update-non-reactive-attributes\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@ngx-translate/core\";\nfunction CoreRemindersSetButtonComponent_ion_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 3);\n  }\n}\nfunction CoreRemindersSetButtonComponent_ion_icon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 4);\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    title: a0,\n    label: a1\n  };\n};\n/**\n * Component that displays a button to set a reminder.\n */\nexport class CoreRemindersSetButtonComponent {\n  constructor() {\n    this.label = '';\n    this.time = -1;\n    this.title = '';\n    this.url = '';\n    this.labelClean = '';\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    this.labelClean = this.label.replace(':', '');\n  }\n  /**\n   * Set reminder.\n   *\n   * @param ev Click event.\n   */\n  setReminder(ev) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.component === undefined || _this.instanceId === undefined || _this.type === undefined) {\n        return;\n      }\n      ev.preventDefault();\n      ev.stopPropagation();\n      if (_this.timebefore === undefined) {\n        // Set it to the time of the event.\n        _this.saveReminder(0);\n        return;\n      }\n      // Open popover.\n      const reminderTime = yield CoreDomUtils.openPopover({\n        component: CoreRemindersSetReminderMenuComponent,\n        componentProps: {\n          initialValue: _this.timebefore,\n          eventTime: _this.time,\n          noReminderLabel: 'core.reminders.delete'\n        },\n        event: ev\n      });\n      if (reminderTime === undefined) {\n        // User canceled.\n        return;\n      }\n      // Save before.\n      _this.saveReminder(reminderTime.timeBefore);\n    })();\n  }\n  /**\n   * Save reminder.\n   *\n   * @param timebefore Time before the event to fire the notification.\n   * @returns Promise resolved when done.\n   */\n  saveReminder(timebefore) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.component === undefined || _this2.instanceId === undefined || _this2.type === undefined) {\n        return;\n      }\n      // Remove previous the reminders.\n      yield CoreReminders.removeReminders({\n        instanceId: _this2.instanceId,\n        component: _this2.component,\n        type: _this2.type\n      });\n      if (timebefore === undefined || timebefore === CoreRemindersService.DISABLED) {\n        _this2.timebefore = undefined;\n        CoreDomUtils.showToast('core.reminders.reminderunset', true);\n        return;\n      }\n      _this2.timebefore = timebefore;\n      const reminder = {\n        component: _this2.component,\n        instanceId: _this2.instanceId,\n        timebefore: _this2.timebefore,\n        type: _this2.type,\n        title: _this2.label + ' ' + _this2.title,\n        url: _this2.url,\n        time: _this2.time\n      };\n      // Save before.\n      yield CoreReminders.addReminder(reminder);\n      const time = _this2.time - timebefore;\n      const text = Translate.instant('core.reminders.reminderset', {\n        $a: CoreTimeUtils.userDate(time * 1000)\n      });\n      CoreDomUtils.showToast(text);\n    })();\n  }\n}\n_class = CoreRemindersSetButtonComponent;\n_class.ɵfac = function CoreRemindersSetButtonComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-reminders-set-button\"]],\n  inputs: {\n    component: \"component\",\n    instanceId: \"instanceId\",\n    type: \"type\",\n    label: \"label\",\n    timebefore: \"timebefore\",\n    time: \"time\",\n    title: \"title\",\n    url: \"url\"\n  },\n  decls: 4,\n  vars: 10,\n  consts: [[\"fill\", \"clear\", \"size\", \"small\", 3, \"click\"], [\"name\", \"fas-bell\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"name\", \"far-bell-slash\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"name\", \"fas-bell\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [\"name\", \"far-bell-slash\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"]],\n  template: function CoreRemindersSetButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-button\", 0);\n      i0.ɵɵlistener(\"click\", function CoreRemindersSetButtonComponent_Template_ion_button_click_0_listener($event) {\n        return ctx.setReminder($event);\n      });\n      i0.ɵɵpipe(1, \"translate\");\n      i0.ɵɵtemplate(2, CoreRemindersSetButtonComponent_ion_icon_2_Template, 1, 0, \"ion-icon\", 1);\n      i0.ɵɵtemplate(3, CoreRemindersSetButtonComponent_ion_icon_3_Template, 1, 0, \"ion-icon\", 2);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind2(1, 4, \"core.reminders.setareminderfor\", i0.ɵɵpureFunction2(7, _c0, ctx.title, ctx.labelClean)))(\"aria-checked\", ctx.timebefore !== undefined);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.timebefore !== undefined);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timebefore === undefined);\n    }\n  },\n  dependencies: [i1.NgIf, i2.CoreFaIconDirective, i3.CoreUpdateNonReactiveAttributesDirective, i4.IonButton, i4.IonIcon, i5.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreReminders","CoreRemindersService","CoreDomUtils","CoreRemindersSetReminderMenuComponent","Translate","CoreTimeUtils","i0","ɵɵelement","CoreRemindersSetButtonComponent","constructor","label","time","title","url","labelClean","ngOnInit","replace","setReminder","ev","_this","_asyncToGenerator","component","undefined","instanceId","type","preventDefault","stopPropagation","timebefore","saveReminder","reminderTime","openPopover","componentProps","initialValue","eventTime","noReminderLabel","event","timeBefore","_this2","removeReminders","DISABLED","showToast","reminder","addReminder","text","instant","$a","userDate","selectors","inputs","decls","vars","consts","template","CoreRemindersSetButtonComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","CoreRemindersSetButtonComponent_Template_ion_button_click_0_listener","$event","ɵɵtemplate","CoreRemindersSetButtonComponent_ion_icon_2_Template","CoreRemindersSetButtonComponent_ion_icon_3_Template","ɵɵelementEnd","ɵɵattribute","ɵɵpipeBind2","ɵɵpureFunction2","_c0","ɵɵadvance","ɵɵproperty"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/reminders/components/set-button/set-button.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/reminders/components/set-button/set-button.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreReminderData, CoreReminders, CoreRemindersService } from '@features/reminders/services/reminders';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreRemindersSetReminderMenuComponent } from '../set-reminder-menu/set-reminder-menu';\nimport { Translate } from '@singletons';\nimport { CoreTimeUtils } from '@services/utils/time';\n\n/**\n * Component that displays a button to set a reminder.\n */\n@Component({\n    selector: 'core-reminders-set-button',\n    templateUrl: 'set-button.html',\n})\nexport class CoreRemindersSetButtonComponent implements OnInit {\n\n    @Input() component?: string;\n    @Input() instanceId?: number;\n    @Input() type?: string;\n    @Input() label = '';\n    @Input() timebefore?: number;\n    @Input() time = -1;\n    @Input() title = '';\n    @Input() url = '';\n\n    labelClean = '';\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.labelClean = this.label.replace(':', '');\n    }\n\n    /**\n     * Set reminder.\n     *\n     * @param ev Click event.\n     */\n    async setReminder(ev: Event): Promise<void> {\n        if (this.component === undefined || this.instanceId === undefined || this.type === undefined) {\n            return;\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.timebefore === undefined) {\n            // Set it to the time of the event.\n            this.saveReminder(0);\n\n            return;\n        }\n\n        // Open popover.\n        const reminderTime = await CoreDomUtils.openPopover<{timeBefore: number}>({\n            component: CoreRemindersSetReminderMenuComponent,\n            componentProps: {\n                initialValue: this.timebefore,\n                eventTime: this.time,\n                noReminderLabel: 'core.reminders.delete',\n            },\n            event: ev,\n        });\n\n        if (reminderTime === undefined) {\n            // User canceled.\n            return;\n        }\n\n        // Save before.\n        this.saveReminder(reminderTime.timeBefore);\n    }\n\n    /**\n     * Save reminder.\n     *\n     * @param timebefore Time before the event to fire the notification.\n     * @returns Promise resolved when done.\n     */\n    protected async saveReminder(timebefore: number): Promise<void> {\n        if (this.component === undefined || this.instanceId === undefined || this.type === undefined) {\n            return;\n        }\n\n        // Remove previous the reminders.\n        await CoreReminders.removeReminders({\n            instanceId: this.instanceId,\n            component: this.component,\n            type: this.type,\n        });\n\n        if (timebefore === undefined || timebefore === CoreRemindersService.DISABLED) {\n            this.timebefore = undefined;\n            CoreDomUtils.showToast('core.reminders.reminderunset', true);\n\n            return;\n        }\n\n        this.timebefore = timebefore;\n\n        const reminder: CoreReminderData = {\n            component: this.component,\n            instanceId: this.instanceId,\n            timebefore: this.timebefore,\n            type: this.type,\n            title: this.label + ' ' + this.title,\n            url: this.url,\n            time: this.time,\n        };\n\n        // Save before.\n        await CoreReminders.addReminder(reminder);\n\n        const time = this.time - timebefore;\n        const text = Translate.instant('core.reminders.reminderset', { $a: CoreTimeUtils.userDate(time * 1000) });\n        CoreDomUtils.showToast(text);\n    }\n\n}\n","<ion-button fill=\"clear\" size=\"small\" (click)=\"setReminder($event)\"\n    [attr.aria-label]=\"'core.reminders.setareminderfor' | translate : { title: title, label: labelClean }\"\n    [attr.aria-checked]=\"timebefore !== undefined\">\n    <ion-icon name=\"fas-bell\" slot=\"icon-only\" *ngIf=\"timebefore !== undefined\" aria-hidden=\"true\" />\n    <ion-icon name=\"far-bell-slash\" slot=\"icon-only\" *ngIf=\"timebefore === undefined\" aria-hidden=\"true\" />\n</ion-button>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}