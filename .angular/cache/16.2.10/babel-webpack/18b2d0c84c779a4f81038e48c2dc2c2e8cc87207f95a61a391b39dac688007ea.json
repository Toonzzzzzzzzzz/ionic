{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { CoreWSError } from '@classes/errors/wserror';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to handle insights.\n */\nexport class AddonReportInsightsService {\n  /**\n   * Check if site supports sending insight actions.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: whether it's supported.\n   */\n  canSendActionInSite(siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this.canSendAction(site);\n    })();\n  }\n  /**\n   * Check if site supports sending insight actions.\n   *\n   * @param site Site. If not defined, current site.\n   * @returns Whether it's supported.\n   */\n  canSendAction(site) {\n    var _site;\n    site = site || CoreSites.getCurrentSite();\n    return !!((_site = site) !== null && _site !== void 0 && _site.wsAvailable('report_insights_action_executed'));\n  }\n  /**\n   * Send an action.\n   *\n   * @param actionName Action name.\n   * @param ids List of IDs.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if success.\n   */\n  sendActionExecuted(actionName, ids, siteId) {\n    return _asyncToGenerator(function* () {\n      var _result$warnings;\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        actionname: actionName,\n        predictionids: ids\n      };\n      const result = yield site.write('report_insights_action_executed', params);\n      if ((_result$warnings = result.warnings) !== null && _result$warnings !== void 0 && _result$warnings.length) {\n        throw new CoreWSError(result.warnings[0]);\n      }\n    })();\n  }\n}\n_class = AddonReportInsightsService;\n_class.ɵfac = function AddonReportInsightsService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonReportInsights = makeSingleton(AddonReportInsightsService);","map":{"version":3,"names":["CoreSites","makeSingleton","CoreWSError","AddonReportInsightsService","canSendActionInSite","siteId","_this","_asyncToGenerator","site","getSite","canSendAction","_site","getCurrentSite","wsAvailable","sendActionExecuted","actionName","ids","_result$warnings","params","actionname","predictionids","result","write","warnings","length","factory","ɵfac","providedIn","AddonReportInsights"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/report/insights/services/insights.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreSite } from '@classes/sites/site';\nimport { makeSingleton } from '@singletons';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { CoreWSError } from '@classes/errors/wserror';\n\n/**\n * Service to handle insights.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonReportInsightsService {\n\n    /**\n     * Check if site supports sending insight actions.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: whether it's supported.\n     */\n    async canSendActionInSite(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.canSendAction(site);\n    }\n\n    /**\n     * Check if site supports sending insight actions.\n     *\n     * @param site Site. If not defined, current site.\n     * @returns Whether it's supported.\n     */\n    canSendAction(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site?.wsAvailable('report_insights_action_executed');\n    }\n\n    /**\n     * Send an action.\n     *\n     * @param actionName Action name.\n     * @param ids List of IDs.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success.\n     */\n    async sendActionExecuted(actionName: string, ids: number[], siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonReportInsightsActionExecutedWSParams = {\n            actionname: actionName,\n            predictionids: ids,\n        };\n\n        const result = await site.write<AddonReportInsightsActionExecutedWSResult>('report_insights_action_executed', params);\n\n        if (result.warnings?.length) {\n            throw new CoreWSError(result.warnings[0]);\n        }\n    }\n\n}\n\nexport const AddonReportInsights = makeSingleton(AddonReportInsightsService);\n\n/**\n * Params of WS report_insights_action_executed.\n */\nexport type AddonReportInsightsActionExecutedWSParams = {\n    actionname: string; // The name of the action.\n    predictionids: number[]; // Array of prediction ids.\n};\n\n/**\n * Result of WS report_insights_action_executed.\n */\nexport type AddonReportInsightsActionExecutedWSResult = {\n    warnings?: CoreWSExternalWarning[];\n};\n"],"mappings":";;AAgBA,SAASA,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,aAAa,QAAQ,aAAa;AAE3C,SAASC,WAAW,QAAQ,yBAAyB;;AAErD;;;AAIA,OAAM,MAAOC,0BAA0B;EAEnC;;;;;;EAMMC,mBAAmBA,CAACC,MAAe;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACrC,MAAMC,IAAI,SAASR,SAAS,CAACS,OAAO,CAACJ,MAAM,CAAC;MAE5C,OAAOC,KAAI,CAACI,aAAa,CAACF,IAAI,CAAC;IAAC;EACpC;EAEA;;;;;;EAMAE,aAAaA,CAACF,IAAe;IAAA,IAAAG,KAAA;IACzBH,IAAI,GAAGA,IAAI,IAAIR,SAAS,CAACY,cAAc,EAAE;IAEzC,OAAO,CAAC,GAAAD,KAAA,GAACH,IAAI,cAAAG,KAAA,eAAJA,KAAA,CAAME,WAAW,CAAC,iCAAiC,CAAC;EACjE;EAEA;;;;;;;;EAQMC,kBAAkBA,CAACC,UAAkB,EAAEC,GAAa,EAAEX,MAAe;IAAA,OAAAE,iBAAA;MAAA,IAAAU,gBAAA;MACvE,MAAMT,IAAI,SAASR,SAAS,CAACS,OAAO,CAACJ,MAAM,CAAC;MAE5C,MAAMa,MAAM,GAA8C;QACtDC,UAAU,EAAEJ,UAAU;QACtBK,aAAa,EAAEJ;OAClB;MAED,MAAMK,MAAM,SAASb,IAAI,CAACc,KAAK,CAA4C,iCAAiC,EAAEJ,MAAM,CAAC;MAErH,KAAAD,gBAAA,GAAII,MAAM,CAACE,QAAQ,cAAAN,gBAAA,eAAfA,gBAAA,CAAiBO,MAAM,EAAE;QACzB,MAAM,IAAItB,WAAW,CAACmB,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC;;IAC5C;EACL;;SA/CSpB,0BAA0B;;mBAA1BA,MAA0B;AAAA;;SAA1BA,MAA0B;EAAAsB,OAAA,EAA1BtB,MAA0B,CAAAuB,IAAA;EAAAC,UAAA,EADb;AAAM;AAoDhC,OAAO,MAAMC,mBAAmB,GAAG3B,aAAa,CAACE,0BAA0B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}