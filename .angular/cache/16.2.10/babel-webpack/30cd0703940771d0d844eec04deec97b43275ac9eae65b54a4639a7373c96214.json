{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourse } from '@features/course/services/course';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModLti } from './lti';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides some helper functions for LTI.\n */\nexport class AddonModLtiHelperProvider {\n  constructor() {\n    this.pendingCheckCompletion = {};\n    // Clear pending completion on logout.\n    CoreEvents.on(CoreEvents.LOGOUT, () => {\n      this.pendingCheckCompletion = {};\n    });\n  }\n  watchPendingCompletions() {\n    CorePlatform.resume.subscribe(() => {\n      // User went back to the app, check pending completions.\n      for (const moduleId in this.pendingCheckCompletion) {\n        const data = this.pendingCheckCompletion[moduleId];\n        CoreCourse.checkModuleCompletion(data.courseId, data.module.completiondata);\n      }\n    });\n  }\n  /**\n   * Get needed data and launch the LTI.\n   *\n   * @param courseId Course ID.\n   * @param module Module.\n   * @param lti LTI instance. If not provided it will be obtained.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  getDataAndLaunch(courseId, module, lti, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const modal = yield CoreDomUtils.showModalLoading();\n      try {\n        const openInBrowser = yield AddonModLti.shouldLaunchInBrowser(siteId);\n        if (openInBrowser) {\n          const site = yield CoreSites.getSite(siteId);\n          // The view event is triggered by the browser, mark the module as pending to check completion.\n          _this.pendingCheckCompletion[module.id] = {\n            courseId,\n            module\n          };\n          return site.openInBrowserWithAutoLogin(module.url || '');\n        }\n        // Open in app.\n        if (!lti) {\n          lti = yield AddonModLti.getLti(courseId, module.id);\n        }\n        const launchData = yield AddonModLti.getLtiLaunchData(lti.id);\n        // \"View\" LTI without blocking the UI.\n        _this.logViewAndCheckCompletion(courseId, module, lti.id, siteId);\n        // Launch LTI.\n        return AddonModLti.launch(launchData.endpoint, launchData.parameters);\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_lti.errorgetlti', true);\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  /**\n   * Report the LTI as being viewed and check completion.\n   *\n   * @param courseId Course ID.\n   * @param module Module.\n   * @param ltiId LTI id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  logViewAndCheckCompletion(courseId, module, ltiId, siteId) {\n    return _asyncToGenerator(function* () {\n      try {\n        yield AddonModLti.logView(ltiId, siteId);\n        CoreCourse.checkModuleCompletion(courseId, module.completiondata);\n      } catch (_unused) {\n        // Ignore errors.\n      }\n      CoreAnalytics.logEvent({\n        type: CoreAnalyticsEventType.VIEW_ITEM,\n        ws: 'mod_lti_view_lti',\n        name: module.name,\n        data: {\n          id: module.instance,\n          category: 'lti'\n        },\n        url: `/mod/lti/view.php?id=${module.id}`\n      });\n    })();\n  }\n}\n_class = AddonModLtiHelperProvider;\n_class.ɵfac = function AddonModLtiHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModLtiHelper = makeSingleton(AddonModLtiHelperProvider);","map":{"version":3,"names":["CoreCourse","CorePlatform","CoreSites","CoreDomUtils","makeSingleton","CoreEvents","AddonModLti","CoreAnalytics","CoreAnalyticsEventType","AddonModLtiHelperProvider","constructor","pendingCheckCompletion","on","LOGOUT","watchPendingCompletions","resume","subscribe","moduleId","data","checkModuleCompletion","courseId","module","completiondata","getDataAndLaunch","lti","siteId","_this","_asyncToGenerator","getCurrentSiteId","modal","showModalLoading","openInBrowser","shouldLaunchInBrowser","site","getSite","id","openInBrowserWithAutoLogin","url","getLti","launchData","getLtiLaunchData","logViewAndCheckCompletion","launch","endpoint","parameters","error","showErrorModalDefault","dismiss","ltiId","logView","_unused","logEvent","type","VIEW_ITEM","ws","name","instance","category","factory","ɵfac","providedIn","AddonModLtiHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/lti/services/lti-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseModuleData } from '@features/course/services/course-helper';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModLti, AddonModLtiLti } from './lti';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Service that provides some helper functions for LTI.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModLtiHelperProvider {\n\n    protected pendingCheckCompletion: {[moduleId: string]: {courseId: number; module: CoreCourseModuleData}} = {};\n\n    constructor() {\n        // Clear pending completion on logout.\n        CoreEvents.on(CoreEvents.LOGOUT, () => {\n            this.pendingCheckCompletion = {};\n        });\n    }\n\n    watchPendingCompletions(): void {\n        CorePlatform.resume.subscribe(() => {\n            // User went back to the app, check pending completions.\n            for (const moduleId in this.pendingCheckCompletion) {\n                const data = this.pendingCheckCompletion[moduleId];\n\n                CoreCourse.checkModuleCompletion(data.courseId, data.module.completiondata);\n            }\n        });\n    }\n\n    /**\n     * Get needed data and launch the LTI.\n     *\n     * @param courseId Course ID.\n     * @param module Module.\n     * @param lti LTI instance. If not provided it will be obtained.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async getDataAndLaunch(courseId: number, module: CoreCourseModuleData, lti?: AddonModLtiLti, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            const openInBrowser = await AddonModLti.shouldLaunchInBrowser(siteId);\n\n            if (openInBrowser) {\n                const site = await CoreSites.getSite(siteId);\n\n                // The view event is triggered by the browser, mark the module as pending to check completion.\n                this.pendingCheckCompletion[module.id] = {\n                    courseId,\n                    module,\n                };\n\n                return site.openInBrowserWithAutoLogin(module.url || '');\n            }\n\n            // Open in app.\n            if (!lti) {\n                lti = await AddonModLti.getLti(courseId, module.id);\n            }\n\n            const launchData = await AddonModLti.getLtiLaunchData(lti.id);\n\n            // \"View\" LTI without blocking the UI.\n            this.logViewAndCheckCompletion(courseId, module, lti.id, siteId);\n\n            // Launch LTI.\n            return AddonModLti.launch(launchData.endpoint, launchData.parameters);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_lti.errorgetlti', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Report the LTI as being viewed and check completion.\n     *\n     * @param courseId Course ID.\n     * @param module Module.\n     * @param ltiId LTI id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async logViewAndCheckCompletion(\n        courseId: number,\n        module: CoreCourseModuleData,\n        ltiId: number,\n        siteId?: string,\n    ): Promise<void> {\n        try {\n            await AddonModLti.logView(ltiId,siteId);\n\n            CoreCourse.checkModuleCompletion(courseId, module.completiondata);\n        } catch {\n            // Ignore errors.\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: 'mod_lti_view_lti',\n            name: module.name,\n            data: { id: module.instance, category: 'lti' },\n            url: `/mod/lti/view.php?id=${module.id}`,\n        });\n    }\n\n}\n\nexport const AddonModLtiHelper = makeSingleton(AddonModLtiHelperProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}