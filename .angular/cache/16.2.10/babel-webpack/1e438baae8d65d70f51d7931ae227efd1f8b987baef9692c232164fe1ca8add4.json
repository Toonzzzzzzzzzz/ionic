{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreFileUploaderHelper } from '@features/fileuploader/services/fileuploader-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreSync } from '@services/sync';\nimport { CoreDomUtils, ToastDuration } from '@services/utils/dom';\nimport { CoreForms } from '@singletons/form';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModAssignProvider, AddonModAssign, AddonModAssignSubmissionStatusValues } from '../../services/assign';\nimport { AddonModAssignHelper } from '../../services/assign-helper';\nimport { AddonModAssignOffline } from '../../services/assign-offline';\nimport { AddonModAssignSync } from '../../services/assign-sync';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../../core/components/file/file\";\nimport * as i4 from \"../../../../../core/components/loading/loading\";\nimport * as i5 from \"../../../../../core/components/timer/timer\";\nimport * as i6 from \"../../../../../core/directives/format-text\";\nimport * as i7 from \"../../../../../core/directives/content\";\nimport * as i8 from \"../../../../../core/directives/update-non-reactive-attributes\";\nimport * as i9 from \"@angular/forms\";\nimport * as i10 from \"@ionic/angular\";\nimport * as i11 from \"../../components/submission-plugin/submission-plugin\";\nimport * as i12 from \"@ngx-translate/core\";\nconst _c0 = [\"editSubmissionForm\"];\nconst _c1 = function () {\n  return [300, 900];\n};\nfunction AddonModAssignEditPage_ion_list_14_core_timer_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"core-timer\", 12);\n    i0.ɵɵlistener(\"finished\", function AddonModAssignEditPage_ion_list_14_core_timer_1_Template_core_timer_finished_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.timeUp());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"endTime\", ctx_r1.timeLimitEndTime)(\"timerText\", i0.ɵɵpipeBind1(1, 5, \"addon.mod_assign.assigntimeleft\"))(\"align\", \"center\")(\"timeLeftClassThreshold\", -1)(\"underTimeClassThresholds\", i0.ɵɵpureFunction0(7, _c1));\n  }\n}\nfunction AddonModAssignEditPage_ion_list_14_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 13)(1, \"ion-label\");\n    i0.ɵɵelement(2, \"core-format-text\", 14);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"text\", ctx_r2.activityInstructions)(\"component\", ctx_r2.component)(\"componentId\", ctx_r2.moduleId)(\"contextInstanceId\", ctx_r2.moduleId)(\"courseId\", ctx_r2.courseId);\n  }\n}\nfunction AddonModAssignEditPage_ion_list_14_ng_container_3_core_file_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-file\", 16);\n  }\n  if (rf & 2) {\n    const file_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"file\", file_r10)(\"component\", ctx_r9.component)(\"componentId\", ctx_r9.moduleId);\n  }\n}\nfunction AddonModAssignEditPage_ion_list_14_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AddonModAssignEditPage_ion_list_14_ng_container_3_core_file_1_Template, 1, 3, \"core-file\", 15);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.introAttachments);\n  }\n}\nfunction AddonModAssignEditPage_ion_list_14_ion_item_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 13)(1, \"ion-label\");\n    i0.ɵɵelement(2, \"core-format-text\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-checkbox\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function AddonModAssignEditPage_ion_list_14_ion_item_6_Template_ion_checkbox_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.submissionStatementAccepted = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"text\", ctx_r5.submissionStatement)(\"filter\", false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r5.submissionStatementAccepted);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r5.submissionStatementAccepted);\n  }\n}\nfunction AddonModAssignEditPage_ion_list_14_addon_mod_assign_submission_plugin_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"addon-mod-assign-submission-plugin\", 20);\n  }\n  if (rf & 2) {\n    const plugin_r13 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"assign\", ctx_r6.assign)(\"submission\", ctx_r6.userSubmission)(\"plugin\", plugin_r13)(\"edit\", true)(\"allowOffline\", ctx_r6.allowOffline);\n  }\n}\nfunction AddonModAssignEditPage_ion_list_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-list\");\n    i0.ɵɵtemplate(1, AddonModAssignEditPage_ion_list_14_core_timer_1_Template, 2, 8, \"core-timer\", 7);\n    i0.ɵɵtemplate(2, AddonModAssignEditPage_ion_list_14_ion_item_2_Template, 3, 5, \"ion-item\", 8);\n    i0.ɵɵtemplate(3, AddonModAssignEditPage_ion_list_14_ng_container_3_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵelementStart(4, \"form\", 9, 10);\n    i0.ɵɵtemplate(6, AddonModAssignEditPage_ion_list_14_ion_item_6_Template, 5, 4, \"ion-item\", 8);\n    i0.ɵɵtemplate(7, AddonModAssignEditPage_ion_list_14_addon_mod_assign_submission_plugin_7_Template, 1, 5, \"addon-mod-assign-submission-plugin\", 11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.timeLimitEndTime > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.activityInstructions);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.assign == null ? null : ctx_r0.assign.submissionattachments);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.submissionStatement);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.userSubmission.plugins);\n  }\n}\n/**\n * Page that allows adding or editing an assigment submission.\n */\nexport class AddonModAssignEditPage {\n  constructor(route) {\n    this.route = route;\n    this.allowOffline = false; // Whether offline is allowed.\n    this.submissionStatementAccepted = false; // Whether submission statement is accepted.\n    this.loaded = false; // Whether data has been loaded.\n    this.timeLimitEndTime = 0; // If time limit is enabled, the end time for the timer.\n    this.component = AddonModAssignProvider.COMPONENT;\n    this.isBlind = false; // Whether blind is used.\n    this.saveOffline = false; // Whether to save data in offline.\n    this.hasOffline = false; // Whether the assignment has offline data.\n    this.isDestroyed = false; // Whether the component has been destroyed.\n    this.forceLeave = false; // To allow leaving the page without checking for changes.\n    this.userId = CoreSites.getCurrentSiteUserId(); // Right now we can only edit current user's submissions.\n    this.editText = Translate.instant('addon.mod_assign.editsubmission');\n    this.title = this.editText;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    try {\n      this.moduleId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n      this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n      this.isBlind = !!CoreNavigator.getRouteNumberParam('blindId');\n    } catch (error) {\n      CoreDomUtils.showErrorModal(error);\n      CoreNavigator.back();\n      return;\n    }\n    this.fetchAssignment().finally(() => {\n      this.loaded = true;\n    });\n  }\n  /**\n   * Check if we can leave the page or not.\n   *\n   * @returns Resolved if we can leave it, rejected if not.\n   */\n  canLeave() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.forceLeave) {\n        return true;\n      }\n      // Check if data has changed.\n      const changed = yield _this.hasDataChanged();\n      if (changed) {\n        yield CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n      }\n      // Nothing has changed or user confirmed to leave. Clear temporary data from plugins.\n      AddonModAssignHelper.clearSubmissionPluginTmpData(_this.assign, _this.userSubmission, _this.getInputData());\n      CoreForms.triggerFormCancelledEvent(_this.formElement, CoreSites.getCurrentSiteId());\n      return true;\n    })();\n  }\n  /**\n   * Fetch assignment data.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchAssignment() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const currentUserId = CoreSites.getCurrentSiteUserId();\n      try {\n        var _submissionStatus$las, _submissionStatus$ass, _submissionStatus$ass2, _submissionStatus$ass3, _this2$userSubmission;\n        // Get assignment data.\n        _this2.assign = yield AddonModAssign.getAssignment(_this2.courseId, _this2.moduleId);\n        _this2.title = _this2.assign.name || _this2.title;\n        if (!_this2.isDestroyed) {\n          // Block the assignment.\n          CoreSync.blockOperation(AddonModAssignProvider.COMPONENT, _this2.assign.id);\n        }\n        // Wait for sync to be over (if any).\n        yield AddonModAssignSync.waitForSync(_this2.assign.id);\n        // Get submission status. Ignore cache to get the latest data.\n        const options = {\n          userId: _this2.userId,\n          isBlind: _this2.isBlind,\n          cmId: _this2.assign.cmid,\n          filter: false,\n          readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */\n        };\n\n        let submissionStatus;\n        try {\n          submissionStatus = yield AddonModAssign.getSubmissionStatus(_this2.assign.id, options);\n          _this2.userSubmission = AddonModAssign.getSubmissionObjectFromAttempt(_this2.assign, submissionStatus.lastattempt);\n        } catch (error) {\n          // Cannot connect. Get cached data.\n          options.filter = true;\n          options.readingStrategy = 1 /* CoreSitesReadingStrategy.PREFER_CACHE */;\n          submissionStatus = yield AddonModAssign.getSubmissionStatus(_this2.assign.id, options);\n          _this2.userSubmission = AddonModAssign.getSubmissionObjectFromAttempt(_this2.assign, submissionStatus.lastattempt);\n          // Check if the user can edit it in offline.\n          const canEditOffline = yield AddonModAssignHelper.canEditSubmissionOffline(_this2.assign, _this2.userSubmission);\n          if (!canEditOffline) {\n            // Submission cannot be edited in offline, reject.\n            _this2.allowOffline = false;\n            throw error;\n          }\n        }\n        if (!((_submissionStatus$las = submissionStatus.lastattempt) !== null && _submissionStatus$las !== void 0 && _submissionStatus$las.canedit)) {\n          // Can't edit. Reject.\n          throw new CoreError(Translate.instant('core.nopermissions', {\n            $a: _this2.editText\n          }));\n        }\n        submissionStatus = yield _this2.startSubmissionIfNeeded(submissionStatus, options);\n        if ((_submissionStatus$ass = submissionStatus.assignmentdata) !== null && _submissionStatus$ass !== void 0 && _submissionStatus$ass.activity) {\n          var _filteredSubmissionSt;\n          // There are activity instructions. Make sure to display it with filters applied.\n          const filteredSubmissionStatus = options.filter ? submissionStatus : yield AddonModAssign.getSubmissionStatus(_this2.assign.id, _objectSpread(_objectSpread({}, options), {}, {\n            filter: true\n          }));\n          _this2.activityInstructions = (_filteredSubmissionSt = filteredSubmissionStatus.assignmentdata) === null || _filteredSubmissionSt === void 0 ? void 0 : _filteredSubmissionSt.activity;\n        }\n        _this2.introAttachments = (_submissionStatus$ass2 = (_submissionStatus$ass3 = submissionStatus.assignmentdata) === null || _submissionStatus$ass3 === void 0 || (_submissionStatus$ass3 = _submissionStatus$ass3.attachments) === null || _submissionStatus$ass3 === void 0 ? void 0 : _submissionStatus$ass3.intro) !== null && _submissionStatus$ass2 !== void 0 ? _submissionStatus$ass2 : _this2.assign.introattachments;\n        _this2.allowOffline = true; // If offline isn't allowed we shouldn't have reached this point.\n        // Only show submission statement if we are editing our own submission.\n        if (_this2.assign.requiresubmissionstatement && !_this2.assign.submissiondrafts && _this2.userId == currentUserId) {\n          _this2.submissionStatement = _this2.assign.submissionstatement;\n        } else {\n          _this2.submissionStatement = undefined;\n        }\n        if (_this2.assign.timelimit && (_this2$userSubmission = _this2.userSubmission) !== null && _this2$userSubmission !== void 0 && _this2$userSubmission.timestarted) {\n          _this2.timeLimitEndTime = AddonModAssignHelper.calculateEndTime(_this2.assign, _this2.userSubmission);\n        } else {\n          _this2.timeLimitEndTime = 0;\n        }\n        try {\n          // Check if there's any offline data for this submission.\n          const offlineData = yield AddonModAssignOffline.getSubmission(_this2.assign.id, _this2.userId);\n          _this2.hasOffline = (offlineData === null || offlineData === void 0 ? void 0 : offlineData.plugindata) && Object.keys(offlineData.plugindata).length > 0;\n        } catch (_unused) {\n          // No offline data found.\n          _this2.hasOffline = false;\n        }\n        CoreAnalytics.logEvent({\n          type: CoreAnalyticsEventType.VIEW_ITEM,\n          ws: 'mod_assign_save_submission',\n          name: Translate.instant('addon.mod_assign.subpagetitle', {\n            contextname: _this2.assign.name,\n            subpage: Translate.instant('addon.mod_assign.editsubmission')\n          }),\n          data: {\n            id: _this2.assign.id,\n            category: 'assign'\n          },\n          url: `/mod/assign/view.php?action=editsubmission&id=${_this2.moduleId}`\n        });\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error getting assigment data.');\n        // Leave the player.\n        _this2.leaveWithoutCheck();\n      }\n    })();\n  }\n  /**\n   * Start the submission if needed.\n   *\n   * @param submissionStatus Current submission status.\n   * @param options Options.\n   * @returns Promise resolved with the new submission status if it changed, original submission status otherwise.\n   */\n  startSubmissionIfNeeded(submissionStatus, options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.assign || !_this3.assign.timelimit) {\n        // Submission only needs to be started if there's a timelimit.\n        return submissionStatus;\n      }\n      if (_this3.userSubmission && _this3.userSubmission.status !== AddonModAssignSubmissionStatusValues.NEW && _this3.userSubmission.status !== AddonModAssignSubmissionStatusValues.REOPENED) {\n        // There is an ongoing submission, no need to start it.\n        return submissionStatus;\n      }\n      yield AddonModAssign.startSubmission(_this3.assign.id);\n      CoreEvents.trigger(AddonModAssignProvider.STARTED_EVENT, {\n        assignmentId: _this3.assign.id\n      }, CoreSites.getCurrentSiteId());\n      // Submission started, update the submission status.\n      const newSubmissionStatus = yield AddonModAssign.getSubmissionStatus(_this3.assign.id, _objectSpread(_objectSpread({}, options), {}, {\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */ // Make sure not to use cache.\n      }));\n\n      _this3.userSubmission = AddonModAssign.getSubmissionObjectFromAttempt(_this3.assign, newSubmissionStatus.lastattempt);\n      return newSubmissionStatus;\n    })();\n  }\n  /**\n   * Get the input data.\n   *\n   * @returns Input data.\n   */\n  getInputData() {\n    return CoreForms.getDataFromForm(document.forms['addon-mod_assign-edit-form']);\n  }\n  /**\n   * Check if data has changed.\n   *\n   * @returns Promise resolved with boolean: whether data has changed.\n   */\n  hasDataChanged() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // Usually the hasSubmissionDataChanged call will be resolved inmediately, causing the modal to be shown just an instant.\n      // We'll wait a bit before showing it to prevent this \"blink\".\n      const modal = yield CoreDomUtils.showModalLoading();\n      const data = _this4.getInputData();\n      return AddonModAssignHelper.hasSubmissionDataChanged(_this4.assign, _this4.userSubmission, data).finally(() => {\n        modal.dismiss();\n      });\n    })();\n  }\n  /**\n   * Leave the view without checking for changes.\n   */\n  leaveWithoutCheck() {\n    this.forceLeave = true;\n    CoreNavigator.back();\n  }\n  /**\n   * Get data to submit based on the input data.\n   *\n   * @param inputData The input data.\n   * @returns Promise resolved with the data to submit.\n   */\n  prepareSubmissionData(inputData) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      // If there's offline data, always save it in offline.\n      _this5.saveOffline = _this5.hasOffline;\n      try {\n        return yield AddonModAssignHelper.prepareSubmissionPluginData(_this5.assign, _this5.userSubmission, inputData, _this5.hasOffline);\n      } catch (error) {\n        if (_this5.allowOffline && !_this5.saveOffline && !CoreUtils.isWebServiceError(error)) {\n          // Cannot submit in online, prepare for offline usage.\n          _this5.saveOffline = true;\n          return AddonModAssignHelper.prepareSubmissionPluginData(_this5.assign, _this5.userSubmission, inputData, true);\n        }\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Save the submission.\n   */\n  save() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // Check if data has changed.\n      const changed = yield _this6.hasDataChanged();\n      if (!changed) {\n        // Nothing to save, just go back.\n        _this6.leaveWithoutCheck();\n        return;\n      }\n      try {\n        yield _this6.saveSubmission();\n        _this6.leaveWithoutCheck();\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error saving submission.');\n      }\n    })();\n  }\n  /**\n   * Save the submission.\n   *\n   * @returns Promise resolved when done.\n   */\n  saveSubmission() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const inputData = _this7.getInputData();\n      if (_this7.submissionStatement && (!inputData.submissionstatement || inputData.submissionstatement === 'false')) {\n        throw Translate.instant('addon.mod_assign.acceptsubmissionstatement');\n      }\n      let modal = yield CoreDomUtils.showModalLoading();\n      let size = -1;\n      // Get size to ask for confirmation.\n      try {\n        size = yield AddonModAssignHelper.getSubmissionSizeForEdit(_this7.assign, _this7.userSubmission, inputData);\n      } catch (error) {\n        // Error calculating size, return -1.\n        size = -1;\n      }\n      modal.dismiss();\n      try {\n        // Confirm action.\n        yield CoreFileUploaderHelper.confirmUploadFile(size, true, _this7.allowOffline);\n        modal = yield CoreDomUtils.showModalLoading('core.sending', true);\n        const pluginData = yield _this7.prepareSubmissionData(inputData);\n        if (!Object.keys(pluginData).length) {\n          // Nothing to save.\n          return;\n        }\n        let sent;\n        if (_this7.saveOffline) {\n          // Save submission in offline.\n          sent = false;\n          yield AddonModAssignOffline.saveSubmission(_this7.assign.id, _this7.courseId, pluginData, _this7.userSubmission.timemodified, !_this7.assign.submissiondrafts, _this7.userId);\n        } else {\n          // Try to send it to server.\n          sent = yield AddonModAssign.saveSubmission(_this7.assign.id, _this7.courseId, pluginData, _this7.allowOffline, _this7.userSubmission.timemodified, !!_this7.assign.submissiondrafts, _this7.userId);\n        }\n        // Clear temporary data from plugins.\n        AddonModAssignHelper.clearSubmissionPluginTmpData(_this7.assign, _this7.userSubmission, inputData);\n        if (sent) {\n          CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, {\n            module: 'assign'\n          });\n        }\n        // Submission saved, trigger events.\n        CoreForms.triggerFormSubmittedEvent(_this7.formElement, sent, CoreSites.getCurrentSiteId());\n        CoreEvents.trigger(AddonModAssignProvider.SUBMISSION_SAVED_EVENT, {\n          assignmentId: _this7.assign.id,\n          submissionId: _this7.userSubmission.id,\n          userId: _this7.userId\n        }, CoreSites.getCurrentSiteId());\n        if (!_this7.assign.submissiondrafts) {\n          // No drafts allowed, so it was submitted. Trigger event.\n          CoreEvents.trigger(AddonModAssignProvider.SUBMITTED_FOR_GRADING_EVENT, {\n            assignmentId: _this7.assign.id,\n            submissionId: _this7.userSubmission.id,\n            userId: _this7.userId\n          }, CoreSites.getCurrentSiteId());\n        }\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  /**\n   * Function called when the time is up.\n   */\n  timeUp() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      _this8.timeUpToast = yield CoreDomUtils.showToastWithOptions({\n        message: Translate.instant('addon.mod_assign.caneditsubmission'),\n        duration: ToastDuration.STICKY,\n        buttons: [Translate.instant('core.dismiss')],\n        cssClass: 'core-danger-toast'\n      });\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$timeUpToast;\n    this.isDestroyed = true;\n    (_this$timeUpToast = this.timeUpToast) === null || _this$timeUpToast === void 0 || _this$timeUpToast.dismiss();\n    // Unblock the assignment.\n    if (this.assign) {\n      CoreSync.unblockOperation(AddonModAssignProvider.COMPONENT, this.assign.id);\n    }\n  }\n}\n_class = AddonModAssignEditPage;\n_class.ɵfac = function AddonModAssignEditPage_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-mod-assign-edit\"]],\n  viewQuery: function AddonModAssignEditPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formElement = _t.first);\n    }\n  },\n  decls: 15,\n  vars: 11,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [\"slot\", \"end\"], [\"fill\", \"clear\", 3, \"click\"], [3, \"hideUntil\"], [4, \"ngIf\"], [\"timeUpText\", \"00:00:00\", 3, \"endTime\", \"timerText\", \"align\", \"timeLeftClassThreshold\", \"underTimeClassThresholds\", \"finished\", 4, \"ngIf\"], [\"class\", \"ion-text-wrap\", 4, \"ngIf\"], [\"name\", \"addon-mod_assign-edit-form\"], [\"editSubmissionForm\", \"\"], [3, \"assign\", \"submission\", \"plugin\", \"edit\", \"allowOffline\", 4, \"ngFor\", \"ngForOf\"], [\"timeUpText\", \"00:00:00\", 3, \"endTime\", \"timerText\", \"align\", \"timeLeftClassThreshold\", \"underTimeClassThresholds\", \"finished\"], [1, \"ion-text-wrap\"], [\"contextLevel\", \"module\", 3, \"text\", \"component\", \"componentId\", \"contextInstanceId\", \"courseId\"], [3, \"file\", \"component\", \"componentId\", 4, \"ngFor\", \"ngForOf\"], [3, \"file\", \"component\", \"componentId\"], [3, \"text\", \"filter\"], [\"slot\", \"end\", \"name\", \"submissionstatement\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"hidden\", \"name\", \"submissionstatement\", 3, \"ngModel\"], [3, \"assign\", \"submission\", \"plugin\", \"edit\", \"allowOffline\"]],\n  template: function AddonModAssignEditPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵelement(7, \"core-format-text\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"ion-buttons\", 3)(9, \"ion-button\", 4);\n      i0.ɵɵlistener(\"click\", function AddonModAssignEditPage_Template_ion_button_click_9_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(10);\n      i0.ɵɵpipe(11, \"translate\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(12, \"ion-content\")(13, \"core-loading\", 5);\n      i0.ɵɵtemplate(14, AddonModAssignEditPage_ion_list_14_Template, 8, 5, \"ion-list\", 6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 7, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"text\", ctx.title)(\"contextInstanceId\", ctx.moduleId)(\"courseId\", ctx.courseId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(11, 9, \"core.save\"), \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.userSubmission && ctx.userSubmission.plugins && ctx.userSubmission.plugins.length);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.CoreFileComponent, i4.CoreLoadingComponent, i5.CoreTimerComponent, i6.CoreFormatTextDirective, i7.CoreContentDirective, i8.CoreUpdateNonReactiveAttributesDirective, i9.ɵNgNoValidate, i9.DefaultValueAccessor, i9.NgControlStatus, i9.NgControlStatusGroup, i9.NgModel, i9.NgForm, i10.IonButton, i10.IonButtons, i10.IonCheckbox, i10.IonContent, i10.IonHeader, i10.IonItem, i10.IonLabel, i10.IonList, i10.IonTitle, i10.IonToolbar, i10.BooleanValueAccessor, i10.IonBackButton, i11.AddonModAssignSubmissionPluginComponent, i12.TranslatePipe],\n  styles: [\"[_nghost-%COMP%]   core-timer.core-timer-under-300[_ngcontent-%COMP%] {\\n  --timer-background: var(--danger-tint);\\n  --timer-text-color: var(--danger-shade);\\n}\\n[_nghost-%COMP%]   core-timer.core-timer-under-900[_ngcontent-%COMP%] {\\n  --timer-background: var(--warning-tint);\\n  --timer-text-color: var(--warning-shade);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hZGRvbnMvbW9kL2Fzc2lnbi9wYWdlcy9lZGl0L2VkaXQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFUTtFQUNJLHNDQUFBO0VBQ0EsdUNBQUE7QUFEWjtBQUlRO0VBQ0ksdUNBQUE7RUFDQSx3Q0FBQTtBQUZaIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xuICAgIGNvcmUtdGltZXIge1xuICAgICAgICAmLmNvcmUtdGltZXItdW5kZXItMzAwIHtcbiAgICAgICAgICAgIC0tdGltZXItYmFja2dyb3VuZDogdmFyKC0tZGFuZ2VyLXRpbnQpO1xuICAgICAgICAgICAgLS10aW1lci10ZXh0LWNvbG9yOiB2YXIoLS1kYW5nZXItc2hhZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJi5jb3JlLXRpbWVyLXVuZGVyLTkwMCB7XG4gICAgICAgICAgICAtLXRpbWVyLWJhY2tncm91bmQ6IHZhcigtLXdhcm5pbmctdGludCk7XG4gICAgICAgICAgICAtLXRpbWVyLXRleHQtY29sb3I6IHZhcigtLXdhcm5pbmctc2hhZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["CoreError","CoreFileUploaderHelper","CoreNavigator","CoreSites","CoreSync","CoreDomUtils","ToastDuration","CoreForms","Translate","CoreEvents","AddonModAssignProvider","AddonModAssign","AddonModAssignSubmissionStatusValues","AddonModAssignHelper","AddonModAssignOffline","AddonModAssignSync","CoreUtils","CoreAnalytics","CoreAnalyticsEventType","i0","ɵɵelementStart","ɵɵlistener","AddonModAssignEditPage_ion_list_14_core_timer_1_Template_core_timer_finished_0_listener","ɵɵrestoreView","_r8","ctx_r7","ɵɵnextContext","ɵɵresetView","timeUp","ɵɵelementEnd","ɵɵproperty","ctx_r1","timeLimitEndTime","ɵɵpipeBind1","ɵɵpureFunction0","_c1","ɵɵelement","ɵɵadvance","ctx_r2","activityInstructions","component","moduleId","courseId","file_r10","ctx_r9","ɵɵelementContainerStart","ɵɵtemplate","AddonModAssignEditPage_ion_list_14_ng_container_3_core_file_1_Template","ɵɵelementContainerEnd","ctx_r3","introAttachments","AddonModAssignEditPage_ion_list_14_ion_item_6_Template_ion_checkbox_ngModelChange_3_listener","$event","_r12","ctx_r11","submissionStatementAccepted","ctx_r5","submissionStatement","ctx_r6","assign","userSubmission","plugin_r13","allowOffline","AddonModAssignEditPage_ion_list_14_core_timer_1_Template","AddonModAssignEditPage_ion_list_14_ion_item_2_Template","AddonModAssignEditPage_ion_list_14_ng_container_3_Template","AddonModAssignEditPage_ion_list_14_ion_item_6_Template","AddonModAssignEditPage_ion_list_14_addon_mod_assign_submission_plugin_7_Template","ctx_r0","submissionattachments","plugins","AddonModAssignEditPage","constructor","route","loaded","COMPONENT","isBlind","saveOffline","hasOffline","isDestroyed","forceLeave","userId","getCurrentSiteUserId","editText","instant","title","ngOnInit","getRequiredRouteNumberParam","getRouteNumberParam","error","showErrorModal","back","fetchAssignment","finally","canLeave","_this","_asyncToGenerator","changed","hasDataChanged","showConfirm","clearSubmissionPluginTmpData","getInputData","triggerFormCancelledEvent","formElement","getCurrentSiteId","_this2","currentUserId","_submissionStatus$las","_submissionStatus$ass","_submissionStatus$ass2","_submissionStatus$ass3","_this2$userSubmission","getAssignment","name","blockOperation","id","waitForSync","options","cmId","cmid","filter","readingStrategy","submissionStatus","getSubmissionStatus","getSubmissionObjectFromAttempt","lastattempt","canEditOffline","canEditSubmissionOffline","canedit","$a","startSubmissionIfNeeded","assignmentdata","activity","_filteredSubmissionSt","filteredSubmissionStatus","_objectSpread","attachments","intro","introattachments","requiresubmissionstatement","submissiondrafts","submissionstatement","undefined","timelimit","timestarted","calculateEndTime","offlineData","getSubmission","plugindata","Object","keys","length","_unused","logEvent","type","VIEW_ITEM","ws","contextname","subpage","data","category","url","showErrorModalDefault","leaveWithoutCheck","_this3","status","NEW","REOPENED","startSubmission","trigger","STARTED_EVENT","assignmentId","newSubmissionStatus","getDataFromForm","document","forms","_this4","modal","showModalLoading","hasSubmissionDataChanged","dismiss","prepareSubmissionData","inputData","_this5","prepareSubmissionPluginData","isWebServiceError","save","_this6","saveSubmission","_this7","size","getSubmissionSizeForEdit","confirmUploadFile","pluginData","sent","timemodified","ACTIVITY_DATA_SENT","module","triggerFormSubmittedEvent","SUBMISSION_SAVED_EVENT","submissionId","SUBMITTED_FOR_GRADING_EVENT","_this8","timeUpToast","showToastWithOptions","message","duration","STICKY","buttons","cssClass","ngOnDestroy","_this$timeUpToast","unblockOperation","ɵɵdirectiveInject","i1","ActivatedRoute","selectors","viewQuery","AddonModAssignEditPage_Query","rf","ctx","AddonModAssignEditPage_Template_ion_button_click_9_listener","ɵɵtext","AddonModAssignEditPage_ion_list_14_Template","ɵɵtextInterpolate1"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/pages/edit/edit.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/pages/edit/edit.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreFileUploaderHelper } from '@features/fileuploader/services/fileuploader-helper';\nimport { CanLeave } from '@guards/can-leave';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreSync } from '@services/sync';\nimport { CoreDomUtils, ToastDuration } from '@services/utils/dom';\nimport { CoreFormFields, CoreForms } from '@singletons/form';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport {\n    AddonModAssignAssign,\n    AddonModAssignSubmission,\n    AddonModAssignProvider,\n    AddonModAssign,\n    AddonModAssignSubmissionStatusOptions,\n    AddonModAssignGetSubmissionStatusWSResponse,\n    AddonModAssignSavePluginData,\n    AddonModAssignSubmissionStatusValues,\n} from '../../services/assign';\nimport { AddonModAssignHelper } from '../../services/assign-helper';\nimport { AddonModAssignOffline } from '../../services/assign-offline';\nimport { AddonModAssignSync } from '../../services/assign-sync';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSExternalFile } from '@services/ws';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that allows adding or editing an assigment submission.\n */\n@Component({\n    selector: 'page-addon-mod-assign-edit',\n    templateUrl: 'edit.html',\n    styleUrls: ['edit.scss'],\n})\nexport class AddonModAssignEditPage implements OnInit, OnDestroy, CanLeave {\n\n    @ViewChild('editSubmissionForm') formElement?: ElementRef;\n\n    title: string; // Title to display.\n    assign?: AddonModAssignAssign; // Assignment.\n    courseId!: number; // Course ID the assignment belongs to.\n    moduleId!: number; // Module ID the submission belongs to.\n    userSubmission?: AddonModAssignSubmission; // The user submission.\n    allowOffline = false; // Whether offline is allowed.\n    submissionStatement?: string; // The submission statement.\n    submissionStatementAccepted = false; // Whether submission statement is accepted.\n    loaded = false; // Whether data has been loaded.\n    timeLimitEndTime = 0; // If time limit is enabled, the end time for the timer.\n    activityInstructions?: string; // Activity instructions.\n    introAttachments?: CoreWSExternalFile[]; // Intro attachments.\n    component = AddonModAssignProvider.COMPONENT;\n\n    protected userId: number; // User doing the submission.\n    protected isBlind = false; // Whether blind is used.\n    protected editText: string; // \"Edit submission\" translated text.\n    protected saveOffline = false; // Whether to save data in offline.\n    protected hasOffline = false; // Whether the assignment has offline data.\n    protected isDestroyed = false; // Whether the component has been destroyed.\n    protected forceLeave = false; // To allow leaving the page without checking for changes.\n    protected timeUpToast?: HTMLIonToastElement;\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n        this.userId = CoreSites.getCurrentSiteUserId(); // Right now we can only edit current user's submissions.\n        this.editText = Translate.instant('addon.mod_assign.editsubmission');\n        this.title = this.editText;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        try {\n            this.moduleId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.isBlind = !!CoreNavigator.getRouteNumberParam('blindId');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.fetchAssignment().finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Check if we can leave the page or not.\n     *\n     * @returns Resolved if we can leave it, rejected if not.\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.forceLeave) {\n            return true;\n        }\n\n        // Check if data has changed.\n        const changed = await this.hasDataChanged();\n        if (changed) {\n            await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n        }\n\n        // Nothing has changed or user confirmed to leave. Clear temporary data from plugins.\n        AddonModAssignHelper.clearSubmissionPluginTmpData(this.assign!, this.userSubmission, this.getInputData());\n\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n\n        return true;\n    }\n\n    /**\n     * Fetch assignment data.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchAssignment(): Promise<void> {\n        const currentUserId = CoreSites.getCurrentSiteUserId();\n\n        try {\n            // Get assignment data.\n            this.assign = await AddonModAssign.getAssignment(this.courseId, this.moduleId);\n            this.title = this.assign.name || this.title;\n\n            if (!this.isDestroyed) {\n                // Block the assignment.\n                CoreSync.blockOperation(AddonModAssignProvider.COMPONENT, this.assign.id);\n            }\n\n            // Wait for sync to be over (if any).\n            await AddonModAssignSync.waitForSync(this.assign.id);\n\n            // Get submission status. Ignore cache to get the latest data.\n            const options: AddonModAssignSubmissionStatusOptions = {\n                userId: this.userId,\n                isBlind: this.isBlind,\n                cmId: this.assign.cmid,\n                filter: false,\n                readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            };\n\n            let submissionStatus: AddonModAssignGetSubmissionStatusWSResponse;\n            try {\n                submissionStatus = await AddonModAssign.getSubmissionStatus(this.assign.id, options);\n                this.userSubmission =\n                    AddonModAssign.getSubmissionObjectFromAttempt(this.assign, submissionStatus.lastattempt);\n            } catch (error) {\n                // Cannot connect. Get cached data.\n                options.filter = true;\n                options.readingStrategy = CoreSitesReadingStrategy.PREFER_CACHE;\n\n                submissionStatus = await AddonModAssign.getSubmissionStatus(this.assign.id, options);\n                this.userSubmission =\n                    AddonModAssign.getSubmissionObjectFromAttempt(this.assign, submissionStatus.lastattempt);\n\n                // Check if the user can edit it in offline.\n                const canEditOffline =\n                    await AddonModAssignHelper.canEditSubmissionOffline(this.assign, this.userSubmission);\n                if (!canEditOffline) {\n                    // Submission cannot be edited in offline, reject.\n                    this.allowOffline = false;\n                    throw error;\n                }\n            }\n\n            if (!submissionStatus.lastattempt?.canedit) {\n                // Can't edit. Reject.\n                throw new CoreError(Translate.instant('core.nopermissions', { $a: this.editText }));\n            }\n\n            submissionStatus = await this.startSubmissionIfNeeded(submissionStatus, options);\n\n            if (submissionStatus.assignmentdata?.activity) {\n                // There are activity instructions. Make sure to display it with filters applied.\n                const filteredSubmissionStatus = options.filter ?\n                    submissionStatus :\n                    await AddonModAssign.getSubmissionStatus(this.assign.id, {\n                        ...options,\n                        filter: true,\n                    });\n\n                this.activityInstructions = filteredSubmissionStatus.assignmentdata?.activity;\n            }\n\n            this.introAttachments = submissionStatus.assignmentdata?.attachments?.intro ?? this.assign.introattachments;\n\n            this.allowOffline = true; // If offline isn't allowed we shouldn't have reached this point.\n            // Only show submission statement if we are editing our own submission.\n            if (this.assign.requiresubmissionstatement && !this.assign.submissiondrafts && this.userId == currentUserId) {\n                this.submissionStatement = this.assign.submissionstatement;\n            } else {\n                this.submissionStatement = undefined;\n            }\n\n            if (this.assign.timelimit && this.userSubmission?.timestarted) {\n                this.timeLimitEndTime = AddonModAssignHelper.calculateEndTime(this.assign, this.userSubmission);\n            } else {\n                this.timeLimitEndTime = 0;\n            }\n\n            try {\n                // Check if there's any offline data for this submission.\n                const offlineData = await AddonModAssignOffline.getSubmission(this.assign.id, this.userId);\n\n                this.hasOffline = offlineData?.plugindata && Object.keys(offlineData.plugindata).length > 0;\n            } catch {\n                // No offline data found.\n                this.hasOffline = false;\n            }\n\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM,\n                ws: 'mod_assign_save_submission',\n                name: Translate.instant('addon.mod_assign.subpagetitle', {\n                    contextname: this.assign.name,\n                    subpage: Translate.instant('addon.mod_assign.editsubmission'),\n                }),\n                data: { id: this.assign.id, category: 'assign' },\n                url: `/mod/assign/view.php?action=editsubmission&id=${this.moduleId}`,\n            });\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting assigment data.');\n\n            // Leave the player.\n            this.leaveWithoutCheck();\n        }\n    }\n\n    /**\n     * Start the submission if needed.\n     *\n     * @param submissionStatus Current submission status.\n     * @param options Options.\n     * @returns Promise resolved with the new submission status if it changed, original submission status otherwise.\n     */\n    protected async startSubmissionIfNeeded(\n        submissionStatus: AddonModAssignGetSubmissionStatusWSResponse,\n        options: AddonModAssignSubmissionStatusOptions,\n    ): Promise<AddonModAssignGetSubmissionStatusWSResponse> {\n        if (!this.assign || !this.assign.timelimit) {\n            // Submission only needs to be started if there's a timelimit.\n            return submissionStatus;\n        }\n\n        if (this.userSubmission && this.userSubmission.status !== AddonModAssignSubmissionStatusValues.NEW &&\n            this.userSubmission.status !== AddonModAssignSubmissionStatusValues.REOPENED) {\n            // There is an ongoing submission, no need to start it.\n            return submissionStatus;\n        }\n\n        await AddonModAssign.startSubmission(this.assign.id);\n\n        CoreEvents.trigger(AddonModAssignProvider.STARTED_EVENT, {\n            assignmentId: this.assign.id,\n        }, CoreSites.getCurrentSiteId());\n\n        // Submission started, update the submission status.\n        const newSubmissionStatus = await AddonModAssign.getSubmissionStatus(this.assign.id, {\n            ...options,\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK, // Make sure not to use cache.\n        });\n\n        this.userSubmission = AddonModAssign.getSubmissionObjectFromAttempt(this.assign, newSubmissionStatus.lastattempt);\n\n        return newSubmissionStatus;\n    }\n\n    /**\n     * Get the input data.\n     *\n     * @returns Input data.\n     */\n    protected getInputData(): CoreFormFields {\n        return CoreForms.getDataFromForm(document.forms['addon-mod_assign-edit-form']);\n    }\n\n    /**\n     * Check if data has changed.\n     *\n     * @returns Promise resolved with boolean: whether data has changed.\n     */\n    protected async hasDataChanged(): Promise<boolean> {\n        // Usually the hasSubmissionDataChanged call will be resolved inmediately, causing the modal to be shown just an instant.\n        // We'll wait a bit before showing it to prevent this \"blink\".\n        const modal = await CoreDomUtils.showModalLoading();\n\n        const data = this.getInputData();\n\n        return AddonModAssignHelper.hasSubmissionDataChanged(this.assign!, this.userSubmission, data).finally(() => {\n            modal.dismiss();\n        });\n    }\n\n    /**\n     * Leave the view without checking for changes.\n     */\n    protected leaveWithoutCheck(): void {\n        this.forceLeave = true;\n        CoreNavigator.back();\n    }\n\n    /**\n     * Get data to submit based on the input data.\n     *\n     * @param inputData The input data.\n     * @returns Promise resolved with the data to submit.\n     */\n    protected async prepareSubmissionData(inputData: CoreFormFields): Promise<AddonModAssignSavePluginData> {\n        // If there's offline data, always save it in offline.\n        this.saveOffline = this.hasOffline;\n\n        try {\n            return await AddonModAssignHelper.prepareSubmissionPluginData(\n                this.assign!,\n                this.userSubmission,\n                inputData,\n                this.hasOffline,\n            );\n        } catch (error) {\n            if (this.allowOffline && !this.saveOffline && !CoreUtils.isWebServiceError(error)) {\n                // Cannot submit in online, prepare for offline usage.\n                this.saveOffline = true;\n\n                return AddonModAssignHelper.prepareSubmissionPluginData(\n                    this.assign!,\n                    this.userSubmission,\n                    inputData,\n                    true,\n                );\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     * Save the submission.\n     */\n    async save(): Promise<void> {\n        // Check if data has changed.\n        const changed = await this.hasDataChanged();\n        if (!changed) {\n            // Nothing to save, just go back.\n            this.leaveWithoutCheck();\n\n            return;\n        }\n        try {\n            await this.saveSubmission();\n            this.leaveWithoutCheck();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error saving submission.');\n        }\n    }\n\n    /**\n     * Save the submission.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async saveSubmission(): Promise<void> {\n        const inputData = this.getInputData();\n\n        if (this.submissionStatement && (!inputData.submissionstatement || inputData.submissionstatement === 'false')) {\n            throw Translate.instant('addon.mod_assign.acceptsubmissionstatement');\n        }\n\n        let modal = await CoreDomUtils.showModalLoading();\n        let size = -1;\n\n        // Get size to ask for confirmation.\n        try {\n            size = await AddonModAssignHelper.getSubmissionSizeForEdit(this.assign!, this.userSubmission!, inputData);\n        } catch (error) {\n            // Error calculating size, return -1.\n            size = -1;\n        }\n\n        modal.dismiss();\n\n        try {\n            // Confirm action.\n            await CoreFileUploaderHelper.confirmUploadFile(size, true, this.allowOffline);\n\n            modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n            const pluginData = await this.prepareSubmissionData(inputData);\n            if (!Object.keys(pluginData).length) {\n                // Nothing to save.\n                return;\n            }\n\n            let sent: boolean;\n\n            if (this.saveOffline) {\n                // Save submission in offline.\n                sent = false;\n                await AddonModAssignOffline.saveSubmission(\n                    this.assign!.id,\n                    this.courseId,\n                    pluginData,\n                    this.userSubmission!.timemodified,\n                    !this.assign!.submissiondrafts,\n                    this.userId,\n                );\n            } else {\n                // Try to send it to server.\n                sent = await AddonModAssign.saveSubmission(\n                    this.assign!.id,\n                    this.courseId,\n                    pluginData,\n                    this.allowOffline,\n                    this.userSubmission!.timemodified,\n                    !!this.assign!.submissiondrafts,\n                    this.userId,\n                );\n            }\n\n            // Clear temporary data from plugins.\n            AddonModAssignHelper.clearSubmissionPluginTmpData(this.assign!, this.userSubmission, inputData);\n\n            if (sent) {\n                CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'assign' });\n            }\n\n            // Submission saved, trigger events.\n            CoreForms.triggerFormSubmittedEvent(this.formElement, sent, CoreSites.getCurrentSiteId());\n\n            CoreEvents.trigger(\n                AddonModAssignProvider.SUBMISSION_SAVED_EVENT,\n                {\n                    assignmentId: this.assign!.id,\n                    submissionId: this.userSubmission!.id,\n                    userId: this.userId,\n                },\n                CoreSites.getCurrentSiteId(),\n            );\n\n            if (!this.assign!.submissiondrafts) {\n                // No drafts allowed, so it was submitted. Trigger event.\n                CoreEvents.trigger(\n                    AddonModAssignProvider.SUBMITTED_FOR_GRADING_EVENT,\n                    {\n                        assignmentId: this.assign!.id,\n                        submissionId: this.userSubmission!.id,\n                        userId: this.userId,\n                    },\n                    CoreSites.getCurrentSiteId(),\n                );\n            }\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Function called when the time is up.\n     */\n    async timeUp(): Promise<void> {\n        this.timeUpToast = await CoreDomUtils.showToastWithOptions({\n            message: Translate.instant('addon.mod_assign.caneditsubmission'),\n            duration: ToastDuration.STICKY,\n            buttons: [Translate.instant('core.dismiss')],\n            cssClass: 'core-danger-toast',\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.isDestroyed = true;\n        this.timeUpToast?.dismiss();\n\n        // Unblock the assignment.\n        if (this.assign) {\n            CoreSync.unblockOperation(AddonModAssignProvider.COMPONENT, this.assign.id);\n        }\n    }\n\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>\n                <core-format-text [text]=\"title\" contextLevel=\"module\" [contextInstanceId]=\"moduleId\" [courseId]=\"courseId\" />\n            </h1>\n        </ion-title>\n        <ion-buttons slot=\"end\">\n            <ion-button fill=\"clear\" (click)=\"save()\">\n                {{ 'core.save' | translate }}\n            </ion-button>\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <core-loading [hideUntil]=\"loaded\">\n        <ion-list *ngIf=\"userSubmission && userSubmission.plugins && userSubmission.plugins.length\">\n            <!-- @todo plagiarism_print_disclosure -->\n            <core-timer *ngIf=\"timeLimitEndTime > 0\" [endTime]=\"timeLimitEndTime\" (finished)=\"timeUp()\" timeUpText=\"00:00:00\"\n                [timerText]=\"'addon.mod_assign.assigntimeleft' | translate\" [align]=\"'center'\" [timeLeftClassThreshold]=\"-1\"\n                [underTimeClassThresholds]=\"[300, 900]\" />\n\n            <!-- Assign activity instructions and attachments if needed. -->\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"activityInstructions\">\n                <ion-label>\n                    <core-format-text [text]=\"activityInstructions\" [component]=\"component\" [componentId]=\"moduleId\" contextLevel=\"module\"\n                        [contextInstanceId]=\"moduleId\" [courseId]=\"courseId\" />\n                </ion-label>\n            </ion-item>\n\n            <ng-container *ngIf=\"assign?.submissionattachments\">\n                <core-file *ngFor=\"let file of introAttachments\" [file]=\"file\" [component]=\"component\" [componentId]=\"moduleId\" />\n            </ng-container>\n\n            <form name=\"addon-mod_assign-edit-form\" #editSubmissionForm>\n                <!-- Submission statement. -->\n                <ion-item class=\"ion-text-wrap\" *ngIf=\"submissionStatement\">\n                    <ion-label>\n                        <core-format-text [text]=\"submissionStatement\" [filter]=\"false\" />\n                    </ion-label>\n                    <ion-checkbox slot=\"end\" name=\"submissionstatement\" [(ngModel)]=\"submissionStatementAccepted\" />\n                    <!-- ion-checkbox doesn't use an input. Create a hidden input to hold the value. -->\n                    <input type=\"hidden\" [ngModel]=\"submissionStatementAccepted\" name=\"submissionstatement\">\n                </ion-item>\n\n                <addon-mod-assign-submission-plugin *ngFor=\"let plugin of userSubmission.plugins\" [assign]=\"assign\"\n                    [submission]=\"userSubmission\" [plugin]=\"plugin\" [edit]=\"true\" [allowOffline]=\"allowOffline\" />\n            </form>\n        </ion-list>\n    </core-loading>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}