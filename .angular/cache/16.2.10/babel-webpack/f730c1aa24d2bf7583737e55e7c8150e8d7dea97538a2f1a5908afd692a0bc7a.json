{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModQuiz } from '../quiz';\nimport { AddonModQuizHelper } from '../quiz-helper';\nimport { isSafeNumber } from '@/core/utils/types';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for quiz push notifications clicks.\n */\nexport class AddonModQuizPushClickHandlerService {\n  constructor() {\n    this.name = 'AddonModQuizPushClickHandler';\n    this.priority = 200;\n    this.featureName = 'CoreCourseModuleDelegate_AddonModQuiz';\n    this.SUPPORTED_NAMES = ['submission', 'confirmation', 'attempt_overdue'];\n  }\n  /**\n   * Check if a notification click is handled by this handler.\n   *\n   * @param notification The notification to check.\n   * @returns Whether the notification click is handled by this handler\n   */\n  handles(notification) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _notification$name, _notification$customd;\n      return CoreUtils.isTrueOrOne(notification.notif) && notification.moodlecomponent == 'mod_quiz' && _this.SUPPORTED_NAMES.indexOf((_notification$name = notification.name) !== null && _notification$name !== void 0 ? _notification$name : '') !== -1 && !!((_notification$customd = notification.customdata) !== null && _notification$customd !== void 0 && _notification$customd.instance || notification.contexturl);\n    })();\n  }\n  /**\n   * Handle the notification click.\n   *\n   * @param notification The notification to check.\n   * @returns Promise resolved when done.\n   */\n  handleClick(notification) {\n    return _asyncToGenerator(function* () {\n      const contextUrlParams = CoreUrlUtils.extractUrlParams(notification.contexturl || '');\n      const data = notification.customdata || {};\n      const courseId = Number(notification.courseid);\n      if (notification.name === 'submission' && data.instance !== undefined && contextUrlParams.attempt !== undefined && contextUrlParams.page !== undefined) {\n        // A student made a submission, go to view the attempt.\n        return AddonModQuizHelper.handleReviewLink(Number(contextUrlParams.attempt), Number(contextUrlParams.page), Number(data.instance), notification.site);\n      }\n      // Open the activity.\n      const moduleId = Number(contextUrlParams.id);\n      if (!isSafeNumber(moduleId)) {\n        return;\n      }\n      yield CoreUtils.ignoreErrors(AddonModQuiz.invalidateContent(moduleId, courseId, notification.site));\n      return CoreCourseHelper.navigateToModule(moduleId, {\n        courseId,\n        siteId: notification.site\n      });\n    })();\n  }\n}\n_class = AddonModQuizPushClickHandlerService;\n_class.ɵfac = function AddonModQuizPushClickHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModQuizPushClickHandler = makeSingleton(AddonModQuizPushClickHandlerService);","map":{"version":3,"names":["CoreCourseHelper","CoreUrlUtils","CoreUtils","makeSingleton","AddonModQuiz","AddonModQuizHelper","isSafeNumber","AddonModQuizPushClickHandlerService","constructor","name","priority","featureName","SUPPORTED_NAMES","handles","notification","_this","_asyncToGenerator","_notification$name","_notification$customd","isTrueOrOne","notif","moodlecomponent","indexOf","customdata","instance","contexturl","handleClick","contextUrlParams","extractUrlParams","data","courseId","Number","courseid","undefined","attempt","page","handleReviewLink","site","moduleId","id","ignoreErrors","invalidateContent","navigateToModule","siteId","factory","ɵfac","providedIn","AddonModQuizPushClickHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/quiz/services/handlers/push-click.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CorePushNotificationsClickHandler } from '@features/pushnotifications/services/push-delegate';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModQuiz } from '../quiz';\nimport { AddonModQuizHelper } from '../quiz-helper';\nimport { isSafeNumber } from '@/core/utils/types';\n\n/**\n * Handler for quiz push notifications clicks.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModQuizPushClickHandlerService implements CorePushNotificationsClickHandler {\n\n    name = 'AddonModQuizPushClickHandler';\n    priority = 200;\n    featureName = 'CoreCourseModuleDelegate_AddonModQuiz';\n\n    protected readonly SUPPORTED_NAMES = ['submission', 'confirmation', 'attempt_overdue'];\n\n    /**\n     * Check if a notification click is handled by this handler.\n     *\n     * @param notification The notification to check.\n     * @returns Whether the notification click is handled by this handler\n     */\n    async handles(notification: AddonModQuizPushNotificationData): Promise<boolean> {\n        return CoreUtils.isTrueOrOne(notification.notif) && notification.moodlecomponent == 'mod_quiz' &&\n                this.SUPPORTED_NAMES.indexOf(notification.name ?? '') !== -1 &&\n                !!(notification.customdata?.instance || notification.contexturl);\n    }\n\n    /**\n     * Handle the notification click.\n     *\n     * @param notification The notification to check.\n     * @returns Promise resolved when done.\n     */\n    async handleClick(notification: AddonModQuizPushNotificationData): Promise<void> {\n        const contextUrlParams = CoreUrlUtils.extractUrlParams(notification.contexturl || '');\n        const data = notification.customdata || {};\n        const courseId = Number(notification.courseid);\n\n        if (\n            notification.name === 'submission' &&\n            data.instance !== undefined &&\n            contextUrlParams.attempt !== undefined &&\n            contextUrlParams.page !== undefined\n        ) {\n            // A student made a submission, go to view the attempt.\n            return AddonModQuizHelper.handleReviewLink(\n                Number(contextUrlParams.attempt),\n                Number(contextUrlParams.page),\n                Number(data.instance),\n                notification.site,\n            );\n        }\n\n        // Open the activity.\n        const moduleId = Number(contextUrlParams.id);\n        if (!isSafeNumber(moduleId)) {\n            return;\n        }\n\n        await CoreUtils.ignoreErrors(AddonModQuiz.invalidateContent(moduleId, courseId, notification.site));\n\n        return CoreCourseHelper.navigateToModule(moduleId, {\n            courseId,\n            siteId: notification.site,\n        });\n    }\n\n}\n\nexport const AddonModQuizPushClickHandler = makeSingleton(AddonModQuizPushClickHandlerService);\n\ntype AddonModQuizPushNotificationData = CorePushNotificationsNotificationBasicData & {\n    contexturl?: string;\n    courseid?: number | string;\n};\n"],"mappings":";;AAgBA,SAASA,gBAAgB,QAAQ,yCAAyC;AAG1E,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,YAAY,QAAQ,SAAS;AACtC,SAASC,kBAAkB,QAAQ,gBAAgB;AACnD,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;;;AAIA,OAAM,MAAOC,mCAAmC;EADhDC,YAAA;IAGI,KAAAC,IAAI,GAAG,8BAA8B;IACrC,KAAAC,QAAQ,GAAG,GAAG;IACd,KAAAC,WAAW,GAAG,uCAAuC;IAElC,KAAAC,eAAe,GAAG,CAAC,YAAY,EAAE,cAAc,EAAE,iBAAiB,CAAC;;EAEtF;;;;;;EAMMC,OAAOA,CAACC,YAA8C;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAAA,IAAAC,kBAAA,EAAAC,qBAAA;MACxD,OAAOhB,SAAS,CAACiB,WAAW,CAACL,YAAY,CAACM,KAAK,CAAC,IAAIN,YAAY,CAACO,eAAe,IAAI,UAAU,IACtFN,KAAI,CAACH,eAAe,CAACU,OAAO,EAAAL,kBAAA,GAACH,YAAY,CAACL,IAAI,cAAAQ,kBAAA,cAAAA,kBAAA,GAAI,EAAE,CAAC,KAAK,CAAC,CAAC,IAC5D,CAAC,EAAE,CAAAC,qBAAA,GAAAJ,YAAY,CAACS,UAAU,cAAAL,qBAAA,eAAvBA,qBAAA,CAAyBM,QAAQ,IAAIV,YAAY,CAACW,UAAU,CAAC;IAAC;EAC7E;EAEA;;;;;;EAMMC,WAAWA,CAACZ,YAA8C;IAAA,OAAAE,iBAAA;MAC5D,MAAMW,gBAAgB,GAAG1B,YAAY,CAAC2B,gBAAgB,CAACd,YAAY,CAACW,UAAU,IAAI,EAAE,CAAC;MACrF,MAAMI,IAAI,GAAGf,YAAY,CAACS,UAAU,IAAI,EAAE;MAC1C,MAAMO,QAAQ,GAAGC,MAAM,CAACjB,YAAY,CAACkB,QAAQ,CAAC;MAE9C,IACIlB,YAAY,CAACL,IAAI,KAAK,YAAY,IAClCoB,IAAI,CAACL,QAAQ,KAAKS,SAAS,IAC3BN,gBAAgB,CAACO,OAAO,KAAKD,SAAS,IACtCN,gBAAgB,CAACQ,IAAI,KAAKF,SAAS,EACrC;QACE;QACA,OAAO5B,kBAAkB,CAAC+B,gBAAgB,CACtCL,MAAM,CAACJ,gBAAgB,CAACO,OAAO,CAAC,EAChCH,MAAM,CAACJ,gBAAgB,CAACQ,IAAI,CAAC,EAC7BJ,MAAM,CAACF,IAAI,CAACL,QAAQ,CAAC,EACrBV,YAAY,CAACuB,IAAI,CACpB;;MAGL;MACA,MAAMC,QAAQ,GAAGP,MAAM,CAACJ,gBAAgB,CAACY,EAAE,CAAC;MAC5C,IAAI,CAACjC,YAAY,CAACgC,QAAQ,CAAC,EAAE;QACzB;;MAGJ,MAAMpC,SAAS,CAACsC,YAAY,CAACpC,YAAY,CAACqC,iBAAiB,CAACH,QAAQ,EAAER,QAAQ,EAAEhB,YAAY,CAACuB,IAAI,CAAC,CAAC;MAEnG,OAAOrC,gBAAgB,CAAC0C,gBAAgB,CAACJ,QAAQ,EAAE;QAC/CR,QAAQ;QACRa,MAAM,EAAE7B,YAAY,CAACuB;OACxB,CAAC;IAAC;EACP;;SA1DS9B,mCAAmC;;mBAAnCA,MAAmC;AAAA;;SAAnCA,MAAmC;EAAAqC,OAAA,EAAnCrC,MAAmC,CAAAsC,IAAA;EAAAC,UAAA,EADtB;AAAM;AA+DhC,OAAO,MAAMC,4BAA4B,GAAG5C,aAAa,CAACI,mCAAmC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}