{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton } from '@singletons';\nimport { CoreSites } from '@services/sites';\nimport { MANUAL_COMPLETION_TABLE } from './database/course';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to handle offline data for courses.\n */\nexport class CoreCourseOfflineProvider {\n  /**\n   * Delete a manual completion stored.\n   *\n   * @param cmId The module ID to remove the completion.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  deleteManualCompletion(cmId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.getDb().deleteRecords(MANUAL_COMPLETION_TABLE, {\n        cmid: cmId\n      });\n    })();\n  }\n  /**\n   * Get all offline manual completions for a certain course.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the list of completions.\n   */\n  getAllManualCompletions(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(MANUAL_COMPLETION_TABLE);\n    })();\n  }\n  /**\n   * Get all offline manual completions for a certain course.\n   *\n   * @param courseId Course ID the module belongs to.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the list of completions.\n   */\n  getCourseManualCompletions(courseId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(MANUAL_COMPLETION_TABLE, {\n        courseid: courseId\n      });\n    })();\n  }\n  /**\n   * Get the offline manual completion for a certain module.\n   *\n   * @param cmId The module ID to remove the completion.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the completion, rejected if failure or not found.\n   */\n  getManualCompletion(cmId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecord(MANUAL_COMPLETION_TABLE, {\n        cmid: cmId\n      });\n    })();\n  }\n  /**\n   * Offline version for manually marking a module as completed.\n   *\n   * @param cmId The module ID to store the completion.\n   * @param completed Whether the module is completed or not.\n   * @param courseId Course ID the module belongs to.\n   * @param courseName Not used since 4.0.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when completion is successfully stored.\n   */\n  markCompletedManually(cmId, completed, courseId, courseName, siteId) {\n    return _asyncToGenerator(function* () {\n      // Store the offline data.\n      const site = yield CoreSites.getSite(siteId);\n      const entry = {\n        cmid: cmId,\n        completed: completed ? 1 : 0,\n        courseid: courseId,\n        timecompleted: Date.now()\n      };\n      yield site.getDb().insertRecord(MANUAL_COMPLETION_TABLE, entry);\n      return {\n        status: true,\n        offline: true\n      };\n    })();\n  }\n}\n_class = CoreCourseOfflineProvider;\n_class.ɵfac = function CoreCourseOfflineProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreCourseOffline = makeSingleton(CoreCourseOfflineProvider);","map":{"version":3,"names":["makeSingleton","CoreSites","MANUAL_COMPLETION_TABLE","CoreCourseOfflineProvider","deleteManualCompletion","cmId","siteId","_asyncToGenerator","site","getSite","getDb","deleteRecords","cmid","getAllManualCompletions","getRecords","getCourseManualCompletions","courseId","courseid","getManualCompletion","getRecord","markCompletedManually","completed","courseName","entry","timecompleted","Date","now","insertRecord","status","offline","factory","ɵfac","providedIn","CoreCourseOffline"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/services/course-offline.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { makeSingleton } from '@singletons';\nimport { CoreSites } from '@services/sites';\nimport { CoreCourseManualCompletionDBRecord, MANUAL_COMPLETION_TABLE } from './database/course';\nimport { CoreStatusWithWarningsWSResponse } from '@services/ws';\n\n/**\n * Service to handle offline data for courses.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreCourseOfflineProvider {\n\n    /**\n     * Delete a manual completion stored.\n     *\n     * @param cmId The module ID to remove the completion.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async deleteManualCompletion(cmId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.getDb().deleteRecords(MANUAL_COMPLETION_TABLE, { cmid: cmId });\n    }\n\n    /**\n     * Get all offline manual completions for a certain course.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the list of completions.\n     */\n    async getAllManualCompletions(siteId?: string): Promise<CoreCourseManualCompletionDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(MANUAL_COMPLETION_TABLE);\n    }\n\n    /**\n     * Get all offline manual completions for a certain course.\n     *\n     * @param courseId Course ID the module belongs to.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the list of completions.\n     */\n    async getCourseManualCompletions(courseId: number, siteId?: string): Promise<CoreCourseManualCompletionDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(MANUAL_COMPLETION_TABLE, { courseid: courseId });\n    }\n\n    /**\n     * Get the offline manual completion for a certain module.\n     *\n     * @param cmId The module ID to remove the completion.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the completion, rejected if failure or not found.\n     */\n    async getManualCompletion(cmId: number, siteId?: string): Promise<CoreCourseManualCompletionDBRecord> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecord(MANUAL_COMPLETION_TABLE, { cmid: cmId });\n    }\n\n    /**\n     * Offline version for manually marking a module as completed.\n     *\n     * @param cmId The module ID to store the completion.\n     * @param completed Whether the module is completed or not.\n     * @param courseId Course ID the module belongs to.\n     * @param courseName Not used since 4.0.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when completion is successfully stored.\n     */\n    async markCompletedManually(\n        cmId: number,\n        completed: boolean,\n        courseId: number,\n        courseName?: string,\n        siteId?: string,\n    ): Promise<CoreStatusWithWarningsWSResponse> {\n\n        // Store the offline data.\n        const site = await CoreSites.getSite(siteId);\n        const entry: CoreCourseManualCompletionDBRecord = {\n            cmid: cmId,\n            completed: completed ? 1 : 0,\n            courseid: courseId,\n            timecompleted: Date.now(),\n        };\n        await site.getDb().insertRecord(MANUAL_COMPLETION_TABLE, entry);\n\n        return ({\n            status: true,\n            offline: true,\n        });\n    }\n\n}\n\nexport const CoreCourseOffline = makeSingleton(CoreCourseOfflineProvider);\n"],"mappings":";;AAeA,SAASA,aAAa,QAAQ,aAAa;AAC3C,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAA6CC,uBAAuB,QAAQ,mBAAmB;;AAG/F;;;AAIA,OAAM,MAAOC,yBAAyB;EAElC;;;;;;;EAOMC,sBAAsBA,CAACC,IAAY,EAAEC,MAAe;IAAA,OAAAC,iBAAA;MACtD,MAAMC,IAAI,SAASP,SAAS,CAACQ,OAAO,CAACH,MAAM,CAAC;MAE5C,MAAME,IAAI,CAACE,KAAK,EAAE,CAACC,aAAa,CAACT,uBAAuB,EAAE;QAAEU,IAAI,EAAEP;MAAI,CAAE,CAAC;IAAC;EAC9E;EAEA;;;;;;EAMMQ,uBAAuBA,CAACP,MAAe;IAAA,OAAAC,iBAAA;MACzC,MAAMC,IAAI,SAASP,SAAS,CAACQ,OAAO,CAACH,MAAM,CAAC;MAE5C,OAAOE,IAAI,CAACE,KAAK,EAAE,CAACI,UAAU,CAACZ,uBAAuB,CAAC;IAAC;EAC5D;EAEA;;;;;;;EAOMa,0BAA0BA,CAACC,QAAgB,EAAEV,MAAe;IAAA,OAAAC,iBAAA;MAC9D,MAAMC,IAAI,SAASP,SAAS,CAACQ,OAAO,CAACH,MAAM,CAAC;MAE5C,OAAOE,IAAI,CAACE,KAAK,EAAE,CAACI,UAAU,CAACZ,uBAAuB,EAAE;QAAEe,QAAQ,EAAED;MAAQ,CAAE,CAAC;IAAC;EACpF;EAEA;;;;;;;EAOME,mBAAmBA,CAACb,IAAY,EAAEC,MAAe;IAAA,OAAAC,iBAAA;MACnD,MAAMC,IAAI,SAASP,SAAS,CAACQ,OAAO,CAACH,MAAM,CAAC;MAE5C,OAAOE,IAAI,CAACE,KAAK,EAAE,CAACS,SAAS,CAACjB,uBAAuB,EAAE;QAAEU,IAAI,EAAEP;MAAI,CAAE,CAAC;IAAC;EAC3E;EAEA;;;;;;;;;;EAUMe,qBAAqBA,CACvBf,IAAY,EACZgB,SAAkB,EAClBL,QAAgB,EAChBM,UAAmB,EACnBhB,MAAe;IAAA,OAAAC,iBAAA;MAGf;MACA,MAAMC,IAAI,SAASP,SAAS,CAACQ,OAAO,CAACH,MAAM,CAAC;MAC5C,MAAMiB,KAAK,GAAuC;QAC9CX,IAAI,EAAEP,IAAI;QACVgB,SAAS,EAAEA,SAAS,GAAG,CAAC,GAAG,CAAC;QAC5BJ,QAAQ,EAAED,QAAQ;QAClBQ,aAAa,EAAEC,IAAI,CAACC,GAAG;OAC1B;MACD,MAAMlB,IAAI,CAACE,KAAK,EAAE,CAACiB,YAAY,CAACzB,uBAAuB,EAAEqB,KAAK,CAAC;MAE/D,OAAQ;QACJK,MAAM,EAAE,IAAI;QACZC,OAAO,EAAE;OACZ;IAAE;EACP;;SArFS1B,yBAAyB;;mBAAzBA,MAAyB;AAAA;;SAAzBA,MAAyB;EAAA2B,OAAA,EAAzB3B,MAAyB,CAAA4B,IAAA;EAAAC,UAAA,EADZ;AAAM;AA0FhC,OAAO,MAAMC,iBAAiB,GAAGjC,aAAa,CAACG,yBAAyB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}