{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { SQLiteDB } from '@classes/sqlitedb';\nimport { SQLiteDBMock } from '@features/emulator/classes/sqlitedb';\nimport { CoreBrowser } from '@singletons/browser';\nimport { makeSingleton, SQLite } from '@singletons';\nimport { CorePlatform } from '@services/platform';\nimport * as i0 from \"@angular/core\";\nconst tableNameRegex = new RegExp(['^SELECT.*FROM ([^ ]+)', '^INSERT.*INTO ([^ ]+)', '^UPDATE ([^ ]+)', '^DELETE FROM ([^ ]+)', '^CREATE TABLE IF NOT EXISTS ([^ ]+)', '^ALTER TABLE ([^ ]+)', '^DROP TABLE IF EXISTS ([^ ]+)'].join('|'));\n/**\n * This service allows interacting with the local database to store and retrieve data.\n */\nexport class CoreDbProvider {\n  constructor() {\n    this.queryLogs = [];\n    this.dbInstances = {};\n  }\n  /**\n   * Check whether database queries should be logged.\n   *\n   * @returns Whether queries should be logged.\n   */\n  loggingEnabled() {\n    return CoreBrowser.hasDevelopmentSetting('DBLoggingEnabled');\n  }\n  /**\n   * Print query history in console.\n   *\n   * @param format Log format, with the following substitutions: :dbname, :sql, :duration, and :result.\n   */\n  printHistory(format = ':dbname | :sql | Duration: :duration | Result: :result') {\n    const substituteParams = ({\n      sql,\n      params,\n      duration,\n      error,\n      dbName\n    }) => {\n      var _error$message;\n      return format.replace(':dbname', dbName).replace(':sql', Object.values(params !== null && params !== void 0 ? params : []).reduce((sql, param) => sql.replace('?', param), sql)).replace(':duration', `${Math.round(duration).toString().padStart(4, '0')}ms`).replace(':result', (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : 'Success');\n    };\n    // eslint-disable-next-line no-console\n    console.log(this.queryLogs.map(substituteParams).join('\\n'));\n  }\n  /**\n   * Get the table name from a SQL query.\n   *\n   * @param sql SQL query.\n   * @returns Table name, undefined if not found.\n   */\n  getTableNameFromSql(sql) {\n    const matches = sql.match(tableNameRegex);\n    return matches === null || matches === void 0 ? void 0 : matches.find((matchEntry, index) => index > 0 && !!matchEntry);\n  }\n  /**\n   * Check if a value matches a certain filter.\n   *\n   * @param value Value.\n   * @param filter Filter.\n   * @returns Whether the value matches the filter.\n   */\n  valueMatchesFilter(value, filter) {\n    if (typeof filter === 'string') {\n      return value === filter;\n    } else if (filter) {\n      return !!value.match(filter);\n    }\n    return true;\n  }\n  /**\n   * Build an object with the summary data for each db, table and statement.\n   *\n   * @param filters Filters to limit the data stored.\n   * @returns Object with the summary data.\n   */\n  buildStatementsSummary(filters = {}) {\n    const statementsSummary = {};\n    this.queryLogs.forEach(log => {\n      var _statementsSummary$lo, _statementsSummary$lo2, _statementsSummary$lo3;\n      if (!this.valueMatchesFilter(log.dbName, filters.dbName)) {\n        return;\n      }\n      const statement = log.sql.substring(0, log.sql.indexOf(' '));\n      if (!statement) {\n        console.warn(`Statement not found from sql: ${log.sql}`); // eslint-disable-line no-console\n        return;\n      }\n      const tableName = this.getTableNameFromSql(log.sql);\n      if (!tableName) {\n        console.warn(`Table name not found from sql: ${log.sql}`); // eslint-disable-line no-console\n        return;\n      }\n      if (!this.valueMatchesFilter(tableName, filters.tableName)) {\n        return;\n      }\n      statementsSummary[log.dbName] = (_statementsSummary$lo = statementsSummary[log.dbName]) !== null && _statementsSummary$lo !== void 0 ? _statementsSummary$lo : {};\n      statementsSummary[log.dbName][tableName] = (_statementsSummary$lo2 = statementsSummary[log.dbName][tableName]) !== null && _statementsSummary$lo2 !== void 0 ? _statementsSummary$lo2 : {};\n      statementsSummary[log.dbName][tableName][statement] = (_statementsSummary$lo3 = statementsSummary[log.dbName][tableName][statement]) !== null && _statementsSummary$lo3 !== void 0 ? _statementsSummary$lo3 : {\n        count: 0,\n        duration: 0,\n        errors: 0\n      };\n      statementsSummary[log.dbName][tableName][statement].count++;\n      statementsSummary[log.dbName][tableName][statement].duration += log.duration;\n      if (log.error) {\n        statementsSummary[log.dbName][tableName][statement].errors++;\n      }\n    });\n    return statementsSummary;\n  }\n  /**\n   * Print summary of statements for several tables.\n   *\n   * @param filters Filters to limit the results printed.\n   * @param format Log format, with the following substitutions: :dbname, :table, :statement, :count, :duration and :errors.\n   */\n  printTablesSummary(filters = {}, format = ':dbname, :table, :statement, :count, :duration, :errors') {\n    const statementsSummary = this.buildStatementsSummary(filters);\n    const substituteParams = (dbName, tableName, statementName) => format.replace(':dbname', dbName).replace(':table', tableName).replace(':statement', statementName).replace(':count', String(statementsSummary[dbName][tableName][statementName].count)).replace(':duration', statementsSummary[dbName][tableName][statementName].duration.toFixed(2) + 'ms').replace(':errors', String(statementsSummary[dbName][tableName][statementName].errors));\n    // eslint-disable-next-line no-console\n    console.log(Object.keys(statementsSummary).sort().map(dbName => Object.keys(statementsSummary[dbName]).sort().map(tableName => Object.keys(statementsSummary[dbName][tableName]).sort().map(statementName => substituteParams(dbName, tableName, statementName)).join('\\n')).join('\\n')).join('\\n'));\n  }\n  /**\n   * Log a query.\n   *\n   * @param log Query log.\n   */\n  logQuery(log) {\n    this.queryLogs.push(log);\n  }\n  /**\n   * Clear stored logs.\n   */\n  clearLogs() {\n    this.queryLogs = [];\n  }\n  /**\n   * Get or create a database object.\n   *\n   * The database objects are cached statically.\n   *\n   * @param name DB name.\n   * @param forceNew True if it should always create a new instance.\n   * @returns DB.\n   */\n  getDB(name, forceNew) {\n    if (this.dbInstances[name] === undefined || forceNew) {\n      if (CorePlatform.is('cordova')) {\n        this.dbInstances[name] = new SQLiteDB(name);\n      } else {\n        this.dbInstances[name] = new SQLiteDBMock(name);\n      }\n    }\n    return this.dbInstances[name];\n  }\n  /**\n   * Delete a DB.\n   *\n   * @param name DB name.\n   * @returns Promise resolved when the DB is deleted.\n   */\n  deleteDB(name) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.dbInstances[name] !== undefined) {\n        // Close the database first.\n        yield _this.dbInstances[name].close();\n        const db = _this.dbInstances[name];\n        delete _this.dbInstances[name];\n        if (db instanceof SQLiteDBMock) {\n          // In WebSQL we cannot delete the database, just empty it.\n          return db.emptyDatabase();\n        } else {\n          return SQLite.deleteDatabase({\n            name,\n            location: 'default'\n          });\n        }\n      } else if (CorePlatform.is('cordova')) {\n        return SQLite.deleteDatabase({\n          name,\n          location: 'default'\n        });\n      }\n    })();\n  }\n}\n_class = CoreDbProvider;\n_class.ɵfac = function CoreDbProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreDB = makeSingleton(CoreDbProvider);","map":{"version":3,"names":["SQLiteDB","SQLiteDBMock","CoreBrowser","makeSingleton","SQLite","CorePlatform","tableNameRegex","RegExp","join","CoreDbProvider","constructor","queryLogs","dbInstances","loggingEnabled","hasDevelopmentSetting","printHistory","format","substituteParams","sql","params","duration","error","dbName","_error$message","replace","Object","values","reduce","param","Math","round","toString","padStart","message","console","log","map","getTableNameFromSql","matches","match","find","matchEntry","index","valueMatchesFilter","value","filter","buildStatementsSummary","filters","statementsSummary","forEach","_statementsSummary$lo","_statementsSummary$lo2","_statementsSummary$lo3","statement","substring","indexOf","warn","tableName","count","errors","printTablesSummary","statementName","String","toFixed","keys","sort","logQuery","push","clearLogs","getDB","name","forceNew","undefined","is","deleteDB","_this","_asyncToGenerator","close","db","emptyDatabase","deleteDatabase","location","factory","ɵfac","providedIn","CoreDB"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/db.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { SQLiteDB } from '@classes/sqlitedb';\nimport { SQLiteDBMock } from '@features/emulator/classes/sqlitedb';\nimport { CoreBrowser } from '@singletons/browser';\nimport { makeSingleton, SQLite } from '@singletons';\nimport { CorePlatform } from '@services/platform';\n\nconst tableNameRegex = new RegExp([\n    '^SELECT.*FROM ([^ ]+)',\n    '^INSERT.*INTO ([^ ]+)',\n    '^UPDATE ([^ ]+)',\n    '^DELETE FROM ([^ ]+)',\n    '^CREATE TABLE IF NOT EXISTS ([^ ]+)',\n    '^ALTER TABLE ([^ ]+)',\n    '^DROP TABLE IF EXISTS ([^ ]+)',\n].join('|'));\n\n/**\n * This service allows interacting with the local database to store and retrieve data.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreDbProvider {\n\n    queryLogs: CoreDbQueryLog[] = [];\n\n    protected dbInstances: {[name: string]: SQLiteDB} = {};\n\n    /**\n     * Check whether database queries should be logged.\n     *\n     * @returns Whether queries should be logged.\n     */\n    loggingEnabled(): boolean {\n        return CoreBrowser.hasDevelopmentSetting('DBLoggingEnabled');\n    }\n\n    /**\n     * Print query history in console.\n     *\n     * @param format Log format, with the following substitutions: :dbname, :sql, :duration, and :result.\n     */\n    printHistory(format: string = ':dbname | :sql | Duration: :duration | Result: :result'): void {\n        const substituteParams = ({ sql, params, duration, error, dbName }: CoreDbQueryLog) => format\n            .replace(':dbname', dbName)\n            .replace(':sql', Object\n                .values(params ?? [])\n                .reduce((sql: string, param: string) => sql.replace('?', param) as string, sql) as string)\n            .replace(':duration', `${Math.round(duration).toString().padStart(4, '0')}ms`)\n            .replace(':result', error?.message ?? 'Success');\n\n        // eslint-disable-next-line no-console\n        console.log(this.queryLogs.map(substituteParams).join('\\n'));\n    }\n\n    /**\n     * Get the table name from a SQL query.\n     *\n     * @param sql SQL query.\n     * @returns Table name, undefined if not found.\n     */\n    protected getTableNameFromSql(sql: string): string | undefined {\n        const matches = sql.match(tableNameRegex);\n\n        return matches?.find((matchEntry, index) => index > 0 && !!matchEntry);\n    }\n\n    /**\n     * Check if a value matches a certain filter.\n     *\n     * @param value Value.\n     * @param filter Filter.\n     * @returns Whether the value matches the filter.\n     */\n    protected valueMatchesFilter(value: string, filter?: RegExp | string): boolean {\n        if (typeof filter === 'string') {\n            return value === filter;\n        } else if (filter) {\n            return !!value.match(filter);\n        }\n\n        return true;\n    }\n\n    /**\n     * Build an object with the summary data for each db, table and statement.\n     *\n     * @param filters Filters to limit the data stored.\n     * @returns Object with the summary data.\n     */\n    protected buildStatementsSummary(\n        filters: TablesSummaryFilters = {},\n    ): Record<string, Record<string, Record<string, CoreDbStatementSummary>>> {\n        const statementsSummary: Record<string, Record<string, Record<string, CoreDbStatementSummary>>> = {};\n\n        this.queryLogs.forEach(log => {\n            if (!this.valueMatchesFilter(log.dbName, filters.dbName)) {\n                return;\n            }\n\n            const statement = log.sql.substring(0, log.sql.indexOf(' '));\n            if (!statement) {\n                console.warn(`Statement not found from sql: ${log.sql}`); // eslint-disable-line no-console\n\n                return;\n            }\n\n            const tableName = this.getTableNameFromSql(log.sql);\n            if (!tableName) {\n                console.warn(`Table name not found from sql: ${log.sql}`); // eslint-disable-line no-console\n\n                return;\n            }\n\n            if (!this.valueMatchesFilter(tableName, filters.tableName)) {\n                return;\n            }\n\n            statementsSummary[log.dbName] = statementsSummary[log.dbName] ?? {};\n            statementsSummary[log.dbName][tableName] = statementsSummary[log.dbName][tableName] ?? {};\n            statementsSummary[log.dbName][tableName][statement] = statementsSummary[log.dbName][tableName][statement] ?? {\n                count: 0,\n                duration: 0,\n                errors: 0,\n            };\n\n            statementsSummary[log.dbName][tableName][statement].count++;\n            statementsSummary[log.dbName][tableName][statement].duration += log.duration;\n            if (log.error) {\n                statementsSummary[log.dbName][tableName][statement].errors++;\n            }\n        });\n\n        return statementsSummary;\n    }\n\n    /**\n     * Print summary of statements for several tables.\n     *\n     * @param filters Filters to limit the results printed.\n     * @param format Log format, with the following substitutions: :dbname, :table, :statement, :count, :duration and :errors.\n     */\n    printTablesSummary(\n        filters: TablesSummaryFilters = {},\n        format = ':dbname, :table, :statement, :count, :duration, :errors',\n    ): void {\n        const statementsSummary = this.buildStatementsSummary(filters);\n\n        const substituteParams = (dbName: string,  tableName: string, statementName: string) => format\n            .replace(':dbname', dbName)\n            .replace(':table', tableName)\n            .replace(':statement', statementName)\n            .replace(':count', String(statementsSummary[dbName][tableName][statementName].count))\n            .replace(':duration', statementsSummary[dbName][tableName][statementName].duration.toFixed(2) + 'ms')\n            .replace(':errors', String(statementsSummary[dbName][tableName][statementName].errors));\n\n        // eslint-disable-next-line no-console\n        console.log(\n            Object.keys(statementsSummary)\n                .sort()\n                .map(dbName => Object.keys(statementsSummary[dbName])\n                    .sort()\n                    .map(tableName => Object.keys(statementsSummary[dbName][tableName])\n                        .sort()\n                        .map(statementName => substituteParams(dbName, tableName, statementName))\n                        .join('\\n')).join('\\n')).join('\\n'),\n        );\n    }\n\n    /**\n     * Log a query.\n     *\n     * @param log Query log.\n     */\n    logQuery(log: CoreDbQueryLog): void {\n        this.queryLogs.push(log);\n    }\n\n    /**\n     * Clear stored logs.\n     */\n    clearLogs(): void {\n        this.queryLogs = [];\n    }\n\n    /**\n     * Get or create a database object.\n     *\n     * The database objects are cached statically.\n     *\n     * @param name DB name.\n     * @param forceNew True if it should always create a new instance.\n     * @returns DB.\n     */\n    getDB(name: string, forceNew?: boolean): SQLiteDB {\n        if (this.dbInstances[name] === undefined || forceNew) {\n            if (CorePlatform.is('cordova')) {\n                this.dbInstances[name] = new SQLiteDB(name);\n            } else {\n                this.dbInstances[name] = new SQLiteDBMock(name);\n            }\n        }\n\n        return this.dbInstances[name];\n    }\n\n    /**\n     * Delete a DB.\n     *\n     * @param name DB name.\n     * @returns Promise resolved when the DB is deleted.\n     */\n    async deleteDB(name: string): Promise<void> {\n        if (this.dbInstances[name] !== undefined) {\n            // Close the database first.\n            await this.dbInstances[name].close();\n\n            const db = this.dbInstances[name];\n            delete this.dbInstances[name];\n\n            if (db instanceof SQLiteDBMock) {\n                // In WebSQL we cannot delete the database, just empty it.\n                return db.emptyDatabase();\n            } else {\n                return SQLite.deleteDatabase({\n                    name,\n                    location: 'default',\n                });\n            }\n        } else if (CorePlatform.is('cordova')) {\n            return SQLite.deleteDatabase({\n                name,\n                location: 'default',\n            });\n        }\n    }\n\n}\n\nexport const CoreDB = makeSingleton(CoreDbProvider);\n\n/**\n * Database query log entry.\n */\nexport interface CoreDbQueryLog {\n    dbName: string;\n    sql: string;\n    duration: number;\n    error?: Error;\n    params?: unknown[];\n}\n\n/**\n * Summary about a certain DB statement.\n */\ntype CoreDbStatementSummary = {\n    count: number;\n    duration: number;\n    errors: number;\n};\n\n/**\n * Filters to print tables summary.\n */\ntype TablesSummaryFilters = {\n    dbName?: RegExp | string;\n    tableName?: RegExp | string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}