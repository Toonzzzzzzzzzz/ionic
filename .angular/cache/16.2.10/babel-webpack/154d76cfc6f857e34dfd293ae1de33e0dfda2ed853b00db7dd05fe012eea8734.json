{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { BehaviorSubject } from 'rxjs';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreDelegate } from './delegate';\nimport { CoreSites } from '@services/sites';\nimport { CorePromisedValue } from '@classes/promised-value';\n/**\n * Superclass to help creating sorted delegates.\n */\nexport class CoreSortedDelegate extends CoreDelegate {\n  /**\n   * Constructor of the Delegate.\n   *\n   * @param delegateName Delegate name used for logging purposes.\n   */\n  constructor(delegateName) {\n    super(delegateName, true);\n    this.loaded = false;\n    this.sortedHandlersRxJs = new BehaviorSubject([]);\n    this.sortedHandlers = [];\n    CoreEvents.on(CoreEvents.LOGOUT, () => this.clearSortedHandlers());\n    CoreEvents.on(CoreEvents.SITE_POLICY_AGREED, data => {\n      if (data.siteId === CoreSites.getCurrentSiteId()) {\n        // Clear loaded handlers when policy is agreed. The CoreDelegate class will load them again.\n        this.clearSortedHandlers();\n      }\n    });\n    // Clear loaded handlers on login, there could be an invalid list loaded when user reconnects after token expired.\n    CoreEvents.on(CoreEvents.LOGIN, () => this.clearSortedHandlers());\n  }\n  /**\n   * Check if handlers are loaded.\n   *\n   * @returns True if handlers are loaded, false otherwise.\n   */\n  areHandlersLoaded() {\n    return this.loaded;\n  }\n  /**\n   * Clear current site handlers. Reserved for core use.\n   */\n  clearSortedHandlers() {\n    this.loaded = false;\n    this.sortedHandlersRxJs.next([]);\n    this.sortedHandlers = [];\n  }\n  /**\n   * Get the handlers for the current site.\n   *\n   * @returns An observable that will receive the handlers.\n   */\n  getHandlers() {\n    return this.sortedHandlers;\n  }\n  /**\n   * Get the handlers for the current site.\n   *\n   * @returns An observable that will receive the handlers.\n   */\n  getHandlersObservable() {\n    return this.sortedHandlersRxJs;\n  }\n  /**\n   * Get the handlers for the current site once they're loaded.\n   *\n   * @returns Promise resolved with the handlers.\n   */\n  getHandlersWhenLoaded() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.loaded) {\n        return _this.sortedHandlers;\n      }\n      const promisedHandlers = new CorePromisedValue();\n      const subscription = _this.getHandlersObservable().subscribe(handlers => {\n        if (_this.loaded) {\n          subscription === null || subscription === void 0 || subscription.unsubscribe();\n          // Return main handlers.\n          promisedHandlers.resolve(handlers);\n        }\n      });\n      return promisedHandlers;\n    })();\n  }\n  /**\n   * Update handlers Data.\n   */\n  updateData() {\n    const displayData = [];\n    for (const name in this.enabledHandlers) {\n      var _ref, _data$priority;\n      const handler = this.enabledHandlers[name];\n      const data = handler.getDisplayData();\n      data.priority = (_ref = (_data$priority = data.priority) !== null && _data$priority !== void 0 ? _data$priority : handler.priority) !== null && _ref !== void 0 ? _ref : 0;\n      data.name = handler.name;\n      displayData.push(data);\n    }\n    // Sort them by priority.\n    displayData.sort((a, b) => {\n      var _b$priority, _a$priority;\n      return ((_b$priority = b.priority) !== null && _b$priority !== void 0 ? _b$priority : 0) - ((_a$priority = a.priority) !== null && _a$priority !== void 0 ? _a$priority : 0);\n    });\n    this.loaded = true;\n    this.sortedHandlersRxJs.next(displayData);\n    this.sortedHandlers = displayData;\n  }\n}","map":{"version":3,"names":["BehaviorSubject","CoreEvents","CoreDelegate","CoreSites","CorePromisedValue","CoreSortedDelegate","constructor","delegateName","loaded","sortedHandlersRxJs","sortedHandlers","on","LOGOUT","clearSortedHandlers","SITE_POLICY_AGREED","data","siteId","getCurrentSiteId","LOGIN","areHandlersLoaded","next","getHandlers","getHandlersObservable","getHandlersWhenLoaded","_this","_asyncToGenerator","promisedHandlers","subscription","subscribe","handlers","unsubscribe","resolve","updateData","displayData","name","enabledHandlers","_ref","_data$priority","handler","getDisplayData","priority","push","sort","a","b","_b$priority","_a$priority"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/delegate-sorted.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreDelegate, CoreDelegateDisplayHandler, CoreDelegateToDisplay } from './delegate';\nimport { CoreSites } from '@services/sites';\nimport { CorePromisedValue } from '@classes/promised-value';\n\n/**\n * Superclass to help creating sorted delegates.\n */\nexport class CoreSortedDelegate<\n    DisplayType extends CoreDelegateToDisplay,\n    HandlerType extends CoreDelegateDisplayHandler<DisplayType>>\n    extends CoreDelegate<HandlerType> {\n\n    protected loaded = false;\n    protected sortedHandlersRxJs: Subject<DisplayType[]> = new BehaviorSubject<DisplayType[]>([]);\n    protected sortedHandlers: DisplayType[] = [];\n\n    /**\n     * Constructor of the Delegate.\n     *\n     * @param delegateName Delegate name used for logging purposes.\n     */\n    constructor(delegateName: string) {\n        super(delegateName, true);\n\n        CoreEvents.on(CoreEvents.LOGOUT, () => this.clearSortedHandlers());\n        CoreEvents.on(CoreEvents.SITE_POLICY_AGREED, (data) => {\n            if (data.siteId === CoreSites.getCurrentSiteId()) {\n                // Clear loaded handlers when policy is agreed. The CoreDelegate class will load them again.\n                this.clearSortedHandlers();\n            }\n        });\n        // Clear loaded handlers on login, there could be an invalid list loaded when user reconnects after token expired.\n        CoreEvents.on(CoreEvents.LOGIN, () => this.clearSortedHandlers());\n    }\n\n    /**\n     * Check if handlers are loaded.\n     *\n     * @returns True if handlers are loaded, false otherwise.\n     */\n    areHandlersLoaded(): boolean {\n        return this.loaded;\n    }\n\n    /**\n     * Clear current site handlers. Reserved for core use.\n     */\n    protected clearSortedHandlers(): void {\n        this.loaded = false;\n        this.sortedHandlersRxJs.next([]);\n        this.sortedHandlers = [];\n    }\n\n    /**\n     * Get the handlers for the current site.\n     *\n     * @returns An observable that will receive the handlers.\n     */\n    getHandlers(): DisplayType[] {\n        return this.sortedHandlers;\n    }\n\n    /**\n     * Get the handlers for the current site.\n     *\n     * @returns An observable that will receive the handlers.\n     */\n    getHandlersObservable(): Subject<DisplayType[]> {\n        return this.sortedHandlersRxJs;\n    }\n\n    /**\n     * Get the handlers for the current site once they're loaded.\n     *\n     * @returns Promise resolved with the handlers.\n     */\n    async getHandlersWhenLoaded(): Promise<DisplayType[]> {\n        if (this.loaded) {\n            return this.sortedHandlers;\n        }\n\n        const promisedHandlers = new CorePromisedValue<DisplayType[]>();\n        const subscription = this.getHandlersObservable().subscribe((handlers) => {\n            if (this.loaded) {\n                subscription?.unsubscribe();\n\n                // Return main handlers.\n                promisedHandlers.resolve(handlers);\n            }\n        });\n\n        return promisedHandlers;\n    }\n\n    /**\n     * Update handlers Data.\n     */\n    updateData(): void {\n        const displayData: DisplayType[] = [];\n\n        for (const name in this.enabledHandlers) {\n            const handler = this.enabledHandlers[name];\n            const data = <DisplayType> handler.getDisplayData();\n\n            data.priority = data.priority ?? handler.priority ?? 0;\n            data.name = handler.name;\n\n            displayData.push(data);\n        }\n\n        // Sort them by priority.\n        displayData.sort((a, b) => (b.priority ?? 0) - (a.priority ?? 0));\n\n        this.loaded = true;\n        this.sortedHandlersRxJs.next(displayData);\n        this.sortedHandlers = displayData;\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}