{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreComments } from '@features/comments/services/comments';\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreGroups } from '@services/groups';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModDataProvider, AddonModData } from '../data';\nimport { AddonModDataSync } from '../data-sync';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to prefetch databases.\n */\nexport class AddonModDataPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModData';\n    this.modName = 'data';\n    this.component = AddonModDataProvider.COMPONENT;\n    this.updatesNames = /^configuration$|^.*files$|^entries$|^gradeitems$|^outcomes$|^comments$|^ratings/;\n  }\n  /**\n   * Retrieves all the entries for all the groups and then returns only unique entries.\n   *\n   * @param dataId Database Id.\n   * @param groups Array of groups in the activity.\n   * @param options Other options.\n   * @returns All unique entries.\n   */\n  getAllUniqueEntries(dataId, groups, options = {}) {\n    return _asyncToGenerator(function* () {\n      const promises = groups.map(group => AddonModData.fetchAllEntries(dataId, _objectSpread({\n        groupId: group.id\n      }, options)));\n      const responses = yield Promise.all(promises);\n      const uniqueEntries = {};\n      responses.forEach(groupEntries => {\n        groupEntries.forEach(entry => {\n          uniqueEntries[entry.id] = entry;\n        });\n      });\n      return CoreUtils.objectToArray(uniqueEntries);\n    })();\n  }\n  /**\n   * Helper function to get all database info just once.\n   *\n   * @param module Module to get the files.\n   * @param courseId Course ID the module belongs to.\n   * @param omitFail True to always return even if fails. Default false.\n   * @param options Other options.\n   * @returns Promise resolved with the info fetched.\n   */\n  getDatabaseInfoHelper(module, courseId, omitFail, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let groups = [];\n      let entries = [];\n      let files = [];\n      options.cmId = options.cmId || module.id;\n      options.siteId = options.siteId || CoreSites.getCurrentSiteId();\n      const database = yield AddonModData.getDatabase(courseId, module.id, options);\n      try {\n        files = _this.getIntroFilesFromInstance(module, database);\n        const groupInfo = yield CoreGroups.getActivityGroupInfo(module.id, false, undefined, options.siteId);\n        if (!groupInfo.groups || groupInfo.groups.length == 0) {\n          groupInfo.groups = [{\n            id: 0,\n            name: ''\n          }];\n        }\n        groups = groupInfo.groups || [];\n        entries = yield _this.getAllUniqueEntries(database.id, groups, options);\n        files = files.concat(_this.getEntriesFiles(entries));\n        return {\n          database,\n          groups,\n          entries,\n          files\n        };\n      } catch (error) {\n        if (omitFail) {\n          // Any error, return the info we have.\n          return {\n            database,\n            groups,\n            entries,\n            files\n          };\n        }\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Returns the file contained in the entries.\n   *\n   * @param entries List of entries to get files from.\n   * @returns List of files.\n   */\n  getEntriesFiles(entries) {\n    let files = [];\n    entries.forEach(entry => {\n      CoreUtils.objectToArray(entry.contents).forEach(content => {\n        files = files.concat(content.files);\n      });\n    });\n    return files;\n  }\n  /**\n   * @inheritdoc\n   */\n  getFiles(module, courseId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.getDatabaseInfoHelper(module, courseId, true).then(info => info.files);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getIntroFiles(module, courseId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const data = yield CoreUtils.ignoreErrors(AddonModData.getDatabase(courseId, module.id));\n      return _this3.getIntroFilesFromInstance(module, data);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateContent(moduleId, courseId) {\n    return _asyncToGenerator(function* () {\n      yield AddonModData.invalidateContent(moduleId, courseId);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateModule(module, courseId) {\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      promises.push(AddonModData.invalidateDatabaseData(courseId));\n      promises.push(AddonModData.invalidateDatabaseAccessInformationData(module.instance));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  isDownloadable(module, courseId) {\n    return _asyncToGenerator(function* () {\n      const database = yield AddonModData.getDatabase(courseId, module.id, {\n        readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n      });\n\n      const accessData = yield AddonModData.getDatabaseAccessInformation(database.id, {\n        cmId: module.id\n      });\n      // Check if database is restricted by time.\n      if (!accessData.timeavailable) {\n        const time = CoreTimeUtils.timestamp();\n        // It is restricted, checking times.\n        if (database.timeavailablefrom && time < database.timeavailablefrom) {\n          return false;\n        }\n        if (database.timeavailableto && time > database.timeavailableto) {\n          return false;\n        }\n      }\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  prefetch(module, courseId) {\n    return this.prefetchPackage(module, courseId, siteId => this.prefetchDatabase(module, courseId, siteId));\n  }\n  /**\n   * Prefetch a database.\n   *\n   * @param module Module.\n   * @param courseId Course ID the module belongs to.\n   * @param siteId Site ID.\n   * @returns Promise resolved when done.\n   */\n  prefetchDatabase(module, courseId, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const options = {\n        cmId: module.id,\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n        siteId\n      };\n      const info = yield _this4.getDatabaseInfoHelper(module, courseId, false, options);\n      // Prefetch the database data.\n      const database = info.database;\n      const commentsEnabled = !CoreComments.areCommentsDisabledInSite();\n      const promises = [];\n      promises.push(AddonModData.getFields(database.id, options));\n      promises.push(CoreFilepool.addFilesToQueue(siteId, info.files, _this4.component, module.id));\n      info.groups.forEach(group => {\n        promises.push(AddonModData.getDatabaseAccessInformation(database.id, _objectSpread({\n          groupId: group.id\n        }, options)));\n      });\n      info.entries.forEach(entry => {\n        promises.push(AddonModData.getEntry(database.id, entry.id, options));\n        if (commentsEnabled && database.comments) {\n          promises.push(CoreComments.getComments('module', database.coursemodule, 'mod_data', entry.id, 'database_entry', 0, siteId));\n        }\n      });\n      // Add Basic Info to manage links.\n      promises.push(CoreCourse.getModuleBasicInfoByInstance(database.id, 'data', {\n        siteId\n      }));\n      // Get course data, needed to determine upload max size if it's configured to be course limit.\n      promises.push(CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', courseId, siteId)));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Sync a module.\n   *\n   * @param module Module.\n   * @param courseId Course ID the module belongs to\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  sync(module, courseId, siteId) {\n    return _asyncToGenerator(function* () {\n      const promises = [AddonModDataSync.syncDatabase(module.instance, siteId), AddonModDataSync.syncRatings(module.id, true, siteId)];\n      const results = yield Promise.all(promises);\n      return results.reduce((a, b) => ({\n        updated: a.updated || b.updated,\n        warnings: (a.warnings || []).concat(b.warnings || [])\n      }), {\n        updated: false,\n        warnings: []\n      });\n    })();\n  }\n}\n_class = AddonModDataPrefetchHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModDataPrefetchHandlerService_BaseFactory;\n  return function AddonModDataPrefetchHandlerService_Factory(t) {\n    return (ɵAddonModDataPrefetchHandlerService_BaseFactory || (ɵAddonModDataPrefetchHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModDataPrefetchHandler = makeSingleton(AddonModDataPrefetchHandlerService);","map":{"version":3,"names":["CoreComments","CoreCourseActivityPrefetchHandlerBase","CoreCourse","CoreCourses","CoreFilepool","CoreGroups","CoreSites","CoreSitesReadingStrategy","CoreTimeUtils","CoreUtils","makeSingleton","AddonModDataProvider","AddonModData","AddonModDataSync","AddonModDataPrefetchHandlerService","constructor","name","modName","component","COMPONENT","updatesNames","getAllUniqueEntries","dataId","groups","options","_asyncToGenerator","promises","map","group","fetchAllEntries","_objectSpread","groupId","id","responses","Promise","all","uniqueEntries","forEach","groupEntries","entry","objectToArray","getDatabaseInfoHelper","module","courseId","omitFail","_this","entries","files","cmId","siteId","getCurrentSiteId","database","getDatabase","getIntroFilesFromInstance","groupInfo","getActivityGroupInfo","undefined","length","concat","getEntriesFiles","error","contents","content","getFiles","_this2","then","info","getIntroFiles","_this3","data","ignoreErrors","invalidateContent","moduleId","invalidateModule","push","invalidateDatabaseData","invalidateDatabaseAccessInformationData","instance","isDownloadable","readingStrategy","accessData","getDatabaseAccessInformation","timeavailable","time","timestamp","timeavailablefrom","timeavailableto","prefetch","prefetchPackage","prefetchDatabase","_this4","commentsEnabled","areCommentsDisabledInSite","getFields","addFilesToQueue","getEntry","comments","getComments","coursemodule","getModuleBasicInfoByInstance","getCourseByField","sync","syncDatabase","syncRatings","results","reduce","a","b","updated","warnings","t","factory","ɵfac","providedIn","AddonModDataPrefetchHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/services/handlers/prefetch.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreComments } from '@features/comments/services/comments';\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourseCommonModWSOptions, CoreCourse, CoreCourseAnyModuleData } from '@features/course/services/course';\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreGroup, CoreGroups } from '@services/groups';\nimport { CoreSitesCommonWSOptions, CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSFile } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { AddonModDataProvider, AddonModDataEntry, AddonModData, AddonModDataData } from '../data';\nimport { AddonModDataSync, AddonModDataSyncResult } from '../data-sync';\n\n/**\n * Handler to prefetch databases.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModDataPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n\n    name = 'AddonModData';\n    modName = 'data';\n    component = AddonModDataProvider.COMPONENT;\n    updatesNames = /^configuration$|^.*files$|^entries$|^gradeitems$|^outcomes$|^comments$|^ratings/;\n\n    /**\n     * Retrieves all the entries for all the groups and then returns only unique entries.\n     *\n     * @param dataId Database Id.\n     * @param groups Array of groups in the activity.\n     * @param options Other options.\n     * @returns All unique entries.\n     */\n    protected async getAllUniqueEntries(\n        dataId: number,\n        groups: CoreGroup[],\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<AddonModDataEntry[]> {\n\n        const promises = groups.map((group) => AddonModData.fetchAllEntries(dataId, {\n            groupId: group.id,\n            ...options, // Include all options.\n        }));\n\n        const responses = await Promise.all(promises);\n\n        const uniqueEntries: Record<number, AddonModDataEntry> = {};\n        responses.forEach((groupEntries) => {\n            groupEntries.forEach((entry) => {\n                uniqueEntries[entry.id] = entry;\n            });\n        });\n\n        return CoreUtils.objectToArray(uniqueEntries);\n    }\n\n    /**\n     * Helper function to get all database info just once.\n     *\n     * @param module Module to get the files.\n     * @param courseId Course ID the module belongs to.\n     * @param omitFail True to always return even if fails. Default false.\n     * @param options Other options.\n     * @returns Promise resolved with the info fetched.\n     */\n    protected async getDatabaseInfoHelper(\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        omitFail: boolean,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<{ database: AddonModDataData; groups: CoreGroup[]; entries: AddonModDataEntry[]; files: CoreWSFile[]}> {\n        let groups: CoreGroup[] = [];\n        let entries: AddonModDataEntry[] = [];\n        let files: CoreWSFile[] = [];\n\n        options.cmId = options.cmId || module.id;\n        options.siteId = options.siteId || CoreSites.getCurrentSiteId();\n\n        const database = await AddonModData.getDatabase(courseId, module.id, options);\n\n        try {\n            files = this.getIntroFilesFromInstance(module, database);\n\n            const groupInfo = await CoreGroups.getActivityGroupInfo(module.id, false, undefined, options.siteId);\n            if (!groupInfo.groups || groupInfo.groups.length == 0) {\n                groupInfo.groups = [{ id: 0, name: '' }];\n            }\n            groups = groupInfo.groups || [];\n\n            entries = await this.getAllUniqueEntries(database.id, groups, options);\n            files = files.concat(this.getEntriesFiles(entries));\n\n            return {\n                database,\n                groups,\n                entries,\n                files,\n            };\n        } catch (error) {\n            if (omitFail) {\n                // Any error, return the info we have.\n                return {\n                    database,\n                    groups,\n                    entries,\n                    files,\n                };\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     * Returns the file contained in the entries.\n     *\n     * @param entries List of entries to get files from.\n     * @returns List of files.\n     */\n    protected getEntriesFiles(entries: AddonModDataEntry[]): CoreWSFile[] {\n        let files: CoreWSFile[] = [];\n\n        entries.forEach((entry) => {\n            CoreUtils.objectToArray(entry.contents).forEach((content) => {\n                files = files.concat(<CoreWSFile[]>content.files);\n            });\n        });\n\n        return files;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getFiles(module: CoreCourseAnyModuleData, courseId: number): Promise<CoreWSFile[]> {\n        return this.getDatabaseInfoHelper(module, courseId, true).then((info) => info.files);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getIntroFiles(module: CoreCourseAnyModuleData, courseId: number): Promise<CoreWSFile[]> {\n        const data = await CoreUtils.ignoreErrors(AddonModData.getDatabase(courseId, module.id));\n\n        return this.getIntroFilesFromInstance(module, data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateContent(moduleId: number, courseId: number): Promise<void> {\n        await AddonModData.invalidateContent(moduleId, courseId);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateModule(module: CoreCourseAnyModuleData, courseId: number): Promise<void> {\n        const promises: Promise<void>[] = [];\n        promises.push(AddonModData.invalidateDatabaseData(courseId));\n        promises.push(AddonModData.invalidateDatabaseAccessInformationData(module.instance));\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isDownloadable(module: CoreCourseAnyModuleData, courseId: number): Promise<boolean> {\n        const database = await AddonModData.getDatabase(courseId, module.id, {\n            readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE,\n        });\n\n        const accessData = await AddonModData.getDatabaseAccessInformation(database.id, { cmId: module.id });\n        // Check if database is restricted by time.\n        if (!accessData.timeavailable) {\n            const time = CoreTimeUtils.timestamp();\n\n            // It is restricted, checking times.\n            if (database.timeavailablefrom && time < database.timeavailablefrom) {\n                return false;\n            }\n            if (database.timeavailableto && time > database.timeavailableto) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    prefetch(module: CoreCourseAnyModuleData, courseId: number): Promise<void> {\n        return this.prefetchPackage(module, courseId, (siteId) => this.prefetchDatabase(module, courseId, siteId));\n    }\n\n    /**\n     * Prefetch a database.\n     *\n     * @param module Module.\n     * @param courseId Course ID the module belongs to.\n     * @param siteId Site ID.\n     * @returns Promise resolved when done.\n     */\n    protected async prefetchDatabase(module: CoreCourseAnyModuleData, courseId: number, siteId: string): Promise<void> {\n        const options = {\n            cmId: module.id,\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId,\n        };\n\n        const info = await this.getDatabaseInfoHelper(module, courseId, false, options);\n\n        // Prefetch the database data.\n        const database = info.database;\n\n        const commentsEnabled = !CoreComments.areCommentsDisabledInSite();\n\n        const promises: Promise<unknown>[] = [];\n\n        promises.push(AddonModData.getFields(database.id, options));\n        promises.push(CoreFilepool.addFilesToQueue(siteId, info.files, this.component, module.id));\n\n        info.groups.forEach((group) => {\n            promises.push(AddonModData.getDatabaseAccessInformation(database.id, {\n                groupId: group.id,\n                ...options, // Include all options.\n            }));\n        });\n\n        info.entries.forEach((entry) => {\n            promises.push(AddonModData.getEntry(database.id, entry.id, options));\n\n            if (commentsEnabled && database.comments) {\n                promises.push(CoreComments.getComments(\n                    'module',\n                    database.coursemodule,\n                    'mod_data',\n                    entry.id,\n                    'database_entry',\n                    0,\n                    siteId,\n                ));\n            }\n        });\n\n        // Add Basic Info to manage links.\n        promises.push(CoreCourse.getModuleBasicInfoByInstance(database.id, 'data', { siteId }));\n\n        // Get course data, needed to determine upload max size if it's configured to be course limit.\n        promises.push(CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', courseId, siteId)));\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Sync a module.\n     *\n     * @param module Module.\n     * @param courseId Course ID the module belongs to\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async sync(module: CoreCourseAnyModuleData, courseId: number, siteId?: string): Promise<AddonModDataSyncResult> {\n        const promises = [\n            AddonModDataSync.syncDatabase(module.instance, siteId),\n            AddonModDataSync.syncRatings(module.id, true, siteId),\n        ];\n\n        const results = await Promise.all(promises);\n\n        return results.reduce((a, b) => ({\n            updated: a.updated || b.updated,\n            warnings: (a.warnings || []).concat(b.warnings || []),\n        }), { updated: false , warnings: [] });\n    }\n\n}\nexport const AddonModDataPrefetchHandler = makeSingleton(AddonModDataPrefetchHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}