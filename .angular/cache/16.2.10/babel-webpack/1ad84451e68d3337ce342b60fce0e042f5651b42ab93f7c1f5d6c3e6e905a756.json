{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreFile, CoreFileProvider } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CorePath } from '@singletons/path';\nimport { CoreH5PMetadata } from './metadata';\n/**\n * Equivalent to H5P's H5PStorage class.\n */\nexport class CoreH5PStorage {\n  constructor(h5pCore, h5pFramework) {\n    this.h5pCore = h5pCore;\n    this.h5pFramework = h5pFramework;\n  }\n  /**\n   * Save libraries.\n   *\n   * @param librariesJsonData Data about libraries.\n   * @param folderName Name of the folder of the H5P package.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  saveLibraries(librariesJsonData, folderName, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // First of all, try to create the dir where the libraries are stored. This way we don't have to do it for each lib.\n      yield CoreFile.createDir(_this.h5pCore.h5pFS.getLibrariesFolderPath(siteId));\n      const libraryIds = [];\n      // Go through libraries that came with this package.\n      yield Promise.all(Object.keys(librariesJsonData).map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (libString) {\n          const libraryData = librariesJsonData[libString];\n          // Find local library with same major + minor.\n          const existingLibrary = yield CoreUtils.ignoreErrors(_this.h5pFramework.getLibraryByData(libraryData));\n          if (existingLibrary) {\n            // Library already installed.\n            libraryData.libraryId = existingLibrary.id;\n            const newerPatchVersion = existingLibrary.patchversion < libraryData.patchVersion;\n            if (!newerPatchVersion) {\n              // Same or older version, no need to save.\n              libraryData.saveDependencies = false;\n              return;\n            }\n          }\n          libraryData.saveDependencies = true;\n          // Convert metadataSettings values to boolean and json_encode it before saving.\n          libraryData.metadataSettings = libraryData.metadataSettings ? CoreH5PMetadata.boolifyAndEncodeSettings(libraryData.metadataSettings) : undefined;\n          // Save the library data in DB.\n          yield _this.h5pFramework.saveLibraryData(libraryData, siteId);\n          // Now save it in FS.\n          try {\n            yield _this.h5pCore.h5pFS.saveLibrary(libraryData, siteId);\n          } catch (error) {\n            if (libraryData.libraryId) {\n              // An error occurred, delete the DB data because the lib FS data has been deleted.\n              yield _this.h5pFramework.deleteLibrary(libraryData.libraryId, siteId);\n            }\n            throw error;\n          }\n          if (libraryData.libraryId !== undefined) {\n            const promises = [];\n            // Remove all indexes of contents that use this library.\n            promises.push(_this.h5pCore.h5pFS.deleteContentIndexesForLibrary(libraryData.libraryId, siteId));\n            if (_this.h5pCore.aggregateAssets) {\n              // Remove cached assets that use this library.\n              const removedEntries = yield _this.h5pFramework.deleteCachedAssets(libraryData.libraryId, siteId);\n              yield _this.h5pCore.h5pFS.deleteCachedAssets(removedEntries, siteId);\n            }\n            yield CoreUtils.allPromises(promises);\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      // Go through the libraries again to save dependencies.\n      yield Promise.all(Object.keys(librariesJsonData).map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (libString) {\n          const libraryData = librariesJsonData[libString];\n          if (!libraryData.saveDependencies || !libraryData.libraryId) {\n            return;\n          }\n          libraryIds.push(libraryData.libraryId);\n          // Remove any old dependencies.\n          yield _this.h5pFramework.deleteLibraryDependencies(libraryData.libraryId, siteId);\n          // Insert the different new ones.\n          const promises = [];\n          if (libraryData.preloadedDependencies !== undefined) {\n            promises.push(_this.h5pFramework.saveLibraryDependencies(libraryData, libraryData.preloadedDependencies, 'preloaded'));\n          }\n          if (libraryData.dynamicDependencies !== undefined) {\n            promises.push(_this.h5pFramework.saveLibraryDependencies(libraryData, libraryData.dynamicDependencies, 'dynamic'));\n          }\n          if (libraryData.editorDependencies !== undefined) {\n            promises.push(_this.h5pFramework.saveLibraryDependencies(libraryData, libraryData.editorDependencies, 'editor'));\n          }\n          yield Promise.all(promises);\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      // Make sure dependencies, parameter filtering and export files get regenerated for content who uses these libraries.\n      if (libraryIds.length) {\n        yield _this.h5pFramework.clearFilteredParameters(libraryIds, siteId);\n      }\n    })();\n  }\n  /**\n   * Save content data in DB and clear cache.\n   *\n   * @param data Content to save.\n   * @param folderName The name of the folder that contains the H5P.\n   * @param fileUrl The online URL of the package.\n   * @param skipContent Skip content.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the content data.\n   */\n  savePackage(data, folderName, fileUrl, skipContent, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      if (_this2.h5pCore.mayUpdateLibraries()) {\n        // Save the libraries that were processed.\n        yield _this2.saveLibraries(data.librariesJsonData, folderName, siteId);\n      }\n      const content = {};\n      // Add the 'title' if exists from 'h5p.json' data to be able to add it to metadata later.\n      if (typeof data.mainJsonData.title === 'string') {\n        content.title = data.mainJsonData.title;\n      }\n      if (!skipContent) {\n        // Find main library version.\n        if (data.mainJsonData.preloadedDependencies) {\n          const mainLib = data.mainJsonData.preloadedDependencies.find(dependency => dependency.machineName === data.mainJsonData.mainLibrary);\n          if (mainLib) {\n            const id = yield _this2.h5pFramework.getLibraryIdByData(mainLib);\n            content.library = Object.assign(mainLib, {\n              libraryId: id\n            });\n          }\n        }\n        content.params = JSON.stringify(data.contentJsonData);\n        // Save the content data in DB.\n        yield _this2.h5pCore.saveContent(content, folderName, fileUrl, siteId);\n        // Save the content files in their right place in FS.\n        const destFolder = CorePath.concatenatePaths(CoreFileProvider.TMPFOLDER, 'h5p/' + folderName);\n        const contentPath = CorePath.concatenatePaths(destFolder, 'content');\n        try {\n          yield _this2.h5pCore.h5pFS.saveContent(contentPath, folderName, siteId);\n        } catch (error) {\n          // An error occurred, delete the DB data because the content files have been deleted.\n          yield _this2.h5pFramework.deleteContentData(content.id, siteId);\n          throw error;\n        }\n      }\n      return content;\n    })();\n  }\n}","map":{"version":3,"names":["CoreFile","CoreFileProvider","CoreSites","CoreUtils","CorePath","CoreH5PMetadata","CoreH5PStorage","constructor","h5pCore","h5pFramework","saveLibraries","librariesJsonData","folderName","siteId","_this","_asyncToGenerator","getCurrentSiteId","createDir","h5pFS","getLibrariesFolderPath","libraryIds","Promise","all","Object","keys","map","_ref","libString","libraryData","existingLibrary","ignoreErrors","getLibraryByData","libraryId","id","newerPatchVersion","patchversion","patchVersion","saveDependencies","metadataSettings","boolifyAndEncodeSettings","undefined","saveLibraryData","saveLibrary","error","deleteLibrary","promises","push","deleteContentIndexesForLibrary","aggregateAssets","removedEntries","deleteCachedAssets","allPromises","_x","apply","arguments","_ref2","deleteLibraryDependencies","preloadedDependencies","saveLibraryDependencies","dynamicDependencies","editorDependencies","_x2","length","clearFilteredParameters","savePackage","data","fileUrl","skipContent","_this2","mayUpdateLibraries","content","mainJsonData","title","mainLib","find","dependency","machineName","mainLibrary","getLibraryIdByData","library","assign","params","JSON","stringify","contentJsonData","saveContent","destFolder","concatenatePaths","TMPFOLDER","contentPath","deleteContentData"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/h5p/classes/storage.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreFile, CoreFileProvider } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CorePath } from '@singletons/path';\nimport { CoreH5PCore, CoreH5PLibraryBasicData } from './core';\nimport { CoreH5PFramework } from './framework';\nimport { CoreH5PMetadata } from './metadata';\nimport {\n    CoreH5PLibrariesJsonData,\n    CoreH5PLibraryJsonData,\n    CoreH5PLibraryMetadataSettings,\n    CoreH5PMainJSONFilesData,\n} from './validator';\n\n/**\n * Equivalent to H5P's H5PStorage class.\n */\nexport class CoreH5PStorage {\n\n    constructor(\n        protected h5pCore: CoreH5PCore,\n        protected h5pFramework: CoreH5PFramework,\n    ) { }\n\n    /**\n     * Save libraries.\n     *\n     * @param librariesJsonData Data about libraries.\n     * @param folderName Name of the folder of the H5P package.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    protected async saveLibraries(librariesJsonData: CoreH5PLibrariesJsonData, folderName: string, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // First of all, try to create the dir where the libraries are stored. This way we don't have to do it for each lib.\n        await CoreFile.createDir(this.h5pCore.h5pFS.getLibrariesFolderPath(siteId));\n\n        const libraryIds: number[] = [];\n\n        // Go through libraries that came with this package.\n        await Promise.all(Object.keys(librariesJsonData).map(async (libString) => {\n            const libraryData: CoreH5PLibraryBeingSaved = librariesJsonData[libString];\n\n            // Find local library with same major + minor.\n            const existingLibrary = await CoreUtils.ignoreErrors(this.h5pFramework.getLibraryByData(libraryData));\n\n            if (existingLibrary) {\n                // Library already installed.\n                libraryData.libraryId = existingLibrary.id;\n\n                const newerPatchVersion = existingLibrary.patchversion < libraryData.patchVersion;\n\n                if (!newerPatchVersion) {\n                    // Same or older version, no need to save.\n                    libraryData.saveDependencies = false;\n\n                    return;\n                }\n            }\n\n            libraryData.saveDependencies = true;\n\n            // Convert metadataSettings values to boolean and json_encode it before saving.\n            libraryData.metadataSettings = libraryData.metadataSettings ?\n                CoreH5PMetadata.boolifyAndEncodeSettings(libraryData.metadataSettings) : undefined;\n\n            // Save the library data in DB.\n            await this.h5pFramework.saveLibraryData(libraryData, siteId);\n\n            // Now save it in FS.\n            try {\n                await this.h5pCore.h5pFS.saveLibrary(libraryData, siteId);\n            } catch (error) {\n                if (libraryData.libraryId) {\n                    // An error occurred, delete the DB data because the lib FS data has been deleted.\n                    await this.h5pFramework.deleteLibrary(libraryData.libraryId, siteId);\n                }\n\n                throw error;\n            }\n\n            if (libraryData.libraryId !== undefined) {\n                const promises: Promise<void>[] = [];\n\n                // Remove all indexes of contents that use this library.\n                promises.push(this.h5pCore.h5pFS.deleteContentIndexesForLibrary(libraryData.libraryId, siteId));\n\n                if (this.h5pCore.aggregateAssets) {\n                    // Remove cached assets that use this library.\n                    const removedEntries = await this.h5pFramework.deleteCachedAssets(libraryData.libraryId, siteId);\n\n                    await this.h5pCore.h5pFS.deleteCachedAssets(removedEntries, siteId);\n                }\n\n                await CoreUtils.allPromises(promises);\n            }\n        }));\n\n        // Go through the libraries again to save dependencies.\n        await Promise.all(Object.keys(librariesJsonData).map(async (libString) => {\n            const libraryData: CoreH5PLibraryBeingSaved = librariesJsonData[libString];\n\n            if (!libraryData.saveDependencies || !libraryData.libraryId) {\n                return;\n            }\n\n            libraryIds.push(libraryData.libraryId);\n\n            // Remove any old dependencies.\n            await this.h5pFramework.deleteLibraryDependencies(libraryData.libraryId, siteId);\n\n            // Insert the different new ones.\n            const promises: Promise<void>[] = [];\n\n            if (libraryData.preloadedDependencies !== undefined) {\n                promises.push(this.h5pFramework.saveLibraryDependencies(\n                    libraryData,\n                    libraryData.preloadedDependencies,\n                    'preloaded',\n                ));\n            }\n            if (libraryData.dynamicDependencies !== undefined) {\n                promises.push(this.h5pFramework.saveLibraryDependencies(libraryData, libraryData.dynamicDependencies, 'dynamic'));\n            }\n            if (libraryData.editorDependencies !== undefined) {\n                promises.push(this.h5pFramework.saveLibraryDependencies(libraryData, libraryData.editorDependencies, 'editor'));\n            }\n\n            await Promise.all(promises);\n        }));\n\n        // Make sure dependencies, parameter filtering and export files get regenerated for content who uses these libraries.\n        if (libraryIds.length) {\n            await this.h5pFramework.clearFilteredParameters(libraryIds, siteId);\n        }\n    }\n\n    /**\n     * Save content data in DB and clear cache.\n     *\n     * @param data Content to save.\n     * @param folderName The name of the folder that contains the H5P.\n     * @param fileUrl The online URL of the package.\n     * @param skipContent Skip content.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the content data.\n     */\n    async savePackage(\n        data: CoreH5PMainJSONFilesData,\n        folderName: string,\n        fileUrl: string,\n        skipContent?: boolean,\n        siteId?: string,\n    ): Promise<CoreH5PContentBeingSaved> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        if (this.h5pCore.mayUpdateLibraries()) {\n            // Save the libraries that were processed.\n            await this.saveLibraries(data.librariesJsonData, folderName, siteId);\n        }\n\n        const content: CoreH5PContentBeingSaved = {};\n\n        // Add the 'title' if exists from 'h5p.json' data to be able to add it to metadata later.\n        if (typeof data.mainJsonData.title === 'string') {\n            content.title = data.mainJsonData.title;\n        }\n\n        if (!skipContent) {\n            // Find main library version.\n            if (data.mainJsonData.preloadedDependencies) {\n                const mainLib = data.mainJsonData.preloadedDependencies.find((dependency) =>\n                    dependency.machineName === data.mainJsonData.mainLibrary);\n\n                if (mainLib) {\n                    const id = await this.h5pFramework.getLibraryIdByData(mainLib);\n\n                    content.library = Object.assign(mainLib, { libraryId: id });\n                }\n            }\n\n            content.params = JSON.stringify(data.contentJsonData);\n\n            // Save the content data in DB.\n            await this.h5pCore.saveContent(content, folderName, fileUrl, siteId);\n\n            // Save the content files in their right place in FS.\n            const destFolder = CorePath.concatenatePaths(CoreFileProvider.TMPFOLDER, 'h5p/' + folderName);\n            const contentPath = CorePath.concatenatePaths(destFolder, 'content');\n\n            try {\n                await this.h5pCore.h5pFS.saveContent(contentPath, folderName, siteId);\n            } catch (error) {\n                // An error occurred, delete the DB data because the content files have been deleted.\n                await this.h5pFramework.deleteContentData(content.id!, siteId);\n\n                throw error;\n            }\n        }\n\n        return content;\n    }\n\n}\n\n/**\n * Library to save.\n */\nexport type CoreH5PLibraryBeingSaved = Omit<CoreH5PLibraryJsonData, 'metadataSettings'> & {\n    libraryId?: number; // Library ID in the DB.\n    saveDependencies?: boolean; // Whether to save dependencies.\n    metadataSettings?: CoreH5PLibraryMetadataSettings | string; // Encoded metadata settings.\n};\n\n/**\n * Data about a content being saved.\n */\nexport type CoreH5PContentBeingSaved = {\n    id?: number;\n    params?: string;\n    library?: CoreH5PContentLibrary;\n    title?: string;\n};\n\nexport type CoreH5PContentLibrary = CoreH5PLibraryBasicData & {\n    libraryId?: number; // Library ID in the DB.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}