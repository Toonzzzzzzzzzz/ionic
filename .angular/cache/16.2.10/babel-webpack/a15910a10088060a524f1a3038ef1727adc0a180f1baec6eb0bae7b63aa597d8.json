{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreGroups } from '@services/groups';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModForum, AddonModForumProvider } from '../services/forum';\nimport { AddonModForumOffline } from '../services/forum-offline';\nexport class AddonModForumDiscussionsSource extends CoreRoutedItemsManagerSource {\n  constructor(courseId, cmId, discussionsPathPrefix) {\n    super();\n    this.trackPosts = false;\n    this.usesGroups = false;\n    this.supportsChangeGroup = false;\n    this.selectedSortOrder = null;\n    this.groupId = 0;\n    this.canAddDiscussionToGroup = true;\n    this.errorLoadingDiscussions = false;\n    this.DISCUSSIONS_PATH_PREFIX = discussionsPathPrefix;\n    this.COURSE_ID = courseId;\n    this.CM_ID = cmId;\n  }\n  /**\n   * Type guard to infer NewDiscussionForm objects.\n   *\n   * @param discussion Item to check.\n   * @returns Whether the item is a new discussion form.\n   */\n  isNewDiscussionForm(discussion) {\n    return 'newDiscussion' in discussion;\n  }\n  /**\n   * Type guard to infer AddonModForumDiscussion objects.\n   *\n   * @param discussion Item to check.\n   * @returns Whether the item is an online discussion.\n   */\n  isOfflineDiscussion(discussion) {\n    return !this.isNewDiscussionForm(discussion) && !this.isOnlineDiscussion(discussion);\n  }\n  /**\n   * Type guard to infer AddonModForumDiscussion objects.\n   *\n   * @param discussion Item to check.\n   * @returns Whether the item is an online discussion.\n   */\n  isOnlineDiscussion(discussion) {\n    return 'id' in discussion;\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemPath(discussion) {\n    if (this.isOnlineDiscussion(discussion)) {\n      return this.DISCUSSIONS_PATH_PREFIX + discussion.discussion;\n    }\n    if (this.isOfflineDiscussion(discussion)) {\n      return `${this.DISCUSSIONS_PATH_PREFIX}new/${discussion.timecreated}`;\n    }\n    return `${this.DISCUSSIONS_PATH_PREFIX}new/0`;\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemQueryParams(discussion) {\n    var _this$forum;\n    const params = {\n      courseId: this.COURSE_ID,\n      cmId: this.CM_ID,\n      forumId: (_this$forum = this.forum) === null || _this$forum === void 0 ? void 0 : _this$forum.id\n    };\n    if (this.isOnlineDiscussion(discussion)) {\n      params.discussion = discussion;\n      params.trackPosts = this.trackPosts;\n    } else if (this.isNewDiscussionForm(discussion)) {\n      params.groupId = this.usesGroups ? this.groupId : undefined;\n    }\n    return params;\n  }\n  /**\n   * @inheritdoc\n   */\n  getPagesLoaded() {\n    if (this.items === null) {\n      return 0;\n    }\n    const onlineEntries = this.items.filter(item => this.isOnlineDiscussion(item));\n    return Math.ceil(onlineEntries.length / this.getPageLength());\n  }\n  /**\n   * @inheritdoc\n   */\n  getPageLength() {\n    return AddonModForumProvider.DISCUSSIONS_PER_PAGE;\n  }\n  /**\n   * Load forum.\n   */\n  loadForum() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.forum = yield AddonModForum.getForum(_this.COURSE_ID, _this.CM_ID);\n      if (_this.forum.istracked !== undefined) {\n        _this.trackPosts = _this.forum.istracked;\n      }\n    })();\n  }\n  /**\n   * Load group info.\n   */\n  loadGroupInfo(forumId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      [_this2.groupInfo, _this2.allPartsPermissions] = yield Promise.all([CoreGroups.getActivityGroupInfo(_this2.CM_ID, false), CoreUtils.ignoreErrors(AddonModForum.canAddDiscussionToAll(forumId, {\n        cmId: _this2.CM_ID\n      }))]);\n      _this2.supportsChangeGroup = AddonModForum.isGetDiscussionPostsAvailable();\n      _this2.usesGroups = !!(_this2.groupInfo.separateGroups || _this2.groupInfo.visibleGroups);\n      _this2.groupId = CoreGroups.validateGroupId(_this2.groupId, _this2.groupInfo);\n      yield _this2.loadSelectedGroupData();\n    })();\n  }\n  /**\n   * Load some specific data for current group.\n   *\n   * @returns Promise resolved when done.\n   */\n  loadSelectedGroupData() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.usesGroups) {\n        _this3.canAddDiscussionToGroup = true;\n      } else if (_this3.groupId === 0) {\n        _this3.canAddDiscussionToGroup = !_this3.allPartsPermissions || _this3.allPartsPermissions.status;\n      } else if (_this3.forum) {\n        const addDiscussionData = yield AddonModForum.canAddDiscussion(_this3.forum.id, _this3.groupId, {\n          cmId: _this3.CM_ID\n        });\n        _this3.canAddDiscussionToGroup = addDiscussionData.status;\n      } else {\n        // Shouldn't happen, assume the user can.\n        _this3.canAddDiscussionToGroup = true;\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  loadPageItems(page) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const discussions = [];\n      if (page === 0) {\n        const offlineDiscussions = yield _this4.loadOfflineDiscussions();\n        discussions.push(AddonModForumDiscussionsSource.NEW_DISCUSSION);\n        discussions.push(...offlineDiscussions);\n      }\n      const {\n        discussions: onlineDiscussions,\n        canLoadMore\n      } = yield _this4.loadOnlineDiscussions(page);\n      discussions.push(...onlineDiscussions);\n      return {\n        items: discussions,\n        hasMoreItems: canLoadMore\n      };\n    })();\n  }\n  /**\n   * Load online discussions for the given page.\n   *\n   * @param page Page.\n   * @returns Online discussions info.\n   */\n  loadOnlineDiscussions(page) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this5.forum || !_this5.selectedSortOrder) {\n        throw new Error('Can\\'t load discussions without a forum or selected sort order');\n      }\n      let discussions = [];\n      let canLoadMore = false;\n      try {\n        const response = yield AddonModForum.getDiscussions(_this5.forum.id, {\n          cmId: _this5.forum.cmid,\n          sortOrder: _this5.selectedSortOrder.value,\n          page,\n          groupId: _this5.groupId\n        });\n        discussions = response.discussions;\n        canLoadMore = response.canLoadMore;\n        _this5.errorLoadingDiscussions = false;\n      } catch (error) {\n        if (page > 0 || CoreUtils.isWebServiceError(error)) {\n          throw error;\n        }\n        // Error loading first discussions, use an empty list.\n        _this5.errorLoadingDiscussions = true;\n      }\n      if (_this5.usesGroups) {\n        discussions = yield AddonModForum.formatDiscussionsGroups(_this5.forum.cmid, discussions);\n      }\n      // Hide author for first post and type single.\n      if (_this5.forum.type === 'single') {\n        for (const discussion of discussions) {\n          if (discussion.userfullname && discussion.parent === 0) {\n            discussion.userfullname = false;\n            break;\n          }\n        }\n      }\n      // If any discussion has unread posts, the whole forum is being tracked.\n      if (_this5.forum.istracked === undefined && !_this5.trackPosts) {\n        for (const discussion of discussions) {\n          if (discussion.numunread > 0) {\n            _this5.trackPosts = true;\n            break;\n          }\n        }\n      }\n      return {\n        discussions,\n        canLoadMore\n      };\n    })();\n  }\n  /**\n   * Load offline discussions.\n   *\n   * @returns Offline discussions.\n   */\n  loadOfflineDiscussions() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this6.forum) {\n        throw new Error('Can\\'t load discussions without a forum');\n      }\n      const forum = _this6.forum;\n      let offlineDiscussions = yield AddonModForumOffline.getNewDiscussions(forum.id);\n      if (offlineDiscussions.length === 0) {\n        return [];\n      }\n      if (_this6.usesGroups) {\n        offlineDiscussions = yield AddonModForum.formatDiscussionsGroups(forum.cmid, offlineDiscussions);\n      }\n      // Fill user data for Offline discussions (should be already cached).\n      const promises = offlineDiscussions.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (offlineDiscussion) {\n          const discussion = offlineDiscussion;\n          if (discussion.parent === 0 || forum.type === 'single') {\n            // Do not show author for first post and type single.\n            return;\n          }\n          try {\n            const user = yield CoreUser.getProfile(discussion.userid, _this6.COURSE_ID, true);\n            discussion.userfullname = user.fullname;\n            discussion.userpictureurl = user.profileimageurl;\n          } catch (_unused) {\n            // Ignore errors.\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      yield Promise.all(promises);\n      // Sort discussion by time (newer first).\n      offlineDiscussions.sort((a, b) => b.timecreated - a.timecreated);\n      return offlineDiscussions;\n    })();\n  }\n  /**\n   * Invalidate cache data.\n   *\n   * @returns Promise resolved when done.\n   */\n  invalidateCache() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      promises.push(AddonModForum.invalidateForumData(_this7.COURSE_ID));\n      if (_this7.forum) {\n        promises.push(AddonModForum.invalidateDiscussionsList(_this7.forum.id));\n        promises.push(AddonModForum.invalidateCanAddDiscussion(_this7.forum.id));\n        promises.push(CoreGroups.invalidateActivityGroupInfo(_this7.forum.cmid));\n      }\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Invalidate list cache data.\n   *\n   * @returns Promise resolved when done.\n   */\n  invalidateList() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (_this8.forum) {\n        yield AddonModForum.invalidateDiscussionsList(_this8.forum.id);\n      }\n    })();\n  }\n}\n_class = AddonModForumDiscussionsSource;\n_class.NEW_DISCUSSION = {\n  newDiscussion: true\n};","map":{"version":3,"names":["CoreRoutedItemsManagerSource","CoreUser","CoreGroups","CoreUtils","AddonModForum","AddonModForumProvider","AddonModForumOffline","AddonModForumDiscussionsSource","constructor","courseId","cmId","discussionsPathPrefix","trackPosts","usesGroups","supportsChangeGroup","selectedSortOrder","groupId","canAddDiscussionToGroup","errorLoadingDiscussions","DISCUSSIONS_PATH_PREFIX","COURSE_ID","CM_ID","isNewDiscussionForm","discussion","isOfflineDiscussion","isOnlineDiscussion","getItemPath","timecreated","getItemQueryParams","_this$forum","params","forumId","forum","id","undefined","getPagesLoaded","items","onlineEntries","filter","item","Math","ceil","length","getPageLength","DISCUSSIONS_PER_PAGE","loadForum","_this","_asyncToGenerator","getForum","istracked","loadGroupInfo","_this2","groupInfo","allPartsPermissions","Promise","all","getActivityGroupInfo","ignoreErrors","canAddDiscussionToAll","isGetDiscussionPostsAvailable","separateGroups","visibleGroups","validateGroupId","loadSelectedGroupData","_this3","status","addDiscussionData","canAddDiscussion","loadPageItems","page","_this4","discussions","offlineDiscussions","loadOfflineDiscussions","push","NEW_DISCUSSION","onlineDiscussions","canLoadMore","loadOnlineDiscussions","hasMoreItems","_this5","Error","response","getDiscussions","cmid","sortOrder","value","error","isWebServiceError","formatDiscussionsGroups","type","userfullname","parent","numunread","_this6","getNewDiscussions","promises","map","_ref","offlineDiscussion","user","getProfile","userid","fullname","userpictureurl","profileimageurl","_unused","_x","apply","arguments","sort","a","b","invalidateCache","_this7","invalidateForumData","invalidateDiscussionsList","invalidateCanAddDiscussion","invalidateActivityGroupInfo","invalidateList","_this8","_class","newDiscussion"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/forum/classes/forum-discussions-source.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Params } from '@angular/router';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport { CoreUtils } from '@services/utils/utils';\nimport {\n    AddonModForum,\n    AddonModForumCanAddDiscussion,\n    AddonModForumData,\n    AddonModForumDiscussion,\n    AddonModForumProvider,\n    AddonModForumSortOrder,\n} from '../services/forum';\nimport { AddonModForumOffline, AddonModForumOfflineDiscussion } from '../services/forum-offline';\n\nexport class AddonModForumDiscussionsSource extends CoreRoutedItemsManagerSource<AddonModForumDiscussionItem> {\n\n    static readonly NEW_DISCUSSION: AddonModForumNewDiscussionForm = { newDiscussion: true };\n\n    readonly DISCUSSIONS_PATH_PREFIX: string;\n    readonly COURSE_ID: number;\n    readonly CM_ID: number;\n\n    forum?: AddonModForumData;\n    trackPosts = false;\n    usesGroups = false;\n    supportsChangeGroup = false;\n    selectedSortOrder: AddonModForumSortOrder | null = null;\n    groupId = 0;\n    groupInfo?: CoreGroupInfo;\n    allPartsPermissions?: AddonModForumCanAddDiscussion;\n    canAddDiscussionToGroup = true;\n    errorLoadingDiscussions = false;\n\n    constructor(courseId: number, cmId: number, discussionsPathPrefix: string) {\n        super();\n\n        this.DISCUSSIONS_PATH_PREFIX = discussionsPathPrefix;\n        this.COURSE_ID = courseId;\n        this.CM_ID = cmId;\n    }\n\n    /**\n     * Type guard to infer NewDiscussionForm objects.\n     *\n     * @param discussion Item to check.\n     * @returns Whether the item is a new discussion form.\n     */\n    isNewDiscussionForm(discussion: AddonModForumDiscussionItem): discussion is AddonModForumNewDiscussionForm {\n        return 'newDiscussion' in discussion;\n    }\n\n    /**\n     * Type guard to infer AddonModForumDiscussion objects.\n     *\n     * @param discussion Item to check.\n     * @returns Whether the item is an online discussion.\n     */\n    isOfflineDiscussion(discussion: AddonModForumDiscussionItem): discussion is AddonModForumOfflineDiscussion {\n        return !this.isNewDiscussionForm(discussion) && !this.isOnlineDiscussion(discussion);\n    }\n\n    /**\n     * Type guard to infer AddonModForumDiscussion objects.\n     *\n     * @param discussion Item to check.\n     * @returns Whether the item is an online discussion.\n     */\n    isOnlineDiscussion(discussion: AddonModForumDiscussionItem): discussion is AddonModForumDiscussion {\n        return 'id' in discussion;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(discussion: AddonModForumDiscussionItem): string {\n        if (this.isOnlineDiscussion(discussion)) {\n            return this.DISCUSSIONS_PATH_PREFIX + discussion.discussion;\n        }\n\n        if (this.isOfflineDiscussion(discussion)) {\n            return `${this.DISCUSSIONS_PATH_PREFIX}new/${discussion.timecreated}`;\n        }\n\n        return `${this.DISCUSSIONS_PATH_PREFIX}new/0`;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemQueryParams(discussion: AddonModForumDiscussionItem): Params {\n        const params: Params = {\n            courseId: this.COURSE_ID,\n            cmId: this.CM_ID,\n            forumId: this.forum?.id,\n        };\n\n        if (this.isOnlineDiscussion(discussion)) {\n            params.discussion = discussion;\n            params.trackPosts = this.trackPosts;\n        } else if (this.isNewDiscussionForm(discussion)) {\n            params.groupId = this.usesGroups ? this.groupId : undefined;\n        }\n\n        return params;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getPagesLoaded(): number {\n        if (this.items === null) {\n            return 0;\n        }\n\n        const onlineEntries = this.items.filter(item => this.isOnlineDiscussion(item));\n\n        return Math.ceil(onlineEntries.length / this.getPageLength());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getPageLength(): number {\n        return AddonModForumProvider.DISCUSSIONS_PER_PAGE;\n    }\n\n    /**\n     * Load forum.\n     */\n    async loadForum(): Promise<void> {\n        this.forum = await AddonModForum.getForum(this.COURSE_ID, this.CM_ID);\n\n        if (this.forum.istracked !== undefined) {\n            this.trackPosts = this.forum.istracked;\n        }\n    }\n\n    /**\n     * Load group info.\n     */\n    async loadGroupInfo(forumId: number): Promise<void> {\n        [this.groupInfo, this.allPartsPermissions] = await Promise.all([\n            CoreGroups.getActivityGroupInfo(this.CM_ID, false),\n            CoreUtils.ignoreErrors(AddonModForum.canAddDiscussionToAll(forumId, { cmId: this.CM_ID })),\n        ]);\n\n        this.supportsChangeGroup = AddonModForum.isGetDiscussionPostsAvailable();\n        this.usesGroups = !!(this.groupInfo.separateGroups || this.groupInfo.visibleGroups);\n        this.groupId = CoreGroups.validateGroupId(this.groupId, this.groupInfo);\n\n        await this.loadSelectedGroupData();\n    }\n\n    /**\n     * Load some specific data for current group.\n     *\n     * @returns Promise resolved when done.\n     */\n    async loadSelectedGroupData(): Promise<void> {\n        if (!this.usesGroups) {\n            this.canAddDiscussionToGroup = true;\n        } else if (this.groupId === 0) {\n            this.canAddDiscussionToGroup = !this.allPartsPermissions || this.allPartsPermissions.status;\n        } else if (this.forum) {\n            const addDiscussionData = await AddonModForum.canAddDiscussion(this.forum.id, this.groupId, { cmId: this.CM_ID });\n\n            this.canAddDiscussionToGroup = addDiscussionData.status;\n        } else {\n            // Shouldn't happen, assume the user can.\n            this.canAddDiscussionToGroup = true;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(page: number): Promise<{ items: AddonModForumDiscussionItem[]; hasMoreItems: boolean }> {\n        const discussions: AddonModForumDiscussionItem[] = [];\n\n        if (page === 0) {\n            const offlineDiscussions = await this.loadOfflineDiscussions();\n\n            discussions.push(AddonModForumDiscussionsSource.NEW_DISCUSSION);\n            discussions.push(...offlineDiscussions);\n        }\n\n        const { discussions: onlineDiscussions, canLoadMore } = await this.loadOnlineDiscussions(page);\n\n        discussions.push(...onlineDiscussions);\n\n        return {\n            items: discussions,\n            hasMoreItems: canLoadMore,\n        };\n    }\n\n    /**\n     * Load online discussions for the given page.\n     *\n     * @param page Page.\n     * @returns Online discussions info.\n     */\n    private async loadOnlineDiscussions(page: number): Promise<{\n        discussions: AddonModForumDiscussionItem[];\n        canLoadMore: boolean;\n    }> {\n        if (!this.forum || !this.selectedSortOrder) {\n            throw new Error('Can\\'t load discussions without a forum or selected sort order');\n        }\n\n        let discussions: AddonModForumDiscussion[] = [];\n        let canLoadMore = false;\n        try {\n            const response = await AddonModForum.getDiscussions(this.forum.id, {\n                cmId: this.forum.cmid,\n                sortOrder: this.selectedSortOrder.value,\n                page,\n                groupId: this.groupId,\n            });\n\n            discussions = response.discussions;\n            canLoadMore = response.canLoadMore;\n            this.errorLoadingDiscussions = false;\n        } catch (error) {\n            if (page > 0 || CoreUtils.isWebServiceError(error)) {\n                throw error;\n            }\n\n            // Error loading first discussions, use an empty list.\n            this.errorLoadingDiscussions = true;\n        }\n\n        if (this.usesGroups) {\n            discussions = await AddonModForum.formatDiscussionsGroups(this.forum.cmid, discussions);\n        }\n\n        // Hide author for first post and type single.\n        if (this.forum.type === 'single') {\n            for (const discussion of discussions) {\n                if (discussion.userfullname && discussion.parent === 0) {\n                    discussion.userfullname = false;\n                    break;\n                }\n            }\n        }\n\n        // If any discussion has unread posts, the whole forum is being tracked.\n        if (this.forum.istracked === undefined && !this.trackPosts) {\n            for (const discussion of discussions) {\n                if (discussion.numunread > 0) {\n                    this.trackPosts = true;\n                    break;\n                }\n            }\n        }\n\n        return { discussions, canLoadMore };\n    }\n\n    /**\n     * Load offline discussions.\n     *\n     * @returns Offline discussions.\n     */\n    private async loadOfflineDiscussions(): Promise<AddonModForumOfflineDiscussion[]> {\n        if (!this.forum) {\n            throw new Error('Can\\'t load discussions without a forum');\n        }\n\n        const forum = this.forum;\n        let offlineDiscussions = await AddonModForumOffline.getNewDiscussions(forum.id);\n\n        if (offlineDiscussions.length === 0) {\n            return [];\n        }\n\n        if (this.usesGroups) {\n            offlineDiscussions = await AddonModForum.formatDiscussionsGroups(forum.cmid, offlineDiscussions);\n        }\n\n        // Fill user data for Offline discussions (should be already cached).\n        const promises = offlineDiscussions.map(async (offlineDiscussion) => {\n            const discussion = offlineDiscussion as unknown as AddonModForumDiscussion;\n\n            if (discussion.parent === 0 || forum.type === 'single') {\n                // Do not show author for first post and type single.\n                return;\n            }\n\n            try {\n                const user = await CoreUser.getProfile(discussion.userid, this.COURSE_ID, true);\n\n                discussion.userfullname = user.fullname;\n                discussion.userpictureurl = user.profileimageurl;\n            } catch {\n                // Ignore errors.\n            }\n        });\n\n        await Promise.all(promises);\n\n        // Sort discussion by time (newer first).\n        offlineDiscussions.sort((a, b) => b.timecreated - a.timecreated);\n\n        return offlineDiscussions;\n    }\n\n    /**\n     * Invalidate cache data.\n     *\n     * @returns Promise resolved when done.\n     */\n    async invalidateCache(): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(AddonModForum.invalidateForumData(this.COURSE_ID));\n\n        if (this.forum) {\n            promises.push(AddonModForum.invalidateDiscussionsList(this.forum.id));\n            promises.push(AddonModForum.invalidateCanAddDiscussion(this.forum.id));\n            promises.push(CoreGroups.invalidateActivityGroupInfo(this.forum.cmid));\n        }\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Invalidate list cache data.\n     *\n     * @returns Promise resolved when done.\n     */\n    async invalidateList(): Promise<void> {\n        if (this.forum) {\n            await AddonModForum.invalidateDiscussionsList(this.forum.id);\n        }\n    }\n\n}\n\n/**\n * Type to select the new discussion form.\n */\nexport type AddonModForumNewDiscussionForm = { newDiscussion: true };\n\n/**\n * Type of items that can be held by the discussions manager.\n */\nexport type AddonModForumDiscussionItem = AddonModForumDiscussion | AddonModForumOfflineDiscussion | AddonModForumNewDiscussionForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}