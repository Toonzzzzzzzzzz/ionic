{"ast":null,"code":"var _class;\nimport { CoreDelegateToDisplay } from '@classes/delegate';\nimport { CoreSortedDelegate } from '@classes/delegate-sorted';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to interact with plugins to be shown in the main menu. Provides functions to register a plugin\n * and notify an update in the data.\n */\nexport class CoreMainMenuDelegateService extends CoreSortedDelegate {\n  constructor() {\n    super('CoreMainMenuDelegate');\n    this.featurePrefix = 'CoreMainMenuDelegate_';\n  }\n}\n_class = CoreMainMenuDelegateService;\n_class.ɵfac = function CoreMainMenuDelegateService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreMainMenuDelegate = makeSingleton(CoreMainMenuDelegateService);","map":{"version":3,"names":["CoreDelegateToDisplay","CoreSortedDelegate","makeSingleton","CoreMainMenuDelegateService","constructor","featurePrefix","factory","ɵfac","providedIn","CoreMainMenuDelegate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/mainmenu/services/mainmenu-delegate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\n\nimport { CoreDelegateDisplayHandler, CoreDelegateToDisplay } from '@classes/delegate';\nimport { CoreSortedDelegate } from '@classes/delegate-sorted';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Interface that all main menu handlers must implement.\n */\nexport type CoreMainMenuHandler = CoreDelegateDisplayHandler<CoreMainMenuHandlerToDisplay>;\n\n/**\n * Data needed to render a main menu handler. It's returned by the handler.\n */\nexport interface CoreMainMenuHandlerData {\n    /**\n     * Name of the page to load for the handler.\n     */\n    page: string;\n\n    /**\n     * Title to display for the handler.\n     */\n    title: string;\n\n    /**\n     * Name of the icon to display for the handler.\n     */\n    icon: string; // Name of the icon to display in the tab.\n\n    /**\n     * Class to add to the displayed handler.\n     */\n    class?: string;\n\n    /**\n     * If the handler has badge to show or not.\n     */\n    showBadge?: boolean;\n\n    /**\n     * Text to display on the badge. Only used if showBadge is true.\n     */\n    badge?: string;\n\n    /**\n     * Accessibility text to add on the badge. Only used if showBadge is true.\n     */\n    badgeA11yText?: string;\n\n    /**\n     * If true, the badge number is being loaded. Only used if showBadge is true.\n     */\n    loading?: boolean;\n\n    /**\n     * Params to pass to the page.\n     */\n    pageParams?: Params;\n\n    /**\n     * Whether the handler should only appear in More menu.\n     */\n    onlyInMore?: boolean;\n\n    /**\n     * Priority of the handler. If set, overrides the priority defined in CoreMainMenuHandler.\n     */\n    priority?: number;\n}\n\n/**\n * Data returned by the delegate for each handler.\n */\nexport interface CoreMainMenuHandlerToDisplay extends CoreDelegateToDisplay, CoreMainMenuHandlerData {\n    /**\n     * Hide tab. Used then resizing.\n     */\n    hide?: boolean;\n\n    /**\n     * Used to control tabs.\n     */\n    id?: string;\n}\n\n/**\n * Service to interact with plugins to be shown in the main menu. Provides functions to register a plugin\n * and notify an update in the data.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreMainMenuDelegateService extends CoreSortedDelegate<CoreMainMenuHandlerToDisplay, CoreMainMenuHandler> {\n\n    protected featurePrefix = 'CoreMainMenuDelegate_';\n\n    constructor() {\n        super('CoreMainMenuDelegate');\n    }\n\n}\n\nexport const CoreMainMenuDelegate = makeSingleton(CoreMainMenuDelegateService);\n"],"mappings":";AAiBA,SAAqCA,qBAAqB,QAAQ,mBAAmB;AACrF,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,aAAa,QAAQ,aAAa;;AAkF3C;;;;AAKA,OAAM,MAAOC,2BAA4B,SAAQF,kBAAqE;EAIlHG,YAAA;IACI,KAAK,CAAC,sBAAsB,CAAC;IAHvB,KAAAC,aAAa,GAAG,uBAAuB;EAIjD;;SANSF,2BAA4B;;mBAA5BA,MAA2B;AAAA;;SAA3BA,MAA2B;EAAAG,OAAA,EAA3BH,MAA2B,CAAAI,IAAA;EAAAC,UAAA,EADd;AAAM;AAWhC,OAAO,MAAMC,oBAAoB,GAAGP,aAAa,CAACC,2BAA2B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}