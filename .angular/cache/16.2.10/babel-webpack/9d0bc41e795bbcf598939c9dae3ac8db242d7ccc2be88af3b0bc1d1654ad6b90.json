{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreEnrolAction } from '@features/enrol/services/enrol-delegate';\nimport { Translate, makeSingleton } from '@singletons';\nimport { AddonEnrolSelf } from './self';\nimport { CoreCoursesProvider } from '@features/courses/services/courses';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreEnrol } from '@features/enrol/services/enrol';\nimport * as i0 from \"@angular/core\";\n/**\n * Enrol handler.\n */\nexport class AddonEnrolSelfHandlerService {\n  constructor() {\n    this.name = 'AddonEnrolSelf';\n    this.type = 'self';\n    this.enrolmentAction = CoreEnrolAction.SELF;\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getInfoIcons(courseId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const selfEnrolments = yield CoreEnrol.getSupportedCourseEnrolmentMethods(courseId, {\n        type: _this.type\n      });\n      let passwordRequired = false;\n      let noPasswordRequired = false;\n      for (const selfEnrolment of selfEnrolments) {\n        const info = yield AddonEnrolSelf.getSelfEnrolmentInfo(selfEnrolment.id);\n        // Don't allow self access if it requires a password if not supported.\n        if (!info.enrolpassword) {\n          noPasswordRequired = true;\n        } else {\n          passwordRequired = true;\n        }\n        if (noPasswordRequired && passwordRequired) {\n          break;\n        }\n      }\n      const icons = [];\n      if (noPasswordRequired) {\n        icons.push({\n          label: 'addon.enrol_self.pluginname',\n          icon: 'fas-right-to-bracket'\n        });\n      }\n      if (passwordRequired) {\n        icons.push({\n          label: 'addon.enrol_self.pluginname',\n          icon: 'fas-key'\n        });\n      }\n      return icons;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  enrol(method) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const info = yield AddonEnrolSelf.getSelfEnrolmentInfo(method.id);\n      // Don't allow self access if it requires a password if not supported.\n      if (!info.enrolpassword) {\n        try {\n          yield CoreDomUtils.showConfirm(Translate.instant('addon.enrol_self.confirmselfenrol') + '<br>' + Translate.instant('addon.enrol_self.nopassword'), method.name);\n        } catch (_unused) {\n          // User cancelled.\n          return false;\n        }\n      }\n      try {\n        return yield _this2.performEnrol(method);\n      } catch (_unused2) {\n        return false;\n      }\n    })();\n  }\n  /**\n   * Self enrol in a course.\n   *\n   * @param method Enrolment method\n   * @returns Promise resolved when self enrolled.\n   */\n  performEnrol(method) {\n    return _asyncToGenerator(function* () {\n      const validatePassword = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (password = '') {\n          const modal = yield CoreDomUtils.showModalLoading('core.loading', true);\n          const response = {\n            password\n          };\n          try {\n            response.validated = yield AddonEnrolSelf.selfEnrol(method.courseid, password, method.id);\n          } catch (error) {\n            if (error && error.errorcode === CoreCoursesProvider.ENROL_INVALID_KEY) {\n              response.validated = false;\n              response.error = error.message;\n            } else {\n              CoreDomUtils.showErrorModalDefault(error, 'addon.enrol_self.errorselfenrol', true);\n              throw error;\n            }\n          } finally {\n            modal.dismiss();\n          }\n          return response;\n        });\n        return function validatePassword() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      let response;\n      try {\n        response = yield validatePassword();\n      } catch (_unused3) {\n        return false;\n      }\n      if (!response.validated) {\n        try {\n          const response = yield CoreDomUtils.promptPassword({\n            validator: validatePassword,\n            title: method.name,\n            placeholder: 'addon.enrol_self.password',\n            submit: 'core.courses.enrolme'\n          });\n          if (!response.validated) {\n            return false;\n          }\n        } catch (_unused4) {\n          // Cancelled, return\n          return false;\n        }\n      }\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidate(method) {\n    return _asyncToGenerator(function* () {\n      return AddonEnrolSelf.invalidateSelfEnrolmentInfo(method.id);\n    })();\n  }\n}\n_class = AddonEnrolSelfHandlerService;\n_class.ɵfac = function AddonEnrolSelfHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonEnrolSelfHandler = makeSingleton(AddonEnrolSelfHandlerService);","map":{"version":3,"names":["CoreEnrolAction","Translate","makeSingleton","AddonEnrolSelf","CoreCoursesProvider","CoreDomUtils","CoreEnrol","AddonEnrolSelfHandlerService","constructor","name","type","enrolmentAction","SELF","isEnabled","_asyncToGenerator","getInfoIcons","courseId","_this","selfEnrolments","getSupportedCourseEnrolmentMethods","passwordRequired","noPasswordRequired","selfEnrolment","info","getSelfEnrolmentInfo","id","enrolpassword","icons","push","label","icon","enrol","method","_this2","showConfirm","instant","_unused","performEnrol","_unused2","validatePassword","_ref","password","modal","showModalLoading","response","validated","selfEnrol","courseid","error","errorcode","ENROL_INVALID_KEY","message","showErrorModalDefault","dismiss","apply","arguments","_unused3","promptPassword","validator","title","placeholder","submit","_unused4","invalidate","invalidateSelfEnrolmentInfo","factory","ɵfac","providedIn","AddonEnrolSelfHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/enrol/self/services/enrol-handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreEnrolAction, CoreEnrolSelfHandler, CoreEnrolInfoIcon } from '@features/enrol/services/enrol-delegate';\nimport { Translate, makeSingleton } from '@singletons';\nimport { AddonEnrolSelf } from './self';\nimport { CorePasswordModalResponse } from '@components/password-modal/password-modal';\nimport { CoreCoursesProvider } from '@features/courses/services/courses';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreEnrol, CoreEnrolEnrolmentMethod } from '@features/enrol/services/enrol';\n\n/**\n * Enrol handler.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonEnrolSelfHandlerService implements CoreEnrolSelfHandler {\n\n    name = 'AddonEnrolSelf';\n    type = 'self';\n    enrolmentAction = <CoreEnrolAction.SELF> CoreEnrolAction.SELF;\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getInfoIcons(courseId: number): Promise<CoreEnrolInfoIcon[]> {\n        const selfEnrolments = await CoreEnrol.getSupportedCourseEnrolmentMethods(courseId, { type: this.type });\n        let passwordRequired = false;\n        let noPasswordRequired = false;\n\n        for (const selfEnrolment of selfEnrolments) {\n            const info = await AddonEnrolSelf.getSelfEnrolmentInfo(selfEnrolment.id);\n            // Don't allow self access if it requires a password if not supported.\n            if (!info.enrolpassword) {\n                noPasswordRequired = true;\n            } else {\n                passwordRequired = true;\n            }\n            if (noPasswordRequired && passwordRequired) {\n                break;\n            }\n        }\n\n        const icons: CoreEnrolInfoIcon[] = [];\n        if (noPasswordRequired) {\n            icons.push({\n                label: 'addon.enrol_self.pluginname',\n                icon: 'fas-right-to-bracket',\n            });\n        }\n\n        if (passwordRequired) {\n            icons.push({\n                label: 'addon.enrol_self.pluginname',\n                icon: 'fas-key',\n            });\n        }\n\n        return icons;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async enrol(method: CoreEnrolEnrolmentMethod): Promise<boolean> {\n        const info = await AddonEnrolSelf.getSelfEnrolmentInfo(method.id);\n        // Don't allow self access if it requires a password if not supported.\n        if (!info.enrolpassword) {\n            try {\n                await CoreDomUtils.showConfirm(\n                    Translate.instant('addon.enrol_self.confirmselfenrol') + '<br>' +\n                    Translate.instant('addon.enrol_self.nopassword'),\n                    method.name,\n                );\n            } catch {\n                // User cancelled.\n                return false;\n            }\n        }\n\n        try {\n            return await this.performEnrol(method);\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Self enrol in a course.\n     *\n     * @param method Enrolment method\n     * @returns Promise resolved when self enrolled.\n     */\n    protected async performEnrol(method: CoreEnrolEnrolmentMethod): Promise<boolean> {\n        const validatePassword = async (password = ''): Promise<CorePasswordModalResponse> => {\n            const modal = await CoreDomUtils.showModalLoading('core.loading', true);\n\n            const response: CorePasswordModalResponse = {\n                password,\n            };\n\n            try {\n                response.validated = await AddonEnrolSelf.selfEnrol(method.courseid, password, method.id);\n            } catch (error) {\n                if (error && error.errorcode === CoreCoursesProvider.ENROL_INVALID_KEY) {\n                    response.validated = false;\n                    response.error = error.message;\n                } else {\n                    CoreDomUtils.showErrorModalDefault(error, 'addon.enrol_self.errorselfenrol', true);\n\n                    throw error;\n                }\n            } finally {\n                modal.dismiss();\n            }\n\n            return response;\n        };\n\n        let response: CorePasswordModalResponse | undefined;\n\n        try {\n            response = await validatePassword();\n        } catch {\n            return false;\n        }\n\n        if (!response.validated) {\n            try {\n                const response = await CoreDomUtils.promptPassword({\n                    validator: validatePassword,\n                    title: method.name,\n                    placeholder: 'addon.enrol_self.password',\n                    submit: 'core.courses.enrolme',\n                });\n\n                if (!response.validated) {\n                    return false;\n                }\n            } catch {\n                // Cancelled, return\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidate(method: CoreEnrolEnrolmentMethod): Promise<void> {\n        return AddonEnrolSelf.invalidateSelfEnrolmentInfo(method.id);\n    }\n\n}\n\nexport const AddonEnrolSelfHandler = makeSingleton(AddonEnrolSelfHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}