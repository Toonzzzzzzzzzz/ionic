{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonMessageOutputDelegate } from '@addons/messageoutput/services/messageoutput-delegate';\nimport { AddonNotifications, AddonNotificationsProvider } from './notifications';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides some helper functions for notifications.\n */\nexport class AddonNotificationsHelperProvider {\n  /**\n   * Formats the text of a notification.\n   *\n   * @param notification The notification object.\n   * @returns The notification formatted to render.\n   * @deprecated since 4.2. This function isn't needed anymore.\n   */\n  formatNotificationText(notification) {\n    return notification;\n  }\n  /**\n   * Format preferences data.\n   *\n   * @param preferences Preferences to format.\n   * @returns Formatted preferences.\n   */\n  formatPreferences(preferences) {\n    const formattedPreferences = preferences;\n    formattedPreferences.processors.forEach(processor => {\n      processor.supported = AddonMessageOutputDelegate.hasHandler(processor.name, true);\n    });\n    formattedPreferences.components.forEach(component => {\n      component.notifications.forEach(notification => {\n        notification.processorsByName = CoreUtils.arrayToObject(notification.processors, 'name');\n      });\n    });\n    return formattedPreferences;\n  }\n  /**\n   * Return the components and notifications that have a certain processor.\n   *\n   * @param processorName Name of the processor to filter.\n   * @param components Array of components.\n   * @returns Filtered components.\n   */\n  getProcessorComponents(processorName, components) {\n    const result = [];\n    components.forEach(component => {\n      // Check if the component has any notification with this processor.\n      const notifications = [];\n      component.notifications.forEach(notification => {\n        var _notification$process;\n        const processor = (_notification$process = notification.processorsByName) === null || _notification$process === void 0 ? void 0 : _notification$process[processorName];\n        if (processor) {\n          // Add the notification.\n          notifications.push(notification);\n        }\n      });\n      if (notifications.length) {\n        // At least 1 notification added, add the component to the result.\n        result.push({\n          displayname: component.displayname,\n          notifications\n        });\n      }\n    });\n    return result;\n  }\n  /**\n   * Mark notification as read, trigger event and invalidate data.\n   *\n   * @param notification Notification object.\n   * @returns Promise resolved when done.\n   */\n  markNotificationAsRead(notification, siteId) {\n    return _asyncToGenerator(function* () {\n      if ('read' in notification && (notification.read || notification.timeread > 0)) {\n        // Already read, don't mark it.\n        return false;\n      }\n      const notifId = 'savedmessageid' in notification ? notification.savedmessageid || notification.id : notification.id;\n      if (!notifId) {\n        return false;\n      }\n      siteId = 'site' in notification ? notification.site : siteId;\n      yield CoreUtils.ignoreErrors(AddonNotifications.markNotificationRead(notifId, siteId));\n      const time = CoreTimeUtils.timestamp();\n      if ('read' in notification) {\n        notification.read = true;\n        notification.timeread = time;\n      }\n      yield CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationsList());\n      CoreEvents.trigger(AddonNotificationsProvider.READ_CHANGED_EVENT, {\n        id: notifId,\n        time\n      }, siteId);\n      return true;\n    })();\n  }\n}\n_class = AddonNotificationsHelperProvider;\n_class.ɵfac = function AddonNotificationsHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonNotificationsHelper = makeSingleton(AddonNotificationsHelperProvider);","map":{"version":3,"names":["CoreUtils","makeSingleton","AddonMessageOutputDelegate","AddonNotifications","AddonNotificationsProvider","CoreEvents","CoreTimeUtils","AddonNotificationsHelperProvider","formatNotificationText","notification","formatPreferences","preferences","formattedPreferences","processors","forEach","processor","supported","hasHandler","name","components","component","notifications","processorsByName","arrayToObject","getProcessorComponents","processorName","result","_notification$process","push","length","displayname","markNotificationAsRead","siteId","_asyncToGenerator","read","timeread","notifId","savedmessageid","id","site","ignoreErrors","markNotificationRead","time","timestamp","invalidateNotificationsList","trigger","READ_CHANGED_EVENT","factory","ɵfac","providedIn","AddonNotificationsHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/notifications/services/notifications-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonMessageOutputDelegate } from '@addons/messageoutput/services/messageoutput-delegate';\nimport {\n    AddonNotifications,\n    AddonNotificationsNotificationMessageFormatted,\n    AddonNotificationsPreferences,\n    AddonNotificationsPreferencesComponent,\n    AddonNotificationsPreferencesNotification,\n    AddonNotificationsPreferencesNotificationProcessor,\n    AddonNotificationsPreferencesProcessor,\n    AddonNotificationsProvider,\n} from './notifications';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonNotificationsPushNotification } from './handlers/push-click';\nimport { CoreTimeUtils } from '@services/utils/time';\n\n/**\n * Service that provides some helper functions for notifications.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonNotificationsHelperProvider {\n\n    /**\n     * Formats the text of a notification.\n     *\n     * @param notification The notification object.\n     * @returns The notification formatted to render.\n     * @deprecated since 4.2. This function isn't needed anymore.\n     */\n    formatNotificationText(\n        notification: AddonNotificationsNotificationMessageFormatted,\n    ): AddonNotificationsNotificationMessageFormatted {\n        return notification;\n    }\n\n    /**\n     * Format preferences data.\n     *\n     * @param preferences Preferences to format.\n     * @returns Formatted preferences.\n     */\n    formatPreferences(preferences: AddonNotificationsPreferences): AddonNotificationsPreferencesFormatted {\n        const formattedPreferences: AddonNotificationsPreferencesFormatted = preferences;\n\n        formattedPreferences.processors.forEach((processor) => {\n            processor.supported = AddonMessageOutputDelegate.hasHandler(processor.name, true);\n        });\n\n        formattedPreferences.components.forEach((component) => {\n            component.notifications.forEach((notification) => {\n                notification.processorsByName = CoreUtils.arrayToObject(notification.processors, 'name');\n            });\n        });\n\n        return formattedPreferences;\n    }\n\n    /**\n     * Return the components and notifications that have a certain processor.\n     *\n     * @param processorName Name of the processor to filter.\n     * @param components Array of components.\n     * @returns Filtered components.\n     */\n    getProcessorComponents(\n        processorName: string,\n        components: AddonNotificationsPreferencesComponentFormatted[],\n    ): AddonNotificationsPreferencesComponentFormatted[] {\n        const result: AddonNotificationsPreferencesComponentFormatted[] = [];\n\n        components.forEach((component) => {\n            // Check if the component has any notification with this processor.\n            const notifications: AddonNotificationsPreferencesNotificationFormatted[] = [];\n\n            component.notifications.forEach((notification) => {\n                const processor = notification.processorsByName?.[processorName];\n\n                if (processor) {\n                    // Add the notification.\n                    notifications.push(notification);\n                }\n            });\n\n            if (notifications.length) {\n                // At least 1 notification added, add the component to the result.\n                result.push({\n                    displayname: component.displayname,\n                    notifications,\n                });\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Mark notification as read, trigger event and invalidate data.\n     *\n     * @param notification Notification object.\n     * @returns Promise resolved when done.\n     */\n    async markNotificationAsRead(\n        notification: AddonNotificationsNotificationMessageFormatted | AddonNotificationsPushNotification,\n        siteId?: string,\n    ): Promise<boolean> {\n        if ('read' in notification && (notification.read || notification.timeread > 0)) {\n            // Already read, don't mark it.\n            return false;\n        }\n\n        const notifId = 'savedmessageid' in notification ? notification.savedmessageid || notification.id : notification.id;\n        if (!notifId) {\n            return false;\n        }\n\n        siteId = 'site' in notification ? notification.site : siteId;\n\n        await CoreUtils.ignoreErrors(AddonNotifications.markNotificationRead(notifId, siteId));\n\n        const time = CoreTimeUtils.timestamp();\n        if ('read' in notification) {\n            notification.read = true;\n            notification.timeread = time;\n        }\n\n        await CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationsList());\n\n        CoreEvents.trigger(AddonNotificationsProvider.READ_CHANGED_EVENT, {\n            id: notifId,\n            time,\n        }, siteId);\n\n        return true;\n    }\n\n}\n\nexport const AddonNotificationsHelper = makeSingleton(AddonNotificationsHelperProvider);\n\n/**\n * Preferences with some calculated data.\n */\nexport type AddonNotificationsPreferencesFormatted = Omit<AddonNotificationsPreferences, 'processors'|'components'> & {\n    processors: AddonNotificationsPreferencesProcessorFormatted[]; // Config form values.\n    components: AddonNotificationsPreferencesComponentFormatted[]; // Available components.\n};\n\n/**\n * Preferences component with some calculated data.\n */\nexport type AddonNotificationsPreferencesComponentFormatted = Omit<AddonNotificationsPreferencesComponent, 'notifications'> & {\n    notifications: AddonNotificationsPreferencesNotificationFormatted[]; // List of notificaitons for the component.\n};\n\n/**\n * Preferences notification with some calculated data.\n */\nexport type AddonNotificationsPreferencesNotificationFormatted = AddonNotificationsPreferencesNotification & {\n    processorsByName?: Record<string, AddonNotificationsPreferencesNotificationProcessorFormatted>; // Calculated in the app.\n};\n\ntype AddonNotificationsPreferencesNotificationProcessorFormatted = AddonNotificationsPreferencesNotificationProcessor & {\n    updating?: boolean; // Calculated in the app. Whether the state is being updated.\n};\n\n/**\n * Preferences processor with some calculated data.\n */\nexport type AddonNotificationsPreferencesProcessorFormatted = AddonNotificationsPreferencesProcessor & {\n    supported?: boolean; // Calculated in the app. Whether the processor is supported in the app.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}