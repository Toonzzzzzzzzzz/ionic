{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\n/**\n * Component to add a <style> tag.\n *\n * @description\n * This component will include a <style> tag with some CSS rules that can optionally be pefixed.\n *\n * Example:\n *\n * <core-style [css]=\"'p { color: red; }'\" prefix=\".custom-rules\"></core-style>\n */\nexport class CoreStyleComponent {\n  constructor(element) {\n    this.element = element;\n    this.css = ''; // CSS rules.\n    this.prefix = ''; // Prefix to add to CSS rules.\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnChanges() {\n    if (this.element && this.element.nativeElement) {\n      const style = document.createElement('style');\n      style.innerText = this.prefixCSS(this.css, this.prefix);\n      this.element.nativeElement.innerHTML = '';\n      this.element.nativeElement.appendChild(style);\n    }\n  }\n  /**\n   * Add a prefix to all rules in a CSS string.\n   *\n   * @param css CSS code to be prefixed.\n   * @param prefix Prefix css selector.\n   * @returns Prefixed CSS.\n   */\n  prefixCSS(css, prefix) {\n    if (!css) {\n      return '';\n    }\n    if (!prefix) {\n      return css;\n    }\n    // Remove comments first.\n    let regExp = /\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm;\n    css = css.replace(regExp, '');\n    // Add prefix.\n    regExp = /([^]*?)({[^]*?}|,)/g;\n    return css.replace(regExp, prefix + ' $1 $2');\n  }\n}\n_class = CoreStyleComponent;\n_class.ɵfac = function CoreStyleComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-style\"]],\n  inputs: {\n    css: \"css\",\n    prefix: \"prefix\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function CoreStyleComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreStyleComponent","constructor","element","css","prefix","ngOnChanges","nativeElement","style","document","createElement","innerText","prefixCSS","innerHTML","appendChild","regExp","replace","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs","features","ɵɵNgOnChangesFeature","decls","vars","template","CoreStyleComponent_Template","rf","ctx","encapsulation"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/style/style.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, ElementRef, Input, OnChanges } from '@angular/core';\n\n/**\n * Component to add a <style> tag.\n *\n * @description\n * This component will include a <style> tag with some CSS rules that can optionally be pefixed.\n *\n * Example:\n *\n * <core-style [css]=\"'p { color: red; }'\" prefix=\".custom-rules\"></core-style>\n */\n@Component({\n    selector: 'core-style',\n    template: '',\n})\nexport class CoreStyleComponent implements OnChanges {\n\n    @Input() css = ''; // CSS rules.\n    @Input() prefix = ''; // Prefix to add to CSS rules.\n\n    constructor(private element: ElementRef) {}\n\n    /**\n     * @inheritdoc\n     */\n    ngOnChanges(): void {\n        if (this.element && this.element.nativeElement) {\n            const style = document.createElement('style');\n            style.innerText = this.prefixCSS(this.css, this.prefix);\n\n            this.element.nativeElement.innerHTML = '';\n            this.element.nativeElement.appendChild(style);\n        }\n    }\n\n    /**\n     * Add a prefix to all rules in a CSS string.\n     *\n     * @param css CSS code to be prefixed.\n     * @param prefix Prefix css selector.\n     * @returns Prefixed CSS.\n     */\n    protected prefixCSS(css: string, prefix: string): string {\n        if (!css) {\n            return '';\n        }\n\n        if (!prefix) {\n            return css;\n        }\n\n        // Remove comments first.\n        let regExp = /\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm;\n        css = css.replace(regExp, '');\n\n        // Add prefix.\n        regExp = /([^]*?)({[^]*?}|,)/g;\n\n        return css.replace(regExp, prefix + ' $1 $2');\n    }\n\n}\n"],"mappings":";;AAgBA;;;;;;;;;;AAcA,OAAM,MAAOA,kBAAkB;EAK3BC,YAAoBC,OAAmB;IAAnB,KAAAA,OAAO,GAAPA,OAAO;IAHlB,KAAAC,GAAG,GAAG,EAAE,CAAC,CAAC;IACV,KAAAC,MAAM,GAAG,EAAE,CAAC,CAAC;EAEoB;EAE1C;;;EAGAC,WAAWA,CAAA;IACP,IAAI,IAAI,CAACH,OAAO,IAAI,IAAI,CAACA,OAAO,CAACI,aAAa,EAAE;MAC5C,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CF,KAAK,CAACG,SAAS,GAAG,IAAI,CAACC,SAAS,CAAC,IAAI,CAACR,GAAG,EAAE,IAAI,CAACC,MAAM,CAAC;MAEvD,IAAI,CAACF,OAAO,CAACI,aAAa,CAACM,SAAS,GAAG,EAAE;MACzC,IAAI,CAACV,OAAO,CAACI,aAAa,CAACO,WAAW,CAACN,KAAK,CAAC;;EAErD;EAEA;;;;;;;EAOUI,SAASA,CAACR,GAAW,EAAEC,MAAc;IAC3C,IAAI,CAACD,GAAG,EAAE;MACN,OAAO,EAAE;;IAGb,IAAI,CAACC,MAAM,EAAE;MACT,OAAOD,GAAG;;IAGd;IACA,IAAIW,MAAM,GAAG,oCAAoC;IACjDX,GAAG,GAAGA,GAAG,CAACY,OAAO,CAACD,MAAM,EAAE,EAAE,CAAC;IAE7B;IACAA,MAAM,GAAG,qBAAqB;IAE9B,OAAOX,GAAG,CAACY,OAAO,CAACD,MAAM,EAAEV,MAAM,GAAG,QAAQ,CAAC;EACjD;;SA5CSJ,kBAAkB;;mBAAlBA,MAAkB,EAAAgB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;AAAA;;QAAlBlB,MAAkB;EAAAmB,SAAA;EAAAC,MAAA;IAAAjB,GAAA;IAAAC,MAAA;EAAA;EAAAiB,QAAA,GAAAL,EAAA,CAAAM,oBAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;EAAAC,aAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}