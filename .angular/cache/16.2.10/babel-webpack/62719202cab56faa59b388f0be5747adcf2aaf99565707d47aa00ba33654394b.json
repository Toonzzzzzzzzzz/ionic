{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreDatabaseTable } from './database-table';\n/**\n * Database table proxy used to debug runtime operations.\n *\n * This proxy should only be used for development purposes.\n */\nexport class CoreDebugDatabaseTable extends CoreDatabaseTable {\n  constructor(target) {\n    super(target.getConfig(), target.getDatabase(), target.getTableName(), target.getPrimaryKeyColumns());\n    this.target = target;\n    this.logger = CoreLogger.getInstance(`CoreDatabase[${this.tableName}]`);\n  }\n  /**\n   * Get underlying table instance.\n   *\n   * @returns Table instance.\n   */\n  getTarget() {\n    return this.target;\n  }\n  /**\n   * @inheritdoc\n   */\n  initialize() {\n    var _superprop_getInitialize = () => super.initialize,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      yield _superprop_getInitialize().call(_this);\n      _this.logger.log('initialize', _this.target);\n      return _this.target.initialize();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  destroy() {\n    var _superprop_getDestroy = () => super.destroy,\n      _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _superprop_getDestroy().call(_this2);\n      _this2.logger.log('destroy');\n      return _this2.target.destroy();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getMany(conditions, options) {\n    this.logger.log('getMany', conditions, options);\n    return this.target.getMany(conditions, options);\n  }\n  /**\n   * @inheritdoc\n   */\n  getManyWhere(conditions) {\n    this.logger.log('getManyWhere', conditions);\n    return this.target.getManyWhere(conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  getOne(conditions, options) {\n    this.logger.log('getOne', conditions, options);\n    return this.target.getOne(conditions, options);\n  }\n  /**\n   * @inheritdoc\n   */\n  getOneByPrimaryKey(primaryKey) {\n    this.logger.log('findByPrimaryKey', primaryKey);\n    return this.target.getOneByPrimaryKey(primaryKey);\n  }\n  /**\n   * @inheritdoc\n   */\n  reduce(reducer, conditions) {\n    this.logger.log('reduce', reducer, conditions);\n    return this.target.reduce(reducer, conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  hasAny(conditions) {\n    this.logger.log('hasAny', conditions);\n    return this.target.hasAny(conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  hasAnyByPrimaryKey(primaryKey) {\n    this.logger.log('hasAnyByPrimaryKey', primaryKey);\n    return this.target.hasAnyByPrimaryKey(primaryKey);\n  }\n  /**\n   * @inheritdoc\n   */\n  count(conditions) {\n    this.logger.log('count', conditions);\n    return this.target.count(conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  insert(record) {\n    this.logger.log('insert', record);\n    return this.target.insert(record);\n  }\n  /**\n   * @inheritdoc\n   */\n  update(updates, conditions) {\n    this.logger.log('update', updates, conditions);\n    return this.target.update(updates, conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  updateWhere(updates, conditions) {\n    this.logger.log('updateWhere', updates, conditions);\n    return this.target.updateWhere(updates, conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  delete(conditions) {\n    this.logger.log('delete', conditions);\n    return this.target.delete(conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  deleteByPrimaryKey(primaryKey) {\n    this.logger.log('deleteByPrimaryKey', primaryKey);\n    return this.target.deleteByPrimaryKey(primaryKey);\n  }\n}","map":{"version":3,"names":["CoreLogger","CoreDatabaseTable","CoreDebugDatabaseTable","constructor","target","getConfig","getDatabase","getTableName","getPrimaryKeyColumns","logger","getInstance","tableName","getTarget","initialize","_superprop_getInitialize","_this","_asyncToGenerator","call","log","destroy","_superprop_getDestroy","_this2","getMany","conditions","options","getManyWhere","getOne","getOneByPrimaryKey","primaryKey","reduce","reducer","hasAny","hasAnyByPrimaryKey","count","insert","record","update","updates","updateWhere","delete","deleteByPrimaryKey"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/database/debug-database-table.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { SQLiteDBRecordValues } from '@classes/sqlitedb';\nimport { CoreLogger } from '@singletons/logger';\nimport {\n    CoreDatabaseTable,\n    CoreDatabaseConditions,\n    GetDBRecordPrimaryKey,\n    CoreDatabaseReducer,\n    CoreDatabaseQueryOptions,\n} from './database-table';\n\n/**\n * Database table proxy used to debug runtime operations.\n *\n * This proxy should only be used for development purposes.\n */\nexport class CoreDebugDatabaseTable<\n    DBRecord extends SQLiteDBRecordValues = SQLiteDBRecordValues,\n    PrimaryKeyColumn extends keyof DBRecord = 'id',\n    PrimaryKey extends GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn> = GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn>\n> extends CoreDatabaseTable<DBRecord, PrimaryKeyColumn, PrimaryKey> {\n\n    protected target: CoreDatabaseTable<DBRecord, PrimaryKeyColumn, PrimaryKey>;\n    protected logger: CoreLogger;\n\n    constructor(target: CoreDatabaseTable<DBRecord, PrimaryKeyColumn, PrimaryKey>) {\n        super(target.getConfig(), target.getDatabase(), target.getTableName(), target.getPrimaryKeyColumns());\n\n        this.target = target;\n        this.logger = CoreLogger.getInstance(`CoreDatabase[${this.tableName}]`);\n    }\n\n    /**\n     * Get underlying table instance.\n     *\n     * @returns Table instance.\n     */\n    getTarget(): CoreDatabaseTable<DBRecord, PrimaryKeyColumn, PrimaryKey> {\n        return this.target;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async initialize(): Promise<void> {\n        await super.initialize();\n\n        this.logger.log('initialize', this.target);\n\n        return this.target.initialize();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async destroy(): Promise<void> {\n        await super.destroy();\n\n        this.logger.log('destroy');\n\n        return this.target.destroy();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getMany(conditions?: Partial<DBRecord>, options?: Partial<CoreDatabaseQueryOptions<DBRecord>>): Promise<DBRecord[]> {\n        this.logger.log('getMany', conditions, options);\n\n        return this.target.getMany(conditions, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getManyWhere(conditions: CoreDatabaseConditions<DBRecord>): Promise<DBRecord[]> {\n        this.logger.log('getManyWhere', conditions);\n\n        return this.target.getManyWhere(conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getOne(\n        conditions?: Partial<DBRecord>,\n        options?: Partial<Omit<CoreDatabaseQueryOptions<DBRecord>, 'offset' | 'limit'>>,\n    ): Promise<DBRecord> {\n        this.logger.log('getOne', conditions, options);\n\n        return this.target.getOne(conditions, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getOneByPrimaryKey(primaryKey: PrimaryKey): Promise<DBRecord> {\n        this.logger.log('findByPrimaryKey', primaryKey);\n\n        return this.target.getOneByPrimaryKey(primaryKey);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    reduce<T>(reducer: CoreDatabaseReducer<DBRecord, T>, conditions?: CoreDatabaseConditions<DBRecord>): Promise<T> {\n        this.logger.log('reduce', reducer, conditions);\n\n        return this.target.reduce<T>(reducer, conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    hasAny(conditions?: Partial<DBRecord>): Promise<boolean> {\n        this.logger.log('hasAny', conditions);\n\n        return this.target.hasAny(conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    hasAnyByPrimaryKey(primaryKey: PrimaryKey): Promise<boolean> {\n        this.logger.log('hasAnyByPrimaryKey', primaryKey);\n\n        return this.target.hasAnyByPrimaryKey(primaryKey);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    count(conditions?: Partial<DBRecord>): Promise<number> {\n        this.logger.log('count', conditions);\n\n        return this.target.count(conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    insert(record: DBRecord): Promise<void> {\n        this.logger.log('insert', record);\n\n        return this.target.insert(record);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    update(updates: Partial<DBRecord>, conditions?: Partial<DBRecord>): Promise<void> {\n        this.logger.log('update', updates, conditions);\n\n        return this.target.update(updates, conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    updateWhere(updates: Partial<DBRecord>, conditions: CoreDatabaseConditions<DBRecord>): Promise<void> {\n        this.logger.log('updateWhere', updates, conditions);\n\n        return this.target.updateWhere(updates, conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    delete(conditions?: Partial<DBRecord>): Promise<void> {\n        this.logger.log('delete', conditions);\n\n        return this.target.delete(conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    deleteByPrimaryKey(primaryKey: PrimaryKey): Promise<void> {\n        this.logger.log('deleteByPrimaryKey', primaryKey);\n\n        return this.target.deleteByPrimaryKey(primaryKey);\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}