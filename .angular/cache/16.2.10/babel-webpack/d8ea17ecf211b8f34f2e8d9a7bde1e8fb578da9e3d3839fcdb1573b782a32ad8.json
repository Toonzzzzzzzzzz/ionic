{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreMimetypeUtils } from '@services/utils/mimetype';\nimport { CoreSite } from '@classes/sites/site';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaFiles:';\n/**\n * Service to handle my files and site files.\n */\nexport class AddonPrivateFilesProvider {\n  /**\n   * Check if user can view his private files.\n   *\n   * @returns Whether the user can view his private files.\n   */\n  canViewPrivateFiles() {\n    const currentSite = CoreSites.getCurrentSite();\n    if (!currentSite) {\n      return false;\n    }\n    return currentSite.canAccessMyFiles() && !this.isPrivateFilesDisabledInSite();\n  }\n  /**\n   * Check if user can view site files.\n   *\n   * @returns Whether the user can view site files.\n   */\n  canViewSiteFiles() {\n    return !this.isSiteFilesDisabledInSite();\n  }\n  /**\n   * Check if user can upload private files.\n   *\n   * @returns Whether the user can upload private files.\n   */\n  canUploadFiles() {\n    const currentSite = CoreSites.getCurrentSite();\n    if (!currentSite) {\n      return false;\n    }\n    return currentSite.canAccessMyFiles() && currentSite.canUploadFiles() && !this.isUploadDisabledInSite();\n  }\n  /**\n   * Get the list of files.\n   *\n   * @param params A list of parameters accepted by the Web service.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getFiles(params, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const preSets = {\n        cacheKey: _this.getFilesListCacheKey(params),\n        updateFrequency: CoreSite.FREQUENCY_SOMETIMES\n      };\n      const result = yield site.read('core_files_get_files', params, preSets);\n      if (!result.files) {\n        return [];\n      }\n      return result.files.map(entry => {\n        entry.fileurl = entry.url;\n        if (entry.isdir) {\n          entry.imgPath = CoreMimetypeUtils.getFolderIcon();\n        } else {\n          entry.imgPath = CoreMimetypeUtils.getFileIcon(entry.filename);\n        }\n        return entry;\n      });\n    })();\n  }\n  /**\n   * Get cache key for file list WS calls.\n   *\n   * @param params Params of the WS.\n   * @returns Cache key.\n   */\n  getFilesListCacheKey(params) {\n    const root = !params.component ? 'site' : 'my';\n    return ROOT_CACHE_KEY + 'list:' + root + ':' + params.contextid + ':' + params.filepath;\n  }\n  /**\n   * Get the private files of the current user.\n   *\n   * @returns Promise resolved with the files.\n   */\n  getPrivateFiles() {\n    return this.getFiles(this.getPrivateFilesRootParams());\n  }\n  /**\n   * Get params to get root private files directory.\n   *\n   * @returns Params.\n   */\n  getPrivateFilesRootParams() {\n    var _CoreSites$getCurrent;\n    return {\n      contextid: -1,\n      component: 'user',\n      filearea: 'private',\n      contextlevel: 'user',\n      instanceid: (_CoreSites$getCurrent = CoreSites.getCurrentSite()) === null || _CoreSites$getCurrent === void 0 ? void 0 : _CoreSites$getCurrent.getUserId(),\n      itemid: 0,\n      filepath: '',\n      filename: ''\n    };\n  }\n  /**\n   * Get private files info.\n   *\n   * @param userId User ID. If not defined, current user in the site.\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved with the info.\n   */\n  getPrivateFilesInfo(userId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      const params = {\n        userid: userId\n      };\n      const preSets = {\n        cacheKey: _this2.getPrivateFilesInfoCacheKey(userId),\n        updateFrequency: CoreSite.FREQUENCY_SOMETIMES\n      };\n      return site.read('core_user_get_private_files_info', params, preSets);\n    })();\n  }\n  /**\n   * Get the cache key for private files info WS calls.\n   *\n   * @param userId User ID.\n   * @returns Cache key.\n   */\n  getPrivateFilesInfoCacheKey(userId) {\n    return this.getPrivateFilesInfoCommonCacheKey() + ':' + userId;\n  }\n  /**\n   * Get the common part of the cache keys for private files info WS calls.\n   *\n   * @returns Cache key.\n   */\n  getPrivateFilesInfoCommonCacheKey() {\n    return ROOT_CACHE_KEY + 'privateInfo';\n  }\n  /**\n   * Get the site files.\n   *\n   * @returns Promise resolved with the files.\n   */\n  getSiteFiles() {\n    return this.getFiles(this.getSiteFilesRootParams());\n  }\n  /**\n   * Get params to get root site files directory.\n   *\n   * @returns Params.\n   */\n  getSiteFilesRootParams() {\n    return {\n      contextid: 0,\n      component: '',\n      filearea: '',\n      itemid: 0,\n      filepath: '',\n      filename: ''\n    };\n  }\n  /**\n   * Invalidates list of files in a certain directory.\n   *\n   * @param root Root of the directory ('my' for private files, 'site' for site files).\n   * @param params Params to the directory.\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateDirectory(root, params, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!root) {\n        return;\n      }\n      if (!params) {\n        if (root === 'site') {\n          params = _this3.getSiteFilesRootParams();\n        } else {\n          params = _this3.getPrivateFilesRootParams();\n        }\n      }\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this3.getFilesListCacheKey(params));\n    })();\n  }\n  /**\n   * Invalidates private files info for all users.\n   *\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidatePrivateFilesInfo(siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKeyStartingWith(_this4.getPrivateFilesInfoCommonCacheKey());\n    })();\n  }\n  /**\n   * Invalidates private files info for a certain user.\n   *\n   * @param userId User ID. If not defined, current user in the site.\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidatePrivateFilesInfoForUser(userId, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this5.getPrivateFilesInfoCacheKey(userId || site.getUserId()));\n    })();\n  }\n  /**\n   * Check if Files is disabled in a certain site.\n   *\n   * @param siteId Site Id. If not defined, use current site.\n   * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n   */\n  isDisabled(siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this6.isDisabledInSite(site);\n    })();\n  }\n  /**\n   * Check if Files is disabled in a certain site.\n   *\n   * @param site Site. If not defined, use current site.\n   * @returns Whether it's disabled.\n   */\n  isDisabledInSite(site) {\n    site = site || CoreSites.getCurrentSite();\n    return site.isFeatureDisabled('CoreMainMenuDelegate_AddonPrivateFiles');\n  }\n  /**\n   * Return whether or not the plugin is enabled.\n   *\n   * @returns True if enabled, false otherwise.\n   */\n  isPluginEnabled() {\n    return this.canViewPrivateFiles() || this.canViewSiteFiles() || this.canUploadFiles();\n  }\n  /**\n   * Check if private files is disabled in a certain site.\n   *\n   * @param siteId Site Id. If not defined, use current site.\n   * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n   */\n  isPrivateFilesDisabled(siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this7.isPrivateFilesDisabledInSite(site);\n    })();\n  }\n  /**\n   * Check if private files is disabled in a certain site.\n   *\n   * @param site Site. If not defined, use current site.\n   * @returns Whether it's disabled.\n   */\n  isPrivateFilesDisabledInSite(site) {\n    site = site || CoreSites.getCurrentSite();\n    return !!site && site.isFeatureDisabled('AddonPrivateFilesPrivateFiles');\n  }\n  /**\n   * Check if site files is disabled in a certain site.\n   *\n   * @param siteId Site Id. If not defined, use current site.\n   * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n   */\n  isSiteFilesDisabled(siteId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this8.isSiteFilesDisabledInSite(site);\n    })();\n  }\n  /**\n   * Check if site files is disabled in a certain site.\n   *\n   * @param site Site. If not defined, use current site.\n   * @returns Whether it's disabled.\n   */\n  isSiteFilesDisabledInSite(site) {\n    site = site || CoreSites.getCurrentSite();\n    return !!site && site.isFeatureDisabled('AddonPrivateFilesSiteFiles');\n  }\n  /**\n   * Check if upload files is disabled in a certain site.\n   *\n   * @param siteId Site Id. If not defined, use current site.\n   * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n   */\n  isUploadDisabled(siteId) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this9.isUploadDisabledInSite(site);\n    })();\n  }\n  /**\n   * Check if upload files is disabled in a certain site.\n   *\n   * @param site Site. If not defined, use current site.\n   * @returns Whether it's disabled.\n   */\n  isUploadDisabledInSite(site) {\n    site = site || CoreSites.getCurrentSite();\n    return !!site && site.isFeatureDisabled('AddonPrivateFilesUpload');\n  }\n  /**\n   * Move a file from draft area to private files.\n   *\n   * @param draftId The draft area ID of the file.\n   * @param siteId ID of the site. If not defined, use current site.\n   * @returns Promise resolved in success, rejected otherwise.\n   */\n  moveFromDraftToPrivate(draftId, siteId) {\n    return _asyncToGenerator(function* () {\n      const params = {\n        draftid: draftId\n      };\n      const preSets = {\n        responseExpected: false\n      };\n      const site = yield CoreSites.getSite(siteId);\n      return site.write('core_user_add_user_private_files', params, preSets);\n    })();\n  }\n}\n_class = AddonPrivateFilesProvider;\n// Keep old names for backwards compatibility.\n_class.PRIVATE_FILES_COMPONENT = 'mmaFilesMy';\n_class.SITE_FILES_COMPONENT = 'mmaFilesSite';\n_class.ɵfac = function AddonPrivateFilesProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonPrivateFiles = makeSingleton(AddonPrivateFilesProvider);","map":{"version":3,"names":["CoreSites","CoreMimetypeUtils","CoreSite","makeSingleton","ROOT_CACHE_KEY","AddonPrivateFilesProvider","canViewPrivateFiles","currentSite","getCurrentSite","canAccessMyFiles","isPrivateFilesDisabledInSite","canViewSiteFiles","isSiteFilesDisabledInSite","canUploadFiles","isUploadDisabledInSite","getFiles","params","siteId","_this","_asyncToGenerator","site","getSite","preSets","cacheKey","getFilesListCacheKey","updateFrequency","FREQUENCY_SOMETIMES","result","read","files","map","entry","fileurl","url","isdir","imgPath","getFolderIcon","getFileIcon","filename","root","component","contextid","filepath","getPrivateFiles","getPrivateFilesRootParams","_CoreSites$getCurrent","filearea","contextlevel","instanceid","getUserId","itemid","getPrivateFilesInfo","userId","_this2","userid","getPrivateFilesInfoCacheKey","getPrivateFilesInfoCommonCacheKey","getSiteFiles","getSiteFilesRootParams","invalidateDirectory","_this3","invalidateWsCacheForKey","invalidatePrivateFilesInfo","_this4","invalidateWsCacheForKeyStartingWith","invalidatePrivateFilesInfoForUser","_this5","isDisabled","_this6","isDisabledInSite","isFeatureDisabled","isPluginEnabled","isPrivateFilesDisabled","_this7","isSiteFilesDisabled","_this8","isUploadDisabled","_this9","moveFromDraftToPrivate","draftId","draftid","responseExpected","write","_class","PRIVATE_FILES_COMPONENT","SITE_FILES_COMPONENT","factory","ɵfac","providedIn","AddonPrivateFiles"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/privatefiles/services/privatefiles.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreMimetypeUtils } from '@services/utils/mimetype';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { CoreSite } from '@classes/sites/site';\nimport { makeSingleton } from '@singletons';\n\nconst ROOT_CACHE_KEY = 'mmaFiles:';\n\n/**\n * Service to handle my files and site files.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonPrivateFilesProvider {\n\n    // Keep old names for backwards compatibility.\n    static readonly PRIVATE_FILES_COMPONENT = 'mmaFilesMy';\n    static readonly SITE_FILES_COMPONENT = 'mmaFilesSite';\n\n    /**\n     * Check if user can view his private files.\n     *\n     * @returns Whether the user can view his private files.\n     */\n    canViewPrivateFiles(): boolean {\n        const currentSite = CoreSites.getCurrentSite();\n        if (!currentSite) {\n            return false;\n        }\n\n        return currentSite.canAccessMyFiles() && !this.isPrivateFilesDisabledInSite();\n    }\n\n    /**\n     * Check if user can view site files.\n     *\n     * @returns Whether the user can view site files.\n     */\n    canViewSiteFiles(): boolean {\n        return !this.isSiteFilesDisabledInSite();\n    }\n\n    /**\n     * Check if user can upload private files.\n     *\n     * @returns Whether the user can upload private files.\n     */\n    canUploadFiles(): boolean {\n        const currentSite = CoreSites.getCurrentSite();\n        if (!currentSite) {\n            return false;\n        }\n\n        return currentSite.canAccessMyFiles() && currentSite.canUploadFiles() && !this.isUploadDisabledInSite();\n    }\n\n    /**\n     * Get the list of files.\n     *\n     * @param params A list of parameters accepted by the Web service.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getFiles(params: AddonPrivateFilesGetFilesWSParams, siteId?: string): Promise<AddonPrivateFilesFile[]> {\n\n        const site = await CoreSites.getSite(siteId);\n\n        const preSets = {\n            cacheKey: this.getFilesListCacheKey(params),\n            updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n        };\n\n        const result: AddonPrivateFilesGetFilesWSResult = await site.read('core_files_get_files', params, preSets);\n\n        if (!result.files) {\n            return [];\n        }\n\n        return result.files.map((entry) => {\n            entry.fileurl = entry.url;\n\n            if (entry.isdir) {\n                entry.imgPath = CoreMimetypeUtils.getFolderIcon();\n            } else {\n                entry.imgPath = CoreMimetypeUtils.getFileIcon(entry.filename);\n            }\n\n            return entry;\n        });\n\n    }\n\n    /**\n     * Get cache key for file list WS calls.\n     *\n     * @param params Params of the WS.\n     * @returns Cache key.\n     */\n    protected getFilesListCacheKey(params: AddonPrivateFilesGetFilesWSParams): string {\n        const root = !params.component ? 'site' : 'my';\n\n        return ROOT_CACHE_KEY + 'list:' + root + ':' + params.contextid + ':' + params.filepath;\n    }\n\n    /**\n     * Get the private files of the current user.\n     *\n     * @returns Promise resolved with the files.\n     */\n    getPrivateFiles(): Promise<AddonPrivateFilesFile[]> {\n        return this.getFiles(this.getPrivateFilesRootParams());\n    }\n\n    /**\n     * Get params to get root private files directory.\n     *\n     * @returns Params.\n     */\n    protected getPrivateFilesRootParams(): AddonPrivateFilesGetFilesWSParams {\n        return {\n            contextid: -1,\n            component: 'user',\n            filearea: 'private',\n            contextlevel: 'user',\n            instanceid: CoreSites.getCurrentSite()?.getUserId(),\n            itemid: 0,\n            filepath: '',\n            filename: '',\n        };\n    }\n\n    /**\n     * Get private files info.\n     *\n     * @param userId User ID. If not defined, current user in the site.\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved with the info.\n     */\n    async getPrivateFilesInfo(userId?: number, siteId?: string): Promise<AddonPrivateFilesGetUserInfoWSResult> {\n        const site = await CoreSites.getSite(siteId);\n\n        userId = userId || site.getUserId();\n\n        const params: AddonPrivateFilesGetUserInfoWSParams = {\n            userid: userId,\n        };\n        const preSets = {\n            cacheKey: this.getPrivateFilesInfoCacheKey(userId),\n            updateFrequency: CoreSite.FREQUENCY_SOMETIMES,\n        };\n\n        return site.read('core_user_get_private_files_info', params, preSets);\n    }\n\n    /**\n     * Get the cache key for private files info WS calls.\n     *\n     * @param userId User ID.\n     * @returns Cache key.\n     */\n    protected getPrivateFilesInfoCacheKey(userId: number): string {\n        return this.getPrivateFilesInfoCommonCacheKey() + ':' + userId;\n    }\n\n    /**\n     * Get the common part of the cache keys for private files info WS calls.\n     *\n     * @returns Cache key.\n     */\n    protected getPrivateFilesInfoCommonCacheKey(): string {\n        return ROOT_CACHE_KEY + 'privateInfo';\n    }\n\n    /**\n     * Get the site files.\n     *\n     * @returns Promise resolved with the files.\n     */\n    getSiteFiles(): Promise<AddonPrivateFilesFile[]> {\n        return this.getFiles(this.getSiteFilesRootParams());\n    }\n\n    /**\n     * Get params to get root site files directory.\n     *\n     * @returns Params.\n     */\n    protected getSiteFilesRootParams(): AddonPrivateFilesGetFilesWSParams {\n        return {\n            contextid: 0,\n            component: '',\n            filearea: '',\n            itemid: 0,\n            filepath: '',\n            filename: '',\n        };\n    }\n\n    /**\n     * Invalidates list of files in a certain directory.\n     *\n     * @param root Root of the directory ('my' for private files, 'site' for site files).\n     * @param params Params to the directory.\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateDirectory(root?: 'my' | 'site', params?: AddonPrivateFilesGetFilesWSParams, siteId?: string): Promise<void> {\n        if (!root) {\n            return;\n        }\n\n        if (!params) {\n            if (root === 'site') {\n                params = this.getSiteFilesRootParams();\n            } else {\n                params = this.getPrivateFilesRootParams();\n            }\n        }\n\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getFilesListCacheKey(params));\n    }\n\n    /**\n     * Invalidates private files info for all users.\n     *\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidatePrivateFilesInfo(siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKeyStartingWith(this.getPrivateFilesInfoCommonCacheKey());\n    }\n\n    /**\n     * Invalidates private files info for a certain user.\n     *\n     * @param userId User ID. If not defined, current user in the site.\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidatePrivateFilesInfoForUser(userId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getPrivateFilesInfoCacheKey(userId || site.getUserId()));\n    }\n\n    /**\n     * Check if Files is disabled in a certain site.\n     *\n     * @param siteId Site Id. If not defined, use current site.\n     * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n     */\n    async isDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.isDisabledInSite(site);\n    }\n\n    /**\n     * Check if Files is disabled in a certain site.\n     *\n     * @param site Site. If not defined, use current site.\n     * @returns Whether it's disabled.\n     */\n    isDisabledInSite(site: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return site.isFeatureDisabled('CoreMainMenuDelegate_AddonPrivateFiles');\n    }\n\n    /**\n     * Return whether or not the plugin is enabled.\n     *\n     * @returns True if enabled, false otherwise.\n     */\n    isPluginEnabled(): boolean {\n        return this.canViewPrivateFiles() || this.canViewSiteFiles() || this.canUploadFiles();\n    }\n\n    /**\n     * Check if private files is disabled in a certain site.\n     *\n     * @param siteId Site Id. If not defined, use current site.\n     * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n     */\n    async isPrivateFilesDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.isPrivateFilesDisabledInSite(site);\n    }\n\n    /**\n     * Check if private files is disabled in a certain site.\n     *\n     * @param site Site. If not defined, use current site.\n     * @returns Whether it's disabled.\n     */\n    isPrivateFilesDisabledInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site && site.isFeatureDisabled('AddonPrivateFilesPrivateFiles');\n    }\n\n    /**\n     * Check if site files is disabled in a certain site.\n     *\n     * @param siteId Site Id. If not defined, use current site.\n     * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n     */\n    async isSiteFilesDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.isSiteFilesDisabledInSite(site);\n    }\n\n    /**\n     * Check if site files is disabled in a certain site.\n     *\n     * @param site Site. If not defined, use current site.\n     * @returns Whether it's disabled.\n     */\n    isSiteFilesDisabledInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site && site.isFeatureDisabled('AddonPrivateFilesSiteFiles');\n    }\n\n    /**\n     * Check if upload files is disabled in a certain site.\n     *\n     * @param siteId Site Id. If not defined, use current site.\n     * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n     */\n    async isUploadDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.isUploadDisabledInSite(site);\n    }\n\n    /**\n     * Check if upload files is disabled in a certain site.\n     *\n     * @param site Site. If not defined, use current site.\n     * @returns Whether it's disabled.\n     */\n    isUploadDisabledInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site && site.isFeatureDisabled('AddonPrivateFilesUpload');\n    }\n\n    /**\n     * Move a file from draft area to private files.\n     *\n     * @param draftId The draft area ID of the file.\n     * @param siteId ID of the site. If not defined, use current site.\n     * @returns Promise resolved in success, rejected otherwise.\n     */\n    async moveFromDraftToPrivate(draftId: number, siteId?: string): Promise<null> {\n        const params: AddonPrivateFilesAddUserPrivateFilesWSParams = {\n            draftid: draftId,\n        };\n        const preSets = {\n            responseExpected: false,\n        };\n\n        const site = await CoreSites.getSite(siteId);\n\n        return site.write('core_user_add_user_private_files', params, preSets);\n    }\n\n}\n\nexport const AddonPrivateFiles = makeSingleton(AddonPrivateFilesProvider);\n\n/**\n * File data returned by core_files_get_files.\n */\nexport type AddonPrivateFilesFile = {\n    contextid: number;\n    component: string;\n    filearea: string;\n    itemid: number;\n    filepath: string;\n    filename: string;\n    isdir: boolean;\n    url: string;\n    timemodified: number;\n    timecreated?: number; // Time created.\n    filesize?: number; // File size.\n    author?: string; // File owner.\n    license?: string; // File license.\n} & AddonPrivateFilesFileCalculatedData;\n\n/**\n * Calculated data for AddonPrivateFilesFile.\n */\nexport type AddonPrivateFilesFileCalculatedData = {\n    fileurl: string; // File URL, using same name as CoreWSExternalFile.\n    imgPath?: string; // Path to file icon's image.\n};\n/**\n * Params of WS core_files_get_files.\n */\nexport type AddonPrivateFilesGetFilesWSParams = {\n    contextid: number; // Context id Set to -1 to use contextlevel and instanceid.\n    component: string; // Component.\n    filearea: string; // File area.\n    itemid: number; // Associated id.\n    filepath: string; // File path.\n    filename: string; // File name.\n    modified?: number; // Timestamp to return files changed after this time.\n    contextlevel?: string; // The context level for the file location.\n    instanceid?: number; // The instance id for where the file is located.\n};\n\n/**\n * Result of WS core_files_get_files.\n */\nexport type AddonPrivateFilesGetFilesWSResult = {\n    parents: {\n        contextid: number;\n        component: string;\n        filearea: string;\n        itemid: number;\n        filepath: string;\n        filename: string;\n    }[];\n    files: AddonPrivateFilesFile[];\n};\n\n/**\n * Params of core_user_get_private_files_info WS.\n */\ntype AddonPrivateFilesGetUserInfoWSParams = {\n    userid?: number; // Id of the user, default to current user.\n};\n\n/**\n * Data returned by core_user_get_private_files_info WS.\n */\nexport type AddonPrivateFilesGetUserInfoWSResult = {\n    filecount: number; // Number of files in the area.\n    foldercount: number; // Number of folders in the area.\n    filesize: number; // Total size of the files in the area.\n    filesizewithoutreferences: number; // Total size of the area excluding file references.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of core_user_add_user_private_files WS.\n */\ntype AddonPrivateFilesAddUserPrivateFilesWSParams = {\n    draftid: number; // Draft area id.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}