{"ast":null,"code":"var _class;\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreLogger } from '@singletons/logger';\nimport * as i0 from \"@angular/core\";\n/**\n * Filter to format a date.\n */\nexport class CoreFormatDatePipe {\n  constructor() {\n    this.logger = CoreLogger.getInstance('CoreFormatDatePipe');\n  }\n  /**\n   * Format a date.\n   *\n   * @param timestamp Timestamp to format (in milliseconds). If not defined, use current time.\n   * @param format Format to use. It should be a string code to handle i18n (e.g. core.strftimetime).\n   *               Defaults to strftimedaydatetime.\n   * @param convert If true, convert the format from PHP to Moment. Set it to false for Moment formats.\n   * @returns Formatted date.\n   */\n  transform(timestamp, format, convert) {\n    timestamp = timestamp || Date.now();\n    format = format || 'strftimedaydatetime';\n    if (typeof timestamp === 'string') {\n      // Convert the value to a number.\n      const numberTimestamp = parseInt(timestamp, 10);\n      if (isNaN(numberTimestamp)) {\n        this.logger.error('Invalid value received', timestamp);\n        return timestamp;\n      }\n      timestamp = numberTimestamp;\n    }\n    // Add \"core.\" if needed.\n    if (format.indexOf('strf') === 0 || format.indexOf('df') === 0) {\n      format = 'core.' + format;\n    }\n    if (convert === undefined) {\n      // Initialize convert param. Set it to false if it's a core.df format, set it to true otherwise.\n      convert = format.indexOf('core.df') != 0;\n    }\n    return CoreTimeUtils.userDate(timestamp, format, convert);\n  }\n}\n_class = CoreFormatDatePipe;\n_class.ɵfac = function CoreFormatDatePipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"coreFormatDate\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["CoreTimeUtils","CoreLogger","CoreFormatDatePipe","constructor","logger","getInstance","transform","timestamp","format","convert","Date","now","numberTimestamp","parseInt","isNaN","error","indexOf","undefined","userDate","pure"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/pipes/format-date.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreLogger } from '@singletons/logger';\n\n/**\n * Filter to format a date.\n */\n@Pipe({\n    name: 'coreFormatDate',\n})\nexport class CoreFormatDatePipe implements PipeTransform {\n\n    protected logger: CoreLogger;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreFormatDatePipe');\n    }\n\n    /**\n     * Format a date.\n     *\n     * @param timestamp Timestamp to format (in milliseconds). If not defined, use current time.\n     * @param format Format to use. It should be a string code to handle i18n (e.g. core.strftimetime).\n     *               Defaults to strftimedaydatetime.\n     * @param convert If true, convert the format from PHP to Moment. Set it to false for Moment formats.\n     * @returns Formatted date.\n     */\n    transform(timestamp: string | number, format?: string, convert?: boolean): string {\n        timestamp = timestamp || Date.now();\n        format = format || 'strftimedaydatetime';\n\n        if (typeof timestamp === 'string') {\n            // Convert the value to a number.\n            const numberTimestamp = parseInt(timestamp, 10);\n            if (isNaN(numberTimestamp)) {\n                this.logger.error('Invalid value received', timestamp);\n\n                return timestamp;\n            }\n            timestamp = numberTimestamp;\n        }\n\n        // Add \"core.\" if needed.\n        if (format.indexOf('strf') === 0 || format.indexOf('df') === 0) {\n            format = 'core.' + format;\n        }\n\n        if (convert === undefined) {\n            // Initialize convert param. Set it to false if it's a core.df format, set it to true otherwise.\n            convert = format.indexOf('core.df') != 0;\n        }\n\n        return CoreTimeUtils.userDate(timestamp, format, convert);\n    }\n\n}\n"],"mappings":";AAeA,SAASA,aAAa,QAAQ,sBAAsB;AACpD,SAASC,UAAU,QAAQ,oBAAoB;;AAE/C;;;AAMA,OAAM,MAAOC,kBAAkB;EAI3BC,YAAA;IACI,IAAI,CAACC,MAAM,GAAGH,UAAU,CAACI,WAAW,CAAC,oBAAoB,CAAC;EAC9D;EAEA;;;;;;;;;EASAC,SAASA,CAACC,SAA0B,EAAEC,MAAe,EAAEC,OAAiB;IACpEF,SAAS,GAAGA,SAAS,IAAIG,IAAI,CAACC,GAAG,EAAE;IACnCH,MAAM,GAAGA,MAAM,IAAI,qBAAqB;IAExC,IAAI,OAAOD,SAAS,KAAK,QAAQ,EAAE;MAC/B;MACA,MAAMK,eAAe,GAAGC,QAAQ,CAACN,SAAS,EAAE,EAAE,CAAC;MAC/C,IAAIO,KAAK,CAACF,eAAe,CAAC,EAAE;QACxB,IAAI,CAACR,MAAM,CAACW,KAAK,CAAC,wBAAwB,EAAER,SAAS,CAAC;QAEtD,OAAOA,SAAS;;MAEpBA,SAAS,GAAGK,eAAe;;IAG/B;IACA,IAAIJ,MAAM,CAACQ,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAIR,MAAM,CAACQ,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;MAC5DR,MAAM,GAAG,OAAO,GAAGA,MAAM;;IAG7B,IAAIC,OAAO,KAAKQ,SAAS,EAAE;MACvB;MACAR,OAAO,GAAGD,MAAM,CAACQ,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC;;IAG5C,OAAOhB,aAAa,CAACkB,QAAQ,CAACX,SAAS,EAAEC,MAAM,EAAEC,OAAO,CAAC;EAC7D;;SA3CSP,kBAAkB;;mBAAlBA,MAAkB;AAAA;;;QAAlBA,MAAkB;EAAAiB,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}