{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Default handler used when the course format doesn't have a specific implementation.\n */\nexport class CoreCourseFormatDefaultHandler {\n  constructor() {\n    this.name = 'CoreCourseFormatDefault';\n    this.format = 'default';\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getCourseTitle(course) {\n    return course.fullname || '';\n  }\n  /**\n   * @inheritdoc\n   */\n  canViewAllSections() {\n    return true;\n  }\n  /**\n   * @inheritdoc\n   */\n  displayBlocks() {\n    return true;\n  }\n  /**\n   * @inheritdoc\n   */\n  displayCourseIndex() {\n    return true;\n  }\n  /**\n   * @inheritdoc\n   */\n  displayRefresher() {\n    return true;\n  }\n  /**\n   * @inheritdoc\n   */\n  getCurrentSection(course, sections) {\n    return _asyncToGenerator(function* () {\n      let marker;\n      // We need the \"marker\" to determine the current section.\n      if ('marker' in course) {\n        // We already have it.\n        marker = course.marker;\n      } else {\n        // Try to retrieve the marker.\n        const courseData = yield CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', course.id));\n        marker = courseData === null || courseData === void 0 ? void 0 : courseData.marker;\n      }\n      if (marker && marker > 0) {\n        // Find the marked section.\n        const section = sections.find(sect => sect.section == marker);\n        if (section) {\n          return {\n            section,\n            forceSelected: true\n          };\n        }\n      }\n      // Marked section not found or we couldn't retrieve the marker. Return all sections.\n      return {\n        section: sections[0],\n        forceSelected: false\n      };\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getSectionHightlightedName() {\n    return Translate.instant('core.course.highlighted');\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateData(course) {\n    return _asyncToGenerator(function* () {\n      yield CoreCourses.invalidateCoursesByField('id', course.id);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  openCourse(course, navOptions) {\n    return _asyncToGenerator(function* () {\n      navOptions = navOptions || {};\n      navOptions.params = navOptions.params || {};\n      Object.assign(navOptions.params, {\n        course: course\n      });\n      // When replace is true, disable route depth.\n      let routeDepth = 0;\n      if (!navOptions.replace) {\n        // Don't return the .push promise, we don't want to display a loading modal during the page transition.\n        const currentTab = CoreNavigator.getCurrentMainMenuTab();\n        routeDepth = CoreNavigator.getRouteDepth(`/main/${currentTab}/course/${course.id}`);\n      }\n      const deepPath = '/deep'.repeat(routeDepth);\n      CoreNavigator.navigateToSitePath(`course${deepPath}/${course.id}`, navOptions);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  shouldRefreshWhenCompletionChanges() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n}\n_class = CoreCourseFormatDefaultHandler;\n_class.ɵfac = function CoreCourseFormatDefaultHandler_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CoreCourses","CoreNavigator","CoreUtils","Translate","CoreCourseFormatDefaultHandler","constructor","name","format","isEnabled","_asyncToGenerator","getCourseTitle","course","fullname","canViewAllSections","displayBlocks","displayCourseIndex","displayRefresher","getCurrentSection","sections","marker","courseData","ignoreErrors","getCourseByField","id","section","find","sect","forceSelected","getSectionHightlightedName","instant","invalidateData","invalidateCoursesByField","openCourse","navOptions","params","Object","assign","routeDepth","replace","currentTab","getCurrentMainMenuTab","getRouteDepth","deepPath","repeat","navigateToSitePath","shouldRefreshWhenCompletionChanges","factory","ɵfac","providedIn"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/services/handlers/default-format.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourseAnyCourseData, CoreCourses } from '@features/courses/services/courses';\nimport { CoreNavigationOptions, CoreNavigator } from '@services/navigator';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreCourseSection } from '../course-helper';\nimport { CoreCourseFormatCurrentSectionData, CoreCourseFormatHandler } from '../format-delegate';\n\n/**\n * Default handler used when the course format doesn't have a specific implementation.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreCourseFormatDefaultHandler implements CoreCourseFormatHandler {\n\n    name = 'CoreCourseFormatDefault';\n    format = 'default';\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getCourseTitle(course: CoreCourseAnyCourseData): string {\n        return course.fullname || '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    canViewAllSections(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    displayBlocks(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    displayCourseIndex(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    displayRefresher(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getCurrentSection(\n        course: CoreCourseAnyCourseData,\n        sections: CoreCourseSection[],\n    ): Promise<CoreCourseFormatCurrentSectionData<CoreCourseSection>> {\n        let marker: number | undefined;\n\n        // We need the \"marker\" to determine the current section.\n        if ('marker' in course) {\n            // We already have it.\n            marker = course.marker;\n        } else {\n            // Try to retrieve the marker.\n            const courseData = await CoreUtils.ignoreErrors(CoreCourses.getCourseByField('id', course.id));\n\n            marker = courseData?.marker;\n        }\n\n        if (marker && marker > 0) {\n            // Find the marked section.\n            const section = sections.find((sect) => sect.section == marker);\n\n            if (section) {\n                return {\n                    section,\n                    forceSelected: true,\n                };\n            }\n        }\n\n        // Marked section not found or we couldn't retrieve the marker. Return all sections.\n        return {\n            section: sections[0],\n            forceSelected: false,\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSectionHightlightedName(): string {\n        return Translate.instant('core.course.highlighted');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateData(course: CoreCourseAnyCourseData): Promise<void> {\n        await CoreCourses.invalidateCoursesByField('id', course.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async openCourse(course: CoreCourseAnyCourseData, navOptions?: CoreNavigationOptions): Promise<void> {\n        navOptions = navOptions || {};\n\n        navOptions.params = navOptions.params || {};\n        Object.assign(navOptions.params, { course: course });\n\n        // When replace is true, disable route depth.\n        let routeDepth = 0;\n        if (!navOptions.replace) {\n            // Don't return the .push promise, we don't want to display a loading modal during the page transition.\n            const currentTab = CoreNavigator.getCurrentMainMenuTab();\n            routeDepth = CoreNavigator.getRouteDepth(`/main/${currentTab}/course/${course.id}`);\n        }\n        const deepPath = '/deep'.repeat(routeDepth);\n\n        CoreNavigator.navigateToSitePath(`course${deepPath}/${course.id}`, navOptions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async shouldRefreshWhenCompletionChanges(): Promise<boolean> {\n        return true;\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}