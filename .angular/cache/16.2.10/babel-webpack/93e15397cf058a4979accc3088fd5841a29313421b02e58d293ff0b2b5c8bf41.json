{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreItemsManager } from './items-manager';\nimport { CoreRoutedItemsManagerSourcesTracker } from './routed-items-manager-sources-tracker';\n/**\n * Helper to manage a collection of items in a page.\n */\nexport class CoreRoutedItemsManager extends CoreItemsManager {\n  /**\n   * @inheritdoc\n   */\n  setSource(newSource) {\n    if (this.source) {\n      CoreRoutedItemsManagerSourcesTracker.removeReference(this.source.instance, this);\n    }\n    if (newSource) {\n      CoreRoutedItemsManagerSourcesTracker.addReference(newSource, this);\n    }\n    super.setSource(newSource);\n  }\n  /**\n   * Get the path of the selected item.\n   *\n   * @param route Page route, if any.\n   * @returns Path of the selected item.\n   */\n  getSelectedItemPath(route) {\n    if (!route) {\n      return null;\n    }\n    return this.getSelectedItemPathFromRoute(route);\n  }\n  /**\n   * Update the selected item given the current route.\n   *\n   * @param route Current route.\n   */\n  updateSelectedItem(route = null) {\n    var _ref, _route, _this$getCurrentPageR, _this$itemsMap$select, _this$itemsMap;\n    route = (_ref = (_route = route) !== null && _route !== void 0 ? _route : (_this$getCurrentPageR = this.getCurrentPageRoute()) === null || _this$getCurrentPageR === void 0 ? void 0 : _this$getCurrentPageR.snapshot) !== null && _ref !== void 0 ? _ref : null;\n    const selectedItemPath = this.getSelectedItemPath(route);\n    const selectedItem = selectedItemPath ? (_this$itemsMap$select = (_this$itemsMap = this.itemsMap) === null || _this$itemsMap === void 0 ? void 0 : _this$itemsMap[selectedItemPath]) !== null && _this$itemsMap$select !== void 0 ? _this$itemsMap$select : null : null;\n    this.setSelectedItem(selectedItem);\n  }\n  /**\n   * Navigate to an item in the collection.\n   *\n   * @param item Item.\n   * @param options Navigation options.\n   */\n  navigateToItem(item, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Get current route in the page.\n      const route = _this.getCurrentPageRoute();\n      if (route === null) {\n        return;\n      }\n      // If this item is already selected, do nothing.\n      const itemPath = _this.getSource().getItemPath(item);\n      const selectedItemPath = _this.getSelectedItemPath(route.snapshot);\n      if (selectedItemPath === itemPath) {\n        return;\n      }\n      // Navigate to item.\n      const params = _this.getSource().getItemQueryParams(item);\n      const pathPrefix = selectedItemPath ? selectedItemPath.split('/').fill('../').join('') : '';\n      yield CoreNavigator.navigate(pathPrefix + itemPath, _objectSpread({\n        params\n      }, options));\n    })();\n  }\n  /**\n   * Navigate to the index page.\n   *\n   * @param options Navigation options.\n   */\n  navigateToIndex(options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Get current route in the page.\n      const route = _this2.getCurrentPageRoute();\n      if (route === null) {\n        return;\n      }\n      // If the current page is already the index, do nothing.\n      const selectedItemPath = _this2.getSelectedItemPath(route.snapshot);\n      if (selectedItemPath === null) {\n        return;\n      }\n      // Navigate to index.\n      const indexPath = selectedItemPath ? selectedItemPath.split('/').fill('../').join('') : '';\n      yield CoreNavigator.navigate(indexPath, options);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  onSourceItemsUpdated(items) {\n    super.onSourceItemsUpdated(items);\n    const selectedItem = this.selectedItem;\n    if (selectedItem !== null && items.some(item => item === selectedItem)) {\n      return;\n    }\n    this.updateSelectedItem();\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemId(item) {\n    return this.getSource().getItemPath(item);\n  }\n}","map":{"version":3,"names":["CoreNavigator","CoreItemsManager","CoreRoutedItemsManagerSourcesTracker","CoreRoutedItemsManager","setSource","newSource","source","removeReference","instance","addReference","getSelectedItemPath","route","getSelectedItemPathFromRoute","updateSelectedItem","_ref","_route","_this$getCurrentPageR","_this$itemsMap$select","_this$itemsMap","getCurrentPageRoute","snapshot","selectedItemPath","selectedItem","itemsMap","setSelectedItem","navigateToItem","item","options","_this","_asyncToGenerator","itemPath","getSource","getItemPath","params","getItemQueryParams","pathPrefix","split","fill","join","navigate","_objectSpread","navigateToIndex","_this2","indexPath","onSourceItemsUpdated","items","some","getItemId"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/items-management/routed-items-manager.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';\nimport { CoreNavigationOptions, CoreNavigator } from '@services/navigator';\nimport { CoreItemsManager } from './items-manager';\n\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\nimport { CoreRoutedItemsManagerSourcesTracker } from './routed-items-manager-sources-tracker';\n\n/**\n * Helper to manage a collection of items in a page.\n */\nexport abstract class CoreRoutedItemsManager<\n    Item = unknown,\n    Source extends CoreRoutedItemsManagerSource<Item> = CoreRoutedItemsManagerSource<Item>,\n> extends CoreItemsManager<Item, Source> {\n\n    /**\n     * @inheritdoc\n     */\n    setSource(newSource: Source | null): void {\n        if (this.source) {\n            CoreRoutedItemsManagerSourcesTracker.removeReference(this.source.instance, this);\n        }\n\n        if (newSource) {\n            CoreRoutedItemsManagerSourcesTracker.addReference(newSource, this);\n        }\n\n        super.setSource(newSource);\n    }\n\n    /**\n     * Get page route.\n     *\n     * @returns Current page route, if any.\n     */\n    protected abstract getCurrentPageRoute(): ActivatedRoute | null;\n\n    /**\n     * Get the path of the selected item given the current route.\n     *\n     * @param route Page route.\n     * @returns Path of the selected item in the given route.\n     */\n    protected abstract getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null;\n\n    /**\n     * Get the path of the selected item.\n     *\n     * @param route Page route, if any.\n     * @returns Path of the selected item.\n     */\n    protected getSelectedItemPath(route?: ActivatedRouteSnapshot | null): string | null {\n        if (!route) {\n            return null;\n        }\n\n        return this.getSelectedItemPathFromRoute(route);\n    }\n\n    /**\n     * Update the selected item given the current route.\n     *\n     * @param route Current route.\n     */\n    protected updateSelectedItem(route: ActivatedRouteSnapshot | null = null): void {\n        route = route ?? this.getCurrentPageRoute()?.snapshot ?? null;\n\n        const selectedItemPath = this.getSelectedItemPath(route);\n\n        const selectedItem = selectedItemPath\n            ? this.itemsMap?.[selectedItemPath] ?? null\n            : null;\n        this.setSelectedItem(selectedItem);\n    }\n\n    /**\n     * Navigate to an item in the collection.\n     *\n     * @param item Item.\n     * @param options Navigation options.\n     */\n    protected async navigateToItem(\n        item: Item,\n        options: Pick<CoreNavigationOptions, 'reset' | 'replace' | 'animationDirection'> = {},\n    ): Promise<void> {\n        // Get current route in the page.\n        const route = this.getCurrentPageRoute();\n\n        if (route === null) {\n            return;\n        }\n\n        // If this item is already selected, do nothing.\n        const itemPath = this.getSource().getItemPath(item);\n        const selectedItemPath = this.getSelectedItemPath(route.snapshot);\n\n        if (selectedItemPath === itemPath) {\n            return;\n        }\n\n        // Navigate to item.\n        const params = this.getSource().getItemQueryParams(item);\n        const pathPrefix = selectedItemPath ? selectedItemPath.split('/').fill('../').join('') : '';\n\n        await CoreNavigator.navigate(pathPrefix + itemPath, { params, ...options });\n    }\n\n    /**\n     * Navigate to the index page.\n     *\n     * @param options Navigation options.\n     */\n    protected async navigateToIndex(\n        options: Pick<CoreNavigationOptions, 'reset' | 'replace' | 'animationDirection'> = {},\n    ): Promise<void> {\n        // Get current route in the page.\n        const route = this.getCurrentPageRoute();\n\n        if (route === null) {\n            return;\n        }\n\n        // If the current page is already the index, do nothing.\n        const selectedItemPath = this.getSelectedItemPath(route.snapshot);\n\n        if (selectedItemPath === null) {\n            return;\n        }\n\n        // Navigate to index.\n        const indexPath = selectedItemPath ? selectedItemPath.split('/').fill('../').join('') : '';\n\n        await CoreNavigator.navigate(indexPath, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected onSourceItemsUpdated(items: Item[]): void {\n        super.onSourceItemsUpdated(items);\n        const selectedItem = this.selectedItem;\n\n        if (selectedItem !== null && items.some(item => item === selectedItem)) {\n            return;\n        }\n\n        this.updateSelectedItem();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemId(item: Item): string | number {\n        return this.getSource().getItemPath(item);\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}