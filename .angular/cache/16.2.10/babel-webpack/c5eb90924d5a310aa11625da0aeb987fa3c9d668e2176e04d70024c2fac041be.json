{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreConstants } from '@/core/constants';\nimport { CoreModuleHandlerBase } from '@features/course/classes/module-base-handler';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport { AddonModFolderIndexComponent } from '../../components/index';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to support folder modules.\n */\nexport class AddonModFolderModuleHandlerService extends CoreModuleHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModFolder';\n    this.modName = 'folder';\n    this.pageName = AddonModFolderModuleHandlerService.PAGE_NAME;\n    this.supportedFeatures = {\n      [CoreConstants.FEATURE_MOD_ARCHETYPE]: CoreConstants.MOD_ARCHETYPE_RESOURCE,\n      [CoreConstants.FEATURE_GROUPS]: false,\n      [CoreConstants.FEATURE_GROUPINGS]: false,\n      [CoreConstants.FEATURE_MOD_INTRO]: true,\n      [CoreConstants.FEATURE_COMPLETION_TRACKS_VIEWS]: true,\n      [CoreConstants.FEATURE_GRADE_HAS_GRADE]: false,\n      [CoreConstants.FEATURE_GRADE_OUTCOMES]: false,\n      [CoreConstants.FEATURE_BACKUP_MOODLE2]: true,\n      [CoreConstants.FEATURE_SHOW_DESCRIPTION]: true,\n      [CoreConstants.FEATURE_MOD_PURPOSE]: \"content\" /* ModPurpose.MOD_PURPOSE_CONTENT */\n    };\n  }\n\n  /**\n   * @inheritdoc\n   */\n  getData(module, courseId, sectionId, forCoursePage) {\n    var _superprop_getGetData = () => super.getData,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      const data = yield _superprop_getGetData().call(_this, module, courseId, sectionId, forCoursePage);\n      if (module.description) {\n        // Module description can contain the folder contents if it's inline, remove it.\n        const descriptionElement = CoreDomUtils.convertToElement(module.description);\n        Array.from(descriptionElement.querySelectorAll('.foldertree, .folderbuttons, .tertiary-navigation')).forEach(element => element.remove());\n        module.description = descriptionElement.innerHTML;\n      }\n      // @todo Temporary fix to open inline folders. We should use a more generic solution.\n      data.action = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (event, module, courseId, options) {\n          options = options || {};\n          options.params = options.params || {};\n          Object.assign(options.params, {\n            module\n          });\n          const routeParams = '/' + courseId + '/' + module.id;\n          yield CoreNavigator.navigateToSitePath(_this.pageName + routeParams, options);\n        });\n        return function (_x, _x2, _x3, _x4) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      return data;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getMainComponent() {\n    return _asyncToGenerator(function* () {\n      return AddonModFolderIndexComponent;\n    })();\n  }\n}\n_class = AddonModFolderModuleHandlerService;\n_class.PAGE_NAME = 'mod_folder';\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModFolderModuleHandlerService_BaseFactory;\n  return function AddonModFolderModuleHandlerService_Factory(t) {\n    return (ɵAddonModFolderModuleHandlerService_BaseFactory || (ɵAddonModFolderModuleHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModFolderModuleHandler = makeSingleton(AddonModFolderModuleHandlerService);","map":{"version":3,"names":["CoreConstants","CoreModuleHandlerBase","CoreNavigator","CoreDomUtils","makeSingleton","AddonModFolderIndexComponent","AddonModFolderModuleHandlerService","constructor","name","modName","pageName","PAGE_NAME","supportedFeatures","FEATURE_MOD_ARCHETYPE","MOD_ARCHETYPE_RESOURCE","FEATURE_GROUPS","FEATURE_GROUPINGS","FEATURE_MOD_INTRO","FEATURE_COMPLETION_TRACKS_VIEWS","FEATURE_GRADE_HAS_GRADE","FEATURE_GRADE_OUTCOMES","FEATURE_BACKUP_MOODLE2","FEATURE_SHOW_DESCRIPTION","FEATURE_MOD_PURPOSE","getData","module","courseId","sectionId","forCoursePage","_superprop_getGetData","_this","_asyncToGenerator","data","call","description","descriptionElement","convertToElement","Array","from","querySelectorAll","forEach","element","remove","innerHTML","action","_ref","event","options","params","Object","assign","routeParams","id","navigateToSitePath","_x","_x2","_x3","_x4","apply","arguments","getMainComponent","_class","t","factory","ɵfac","providedIn","AddonModFolderModuleHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/folder/services/handlers/module.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreConstants, ModPurpose } from '@/core/constants';\nimport { Injectable, Type } from '@angular/core';\nimport { CoreModuleHandlerBase } from '@features/course/classes/module-base-handler';\nimport { CoreCourseModuleData } from '@features/course/services/course-helper';\nimport { CoreCourseModuleHandler, CoreCourseModuleHandlerData } from '@features/course/services/module-delegate';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport { AddonModFolderIndexComponent } from '../../components/index';\n\n/**\n * Handler to support folder modules.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModFolderModuleHandlerService extends CoreModuleHandlerBase implements CoreCourseModuleHandler {\n\n    static readonly PAGE_NAME = 'mod_folder';\n\n    name = 'AddonModFolder';\n    modName = 'folder';\n    protected pageName = AddonModFolderModuleHandlerService.PAGE_NAME;\n\n    supportedFeatures = {\n        [CoreConstants.FEATURE_MOD_ARCHETYPE]: CoreConstants.MOD_ARCHETYPE_RESOURCE,\n        [CoreConstants.FEATURE_GROUPS]: false,\n        [CoreConstants.FEATURE_GROUPINGS]: false,\n        [CoreConstants.FEATURE_MOD_INTRO]: true,\n        [CoreConstants.FEATURE_COMPLETION_TRACKS_VIEWS]: true,\n        [CoreConstants.FEATURE_GRADE_HAS_GRADE]: false,\n        [CoreConstants.FEATURE_GRADE_OUTCOMES]: false,\n        [CoreConstants.FEATURE_BACKUP_MOODLE2]: true,\n        [CoreConstants.FEATURE_SHOW_DESCRIPTION]: true,\n        [CoreConstants.FEATURE_MOD_PURPOSE]: ModPurpose.MOD_PURPOSE_CONTENT,\n    };\n\n    /**\n     * @inheritdoc\n     */\n    async getData(\n        module: CoreCourseModuleData,\n        courseId: number,\n        sectionId?: number,\n        forCoursePage?: boolean,\n    ): Promise<CoreCourseModuleHandlerData> {\n        const data = await super.getData(module, courseId, sectionId, forCoursePage);\n\n        if (module.description) {\n            // Module description can contain the folder contents if it's inline, remove it.\n            const descriptionElement = CoreDomUtils.convertToElement(module.description);\n\n            Array.from(descriptionElement.querySelectorAll('.foldertree, .folderbuttons, .tertiary-navigation'))\n                .forEach(element => element.remove());\n\n            module.description = descriptionElement.innerHTML;\n        }\n\n        // @todo Temporary fix to open inline folders. We should use a more generic solution.\n        data.action = async (event, module, courseId, options): Promise<void> => {\n            options = options || {};\n            options.params = options.params || {};\n            Object.assign(options.params, { module });\n\n            const routeParams = '/' + courseId + '/' + module.id;\n\n            await CoreNavigator.navigateToSitePath(this.pageName + routeParams, options);\n        };\n\n        return data;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getMainComponent(): Promise<Type<unknown> | undefined> {\n        return AddonModFolderIndexComponent;\n    }\n\n}\nexport const AddonModFolderModuleHandler = makeSingleton(AddonModFolderModuleHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}