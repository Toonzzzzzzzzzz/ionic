{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Items collection source data.\n */\nexport class CoreItemsManagerSource {\n  constructor() {\n    this.items = null;\n    this.listeners = [];\n    this.dirty = false;\n    this.loaded = false;\n    this.loadedPromise = new Promise(resolve => this.resolveLoaded = resolve);\n  }\n  /**\n   * Check whether the source is dirty.\n   *\n   * @returns Whether the source is dirty.\n   */\n  isDirty() {\n    return this.dirty;\n  }\n  /**\n   * Check whether data is loaded.\n   *\n   * @returns Whether data is loaded.\n   */\n  isLoaded() {\n    return this.loaded;\n  }\n  /**\n   * Return a promise that is resolved when the data is loaded.\n   *\n   * @returns Promise.\n   */\n  waitForLoaded() {\n    return this.loadedPromise;\n  }\n  /**\n   * Mark the source as initialized.\n   */\n  setLoaded() {\n    this.loaded = true;\n    this.resolveLoaded();\n  }\n  /**\n   * Set whether the source as dirty.\n   *\n   * When a source is dirty, the next load request will reload items from the beginning.\n   *\n   * @param dirty Whether source should be marked as dirty or not.\n   */\n  setDirty(dirty) {\n    this.dirty = dirty;\n  }\n  /**\n   * Get collection items.\n   *\n   * @returns Items.\n   */\n  getItems() {\n    return this.items;\n  }\n  /**\n   * Reset collection data.\n   */\n  reset() {\n    this.items = null;\n    this.dirty = false;\n    this.loaded = false;\n    this.listeners.forEach(listener => {\n      var _listener$onReset;\n      return (_listener$onReset = listener.onReset) === null || _listener$onReset === void 0 ? void 0 : _listener$onReset.call(listener);\n    });\n  }\n  /**\n   * Register a listener.\n   *\n   * @param listener Listener.\n   * @returns Unsubscribe function.\n   */\n  addListener(listener) {\n    this.listeners.push(listener);\n    return () => this.removeListener(listener);\n  }\n  /**\n   * Remove a listener.\n   *\n   * @param listener Listener.\n   */\n  removeListener(listener) {\n    const index = this.listeners.indexOf(listener);\n    if (index === -1) {\n      return;\n    }\n    this.listeners.splice(index, 1);\n  }\n  /**\n   * Update the collection items.\n   *\n   * @param items Items.\n   */\n  setItems(items) {\n    this.items = items;\n    this.setLoaded();\n    this.notifyItemsUpdated();\n  }\n  /**\n   * Notify that items have been updated.\n   */\n  notifyItemsUpdated() {\n    this.listeners.forEach(listener => {\n      var _listener$onItemsUpda;\n      return (_listener$onItemsUpda = listener.onItemsUpdated) === null || _listener$onItemsUpda === void 0 ? void 0 : _listener$onItemsUpda.call(listener, this.items);\n    });\n  }\n}","map":{"version":3,"names":["CoreItemsManagerSource","constructor","items","listeners","dirty","loaded","loadedPromise","Promise","resolve","resolveLoaded","isDirty","isLoaded","waitForLoaded","setLoaded","setDirty","getItems","reset","forEach","listener","_listener$onReset","onReset","call","addListener","push","removeListener","index","indexOf","splice","setItems","notifyItemsUpdated","_listener$onItemsUpda","onItemsUpdated"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/items-management/items-manager-source.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Updates listener.\n */\nexport interface CoreItemsManagerSourceListener<Item> {\n    onItemsUpdated?(items: Item[]): void;\n    onReset?(): void;\n}\n\n/**\n * Items collection source data.\n */\nexport abstract class CoreItemsManagerSource<Item = unknown> {\n\n    protected items: Item[] | null = null;\n    protected listeners: CoreItemsManagerSourceListener<Item>[] = [];\n    protected dirty = false;\n    protected loaded = false;\n    protected loadedPromise: Promise<void>;\n    protected resolveLoaded!: () => void;\n\n    constructor() {\n        this.loadedPromise = new Promise(resolve => this.resolveLoaded = resolve);\n    }\n\n    /**\n     * Check whether the source is dirty.\n     *\n     * @returns Whether the source is dirty.\n     */\n    isDirty(): boolean {\n        return this.dirty;\n    }\n\n    /**\n     * Check whether data is loaded.\n     *\n     * @returns Whether data is loaded.\n     */\n    isLoaded(): boolean {\n        return this.loaded;\n    }\n\n    /**\n     * Return a promise that is resolved when the data is loaded.\n     *\n     * @returns Promise.\n     */\n    waitForLoaded(): Promise<void> {\n        return this.loadedPromise;\n    }\n\n    /**\n     * Mark the source as initialized.\n     */\n    protected setLoaded(): void {\n        this.loaded = true;\n        this.resolveLoaded();\n    }\n\n    /**\n     * Set whether the source as dirty.\n     *\n     * When a source is dirty, the next load request will reload items from the beginning.\n     *\n     * @param dirty Whether source should be marked as dirty or not.\n     */\n    setDirty(dirty: boolean): void {\n        this.dirty = dirty;\n    }\n\n    /**\n     * Get collection items.\n     *\n     * @returns Items.\n     */\n    getItems(): Item[] | null {\n        return this.items;\n    }\n\n    /**\n     * Reset collection data.\n     */\n    reset(): void {\n        this.items = null;\n        this.dirty = false;\n        this.loaded = false;\n\n        this.listeners.forEach(listener => listener.onReset?.call(listener));\n    }\n\n    /**\n     * Load items.\n     */\n    abstract load(): Promise<void>;\n\n    /**\n     * Register a listener.\n     *\n     * @param listener Listener.\n     * @returns Unsubscribe function.\n     */\n    addListener(listener: CoreItemsManagerSourceListener<Item>): () => void {\n        this.listeners.push(listener);\n\n        return () => this.removeListener(listener);\n    }\n\n    /**\n     * Remove a listener.\n     *\n     * @param listener Listener.\n     */\n    removeListener(listener: CoreItemsManagerSourceListener<Item>): void {\n        const index = this.listeners.indexOf(listener);\n\n        if (index === -1) {\n            return;\n        }\n\n        this.listeners.splice(index, 1);\n    }\n\n    /**\n     * Update the collection items.\n     *\n     * @param items Items.\n     */\n    protected setItems(items: Item[]): void {\n        this.items = items;\n        this.setLoaded();\n\n        this.notifyItemsUpdated();\n    }\n\n    /**\n     * Notify that items have been updated.\n     */\n    protected notifyItemsUpdated(): void {\n        this.listeners.forEach(listener => listener.onItemsUpdated?.call(listener, this.items));\n    }\n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;;;AAGA,OAAM,MAAgBA,sBAAsB;EASxCC,YAAA;IAPU,KAAAC,KAAK,GAAkB,IAAI;IAC3B,KAAAC,SAAS,GAA2C,EAAE;IACtD,KAAAC,KAAK,GAAG,KAAK;IACb,KAAAC,MAAM,GAAG,KAAK;IAKpB,IAAI,CAACC,aAAa,GAAG,IAAIC,OAAO,CAACC,OAAO,IAAI,IAAI,CAACC,aAAa,GAAGD,OAAO,CAAC;EAC7E;EAEA;;;;;EAKAE,OAAOA,CAAA;IACH,OAAO,IAAI,CAACN,KAAK;EACrB;EAEA;;;;;EAKAO,QAAQA,CAAA;IACJ,OAAO,IAAI,CAACN,MAAM;EACtB;EAEA;;;;;EAKAO,aAAaA,CAAA;IACT,OAAO,IAAI,CAACN,aAAa;EAC7B;EAEA;;;EAGUO,SAASA,CAAA;IACf,IAAI,CAACR,MAAM,GAAG,IAAI;IAClB,IAAI,CAACI,aAAa,EAAE;EACxB;EAEA;;;;;;;EAOAK,QAAQA,CAACV,KAAc;IACnB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EAEA;;;;;EAKAW,QAAQA,CAAA;IACJ,OAAO,IAAI,CAACb,KAAK;EACrB;EAEA;;;EAGAc,KAAKA,CAAA;IACD,IAAI,CAACd,KAAK,GAAG,IAAI;IACjB,IAAI,CAACE,KAAK,GAAG,KAAK;IAClB,IAAI,CAACC,MAAM,GAAG,KAAK;IAEnB,IAAI,CAACF,SAAS,CAACc,OAAO,CAACC,QAAQ;MAAA,IAAAC,iBAAA;MAAA,QAAAA,iBAAA,GAAID,QAAQ,CAACE,OAAO,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBE,IAAI,CAACH,QAAQ,CAAC;IAAA,EAAC;EACxE;EAOA;;;;;;EAMAI,WAAWA,CAACJ,QAA8C;IACtD,IAAI,CAACf,SAAS,CAACoB,IAAI,CAACL,QAAQ,CAAC;IAE7B,OAAO,MAAM,IAAI,CAACM,cAAc,CAACN,QAAQ,CAAC;EAC9C;EAEA;;;;;EAKAM,cAAcA,CAACN,QAA8C;IACzD,MAAMO,KAAK,GAAG,IAAI,CAACtB,SAAS,CAACuB,OAAO,CAACR,QAAQ,CAAC;IAE9C,IAAIO,KAAK,KAAK,CAAC,CAAC,EAAE;MACd;;IAGJ,IAAI,CAACtB,SAAS,CAACwB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;EACnC;EAEA;;;;;EAKUG,QAAQA,CAAC1B,KAAa;IAC5B,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACW,SAAS,EAAE;IAEhB,IAAI,CAACgB,kBAAkB,EAAE;EAC7B;EAEA;;;EAGUA,kBAAkBA,CAAA;IACxB,IAAI,CAAC1B,SAAS,CAACc,OAAO,CAACC,QAAQ;MAAA,IAAAY,qBAAA;MAAA,QAAAA,qBAAA,GAAIZ,QAAQ,CAACa,cAAc,cAAAD,qBAAA,uBAAvBA,qBAAA,CAAyBT,IAAI,CAACH,QAAQ,EAAE,IAAI,CAAChB,KAAK,CAAC;IAAA,EAAC;EAC3F"},"metadata":{},"sourceType":"module","externalDependencies":[]}