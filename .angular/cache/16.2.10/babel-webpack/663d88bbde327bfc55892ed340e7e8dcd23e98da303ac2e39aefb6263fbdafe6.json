{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { PREFERENCES_TABLE_NAME } from './database/user';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to handle offline user preferences.\n */\nexport class CoreUserOfflineProvider {\n  /**\n   * Get preferences that were changed offline.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with list of preferences.\n   */\n  getChangedPreferences(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecordsSelect(PREFERENCES_TABLE_NAME, 'value != onlinevalue OR onlinevalue IS NULL');\n    })();\n  }\n  /**\n   * Get an offline preference.\n   *\n   * @param name Name of the preference.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the preference, rejected if not found.\n   */\n  getPreference(name, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecord(PREFERENCES_TABLE_NAME, {\n        name\n      });\n    })();\n  }\n  /**\n   * Set an offline preference.\n   *\n   * @param name Name of the preference.\n   * @param value Value of the preference.\n   * @param onlineValue Online value of the preference. If undefined, preserve previously stored value.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  setPreference(name, value, onlineValue, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const record = {\n        name,\n        value,\n        onlinevalue: onlineValue\n      };\n      if (onlineValue === undefined) {\n        // Keep online value already stored (if any).\n        const entry = yield CoreUtils.ignoreErrors(site.getDb().getRecord(PREFERENCES_TABLE_NAME, {\n          name\n        }), null);\n        record.onlinevalue = entry === null || entry === void 0 ? void 0 : entry.onlinevalue;\n      }\n      yield site.getDb().insertRecord(PREFERENCES_TABLE_NAME, record);\n    })();\n  }\n}\n_class = CoreUserOfflineProvider;\n_class.ɵfac = function CoreUserOfflineProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreUserOffline = makeSingleton(CoreUserOfflineProvider);","map":{"version":3,"names":["CoreSites","CoreUtils","makeSingleton","PREFERENCES_TABLE_NAME","CoreUserOfflineProvider","getChangedPreferences","siteId","_asyncToGenerator","site","getSite","getDb","getRecordsSelect","getPreference","name","getRecord","setPreference","value","onlineValue","record","onlinevalue","undefined","entry","ignoreErrors","insertRecord","factory","ɵfac","providedIn","CoreUserOffline"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/user/services/user-offline.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { PREFERENCES_TABLE_NAME, CoreUserPreferenceDBRecord } from './database/user';\n\n/**\n * Service to handle offline user preferences.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreUserOfflineProvider {\n\n    /**\n     * Get preferences that were changed offline.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with list of preferences.\n     */\n    async getChangedPreferences(siteId?: string): Promise<CoreUserPreferenceDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecordsSelect(\n            PREFERENCES_TABLE_NAME,\n            'value != onlinevalue OR onlinevalue IS NULL',\n        );\n    }\n\n    /**\n     * Get an offline preference.\n     *\n     * @param name Name of the preference.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the preference, rejected if not found.\n     */\n    async getPreference(name: string, siteId?: string): Promise<CoreUserPreferenceDBRecord> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecord(PREFERENCES_TABLE_NAME, { name });\n    }\n\n    /**\n     * Set an offline preference.\n     *\n     * @param name Name of the preference.\n     * @param value Value of the preference.\n     * @param onlineValue Online value of the preference. If undefined, preserve previously stored value.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async setPreference(name: string, value: string, onlineValue?: string | null , siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const record: Partial<CoreUserPreferenceDBRecord> = {\n            name,\n            value,\n            onlinevalue: onlineValue,\n        };\n\n        if (onlineValue === undefined) {\n            // Keep online value already stored (if any).\n            const entry = await CoreUtils.ignoreErrors(\n                site.getDb().getRecord<CoreUserPreferenceDBRecord>(PREFERENCES_TABLE_NAME, { name }),\n                null,\n            );\n\n            record.onlinevalue = entry?.onlinevalue;\n        }\n\n        await site.getDb().insertRecord(PREFERENCES_TABLE_NAME, record);\n    }\n\n}\n\nexport const CoreUserOffline = makeSingleton(CoreUserOfflineProvider);\n"],"mappings":";;AAgBA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,sBAAsB,QAAoC,iBAAiB;;AAEpF;;;AAIA,OAAM,MAAOC,uBAAuB;EAEhC;;;;;;EAMMC,qBAAqBA,CAACC,MAAe;IAAA,OAAAC,iBAAA;MACvC,MAAMC,IAAI,SAASR,SAAS,CAACS,OAAO,CAACH,MAAM,CAAC;MAE5C,OAAOE,IAAI,CAACE,KAAK,EAAE,CAACC,gBAAgB,CAChCR,sBAAsB,EACtB,6CAA6C,CAChD;IAAC;EACN;EAEA;;;;;;;EAOMS,aAAaA,CAACC,IAAY,EAAEP,MAAe;IAAA,OAAAC,iBAAA;MAC7C,MAAMC,IAAI,SAASR,SAAS,CAACS,OAAO,CAACH,MAAM,CAAC;MAE5C,OAAOE,IAAI,CAACE,KAAK,EAAE,CAACI,SAAS,CAACX,sBAAsB,EAAE;QAAEU;MAAI,CAAE,CAAC;IAAC;EACpE;EAEA;;;;;;;;;EASME,aAAaA,CAACF,IAAY,EAAEG,KAAa,EAAEC,WAA2B,EAAGX,MAAe;IAAA,OAAAC,iBAAA;MAC1F,MAAMC,IAAI,SAASR,SAAS,CAACS,OAAO,CAACH,MAAM,CAAC;MAE5C,MAAMY,MAAM,GAAwC;QAChDL,IAAI;QACJG,KAAK;QACLG,WAAW,EAAEF;OAChB;MAED,IAAIA,WAAW,KAAKG,SAAS,EAAE;QAC3B;QACA,MAAMC,KAAK,SAASpB,SAAS,CAACqB,YAAY,CACtCd,IAAI,CAACE,KAAK,EAAE,CAACI,SAAS,CAA6BX,sBAAsB,EAAE;UAAEU;QAAI,CAAE,CAAC,EACpF,IAAI,CACP;QAEDK,MAAM,CAACC,WAAW,GAAGE,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEF,WAAW;;MAG3C,MAAMX,IAAI,CAACE,KAAK,EAAE,CAACa,YAAY,CAACpB,sBAAsB,EAAEe,MAAM,CAAC;IAAC;EACpE;;SA3DSd,uBAAuB;;mBAAvBA,MAAuB;AAAA;;SAAvBA,MAAuB;EAAAoB,OAAA,EAAvBpB,MAAuB,CAAAqB,IAAA;EAAAC,UAAA,EADV;AAAM;AAgEhC,OAAO,MAAMC,eAAe,GAAGzB,aAAa,CAACE,uBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}