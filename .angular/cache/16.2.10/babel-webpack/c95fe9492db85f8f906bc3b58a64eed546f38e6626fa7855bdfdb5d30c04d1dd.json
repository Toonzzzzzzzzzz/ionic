{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreSyncBaseProvider } from '@classes/base-sync';\nimport { CoreCourse } from '../services/course';\nimport { CoreCourseModulePrefetchDelegate } from '../services/module-prefetch-delegate';\n/**\n * Base class to create activity sync providers. It provides some common functions.\n */\nexport class CoreCourseActivitySyncBaseProvider extends CoreSyncBaseProvider {\n  constructor() {\n    super(...arguments);\n    this.componentTranslatableString = 'activity';\n  }\n  /**\n   * Conveniece function to prefetch data after an update.\n   *\n   * @param prefetchHandler Prefetch Handler.\n   * @param module Module.\n   * @param courseId Course ID.\n   * @param preventDownloadRegex If regex matches, don't download the data. Defaults to check files.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: true if prefetched, false if no need to prefetch.\n   */\n  prefetchAfterUpdate(prefetchHandler, module, courseId, preventDownloadRegex, siteId) {\n    return _asyncToGenerator(function* () {\n      // Get the module updates to check if the data was updated or not.\n      const result = yield CoreCourseModulePrefetchDelegate.getModuleUpdates(module, courseId, true, siteId);\n      if (!(result !== null && result !== void 0 && result.updates.length)) {\n        return false;\n      }\n      // Only prefetch if files haven't changed, to prevent downloading too much data automatically.\n      const regex = preventDownloadRegex || /^.*files$/;\n      const shouldDownload = !result.updates.find(entry => entry.name.match(regex));\n      if (shouldDownload) {\n        yield prefetchHandler.download(module, courseId);\n        return true;\n      }\n      return false;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  get componentTranslate() {\n    if (!this.componentTranslateInternal) {\n      this.componentTranslateInternal = CoreCourse.translateModuleName(this.componentTranslatableString);\n    }\n    return this.componentTranslateInternal;\n  }\n}","map":{"version":3,"names":["CoreSyncBaseProvider","CoreCourse","CoreCourseModulePrefetchDelegate","CoreCourseActivitySyncBaseProvider","constructor","componentTranslatableString","prefetchAfterUpdate","prefetchHandler","module","courseId","preventDownloadRegex","siteId","_asyncToGenerator","result","getModuleUpdates","updates","length","regex","shouldDownload","find","entry","name","match","download","componentTranslate","componentTranslateInternal","translateModuleName"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/course/classes/activity-sync.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSyncBaseProvider } from '@classes/base-sync';\nimport { CoreCourse, CoreCourseAnyModuleData } from '../services/course';\nimport { CoreCourseModulePrefetchDelegate } from '../services/module-prefetch-delegate';\nimport { CoreCourseModulePrefetchHandlerBase } from './module-prefetch-handler';\n\n/**\n * Base class to create activity sync providers. It provides some common functions.\n */\nexport class CoreCourseActivitySyncBaseProvider<T = void> extends CoreSyncBaseProvider<T> {\n\n    protected componentTranslatableString = 'activity';\n\n    /**\n     * Conveniece function to prefetch data after an update.\n     *\n     * @param prefetchHandler Prefetch Handler.\n     * @param module Module.\n     * @param courseId Course ID.\n     * @param preventDownloadRegex If regex matches, don't download the data. Defaults to check files.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: true if prefetched, false if no need to prefetch.\n     */\n    async prefetchAfterUpdate(\n        prefetchHandler: CoreCourseModulePrefetchHandlerBase,\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        preventDownloadRegex?: RegExp,\n        siteId?: string,\n    ): Promise<boolean> {\n        // Get the module updates to check if the data was updated or not.\n        const result = await CoreCourseModulePrefetchDelegate.getModuleUpdates(module, courseId, true, siteId);\n\n        if (!result?.updates.length) {\n            return false;\n        }\n\n        // Only prefetch if files haven't changed, to prevent downloading too much data automatically.\n        const regex = preventDownloadRegex || /^.*files$/;\n        const shouldDownload = !result.updates.find((entry) => entry.name.match(regex));\n\n        if (shouldDownload) {\n            await prefetchHandler.download(module, courseId);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected get componentTranslate(): string {\n        if (!this.componentTranslateInternal) {\n            this.componentTranslateInternal = CoreCourse.translateModuleName(this.componentTranslatableString);\n        }\n\n        return this.componentTranslateInternal;\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,oBAAoB,QAAQ,oBAAoB;AACzD,SAASC,UAAU,QAAiC,oBAAoB;AACxE,SAASC,gCAAgC,QAAQ,sCAAsC;AAGvF;;;AAGA,OAAM,MAAOC,kCAA6C,SAAQH,oBAAuB;EAAzFI,YAAA;;IAEc,KAAAC,2BAA2B,GAAG,UAAU;EAkDtD;EAhDI;;;;;;;;;;EAUMC,mBAAmBA,CACrBC,eAAoD,EACpDC,MAA+B,EAC/BC,QAAgB,EAChBC,oBAA6B,EAC7BC,MAAe;IAAA,OAAAC,iBAAA;MAEf;MACA,MAAMC,MAAM,SAASX,gCAAgC,CAACY,gBAAgB,CAACN,MAAM,EAAEC,QAAQ,EAAE,IAAI,EAAEE,MAAM,CAAC;MAEtG,IAAI,EAACE,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEE,OAAO,CAACC,MAAM,GAAE;QACzB,OAAO,KAAK;;MAGhB;MACA,MAAMC,KAAK,GAAGP,oBAAoB,IAAI,WAAW;MACjD,MAAMQ,cAAc,GAAG,CAACL,MAAM,CAACE,OAAO,CAACI,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,KAAK,CAACL,KAAK,CAAC,CAAC;MAE/E,IAAIC,cAAc,EAAE;QAChB,MAAMX,eAAe,CAACgB,QAAQ,CAACf,MAAM,EAAEC,QAAQ,CAAC;QAEhD,OAAO,IAAI;;MAGf,OAAO,KAAK;IAAC;EACjB;EAEA;;;EAGA,IAAce,kBAAkBA,CAAA;IAC5B,IAAI,CAAC,IAAI,CAACC,0BAA0B,EAAE;MAClC,IAAI,CAACA,0BAA0B,GAAGxB,UAAU,CAACyB,mBAAmB,CAAC,IAAI,CAACrB,2BAA2B,CAAC;;IAGtG,OAAO,IAAI,CAACoB,0BAA0B;EAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}