{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreQuestion } from '@features/question/services/question';\nimport { CoreQuestionHelper } from '@features/question/services/question-helper';\nimport { makeSingleton } from '@singletons';\nimport { AddonQtypeDdMarkerComponent } from '../../component/ddmarker';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to support drag-and-drop markers question type.\n */\nexport class AddonQtypeDdMarkerHandlerService {\n  constructor() {\n    this.name = 'AddonQtypeDdMarker';\n    this.type = 'qtype_ddmarker';\n  }\n  /**\n   * @inheritdoc\n   */\n  getBehaviour(question, behaviour) {\n    if (behaviour === 'interactive') {\n      return 'interactivecountback';\n    }\n    return behaviour;\n  }\n  /**\n   * @inheritdoc\n   */\n  getComponent() {\n    return AddonQtypeDdMarkerComponent;\n  }\n  /**\n   * @inheritdoc\n   */\n  isCompleteResponse(question, answers) {\n    // If 1 dragitem is set we assume the answer is complete (like Moodle does).\n    for (const name in answers) {\n      if (answers[name]) {\n        return 1;\n      }\n    }\n    return 0;\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  isGradableResponse(question, answers) {\n    return this.isCompleteResponse(question, answers);\n  }\n  /**\n   * @inheritdoc\n   */\n  isSameResponse(question, prevAnswers, newAnswers) {\n    return CoreQuestion.compareAllAnswers(prevAnswers, newAnswers);\n  }\n  /**\n   * @inheritdoc\n   */\n  getAdditionalDownloadableFiles(question, usageId) {\n    const treatedQuestion = question;\n    CoreQuestionHelper.extractQuestionScripts(treatedQuestion, usageId);\n    if (treatedQuestion.amdArgs && typeof treatedQuestion.amdArgs[1] == 'string') {\n      // Moodle 3.6+.\n      return [{\n        fileurl: treatedQuestion.amdArgs[1]\n      }];\n    }\n    return [];\n  }\n}\n_class = AddonQtypeDdMarkerHandlerService;\n_class.ɵfac = function AddonQtypeDdMarkerHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonQtypeDdMarkerHandler = makeSingleton(AddonQtypeDdMarkerHandlerService);","map":{"version":3,"names":["CoreQuestion","CoreQuestionHelper","makeSingleton","AddonQtypeDdMarkerComponent","AddonQtypeDdMarkerHandlerService","constructor","name","type","getBehaviour","question","behaviour","getComponent","isCompleteResponse","answers","isEnabled","_asyncToGenerator","isGradableResponse","isSameResponse","prevAnswers","newAnswers","compareAllAnswers","getAdditionalDownloadableFiles","usageId","treatedQuestion","extractQuestionScripts","amdArgs","fileurl","factory","ɵfac","providedIn","AddonQtypeDdMarkerHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/qtype/ddmarker/services/handlers/ddmarker.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\n\nimport { CoreQuestion, CoreQuestionQuestionParsed, CoreQuestionsAnswers } from '@features/question/services/question';\nimport { CoreQuestionHandler } from '@features/question/services/question-delegate';\nimport { CoreQuestionHelper, CoreQuestionQuestion } from '@features/question/services/question-helper';\nimport { CoreWSFile } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { AddonQtypeDdMarkerComponent } from '../../component/ddmarker';\n\n/**\n * Handler to support drag-and-drop markers question type.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonQtypeDdMarkerHandlerService implements CoreQuestionHandler {\n\n    name = 'AddonQtypeDdMarker';\n    type = 'qtype_ddmarker';\n\n    /**\n     * @inheritdoc\n     */\n    getBehaviour(question: CoreQuestionQuestionParsed, behaviour: string): string {\n        if (behaviour === 'interactive') {\n            return 'interactivecountback';\n        }\n\n        return behaviour;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getComponent(): Type<unknown> {\n        return AddonQtypeDdMarkerComponent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isCompleteResponse(\n        question: CoreQuestionQuestionParsed,\n        answers: CoreQuestionsAnswers,\n    ): number {\n        // If 1 dragitem is set we assume the answer is complete (like Moodle does).\n        for (const name in answers) {\n            if (answers[name]) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isGradableResponse(\n        question: CoreQuestionQuestionParsed,\n        answers: CoreQuestionsAnswers,\n    ): number {\n        return this.isCompleteResponse(question, answers);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isSameResponse(\n        question: CoreQuestionQuestionParsed,\n        prevAnswers: CoreQuestionsAnswers,\n        newAnswers: CoreQuestionsAnswers,\n    ): boolean {\n        return CoreQuestion.compareAllAnswers(prevAnswers, newAnswers);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getAdditionalDownloadableFiles(question: CoreQuestionQuestionParsed, usageId?: number): CoreWSFile[] {\n        const treatedQuestion: CoreQuestionQuestion = question;\n\n        CoreQuestionHelper.extractQuestionScripts(treatedQuestion, usageId);\n\n        if (treatedQuestion.amdArgs && typeof treatedQuestion.amdArgs[1] == 'string') {\n            // Moodle 3.6+.\n            return [{\n                fileurl: treatedQuestion.amdArgs[1],\n            }];\n        }\n\n        return [];\n    }\n\n}\n\nexport const AddonQtypeDdMarkerHandler = makeSingleton(AddonQtypeDdMarkerHandlerService);\n"],"mappings":";;AAgBA,SAASA,YAAY,QAA0D,sCAAsC;AAErH,SAASC,kBAAkB,QAA8B,6CAA6C;AAEtG,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,2BAA2B,QAAQ,0BAA0B;;AAEtE;;;AAIA,OAAM,MAAOC,gCAAgC;EAD7CC,YAAA;IAGI,KAAAC,IAAI,GAAG,oBAAoB;IAC3B,KAAAC,IAAI,GAAG,gBAAgB;;EAEvB;;;EAGAC,YAAYA,CAACC,QAAoC,EAAEC,SAAiB;IAChE,IAAIA,SAAS,KAAK,aAAa,EAAE;MAC7B,OAAO,sBAAsB;;IAGjC,OAAOA,SAAS;EACpB;EAEA;;;EAGAC,YAAYA,CAAA;IACR,OAAOR,2BAA2B;EACtC;EAEA;;;EAGAS,kBAAkBA,CACdH,QAAoC,EACpCI,OAA6B;IAE7B;IACA,KAAK,MAAMP,IAAI,IAAIO,OAAO,EAAE;MACxB,IAAIA,OAAO,CAACP,IAAI,CAAC,EAAE;QACf,OAAO,CAAC;;;IAIhB,OAAO,CAAC;EACZ;EAEA;;;EAGMQ,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB;EAEA;;;EAGAC,kBAAkBA,CACdP,QAAoC,EACpCI,OAA6B;IAE7B,OAAO,IAAI,CAACD,kBAAkB,CAACH,QAAQ,EAAEI,OAAO,CAAC;EACrD;EAEA;;;EAGAI,cAAcA,CACVR,QAAoC,EACpCS,WAAiC,EACjCC,UAAgC;IAEhC,OAAOnB,YAAY,CAACoB,iBAAiB,CAACF,WAAW,EAAEC,UAAU,CAAC;EAClE;EAEA;;;EAGAE,8BAA8BA,CAACZ,QAAoC,EAAEa,OAAgB;IACjF,MAAMC,eAAe,GAAyBd,QAAQ;IAEtDR,kBAAkB,CAACuB,sBAAsB,CAACD,eAAe,EAAED,OAAO,CAAC;IAEnE,IAAIC,eAAe,CAACE,OAAO,IAAI,OAAOF,eAAe,CAACE,OAAO,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;MAC1E;MACA,OAAO,CAAC;QACJC,OAAO,EAAEH,eAAe,CAACE,OAAO,CAAC,CAAC;OACrC,CAAC;;IAGN,OAAO,EAAE;EACb;;SApFSrB,gCAAgC;;mBAAhCA,MAAgC;AAAA;;SAAhCA,MAAgC;EAAAuB,OAAA,EAAhCvB,MAAgC,CAAAwB,IAAA;EAAAC,UAAA,EADnB;AAAM;AAyFhC,OAAO,MAAMC,yBAAyB,GAAG5B,aAAa,CAACE,gCAAgC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}