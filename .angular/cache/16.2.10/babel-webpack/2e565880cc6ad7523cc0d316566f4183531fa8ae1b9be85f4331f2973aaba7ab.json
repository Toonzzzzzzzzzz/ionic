{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreNetworkError } from '@classes/errors/network-error';\nimport { CoreCourseActivitySyncBaseProvider } from '@features/course/classes/activity-sync';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModSurveyPrefetchHandler } from './handlers/prefetch';\nimport { AddonModSurvey, AddonModSurveyProvider } from './survey';\nimport { AddonModSurveyOffline } from './survey-offline';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to sync surveys.\n */\nexport class AddonModSurveySyncProvider extends CoreCourseActivitySyncBaseProvider {\n  constructor() {\n    super('AddonModSurveySyncProvider');\n    this.componentTranslatableString = 'survey';\n  }\n  /**\n   * Get the ID of a survey sync.\n   *\n   * @param surveyId Survey ID.\n   * @param userId User the answers belong to.\n   * @returns Sync ID.\n   * @protected\n   */\n  getSyncId(surveyId, userId) {\n    return surveyId + '#' + userId;\n  }\n  /**\n   * Try to synchronize all the surveys in a certain site or in all sites.\n   *\n   * @param siteId Site ID to sync. If not defined, sync all sites.\n   * @param force Wether to force sync not depending on last execution.\n   * @returns Promise resolved if sync is successful, rejected if sync fails.\n   */\n  syncAllSurveys(siteId, force) {\n    return this.syncOnSites('all surveys', siteId => this.syncAllSurveysFunc(!!force, siteId), siteId);\n  }\n  /**\n   * Sync all pending surveys on a site.\n   *\n   * @param force Wether to force sync not depending on last execution.\n   * @param siteId Site ID to sync.\n   * @returns Promise resolved if sync is successful, rejected if sync fails.\n   */\n  syncAllSurveysFunc(force, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Get all survey answers pending to be sent in the site.\n      const entries = yield AddonModSurveyOffline.getAllData(siteId);\n      // Sync all surveys.\n      const promises = entries.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (entry) {\n          const result = yield force ? _this.syncSurvey(entry.surveyid, entry.userid, siteId) : _this.syncSurveyIfNeeded(entry.surveyid, entry.userid, siteId);\n          if (result && result.updated) {\n            // Sync successful, send event.\n            CoreEvents.trigger(AddonModSurveySyncProvider.AUTO_SYNCED, {\n              surveyId: entry.surveyid,\n              userId: entry.userid,\n              warnings: result.warnings\n            }, siteId);\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Sync a survey only if a certain time has passed since the last time.\n   *\n   * @param surveyId Survey ID.\n   * @param userId User the answers belong to.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the survey is synced or if it doesn't need to be synced.\n   */\n  syncSurveyIfNeeded(surveyId, userId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const syncId = _this2.getSyncId(surveyId, userId);\n      const needed = yield _this2.isSyncNeeded(syncId, siteId);\n      if (needed) {\n        return _this2.syncSurvey(surveyId, userId, siteId);\n      }\n    })();\n  }\n  /**\n   * Synchronize a survey.\n   *\n   * @param surveyId Survey ID.\n   * @param userId User the answers belong to. If not defined, current user.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  syncSurvey(surveyId, userId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      siteId = site.getId();\n      userId = userId || site.getUserId();\n      const syncId = _this3.getSyncId(surveyId, userId);\n      const currentSyncPromise = _this3.getOngoingSync(syncId, siteId);\n      if (currentSyncPromise) {\n        // There's already a sync ongoing for this site, return the promise.\n        return currentSyncPromise;\n      }\n      _this3.logger.debug(`Try to sync survey '${surveyId}' for user '${userId}'`);\n      // Get offline events.\n      const syncPromise = _this3.performSyncSurvey(surveyId, userId, siteId);\n      return _this3.addOngoingSync(syncId, syncPromise, siteId);\n    })();\n  }\n  /**\n   * Perform the survey sync.\n   *\n   * @param surveyId Survey ID.\n   * @param userId User the answers belong to. If not defined, current user.\n   * @param siteId Site ID.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  performSyncSurvey(surveyId, userId, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const result = {\n        warnings: [],\n        updated: false\n      };\n      // Sync offline logs.\n      CoreUtils.ignoreErrors(CoreCourseLogHelper.syncActivity(AddonModSurveyProvider.COMPONENT, surveyId, siteId));\n      let answersNumber = 0;\n      let data;\n      try {\n        // Get answers to be sent.\n        data = yield AddonModSurveyOffline.getSurveyData(surveyId, siteId, userId);\n        answersNumber = data.answers.length;\n      } catch (_unused) {\n        // Ignore errors.\n      }\n      if (answersNumber > 0 && data) {\n        if (!CoreNetwork.isOnline()) {\n          // Cannot sync in offline.\n          throw new CoreNetworkError();\n        }\n        result.courseId = data.courseid;\n        // Send the answers.\n        try {\n          yield AddonModSurvey.submitAnswersOnline(surveyId, data.answers, siteId);\n          result.updated = true;\n          // Answers sent, delete them.\n          yield AddonModSurveyOffline.deleteSurveyAnswers(surveyId, siteId, userId);\n        } catch (error) {\n          if (!CoreUtils.isWebServiceError(error)) {\n            // Local error, reject.\n            throw error;\n          }\n          // The WebService has thrown an error, this means that answers cannot be submitted. Delete them.\n          result.updated = true;\n          yield AddonModSurveyOffline.deleteSurveyAnswers(surveyId, siteId, userId);\n          // Answers deleted, add a warning.\n          _this4.addOfflineDataDeletedWarning(result.warnings, data.name, error);\n        }\n        if (result.courseId) {\n          yield AddonModSurvey.invalidateSurveyData(result.courseId, siteId);\n          // Data has been sent to server, update survey data.\n          const module = yield CoreCourse.getModuleBasicInfoByInstance(surveyId, 'survey', {\n            siteId\n          });\n          CoreUtils.ignoreErrors(_this4.prefetchAfterUpdate(AddonModSurveyPrefetchHandler.instance, module, result.courseId, undefined, siteId));\n        }\n      }\n      const syncId = _this4.getSyncId(surveyId, userId);\n      // Sync finished, set sync time.\n      CoreUtils.ignoreErrors(_this4.setSyncTime(syncId, siteId));\n      return result;\n    })();\n  }\n}\n_class = AddonModSurveySyncProvider;\n_class.AUTO_SYNCED = 'addon_mod_survey_autom_synced';\n_class.ɵfac = function AddonModSurveySyncProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModSurveySync = makeSingleton(AddonModSurveySyncProvider);","map":{"version":3,"names":["CoreNetworkError","CoreCourseActivitySyncBaseProvider","CoreCourse","CoreCourseLogHelper","CoreNetwork","CoreSites","CoreUtils","makeSingleton","CoreEvents","AddonModSurveyPrefetchHandler","AddonModSurvey","AddonModSurveyProvider","AddonModSurveyOffline","AddonModSurveySyncProvider","constructor","componentTranslatableString","getSyncId","surveyId","userId","syncAllSurveys","siteId","force","syncOnSites","syncAllSurveysFunc","_this","_asyncToGenerator","entries","getAllData","promises","map","_ref","entry","result","syncSurvey","surveyid","userid","syncSurveyIfNeeded","updated","trigger","AUTO_SYNCED","warnings","_x","apply","arguments","Promise","all","_this2","syncId","needed","isSyncNeeded","_this3","site","getSite","getId","getUserId","currentSyncPromise","getOngoingSync","logger","debug","syncPromise","performSyncSurvey","addOngoingSync","_this4","ignoreErrors","syncActivity","COMPONENT","answersNumber","data","getSurveyData","answers","length","_unused","isOnline","courseId","courseid","submitAnswersOnline","deleteSurveyAnswers","error","isWebServiceError","addOfflineDataDeletedWarning","name","invalidateSurveyData","module","getModuleBasicInfoByInstance","prefetchAfterUpdate","instance","undefined","setSyncTime","_class","factory","ɵfac","providedIn","AddonModSurveySync"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/survey/services/survey-sync.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreNetworkError } from '@classes/errors/network-error';\nimport { CoreCourseActivitySyncBaseProvider } from '@features/course/classes/activity-sync';\nimport { CoreSyncResult } from '@services/sync';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModSurveyPrefetchHandler } from './handlers/prefetch';\nimport { AddonModSurvey, AddonModSurveyProvider } from './survey';\nimport { AddonModSurveyAnswersDBRecordFormatted, AddonModSurveyOffline } from './survey-offline';\n\n/**\n * Service to sync surveys.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonModSurveySyncProvider extends CoreCourseActivitySyncBaseProvider<AddonModSurveySyncResult> {\n\n    static readonly AUTO_SYNCED = 'addon_mod_survey_autom_synced';\n\n    protected componentTranslatableString = 'survey';\n\n    constructor() {\n        super('AddonModSurveySyncProvider');\n    }\n\n    /**\n     * Get the ID of a survey sync.\n     *\n     * @param surveyId Survey ID.\n     * @param userId User the answers belong to.\n     * @returns Sync ID.\n     * @protected\n     */\n    getSyncId(surveyId: number, userId: number): string {\n        return surveyId + '#' + userId;\n    }\n\n    /**\n     * Try to synchronize all the surveys in a certain site or in all sites.\n     *\n     * @param siteId Site ID to sync. If not defined, sync all sites.\n     * @param force Wether to force sync not depending on last execution.\n     * @returns Promise resolved if sync is successful, rejected if sync fails.\n     */\n    syncAllSurveys(siteId?: string, force?: boolean): Promise<void> {\n        return this.syncOnSites('all surveys', (siteId) => this.syncAllSurveysFunc(!!force, siteId), siteId);\n    }\n\n    /**\n     * Sync all pending surveys on a site.\n     *\n     * @param force Wether to force sync not depending on last execution.\n     * @param siteId Site ID to sync.\n     * @returns Promise resolved if sync is successful, rejected if sync fails.\n     */\n    protected async syncAllSurveysFunc(force: boolean, siteId: string): Promise<void> {\n        // Get all survey answers pending to be sent in the site.\n        const entries = await AddonModSurveyOffline.getAllData(siteId);\n\n        // Sync all surveys.\n        const promises = entries.map(async (entry) => {\n            const result = await (force\n                ? this.syncSurvey(entry.surveyid, entry.userid, siteId)\n                : this.syncSurveyIfNeeded(entry.surveyid, entry.userid, siteId));\n\n            if (result && result.updated) {\n                // Sync successful, send event.\n                CoreEvents.trigger(AddonModSurveySyncProvider.AUTO_SYNCED, {\n                    surveyId: entry.surveyid,\n                    userId: entry.userid,\n                    warnings: result.warnings,\n                }, siteId);\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Sync a survey only if a certain time has passed since the last time.\n     *\n     * @param surveyId Survey ID.\n     * @param userId User the answers belong to.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the survey is synced or if it doesn't need to be synced.\n     */\n    async syncSurveyIfNeeded(surveyId: number, userId: number, siteId?: string): Promise<AddonModSurveySyncResult | undefined> {\n        const syncId = this.getSyncId(surveyId, userId);\n\n        const needed = await this.isSyncNeeded(syncId, siteId);\n        if (needed) {\n            return this.syncSurvey(surveyId, userId, siteId);\n        }\n    }\n\n    /**\n     * Synchronize a survey.\n     *\n     * @param surveyId Survey ID.\n     * @param userId User the answers belong to. If not defined, current user.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    async syncSurvey(surveyId: number, userId?: number, siteId?: string): Promise<AddonModSurveySyncResult> {\n        const site = await CoreSites.getSite(siteId);\n        siteId = site.getId();\n        userId = userId || site.getUserId();\n\n        const syncId = this.getSyncId(surveyId, userId);\n        const currentSyncPromise = this.getOngoingSync(syncId, siteId);\n\n        if (currentSyncPromise) {\n            // There's already a sync ongoing for this site, return the promise.\n            return currentSyncPromise;\n        }\n\n        this.logger.debug(`Try to sync survey '${surveyId}' for user '${userId}'`);\n\n        // Get offline events.\n        const syncPromise = this.performSyncSurvey(surveyId, userId, siteId);\n\n        return this.addOngoingSync(syncId, syncPromise, siteId);\n    }\n\n    /**\n     * Perform the survey sync.\n     *\n     * @param surveyId Survey ID.\n     * @param userId User the answers belong to. If not defined, current user.\n     * @param siteId Site ID.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    protected async performSyncSurvey(surveyId: number, userId: number, siteId: string): Promise<AddonModSurveySyncResult> {\n        const result: AddonModSurveySyncResult = {\n            warnings: [],\n            updated: false,\n        };\n\n        // Sync offline logs.\n        CoreUtils.ignoreErrors(CoreCourseLogHelper.syncActivity(AddonModSurveyProvider.COMPONENT, surveyId, siteId));\n\n        let answersNumber = 0;\n        let data: AddonModSurveyAnswersDBRecordFormatted | undefined;\n        try {\n            // Get answers to be sent.\n            data = await AddonModSurveyOffline.getSurveyData(surveyId, siteId, userId);\n\n            answersNumber = data.answers.length;\n        } catch {\n            // Ignore errors.\n        }\n\n        if (answersNumber > 0 && data) {\n            if (!CoreNetwork.isOnline()) {\n                // Cannot sync in offline.\n                throw new CoreNetworkError();\n            }\n\n            result.courseId = data.courseid;\n\n            // Send the answers.\n            try {\n                await AddonModSurvey.submitAnswersOnline(surveyId, data.answers, siteId);\n\n                result.updated = true;\n\n                // Answers sent, delete them.\n                await AddonModSurveyOffline.deleteSurveyAnswers(surveyId, siteId, userId);\n            } catch (error) {\n                if (!CoreUtils.isWebServiceError(error)) {\n                    // Local error, reject.\n                    throw error;\n                }\n\n                // The WebService has thrown an error, this means that answers cannot be submitted. Delete them.\n                result.updated = true;\n\n                await AddonModSurveyOffline.deleteSurveyAnswers(surveyId, siteId, userId);\n\n                // Answers deleted, add a warning.\n                this.addOfflineDataDeletedWarning(result.warnings, data.name, error);\n            }\n\n            if (result.courseId) {\n                await AddonModSurvey.invalidateSurveyData(result.courseId, siteId);\n\n                // Data has been sent to server, update survey data.\n                const module = await CoreCourse.getModuleBasicInfoByInstance(surveyId, 'survey', { siteId });\n\n                CoreUtils.ignoreErrors(\n                    this.prefetchAfterUpdate(AddonModSurveyPrefetchHandler.instance, module, result.courseId, undefined, siteId),\n                );\n            }\n        }\n\n        const syncId = this.getSyncId(surveyId, userId);\n        // Sync finished, set sync time.\n        CoreUtils.ignoreErrors(this.setSyncTime(syncId, siteId));\n\n        return result;\n    }\n\n}\nexport const AddonModSurveySync = makeSingleton(AddonModSurveySyncProvider);\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [AddonModSurveySyncProvider.AUTO_SYNCED]: AddonModSurveyAutoSyncData;\n    }\n\n}\n\n/**\n * Data returned by a assign sync.\n */\nexport type AddonModSurveySyncResult = CoreSyncResult & {\n    courseId?: number; // Course the survey belongs to (if known).\n};\n\n/**\n * Data passed to AUTO_SYNCED event.\n */\nexport type AddonModSurveyAutoSyncData = {\n    surveyId: number;\n    warnings: string[];\n    userId: number;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}