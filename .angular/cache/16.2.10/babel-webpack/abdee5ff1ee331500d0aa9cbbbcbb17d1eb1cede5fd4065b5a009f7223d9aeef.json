{"ast":null,"code":"var _class;\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Helper to store some temporary data for file submission.\n *\n * It uses siteId and component name to index the files.\n * Every component can provide a File area identifier to indentify every file list on the session.\n * This value can be the activity id or a mix of name and numbers.\n */\nexport class CoreFileSessionProvider {\n  constructor() {\n    this.files = {};\n  }\n  /**\n   * Add a file to the session.\n   *\n   * @param component Component Name.\n   * @param id File area identifier.\n   * @param file File to add.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  addFile(component, id, file, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    this.initFileArea(component, id, siteId);\n    this.files[siteId][component][id].push(file);\n  }\n  /**\n   * Clear files stored in session.\n   *\n   * @param component Component Name.\n   * @param id File area identifier.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  clearFiles(component, id, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    if (this.files[siteId] && this.files[siteId][component] && this.files[siteId][component][id]) {\n      this.files[siteId][component][id] = [];\n    }\n  }\n  /**\n   * Get files stored in session.\n   *\n   * @param component Component Name.\n   * @param id File area identifier.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Array of files in session.\n   */\n  getFiles(component, id, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    if (this.files[siteId] && this.files[siteId][component] && this.files[siteId][component][id]) {\n      return this.files[siteId][component][id];\n    }\n    return [];\n  }\n  /**\n   * Initializes the filearea to store the file.\n   *\n   * @param component Component Name.\n   * @param id File area identifier.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  initFileArea(component, id, siteId) {\n    if (!this.files[siteId]) {\n      this.files[siteId] = {};\n    }\n    if (!this.files[siteId][component]) {\n      this.files[siteId][component] = {};\n    }\n    if (!this.files[siteId][component][id]) {\n      this.files[siteId][component][id] = [];\n    }\n  }\n  /**\n   * Remove a file stored in session.\n   *\n   * @param component Component Name.\n   * @param id File area identifier.\n   * @param file File to remove. The instance should be exactly the same as the one stored in session.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  removeFile(component, id, file, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    if (this.files[siteId] && this.files[siteId][component] && this.files[siteId][component][id]) {\n      const position = this.files[siteId][component][id].indexOf(file);\n      if (position != -1) {\n        this.files[siteId][component][id].splice(position, 1);\n      }\n    }\n  }\n  /**\n   * Remove a file stored in session.\n   *\n   * @param component Component Name.\n   * @param id File area identifier.\n   * @param index Position of the file to remove.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  removeFileByIndex(component, id, index, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    if (this.files[siteId] && this.files[siteId][component] && this.files[siteId][component][id] && index >= 0 && index < this.files[siteId][component][id].length) {\n      this.files[siteId][component][id].splice(index, 1);\n    }\n  }\n  /**\n   * Set a group of files in the session.\n   *\n   * @param component Component Name.\n   * @param id File area identifier.\n   * @param newFiles Files to set.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  setFiles(component, id, newFiles, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    this.initFileArea(component, id, siteId);\n    this.files[siteId][component][id] = newFiles;\n  }\n}\n_class = CoreFileSessionProvider;\n_class.ɵfac = function CoreFileSessionProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreFileSession = makeSingleton(CoreFileSessionProvider);","map":{"version":3,"names":["CoreSites","makeSingleton","CoreFileSessionProvider","constructor","files","addFile","component","id","file","siteId","getCurrentSiteId","initFileArea","push","clearFiles","getFiles","removeFile","position","indexOf","splice","removeFileByIndex","index","length","setFiles","newFiles","factory","ɵfac","providedIn","CoreFileSession"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/file-session.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreFileEntry } from '@services/file-helper';\n\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Helper to store some temporary data for file submission.\n *\n * It uses siteId and component name to index the files.\n * Every component can provide a File area identifier to indentify every file list on the session.\n * This value can be the activity id or a mix of name and numbers.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreFileSessionProvider {\n\n    protected files: {[siteId: string]: {[component: string]: {[id: string]: CoreFileEntry[]}}} = {};\n\n    /**\n     * Add a file to the session.\n     *\n     * @param component Component Name.\n     * @param id File area identifier.\n     * @param file File to add.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    addFile(component: string, id: string | number, file: CoreFileEntry, siteId?: string): void {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        this.initFileArea(component, id, siteId);\n\n        this.files[siteId][component][id].push(file);\n    }\n\n    /**\n     * Clear files stored in session.\n     *\n     * @param component Component Name.\n     * @param id File area identifier.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    clearFiles(component: string, id: string | number, siteId?: string): void {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n        if (this.files[siteId] && this.files[siteId][component] && this.files[siteId][component][id]) {\n            this.files[siteId][component][id] = [];\n        }\n    }\n\n    /**\n     * Get files stored in session.\n     *\n     * @param component Component Name.\n     * @param id File area identifier.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Array of files in session.\n     */\n    getFiles(component: string, id: string | number, siteId?: string): CoreFileEntry[] {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n        if (this.files[siteId] && this.files[siteId][component] && this.files[siteId][component][id]) {\n            return this.files[siteId][component][id];\n        }\n\n        return [];\n    }\n\n    /**\n     * Initializes the filearea to store the file.\n     *\n     * @param component Component Name.\n     * @param id File area identifier.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    protected initFileArea(component: string, id: string | number, siteId: string): void {\n        if (!this.files[siteId]) {\n            this.files[siteId] = {};\n        }\n\n        if (!this.files[siteId][component]) {\n            this.files[siteId][component] = {};\n        }\n\n        if (!this.files[siteId][component][id]) {\n            this.files[siteId][component][id] = [];\n        }\n    }\n\n    /**\n     * Remove a file stored in session.\n     *\n     * @param component Component Name.\n     * @param id File area identifier.\n     * @param file File to remove. The instance should be exactly the same as the one stored in session.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    removeFile(component: string, id: string | number, file: CoreFileEntry, siteId?: string): void {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n        if (this.files[siteId] && this.files[siteId][component] && this.files[siteId][component][id]) {\n            const position = this.files[siteId][component][id].indexOf(file);\n            if (position != -1) {\n                this.files[siteId][component][id].splice(position, 1);\n            }\n        }\n    }\n\n    /**\n     * Remove a file stored in session.\n     *\n     * @param component Component Name.\n     * @param id File area identifier.\n     * @param index Position of the file to remove.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    removeFileByIndex(component: string, id: string | number, index: number, siteId?: string): void {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n        if (this.files[siteId] && this.files[siteId][component] && this.files[siteId][component][id] && index >= 0 &&\n            index < this.files[siteId][component][id].length) {\n            this.files[siteId][component][id].splice(index, 1);\n        }\n    }\n\n    /**\n     * Set a group of files in the session.\n     *\n     * @param component Component Name.\n     * @param id File area identifier.\n     * @param newFiles Files to set.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    setFiles(component: string, id: string | number, newFiles: CoreFileEntry[], siteId?: string): void {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        this.initFileArea(component, id, siteId);\n\n        this.files[siteId][component][id] = newFiles;\n    }\n\n}\n\nexport const CoreFileSession = makeSingleton(CoreFileSessionProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}