{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreConstants } from '@/core/constants';\nimport { CoreFile } from '@services/file';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites } from '@services/sites';\nimport { CoreWS } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { CoreStylesService } from '@features/styles/services/styles';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreUtils } from '@services/utils/utils';\nimport * as i0 from \"@angular/core\";\nconst COMPONENT = 'mmaRemoteStyles';\n/**\n * Service to handle remote themes.\n * A remote theme is a CSS sheet stored in the site that allows customising the Mobile app.\n */\nexport class AddonRemoteThemesHandlerService {\n  constructor() {\n    this.name = 'mobilecssurl';\n    this.priority = 1000;\n    this.logger = CoreLogger.getInstance('AddonRemoteThemes');\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isEnabled(siteId, config) {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * @inheritDoc\n   */\n  getStyle(siteId, config) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (siteId == CoreStylesService.TMP_SITE_ID) {\n        if (!config) {\n          return '';\n        }\n        // Config received, it's a temp site.\n        return _this.getRemoteStyles(config.mobilecssurl);\n      }\n      const site = yield CoreSites.getSite(siteId);\n      const infos = site.getInfo();\n      if (!(infos !== null && infos !== void 0 && infos.mobilecssurl)) {\n        if ((infos === null || infos === void 0 ? void 0 : infos.mobilecssurl) === '') {\n          // CSS URL is empty. Delete downloaded files (if any).\n          CoreFilepool.removeFilesByComponent(siteId, COMPONENT, 1);\n        }\n        return '';\n      }\n      let fileUrl = infos.mobilecssurl;\n      if (CoreFile.isAvailable()) {\n        // The file system is available. Download the file and remove old CSS files if needed.\n        fileUrl = yield _this.downloadFileAndRemoveOld(siteId, fileUrl);\n      }\n      _this.logger.debug('Loading styles from: ', fileUrl);\n      // Get the CSS content using HTTP because we will treat the styles before saving them in the file.\n      const style = yield _this.getRemoteStyles(fileUrl);\n      if (style != '') {\n        // Treat the CSS.\n        CoreUtils.ignoreErrors(CoreFilepool.treatCSSCode(siteId, infos.mobilecssurl, style, COMPONENT, 1));\n      }\n      return style;\n    })();\n  }\n  /**\n   * Get styles from the url.\n   *\n   * @param url Url to get the code from.\n   * @returns The styles.\n   */\n  getRemoteStyles(url) {\n    return _asyncToGenerator(function* () {\n      if (!url) {\n        return '';\n      }\n      return CoreWS.getText(url);\n    })();\n  }\n  /**\n   * Downloads a CSS file and remove old files if needed.\n   *\n   * @param siteId Site ID.\n   * @param url File URL.\n   * @returns Promise resolved when the file is downloaded.\n   */\n  downloadFileAndRemoveOld(siteId, url) {\n    return _asyncToGenerator(function* () {\n      try {\n        // Check if the file is downloaded.\n        const state = yield CoreFilepool.getFileStateByUrl(siteId, url);\n        if (state == CoreConstants.NOT_DOWNLOADED) {\n          // File not downloaded, URL has changed or first time. Delete downloaded CSS files.\n          yield CoreFilepool.removeFilesByComponent(siteId, COMPONENT, 1);\n        }\n      } catch (_unused) {\n        // An error occurred while getting state (shouldn't happen). Don't delete downloaded file.\n      }\n      return CoreFilepool.downloadUrl(siteId, url, false, COMPONENT, 1);\n    })();\n  }\n}\n_class = AddonRemoteThemesHandlerService;\n_class.ɵfac = function AddonRemoteThemesHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonRemoteThemesHandler = makeSingleton(AddonRemoteThemesHandlerService);","map":{"version":3,"names":["CoreConstants","CoreFile","CoreFilepool","CoreSites","CoreWS","makeSingleton","CoreStylesService","CoreLogger","CoreUtils","COMPONENT","AddonRemoteThemesHandlerService","constructor","name","priority","logger","getInstance","isEnabled","siteId","config","_asyncToGenerator","getStyle","_this","TMP_SITE_ID","getRemoteStyles","mobilecssurl","site","getSite","infos","getInfo","removeFilesByComponent","fileUrl","isAvailable","downloadFileAndRemoveOld","debug","style","ignoreErrors","treatCSSCode","url","getText","state","getFileStateByUrl","NOT_DOWNLOADED","_unused","downloadUrl","factory","ɵfac","providedIn","AddonRemoteThemesHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/remotethemes/services/remotethemes-handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreSitePublicConfigResponse } from '@classes/sites/unauthenticated-site';\nimport { CoreFile } from '@services/file';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites } from '@services/sites';\nimport { CoreWS } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { CoreStyleHandler, CoreStylesService } from '@features/styles/services/styles';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreUtils } from '@services/utils/utils';\n\nconst COMPONENT = 'mmaRemoteStyles';\n\n/**\n * Service to handle remote themes.\n * A remote theme is a CSS sheet stored in the site that allows customising the Mobile app.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonRemoteThemesHandlerService implements CoreStyleHandler {\n\n    protected logger: CoreLogger;\n\n    name = 'mobilecssurl';\n    priority = 1000;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('AddonRemoteThemes');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async isEnabled(siteId: string, config?: CoreSitePublicConfigResponse): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    async getStyle(siteId: string, config?: CoreSitePublicConfigResponse): Promise<string> {\n        if (siteId == CoreStylesService.TMP_SITE_ID) {\n            if (!config) {\n                return '';\n            }\n\n            // Config received, it's a temp site.\n            return this.getRemoteStyles(config.mobilecssurl);\n        }\n\n        const site = await CoreSites.getSite(siteId);\n        const infos = site.getInfo();\n\n        if (!infos?.mobilecssurl) {\n            if (infos?.mobilecssurl === '') {\n                // CSS URL is empty. Delete downloaded files (if any).\n                CoreFilepool.removeFilesByComponent(siteId, COMPONENT, 1);\n            }\n\n            return '';\n        }\n\n        let fileUrl = infos.mobilecssurl;\n\n        if (CoreFile.isAvailable()) {\n            // The file system is available. Download the file and remove old CSS files if needed.\n            fileUrl = await this.downloadFileAndRemoveOld(siteId, fileUrl);\n        }\n\n        this.logger.debug('Loading styles from: ', fileUrl);\n\n        // Get the CSS content using HTTP because we will treat the styles before saving them in the file.\n        const style = await this.getRemoteStyles(fileUrl);\n\n        if (style != '') {\n            // Treat the CSS.\n            CoreUtils.ignoreErrors(\n                CoreFilepool.treatCSSCode(siteId, infos.mobilecssurl, style, COMPONENT, 1),\n            );\n        }\n\n        return style;\n    }\n\n    /**\n     * Get styles from the url.\n     *\n     * @param url Url to get the code from.\n     * @returns The styles.\n     */\n    protected async getRemoteStyles(url?: string): Promise<string> {\n        if (!url) {\n            return '';\n        }\n\n        return CoreWS.getText(url);\n    }\n\n    /**\n     * Downloads a CSS file and remove old files if needed.\n     *\n     * @param siteId Site ID.\n     * @param url File URL.\n     * @returns Promise resolved when the file is downloaded.\n     */\n    protected async downloadFileAndRemoveOld(siteId: string, url: string): Promise<string> {\n\n        try {\n            // Check if the file is downloaded.\n            const state = await CoreFilepool.getFileStateByUrl(siteId, url);\n\n            if (state == CoreConstants.NOT_DOWNLOADED) {\n                // File not downloaded, URL has changed or first time. Delete downloaded CSS files.\n                await CoreFilepool.removeFilesByComponent(siteId, COMPONENT, 1);\n            }\n        } catch {\n            // An error occurred while getting state (shouldn't happen). Don't delete downloaded file.\n        }\n\n        return CoreFilepool.downloadUrl(siteId, url, false, COMPONENT, 1);\n    }\n\n}\n\nexport const AddonRemoteThemesHandler = makeSingleton(AddonRemoteThemesHandlerService);\n"],"mappings":";;AAeA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAA2BC,iBAAiB,QAAQ,kCAAkC;AACtF,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,SAAS,QAAQ,uBAAuB;;AAEjD,MAAMC,SAAS,GAAG,iBAAiB;AAEnC;;;;AAKA,OAAM,MAAOC,+BAA+B;EAOxCC,YAAA;IAHA,KAAAC,IAAI,GAAG,cAAc;IACrB,KAAAC,QAAQ,GAAG,IAAI;IAGX,IAAI,CAACC,MAAM,GAAGP,UAAU,CAACQ,WAAW,CAAC,mBAAmB,CAAC;EAC7D;EAEA;;;EAGA;EACMC,SAASA,CAACC,MAAc,EAAEC,MAAqC;IAAA,OAAAC,iBAAA;MACjE,OAAO,IAAI;IAAC;EAChB;EAEA;;;EAGMC,QAAQA,CAACH,MAAc,EAAEC,MAAqC;IAAA,IAAAG,KAAA;IAAA,OAAAF,iBAAA;MAChE,IAAIF,MAAM,IAAIX,iBAAiB,CAACgB,WAAW,EAAE;QACzC,IAAI,CAACJ,MAAM,EAAE;UACT,OAAO,EAAE;;QAGb;QACA,OAAOG,KAAI,CAACE,eAAe,CAACL,MAAM,CAACM,YAAY,CAAC;;MAGpD,MAAMC,IAAI,SAAStB,SAAS,CAACuB,OAAO,CAACT,MAAM,CAAC;MAC5C,MAAMU,KAAK,GAAGF,IAAI,CAACG,OAAO,EAAE;MAE5B,IAAI,EAACD,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEH,YAAY,GAAE;QACtB,IAAI,CAAAG,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEH,YAAY,MAAK,EAAE,EAAE;UAC5B;UACAtB,YAAY,CAAC2B,sBAAsB,CAACZ,MAAM,EAAER,SAAS,EAAE,CAAC,CAAC;;QAG7D,OAAO,EAAE;;MAGb,IAAIqB,OAAO,GAAGH,KAAK,CAACH,YAAY;MAEhC,IAAIvB,QAAQ,CAAC8B,WAAW,EAAE,EAAE;QACxB;QACAD,OAAO,SAAST,KAAI,CAACW,wBAAwB,CAACf,MAAM,EAAEa,OAAO,CAAC;;MAGlET,KAAI,CAACP,MAAM,CAACmB,KAAK,CAAC,uBAAuB,EAAEH,OAAO,CAAC;MAEnD;MACA,MAAMI,KAAK,SAASb,KAAI,CAACE,eAAe,CAACO,OAAO,CAAC;MAEjD,IAAII,KAAK,IAAI,EAAE,EAAE;QACb;QACA1B,SAAS,CAAC2B,YAAY,CAClBjC,YAAY,CAACkC,YAAY,CAACnB,MAAM,EAAEU,KAAK,CAACH,YAAY,EAAEU,KAAK,EAAEzB,SAAS,EAAE,CAAC,CAAC,CAC7E;;MAGL,OAAOyB,KAAK;IAAC;EACjB;EAEA;;;;;;EAMgBX,eAAeA,CAACc,GAAY;IAAA,OAAAlB,iBAAA;MACxC,IAAI,CAACkB,GAAG,EAAE;QACN,OAAO,EAAE;;MAGb,OAAOjC,MAAM,CAACkC,OAAO,CAACD,GAAG,CAAC;IAAC;EAC/B;EAEA;;;;;;;EAOgBL,wBAAwBA,CAACf,MAAc,EAAEoB,GAAW;IAAA,OAAAlB,iBAAA;MAEhE,IAAI;QACA;QACA,MAAMoB,KAAK,SAASrC,YAAY,CAACsC,iBAAiB,CAACvB,MAAM,EAAEoB,GAAG,CAAC;QAE/D,IAAIE,KAAK,IAAIvC,aAAa,CAACyC,cAAc,EAAE;UACvC;UACA,MAAMvC,YAAY,CAAC2B,sBAAsB,CAACZ,MAAM,EAAER,SAAS,EAAE,CAAC,CAAC;;OAEtE,CAAC,OAAAiC,OAAA,EAAM;QACJ;MAAA;MAGJ,OAAOxC,YAAY,CAACyC,WAAW,CAAC1B,MAAM,EAAEoB,GAAG,EAAE,KAAK,EAAE5B,SAAS,EAAE,CAAC,CAAC;IAAC;EACtE;;SAtGSC,+BAA+B;;mBAA/BA,MAA+B;AAAA;;SAA/BA,MAA+B;EAAAkC,OAAA,EAA/BlC,MAA+B,CAAAmC,IAAA;EAAAC,UAAA,EADlB;AAAM;AA2GhC,OAAO,MAAMC,wBAAwB,GAAG1C,aAAa,CAACK,+BAA+B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}