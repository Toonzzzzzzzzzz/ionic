{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreRatingOffline } from './rating-offline';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'CoreRating:';\n/**\n * Service to handle ratings.\n */\nexport class CoreRatingProvider {\n  /**\n   * Add a rating to an item.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemId Item id. Example: forum post id.\n   * @param itemSetId Item set id. Example: forum discussion id.\n   * @param courseId Course id.\n   * @param scaleId Scale id.\n   * @param rating Rating value. Use CoreRatingProvider.UNSET_RATING to delete rating.\n   * @param ratedUserId Rated user id.\n   * @param aggregateMethod Aggregate method.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the aggregated rating or void if stored offline.\n   */\n  addRating(component, ratingArea, contextLevel, instanceId, itemId, itemSetId, courseId, scaleId, rating, ratedUserId, aggregateMethod, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Convenience function to store a rating to be synchronized later.\n      const storeOffline = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* () {\n          yield CoreRatingOffline.addRating(component, ratingArea, contextLevel, instanceId, itemId, itemSetId, courseId, scaleId, rating, ratedUserId, aggregateMethod, siteId);\n          CoreEvents.trigger(CoreRatingProvider.RATING_SAVED_EVENT, {\n            component,\n            ratingArea,\n            contextLevel,\n            instanceId,\n            itemSetId,\n            itemId\n          }, siteId);\n        });\n        return function storeOffline() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      if (!CoreNetwork.isOnline()) {\n        // App is offline, store the action.\n        return storeOffline();\n      }\n      try {\n        yield CoreRatingOffline.deleteRating(component, ratingArea, contextLevel, instanceId, itemId, siteId);\n        const response = yield _this.addRatingOnline(component, ratingArea, contextLevel, instanceId, itemId, scaleId, rating, ratedUserId, aggregateMethod, siteId);\n        return response;\n      } catch (error) {\n        if (CoreUtils.isWebServiceError(error)) {\n          // The WebService has thrown an error or offline not supported, reject.\n          return Promise.reject(error);\n        }\n        // Couldn't connect to server, store offline.\n        return storeOffline();\n      }\n    })();\n  }\n  /**\n   * Add a rating to an item. It will fail if offline or cannot connect.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemId Item id. Example: forum post id.\n   * @param scaleId Scale id.\n   * @param rating Rating value. Use CoreRatingProvider.UNSET_RATING to delete rating.\n   * @param ratedUserId Rated user id.\n   * @param aggregateMethod Aggregate method.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the aggregated rating.\n   */\n  addRatingOnline(component, ratingArea, contextLevel, instanceId, itemId, scaleId, rating, ratedUserId, aggregateMethod, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        component,\n        ratingarea: ratingArea,\n        itemid: itemId,\n        scaleid: scaleId,\n        rating,\n        rateduserid: ratedUserId,\n        aggregation: aggregateMethod\n      };\n      const response = yield site.write('core_rating_add_rating', params);\n      yield _this2.invalidateRatingItems(contextLevel, instanceId, component, ratingArea, itemId, scaleId);\n      CoreEvents.trigger(CoreRatingProvider.AGGREGATE_CHANGED_EVENT, {\n        contextLevel,\n        instanceId,\n        component,\n        ratingArea,\n        itemId,\n        aggregate: response.aggregate,\n        count: response.count\n      });\n      return response;\n    })();\n  }\n  /**\n   * Get item ratings.\n   *\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating area. Example: \"post\".\n   * @param itemId Item id. Example: forum post id.\n   * @param scaleId Scale id.\n   * @param sort Sort field.\n   * @param courseId Course id. Used for fetching user profiles.\n   * @param siteId Site ID. If not defined, current site.\n   * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n   * @returns Promise resolved with the list of ratings.\n   */\n  getItemRatings(contextLevel, instanceId, component, ratingArea, itemId, scaleId, sort = 'timemodified', courseId, siteId, ignoreCache = false) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        component,\n        ratingarea: ratingArea,\n        itemid: itemId,\n        scaleid: scaleId,\n        sort\n      };\n      const preSets = {\n        cacheKey: _this3.getItemRatingsCacheKey(contextLevel, instanceId, component, ratingArea, itemId, scaleId, sort),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      };\n      if (ignoreCache) {\n        preSets.getFromCache = false;\n        preSets.emergencyCache = false;\n      }\n      const response = yield site.read('core_rating_get_item_ratings', params, preSets);\n      if (!site.isVersionGreaterEqualThan(['3.6.5', '3.7.1', '3.8'])) {\n        // MDL-65042 We need to fetch profiles because the returned profile pictures are incorrect.\n        const promises = response.ratings.map(rating => CoreUser.getProfile(rating.userid, courseId, true, site.id).then(user => {\n          rating.userpictureurl = user.profileimageurl || '';\n          return;\n        }).catch(() => {\n          // Ignore error.\n          rating.userpictureurl = '';\n        }));\n        yield Promise.all(promises);\n      }\n      return response.ratings;\n    })();\n  }\n  /**\n   * Invalidate item ratings.\n   *\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating area. Example: \"post\".\n   * @param itemId Item id. Example: forum post id.\n   * @param scaleId Scale id.\n   * @param sort Sort field.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateRatingItems(contextLevel, instanceId, component, ratingArea, itemId, scaleId, sort = 'timemodified', siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const key = _this4.getItemRatingsCacheKey(contextLevel, instanceId, component, ratingArea, itemId, scaleId, sort);\n      yield site.invalidateWsCacheForKey(key);\n    })();\n  }\n  /**\n   * Check if rating is disabled in a certain site.\n   *\n   * @param site Site. If not defined, use current site.\n   * @returns Whether it's disabled.\n   */\n  isRatingDisabledInSite(site) {\n    var _site;\n    site = site || CoreSites.getCurrentSite();\n    return !!((_site = site) !== null && _site !== void 0 && _site.isFeatureDisabled('NoDelegate_CoreRating'));\n  }\n  /**\n   * Check if rating is disabled in a certain site.\n   *\n   * @param siteId Site Id. If not defined, use current site.\n   * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n   */\n  isRatingDisabled(siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this5.isRatingDisabledInSite(site);\n    })();\n  }\n  /**\n   * Convenience function to merge two or more rating infos of the same instance.\n   *\n   * @param ratingInfos Array of rating infos.\n   * @returns Merged rating info or undefined.\n   */\n  mergeRatingInfos(ratingInfos) {\n    let result;\n    const scales = {};\n    const ratings = {};\n    ratingInfos.forEach(ratingInfo => {\n      if (!ratingInfo) {\n        // Skip null rating infos.\n        return;\n      }\n      if (!result) {\n        result = Object.assign({}, ratingInfo);\n      }\n      (ratingInfo.scales || []).forEach(scale => {\n        scales[scale.id] = scale;\n      });\n      (ratingInfo.ratings || []).forEach(rating => {\n        ratings[rating.itemid] = rating;\n      });\n    });\n    if (result) {\n      result.scales = CoreUtils.objectToArray(scales);\n      result.ratings = CoreUtils.objectToArray(ratings);\n    }\n    return result;\n  }\n  /**\n   * Prefetch individual ratings.\n   *\n   * This function should be called from the prefetch handler of activities with ratings.\n   *\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Instance Id.\n   * @param scaleId Scale Id.\n   * @param courseId Course id. Used for prefetching user profiles.\n   * @param ratingInfo Rating info returned by web services.\n   * @param siteId Site id. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  prefetchRatings(contextLevel, instanceId, scaleId, courseId, ratingInfo, siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!ratingInfo || !ratingInfo.ratings) {\n        return;\n      }\n      const site = yield CoreSites.getSite(siteId);\n      const promises = ratingInfo.ratings.map(item => _this6.getItemRatings(contextLevel, instanceId, ratingInfo.component, ratingInfo.ratingarea, item.itemid, scaleId, undefined, courseId, site.id, true));\n      const ratingsResults = yield Promise.all(promises);\n      if (!site.isVersionGreaterEqualThan(['3.6.5', '3.7.1', '3.8'])) {\n        const ratings = [].concat.apply([], ratingsResults);\n        const userIds = ratings.map(rating => rating.userid);\n        yield CoreUser.prefetchProfiles(userIds, courseId, site.id);\n      }\n    })();\n  }\n  /**\n   * Get cache key for rating items WS calls.\n   *\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Instance Id.\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating area. Example: \"post\".\n   * @param itemId Item id. Example: forum post id.\n   * @param scaleId Scale Id.\n   * @param sort Sort field.\n   * @returns Cache key.\n   */\n  getItemRatingsCacheKey(contextLevel, instanceId, component, ratingArea, itemId, scaleId, sort) {\n    return `${ROOT_CACHE_KEY}${contextLevel}:${instanceId}:${component}:${ratingArea}:${itemId}:${scaleId}:${sort}`;\n  }\n}\n_class = CoreRatingProvider;\n_class.AGGREGATE_NONE = 0;\n// No ratings.\n_class.AGGREGATE_AVERAGE = 1;\n_class.AGGREGATE_COUNT = 2;\n_class.AGGREGATE_MAXIMUM = 3;\n_class.AGGREGATE_MINIMUM = 4;\n_class.AGGREGATE_SUM = 5;\n_class.UNSET_RATING = -999;\n_class.AGGREGATE_CHANGED_EVENT = 'core_rating_aggregate_changed';\n_class.RATING_SAVED_EVENT = 'core_rating_rating_saved';\n_class.ɵfac = function CoreRatingProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreRating = makeSingleton(CoreRatingProvider);","map":{"version":3,"names":["CoreSite","CoreUser","CoreNetwork","CoreSites","CoreUtils","makeSingleton","CoreEvents","CoreRatingOffline","ROOT_CACHE_KEY","CoreRatingProvider","addRating","component","ratingArea","contextLevel","instanceId","itemId","itemSetId","courseId","scaleId","rating","ratedUserId","aggregateMethod","siteId","_this","_asyncToGenerator","getCurrentSiteId","storeOffline","_ref","trigger","RATING_SAVED_EVENT","apply","arguments","isOnline","deleteRating","response","addRatingOnline","error","isWebServiceError","Promise","reject","_this2","site","getSite","params","contextlevel","instanceid","ratingarea","itemid","scaleid","rateduserid","aggregation","write","invalidateRatingItems","AGGREGATE_CHANGED_EVENT","aggregate","count","getItemRatings","sort","ignoreCache","_this3","preSets","cacheKey","getItemRatingsCacheKey","updateFrequency","FREQUENCY_RARELY","getFromCache","emergencyCache","read","isVersionGreaterEqualThan","promises","ratings","map","getProfile","userid","id","then","user","userpictureurl","profileimageurl","catch","all","_this4","key","invalidateWsCacheForKey","isRatingDisabledInSite","_site","getCurrentSite","isFeatureDisabled","isRatingDisabled","_this5","mergeRatingInfos","ratingInfos","result","scales","forEach","ratingInfo","Object","assign","scale","objectToArray","prefetchRatings","_this6","item","undefined","ratingsResults","concat","userIds","prefetchProfiles","_class","AGGREGATE_NONE","AGGREGATE_AVERAGE","AGGREGATE_COUNT","AGGREGATE_MAXIMUM","AGGREGATE_MINIMUM","AGGREGATE_SUM","UNSET_RATING","factory","ɵfac","providedIn","CoreRating"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/rating/services/rating.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ContextLevel } from '@/core/constants';\nimport { Injectable } from '@angular/core';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreRatingOffline } from './rating-offline';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\n\nconst ROOT_CACHE_KEY = 'CoreRating:';\n\n/**\n * Service to handle ratings.\n */\n@Injectable( { providedIn: 'root' })\nexport class CoreRatingProvider {\n\n    static readonly AGGREGATE_NONE = 0; // No ratings.\n    static readonly AGGREGATE_AVERAGE = 1;\n    static readonly AGGREGATE_COUNT = 2;\n    static readonly AGGREGATE_MAXIMUM = 3;\n    static readonly AGGREGATE_MINIMUM = 4;\n    static readonly AGGREGATE_SUM = 5;\n\n    static readonly UNSET_RATING = -999;\n\n    static readonly AGGREGATE_CHANGED_EVENT = 'core_rating_aggregate_changed';\n    static readonly RATING_SAVED_EVENT = 'core_rating_rating_saved';\n\n    /**\n     * Add a rating to an item.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemId Item id. Example: forum post id.\n     * @param itemSetId Item set id. Example: forum discussion id.\n     * @param courseId Course id.\n     * @param scaleId Scale id.\n     * @param rating Rating value. Use CoreRatingProvider.UNSET_RATING to delete rating.\n     * @param ratedUserId Rated user id.\n     * @param aggregateMethod Aggregate method.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the aggregated rating or void if stored offline.\n     */\n    async addRating(\n        component: string,\n        ratingArea: string,\n        contextLevel: ContextLevel,\n        instanceId: number,\n        itemId: number,\n        itemSetId: number,\n        courseId: number,\n        scaleId: number,\n        rating: number,\n        ratedUserId: number,\n        aggregateMethod: number,\n        siteId?: string,\n    ): Promise<CoreRatingAddRatingWSResponse | void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Convenience function to store a rating to be synchronized later.\n        const storeOffline = async (): Promise<void> => {\n            await CoreRatingOffline.addRating(\n                component,\n                ratingArea,\n                contextLevel,\n                instanceId,\n                itemId,\n                itemSetId,\n                courseId,\n                scaleId,\n                rating,\n                ratedUserId,\n                aggregateMethod,\n                siteId,\n            );\n\n            CoreEvents.trigger(CoreRatingProvider.RATING_SAVED_EVENT, {\n                component,\n                ratingArea,\n                contextLevel,\n                instanceId,\n                itemSetId,\n                itemId,\n            }, siteId);\n        };\n\n        if (!CoreNetwork.isOnline()) {\n            // App is offline, store the action.\n            return storeOffline();\n        }\n\n        try {\n            await CoreRatingOffline.deleteRating(component, ratingArea, contextLevel, instanceId, itemId, siteId);\n\n            const response = await this.addRatingOnline(\n                component,\n                ratingArea,\n                contextLevel,\n                instanceId,\n                itemId,\n                scaleId,\n                rating,\n                ratedUserId,\n                aggregateMethod,\n                siteId,\n            );\n\n            return response;\n        } catch (error) {\n            if (CoreUtils.isWebServiceError(error)) {\n                // The WebService has thrown an error or offline not supported, reject.\n                return Promise.reject(error);\n            }\n\n            // Couldn't connect to server, store offline.\n            return storeOffline();\n        }\n    }\n\n    /**\n     * Add a rating to an item. It will fail if offline or cannot connect.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemId Item id. Example: forum post id.\n     * @param scaleId Scale id.\n     * @param rating Rating value. Use CoreRatingProvider.UNSET_RATING to delete rating.\n     * @param ratedUserId Rated user id.\n     * @param aggregateMethod Aggregate method.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the aggregated rating.\n     */\n    async addRatingOnline(\n        component: string,\n        ratingArea: string,\n        contextLevel: ContextLevel,\n        instanceId: number,\n        itemId: number,\n        scaleId: number,\n        rating: number,\n        ratedUserId: number,\n        aggregateMethod: number,\n        siteId?: string,\n    ): Promise<CoreRatingAddRatingWSResponse> {\n\n        const site = await CoreSites.getSite(siteId);\n        const params: CoreRatingAddRatingWSParams = {\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            component,\n            ratingarea: ratingArea,\n            itemid: itemId,\n            scaleid: scaleId,\n            rating,\n            rateduserid: ratedUserId,\n            aggregation: aggregateMethod,\n        };\n\n        const response = await site.write<CoreRatingAddRatingWSResponse>('core_rating_add_rating', params);\n\n        await this.invalidateRatingItems(contextLevel, instanceId, component, ratingArea, itemId, scaleId);\n\n        CoreEvents.trigger(CoreRatingProvider.AGGREGATE_CHANGED_EVENT, {\n            contextLevel,\n            instanceId,\n            component,\n            ratingArea,\n            itemId,\n            aggregate: response.aggregate,\n            count: response.count,\n        });\n\n        return response;\n    }\n\n    /**\n     * Get item ratings.\n     *\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating area. Example: \"post\".\n     * @param itemId Item id. Example: forum post id.\n     * @param scaleId Scale id.\n     * @param sort Sort field.\n     * @param courseId Course id. Used for fetching user profiles.\n     * @param siteId Site ID. If not defined, current site.\n     * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n     * @returns Promise resolved with the list of ratings.\n     */\n    async getItemRatings(\n        contextLevel: ContextLevel,\n        instanceId: number,\n        component: string,\n        ratingArea: string,\n        itemId: number,\n        scaleId: number,\n        sort: string = 'timemodified',\n        courseId?: number,\n        siteId?: string,\n        ignoreCache: boolean = false,\n    ): Promise<CoreRatingItemRating[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: CoreRatingGetItemRatingsWSParams = {\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            component,\n            ratingarea: ratingArea,\n            itemid: itemId,\n            scaleid: scaleId,\n            sort,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getItemRatingsCacheKey(contextLevel, instanceId, component, ratingArea, itemId, scaleId, sort),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n        };\n\n        if (ignoreCache) {\n            preSets.getFromCache = false;\n            preSets.emergencyCache = false;\n        }\n\n        const response = await site.read<CoreRatingGetItemRatingsWSResponse>('core_rating_get_item_ratings', params, preSets);\n\n        if (!site.isVersionGreaterEqualThan(['3.6.5', '3.7.1', '3.8'])) {\n            // MDL-65042 We need to fetch profiles because the returned profile pictures are incorrect.\n            const promises = response.ratings.map((rating: CoreRatingItemRating) =>\n                CoreUser.getProfile(rating.userid, courseId, true, site.id).then((user) => {\n                    rating.userpictureurl = user.profileimageurl || '';\n\n                    return;\n                }).catch(() => {\n                    // Ignore error.\n                    rating.userpictureurl = '';\n                }));\n\n            await Promise.all(promises);\n        }\n\n        return response.ratings;\n    }\n\n    /**\n     * Invalidate item ratings.\n     *\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating area. Example: \"post\".\n     * @param itemId Item id. Example: forum post id.\n     * @param scaleId Scale id.\n     * @param sort Sort field.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateRatingItems(\n        contextLevel: ContextLevel,\n        instanceId: number,\n        component: string,\n        ratingArea: string,\n        itemId: number,\n        scaleId: number,\n        sort: string = 'timemodified',\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const key = this.getItemRatingsCacheKey(contextLevel, instanceId, component, ratingArea, itemId, scaleId, sort);\n\n        await site.invalidateWsCacheForKey(key);\n    }\n\n    /**\n     * Check if rating is disabled in a certain site.\n     *\n     * @param site Site. If not defined, use current site.\n     * @returns Whether it's disabled.\n     */\n    isRatingDisabledInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site?.isFeatureDisabled('NoDelegate_CoreRating');\n    }\n\n    /**\n     * Check if rating is disabled in a certain site.\n     *\n     * @param siteId Site Id. If not defined, use current site.\n     * @returns Promise resolved with true if disabled, rejected or resolved with false otherwise.\n     */\n    async isRatingDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.isRatingDisabledInSite(site);\n    }\n\n    /**\n     * Convenience function to merge two or more rating infos of the same instance.\n     *\n     * @param ratingInfos Array of rating infos.\n     * @returns Merged rating info or undefined.\n     */\n    mergeRatingInfos(ratingInfos: CoreRatingInfo[]): CoreRatingInfo | undefined {\n        let result: CoreRatingInfo | undefined;\n        const scales: Record<number, CoreRatingScale> = {};\n        const ratings: Record<number, CoreRatingInfoItem> = {};\n\n        ratingInfos.forEach((ratingInfo) => {\n            if (!ratingInfo) {\n                // Skip null rating infos.\n                return;\n            }\n\n            if (!result) {\n                result = Object.assign({}, ratingInfo);\n            }\n\n            (ratingInfo.scales || []).forEach((scale) => {\n                scales[scale.id] = scale;\n            });\n\n            (ratingInfo.ratings || []).forEach((rating) => {\n                ratings[rating.itemid] = rating;\n            });\n        });\n\n        if (result) {\n            result.scales = CoreUtils.objectToArray(scales);\n            result.ratings = CoreUtils.objectToArray(ratings);\n        }\n\n        return result;\n    }\n\n    /**\n     * Prefetch individual ratings.\n     *\n     * This function should be called from the prefetch handler of activities with ratings.\n     *\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Instance Id.\n     * @param scaleId Scale Id.\n     * @param courseId Course id. Used for prefetching user profiles.\n     * @param ratingInfo Rating info returned by web services.\n     * @param siteId Site id. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async prefetchRatings(\n        contextLevel: ContextLevel,\n        instanceId: number,\n        scaleId: number,\n        courseId?: number,\n        ratingInfo?: CoreRatingInfo,\n        siteId?: string,\n    ): Promise<void> {\n        if (!ratingInfo || !ratingInfo.ratings) {\n            return;\n        }\n\n        const site = await CoreSites.getSite(siteId);\n        const promises = ratingInfo.ratings.map((item) => this.getItemRatings(\n            contextLevel,\n            instanceId,\n            ratingInfo.component,\n            ratingInfo.ratingarea,\n            item.itemid,\n            scaleId,\n            undefined,\n            courseId,\n            site.id,\n            true,\n        ));\n\n        const ratingsResults = await Promise.all(promises);\n\n        if (!site.isVersionGreaterEqualThan(['3.6.5', '3.7.1', '3.8'])) {\n            const ratings: CoreRatingItemRating[] = [].concat.apply([], ratingsResults);\n\n            const userIds = ratings.map((rating) => rating.userid);\n\n            await CoreUser.prefetchProfiles(userIds, courseId, site.id);\n        }\n    }\n\n    /**\n     * Get cache key for rating items WS calls.\n     *\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Instance Id.\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating area. Example: \"post\".\n     * @param itemId Item id. Example: forum post id.\n     * @param scaleId Scale Id.\n     * @param sort Sort field.\n     * @returns Cache key.\n     */\n    protected getItemRatingsCacheKey(\n        contextLevel: ContextLevel,\n        instanceId: number,\n        component: string,\n        ratingArea: string,\n        itemId: number,\n        scaleId: number,\n        sort: string,\n    ): string {\n        return `${ROOT_CACHE_KEY}${contextLevel}:${instanceId}:${component}:${ratingArea}:${itemId}:${scaleId}:${sort}`;\n    }\n\n}\nexport const CoreRating = makeSingleton(CoreRatingProvider);\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [CoreRatingProvider.AGGREGATE_CHANGED_EVENT]: CoreRatingAggregateChangedEventData;\n        [CoreRatingProvider.RATING_SAVED_EVENT]: CoreRatingSavedEventData;\n    }\n\n}\n\n/**\n * Structure of the rating info returned by web services.\n */\nexport type CoreRatingInfo = {\n    contextid: number; // Context id.\n    component: string; // Context name.\n    ratingarea: string; // Rating area name.\n    canviewall?: boolean; // Whether the user can view all the individual ratings.\n    canviewany?: boolean; // Whether the user can view aggregate of ratings of others.\n    scales?: CoreRatingScale[]; // Different scales used information.\n    ratings?: CoreRatingInfoItem[]; // The ratings.\n};\n\n/**\n * Structure of scales in the rating info.\n */\nexport type CoreRatingScale = {\n    id: number; // Scale id.\n    courseid?: number; // Course id.\n    name?: string; // Scale name (when a real scale is used).\n    max: number; // Max value for the scale.\n    isnumeric: boolean; // Whether is a numeric scale.\n    items?: { // Scale items. Only returned for not numerical scales.\n        value: number; // Scale value/option id.\n        name: string; // Scale name.\n    }[];\n};\n\n/**\n * Structure of items in the rating info.\n */\nexport type CoreRatingInfoItem = {\n    itemid: number; // Item id.\n    scaleid?: number; // Scale id.\n    scale?: CoreRatingScale; // Added for rendering purposes.\n    userid?: number; // User who rated id.\n    aggregate?: number; // Aggregated ratings grade.\n    aggregatestr?: string; // Aggregated ratings as string.\n    aggregatelabel?: string; // The aggregation label.\n    count?: number; // Ratings count (used when aggregating).\n    rating?: number; // The rating the user gave.\n    canrate?: boolean; // Whether the user can rate the item.\n    canviewaggregate?: boolean; // Whether the user can view the aggregated grade.\n};\n\n/**\n * Structure of a rating returned by the item ratings web service.\n */\nexport type CoreRatingItemRating = {\n    id: number; // Rating id.\n    userid: number; // User id.\n    userpictureurl: string; // URL user picture.\n    userfullname: string; // User fullname.\n    rating: string; // Rating on scale.\n    timemodified: number; // Time modified (timestamp).\n};\n\n/**\n * Params of core_rating_get_item_ratings WS.\n */\ntype CoreRatingGetItemRatingsWSParams = {\n    contextlevel: ContextLevel; // Context level: course, module, user, etc...\n    instanceid: number; // The instance id of item associated with the context level.\n    component: string; // Component.\n    ratingarea: string; // Rating area.\n    itemid: number; // Associated id.\n    scaleid: number; // Scale id.\n    sort: string; // Sort order (firstname, rating or timemodified).\n};\n\n/**\n * Data returned by core_rating_get_item_ratings WS.\n */\nexport type CoreRatingGetItemRatingsWSResponse = {\n    ratings: CoreRatingItemRating[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of core_rating_add_rating WS.\n */\ntype CoreRatingAddRatingWSParams = {\n    contextlevel: ContextLevel; // Context level: course, module, user, etc...\n    instanceid: number; // The instance id of item associated with the context level.\n    component: string; // Component.\n    ratingarea: string; // Rating area.\n    itemid: number; // Associated id.\n    scaleid: number; // Scale id.\n    rating: number; // User rating.\n    rateduserid: number; // Rated user id.\n    aggregation?: number; // Agreggation method.\n};\n\n/**\n * Data returned by core_rating_add_rating WS.\n */\nexport type CoreRatingAddRatingWSResponse = {\n    success: boolean; // Whether the rate was successfully created.\n    aggregate?: string; // New aggregate.\n    count?: number; // Ratings count.\n    itemid?: number; // Rating item id.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Data sent by AGGREGATE_CHANGED_EVENT event.\n */\nexport type CoreRatingAggregateChangedEventData = {\n    contextLevel: ContextLevel;\n    instanceId: number;\n    component: string;\n    ratingArea: string;\n    itemId: number;\n    aggregate?: string;\n    count?: number;\n};\n\n/**\n * Data sent by RATING_SAVED_EVENT event.\n */\nexport type CoreRatingSavedEventData = {\n    component: string;\n    ratingArea: string;\n    contextLevel: ContextLevel;\n    instanceId: number;\n    itemSetId: number;\n    itemId: number;\n};\n"],"mappings":";;AAgBA,SAASA,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,QAAQ,QAAQ,8BAA8B;AACvD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,iBAAiB,QAAQ,kBAAkB;;AAGpD,MAAMC,cAAc,GAAG,aAAa;AAEpC;;;AAIA,OAAM,MAAOC,kBAAkB;EAc3B;;;;;;;;;;;;;;;;;EAiBMC,SAASA,CACXC,SAAiB,EACjBC,UAAkB,EAClBC,YAA0B,EAC1BC,UAAkB,EAClBC,MAAc,EACdC,SAAiB,EACjBC,QAAgB,EAChBC,OAAe,EACfC,MAAc,EACdC,WAAmB,EACnBC,eAAuB,EACvBC,MAAe;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEfF,MAAM,GAAGA,MAAM,IAAInB,SAAS,CAACsB,gBAAgB,EAAE;MAE/C;MACA,MAAMC,YAAY;QAAA,IAAAC,IAAA,GAAAH,iBAAA,CAAG,aAA0B;UAC3C,MAAMjB,iBAAiB,CAACG,SAAS,CAC7BC,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,UAAU,EACVC,MAAM,EACNC,SAAS,EACTC,QAAQ,EACRC,OAAO,EACPC,MAAM,EACNC,WAAW,EACXC,eAAe,EACfC,MAAM,CACT;UAEDhB,UAAU,CAACsB,OAAO,CAACnB,kBAAkB,CAACoB,kBAAkB,EAAE;YACtDlB,SAAS;YACTC,UAAU;YACVC,YAAY;YACZC,UAAU;YACVE,SAAS;YACTD;WACH,EAAEO,MAAM,CAAC;QACd,CAAC;QAAA,gBAxBKI,YAAYA,CAAA;UAAA,OAAAC,IAAA,CAAAG,KAAA,OAAAC,SAAA;QAAA;MAAA,GAwBjB;MAED,IAAI,CAAC7B,WAAW,CAAC8B,QAAQ,EAAE,EAAE;QACzB;QACA,OAAON,YAAY,EAAE;;MAGzB,IAAI;QACA,MAAMnB,iBAAiB,CAAC0B,YAAY,CAACtB,SAAS,EAAEC,UAAU,EAAEC,YAAY,EAAEC,UAAU,EAAEC,MAAM,EAAEO,MAAM,CAAC;QAErG,MAAMY,QAAQ,SAASX,KAAI,CAACY,eAAe,CACvCxB,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,UAAU,EACVC,MAAM,EACNG,OAAO,EACPC,MAAM,EACNC,WAAW,EACXC,eAAe,EACfC,MAAM,CACT;QAED,OAAOY,QAAQ;OAClB,CAAC,OAAOE,KAAK,EAAE;QACZ,IAAIhC,SAAS,CAACiC,iBAAiB,CAACD,KAAK,CAAC,EAAE;UACpC;UACA,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;;QAGhC;QACA,OAAOV,YAAY,EAAE;;IACxB;EACL;EAEA;;;;;;;;;;;;;;;EAeMS,eAAeA,CACjBxB,SAAiB,EACjBC,UAAkB,EAClBC,YAA0B,EAC1BC,UAAkB,EAClBC,MAAc,EACdG,OAAe,EACfC,MAAc,EACdC,WAAmB,EACnBC,eAAuB,EACvBC,MAAe;IAAA,IAAAkB,MAAA;IAAA,OAAAhB,iBAAA;MAGf,MAAMiB,IAAI,SAAStC,SAAS,CAACuC,OAAO,CAACpB,MAAM,CAAC;MAC5C,MAAMqB,MAAM,GAAgC;QACxCC,YAAY,EAAE/B,YAAY;QAC1BgC,UAAU,EAAE/B,UAAU;QACtBH,SAAS;QACTmC,UAAU,EAAElC,UAAU;QACtBmC,MAAM,EAAEhC,MAAM;QACdiC,OAAO,EAAE9B,OAAO;QAChBC,MAAM;QACN8B,WAAW,EAAE7B,WAAW;QACxB8B,WAAW,EAAE7B;OAChB;MAED,MAAMa,QAAQ,SAASO,IAAI,CAACU,KAAK,CAAgC,wBAAwB,EAAER,MAAM,CAAC;MAElG,MAAMH,MAAI,CAACY,qBAAqB,CAACvC,YAAY,EAAEC,UAAU,EAAEH,SAAS,EAAEC,UAAU,EAAEG,MAAM,EAAEG,OAAO,CAAC;MAElGZ,UAAU,CAACsB,OAAO,CAACnB,kBAAkB,CAAC4C,uBAAuB,EAAE;QAC3DxC,YAAY;QACZC,UAAU;QACVH,SAAS;QACTC,UAAU;QACVG,MAAM;QACNuC,SAAS,EAAEpB,QAAQ,CAACoB,SAAS;QAC7BC,KAAK,EAAErB,QAAQ,CAACqB;OACnB,CAAC;MAEF,OAAOrB,QAAQ;IAAC;EACpB;EAEA;;;;;;;;;;;;;;;EAeMsB,cAAcA,CAChB3C,YAA0B,EAC1BC,UAAkB,EAClBH,SAAiB,EACjBC,UAAkB,EAClBG,MAAc,EACdG,OAAe,EACfuC,IAAA,GAAe,cAAc,EAC7BxC,QAAiB,EACjBK,MAAe,EACfoC,WAAA,GAAuB,KAAK;IAAA,IAAAC,MAAA;IAAA,OAAAnC,iBAAA;MAE5B,MAAMiB,IAAI,SAAStC,SAAS,CAACuC,OAAO,CAACpB,MAAM,CAAC;MAE5C,MAAMqB,MAAM,GAAqC;QAC7CC,YAAY,EAAE/B,YAAY;QAC1BgC,UAAU,EAAE/B,UAAU;QACtBH,SAAS;QACTmC,UAAU,EAAElC,UAAU;QACtBmC,MAAM,EAAEhC,MAAM;QACdiC,OAAO,EAAE9B,OAAO;QAChBuC;OACH;MAED,MAAMG,OAAO,GAAsB;QAC/BC,QAAQ,EAAEF,MAAI,CAACG,sBAAsB,CAACjD,YAAY,EAAEC,UAAU,EAAEH,SAAS,EAAEC,UAAU,EAAEG,MAAM,EAAEG,OAAO,EAAEuC,IAAI,CAAC;QAC7GM,eAAe,EAAE/D,QAAQ,CAACgE;OAC7B;MAED,IAAIN,WAAW,EAAE;QACbE,OAAO,CAACK,YAAY,GAAG,KAAK;QAC5BL,OAAO,CAACM,cAAc,GAAG,KAAK;;MAGlC,MAAMhC,QAAQ,SAASO,IAAI,CAAC0B,IAAI,CAAqC,8BAA8B,EAAExB,MAAM,EAAEiB,OAAO,CAAC;MAErH,IAAI,CAACnB,IAAI,CAAC2B,yBAAyB,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,EAAE;QAC5D;QACA,MAAMC,QAAQ,GAAGnC,QAAQ,CAACoC,OAAO,CAACC,GAAG,CAAEpD,MAA4B,IAC/DlB,QAAQ,CAACuE,UAAU,CAACrD,MAAM,CAACsD,MAAM,EAAExD,QAAQ,EAAE,IAAI,EAAEwB,IAAI,CAACiC,EAAE,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAI;UACtEzD,MAAM,CAAC0D,cAAc,GAAGD,IAAI,CAACE,eAAe,IAAI,EAAE;UAElD;QACJ,CAAC,CAAC,CAACC,KAAK,CAAC,MAAK;UACV;UACA5D,MAAM,CAAC0D,cAAc,GAAG,EAAE;QAC9B,CAAC,CAAC,CAAC;QAEP,MAAMvC,OAAO,CAAC0C,GAAG,CAACX,QAAQ,CAAC;;MAG/B,OAAOnC,QAAQ,CAACoC,OAAO;IAAC;EAC5B;EAEA;;;;;;;;;;;;;EAaMlB,qBAAqBA,CACvBvC,YAA0B,EAC1BC,UAAkB,EAClBH,SAAiB,EACjBC,UAAkB,EAClBG,MAAc,EACdG,OAAe,EACfuC,IAAA,GAAe,cAAc,EAC7BnC,MAAe;IAAA,IAAA2D,MAAA;IAAA,OAAAzD,iBAAA;MAEf,MAAMiB,IAAI,SAAStC,SAAS,CAACuC,OAAO,CAACpB,MAAM,CAAC;MAE5C,MAAM4D,GAAG,GAAGD,MAAI,CAACnB,sBAAsB,CAACjD,YAAY,EAAEC,UAAU,EAAEH,SAAS,EAAEC,UAAU,EAAEG,MAAM,EAAEG,OAAO,EAAEuC,IAAI,CAAC;MAE/G,MAAMhB,IAAI,CAAC0C,uBAAuB,CAACD,GAAG,CAAC;IAAC;EAC5C;EAEA;;;;;;EAMAE,sBAAsBA,CAAC3C,IAAe;IAAA,IAAA4C,KAAA;IAClC5C,IAAI,GAAGA,IAAI,IAAItC,SAAS,CAACmF,cAAc,EAAE;IAEzC,OAAO,CAAC,GAAAD,KAAA,GAAC5C,IAAI,cAAA4C,KAAA,eAAJA,KAAA,CAAME,iBAAiB,CAAC,uBAAuB,CAAC;EAC7D;EAEA;;;;;;EAMMC,gBAAgBA,CAAClE,MAAe;IAAA,IAAAmE,MAAA;IAAA,OAAAjE,iBAAA;MAClC,MAAMiB,IAAI,SAAStC,SAAS,CAACuC,OAAO,CAACpB,MAAM,CAAC;MAE5C,OAAOmE,MAAI,CAACL,sBAAsB,CAAC3C,IAAI,CAAC;IAAC;EAC7C;EAEA;;;;;;EAMAiD,gBAAgBA,CAACC,WAA6B;IAC1C,IAAIC,MAAkC;IACtC,MAAMC,MAAM,GAAoC,EAAE;IAClD,MAAMvB,OAAO,GAAuC,EAAE;IAEtDqB,WAAW,CAACG,OAAO,CAAEC,UAAU,IAAI;MAC/B,IAAI,CAACA,UAAU,EAAE;QACb;QACA;;MAGJ,IAAI,CAACH,MAAM,EAAE;QACTA,MAAM,GAAGI,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEF,UAAU,CAAC;;MAG1C,CAACA,UAAU,CAACF,MAAM,IAAI,EAAE,EAAEC,OAAO,CAAEI,KAAK,IAAI;QACxCL,MAAM,CAACK,KAAK,CAACxB,EAAE,CAAC,GAAGwB,KAAK;MAC5B,CAAC,CAAC;MAEF,CAACH,UAAU,CAACzB,OAAO,IAAI,EAAE,EAAEwB,OAAO,CAAE3E,MAAM,IAAI;QAC1CmD,OAAO,CAACnD,MAAM,CAAC4B,MAAM,CAAC,GAAG5B,MAAM;MACnC,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,IAAIyE,MAAM,EAAE;MACRA,MAAM,CAACC,MAAM,GAAGzF,SAAS,CAAC+F,aAAa,CAACN,MAAM,CAAC;MAC/CD,MAAM,CAACtB,OAAO,GAAGlE,SAAS,CAAC+F,aAAa,CAAC7B,OAAO,CAAC;;IAGrD,OAAOsB,MAAM;EACjB;EAEA;;;;;;;;;;;;;EAaMQ,eAAeA,CACjBvF,YAA0B,EAC1BC,UAAkB,EAClBI,OAAe,EACfD,QAAiB,EACjB8E,UAA2B,EAC3BzE,MAAe;IAAA,IAAA+E,MAAA;IAAA,OAAA7E,iBAAA;MAEf,IAAI,CAACuE,UAAU,IAAI,CAACA,UAAU,CAACzB,OAAO,EAAE;QACpC;;MAGJ,MAAM7B,IAAI,SAAStC,SAAS,CAACuC,OAAO,CAACpB,MAAM,CAAC;MAC5C,MAAM+C,QAAQ,GAAG0B,UAAU,CAACzB,OAAO,CAACC,GAAG,CAAE+B,IAAI,IAAKD,MAAI,CAAC7C,cAAc,CACjE3C,YAAY,EACZC,UAAU,EACViF,UAAU,CAACpF,SAAS,EACpBoF,UAAU,CAACjD,UAAU,EACrBwD,IAAI,CAACvD,MAAM,EACX7B,OAAO,EACPqF,SAAS,EACTtF,QAAQ,EACRwB,IAAI,CAACiC,EAAE,EACP,IAAI,CACP,CAAC;MAEF,MAAM8B,cAAc,SAASlE,OAAO,CAAC0C,GAAG,CAACX,QAAQ,CAAC;MAElD,IAAI,CAAC5B,IAAI,CAAC2B,yBAAyB,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,EAAE;QAC5D,MAAME,OAAO,GAA2B,EAAE,CAACmC,MAAM,CAAC3E,KAAK,CAAC,EAAE,EAAE0E,cAAc,CAAC;QAE3E,MAAME,OAAO,GAAGpC,OAAO,CAACC,GAAG,CAAEpD,MAAM,IAAKA,MAAM,CAACsD,MAAM,CAAC;QAEtD,MAAMxE,QAAQ,CAAC0G,gBAAgB,CAACD,OAAO,EAAEzF,QAAQ,EAAEwB,IAAI,CAACiC,EAAE,CAAC;;IAC9D;EACL;EAEA;;;;;;;;;;;;EAYUZ,sBAAsBA,CAC5BjD,YAA0B,EAC1BC,UAAkB,EAClBH,SAAiB,EACjBC,UAAkB,EAClBG,MAAc,EACdG,OAAe,EACfuC,IAAY;IAEZ,OAAO,GAAGjD,cAAc,GAAGK,YAAY,IAAIC,UAAU,IAAIH,SAAS,IAAIC,UAAU,IAAIG,MAAM,IAAIG,OAAO,IAAIuC,IAAI,EAAE;EACnH;;SA9YShD,kBAAkB;AAEXmG,MAAA,CAAAC,cAAc,GAAG,CAAC;AAAE;AACpBD,MAAA,CAAAE,iBAAiB,GAAG,CAAC;AACrBF,MAAA,CAAAG,eAAe,GAAG,CAAC;AACnBH,MAAA,CAAAI,iBAAiB,GAAG,CAAC;AACrBJ,MAAA,CAAAK,iBAAiB,GAAG,CAAC;AACrBL,MAAA,CAAAM,aAAa,GAAG,CAAC;AAEjBN,MAAA,CAAAO,YAAY,GAAG,CAAC,GAAG;AAEnBP,MAAA,CAAAvD,uBAAuB,GAAG,+BAA+B;AACzDuD,MAAA,CAAA/E,kBAAkB,GAAG,0BAA0B;;mBAZtDpB,MAAkB;AAAA;;SAAlBA,MAAkB;EAAA2G,OAAA,EAAlB3G,MAAkB,CAAA4G,IAAA;EAAAC,UAAA,EADJ;AAAM;AAkZjC,OAAO,MAAMC,UAAU,GAAGlH,aAAa,CAACI,kBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}