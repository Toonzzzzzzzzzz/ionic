{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CorePath } from '@singletons/path';\nimport { CoreCourses } from '../courses';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for course request push notifications clicks.\n */\nexport class CoreCoursesRequestPushClickHandlerService {\n  constructor() {\n    this.name = 'CoreCoursesRequestPushClickHandler';\n    this.priority = 200;\n  }\n  /**\n   * Check if a notification click is handled by this handler.\n   *\n   * @param notification The notification to check.\n   * @returns Whether the notification click is handled by this handler\n   */\n  handles(notification) {\n    return _asyncToGenerator(function* () {\n      // Don't support 'courserequestrejected', that way the app will open the notifications page.\n      return CoreUtils.isTrueOrOne(notification.notif) && notification.moodlecomponent == 'moodle' && (notification.name == 'courserequested' || notification.name == 'courserequestapproved');\n    })();\n  }\n  /**\n   * Handle the notification click.\n   *\n   * @param notification The notification to check.\n   * @returns Promise resolved when done.\n   */\n  handleClick(notification) {\n    return _asyncToGenerator(function* () {\n      const courseId = notification.courseid;\n      if (notification.name == 'courserequested') {\n        // Feature not supported in the app, open in browser.\n        const site = yield CoreSites.getSite(notification.site);\n        const url = CorePath.concatenatePaths(site.getURL(), 'course/pending.php');\n        yield site.openInBrowserWithAutoLogin(url);\n        return;\n      }\n      // Open the course.\n      const modal = yield CoreDomUtils.showModalLoading();\n      yield CoreUtils.ignoreErrors(CoreCourses.invalidateUserCourses(notification.site));\n      try {\n        const result = yield CoreCourseHelper.getCourse(courseId, notification.site);\n        const params = {\n          course: result.course\n        };\n        let page = 'course/' + courseId;\n        if (!result.enrolled) {\n          // User not enrolled (shouldn't happen), open the preview page.\n          page += '/summary';\n        }\n        yield CoreNavigator.navigateToSitePath(page, {\n          params,\n          siteId: notification.site\n        });\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error getting course.');\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n}\n_class = CoreCoursesRequestPushClickHandlerService;\n_class.ɵfac = function CoreCoursesRequestPushClickHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreCoursesRequestPushClickHandler = makeSingleton(CoreCoursesRequestPushClickHandlerService);","map":{"version":3,"names":["CoreCourseHelper","CoreNavigator","CoreSites","CoreDomUtils","CoreUtils","makeSingleton","CorePath","CoreCourses","CoreCoursesRequestPushClickHandlerService","constructor","name","priority","handles","notification","_asyncToGenerator","isTrueOrOne","notif","moodlecomponent","handleClick","courseId","courseid","site","getSite","url","concatenatePaths","getURL","openInBrowserWithAutoLogin","modal","showModalLoading","ignoreErrors","invalidateUserCourses","result","getCourse","params","course","page","enrolled","navigateToSitePath","siteId","error","showErrorModalDefault","dismiss","factory","ɵfac","providedIn","CoreCoursesRequestPushClickHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/courses/services/handlers/request-push-click.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CorePushNotificationsClickHandler } from '@features/pushnotifications/services/push-delegate';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CorePath } from '@singletons/path';\nimport { CoreCourses } from '../courses';\n\n/**\n * Handler for course request push notifications clicks.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreCoursesRequestPushClickHandlerService implements CorePushNotificationsClickHandler {\n\n    name = 'CoreCoursesRequestPushClickHandler';\n    priority = 200;\n\n    /**\n     * Check if a notification click is handled by this handler.\n     *\n     * @param notification The notification to check.\n     * @returns Whether the notification click is handled by this handler\n     */\n    async handles(notification: CorePushNotificationsNotificationBasicData): Promise<boolean> {\n        // Don't support 'courserequestrejected', that way the app will open the notifications page.\n        return CoreUtils.isTrueOrOne(notification.notif) && notification.moodlecomponent == 'moodle' &&\n            (notification.name == 'courserequested' || notification.name == 'courserequestapproved');\n    }\n\n    /**\n     * Handle the notification click.\n     *\n     * @param notification The notification to check.\n     * @returns Promise resolved when done.\n     */\n    async handleClick(notification: CoreCoursesRequestNotificationData): Promise<void> {\n        const courseId = notification.courseid;\n\n        if (notification.name == 'courserequested') {\n            // Feature not supported in the app, open in browser.\n            const site = await CoreSites.getSite(notification.site);\n            const url = CorePath.concatenatePaths(site.getURL(), 'course/pending.php');\n\n            await site.openInBrowserWithAutoLogin(url);\n\n            return;\n        }\n\n        // Open the course.\n        const modal = await CoreDomUtils.showModalLoading();\n\n        await CoreUtils.ignoreErrors(CoreCourses.invalidateUserCourses(notification.site));\n\n        try {\n            const result = await CoreCourseHelper.getCourse(courseId, notification.site);\n            const params: Params = {\n                course: result.course,\n            };\n            let page = 'course/' + courseId;\n\n            if (!result.enrolled) {\n                // User not enrolled (shouldn't happen), open the preview page.\n                page += '/summary';\n            }\n\n            await CoreNavigator.navigateToSitePath(page, { params, siteId: notification.site });\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting course.');\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n}\n\nexport const CoreCoursesRequestPushClickHandler = makeSingleton(CoreCoursesRequestPushClickHandlerService);\n\ntype CoreCoursesRequestNotificationData = CorePushNotificationsNotificationBasicData & {\n    courseid: number; // Course ID related to the notification.\n};\n"],"mappings":";;AAgBA,SAASA,gBAAgB,QAAQ,yCAAyC;AAG1E,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,YAAY;;AAExC;;;AAIA,OAAM,MAAOC,yCAAyC;EADtDC,YAAA;IAGI,KAAAC,IAAI,GAAG,oCAAoC;IAC3C,KAAAC,QAAQ,GAAG,GAAG;;EAEd;;;;;;EAMMC,OAAOA,CAACC,YAAwD;IAAA,OAAAC,iBAAA;MAClE;MACA,OAAOV,SAAS,CAACW,WAAW,CAACF,YAAY,CAACG,KAAK,CAAC,IAAIH,YAAY,CAACI,eAAe,IAAI,QAAQ,KACvFJ,YAAY,CAACH,IAAI,IAAI,iBAAiB,IAAIG,YAAY,CAACH,IAAI,IAAI,uBAAuB,CAAC;IAAC;EACjG;EAEA;;;;;;EAMMQ,WAAWA,CAACL,YAAgD;IAAA,OAAAC,iBAAA;MAC9D,MAAMK,QAAQ,GAAGN,YAAY,CAACO,QAAQ;MAEtC,IAAIP,YAAY,CAACH,IAAI,IAAI,iBAAiB,EAAE;QACxC;QACA,MAAMW,IAAI,SAASnB,SAAS,CAACoB,OAAO,CAACT,YAAY,CAACQ,IAAI,CAAC;QACvD,MAAME,GAAG,GAAGjB,QAAQ,CAACkB,gBAAgB,CAACH,IAAI,CAACI,MAAM,EAAE,EAAE,oBAAoB,CAAC;QAE1E,MAAMJ,IAAI,CAACK,0BAA0B,CAACH,GAAG,CAAC;QAE1C;;MAGJ;MACA,MAAMI,KAAK,SAASxB,YAAY,CAACyB,gBAAgB,EAAE;MAEnD,MAAMxB,SAAS,CAACyB,YAAY,CAACtB,WAAW,CAACuB,qBAAqB,CAACjB,YAAY,CAACQ,IAAI,CAAC,CAAC;MAElF,IAAI;QACA,MAAMU,MAAM,SAAS/B,gBAAgB,CAACgC,SAAS,CAACb,QAAQ,EAAEN,YAAY,CAACQ,IAAI,CAAC;QAC5E,MAAMY,MAAM,GAAW;UACnBC,MAAM,EAAEH,MAAM,CAACG;SAClB;QACD,IAAIC,IAAI,GAAG,SAAS,GAAGhB,QAAQ;QAE/B,IAAI,CAACY,MAAM,CAACK,QAAQ,EAAE;UAClB;UACAD,IAAI,IAAI,UAAU;;QAGtB,MAAMlC,aAAa,CAACoC,kBAAkB,CAACF,IAAI,EAAE;UAAEF,MAAM;UAAEK,MAAM,EAAEzB,YAAY,CAACQ;QAAI,CAAE,CAAC;OACtF,CAAC,OAAOkB,KAAK,EAAE;QACZpC,YAAY,CAACqC,qBAAqB,CAACD,KAAK,EAAE,uBAAuB,CAAC;OACrE,SAAS;QACNZ,KAAK,CAACc,OAAO,EAAE;;IAClB;EACL;;SA3DSjC,yCAAyC;;mBAAzCA,MAAyC;AAAA;;SAAzCA,MAAyC;EAAAkC,OAAA,EAAzClC,MAAyC,CAAAmC,IAAA;EAAAC,UAAA,EAD5B;AAAM;AAgEhC,OAAO,MAAMC,kCAAkC,GAAGxC,aAAa,CAACG,yCAAyC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}