{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { RATINGS_TABLE } from './database/rating';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to handle offline data for rating.\n */\nexport class CoreRatingOfflineProvider {\n  /**\n   * Get an offline rating.\n   *\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating area. Example: \"post\".\n   * @param itemId Item id. Example: forum post id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the saved rating, rejected if not found.\n   */\n  getRating(contextLevel, instanceId, component, ratingArea, itemId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        component: component,\n        ratingarea: ratingArea,\n        itemid: itemId\n      };\n      return site.getDb().getRecord(RATINGS_TABLE, conditions);\n    })();\n  }\n  /**\n   * Add an offline rating.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemId Item id. Example: forum post id.\n   * @param itemSetId Item set id. Example: forum discussion id.\n   * @param courseId Course id.\n   * @param scaleId Scale id.\n   * @param rating Rating value. Use CoreRatingProvider.UNSET_RATING to delete rating.\n   * @param ratedUserId Rated user id.\n   * @param aggregateMethod Aggregate method.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the rating is saved.\n   */\n  addRating(component, ratingArea, contextLevel, instanceId, itemId, itemSetId, courseId, scaleId, rating, ratedUserId, aggregateMethod, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const data = {\n        component: component,\n        ratingarea: ratingArea,\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        itemid: itemId,\n        itemsetid: itemSetId,\n        courseid: courseId,\n        scaleid: scaleId,\n        rating: rating,\n        rateduserid: ratedUserId,\n        aggregation: aggregateMethod\n      };\n      yield site.getDb().insertRecord(RATINGS_TABLE, data);\n    })();\n  }\n  /**\n   * Delete offline rating.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Instance Id.\n   * @param itemId Item Id. Example: forum post id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the rating is saved.\n   */\n  deleteRating(component, ratingArea, contextLevel, instanceId, itemId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        component: component,\n        ratingarea: ratingArea,\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        itemid: itemId\n      };\n      yield site.getDb().deleteRecords(RATINGS_TABLE, conditions);\n    })();\n  }\n  /**\n   * Get the list of item sets in a component or instance.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating Area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemSetId Item set id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the list of item set ids.\n   */\n  getItemSets(component, ratingArea, contextLevel, instanceId, itemSetId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const fields = 'DISTINCT contextlevel, instanceid, itemsetid, courseid';\n      const conditions = {\n        component,\n        ratingarea: ratingArea\n      };\n      if (contextLevel && instanceId) {\n        conditions.contextlevel = contextLevel;\n        conditions.instanceid = instanceId;\n      }\n      if (itemSetId) {\n        conditions.itemsetid = itemSetId;\n      }\n      const records = yield site.getDb().getRecords(RATINGS_TABLE, conditions, undefined, fields);\n      return records.map(record => ({\n        component,\n        ratingArea,\n        contextLevel: record.contextlevel,\n        instanceId: record.instanceid,\n        itemSetId: record.itemsetid,\n        courseId: record.courseid\n      }));\n    })();\n  }\n  /**\n   * Get offline ratings of an item set.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating Area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemSetId Item set id. Example: forum discussion id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the list of ratings.\n   */\n  getRatings(component, ratingArea, contextLevel, instanceId, itemSetId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        component,\n        ratingarea: ratingArea,\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        itemsetid: itemSetId\n      };\n      return site.getDb().getRecords(RATINGS_TABLE, conditions);\n    })();\n  }\n  /**\n   * Return whether a component, instance or item set has offline ratings.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating Area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemSetId Item set id. Example: forum discussion id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with a boolean.\n   */\n  hasRatings(component, ratingArea, contextLevel, instanceId, itemSetId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        component,\n        ratingarea: ratingArea\n      };\n      if (contextLevel && instanceId) {\n        conditions.contextlevel = contextLevel;\n        conditions.instanceid = instanceId;\n      }\n      if (itemSetId) {\n        conditions.itemsetid = itemSetId;\n      }\n      return CoreUtils.promiseWorks(site.getDb().recordExists(RATINGS_TABLE, conditions));\n    })();\n  }\n}\n_class = CoreRatingOfflineProvider;\n_class.ɵfac = function CoreRatingOfflineProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreRatingOffline = makeSingleton(CoreRatingOfflineProvider);","map":{"version":3,"names":["CoreSites","CoreUtils","makeSingleton","RATINGS_TABLE","CoreRatingOfflineProvider","getRating","contextLevel","instanceId","component","ratingArea","itemId","siteId","_asyncToGenerator","site","getSite","conditions","contextlevel","instanceid","ratingarea","itemid","getDb","getRecord","addRating","itemSetId","courseId","scaleId","rating","ratedUserId","aggregateMethod","data","itemsetid","courseid","scaleid","rateduserid","aggregation","insertRecord","deleteRating","deleteRecords","getItemSets","fields","records","getRecords","undefined","map","record","getRatings","hasRatings","promiseWorks","recordExists","factory","ɵfac","providedIn","CoreRatingOffline"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/rating/services/rating-offline.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ContextLevel } from '@/core/constants';\nimport { Injectable } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CoreRatingDBPrimaryData, CoreRatingDBRecord, RATINGS_TABLE } from './database/rating';\n\n/**\n * Structure of item sets.\n */\nexport interface CoreRatingItemSet {\n    component: string;\n    ratingArea: string;\n    contextLevel: ContextLevel;\n    instanceId: number;\n    itemSetId: number;\n    courseId: number;\n}\n\n/**\n * Service to handle offline data for rating.\n */\n@Injectable( { providedIn: 'root' })\nexport class CoreRatingOfflineProvider {\n\n    /**\n     * Get an offline rating.\n     *\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating area. Example: \"post\".\n     * @param itemId Item id. Example: forum post id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the saved rating, rejected if not found.\n     */\n    async getRating(\n        contextLevel: ContextLevel,\n        instanceId: number,\n        component: string,\n        ratingArea: string,\n        itemId: number,\n        siteId?: string,\n    ): Promise<CoreRatingDBRecord> {\n        const site = await CoreSites.getSite(siteId);\n\n        const conditions: CoreRatingDBPrimaryData = {\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            component: component,\n            ratingarea: ratingArea,\n            itemid: itemId,\n        };\n\n        return site.getDb().getRecord(RATINGS_TABLE, conditions);\n    }\n\n    /**\n     * Add an offline rating.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemId Item id. Example: forum post id.\n     * @param itemSetId Item set id. Example: forum discussion id.\n     * @param courseId Course id.\n     * @param scaleId Scale id.\n     * @param rating Rating value. Use CoreRatingProvider.UNSET_RATING to delete rating.\n     * @param ratedUserId Rated user id.\n     * @param aggregateMethod Aggregate method.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the rating is saved.\n     */\n    async addRating(\n        component: string,\n        ratingArea: string,\n        contextLevel: ContextLevel,\n        instanceId: number,\n        itemId: number,\n        itemSetId: number,\n        courseId: number,\n        scaleId: number,\n        rating: number,\n        ratedUserId: number,\n        aggregateMethod: number,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const data: CoreRatingDBRecord = {\n            component: component,\n            ratingarea: ratingArea,\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            itemid: itemId,\n            itemsetid: itemSetId,\n            courseid: courseId,\n            scaleid: scaleId,\n            rating: rating,\n            rateduserid: ratedUserId,\n            aggregation: aggregateMethod,\n        };\n\n        await site.getDb().insertRecord(RATINGS_TABLE, data);\n    }\n\n    /**\n     * Delete offline rating.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Instance Id.\n     * @param itemId Item Id. Example: forum post id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the rating is saved.\n     */\n    async deleteRating(\n        component: string,\n        ratingArea: string,\n        contextLevel: ContextLevel,\n        instanceId: number,\n        itemId: number,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const conditions: CoreRatingDBPrimaryData = {\n            component: component,\n            ratingarea: ratingArea,\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            itemid: itemId,\n        };\n\n        await site.getDb().deleteRecords(RATINGS_TABLE, conditions);\n    }\n\n    /**\n     * Get the list of item sets in a component or instance.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating Area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemSetId Item set id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the list of item set ids.\n     */\n    async getItemSets(\n        component: string,\n        ratingArea: string,\n        contextLevel?: ContextLevel,\n        instanceId?: number,\n        itemSetId?: number,\n        siteId?: string,\n    ): Promise<CoreRatingItemSet[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        const fields = 'DISTINCT contextlevel, instanceid, itemsetid, courseid';\n\n        const conditions: Partial<CoreRatingDBRecord> = {\n            component,\n            ratingarea: ratingArea,\n        };\n\n        if (contextLevel && instanceId) {\n            conditions.contextlevel = contextLevel;\n            conditions.instanceid = instanceId;\n        }\n\n        if (itemSetId) {\n            conditions.itemsetid = itemSetId;\n        }\n\n        const records = await site.getDb().getRecords<CoreRatingDBRecord>(RATINGS_TABLE, conditions, undefined, fields);\n\n        return records.map((record) => ({\n            component,\n            ratingArea,\n            contextLevel: record.contextlevel,\n            instanceId: record.instanceid,\n            itemSetId: record.itemsetid,\n            courseId: record.courseid,\n        }));\n    }\n\n    /**\n     * Get offline ratings of an item set.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating Area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemSetId Item set id. Example: forum discussion id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the list of ratings.\n     */\n    async getRatings(\n        component: string,\n        ratingArea: string,\n        contextLevel: ContextLevel,\n        instanceId: number,\n        itemSetId: number,\n        siteId?: string,\n    ): Promise<CoreRatingDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        const conditions: Partial<CoreRatingDBRecord> = {\n            component,\n            ratingarea: ratingArea,\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            itemsetid: itemSetId,\n        };\n\n        return site.getDb().getRecords(RATINGS_TABLE, conditions);\n    }\n\n    /**\n     * Return whether a component, instance or item set has offline ratings.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating Area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemSetId Item set id. Example: forum discussion id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with a boolean.\n     */\n    async hasRatings(\n        component: string,\n        ratingArea: string,\n        contextLevel?: ContextLevel,\n        instanceId?: number,\n        itemSetId?: number,\n        siteId?: string,\n    ): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        const conditions: Partial<CoreRatingDBRecord> = {\n            component,\n            ratingarea: ratingArea,\n        };\n        if (contextLevel && instanceId) {\n            conditions.contextlevel = contextLevel;\n            conditions.instanceid = instanceId;\n        }\n        if (itemSetId) {\n            conditions.itemsetid = itemSetId;\n        }\n\n        return CoreUtils.promiseWorks(site.getDb().recordExists(RATINGS_TABLE, conditions));\n    }\n\n}\nexport const CoreRatingOffline = makeSingleton(CoreRatingOfflineProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}