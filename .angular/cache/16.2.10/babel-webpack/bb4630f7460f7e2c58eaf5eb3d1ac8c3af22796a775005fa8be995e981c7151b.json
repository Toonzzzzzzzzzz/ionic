{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreGroups } from '@services/groups';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { AddonModChat } from '../services/chat';\n/**\n * Provides a collection of sessions.\n */\nexport class AddonModChatSessionsSource extends CoreRoutedItemsManagerSource {\n  constructor(courseId, chatId, cmId) {\n    super();\n    this.showAll = false;\n    this.groupId = 0;\n    this.COURSE_ID = courseId;\n    this.CHAT_ID = chatId;\n    this.CM_ID = cmId;\n  }\n  /**\n   * Invalidate chat cache.\n   */\n  invalidateCache() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield CoreUtils.ignoreErrors(CoreUtils.allPromises([CoreGroups.invalidateActivityGroupInfo(_this.CM_ID), AddonModChat.invalidateSessions(_this.CHAT_ID, _this.groupId, _this.showAll)]));\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  loadPageItems() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.groupInfo = yield CoreGroups.getActivityGroupInfo(_this2.CM_ID, false);\n      _this2.groupId = CoreGroups.validateGroupId(_this2.groupId, _this2.groupInfo);\n      const sessions = yield AddonModChat.getSessions(_this2.CHAT_ID, _this2.groupId, _this2.showAll, {\n        cmId: _this2.CM_ID\n      });\n      // Fetch user profiles.\n      const promises = [];\n      const formattedSessions = sessions.map(session => {\n        session.duration = session.sessionend - session.sessionstart;\n        session.sessionusers.forEach(sessionUser => {\n          // The WS does not return the user name, fetch user profile.\n          promises.push(_this2.loadUserFullname(sessionUser));\n        });\n        // If session has more than 4 users we display a \"Show more\" link.\n        session.allsessionusers = session.sessionusers;\n        if (session.sessionusers.length > 4) {\n          session.sessionusers = session.allsessionusers.slice(0, 3);\n        }\n        return session;\n      });\n      yield Promise.all(promises);\n      return {\n        items: formattedSessions\n      };\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemPath(session) {\n    return `${session.sessionstart}/${session.sessionend}`;\n  }\n  /**\n   * @inheritdoc\n   */\n  getItemQueryParams() {\n    return {\n      chatId: this.CHAT_ID,\n      groupId: this.groupId\n    };\n  }\n  /**\n   * Load the fullname of a user.\n   *\n   * @param sessionUser User object.\n   * @returns Promise resolved when done.\n   */\n  loadUserFullname(sessionUser) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (sessionUser.userfullname) {\n        return;\n      }\n      try {\n        const user = yield CoreUser.getProfile(sessionUser.userid, _this3.COURSE_ID, true);\n        sessionUser.userfullname = user.fullname;\n      } catch (_unused) {\n        // Error getting profile, most probably the user is deleted.\n        sessionUser.userfullname = Translate.instant('core.deleteduser') + ' ' + sessionUser.userid;\n      }\n    })();\n  }\n}","map":{"version":3,"names":["CoreRoutedItemsManagerSource","CoreUser","CoreGroups","CoreUtils","Translate","AddonModChat","AddonModChatSessionsSource","constructor","courseId","chatId","cmId","showAll","groupId","COURSE_ID","CHAT_ID","CM_ID","invalidateCache","_this","_asyncToGenerator","ignoreErrors","allPromises","invalidateActivityGroupInfo","invalidateSessions","loadPageItems","_this2","groupInfo","getActivityGroupInfo","validateGroupId","sessions","getSessions","promises","formattedSessions","map","session","duration","sessionend","sessionstart","sessionusers","forEach","sessionUser","push","loadUserFullname","allsessionusers","length","slice","Promise","all","items","getItemPath","getItemQueryParams","_this3","userfullname","user","getProfile","userid","fullname","_unused","instant"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/chat/classes/chat-sessions-source.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Params } from '@angular/router';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { AddonModChat, AddonModChatSession, AddonModChatSessionUser } from '../services/chat';\n\n/**\n * Provides a collection of sessions.\n */\nexport class AddonModChatSessionsSource extends CoreRoutedItemsManagerSource<AddonModChatSessionFormatted> {\n\n    readonly COURSE_ID: number;\n    readonly CHAT_ID: number;\n    readonly CM_ID: number;\n\n    showAll = false;\n    groupId = 0;\n    groupInfo?: CoreGroupInfo;\n\n    constructor(courseId: number, chatId: number, cmId: number) {\n        super();\n\n        this.COURSE_ID = courseId;\n        this.CHAT_ID = chatId;\n        this.CM_ID = cmId;\n    }\n\n    /**\n     * Invalidate chat cache.\n     */\n    async invalidateCache(): Promise<void> {\n        await CoreUtils.ignoreErrors(CoreUtils.allPromises([\n            CoreGroups.invalidateActivityGroupInfo(this.CM_ID),\n            AddonModChat.invalidateSessions(this.CHAT_ID, this.groupId, this.showAll),\n        ]));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(): Promise<{ items: AddonModChatSessionFormatted[] }> {\n        this.groupInfo = await CoreGroups.getActivityGroupInfo(this.CM_ID, false);\n\n        this.groupId = CoreGroups.validateGroupId(this.groupId, this.groupInfo);\n\n        const sessions = await AddonModChat.getSessions(this.CHAT_ID, this.groupId, this.showAll, { cmId: this.CM_ID });\n\n        // Fetch user profiles.\n        const promises: Promise<unknown>[] = [];\n\n        const formattedSessions = sessions.map((session: AddonModChatSessionFormatted) => {\n            session.duration = session.sessionend - session.sessionstart;\n            session.sessionusers.forEach((sessionUser) => {\n                // The WS does not return the user name, fetch user profile.\n                promises.push(this.loadUserFullname(sessionUser));\n            });\n\n            // If session has more than 4 users we display a \"Show more\" link.\n            session.allsessionusers = session.sessionusers;\n            if (session.sessionusers.length > 4) {\n                session.sessionusers = session.allsessionusers.slice(0, 3);\n            }\n\n            return session;\n        });\n\n        await Promise.all(promises);\n\n        return { items: formattedSessions };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(session: AddonModChatSessionFormatted): string {\n        return `${session.sessionstart}/${session.sessionend}`;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemQueryParams(): Params {\n        return {\n            chatId: this.CHAT_ID,\n            groupId: this.groupId,\n        };\n    }\n\n    /**\n     * Load the fullname of a user.\n     *\n     * @param sessionUser User object.\n     * @returns Promise resolved when done.\n     */\n    protected async loadUserFullname(sessionUser: AddonModChatUserSessionFormatted): Promise<void> {\n        if (sessionUser.userfullname) {\n            return;\n        }\n\n        try {\n            const user = await CoreUser.getProfile(sessionUser.userid, this.COURSE_ID, true);\n\n            sessionUser.userfullname = user.fullname;\n        } catch {\n            // Error getting profile, most probably the user is deleted.\n            sessionUser.userfullname = Translate.instant('core.deleteduser') + ' ' + sessionUser.userid;\n        }\n    }\n\n}\n\n/**\n * Fields added to chat session in this view.\n */\nexport type AddonModChatSessionFormatted = Omit<AddonModChatSession, 'sessionusers'> & {\n    duration?: number; // Session duration.\n    sessionusers: AddonModChatUserSessionFormatted[];\n    allsessionusers?: AddonModChatUserSessionFormatted[]; // All session users.\n};\n\n/**\n * Fields added to user session in this view.\n */\nexport type AddonModChatUserSessionFormatted = AddonModChatSessionUser & {\n    userfullname?: string; // User full name.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}