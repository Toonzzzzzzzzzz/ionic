{"ast":null,"code":"var _class;\nimport { AddonModDataFieldPluginBaseComponent } from '../../../classes/base-field-plugin-component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../../../../../core/components/input-errors/input-errors\";\nimport * as i3 from \"../../../../../../core/components/mark-required/mark-required\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@ionic/angular\";\nimport * as i6 from \"@ngx-translate/core\";\nfunction AddonModDataFieldRadiobuttonComponent_span_0_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"core-mark-required\", ctx_r2.field.required);\n  }\n}\nfunction AddonModDataFieldRadiobuttonComponent_span_0_ion_select_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r5);\n  }\n}\nfunction AddonModDataFieldRadiobuttonComponent_span_0_core_input_errors_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-input-errors\", 10);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"control\", ctx_r4.form.controls[\"f_\" + ctx_r4.field.id])(\"errorText\", ctx_r4.error);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    header: a0\n  };\n};\nfunction AddonModDataFieldRadiobuttonComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵtemplate(1, AddonModDataFieldRadiobuttonComponent_span_0_span_1_Template, 1, 1, \"span\", 3);\n    i0.ɵɵelementStart(2, \"ion-select\", 4);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementStart(6, \"ion-select-option\", 5);\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, AddonModDataFieldRadiobuttonComponent_span_0_ion_select_option_9_Template, 2, 2, \"ion-select-option\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, AddonModDataFieldRadiobuttonComponent_span_0_core_input_errors_10_Template, 1, 2, \"core-input-errors\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.form);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.editMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", \"f_\" + ctx_r0.field.id)(\"placeholder\", i0.ɵɵpipeBind1(3, 10, \"addon.mod_data.menuchoose\"))(\"cancelText\", i0.ɵɵpipeBind1(4, 12, \"core.cancel\"))(\"okText\", i0.ɵɵpipeBind1(5, 14, \"core.ok\"))(\"interfaceOptions\", i0.ɵɵpureFunction1(18, _c0, ctx_r0.field.name));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 16, \"addon.mod_data.menuchoose\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.options);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.error && ctx_r0.editMode);\n  }\n}\nfunction AddonModDataFieldRadiobuttonComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.value.content);\n  }\n}\n/**\n * Component to render data radiobutton field.\n */\nexport class AddonModDataFieldRadiobuttonComponent extends AddonModDataFieldPluginBaseComponent {\n  constructor() {\n    super(...arguments);\n    this.options = [];\n  }\n  /**\n   * Initialize field.\n   */\n  init() {\n    if (this.displayMode) {\n      return;\n    }\n    this.options = this.field.param1.split('\\n');\n    let val;\n    if (this.editMode && this.value) {\n      val = this.value.content;\n    }\n    this.addControl('f_' + this.field.id, val);\n  }\n}\n_class = AddonModDataFieldRadiobuttonComponent;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModDataFieldRadiobuttonComponent_BaseFactory;\n  return function AddonModDataFieldRadiobuttonComponent_Factory(t) {\n    return (ɵAddonModDataFieldRadiobuttonComponent_BaseFactory || (ɵAddonModDataFieldRadiobuttonComponent_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"addon-mod-data-field-radiobutton\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[3, \"formGroup\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"formGroup\"], [\"class\", \"core-mark-required\", 3, \"core-mark-required\", 4, \"ngIf\"], [\"interface\", \"alert\", 3, \"formControlName\", \"placeholder\", \"cancelText\", \"okText\", \"interfaceOptions\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"control\", \"errorText\", 4, \"ngIf\"], [1, \"core-mark-required\", 3, \"core-mark-required\"], [3, \"value\"], [3, \"control\", \"errorText\"]],\n  template: function AddonModDataFieldRadiobuttonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AddonModDataFieldRadiobuttonComponent_span_0_Template, 11, 20, \"span\", 0);\n      i0.ɵɵtemplate(1, AddonModDataFieldRadiobuttonComponent_span_1_Template, 2, 1, \"span\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.inputMode && ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.displayMode && ctx.value && ctx.value.content);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.CoreInputErrorsComponent, i3.CoreMarkRequiredComponent, i4.NgControlStatus, i4.NgControlStatusGroup, i5.IonSelect, i5.IonSelectOption, i5.SelectValueAccessor, i4.FormGroupDirective, i4.FormControlName, i6.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["AddonModDataFieldPluginBaseComponent","i0","ɵɵelement","ɵɵproperty","ctx_r2","field","required","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","option_r5","ɵɵadvance","ɵɵtextInterpolate","ctx_r4","form","controls","id","error","ɵɵtemplate","AddonModDataFieldRadiobuttonComponent_span_0_span_1_Template","AddonModDataFieldRadiobuttonComponent_span_0_ion_select_option_9_Template","AddonModDataFieldRadiobuttonComponent_span_0_core_input_errors_10_Template","ctx_r0","editMode","ɵɵpipeBind1","ɵɵpureFunction1","_c0","name","options","ctx_r1","value","content","AddonModDataFieldRadiobuttonComponent","constructor","init","displayMode","param1","split","val","addControl","t","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","AddonModDataFieldRadiobuttonComponent_Template","rf","ctx","AddonModDataFieldRadiobuttonComponent_span_0_Template","AddonModDataFieldRadiobuttonComponent_span_1_Template","inputMode"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/fields/radiobutton/component/radiobutton.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/fields/radiobutton/component/addon-mod-data-field-radiobutton.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component } from '@angular/core';\nimport { AddonModDataFieldPluginBaseComponent } from '../../../classes/base-field-plugin-component';\n\n/**\n * Component to render data radiobutton field.\n */\n@Component({\n    selector: 'addon-mod-data-field-radiobutton',\n    templateUrl: 'addon-mod-data-field-radiobutton.html',\n})\nexport class AddonModDataFieldRadiobuttonComponent extends AddonModDataFieldPluginBaseComponent {\n\n    options: string[] = [];\n\n    /**\n     * Initialize field.\n     */\n    protected init(): void {\n        if (this.displayMode) {\n            return;\n        }\n\n        this.options = this.field.param1.split('\\n');\n\n        let val: string | undefined;\n        if (this.editMode && this.value) {\n            val = this.value.content;\n        }\n\n        this.addControl('f_' + this.field.id, val);\n    }\n\n}\n","<span *ngIf=\"inputMode && form\" [formGroup]=\"form\">\n    <span *ngIf=\"editMode\" [core-mark-required]=\"field.required\" class=\"core-mark-required\"></span>\n    <ion-select [formControlName]=\"'f_'+field.id\" [placeholder]=\"'addon.mod_data.menuchoose' | translate\"\n        [cancelText]=\"'core.cancel' | translate\" [okText]=\"'core.ok' | translate\" [interfaceOptions]=\"{header: field.name}\"\n        interface=\"alert\">\n        <ion-select-option value=\"\">{{ 'addon.mod_data.menuchoose' | translate }}</ion-select-option>\n        <ion-select-option *ngFor=\"let option of options\" [value]=\"option\">{{option}}</ion-select-option>\n    </ion-select>\n    <core-input-errors *ngIf=\"error && editMode\" [control]=\"form.controls['f_'+field.id]\" [errorText]=\"error\" />\n</span>\n\n<span *ngIf=\"displayMode && value && value.content\">{{ value.content }}</span>\n"],"mappings":";AAeA,SAASA,oCAAoC,QAAQ,8CAA8C;;;;;;;;;;ICd/FC,EAAA,CAAAC,SAAA,cAA+F;;;;IAAxED,EAAA,CAAAE,UAAA,uBAAAC,MAAA,CAAAC,KAAA,CAAAC,QAAA,CAAqC;;;;;IAKxDL,EAAA,CAAAM,cAAA,2BAAmE;IAAAN,EAAA,CAAAO,MAAA,GAAU;IAAAP,EAAA,CAAAQ,YAAA,EAAoB;;;;IAA/CR,EAAA,CAAAE,UAAA,UAAAO,SAAA,CAAgB;IAACT,EAAA,CAAAU,SAAA,GAAU;IAAVV,EAAA,CAAAW,iBAAA,CAAAF,SAAA,CAAU;;;;;IAEjFT,EAAA,CAAAC,SAAA,4BAA4G;;;;IAA/DD,EAAA,CAAAE,UAAA,YAAAU,MAAA,CAAAC,IAAA,CAAAC,QAAA,QAAAF,MAAA,CAAAR,KAAA,CAAAW,EAAA,EAAwC,cAAAH,MAAA,CAAAI,KAAA;;;;;;;;;;IARzFhB,EAAA,CAAAM,cAAA,cAAmD;IAC/CN,EAAA,CAAAiB,UAAA,IAAAC,4DAAA,kBAA+F;IAC/FlB,EAAA,CAAAM,cAAA,oBAEsB;;;;IAClBN,EAAA,CAAAM,cAAA,2BAA4B;IAAAN,EAAA,CAAAO,MAAA,GAA6C;;IAAAP,EAAA,CAAAQ,YAAA,EAAoB;IAC7FR,EAAA,CAAAiB,UAAA,IAAAE,yEAAA,+BAAiG;IACrGnB,EAAA,CAAAQ,YAAA,EAAa;IACbR,EAAA,CAAAiB,UAAA,KAAAG,0EAAA,+BAA4G;IAChHpB,EAAA,CAAAQ,YAAA,EAAO;;;;IATyBR,EAAA,CAAAE,UAAA,cAAAmB,MAAA,CAAAR,IAAA,CAAkB;IACvCb,EAAA,CAAAU,SAAA,GAAc;IAAdV,EAAA,CAAAE,UAAA,SAAAmB,MAAA,CAAAC,QAAA,CAAc;IACTtB,EAAA,CAAAU,SAAA,GAAiC;IAAjCV,EAAA,CAAAE,UAAA,2BAAAmB,MAAA,CAAAjB,KAAA,CAAAW,EAAA,CAAiC,gBAAAf,EAAA,CAAAuB,WAAA,oDAAAvB,EAAA,CAAAuB,WAAA,kCAAAvB,EAAA,CAAAuB,WAAA,wCAAAvB,EAAA,CAAAwB,eAAA,KAAAC,GAAA,EAAAJ,MAAA,CAAAjB,KAAA,CAAAsB,IAAA;IAGb1B,EAAA,CAAAU,SAAA,GAA6C;IAA7CV,EAAA,CAAAW,iBAAA,CAAAX,EAAA,CAAAuB,WAAA,qCAA6C;IACnCvB,EAAA,CAAAU,SAAA,GAAU;IAAVV,EAAA,CAAAE,UAAA,YAAAmB,MAAA,CAAAM,OAAA,CAAU;IAEhC3B,EAAA,CAAAU,SAAA,GAAuB;IAAvBV,EAAA,CAAAE,UAAA,SAAAmB,MAAA,CAAAL,KAAA,IAAAK,MAAA,CAAAC,QAAA,CAAuB;;;;;IAG/CtB,EAAA,CAAAM,cAAA,WAAoD;IAAAN,EAAA,CAAAO,MAAA,GAAmB;IAAAP,EAAA,CAAAQ,YAAA,EAAO;;;;IAA1BR,EAAA,CAAAU,SAAA,GAAmB;IAAnBV,EAAA,CAAAW,iBAAA,CAAAiB,MAAA,CAAAC,KAAA,CAAAC,OAAA,CAAmB;;;ADMvE;;;AAOA,OAAM,MAAOC,qCAAsC,SAAQhC,oCAAoC;EAJ/FiC,YAAA;;IAMI,KAAAL,OAAO,GAAa,EAAE;;EAEtB;;;EAGUM,IAAIA,CAAA;IACV,IAAI,IAAI,CAACC,WAAW,EAAE;MAClB;;IAGJ,IAAI,CAACP,OAAO,GAAG,IAAI,CAACvB,KAAK,CAAC+B,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;IAE5C,IAAIC,GAAuB;IAC3B,IAAI,IAAI,CAACf,QAAQ,IAAI,IAAI,CAACO,KAAK,EAAE;MAC7BQ,GAAG,GAAG,IAAI,CAACR,KAAK,CAACC,OAAO;;IAG5B,IAAI,CAACQ,UAAU,CAAC,IAAI,GAAG,IAAI,CAAClC,KAAK,CAACW,EAAE,EAAEsB,GAAG,CAAC;EAC9C;;SApBSN,qCAAsC;;;;iJAAtCA,MAAqC,IAAAQ,CAAA,IAArCR,MAAqC;EAAA;AAAA;;QAArCA,MAAqC;EAAAS,SAAA;EAAAC,QAAA,GAAAzC,EAAA,CAAA0C,0BAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,+CAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCxBlDhD,EAAA,CAAAiB,UAAA,IAAAiC,qDAAA,oBASO;MAEPlD,EAAA,CAAAiB,UAAA,IAAAkC,qDAAA,kBAA8E;;;MAXvEnD,EAAA,CAAAE,UAAA,SAAA+C,GAAA,CAAAG,SAAA,IAAAH,GAAA,CAAApC,IAAA,CAAuB;MAWvBb,EAAA,CAAAU,SAAA,GAA2C;MAA3CV,EAAA,CAAAE,UAAA,SAAA+C,GAAA,CAAAf,WAAA,IAAAe,GAAA,CAAApB,KAAA,IAAAoB,GAAA,CAAApB,KAAA,CAAAC,OAAA,CAA2C"},"metadata":{},"sourceType":"module","externalDependencies":[]}