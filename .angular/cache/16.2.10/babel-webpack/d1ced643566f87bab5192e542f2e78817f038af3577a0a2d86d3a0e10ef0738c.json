{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Application caches manager.\n */\nexport class CoreCacheManagerService {\n  constructor() {\n    this.invalidateListeners = [];\n  }\n  /**\n   * Register a listener to call when cache is invalidated.\n   *\n   * @param listener Listener.\n   */\n  registerInvalidateListener(listener) {\n    this.invalidateListeners.push(listener);\n  }\n  /**\n   * Invalidate cache.\n   */\n  invalidate() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield Promise.all(_this.invalidateListeners.map(listener => listener()));\n    })();\n  }\n}\n_class = CoreCacheManagerService;\n_class.ɵfac = function CoreCacheManagerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreCacheManager = makeSingleton(CoreCacheManagerService);","map":{"version":3,"names":["makeSingleton","CoreCacheManagerService","constructor","invalidateListeners","registerInvalidateListener","listener","push","invalidate","_this","_asyncToGenerator","Promise","all","map","factory","ɵfac","providedIn","CoreCacheManager"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/cache-manager.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { makeSingleton } from '@singletons';\n\nexport type InvalidateCacheListener = () => unknown;\n\n/**\n * Application caches manager.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreCacheManagerService {\n\n    protected invalidateListeners: InvalidateCacheListener[] = [];\n\n    /**\n     * Register a listener to call when cache is invalidated.\n     *\n     * @param listener Listener.\n     */\n    registerInvalidateListener(listener: InvalidateCacheListener): void {\n        this.invalidateListeners.push(listener);\n    }\n\n    /**\n     * Invalidate cache.\n     */\n    async invalidate(): Promise<void> {\n        await Promise.all(this.invalidateListeners.map(listener => listener()));\n    }\n\n}\n\nexport const CoreCacheManager = makeSingleton(CoreCacheManagerService);\n"],"mappings":";;AAeA,SAASA,aAAa,QAAQ,aAAa;;AAI3C;;;AAIA,OAAM,MAAOC,uBAAuB;EADpCC,YAAA;IAGc,KAAAC,mBAAmB,GAA8B,EAAE;;EAE7D;;;;;EAKAC,0BAA0BA,CAACC,QAAiC;IACxD,IAAI,CAACF,mBAAmB,CAACG,IAAI,CAACD,QAAQ,CAAC;EAC3C;EAEA;;;EAGME,UAAUA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACZ,MAAMC,OAAO,CAACC,GAAG,CAACH,KAAI,CAACL,mBAAmB,CAACS,GAAG,CAACP,QAAQ,IAAIA,QAAQ,EAAE,CAAC,CAAC;IAAC;EAC5E;;SAlBSJ,uBAAuB;;mBAAvBA,MAAuB;AAAA;;SAAvBA,MAAuB;EAAAY,OAAA,EAAvBZ,MAAuB,CAAAa,IAAA;EAAAC,UAAA,EADV;AAAM;AAuBhC,OAAO,MAAMC,gBAAgB,GAAGhB,aAAa,CAACC,uBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}