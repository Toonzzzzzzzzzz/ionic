{"ast":null,"code":"var _class;\nimport { ViewContainerRef, ComponentRef } from '@angular/core';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreLogger } from '@singletons/logger';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"dynamicComponent\"];\nfunction CoreDynamicComponent_ng_content_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngIf\", \"!instance\"]);\n  }\n}\nconst _c1 = [\"*\"];\n/**\n * Component to create another component dynamically.\n *\n * You need to pass the class of the component to this component (the class, not the name), along with the input data.\n *\n * So you should do something like:\n *\n *     import { MyComponent } from './component';\n *\n *     ...\n *\n *         this.component = MyComponent;\n *\n * And in the template:\n *\n *     <core-dynamic-component [component]=\"component\" [data]=\"data\">\n *         <p>Cannot render the data.</p>\n *     </core-dynamic-component>\n *\n * Alternatively, you can also supply a ComponentRef instead of the class of the component. In this case, the component won't\n * be instantiated because it already is, it will be attached to the view and the right data will be passed to it.\n * Passing ComponentRef is meant for site plugins.\n *\n * The contents of this component will be displayed if no component is supplied or it cannot be created. In the example above,\n * if no component is supplied then the template will show the message \"Cannot render the data.\".\n */\nexport class CoreDynamicComponent {\n  // Get the container where to put the dynamic component.\n  set dynamicComponent(el) {\n    this.container = el;\n    // Use a timeout to avoid ExpressionChangedAfterItHasBeenCheckedError.\n    setTimeout(() => this.createComponent());\n  }\n  constructor(differs, cdr, element) {\n    this.cdr = cdr;\n    this.element = element;\n    this.logger = CoreLogger.getInstance('CoreDynamicComponent');\n    this.differ = differs.find([]).create();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnChanges(changes) {\n    if (changes.component && !this.component) {\n      var _this$container;\n      // Component not set, destroy the instance if any.\n      this.lastComponent = undefined;\n      this.instance = undefined;\n      (_this$container = this.container) === null || _this$container === void 0 || _this$container.clear();\n    } else if (changes.component && (!this.instance || this.component != this.lastComponent)) {\n      this.createComponent();\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  ngDoCheck() {\n    if (this.instance) {\n      // Check if there's any change in the data object.\n      const changes = this.differ.diff(this.data || {});\n      if (changes) {\n        this.setInputData();\n        if (this.instance.ngOnChanges) {\n          this.instance.ngOnChanges(CoreDomUtils.createChangesFromKeyValueDiff(changes));\n        }\n      }\n    }\n  }\n  /**\n   * Call a certain method on the component.\n   *\n   * @param method Name of the method to call.\n   * @param params List of params to send to the method.\n   * @returns Result of the call. Undefined if the component instance is not ready.\n   */\n  callComponentMethod(method, ...params) {\n    var _this$instance;\n    if (typeof ((_this$instance = this.instance) === null || _this$instance === void 0 ? void 0 : _this$instance[method]) !== 'function') {\n      return;\n    }\n    return this.instance[method].apply(this.instance, params);\n  }\n  /**\n   * Create a component, add it to a container and set the input data.\n   *\n   * @returns Whether the component was successfully created.\n   */\n  createComponent() {\n    this.lastComponent = this.component;\n    if (!this.component || !this.container) {\n      // No component to instantiate or container doesn't exist right now.\n      return false;\n    }\n    if (this.instance) {\n      // Component already instantiated.\n      return true;\n    }\n    if (this.component instanceof ComponentRef) {\n      // A ComponentRef was supplied instead of the component class. Add it to the view.\n      this.container.insert(this.component.hostView);\n      this.instance = this.component.instance;\n      // This feature is usually meant for site plugins. Inject some properties.\n      this.instance['ChangeDetectorRef'] = this.cdr;\n      this.instance['componentContainer'] = this.element.nativeElement;\n    } else {\n      try {\n        // Create the component and add it to the container.\n        const componentRef = this.container.createComponent(this.component);\n        this.instance = componentRef.instance;\n      } catch (ex) {\n        this.logger.error('Error creating component', ex);\n        return false;\n      }\n    }\n    this.setInputData();\n    return true;\n  }\n  /**\n   * Set the input data for the component.\n   */\n  setInputData() {\n    for (const name in this.data) {\n      this.instance[name] = this.data[name];\n    }\n  }\n}\n_class = CoreDynamicComponent;\n_class.ɵfac = function CoreDynamicComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-dynamic-component\"]],\n  viewQuery: function CoreDynamicComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dynamicComponent = _t.first);\n    }\n  },\n  inputs: {\n    component: \"component\",\n    data: \"data\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c1,\n  decls: 3,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"dynamicComponent\", \"\"]],\n  template: function CoreDynamicComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, CoreDynamicComponent_ng_content_0_Template, 1, 0, \"ng-content\", 0);\n      i0.ɵɵelementContainer(1, null, 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.instance);\n    }\n  },\n  dependencies: [i1.NgIf],\n  styles: [\"[_nghost-%COMP%] { display: contents; }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9jb3JlL2NvbXBvbmVudHMvZHluYW1pYy1jb21wb25lbnQvZHluYW1pYy1jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxpQkFBaUIsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["ViewContainerRef","ComponentRef","CoreDomUtils","CoreLogger","i0","ɵɵprojection","CoreDynamicComponent","dynamicComponent","el","container","setTimeout","createComponent","constructor","differs","cdr","element","logger","getInstance","differ","find","create","ngOnChanges","changes","component","_this$container","lastComponent","undefined","instance","clear","ngDoCheck","diff","data","setInputData","createChangesFromKeyValueDiff","callComponentMethod","method","params","_this$instance","apply","insert","hostView","nativeElement","componentRef","ex","error","name","ɵɵdirectiveInject","KeyValueDiffers","ChangeDetectorRef","ElementRef","selectors","viewQuery","CoreDynamicComponent_Query","rf","ctx","ɵɵtemplate","CoreDynamicComponent_ng_content_0_Template","ɵɵelementContainer","ɵɵproperty"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/dynamic-component/dynamic-component.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/components/dynamic-component/core-dynamic-component.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { InstanceMethodParams, InstanceMethodReturn } from '@/core/utils/inference';\nimport {\n    Component,\n    Input,\n    ViewChild,\n    OnChanges,\n    DoCheck,\n    ViewContainerRef,\n    ComponentRef,\n    KeyValueDiffers,\n    SimpleChange,\n    ChangeDetectorRef,\n    ElementRef,\n    KeyValueDiffer,\n    Type,\n} from '@angular/core';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreLogger } from '@singletons/logger';\n\n/**\n * Component to create another component dynamically.\n *\n * You need to pass the class of the component to this component (the class, not the name), along with the input data.\n *\n * So you should do something like:\n *\n *     import { MyComponent } from './component';\n *\n *     ...\n *\n *         this.component = MyComponent;\n *\n * And in the template:\n *\n *     <core-dynamic-component [component]=\"component\" [data]=\"data\">\n *         <p>Cannot render the data.</p>\n *     </core-dynamic-component>\n *\n * Alternatively, you can also supply a ComponentRef instead of the class of the component. In this case, the component won't\n * be instantiated because it already is, it will be attached to the view and the right data will be passed to it.\n * Passing ComponentRef is meant for site plugins.\n *\n * The contents of this component will be displayed if no component is supplied or it cannot be created. In the example above,\n * if no component is supplied then the template will show the message \"Cannot render the data.\".\n */\n@Component({\n    selector: 'core-dynamic-component',\n    templateUrl: 'core-dynamic-component.html',\n    styles: [':host { display: contents; }'],\n})\nexport class CoreDynamicComponent<ComponentClass> implements OnChanges, DoCheck {\n\n    @Input() component?: Type<ComponentClass>;\n    @Input() data?: Record<string | number, unknown>;\n\n    // Get the container where to put the dynamic component.\n    @ViewChild('dynamicComponent', { read: ViewContainerRef })\n    set dynamicComponent(el: ViewContainerRef) {\n        this.container = el;\n\n        // Use a timeout to avoid ExpressionChangedAfterItHasBeenCheckedError.\n        setTimeout(() => this.createComponent());\n    }\n\n    instance?: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n    container?: ViewContainerRef;\n\n    protected logger: CoreLogger;\n    protected differ: KeyValueDiffer<unknown, unknown>; // To detect changes in the data input.\n    protected lastComponent?: Type<unknown>;\n\n    constructor(\n        differs: KeyValueDiffers,\n        protected cdr: ChangeDetectorRef,\n        protected element: ElementRef,\n    ) {\n\n        this.logger = CoreLogger.getInstance('CoreDynamicComponent');\n        this.differ = differs.find([]).create();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnChanges(changes: { [name: string]: SimpleChange }): void {\n        if (changes.component && !this.component) {\n            // Component not set, destroy the instance if any.\n            this.lastComponent = undefined;\n            this.instance = undefined;\n            this.container?.clear();\n        } else if (changes.component && (!this.instance || this.component != this.lastComponent)) {\n            this.createComponent();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngDoCheck(): void {\n        if (this.instance) {\n            // Check if there's any change in the data object.\n            const changes = this.differ.diff(this.data || {});\n            if (changes) {\n                this.setInputData();\n                if (this.instance.ngOnChanges) {\n                    this.instance.ngOnChanges(CoreDomUtils.createChangesFromKeyValueDiff(changes));\n                }\n            }\n        }\n    }\n\n    /**\n     * Call a certain method on the component.\n     *\n     * @param method Name of the method to call.\n     * @param params List of params to send to the method.\n     * @returns Result of the call. Undefined if the component instance is not ready.\n     */\n    callComponentMethod<Method extends keyof ComponentClass>(\n        method: Method,\n        ...params: InstanceMethodParams<ComponentClass, Method>\n    ): InstanceMethodReturn<ComponentClass, Method> | undefined {\n        if (typeof this.instance?.[method] !== 'function') {\n            return;\n        }\n\n        return this.instance[method].apply(this.instance, params);\n    }\n\n    /**\n     * Create a component, add it to a container and set the input data.\n     *\n     * @returns Whether the component was successfully created.\n     */\n    protected createComponent(): boolean {\n        this.lastComponent = this.component;\n\n        if (!this.component || !this.container) {\n            // No component to instantiate or container doesn't exist right now.\n            return false;\n        }\n\n        if (this.instance) {\n            // Component already instantiated.\n            return true;\n        }\n\n        if (this.component instanceof ComponentRef) {\n            // A ComponentRef was supplied instead of the component class. Add it to the view.\n            this.container.insert(this.component.hostView);\n            this.instance = this.component.instance;\n\n            // This feature is usually meant for site plugins. Inject some properties.\n            this.instance['ChangeDetectorRef'] = this.cdr;\n            this.instance['componentContainer'] = this.element.nativeElement;\n        } else {\n            try {\n                // Create the component and add it to the container.\n                const componentRef = this.container.createComponent(this.component);\n\n                this.instance = componentRef.instance;\n            } catch (ex) {\n                this.logger.error('Error creating component', ex);\n\n                return false;\n            }\n        }\n\n        this.setInputData();\n\n        return true;\n    }\n\n    /**\n     * Set the input data for the component.\n     */\n    protected setInputData(): void {\n        for (const name in this.data) {\n            this.instance[name] = this.data[name];\n        }\n    }\n\n}\n","<!-- Content to display if no dynamic component. -->\n<ng-content *ngIf=\"!instance\"></ng-content>\n\n<!-- Container of the dynamic component -->\n<ng-container #dynamicComponent />\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}