{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\n/**\n * Directive to adapt a textarea rows depending on the input text. It's based on Moodle's data-auto-rows.\n *\n * @description\n * Usage:\n * <textarea class=\"core-textarea\" [(ngModel)]=\"message\" rows=\"1\" [core-auto-rows]=\"message\"></textarea>\n */\nexport class CoreAutoRowsDirective {\n  constructor(element) {\n    this.element = element;\n    this.height = 0;\n    this.onResize = new EventEmitter();\n  }\n  /**\n   * Resize after initialized.\n   */\n  ngAfterViewInit() {\n    // Wait for rendering of child views.\n    setTimeout(() => {\n      this.resize();\n    }, 300);\n  }\n  /**\n   * Resize when content changes.\n   */\n  ngOnChanges() {\n    this.resize();\n    if (this.value === '') {\n      // Maybe the form was resetted. In that case it takes a bit to update the height.\n      setTimeout(() => this.resize(), 300);\n    }\n  }\n  /**\n   * Resize the textarea.\n   */\n  resize() {\n    let nativeElement = this.element.nativeElement;\n    if (nativeElement.tagName == 'ION-TEXTAREA') {\n      // Search the actual textarea.\n      const textarea = nativeElement.querySelector('textarea');\n      if (!textarea) {\n        return;\n      }\n      nativeElement = textarea;\n    }\n    // Set height to 1px to force scroll height to calculate correctly.\n    nativeElement.style.height = '1px';\n    nativeElement.style.height = nativeElement.scrollHeight + 'px';\n    // Emit event when resizing.\n    if (this.height != nativeElement.scrollHeight) {\n      this.height = nativeElement.scrollHeight;\n      this.onResize.emit();\n    }\n  }\n}\n_class = CoreAutoRowsDirective;\n_class.ɵfac = function CoreAutoRowsDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"textarea\", \"core-auto-rows\", \"\"], [\"ion-textarea\", \"core-auto-rows\", \"\"]],\n  inputs: {\n    value: [\"core-auto-rows\", \"value\"]\n  },\n  outputs: {\n    onResize: \"onResize\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});","map":{"version":3,"names":["EventEmitter","CoreAutoRowsDirective","constructor","element","height","onResize","ngAfterViewInit","setTimeout","resize","ngOnChanges","value","nativeElement","tagName","textarea","querySelector","style","scrollHeight","emit","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs","outputs","features","ɵɵNgOnChangesFeature"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/directives/auto-rows.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Directive, ElementRef, Output, EventEmitter, AfterViewInit, Input, OnChanges } from '@angular/core';\n\n/**\n * Directive to adapt a textarea rows depending on the input text. It's based on Moodle's data-auto-rows.\n *\n * @description\n * Usage:\n * <textarea class=\"core-textarea\" [(ngModel)]=\"message\" rows=\"1\" [core-auto-rows]=\"message\"></textarea>\n */\n@Directive({\n    selector: 'textarea[core-auto-rows], ion-textarea[core-auto-rows]',\n})\nexport class CoreAutoRowsDirective implements AfterViewInit, OnChanges {\n\n    protected height = 0;\n\n    @Input('core-auto-rows') value?: string;\n    @Output() onResize: EventEmitter<void>; // Emit when resizing the textarea.\n\n    constructor(protected element: ElementRef) {\n        this.onResize = new EventEmitter();\n    }\n\n    /**\n     * Resize after initialized.\n     */\n    ngAfterViewInit(): void {\n        // Wait for rendering of child views.\n        setTimeout(() => {\n            this.resize();\n        }, 300);\n    }\n\n    /**\n     * Resize when content changes.\n     */\n    ngOnChanges(): void {\n        this.resize();\n\n        if (this.value === '') {\n            // Maybe the form was resetted. In that case it takes a bit to update the height.\n            setTimeout(() => this.resize(), 300);\n        }\n    }\n\n    /**\n     * Resize the textarea.\n     */\n    protected resize(): void {\n        let nativeElement: HTMLElement = this.element.nativeElement;\n        if (nativeElement.tagName == 'ION-TEXTAREA') {\n            // Search the actual textarea.\n            const textarea = nativeElement.querySelector('textarea');\n            if (!textarea) {\n                return;\n            }\n\n            nativeElement = textarea;\n        }\n\n        // Set height to 1px to force scroll height to calculate correctly.\n        nativeElement.style.height = '1px';\n        nativeElement.style.height = nativeElement.scrollHeight + 'px';\n\n        // Emit event when resizing.\n        if (this.height != nativeElement.scrollHeight) {\n            this.height = nativeElement.scrollHeight;\n            this.onResize.emit();\n        }\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAwCA,YAAY,QAAyC,eAAe;;AAE5G;;;;;;;AAUA,OAAM,MAAOC,qBAAqB;EAO9BC,YAAsBC,OAAmB;IAAnB,KAAAA,OAAO,GAAPA,OAAO;IALnB,KAAAC,MAAM,GAAG,CAAC;IAMhB,IAAI,CAACC,QAAQ,GAAG,IAAIL,YAAY,EAAE;EACtC;EAEA;;;EAGAM,eAAeA,CAAA;IACX;IACAC,UAAU,CAAC,MAAK;MACZ,IAAI,CAACC,MAAM,EAAE;IACjB,CAAC,EAAE,GAAG,CAAC;EACX;EAEA;;;EAGAC,WAAWA,CAAA;IACP,IAAI,CAACD,MAAM,EAAE;IAEb,IAAI,IAAI,CAACE,KAAK,KAAK,EAAE,EAAE;MACnB;MACAH,UAAU,CAAC,MAAM,IAAI,CAACC,MAAM,EAAE,EAAE,GAAG,CAAC;;EAE5C;EAEA;;;EAGUA,MAAMA,CAAA;IACZ,IAAIG,aAAa,GAAgB,IAAI,CAACR,OAAO,CAACQ,aAAa;IAC3D,IAAIA,aAAa,CAACC,OAAO,IAAI,cAAc,EAAE;MACzC;MACA,MAAMC,QAAQ,GAAGF,aAAa,CAACG,aAAa,CAAC,UAAU,CAAC;MACxD,IAAI,CAACD,QAAQ,EAAE;QACX;;MAGJF,aAAa,GAAGE,QAAQ;;IAG5B;IACAF,aAAa,CAACI,KAAK,CAACX,MAAM,GAAG,KAAK;IAClCO,aAAa,CAACI,KAAK,CAACX,MAAM,GAAGO,aAAa,CAACK,YAAY,GAAG,IAAI;IAE9D;IACA,IAAI,IAAI,CAACZ,MAAM,IAAIO,aAAa,CAACK,YAAY,EAAE;MAC3C,IAAI,CAACZ,MAAM,GAAGO,aAAa,CAACK,YAAY;MACxC,IAAI,CAACX,QAAQ,CAACY,IAAI,EAAE;;EAE5B;;SAzDShB,qBAAqB;;mBAArBA,MAAqB,EAAAiB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;AAAA;;QAArBnB,MAAqB;EAAAoB,SAAA;EAAAC,MAAA;IAAAZ,KAAA;EAAA;EAAAa,OAAA;IAAAlB,QAAA;EAAA;EAAAmB,QAAA,GAAAN,EAAA,CAAAO,oBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}