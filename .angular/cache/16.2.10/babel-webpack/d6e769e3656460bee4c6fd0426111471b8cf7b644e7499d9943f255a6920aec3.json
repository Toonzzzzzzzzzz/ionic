{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { AddonMessageOutputDelegate } from '@addons/messageoutput/services/messageoutput-delegate';\nimport { AddonModAssignFeedbackDelegate } from '@addons/mod/assign/services/feedback-delegate';\nimport { AddonModAssignSubmissionDelegate } from '@addons/mod/assign/services/submission-delegate';\nimport { AddonModQuizAccessRuleDelegate } from '@addons/mod/quiz/services/access-rules-delegate';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreBlockDelegate } from '@features/block/services/block-delegate';\nimport { CoreCompile } from '@features/compile/services/compile';\nimport { CoreCourseOptionsDelegate } from '@features/course/services/course-options-delegate';\nimport { CoreCourseFormatDelegate } from '@features/course/services/format-delegate';\nimport { CoreCourseModuleDelegate } from '@features/course/services/module-delegate';\nimport { CoreCourseModulePrefetchDelegate } from '@features/course/services/module-prefetch-delegate';\nimport { CoreCoursesProvider } from '@features/courses/services/courses';\nimport { CoreMainMenuDelegate } from '@features/mainmenu/services/mainmenu-delegate';\nimport { CoreQuestionBehaviourDelegate } from '@features/question/services/behaviour-delegate';\nimport { CoreQuestionDelegate } from '@features/question/services/question-delegate';\nimport { CoreSettingsDelegate } from '@features/settings/services/settings-delegate';\nimport { CoreUserDelegate } from '@features/user/services/user-delegate';\nimport { CoreUserProfileFieldDelegate } from '@features/user/services/user-profile-field-delegate';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreLang } from '@services/lang';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWS } from '@services/ws';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreSitePluginsAssignFeedbackHandler } from '../classes/handlers/assign-feedback-handler';\nimport { CoreSitePluginsAssignSubmissionHandler } from '../classes/handlers/assign-submission-handler';\nimport { CoreSitePluginsBlockHandler } from '../classes/handlers/block-handler';\nimport { CoreSitePluginsCourseFormatHandler } from '../classes/handlers/course-format-handler';\nimport { CoreSitePluginsCourseOptionHandler } from '../classes/handlers/course-option-handler';\nimport { CoreSitePluginsMainMenuHandler } from '../classes/handlers/main-menu-handler';\nimport { CoreSitePluginsMessageOutputHandler } from '../classes/handlers/message-output-handler';\nimport { CoreSitePluginsModuleHandler } from '../classes/handlers/module-handler';\nimport { CoreSitePluginsModulePrefetchHandler } from '../classes/handlers/module-prefetch-handler';\nimport { CoreSitePluginsQuestionBehaviourHandler } from '../classes/handlers/question-behaviour-handler';\nimport { CoreSitePluginsQuestionHandler } from '../classes/handlers/question-handler';\nimport { CoreSitePluginsQuizAccessRuleHandler } from '../classes/handlers/quiz-access-rule-handler';\nimport { CoreSitePluginsSettingsHandler } from '../classes/handlers/settings-handler';\nimport { CoreSitePluginsUserProfileHandler } from '../classes/handlers/user-handler';\nimport { CoreSitePluginsUserProfileFieldHandler } from '../classes/handlers/user-profile-field-handler';\nimport { CoreSitePlugins, CoreSitePluginsProvider } from './siteplugins';\nimport { makeSingleton } from '@singletons';\nimport { CoreMainMenuHomeDelegate } from '@features/mainmenu/services/home-delegate';\nimport { CoreSitePluginsMainMenuHomeHandler } from '../classes/handlers/main-menu-home-handler';\nimport { AddonWorkshopAssessmentStrategyDelegate } from '@addons/mod/workshop/services/assessment-strategy-delegate';\nimport { CoreSitePluginsWorkshopAssessmentStrategyHandler } from '../classes/handlers/workshop-assessment-strategy-handler';\nimport { CoreContentLinksModuleIndexHandler } from '@features/contentlinks/classes/module-index-handler';\nimport { CoreContentLinksDelegate } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreContentLinksModuleListHandler } from '@features/contentlinks/classes/module-list-handler';\nimport { CoreObject } from '@singletons/object';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CorePath } from '@singletons/path';\nimport { CoreEnrolAction, CoreEnrolDelegate } from '@features/enrol/services/enrol-delegate';\nimport { CoreSitePluginsEnrolHandler } from '../classes/handlers/enrol-handler';\nimport * as i0 from \"@angular/core\";\nconst HANDLER_DISABLED = 'core_site_plugins_helper_handler_disabled';\n/**\n * Helper service to provide functionalities regarding site plugins. It basically has the features to load and register site\n * plugin.\n *\n * This code is split from CoreSitePluginsProvider to prevent circular dependencies.\n *\n * @todo Support ViewChild and similar in site plugins. Possible solution: make components and directives inject the instance\n * inside the host DOM element?\n */\nexport class CoreSitePluginsHelperProvider {\n  constructor() {\n    this.courseRestrictHandlers = {};\n    this.logger = CoreLogger.getInstance('CoreSitePluginsHelperProvider');\n  }\n  /**\n   * Initialize.\n   */\n  initialize() {\n    var _this = this;\n    // Fetch the plugins on login.\n    CoreEvents.on(CoreEvents.LOGIN, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (data) {\n        try {\n          const plugins = yield CoreUtils.ignoreErrors(CoreSitePlugins.getPlugins(data.siteId));\n          // Plugins fetched, check that site hasn't changed.\n          if (data.siteId != CoreSites.getCurrentSiteId() || !(plugins !== null && plugins !== void 0 && plugins.length)) {\n            return;\n          }\n          // Site is still the same. Load the plugins and trigger the event.\n          try {\n            yield _this.loadSitePlugins(plugins);\n          } finally {\n            CoreEvents.trigger(CoreEvents.SITE_PLUGINS_LOADED, {}, data.siteId);\n          }\n        } catch (error) {\n          _this.logger.error(error);\n        } finally {\n          CoreSitePlugins.setPluginsFetched();\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    // Re-load plugins restricted for courses when the list of user courses changes.\n    CoreEvents.on(CoreCoursesProvider.EVENT_MY_COURSES_CHANGED, data => {\n      if (data && data.siteId && data.siteId == CoreSites.getCurrentSiteId() && data.added && data.added.length) {\n        this.reloadCourseRestrictHandlers();\n      }\n    });\n  }\n  /**\n   * Download the styles for a handler (if any).\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param siteId Site ID. If not provided, current site.\n   * @returns Promise resolved with the CSS code.\n   */\n  downloadStyles(plugin, handlerName, handlerSchema, siteId) {\n    return _asyncToGenerator(function* () {\n      var _handlerSchema$styles, _handlerSchema$styles2, _handlerSchema$styles3;\n      const site = yield CoreSites.getSite(siteId);\n      // Make sure it's an absolute URL. Do not use toAbsoluteURL because it can change the behaviour and break plugin styles.\n      let url = (_handlerSchema$styles = handlerSchema.styles) === null || _handlerSchema$styles === void 0 ? void 0 : _handlerSchema$styles.url;\n      if (url && !CoreUrlUtils.isAbsoluteURL(url)) {\n        url = CorePath.concatenatePaths(site.getURL(), url);\n      }\n      if (url && (_handlerSchema$styles2 = handlerSchema.styles) !== null && _handlerSchema$styles2 !== void 0 && _handlerSchema$styles2.version) {\n        // Add the version to the URL to prevent getting a cached file.\n        url += (url.indexOf('?') != -1 ? '&' : '?') + 'version=' + handlerSchema.styles.version;\n      }\n      const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n      const componentId = uniqueName + '#main';\n      // Remove the CSS files for this handler that aren't used anymore. Don't block the call for this.\n      const files = yield CoreUtils.ignoreErrors(CoreFilepool.getFilesByComponent(site.getId(), CoreSitePluginsProvider.COMPONENT, componentId));\n      files === null || files === void 0 || files.forEach(file => {\n        if (file.url !== url) {\n          // It's not the current file, delete it.\n          CoreUtils.ignoreErrors(CoreFilepool.removeFileByUrl(site.getId(), file.url));\n        }\n      });\n      if (!url) {\n        // No styles.\n        return '';\n      }\n      // Update the schema with the final CSS URL.\n      if (handlerSchema.styles) {\n        handlerSchema.styles.url = url;\n      }\n      // Download the file if not downloaded or the version changed.\n      const path = yield CoreFilepool.downloadUrl(site.getId(), url, false, CoreSitePluginsProvider.COMPONENT, componentId, 0, undefined, undefined, undefined, (_handlerSchema$styles3 = handlerSchema.styles) === null || _handlerSchema$styles3 === void 0 ? void 0 : _handlerSchema$styles3.version);\n      // File is downloaded, get the contents.\n      return CoreWS.getText(path);\n    })();\n  }\n  /**\n   * Execute a handler's init method if it has any.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns Promise resolved when done. It returns the results of the getContent call and the data returned by\n   *         the init JS (if any).\n   */\n  executeHandlerInit(plugin, handlerSchema) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!handlerSchema.init) {\n        return null;\n      }\n      return _this2.executeMethodAndJS(plugin, handlerSchema.init, true);\n    })();\n  }\n  /**\n   * Execute a get_content method and run its javascript (if any).\n   *\n   * @param plugin Data of the plugin.\n   * @param method The method to call.\n   * @param isInit Whether it's the init method.\n   * @returns Promise resolved with the results of the getContent call and the data returned by the JS (if any).\n   */\n  executeMethodAndJS(plugin, method, isInit) {\n    return _asyncToGenerator(function* () {\n      const siteId = CoreSites.getCurrentSiteId();\n      const preSets = {\n        getFromCache: false,\n        deleteCacheIfWSError: isInit // If the init WS call returns an exception we won't use cached data.\n      };\n\n      const result = yield CoreSitePlugins.getContent(plugin.component, method, {}, preSets);\n      if (!result.javascript || CoreSites.getCurrentSiteId() != siteId) {\n        // No javascript or site has changed, stop.\n        return result;\n      }\n      // Create a \"fake\" instance to hold all the libraries.\n      const lazyLibraries = yield CoreCompile.getLazyLibraries();\n      const instance = {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        HANDLER_DISABLED: HANDLER_DISABLED\n      };\n      CoreCompile.injectLibraries(instance, lazyLibraries);\n      // Add some data of the WS call result.\n      const jsData = CoreSitePlugins.createDataForJS(result);\n      for (const name in jsData) {\n        instance[name] = jsData[name];\n      }\n      // Now execute the javascript using this instance.\n      result.jsResult = CoreCompile.executeJavascript(instance, result.javascript);\n      if (result.jsResult == HANDLER_DISABLED) {\n        // The \"disabled\" field was added in 3.8, this is a workaround for previous versions.\n        result.disabled = true;\n      }\n      return result;\n    })();\n  }\n  /**\n   * Given an addon name, return the prefix to add to its string keys.\n   *\n   * @param addon Name of the addon (plugin.addon).\n   * @returns Prefix.\n   */\n  getPrefixForStrings(addon) {\n    if (addon) {\n      return 'plugin.' + addon + '.';\n    }\n    return '';\n  }\n  /**\n   * Given an addon name and the key of a string, return the full string key (prefixed).\n   *\n   * @param addon Name of the addon (plugin.addon).\n   * @param key The key of the string.\n   * @returns Full string key.\n   */\n  getPrefixedString(addon, key) {\n    return this.getPrefixForStrings(addon) + key;\n  }\n  /**\n   * Load the lang strings for a plugin.\n   *\n   * @param plugin Data of the plugin.\n   */\n  loadLangStrings(plugin) {\n    if (!plugin.parsedLang) {\n      return;\n    }\n    for (const lang in plugin.parsedLang) {\n      const prefix = this.getPrefixForStrings(plugin.addon);\n      CoreLang.addSitePluginsStrings(lang, plugin.parsedLang[lang], prefix);\n    }\n  }\n  /**\n   * Load a site plugin.\n   *\n   * @param plugin Data of the plugin.\n   * @returns Promise resolved when loaded.\n   */\n  loadSitePlugin(plugin) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.logger.debug('Load site plugin:', plugin);\n      if (!plugin.parsedHandlers && plugin.handlers) {\n        plugin.parsedHandlers = CoreTextUtils.parseJSON(plugin.handlers, null, error => _this3.logger.error('Error parsing site plugin handlers', error));\n      }\n      if (!plugin.parsedLang && plugin.lang) {\n        plugin.parsedLang = CoreTextUtils.parseJSON(plugin.lang, null, error => _this3.logger.error('Error parsing site plugin lang', error));\n      }\n      CoreSitePlugins.setPluginsLoaded(true);\n      // Register lang strings.\n      _this3.loadLangStrings(plugin);\n      if (plugin.parsedHandlers) {\n        // Register all the handlers.\n        const parsedHandlers = plugin.parsedHandlers;\n        yield CoreUtils.allPromises(Object.keys(parsedHandlers).map( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (name) {\n            yield _this3.registerHandler(plugin, name, parsedHandlers[name]);\n          });\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }()));\n      }\n    })();\n  }\n  /**\n   * Load site plugins.\n   *\n   * @param plugins The plugins to load.\n   * @returns Promise resolved when loaded.\n   */\n  loadSitePlugins(plugins) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.courseRestrictHandlers = {};\n      yield CoreUtils.allPromises(plugins.map( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (plugin) {\n          const pluginPromise = _this4.loadSitePlugin(plugin);\n          CoreSitePlugins.registerSitePluginPromise(plugin.component, pluginPromise);\n          yield pluginPromise;\n        });\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n  /**\n   * Load the styles for a handler.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param fileUrl CSS file URL.\n   * @param cssCode CSS code.\n   * @param version Styles version.\n   * @param siteId Site ID. If not provided, current site.\n   */\n  loadStyles(plugin, handlerName, fileUrl, cssCode, version, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    // Create the style and add it to the header.\n    const styleEl = document.createElement('style');\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    styleEl.setAttribute('id', 'siteplugin-' + uniqueName);\n    styleEl.innerHTML = cssCode;\n    // To ensure consistency, insert in alphabetical order among other site plugin styles.\n    let lowestGreater = null;\n    Array.from(document.head.querySelectorAll('style')).forEach(other => {\n      if (/^siteplugin-/.test(other.id) && other.id > styleEl.id) {\n        if (lowestGreater === null || other.id < lowestGreater.id) {\n          lowestGreater = other;\n        }\n      }\n    });\n    if (lowestGreater) {\n      document.head.insertBefore(styleEl, lowestGreater);\n    } else {\n      document.head.appendChild(styleEl);\n    }\n    // Styles have been loaded, now treat the CSS.\n    CoreUtils.ignoreErrors(CoreFilepool.treatCSSCode(siteId, fileUrl, cssCode, CoreSitePluginsProvider.COMPONENT, uniqueName, version));\n  }\n  /**\n   * Register a site plugin handler in the right delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns Promise resolved when done.\n   */\n  registerHandler(plugin, handlerName, handlerSchema) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      // Wait for the init JS to be executed and for the styles to be downloaded.\n      const siteId = CoreSites.getCurrentSiteId();\n      try {\n        var _handlerSchema$styles4;\n        const [initResult, cssCode] = yield Promise.all([_this5.executeHandlerInit(plugin, handlerSchema), _this5.downloadStyles(plugin, handlerName, handlerSchema, siteId).catch(error => {\n          _this5.logger.error('Error getting styles for plugin', handlerName, handlerSchema, error);\n        })]);\n        if (initResult !== null && initResult !== void 0 && initResult.disabled) {\n          // This handler is disabled for the current user, stop.\n          _this5.logger.warn('Handler disabled by init function', plugin, handlerSchema);\n          return;\n        }\n        if (cssCode && (_handlerSchema$styles4 = handlerSchema.styles) !== null && _handlerSchema$styles4 !== void 0 && _handlerSchema$styles4.url) {\n          // Load the styles.\n          _this5.loadStyles(plugin, handlerName, handlerSchema.styles.url, cssCode, handlerSchema.styles.version, siteId);\n        }\n        let uniqueName;\n        switch (handlerSchema.delegate) {\n          case 'CoreMainMenuDelegate':\n            uniqueName = _this5.registerMainMenuHandler(plugin, handlerName, handlerSchema, initResult);\n            break;\n          case 'CoreCourseModuleDelegate':\n            uniqueName = _this5.registerModuleHandler(plugin, handlerName, handlerSchema, initResult);\n            break;\n          case 'CoreUserDelegate':\n            uniqueName = _this5.registerUserProfileHandler(plugin, handlerName, handlerSchema, initResult);\n            break;\n          case 'CoreCourseOptionsDelegate':\n            uniqueName = _this5.registerCourseOptionHandler(plugin, handlerName, handlerSchema, initResult);\n            break;\n          case 'CoreCourseFormatDelegate':\n            uniqueName = _this5.registerCourseFormatHandler(plugin, handlerName, handlerSchema);\n            break;\n          case 'CoreUserProfileFieldDelegate':\n            uniqueName = yield _this5.registerUserProfileFieldHandler(plugin, handlerName, handlerSchema);\n            break;\n          case 'CoreSettingsDelegate':\n            uniqueName = _this5.registerSettingsHandler(plugin, handlerName, handlerSchema, initResult);\n            break;\n          case 'CoreQuestionDelegate':\n            uniqueName = yield _this5.registerQuestionHandler(plugin, handlerName, handlerSchema);\n            break;\n          case 'CoreQuestionBehaviourDelegate':\n            uniqueName = yield _this5.registerQuestionBehaviourHandler(plugin, handlerName, handlerSchema);\n            break;\n          case 'CoreBlockDelegate':\n            uniqueName = _this5.registerBlockHandler(plugin, handlerName, handlerSchema, initResult);\n            break;\n          case 'AddonMessageOutputDelegate':\n            uniqueName = _this5.registerMessageOutputHandler(plugin, handlerName, handlerSchema, initResult);\n            break;\n          case 'AddonModQuizAccessRuleDelegate':\n            uniqueName = yield _this5.registerQuizAccessRuleHandler(plugin, handlerName, handlerSchema);\n            break;\n          case 'AddonModAssignFeedbackDelegate':\n            uniqueName = yield _this5.registerAssignFeedbackHandler(plugin, handlerName, handlerSchema);\n            break;\n          case 'AddonModAssignSubmissionDelegate':\n            uniqueName = yield _this5.registerAssignSubmissionHandler(plugin, handlerName, handlerSchema);\n            break;\n          case 'AddonWorkshopAssessmentStrategyDelegate':\n            uniqueName = yield _this5.registerWorkshopAssessmentStrategyHandler(plugin, handlerName, handlerSchema);\n            break;\n          case 'CoreMainMenuHomeDelegate':\n            uniqueName = _this5.registerMainMenuHomeHandler(plugin, handlerName, handlerSchema, initResult);\n            break;\n          case 'CoreEnrolDelegate':\n            uniqueName = yield _this5.registerEnrolHandler(plugin, handlerName, handlerSchema, initResult);\n            break;\n          default:\n          // Nothing to do.\n        }\n\n        if (uniqueName) {\n          // Store the handler data.\n          CoreSitePlugins.setSitePluginHandler(uniqueName, {\n            plugin: plugin,\n            handlerName: handlerName,\n            handlerSchema: handlerSchema,\n            initResult\n          });\n        }\n      } catch (error) {\n        throw new CoreError('Error executing init method ' + handlerSchema.init + ': ' + error.message);\n      }\n    })();\n  }\n  /**\n   * Register a handler that relies in a \"componentInit\" function in a certain delegate.\n   * These type of handlers will return a generic template and its JS in the main method, so it will be called\n   * before registering the handler.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns A promise resolved with a string to identify the handler.\n   */\n  registerComponentInitHandler(plugin, handlerName, handlerSchema, delegate, createHandlerFn) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!handlerSchema.method) {\n        // Required data not provided, stop.\n        _this6.logger.warn('Ignore site plugin because it doesn\\'t provide method', plugin, handlerSchema);\n        return;\n      }\n      _this6.logger.debug('Register site plugin', plugin, handlerSchema);\n      try {\n        // Execute the main method and its JS. The template returned will be used in the right component.\n        const result = yield _this6.executeMethodAndJS(plugin, handlerSchema.method);\n        // Create and register the handler.\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const handler = createHandlerFn(uniqueName, result);\n        // Store in handlerSchema some data required by the component.\n        handlerSchema.methodTemplates = result.templates;\n        handlerSchema.methodJSResult = result.jsResult;\n        handlerSchema.methodOtherdata = result.otherdata;\n        if (result.jsResult) {\n          // Override default handler functions with the result of the method JS.\n          const jsResult = result.jsResult;\n          const handlerProperties = CoreObject.getAllPropertyNames(handler);\n          for (const property of handlerProperties) {\n            if (property !== 'constructor' && typeof handler[property] === 'function' && typeof jsResult[property] === 'function') {\n              handler[property] = jsResult[property].bind(handler);\n            }\n          }\n        }\n        delegate.registerHandler(handler);\n        return uniqueName;\n      } catch (error) {\n        _this6.logger.error('Error executing main method', plugin.component, handlerSchema.method, error);\n      }\n    })();\n  }\n  /**\n   * Given a handler in a plugin, register it in the assign feedback delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns Promise resolved with a string to identify the handler.\n   */\n  registerAssignFeedbackHandler(plugin, handlerName, handlerSchema) {\n    return this.registerComponentInitHandler(plugin, handlerName, handlerSchema, AddonModAssignFeedbackDelegate.instance, uniqueName => {\n      const type = (handlerSchema.moodlecomponent || plugin.component).replace('assignfeedback_', '');\n      const prefix = this.getPrefixForStrings(plugin.addon);\n      return new CoreSitePluginsAssignFeedbackHandler(uniqueName, type, prefix);\n    });\n  }\n  /**\n   * Given a handler in a plugin, register it in the assign submission delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns Promise resolved with a string to identify the handler.\n   */\n  registerAssignSubmissionHandler(plugin, handlerName, handlerSchema) {\n    return this.registerComponentInitHandler(plugin, handlerName, handlerSchema, AddonModAssignSubmissionDelegate.instance, uniqueName => {\n      const type = (handlerSchema.moodlecomponent || plugin.component).replace('assignsubmission_', '');\n      const prefix = this.getPrefixForStrings(plugin.addon);\n      return new CoreSitePluginsAssignSubmissionHandler(uniqueName, type, prefix);\n    });\n  }\n  /**\n   * Given a handler in a plugin, register it in the block delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param initResult Result of init function.\n   * @returns A string to identify the handler.\n   */\n  registerBlockHandler(plugin, handlerName, handlerSchema, initResult) {\n    var _handlerSchema$displa, _handlerSchema$displa2;\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    const blockName = (handlerSchema.moodlecomponent || plugin.component).replace('block_', '');\n    const titleString = (_handlerSchema$displa = (_handlerSchema$displa2 = handlerSchema.displaydata) === null || _handlerSchema$displa2 === void 0 ? void 0 : _handlerSchema$displa2.title) !== null && _handlerSchema$displa !== void 0 ? _handlerSchema$displa : 'pluginname';\n    const prefixedTitle = this.getPrefixedString(plugin.addon, titleString);\n    CoreBlockDelegate.registerHandler(new CoreSitePluginsBlockHandler(uniqueName, prefixedTitle, blockName, handlerSchema, initResult));\n    return uniqueName;\n  }\n  /**\n   * Given a handler in a plugin, register it in the course format delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns A string to identify the handler.\n   */\n  registerCourseFormatHandler(plugin, handlerName, handlerSchema) {\n    this.logger.debug('Register site plugin in course format delegate:', plugin, handlerSchema);\n    // Create and register the handler.\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    const formatName = (handlerSchema.moodlecomponent || plugin.component).replace('format_', '');\n    CoreCourseFormatDelegate.registerHandler(new CoreSitePluginsCourseFormatHandler(uniqueName, formatName, handlerSchema));\n    return uniqueName;\n  }\n  /**\n   * Given a handler in a plugin, register it in the course options delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param initResult Result of the init WS call.\n   * @returns A string to identify the handler.\n   */\n  registerCourseOptionHandler(plugin, handlerName, handlerSchema, initResult) {\n    var _initResult$restrict;\n    if (!handlerSchema.displaydata) {\n      // Required data not provided, stop.\n      this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n      return;\n    }\n    this.logger.debug('Register site plugin in course option delegate:', plugin, handlerSchema, initResult);\n    // Create and register the handler.\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n    const handler = new CoreSitePluginsCourseOptionHandler(uniqueName, prefixedTitle, plugin, handlerSchema, initResult);\n    CoreCourseOptionsDelegate.registerHandler(handler);\n    if (initResult !== null && initResult !== void 0 && (_initResult$restrict = initResult.restrict) !== null && _initResult$restrict !== void 0 && _initResult$restrict.courses) {\n      // This handler is restricted to certan courses, store it in the list.\n      this.courseRestrictHandlers[uniqueName] = {\n        plugin,\n        handlerName,\n        handlerSchema,\n        handler\n      };\n    }\n    return uniqueName;\n  }\n  /**\n   * Given a handler in a plugin, register it in the enrol delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param initResult Result of init function.\n   * @returns A string to identify the handler.\n   */\n  registerEnrolHandler(plugin, handlerName, handlerSchema, initResult) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      var _handlerSchema$enrolm;\n      const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n      const type = (handlerSchema.moodlecomponent || plugin.component).replace('enrol_', '');\n      const action = (_handlerSchema$enrolm = handlerSchema.enrolmentAction) !== null && _handlerSchema$enrolm !== void 0 ? _handlerSchema$enrolm : CoreEnrolAction.BROWSER;\n      const handler = new CoreSitePluginsEnrolHandler(uniqueName, type, action, handlerSchema, initResult);\n      if (!handlerSchema.method && (action === CoreEnrolAction.SELF || action === CoreEnrolAction.GUEST)) {\n        _this7.logger.error('\"self\" or \"guest\" enrol plugins must implement a method to override the required JS functions.');\n        return;\n      }\n      if (handlerSchema.method) {\n        var _result$jsResult, _result$jsResult2, _result$jsResult3;\n        // Execute the main method and its JS to allow implementing the handler functions.\n        const result = yield _this7.executeMethodAndJS(plugin, handlerSchema.method);\n        if (action === CoreEnrolAction.SELF && !((_result$jsResult = result.jsResult) !== null && _result$jsResult !== void 0 && _result$jsResult.enrol)) {\n          _this7.logger.error('\"self\" enrol plugins must implement an \"enrol\" function in the JS returned by the method.');\n          return;\n        }\n        if (action === CoreEnrolAction.GUEST && (!((_result$jsResult2 = result.jsResult) !== null && _result$jsResult2 !== void 0 && _result$jsResult2.canAccess) || !((_result$jsResult3 = result.jsResult) !== null && _result$jsResult3 !== void 0 && _result$jsResult3.validateAccess))) {\n          _this7.logger.error('\"guest\" enrol plugins must implement \"canAccess\" and \"validateAccess\" functions in the JS ' + 'returned by the method.');\n          return;\n        }\n        if (result.jsResult) {\n          // Override default handler functions with the result of the method JS.\n          const jsResult = result.jsResult;\n          const handlerProperties = CoreObject.getAllPropertyNames(handler);\n          for (const property of handlerProperties) {\n            if (property !== 'constructor' && typeof handler[property] === 'function' && typeof jsResult[property] === 'function') {\n              handler[property] = jsResult[property].bind(handler);\n            }\n          }\n        }\n      }\n      CoreEnrolDelegate.registerHandler(handler);\n      return uniqueName;\n    })();\n  }\n  /**\n   * Given a handler in a plugin, register it in the main menu delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param initResult Result of the init WS call.\n   * @returns A string to identify the handler.\n   */\n  registerMainMenuHandler(plugin, handlerName, handlerSchema, initResult) {\n    if (!handlerSchema.displaydata) {\n      // Required data not provided, stop.\n      this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n      return;\n    }\n    this.logger.debug('Register site plugin in main menu delegate:', plugin, handlerSchema, initResult);\n    // Create and register the handler.\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n    CoreMainMenuDelegate.registerHandler(new CoreSitePluginsMainMenuHandler(uniqueName, prefixedTitle, plugin, handlerSchema, initResult));\n    return uniqueName;\n  }\n  /**\n   * Given a handler in a plugin, register it in the message output delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param initResult Result of the init WS call.\n   * @returns A string to identify the handler.\n   */\n  registerMessageOutputHandler(plugin, handlerName, handlerSchema, initResult) {\n    if (!handlerSchema.displaydata) {\n      // Required data not provided, stop.\n      this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n      return;\n    }\n    this.logger.debug('Register site plugin in message output delegate:', plugin, handlerSchema, initResult);\n    // Create and register the handler.\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n    const processorName = (handlerSchema.moodlecomponent || plugin.component).replace('message_', '');\n    AddonMessageOutputDelegate.registerHandler(new CoreSitePluginsMessageOutputHandler(uniqueName, processorName, prefixedTitle, plugin, handlerSchema, initResult));\n    return uniqueName;\n  }\n  /**\n   * Given a handler in a plugin, register it in the module delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param initResult Result of the init WS call.\n   * @returns A string to identify the handler.\n   */\n  registerModuleHandler(plugin, handlerName, handlerSchema, initResult) {\n    if (!handlerSchema.displaydata) {\n      // Required data not provided, stop.\n      this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n      return;\n    }\n    this.logger.debug('Register site plugin in module delegate:', plugin, handlerSchema, initResult);\n    // Create and register the handler.\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    const modName = (handlerSchema.moodlecomponent || plugin.component).replace('mod_', '');\n    const moduleHandler = new CoreSitePluginsModuleHandler(uniqueName, modName, plugin, handlerSchema, initResult);\n    CoreCourseModuleDelegate.registerHandler(moduleHandler);\n    CoreSitePlugins.setModuleHandlerInstance(modName, moduleHandler);\n    if (handlerSchema.offlinefunctions && Object.keys(handlerSchema.offlinefunctions).length) {\n      // Register the prefetch handler.\n      CoreCourseModulePrefetchDelegate.registerHandler(new CoreSitePluginsModulePrefetchHandler(plugin.component, uniqueName, modName, handlerSchema));\n    }\n    // Create default link handlers if needed.\n    if (!moduleHandler.supportsNoViewLink() && handlerSchema.method && !handlerSchema.nolinkhandlers) {\n      const indexLinkHandler = new CoreContentLinksModuleIndexHandler(uniqueName, modName);\n      indexLinkHandler.name = uniqueName + '_indexlink';\n      indexLinkHandler.priority = -1; // Use -1 to give more priority to the plugins link handlers if any.\n      CoreContentLinksDelegate.registerHandler(indexLinkHandler);\n      const listLinkHandler = new CoreContentLinksModuleListHandler(uniqueName, modName);\n      listLinkHandler.name = uniqueName + '_listlink';\n      listLinkHandler.priority = -1; // Use -1 to give more priority to the plugins link handlers if any.\n      CoreContentLinksDelegate.registerHandler(listLinkHandler);\n    }\n    return uniqueName;\n  }\n  /**\n   * Given a handler in a plugin, register it in the question delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns Promise resolved with a string to identify the handler.\n   */\n  registerQuestionHandler(plugin, handlerName, handlerSchema) {\n    const component = handlerSchema.moodlecomponent || plugin.component;\n    return this.registerComponentInitHandler(plugin, handlerName, handlerSchema, CoreQuestionDelegate.instance, uniqueName => new CoreSitePluginsQuestionHandler(uniqueName, component));\n  }\n  /**\n   * Given a handler in a plugin, register it in the question behaviour delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns Promise resolved with a string to identify the handler.\n   */\n  registerQuestionBehaviourHandler(plugin, handlerName, handlerSchema) {\n    return this.registerComponentInitHandler(plugin, handlerName, handlerSchema, CoreQuestionBehaviourDelegate.instance, (uniqueName, result) => {\n      const type = (handlerSchema.moodlecomponent || plugin.component).replace('qbehaviour_', '');\n      return new CoreSitePluginsQuestionBehaviourHandler(uniqueName, type, !!result.templates.length);\n    });\n  }\n  /**\n   * Given a handler in a plugin, register it in the quiz access rule delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns Promise resolved with a string to identify the handler.\n   */\n  registerQuizAccessRuleHandler(plugin, handlerName, handlerSchema) {\n    const component = handlerSchema.moodlecomponent || plugin.component;\n    return this.registerComponentInitHandler(plugin, handlerName, handlerSchema, AddonModQuizAccessRuleDelegate.instance, (uniqueName, result) => new CoreSitePluginsQuizAccessRuleHandler(uniqueName, component, !!result.templates.length));\n  }\n  /**\n   * Given a handler in a plugin, register it in the settings delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param initResult Result of the init WS call.\n   * @returns A string to identify the handler.\n   */\n  registerSettingsHandler(plugin, handlerName, handlerSchema, initResult) {\n    if (!handlerSchema.displaydata) {\n      // Required data not provided, stop.\n      this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n      return;\n    }\n    this.logger.debug('Register site plugin in settings delegate:', plugin, handlerSchema, initResult);\n    // Create and register the handler.\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n    CoreSettingsDelegate.registerHandler(new CoreSitePluginsSettingsHandler(uniqueName, prefixedTitle, plugin, handlerSchema, initResult));\n    return uniqueName;\n  }\n  /**\n   * Given a handler in a plugin, register it in the user profile delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param initResult Result of the init WS call.\n   * @returns A string to identify the handler.\n   */\n  registerUserProfileHandler(plugin, handlerName, handlerSchema, initResult) {\n    if (!handlerSchema.displaydata) {\n      // Required data not provided, stop.\n      this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n      return;\n    }\n    this.logger.debug('Register site plugin in user profile delegate:', plugin, handlerSchema, initResult);\n    // Create and register the handler.\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n    const handler = new CoreSitePluginsUserProfileHandler(uniqueName, prefixedTitle, plugin, handlerSchema, initResult);\n    CoreUserDelegate.registerHandler(handler);\n    if (initResult && initResult.restrict && initResult.restrict.courses) {\n      // This handler is restricted to certan courses, store it in the list.\n      this.courseRestrictHandlers[uniqueName] = {\n        plugin,\n        handlerName,\n        handlerSchema,\n        handler\n      };\n    }\n    return uniqueName;\n  }\n  /**\n   * Given a handler in a plugin, register it in the user profile field delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns Promise resolved with a string to identify the handler.\n   */\n  registerUserProfileFieldHandler(plugin, handlerName, handlerSchema) {\n    return this.registerComponentInitHandler(plugin, handlerName, handlerSchema, CoreUserProfileFieldDelegate.instance, uniqueName => {\n      const fieldType = (handlerSchema.moodlecomponent || plugin.component).replace('profilefield_', '');\n      return new CoreSitePluginsUserProfileFieldHandler(uniqueName, fieldType);\n    });\n  }\n  /**\n   * Given a handler in a plugin, register it in the workshop assessment strategy delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @returns Promise resolved with a string to identify the handler.\n   */\n  registerWorkshopAssessmentStrategyHandler(plugin, handlerName, handlerSchema) {\n    return this.registerComponentInitHandler(plugin, handlerName, handlerSchema, AddonWorkshopAssessmentStrategyDelegate.instance, uniqueName => {\n      const strategyName = (handlerSchema.moodlecomponent || plugin.component).replace('workshopform_', '');\n      return new CoreSitePluginsWorkshopAssessmentStrategyHandler(uniqueName, strategyName);\n    });\n  }\n  /**\n   * Reload the handlers that are restricted to certain courses.\n   *\n   * @returns Promise resolved when done.\n   */\n  reloadCourseRestrictHandlers() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (!Object.keys(_this8.courseRestrictHandlers).length) {\n        // No course restrict handlers, nothing to do.\n        return;\n      }\n      yield Promise.all(Object.keys(_this8.courseRestrictHandlers).map( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (name) {\n          const data = _this8.courseRestrictHandlers[name];\n          if (!data.handler || !data.handler.setInitResult) {\n            // No handler or it doesn't implement a required function, ignore it.\n            return;\n          }\n          // Mark the handler as being updated.\n          data.handler.updatingInit && data.handler.updatingInit();\n          try {\n            const initResult = yield _this8.executeHandlerInit(data.plugin, data.handlerSchema);\n            data.handler.setInitResult(initResult);\n          } catch (error) {\n            _this8.logger.error('Error reloading course restrict handler', error, data.plugin);\n          }\n        });\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }()));\n      CoreEvents.trigger(CoreEvents.SITE_PLUGINS_COURSE_RESTRICT_UPDATED, {});\n    })();\n  }\n  /**\n   * Given a handler in a plugin, register it in the main menu home delegate.\n   *\n   * @param plugin Data of the plugin.\n   * @param handlerName Name of the handler in the plugin.\n   * @param handlerSchema Data about the handler.\n   * @param initResult Result of the init WS call.\n   * @returns A string to identify the handler.\n   */\n  registerMainMenuHomeHandler(plugin, handlerName, handlerSchema, initResult) {\n    if (!handlerSchema.displaydata) {\n      // Required data not provided, stop.\n      this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n      return;\n    }\n    this.logger.debug('Register site plugin in main menu home delegate:', plugin, handlerSchema, initResult);\n    // Create and register the handler.\n    const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n    const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n    CoreMainMenuHomeDelegate.registerHandler(new CoreSitePluginsMainMenuHomeHandler(uniqueName, prefixedTitle, plugin, handlerSchema, initResult));\n    return uniqueName;\n  }\n}\n_class = CoreSitePluginsHelperProvider;\n_class.ɵfac = function CoreSitePluginsHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreSitePluginsHelper = makeSingleton(CoreSitePluginsHelperProvider);","map":{"version":3,"names":["AddonMessageOutputDelegate","AddonModAssignFeedbackDelegate","AddonModAssignSubmissionDelegate","AddonModQuizAccessRuleDelegate","CoreError","CoreBlockDelegate","CoreCompile","CoreCourseOptionsDelegate","CoreCourseFormatDelegate","CoreCourseModuleDelegate","CoreCourseModulePrefetchDelegate","CoreCoursesProvider","CoreMainMenuDelegate","CoreQuestionBehaviourDelegate","CoreQuestionDelegate","CoreSettingsDelegate","CoreUserDelegate","CoreUserProfileFieldDelegate","CoreFilepool","CoreLang","CoreSites","CoreTextUtils","CoreUtils","CoreWS","CoreEvents","CoreLogger","CoreSitePluginsAssignFeedbackHandler","CoreSitePluginsAssignSubmissionHandler","CoreSitePluginsBlockHandler","CoreSitePluginsCourseFormatHandler","CoreSitePluginsCourseOptionHandler","CoreSitePluginsMainMenuHandler","CoreSitePluginsMessageOutputHandler","CoreSitePluginsModuleHandler","CoreSitePluginsModulePrefetchHandler","CoreSitePluginsQuestionBehaviourHandler","CoreSitePluginsQuestionHandler","CoreSitePluginsQuizAccessRuleHandler","CoreSitePluginsSettingsHandler","CoreSitePluginsUserProfileHandler","CoreSitePluginsUserProfileFieldHandler","CoreSitePlugins","CoreSitePluginsProvider","makeSingleton","CoreMainMenuHomeDelegate","CoreSitePluginsMainMenuHomeHandler","AddonWorkshopAssessmentStrategyDelegate","CoreSitePluginsWorkshopAssessmentStrategyHandler","CoreContentLinksModuleIndexHandler","CoreContentLinksDelegate","CoreContentLinksModuleListHandler","CoreObject","CoreUrlUtils","CorePath","CoreEnrolAction","CoreEnrolDelegate","CoreSitePluginsEnrolHandler","HANDLER_DISABLED","CoreSitePluginsHelperProvider","constructor","courseRestrictHandlers","logger","getInstance","initialize","_this","on","LOGIN","_ref","_asyncToGenerator","data","plugins","ignoreErrors","getPlugins","siteId","getCurrentSiteId","length","loadSitePlugins","trigger","SITE_PLUGINS_LOADED","error","setPluginsFetched","_x","apply","arguments","EVENT_MY_COURSES_CHANGED","added","reloadCourseRestrictHandlers","downloadStyles","plugin","handlerName","handlerSchema","_handlerSchema$styles","_handlerSchema$styles2","_handlerSchema$styles3","site","getSite","url","styles","isAbsoluteURL","concatenatePaths","getURL","version","indexOf","uniqueName","getHandlerUniqueName","componentId","files","getFilesByComponent","getId","COMPONENT","forEach","file","removeFileByUrl","path","downloadUrl","undefined","getText","executeHandlerInit","_this2","init","executeMethodAndJS","method","isInit","preSets","getFromCache","deleteCacheIfWSError","result","getContent","component","javascript","lazyLibraries","getLazyLibraries","instance","injectLibraries","jsData","createDataForJS","name","jsResult","executeJavascript","disabled","getPrefixForStrings","addon","getPrefixedString","key","loadLangStrings","parsedLang","lang","prefix","addSitePluginsStrings","loadSitePlugin","_this3","debug","parsedHandlers","handlers","parseJSON","setPluginsLoaded","allPromises","Object","keys","map","_ref2","registerHandler","_x2","_this4","_ref3","pluginPromise","registerSitePluginPromise","_x3","loadStyles","fileUrl","cssCode","styleEl","document","createElement","setAttribute","innerHTML","lowestGreater","Array","from","head","querySelectorAll","other","test","id","insertBefore","appendChild","treatCSSCode","_this5","_handlerSchema$styles4","initResult","Promise","all","catch","warn","delegate","registerMainMenuHandler","registerModuleHandler","registerUserProfileHandler","registerCourseOptionHandler","registerCourseFormatHandler","registerUserProfileFieldHandler","registerSettingsHandler","registerQuestionHandler","registerQuestionBehaviourHandler","registerBlockHandler","registerMessageOutputHandler","registerQuizAccessRuleHandler","registerAssignFeedbackHandler","registerAssignSubmissionHandler","registerWorkshopAssessmentStrategyHandler","registerMainMenuHomeHandler","registerEnrolHandler","setSitePluginHandler","message","registerComponentInitHandler","createHandlerFn","_this6","handler","methodTemplates","templates","methodJSResult","methodOtherdata","otherdata","handlerProperties","getAllPropertyNames","property","bind","type","moodlecomponent","replace","_handlerSchema$displa","_handlerSchema$displa2","blockName","titleString","displaydata","title","prefixedTitle","formatName","_initResult$restrict","restrict","courses","_this7","_handlerSchema$enrolm","action","enrolmentAction","BROWSER","SELF","GUEST","_result$jsResult","_result$jsResult2","_result$jsResult3","enrol","canAccess","validateAccess","processorName","modName","moduleHandler","setModuleHandlerInstance","offlinefunctions","supportsNoViewLink","nolinkhandlers","indexLinkHandler","priority","listLinkHandler","fieldType","strategyName","_this8","_ref4","setInitResult","updatingInit","_x4","SITE_PLUGINS_COURSE_RESTRICT_UPDATED","factory","ɵfac","providedIn","CoreSitePluginsHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/siteplugins/services/siteplugins-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { AddonMessageOutputDelegate } from '@addons/messageoutput/services/messageoutput-delegate';\nimport { AddonModAssignFeedbackDelegate } from '@addons/mod/assign/services/feedback-delegate';\nimport { AddonModAssignSubmissionDelegate } from '@addons/mod/assign/services/submission-delegate';\nimport { AddonModQuizAccessRuleDelegate } from '@addons/mod/quiz/services/access-rules-delegate';\nimport { CoreDelegate, CoreDelegateHandler } from '@classes/delegate';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreBlockDelegate } from '@features/block/services/block-delegate';\nimport { CoreCompile } from '@features/compile/services/compile';\nimport { CoreCourseOptionsDelegate } from '@features/course/services/course-options-delegate';\nimport { CoreCourseFormatDelegate } from '@features/course/services/format-delegate';\nimport { CoreCourseModuleDelegate } from '@features/course/services/module-delegate';\nimport { CoreCourseModulePrefetchDelegate } from '@features/course/services/module-prefetch-delegate';\nimport { CoreCoursesProvider } from '@features/courses/services/courses';\nimport { CoreMainMenuDelegate } from '@features/mainmenu/services/mainmenu-delegate';\nimport { CoreQuestionBehaviourDelegate } from '@features/question/services/behaviour-delegate';\nimport { CoreQuestionDelegate } from '@features/question/services/question-delegate';\nimport { CoreSettingsDelegate } from '@features/settings/services/settings-delegate';\nimport { CoreUserDelegate } from '@features/user/services/user-delegate';\nimport { CoreUserProfileFieldDelegate } from '@features/user/services/user-profile-field-delegate';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreLang } from '@services/lang';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWS } from '@services/ws';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreSitePluginsAssignFeedbackHandler } from '../classes/handlers/assign-feedback-handler';\nimport { CoreSitePluginsAssignSubmissionHandler } from '../classes/handlers/assign-submission-handler';\nimport { CoreSitePluginsBlockHandler } from '../classes/handlers/block-handler';\nimport { CoreSitePluginsCourseFormatHandler } from '../classes/handlers/course-format-handler';\nimport { CoreSitePluginsCourseOptionHandler } from '../classes/handlers/course-option-handler';\nimport { CoreSitePluginsMainMenuHandler } from '../classes/handlers/main-menu-handler';\nimport { CoreSitePluginsMessageOutputHandler } from '../classes/handlers/message-output-handler';\nimport { CoreSitePluginsModuleHandler } from '../classes/handlers/module-handler';\nimport { CoreSitePluginsModulePrefetchHandler } from '../classes/handlers/module-prefetch-handler';\nimport { CoreSitePluginsQuestionBehaviourHandler } from '../classes/handlers/question-behaviour-handler';\nimport { CoreSitePluginsQuestionHandler } from '../classes/handlers/question-handler';\nimport { CoreSitePluginsQuizAccessRuleHandler } from '../classes/handlers/quiz-access-rule-handler';\nimport { CoreSitePluginsSettingsHandler } from '../classes/handlers/settings-handler';\nimport { CoreSitePluginsUserProfileHandler } from '../classes/handlers/user-handler';\nimport { CoreSitePluginsUserProfileFieldHandler } from '../classes/handlers/user-profile-field-handler';\nimport {\n    CoreSitePlugins,\n    CoreSitePluginsContent,\n    CoreSitePluginsPlugin,\n    CoreSitePluginsHandlerData,\n    CoreSitePluginsProvider,\n    CoreSitePluginsCourseOptionHandlerData,\n    CoreSitePluginsMainMenuHandlerData,\n    CoreSitePluginsCourseModuleHandlerData,\n    CoreSitePluginsCourseFormatHandlerData,\n    CoreSitePluginsUserHandlerData,\n    CoreSitePluginsSettingsHandlerData,\n    CoreSitePluginsMessageOutputHandlerData,\n    CoreSitePluginsBlockHandlerData,\n    CoreSitePluginsHandlerCommonData,\n    CoreSitePluginsInitHandlerData,\n    CoreSitePluginsMainMenuHomeHandlerData,\n    CoreSitePluginsEnrolHandlerData,\n} from './siteplugins';\nimport { makeSingleton } from '@singletons';\nimport { CoreMainMenuHomeDelegate } from '@features/mainmenu/services/home-delegate';\nimport { CoreSitePluginsMainMenuHomeHandler } from '../classes/handlers/main-menu-home-handler';\nimport { AddonWorkshopAssessmentStrategyDelegate } from '@addons/mod/workshop/services/assessment-strategy-delegate';\nimport { CoreSitePluginsWorkshopAssessmentStrategyHandler } from '../classes/handlers/workshop-assessment-strategy-handler';\nimport { CoreContentLinksModuleIndexHandler } from '@features/contentlinks/classes/module-index-handler';\nimport { CoreContentLinksDelegate } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreContentLinksModuleListHandler } from '@features/contentlinks/classes/module-list-handler';\nimport { CoreObject } from '@singletons/object';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CorePath } from '@singletons/path';\nimport { CoreEnrolAction, CoreEnrolDelegate } from '@features/enrol/services/enrol-delegate';\nimport { CoreSitePluginsEnrolHandler } from '../classes/handlers/enrol-handler';\n\nconst HANDLER_DISABLED = 'core_site_plugins_helper_handler_disabled';\n\n/**\n * Helper service to provide functionalities regarding site plugins. It basically has the features to load and register site\n * plugin.\n *\n * This code is split from CoreSitePluginsProvider to prevent circular dependencies.\n *\n * @todo Support ViewChild and similar in site plugins. Possible solution: make components and directives inject the instance\n * inside the host DOM element?\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreSitePluginsHelperProvider {\n\n    protected logger: CoreLogger;\n    protected courseRestrictHandlers: Record<string, {\n        plugin: CoreSitePluginsPlugin;\n        handlerName: string;\n        handlerSchema: CoreSitePluginsCourseOptionHandlerData | CoreSitePluginsUserHandlerData;\n        handler: CoreSitePluginsCourseOptionHandler | CoreSitePluginsUserProfileHandler;\n    }> = {};\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreSitePluginsHelperProvider');\n    }\n\n    /**\n     * Initialize.\n     */\n    initialize(): void {\n        // Fetch the plugins on login.\n        CoreEvents.on(CoreEvents.LOGIN, async (data) => {\n            try {\n                const plugins = await CoreUtils.ignoreErrors(CoreSitePlugins.getPlugins(data.siteId));\n\n                // Plugins fetched, check that site hasn't changed.\n                if (data.siteId != CoreSites.getCurrentSiteId() || !plugins?.length) {\n                    return;\n                }\n\n                // Site is still the same. Load the plugins and trigger the event.\n                try {\n                    await this.loadSitePlugins(plugins);\n                } finally {\n                    CoreEvents.trigger(CoreEvents.SITE_PLUGINS_LOADED, {}, data.siteId);\n                }\n            } catch (error) {\n                this.logger.error(error);\n            } finally {\n                CoreSitePlugins.setPluginsFetched();\n            }\n        });\n\n        // Re-load plugins restricted for courses when the list of user courses changes.\n        CoreEvents.on(CoreCoursesProvider.EVENT_MY_COURSES_CHANGED, (data) => {\n            if (data && data.siteId && data.siteId == CoreSites.getCurrentSiteId() && data.added && data.added.length) {\n                this.reloadCourseRestrictHandlers();\n            }\n        });\n    }\n\n    /**\n     * Download the styles for a handler (if any).\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param siteId Site ID. If not provided, current site.\n     * @returns Promise resolved with the CSS code.\n     */\n    async downloadStyles(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsHandlerData,\n        siteId?: string,\n    ): Promise<string> {\n        const site = await CoreSites.getSite(siteId);\n\n        // Make sure it's an absolute URL. Do not use toAbsoluteURL because it can change the behaviour and break plugin styles.\n        let url = handlerSchema.styles?.url;\n        if (url && !CoreUrlUtils.isAbsoluteURL(url)) {\n            url = CorePath.concatenatePaths(site.getURL(), url);\n        }\n\n        if (url && handlerSchema.styles?.version) {\n            // Add the version to the URL to prevent getting a cached file.\n            url += (url.indexOf('?') != -1 ? '&' : '?') + 'version=' + handlerSchema.styles.version;\n        }\n\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const componentId = uniqueName + '#main';\n\n        // Remove the CSS files for this handler that aren't used anymore. Don't block the call for this.\n        const files = await CoreUtils.ignoreErrors(\n            CoreFilepool.getFilesByComponent(site.getId(), CoreSitePluginsProvider.COMPONENT, componentId),\n        );\n\n        files?.forEach((file) => {\n            if (file.url !== url) {\n                // It's not the current file, delete it.\n                CoreUtils.ignoreErrors(CoreFilepool.removeFileByUrl(site.getId(), file.url));\n            }\n        });\n\n        if (!url) {\n            // No styles.\n            return '';\n        }\n\n        // Update the schema with the final CSS URL.\n        if (handlerSchema.styles) {\n            handlerSchema.styles.url = url;\n        }\n\n        // Download the file if not downloaded or the version changed.\n        const path = await CoreFilepool.downloadUrl(\n            site.getId(),\n            url,\n            false,\n            CoreSitePluginsProvider.COMPONENT,\n            componentId,\n            0,\n            undefined,\n            undefined,\n            undefined,\n            handlerSchema.styles?.version,\n        );\n\n        // File is downloaded, get the contents.\n        return CoreWS.getText(path);\n    }\n\n    /**\n     * Execute a handler's init method if it has any.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns Promise resolved when done. It returns the results of the getContent call and the data returned by\n     *         the init JS (if any).\n     */\n    protected async executeHandlerInit(\n        plugin: CoreSitePluginsPlugin,\n        handlerSchema: CoreSitePluginsHandlerData,\n    ): Promise<CoreSitePluginsContent | null> {\n        if (!handlerSchema.init) {\n            return null;\n        }\n\n        return this.executeMethodAndJS(plugin, handlerSchema.init, true);\n    }\n\n    /**\n     * Execute a get_content method and run its javascript (if any).\n     *\n     * @param plugin Data of the plugin.\n     * @param method The method to call.\n     * @param isInit Whether it's the init method.\n     * @returns Promise resolved with the results of the getContent call and the data returned by the JS (if any).\n     */\n    protected async executeMethodAndJS(\n        plugin: CoreSitePluginsPlugin,\n        method: string,\n        isInit?: boolean,\n    ): Promise<CoreSitePluginsContent> {\n        const siteId = CoreSites.getCurrentSiteId();\n        const preSets: CoreSiteWSPreSets = {\n            getFromCache: false, // Try to ignore cache.\n            deleteCacheIfWSError: isInit, // If the init WS call returns an exception we won't use cached data.\n        };\n\n        const result = <CoreSitePluginsContent> await CoreSitePlugins.getContent(plugin.component, method, {}, preSets);\n\n        if (!result.javascript || CoreSites.getCurrentSiteId() != siteId) {\n            // No javascript or site has changed, stop.\n            return result;\n        }\n\n        // Create a \"fake\" instance to hold all the libraries.\n        const lazyLibraries = await CoreCompile.getLazyLibraries();\n        const instance = {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            HANDLER_DISABLED: HANDLER_DISABLED,\n        };\n\n        CoreCompile.injectLibraries(instance, lazyLibraries);\n\n        // Add some data of the WS call result.\n        const jsData = CoreSitePlugins.createDataForJS(result);\n        for (const name in jsData) {\n            instance[name] = jsData[name];\n        }\n\n        // Now execute the javascript using this instance.\n        result.jsResult = CoreCompile.executeJavascript(instance, result.javascript);\n\n        if (result.jsResult == HANDLER_DISABLED) {\n            // The \"disabled\" field was added in 3.8, this is a workaround for previous versions.\n            result.disabled = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Given an addon name, return the prefix to add to its string keys.\n     *\n     * @param addon Name of the addon (plugin.addon).\n     * @returns Prefix.\n     */\n    protected getPrefixForStrings(addon: string): string {\n        if (addon) {\n            return 'plugin.' + addon + '.';\n        }\n\n        return '';\n    }\n\n    /**\n     * Given an addon name and the key of a string, return the full string key (prefixed).\n     *\n     * @param addon Name of the addon (plugin.addon).\n     * @param key The key of the string.\n     * @returns Full string key.\n     */\n    protected getPrefixedString(addon: string, key: string): string {\n        return this.getPrefixForStrings(addon) + key;\n    }\n\n    /**\n     * Load the lang strings for a plugin.\n     *\n     * @param plugin Data of the plugin.\n     */\n    loadLangStrings(plugin: CoreSitePluginsPlugin): void {\n        if (!plugin.parsedLang) {\n            return;\n        }\n\n        for (const lang in plugin.parsedLang) {\n            const prefix = this.getPrefixForStrings(plugin.addon);\n\n            CoreLang.addSitePluginsStrings(lang, plugin.parsedLang[lang], prefix);\n        }\n    }\n\n    /**\n     * Load a site plugin.\n     *\n     * @param plugin Data of the plugin.\n     * @returns Promise resolved when loaded.\n     */\n    async loadSitePlugin(plugin: CoreSitePluginsPlugin): Promise<void> {\n        this.logger.debug('Load site plugin:', plugin);\n\n        if (!plugin.parsedHandlers && plugin.handlers) {\n            plugin.parsedHandlers = CoreTextUtils.parseJSON(\n                plugin.handlers,\n                null,\n                error => this.logger.error('Error parsing site plugin handlers', error),\n            );\n        }\n\n        if (!plugin.parsedLang && plugin.lang) {\n            plugin.parsedLang = CoreTextUtils.parseJSON(\n                plugin.lang,\n                null,\n                error => this.logger.error('Error parsing site plugin lang', error),\n            );\n        }\n\n        CoreSitePlugins.setPluginsLoaded(true);\n\n        // Register lang strings.\n        this.loadLangStrings(plugin);\n\n        if (plugin.parsedHandlers) {\n            // Register all the handlers.\n            const parsedHandlers = plugin.parsedHandlers;\n            await CoreUtils.allPromises(Object.keys(parsedHandlers).map(async (name) => {\n                await this.registerHandler(plugin, name, parsedHandlers[name]);\n            }));\n        }\n    }\n\n    /**\n     * Load site plugins.\n     *\n     * @param plugins The plugins to load.\n     * @returns Promise resolved when loaded.\n     */\n    async loadSitePlugins(plugins: CoreSitePluginsPlugin[]): Promise<void> {\n        this.courseRestrictHandlers = {};\n\n        await CoreUtils.allPromises(plugins.map(async (plugin) => {\n            const pluginPromise = this.loadSitePlugin(plugin);\n            CoreSitePlugins.registerSitePluginPromise(plugin.component, pluginPromise);\n\n            await pluginPromise;\n        }));\n    }\n\n    /**\n     * Load the styles for a handler.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param fileUrl CSS file URL.\n     * @param cssCode CSS code.\n     * @param version Styles version.\n     * @param siteId Site ID. If not provided, current site.\n     */\n    loadStyles(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        fileUrl: string,\n        cssCode: string,\n        version?: number,\n        siteId?: string,\n    ): void {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Create the style and add it to the header.\n        const styleEl = document.createElement('style');\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n\n        styleEl.setAttribute('id', 'siteplugin-' + uniqueName);\n        styleEl.innerHTML = cssCode;\n\n        // To ensure consistency, insert in alphabetical order among other site plugin styles.\n        let lowestGreater: HTMLStyleElement | null = null;\n        Array.from(document.head.querySelectorAll('style')).forEach((other) => {\n            if (/^siteplugin-/.test(other.id) && other.id > styleEl.id) {\n                if (lowestGreater === null || other.id < lowestGreater.id) {\n                    lowestGreater = other;\n                }\n            }\n        });\n\n        if (lowestGreater) {\n            document.head.insertBefore(styleEl, lowestGreater);\n        } else {\n            document.head.appendChild(styleEl);\n        }\n\n        // Styles have been loaded, now treat the CSS.\n        CoreUtils.ignoreErrors(\n            CoreFilepool.treatCSSCode(siteId, fileUrl, cssCode, CoreSitePluginsProvider.COMPONENT, uniqueName, version),\n        );\n    }\n\n    /**\n     * Register a site plugin handler in the right delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns Promise resolved when done.\n     */\n    async registerHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsHandlerData,\n    ): Promise<void> {\n        // Wait for the init JS to be executed and for the styles to be downloaded.\n        const siteId = CoreSites.getCurrentSiteId();\n\n        try {\n            const [initResult, cssCode] = await Promise.all([\n                this.executeHandlerInit(plugin, handlerSchema),\n                this.downloadStyles(plugin, handlerName, handlerSchema, siteId).catch((error) => {\n                    this.logger.error('Error getting styles for plugin', handlerName, handlerSchema, error);\n                }),\n            ]);\n\n            if (initResult?.disabled) {\n                // This handler is disabled for the current user, stop.\n                this.logger.warn('Handler disabled by init function', plugin, handlerSchema);\n\n                return;\n            }\n\n            if (cssCode && handlerSchema.styles?.url) {\n                // Load the styles.\n                this.loadStyles(plugin, handlerName, handlerSchema.styles.url, cssCode, handlerSchema.styles.version, siteId);\n            }\n\n            let uniqueName: string | undefined;\n\n            switch (handlerSchema.delegate) {\n                case 'CoreMainMenuDelegate':\n                    uniqueName = this.registerMainMenuHandler(plugin, handlerName, handlerSchema, initResult);\n                    break;\n\n                case 'CoreCourseModuleDelegate':\n                    uniqueName = this.registerModuleHandler(plugin, handlerName, handlerSchema, initResult);\n                    break;\n\n                case 'CoreUserDelegate':\n                    uniqueName = this.registerUserProfileHandler(plugin, handlerName, handlerSchema, initResult);\n                    break;\n\n                case 'CoreCourseOptionsDelegate':\n                    uniqueName = this.registerCourseOptionHandler(plugin, handlerName, handlerSchema, initResult);\n                    break;\n\n                case 'CoreCourseFormatDelegate':\n                    uniqueName = this.registerCourseFormatHandler(plugin, handlerName, handlerSchema);\n                    break;\n\n                case 'CoreUserProfileFieldDelegate':\n                    uniqueName = await this.registerUserProfileFieldHandler(plugin, handlerName, handlerSchema);\n                    break;\n\n                case 'CoreSettingsDelegate':\n                    uniqueName = this.registerSettingsHandler(plugin, handlerName, handlerSchema, initResult);\n                    break;\n\n                case 'CoreQuestionDelegate':\n                    uniqueName = await this.registerQuestionHandler(plugin, handlerName, handlerSchema);\n                    break;\n\n                case 'CoreQuestionBehaviourDelegate':\n                    uniqueName = await this.registerQuestionBehaviourHandler(plugin, handlerName, handlerSchema);\n                    break;\n\n                case 'CoreBlockDelegate':\n                    uniqueName = this.registerBlockHandler(plugin, handlerName, handlerSchema, initResult);\n                    break;\n\n                case 'AddonMessageOutputDelegate':\n                    uniqueName = this.registerMessageOutputHandler(plugin, handlerName, handlerSchema, initResult);\n                    break;\n\n                case 'AddonModQuizAccessRuleDelegate':\n                    uniqueName = await this.registerQuizAccessRuleHandler(plugin, handlerName, handlerSchema);\n                    break;\n\n                case 'AddonModAssignFeedbackDelegate':\n                    uniqueName = await this.registerAssignFeedbackHandler(plugin, handlerName, handlerSchema);\n                    break;\n\n                case 'AddonModAssignSubmissionDelegate':\n                    uniqueName = await this.registerAssignSubmissionHandler(plugin, handlerName, handlerSchema);\n                    break;\n\n                case 'AddonWorkshopAssessmentStrategyDelegate':\n                    uniqueName = await this.registerWorkshopAssessmentStrategyHandler(plugin, handlerName, handlerSchema);\n                    break;\n\n                case 'CoreMainMenuHomeDelegate':\n                    uniqueName = this.registerMainMenuHomeHandler(plugin, handlerName, handlerSchema, initResult);\n                    break;\n\n                case 'CoreEnrolDelegate':\n                    uniqueName = await this.registerEnrolHandler(plugin, handlerName, handlerSchema, initResult);\n                    break;\n\n                default:\n                    // Nothing to do.\n            }\n\n            if (uniqueName) {\n                // Store the handler data.\n                CoreSitePlugins.setSitePluginHandler(uniqueName, {\n                    plugin: plugin,\n                    handlerName: handlerName,\n                    handlerSchema: handlerSchema,\n                    initResult,\n                });\n            }\n        } catch (error) {\n            throw new CoreError('Error executing init method ' + handlerSchema.init + ': ' + error.message);\n        }\n    }\n\n    /**\n     * Register a handler that relies in a \"componentInit\" function in a certain delegate.\n     * These type of handlers will return a generic template and its JS in the main method, so it will be called\n     * before registering the handler.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns A promise resolved with a string to identify the handler.\n     */\n    protected async registerComponentInitHandler<T extends CoreDelegateHandler>(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsInitHandlerData,\n        delegate: CoreDelegate<T>,\n        createHandlerFn: (uniqueName: string, result: CoreSitePluginsContent) => T,\n    ): Promise<string | undefined> {\n\n        if (!handlerSchema.method) {\n            // Required data not provided, stop.\n            this.logger.warn('Ignore site plugin because it doesn\\'t provide method', plugin, handlerSchema);\n\n            return;\n        }\n\n        this.logger.debug('Register site plugin', plugin, handlerSchema);\n\n        try {\n            // Execute the main method and its JS. The template returned will be used in the right component.\n            const result = await this.executeMethodAndJS(plugin, handlerSchema.method);\n\n            // Create and register the handler.\n            const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n            const handler = createHandlerFn(uniqueName, result);\n\n            // Store in handlerSchema some data required by the component.\n            handlerSchema.methodTemplates = result.templates;\n            handlerSchema.methodJSResult = result.jsResult;\n            handlerSchema.methodOtherdata = result.otherdata;\n\n            if (result.jsResult) {\n                // Override default handler functions with the result of the method JS.\n                const jsResult = <Record<string, unknown>> result.jsResult;\n                const handlerProperties = CoreObject.getAllPropertyNames(handler);\n\n                for (const property of handlerProperties) {\n                    if (property !== 'constructor' && typeof handler[property] === 'function' &&\n                            typeof jsResult[property] === 'function') {\n                        handler[property] = (<Function> jsResult[property]).bind(handler);\n                    }\n                }\n            }\n\n            delegate.registerHandler(handler);\n\n            return uniqueName;\n        } catch (error) {\n            this.logger.error('Error executing main method', plugin.component, handlerSchema.method, error);\n        }\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the assign feedback delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns Promise resolved with a string to identify the handler.\n     */\n    protected registerAssignFeedbackHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsHandlerCommonData,\n    ): Promise<string | undefined> {\n\n        return this.registerComponentInitHandler(\n            plugin,\n            handlerName,\n            handlerSchema,\n            AddonModAssignFeedbackDelegate.instance,\n            (uniqueName) => {\n                const type = (handlerSchema.moodlecomponent || plugin.component).replace('assignfeedback_', '');\n                const prefix = this.getPrefixForStrings(plugin.addon);\n\n                return new CoreSitePluginsAssignFeedbackHandler(uniqueName, type, prefix);\n            },\n        );\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the assign submission delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns Promise resolved with a string to identify the handler.\n     */\n    protected registerAssignSubmissionHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsHandlerCommonData,\n    ): Promise<string | undefined> {\n\n        return this.registerComponentInitHandler(\n            plugin,\n            handlerName,\n            handlerSchema,\n            AddonModAssignSubmissionDelegate.instance,\n            (uniqueName) => {\n                const type = (handlerSchema.moodlecomponent || plugin.component).replace('assignsubmission_', '');\n                const prefix = this.getPrefixForStrings(plugin.addon);\n\n                return new CoreSitePluginsAssignSubmissionHandler(uniqueName, type, prefix);\n            },\n        );\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the block delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param initResult Result of init function.\n     * @returns A string to identify the handler.\n     */\n    protected registerBlockHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsBlockHandlerData,\n        initResult: CoreSitePluginsContent | null,\n    ): string | undefined {\n\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const blockName = (handlerSchema.moodlecomponent || plugin.component).replace('block_', '');\n        const titleString = handlerSchema.displaydata?.title ?? 'pluginname';\n        const prefixedTitle = this.getPrefixedString(plugin.addon, titleString);\n\n        CoreBlockDelegate.registerHandler(\n            new CoreSitePluginsBlockHandler(uniqueName, prefixedTitle, blockName, handlerSchema, initResult),\n        );\n\n        return uniqueName;\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the course format delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns A string to identify the handler.\n     */\n    protected registerCourseFormatHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsCourseFormatHandlerData,\n    ): string {\n        this.logger.debug('Register site plugin in course format delegate:', plugin, handlerSchema);\n\n        // Create and register the handler.\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const formatName = (handlerSchema.moodlecomponent || plugin.component).replace('format_', '');\n        CoreCourseFormatDelegate.registerHandler(\n            new CoreSitePluginsCourseFormatHandler(uniqueName, formatName, handlerSchema),\n        );\n\n        return uniqueName;\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the course options delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param initResult Result of the init WS call.\n     * @returns A string to identify the handler.\n     */\n    protected registerCourseOptionHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsCourseOptionHandlerData,\n        initResult: CoreSitePluginsContent | null,\n    ): string | undefined {\n        if (!handlerSchema.displaydata) {\n            // Required data not provided, stop.\n            this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n\n            return;\n        }\n\n        this.logger.debug('Register site plugin in course option delegate:', plugin, handlerSchema, initResult);\n\n        // Create and register the handler.\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n        const handler = new CoreSitePluginsCourseOptionHandler(\n            uniqueName,\n            prefixedTitle,\n            plugin,\n            handlerSchema,\n            initResult,\n        );\n\n        CoreCourseOptionsDelegate.registerHandler(handler);\n\n        if (initResult?.restrict?.courses) {\n            // This handler is restricted to certan courses, store it in the list.\n            this.courseRestrictHandlers[uniqueName] = {\n                plugin,\n                handlerName,\n                handlerSchema,\n                handler,\n            };\n        }\n\n        return uniqueName;\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the enrol delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param initResult Result of init function.\n     * @returns A string to identify the handler.\n     */\n    protected async registerEnrolHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsEnrolHandlerData,\n        initResult: CoreSitePluginsContent | null,\n    ): Promise<string | undefined> {\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const type = (handlerSchema.moodlecomponent || plugin.component).replace('enrol_', '');\n        const action = handlerSchema.enrolmentAction ?? CoreEnrolAction.BROWSER;\n        const handler = new CoreSitePluginsEnrolHandler(uniqueName, type, action, handlerSchema, initResult);\n\n        if (!handlerSchema.method && (action === CoreEnrolAction.SELF || action === CoreEnrolAction.GUEST)) {\n            this.logger.error('\"self\" or \"guest\" enrol plugins must implement a method to override the required JS functions.');\n\n            return;\n        }\n\n        if (handlerSchema.method) {\n            // Execute the main method and its JS to allow implementing the handler functions.\n            const result = await this.executeMethodAndJS(plugin, handlerSchema.method);\n\n            if (action === CoreEnrolAction.SELF && !result.jsResult?.enrol) {\n                this.logger.error('\"self\" enrol plugins must implement an \"enrol\" function in the JS returned by the method.');\n\n                return;\n            }\n\n            if (action === CoreEnrolAction.GUEST && (!result.jsResult?.canAccess || !result.jsResult?.validateAccess)) {\n                this.logger.error('\"guest\" enrol plugins must implement \"canAccess\" and \"validateAccess\" functions in the JS ' +\n                    'returned by the method.');\n\n                return;\n            }\n\n            if (result.jsResult) {\n                // Override default handler functions with the result of the method JS.\n                const jsResult = <Record<string, unknown>> result.jsResult;\n                const handlerProperties = CoreObject.getAllPropertyNames(handler);\n\n                for (const property of handlerProperties) {\n                    if (property !== 'constructor' && typeof handler[property] === 'function' &&\n                            typeof jsResult[property] === 'function') {\n                        handler[property] = (<Function> jsResult[property]).bind(handler);\n                    }\n                }\n            }\n        }\n\n        CoreEnrolDelegate.registerHandler(handler);\n\n        return uniqueName;\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the main menu delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param initResult Result of the init WS call.\n     * @returns A string to identify the handler.\n     */\n    protected registerMainMenuHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsMainMenuHandlerData,\n        initResult: CoreSitePluginsContent | null,\n    ): string | undefined {\n        if (!handlerSchema.displaydata) {\n            // Required data not provided, stop.\n            this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n\n            return;\n        }\n\n        this.logger.debug('Register site plugin in main menu delegate:', plugin, handlerSchema, initResult);\n\n        // Create and register the handler.\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n\n        CoreMainMenuDelegate.registerHandler(\n            new CoreSitePluginsMainMenuHandler(uniqueName, prefixedTitle, plugin, handlerSchema, initResult),\n        );\n\n        return uniqueName;\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the message output delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param initResult Result of the init WS call.\n     * @returns A string to identify the handler.\n     */\n    protected registerMessageOutputHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsMessageOutputHandlerData,\n        initResult: CoreSitePluginsContent | null,\n    ): string | undefined {\n        if (!handlerSchema.displaydata) {\n            // Required data not provided, stop.\n            this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n\n            return;\n        }\n\n        this.logger.debug('Register site plugin in message output delegate:', plugin, handlerSchema, initResult);\n\n        // Create and register the handler.\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n        const processorName = (handlerSchema.moodlecomponent || plugin.component).replace('message_', '');\n\n        AddonMessageOutputDelegate.registerHandler(\n            new CoreSitePluginsMessageOutputHandler(uniqueName, processorName, prefixedTitle, plugin, handlerSchema, initResult),\n        );\n\n        return uniqueName;\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the module delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param initResult Result of the init WS call.\n     * @returns A string to identify the handler.\n     */\n    protected registerModuleHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsCourseModuleHandlerData,\n        initResult: CoreSitePluginsContent | null,\n    ): string | undefined {\n        if (!handlerSchema.displaydata) {\n            // Required data not provided, stop.\n            this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n\n            return;\n        }\n\n        this.logger.debug('Register site plugin in module delegate:', plugin, handlerSchema, initResult);\n\n        // Create and register the handler.\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const modName = (handlerSchema.moodlecomponent || plugin.component).replace('mod_', '');\n\n        const moduleHandler = new CoreSitePluginsModuleHandler(uniqueName, modName, plugin, handlerSchema, initResult);\n        CoreCourseModuleDelegate.registerHandler(moduleHandler);\n        CoreSitePlugins.setModuleHandlerInstance(modName, moduleHandler);\n\n        if (handlerSchema.offlinefunctions && Object.keys(handlerSchema.offlinefunctions).length) {\n            // Register the prefetch handler.\n            CoreCourseModulePrefetchDelegate.registerHandler(\n                new CoreSitePluginsModulePrefetchHandler(plugin.component, uniqueName, modName, handlerSchema),\n            );\n        }\n\n        // Create default link handlers if needed.\n        if (!moduleHandler.supportsNoViewLink() && handlerSchema.method && !handlerSchema.nolinkhandlers) {\n            const indexLinkHandler = new CoreContentLinksModuleIndexHandler(uniqueName, modName);\n            indexLinkHandler.name = uniqueName + '_indexlink';\n            indexLinkHandler.priority = -1; // Use -1 to give more priority to the plugins link handlers if any.\n            CoreContentLinksDelegate.registerHandler(indexLinkHandler);\n\n            const listLinkHandler = new CoreContentLinksModuleListHandler(uniqueName, modName);\n            listLinkHandler.name = uniqueName + '_listlink';\n            listLinkHandler.priority = -1; // Use -1 to give more priority to the plugins link handlers if any.\n            CoreContentLinksDelegate.registerHandler(listLinkHandler);\n        }\n\n        return uniqueName;\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the question delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns Promise resolved with a string to identify the handler.\n     */\n    protected registerQuestionHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsHandlerCommonData,\n    ): Promise<string | undefined> {\n        const component = handlerSchema.moodlecomponent || plugin.component;\n\n        return this.registerComponentInitHandler(\n            plugin,\n            handlerName,\n            handlerSchema,\n            CoreQuestionDelegate.instance,\n            (uniqueName) => new CoreSitePluginsQuestionHandler(uniqueName, component),\n        );\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the question behaviour delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns Promise resolved with a string to identify the handler.\n     */\n    protected registerQuestionBehaviourHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsHandlerCommonData,\n    ): Promise<string | undefined> {\n\n        return this.registerComponentInitHandler(\n            plugin,\n            handlerName,\n            handlerSchema,\n            CoreQuestionBehaviourDelegate.instance,\n            (uniqueName, result) => {\n                const type = (handlerSchema.moodlecomponent || plugin.component).replace('qbehaviour_', '');\n\n                return new CoreSitePluginsQuestionBehaviourHandler(uniqueName, type, !!result.templates.length);\n            },\n        );\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the quiz access rule delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns Promise resolved with a string to identify the handler.\n     */\n    protected registerQuizAccessRuleHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsHandlerCommonData,\n    ): Promise<string | undefined> {\n        const component = handlerSchema.moodlecomponent || plugin.component;\n\n        return this.registerComponentInitHandler(\n            plugin,\n            handlerName,\n            handlerSchema,\n            AddonModQuizAccessRuleDelegate.instance,\n            (uniqueName, result) => new CoreSitePluginsQuizAccessRuleHandler(uniqueName, component, !!result.templates.length),\n        );\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the settings delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param initResult Result of the init WS call.\n     * @returns A string to identify the handler.\n     */\n    protected registerSettingsHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsSettingsHandlerData,\n        initResult: CoreSitePluginsContent | null,\n    ): string | undefined {\n        if (!handlerSchema.displaydata) {\n            // Required data not provided, stop.\n            this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n\n            return;\n        }\n\n        this.logger.debug('Register site plugin in settings delegate:', plugin, handlerSchema, initResult);\n\n        // Create and register the handler.\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n\n        CoreSettingsDelegate.registerHandler(\n            new CoreSitePluginsSettingsHandler(uniqueName, prefixedTitle, plugin, handlerSchema, initResult),\n        );\n\n        return uniqueName;\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the user profile delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param initResult Result of the init WS call.\n     * @returns A string to identify the handler.\n     */\n    protected registerUserProfileHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsUserHandlerData,\n        initResult: CoreSitePluginsContent | null,\n    ): string | undefined {\n        if (!handlerSchema.displaydata) {\n            // Required data not provided, stop.\n            this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n\n            return;\n        }\n\n        this.logger.debug('Register site plugin in user profile delegate:', plugin, handlerSchema, initResult);\n\n        // Create and register the handler.\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n        const handler = new CoreSitePluginsUserProfileHandler(uniqueName, prefixedTitle, plugin, handlerSchema, initResult);\n\n        CoreUserDelegate.registerHandler(handler);\n\n        if (initResult && initResult.restrict && initResult.restrict.courses) {\n            // This handler is restricted to certan courses, store it in the list.\n            this.courseRestrictHandlers[uniqueName] = {\n                plugin,\n                handlerName,\n                handlerSchema,\n                handler,\n            };\n        }\n\n        return uniqueName;\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the user profile field delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns Promise resolved with a string to identify the handler.\n     */\n    protected registerUserProfileFieldHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsHandlerCommonData,\n    ): Promise<string | undefined> {\n\n        return this.registerComponentInitHandler(\n            plugin,\n            handlerName,\n            handlerSchema,\n            CoreUserProfileFieldDelegate.instance,\n            (uniqueName) => {\n                const fieldType = (handlerSchema.moodlecomponent || plugin.component).replace('profilefield_', '');\n\n                return new CoreSitePluginsUserProfileFieldHandler(uniqueName, fieldType);\n            },\n        );\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the workshop assessment strategy delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @returns Promise resolved with a string to identify the handler.\n     */\n    protected registerWorkshopAssessmentStrategyHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsHandlerCommonData,\n    ): Promise<string | undefined> {\n        return this.registerComponentInitHandler(\n            plugin,\n            handlerName,\n            handlerSchema,\n            AddonWorkshopAssessmentStrategyDelegate.instance,\n            (uniqueName) => {\n                const strategyName = (handlerSchema.moodlecomponent || plugin.component).replace('workshopform_', '');\n\n                return new CoreSitePluginsWorkshopAssessmentStrategyHandler(uniqueName, strategyName);\n            },\n        );\n    }\n\n    /**\n     * Reload the handlers that are restricted to certain courses.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async reloadCourseRestrictHandlers(): Promise<void> {\n        if (!Object.keys(this.courseRestrictHandlers).length) {\n            // No course restrict handlers, nothing to do.\n            return;\n        }\n\n        await Promise.all(Object.keys(this.courseRestrictHandlers).map(async (name) => {\n            const data = this.courseRestrictHandlers[name];\n\n            if (!data.handler || !data.handler.setInitResult) {\n                // No handler or it doesn't implement a required function, ignore it.\n                return;\n            }\n\n            // Mark the handler as being updated.\n            data.handler.updatingInit && data.handler.updatingInit();\n\n            try {\n                const initResult = await this.executeHandlerInit(data.plugin, data.handlerSchema);\n\n                data.handler.setInitResult(initResult);\n            } catch (error) {\n                this.logger.error('Error reloading course restrict handler', error, data.plugin);\n            }\n        }));\n\n        CoreEvents.trigger(CoreEvents.SITE_PLUGINS_COURSE_RESTRICT_UPDATED, {});\n    }\n\n    /**\n     * Given a handler in a plugin, register it in the main menu home delegate.\n     *\n     * @param plugin Data of the plugin.\n     * @param handlerName Name of the handler in the plugin.\n     * @param handlerSchema Data about the handler.\n     * @param initResult Result of the init WS call.\n     * @returns A string to identify the handler.\n     */\n    protected registerMainMenuHomeHandler(\n        plugin: CoreSitePluginsPlugin,\n        handlerName: string,\n        handlerSchema: CoreSitePluginsMainMenuHomeHandlerData,\n        initResult: CoreSitePluginsContent | null,\n    ): string | undefined {\n        if (!handlerSchema.displaydata) {\n            // Required data not provided, stop.\n            this.logger.warn('Ignore site plugin because it doesn\\'t provide displaydata', plugin, handlerSchema);\n\n            return;\n        }\n\n        this.logger.debug('Register site plugin in main menu home delegate:', plugin, handlerSchema, initResult);\n\n        // Create and register the handler.\n        const uniqueName = CoreSitePlugins.getHandlerUniqueName(plugin, handlerName);\n        const prefixedTitle = this.getPrefixedString(plugin.addon, handlerSchema.displaydata.title || 'pluginname');\n\n        CoreMainMenuHomeDelegate.registerHandler(\n            new CoreSitePluginsMainMenuHomeHandler(uniqueName, prefixedTitle, plugin, handlerSchema, initResult),\n        );\n\n        return uniqueName;\n    }\n\n}\n\nexport const CoreSitePluginsHelper = makeSingleton(CoreSitePluginsHelperProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}