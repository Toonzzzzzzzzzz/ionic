{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { IonContent } from '@ionic/angular';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport { AddonMessagesProvider, AddonMessages } from '../../services/messages';\nimport { AddonMessagesOffline } from '../../services/messages-offline';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUser } from '@features/user/services/user';\nimport { CorePushNotificationsDelegate } from '@features/pushnotifications/services/push-delegate';\nimport { Translate } from '@singletons';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreMainMenuDeepLinkManager } from '@features/mainmenu/classes/deep-link-manager';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../core/components/context-menu/context-menu\";\nimport * as i4 from \"../../../../core/components/infinite-loading/infinite-loading\";\nimport * as i5 from \"../../../../core/components/loading/loading\";\nimport * as i6 from \"../../../../core/components/split-view/split-view\";\nimport * as i7 from \"../../../../core/components/user-avatar/user-avatar\";\nimport * as i8 from \"../../../../core/directives/external-content\";\nimport * as i9 from \"../../../../core/directives/fa-icon\";\nimport * as i10 from \"../../../../core/directives/format-text\";\nimport * as i11 from \"../../../../core/directives/content\";\nimport * as i12 from \"../../../../core/directives/update-non-reactive-attributes\";\nimport * as i13 from \"@ionic/angular\";\nimport * as i14 from \"../../../../core/features/mainmenu/components/user-menu-button/user-menu-button\";\nimport * as i15 from \"../../../../core/pipes/date-day-or-time\";\nimport * as i16 from \"@ngx-translate/core\";\nconst _c0 = [\"favlist\"];\nconst _c1 = [\"grouplist\"];\nconst _c2 = [\"indlist\"];\nfunction AddonMessagesGroupConversationsPage_ion_badge_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-badge\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.contactRequestsCount);\n  }\n}\nconst _c3 = function (a0) {\n  return {\n    $a: a0\n  };\n};\nfunction AddonMessagesGroupConversationsPage_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, \"addon.messages.pendingcontactrequests\", i0.ɵɵpureFunction1(4, _c3, ctx_r1.contactRequestsCount)), \" \");\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ion_badge_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-badge\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.favourites.unread);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_span_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, \"addon.messages.unreadconversations\", i0.ɵɵpureFunction1(4, _c3, ctx_r3.favourites.unread)), \" \");\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_container_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ion_item_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 31)(1, \"ion-label\")(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 1, \"addon.messages.nofavourites\"));\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ion_item_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 32)(1, \"ion-label\");\n    i0.ɵɵelement(2, \"ion-spinner\");\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(3, 1, \"core.loading\"));\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ion_badge_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-badge\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.group.unread);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_span_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, \"addon.messages.unreadconversations\", i0.ɵɵpureFunction1(4, _c3, ctx_r9.group.unread)), \" \");\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_container_59_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ion_item_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 31)(1, \"ion-label\")(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 1, \"addon.messages.nogroupconversations\"));\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ion_item_62_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 32)(1, \"ion-label\");\n    i0.ɵɵelement(2, \"ion-spinner\");\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(3, 1, \"core.loading\"));\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ion_badge_70_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-badge\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r14.individual.unread);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_span_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, \"addon.messages.unreadconversations\", i0.ɵɵpureFunction1(4, _c3, ctx_r15.individual.unread)), \" \");\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_container_74_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ion_item_76_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 31)(1, \"ion-label\")(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 1, \"addon.messages.noindividualconversations\"));\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ion_item_77_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 32)(1, \"ion-label\");\n    i0.ɵɵelement(2, \"ion-spinner\");\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(3, 1, \"core.loading\"));\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_avatar_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-avatar\", 0);\n    i0.ɵɵelement(1, \"img\", 44);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const conversation_r24 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", conversation_r24.imageurl, i0.ɵɵsanitizeUrl)(\"alt\", conversation_r24.name);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_core_user_avatar_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-user-avatar\", 45);\n  }\n  if (rf & 2) {\n    const conversation_r24 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"user\", conversation_r24.otherUser)(\"linkProfile\", false)(\"checkOnline\", conversation_r24.showonlinestatus);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_icon_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 46);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"title\", i0.ɵɵpipeBind1(1, 1, \"addon.messages.contactblocked\"));\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_icon_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 47);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"title\", i0.ɵɵpipeBind1(1, 1, \"addon.messages.mutedconversation\"));\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 50);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"coreDateDayOrTime\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const conversation_r24 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, conversation_r24.lastmessagedate), \" \");\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_ion_badge_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-badge\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const conversation_r24 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(conversation_r24.unreadcount);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const conversation_r24 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, \"addon.messages.unreadmessages\", i0.ɵɵpureFunction1(4, _c3, conversation_r24.unreadcount)), \" \");\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-note\");\n    i0.ɵɵtemplate(1, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_span_1_Template, 3, 3, \"span\", 48);\n    i0.ɵɵtemplate(2, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_ion_badge_2_Template, 2, 1, \"ion-badge\", 49);\n    i0.ɵɵtemplate(3, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_span_3_Template, 3, 6, \"span\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const conversation_r24 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.lastmessagedate > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.unreadcount > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.unreadcount > 0);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵelement(1, \"core-format-text\", 39);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const conversation_r24 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"text\", conversation_r24.subname)(\"contextInstanceId\", 0);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_11_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 55);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"addon.messages.you\"), \" \");\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_11_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 55);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const conversation_r24 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(conversation_r24.members[0].fullname + \":\");\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 52);\n    i0.ɵɵtemplate(1, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_11_span_1_Template, 3, 3, \"span\", 53);\n    i0.ɵɵtemplate(2, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_11_span_2_Template, 2, 1, \"span\", 53);\n    i0.ɵɵelement(3, \"core-format-text\", 54);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const conversation_r24 = i0.ɵɵnextContext().$implicit;\n    const ctx_r31 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.sentfromcurrentuser);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !conversation_r24.sentfromcurrentuser && conversation_r24.type === ctx_r31.typeGroup && conversation_r24.members[0]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"text\", conversation_r24.lastmessage)(\"contextInstanceId\", 0);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r47 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 34);\n    i0.ɵɵlistener(\"click\", function AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_Template_ion_item_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r47);\n      const conversation_r24 = restoredCtx.$implicit;\n      const ctx_r46 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r46.gotoConversation(conversation_r24.id, conversation_r24.userid));\n    });\n    i0.ɵɵtemplate(1, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_avatar_1_Template, 2, 2, \"ion-avatar\", 35);\n    i0.ɵɵtemplate(2, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_core_user_avatar_2_Template, 1, 3, \"core-user-avatar\", 36);\n    i0.ɵɵelementStart(3, \"ion-label\")(4, \"div\", 37)(5, \"p\", 38);\n    i0.ɵɵelement(6, \"core-format-text\", 39);\n    i0.ɵɵtemplate(7, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_icon_7_Template, 2, 3, \"ion-icon\", 40);\n    i0.ɵɵtemplate(8, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_icon_8_Template, 2, 3, \"ion-icon\", 41);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_Template, 4, 3, \"ion-note\", 42);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_10_Template, 2, 2, \"p\", 42);\n    i0.ɵɵtemplate(11, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_11_Template, 4, 4, \"p\", 43);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const conversation_r24 = ctx.$implicit;\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"addon-message-conversation-\", conversation_r24.id ? conversation_r24.id : \"user-\" + conversation_r24.userid, \"\");\n    i0.ɵɵproperty(\"detail\", false);\n    i0.ɵɵattribute(\"aria-current\", conversation_r24.id && conversation_r24.id === ctx_r23.selectedConversationId || conversation_r24.userid && conversation_r24.userid === ctx_r23.selectedUserId ? \"page\" : \"false\")(\"aria-label\", conversation_r24.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.type === ctx_r23.typeGroup);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.type !== ctx_r23.typeGroup);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"text\", conversation_r24.name)(\"contextInstanceId\", 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.isblocked);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.ismuted);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.lastmessagedate > 0 || conversation_r24.unreadcount);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.subname);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", conversation_r24.lastmessage !== undefined);\n  }\n}\nfunction AddonMessagesGroupConversationsPage_ng_template_78_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_Template, 12, 13, \"ion-item\", 33);\n  }\n  if (rf & 2) {\n    const conversations_r22 = ctx.conversations;\n    i0.ɵɵproperty(\"ngForOf\", conversations_r22);\n  }\n}\nconst _c4 = function (a0) {\n  return {\n    conversations: a0\n  };\n};\n/**\n * Page that displays the list of conversations, including group conversations.\n */\nexport class AddonMessagesGroupConversationsPage {\n  constructor(route) {\n    this.route = route;\n    this.loaded = false;\n    this.contactRequestsCount = 0;\n    this.favourites = {\n      type: undefined,\n      favourites: true,\n      count: 0,\n      unread: 0,\n      conversations: []\n    };\n    this.group = {\n      type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP,\n      favourites: false,\n      count: 0,\n      unread: 0,\n      conversations: []\n    };\n    this.individual = {\n      type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n      favourites: false,\n      count: 0,\n      unread: 0,\n      conversations: []\n    };\n    this.typeGroup = AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP;\n    this.loadingMessage = Translate.instant('core.loading');\n    this.siteId = CoreSites.getCurrentSiteId();\n    this.currentUserId = CoreSites.getCurrentSiteUserId();\n    // Update conversations when new message is received.\n    this.newMessagesObserver = CoreEvents.on(AddonMessagesProvider.NEW_MESSAGE_EVENT, data => {\n      // Check if the new message belongs to the option that is currently expanded.\n      const expandedOption = this.getExpandedOption();\n      const messageOption = this.getConversationOption(data);\n      if (expandedOption != messageOption) {\n        return; // Message doesn't belong to current list, stop.\n      }\n      // Search the conversation to update.\n      const conversation = this.findConversation(data.conversationId, data.userId, expandedOption);\n      if (conversation === undefined) {\n        // Probably a new conversation, refresh the list.\n        this.loaded = false;\n        this.refreshData().finally(() => {\n          this.loaded = true;\n        });\n        return;\n      }\n      if (data.message === undefined) {\n        conversation.lastmessage = undefined;\n        conversation.lastmessagedate = undefined;\n        conversation.sentfromcurrentuser = undefined;\n        return;\n      }\n      if (conversation.lastmessage !== data.message || conversation.lastmessagedate !== data.timecreated / 1000) {\n        const isNewer = data.timecreated / 1000 > (conversation.lastmessagedate || 0);\n        // An existing conversation has a new message, update the last message.\n        conversation.lastmessage = data.message;\n        conversation.lastmessagedate = data.timecreated / 1000;\n        if (data.userFrom) {\n          conversation.sentfromcurrentuser = data.userFrom.id === this.currentUserId;\n          if (conversation.type === AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP) {\n            conversation.members[0] = data.userFrom;\n          }\n        }\n        // Sort the affected list.\n        const option = this.getConversationOption(conversation);\n        option.conversations = AddonMessages.sortConversations(option.conversations || []);\n        if (isNewer) {\n          var _this$content;\n          // The last message is newer than the previous one, scroll to top to keep viewing the conversation.\n          (_this$content = this.content) === null || _this$content === void 0 || _this$content.scrollToTop();\n        }\n      }\n    }, this.siteId);\n    // Update conversations when a message is read.\n    this.readChangedObserver = CoreEvents.on(AddonMessagesProvider.READ_CHANGED_EVENT, data => {\n      if (data.conversationId) {\n        const conversation = this.findConversation(data.conversationId);\n        if (conversation !== undefined) {\n          // A conversation has been read reset counter.\n          conversation.unreadcount = 0;\n          // Conversations changed, invalidate them and refresh unread counts.\n          AddonMessages.invalidateConversations(this.siteId);\n          AddonMessages.refreshUnreadConversationCounts(this.siteId);\n        }\n      }\n    }, this.siteId);\n    // Load a discussion if we receive an event to do so.\n    this.openConversationObserver = CoreEvents.on(AddonMessagesProvider.OPEN_CONVERSATION_EVENT, data => {\n      if (data.conversationId || data.userId) {\n        this.gotoConversation(data.conversationId, data.userId);\n      }\n    }, this.siteId);\n    // Refresh the view when the app is resumed.\n    this.appResumeSubscription = CorePlatform.resume.subscribe(() => {\n      if (!this.loaded) {\n        return;\n      }\n      this.loaded = false;\n      this.refreshData().finally(() => {\n        this.loaded = true;\n      });\n    });\n    // Update conversations if we receive an event to do so.\n    this.updateConversationListObserver = CoreEvents.on(AddonMessagesProvider.UPDATE_CONVERSATION_LIST_EVENT, data => {\n      if (data && data.action == 'mute') {\n        // If the conversation is displayed, change its muted value.\n        const expandedOption = this.getExpandedOption();\n        if (expandedOption && expandedOption.conversations) {\n          const conversation = this.findConversation(data.conversationId, undefined, expandedOption);\n          if (conversation) {\n            conversation.ismuted = !!data.value;\n          }\n        }\n        return;\n      }\n      this.refreshData();\n    }, this.siteId);\n    // If a message push notification is received, refresh the view.\n    this.pushObserver = CorePushNotificationsDelegate.on('receive').subscribe(notification => {\n      // New message received. If it's from current site, refresh the data.\n      if (CoreUtils.isFalseOrZero(notification.notif) && notification.site == this.siteId) {\n        // Don't refresh unread counts, it's refreshed from the main menu handler in this case.\n        this.refreshData(undefined, false);\n      }\n    });\n    // Update unread conversation counts.\n    this.cronObserver = CoreEvents.on(AddonMessagesProvider.UNREAD_CONVERSATION_COUNTS_EVENT, data => {\n      this.favourites.unread = data.favourites;\n      this.individual.unread = data.individual + data.self; // Self is only returned if it's not favourite.\n      this.group.unread = data.group;\n    }, this.siteId);\n    // Update the contact requests badge.\n    this.contactRequestsCountObserver = CoreEvents.on(AddonMessagesProvider.CONTACT_REQUESTS_COUNT_EVENT, data => {\n      this.contactRequestsCount = data.count;\n    }, this.siteId);\n    // Update block status of a user.\n    this.memberInfoObserver = CoreEvents.on(AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT, data => {\n      if (!data.userBlocked && !data.userUnblocked) {\n        // The block status has not changed, ignore.\n        return;\n      }\n      const expandedOption = this.getExpandedOption();\n      if (expandedOption == this.individual || expandedOption == this.favourites) {\n        if (!expandedOption.conversations || expandedOption.conversations.length <= 0) {\n          return;\n        }\n        const conversation = this.findConversation(undefined, data.userId, expandedOption);\n        if (conversation) {\n          conversation.isblocked = data.userBlocked;\n        }\n      }\n    }, this.siteId);\n  }\n  /**\n   * Component loaded.\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.route.queryParams.subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (params) {\n          // When a child page loads this callback is triggered too.\n          const conversationId = CoreNavigator.getRouteNumberParam('conversationId', {\n            params\n          });\n          const userId = CoreNavigator.getRouteNumberParam('userId', {\n            params\n          });\n          if (conversationId || userId) {\n            // Update the selected ones.\n            _this.selectedConversationId = conversationId;\n            _this.selectedUserId = userId;\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      const deepLinkManager = new CoreMainMenuDeepLinkManager();\n      yield _this.fetchData();\n      if (!_this.selectedConversationId && !_this.selectedUserId && CoreScreen.isTablet) {\n        // Load the first conversation.\n        let conversation;\n        const expandedOption = _this.getExpandedOption();\n        if (expandedOption && expandedOption.conversations.length) {\n          conversation = expandedOption.conversations[0];\n          if (conversation) {\n            yield _this.gotoConversation(conversation.id);\n          }\n        }\n      }\n      // Treat deep link now that the conversation route has been loaded if needed.\n      deepLinkManager.treatLink();\n    })();\n  }\n  /**\n   * Fetch conversations.\n   *\n   * @param refreshUnreadCounts Whether to refresh unread counts.\n   * @returns Promise resolved when done.\n   */\n  fetchData(refreshUnreadCounts = true) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Load the amount of conversations and contact requests.\n      const promises = [];\n      promises.push(_this2.fetchConversationCounts());\n      // View updated by the events observers.\n      promises.push(AddonMessages.getContactRequestsCount(_this2.siteId));\n      if (refreshUnreadCounts) {\n        promises.push(AddonMessages.refreshUnreadConversationCounts(_this2.siteId));\n      }\n      try {\n        yield Promise.all(promises);\n        // The expanded status hasn't been initialized. Do it now.\n        if (_this2.favourites.expanded === undefined && (_this2.selectedConversationId || _this2.selectedUserId)) {\n          // A certain conversation should be opened.\n          // We don't know which option it belongs to, so we need to fetch the data for all of them.\n          const promises = [];\n          promises.push(_this2.fetchDataForOption(_this2.favourites, false));\n          promises.push(_this2.fetchDataForOption(_this2.group, false));\n          promises.push(_this2.fetchDataForOption(_this2.individual, false));\n          yield Promise.all(promises);\n          // All conversations have been loaded, find the one we need to load and expand its option.\n          const conversation = _this2.findConversation(_this2.selectedConversationId, _this2.selectedUserId);\n          if (conversation) {\n            const option = _this2.getConversationOption(conversation);\n            yield _this2.expandOption(option);\n            _this2.loaded = true;\n            return;\n          }\n        }\n        // Load the data for the expanded option.\n        yield _this2.fetchDataForExpandedOption();\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n      }\n      _this2.loaded = true;\n    })();\n  }\n  /**\n   * Fetch data for the expanded option.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchDataForExpandedOption() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.favourites.expanded === undefined) {\n        // Calculate which option should be expanded initially.\n        _this3.favourites.expanded = _this3.favourites.count != 0 && !_this3.group.unread && !_this3.individual.unread;\n        _this3.group.expanded = !_this3.favourites.expanded && _this3.group.count != 0 && !_this3.individual.unread;\n        _this3.individual.expanded = !_this3.favourites.expanded && !_this3.group.expanded;\n      }\n      _this3.loadCurrentListElement();\n      const expandedOption = _this3.getExpandedOption();\n      if (expandedOption) {\n        yield _this3.fetchDataForOption(expandedOption, false);\n      }\n    })();\n  }\n  /**\n   * Fetch data for a certain option.\n   *\n   * @param option The option to fetch data for.\n   * @param loadingMore Whether we are loading more data or just the first ones.\n   * @param getCounts Whether to get counts data.\n   * @returns Promise resolved when done.\n   */\n  fetchDataForOption(option, loadingMore = false, getCounts = false) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      option.loadMoreError = false;\n      const limitFrom = loadingMore ? option.conversations.length : 0;\n      const promises = [];\n      let data = {\n        conversations: [],\n        canLoadMore: false\n      };\n      let offlineMessages = [];\n      // Get the conversations and, if needed, the offline messages. Always try to get the latest data.\n      promises.push(AddonMessages.invalidateConversations(_this4.siteId).then( /*#__PURE__*/_asyncToGenerator(function* () {\n        data = yield AddonMessages.getConversations(option.type, option.favourites, limitFrom, _this4.siteId);\n        return;\n      })));\n      if (!loadingMore) {\n        promises.push(AddonMessagesOffline.getAllMessages().then(messages => {\n          offlineMessages = messages;\n          return;\n        }));\n      }\n      if (getCounts) {\n        promises.push(_this4.fetchConversationCounts());\n        promises.push(AddonMessages.refreshUnreadConversationCounts(_this4.siteId));\n      }\n      yield Promise.all(promises);\n      if (loadingMore) {\n        option.conversations = option.conversations.concat(data.conversations);\n        option.canLoadMore = data.canLoadMore;\n      } else {\n        option.conversations = data.conversations;\n        option.canLoadMore = data.canLoadMore;\n        if (offlineMessages && offlineMessages.length) {\n          yield _this4.loadOfflineMessages(option, offlineMessages);\n          // Sort the conversations, the offline messages could affect the order.\n          option.conversations = AddonMessages.sortConversations(option.conversations);\n        }\n      }\n    })();\n  }\n  /**\n   * Fetch conversation counts.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchConversationCounts() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      // Always try to get the latest data.\n      yield AddonMessages.invalidateConversationCounts(_this5.siteId);\n      const counts = yield AddonMessages.getConversationCounts(_this5.siteId);\n      _this5.favourites.count = counts.favourites;\n      _this5.individual.count = counts.individual + counts.self; // Self is only returned if it's not favourite.\n      _this5.group.count = counts.group;\n    })();\n  }\n  /**\n   * Find a conversation in the list of loaded conversations.\n   *\n   * @param conversationId The conversation ID to search.\n   * @param userId User ID to search (if no conversationId).\n   * @param option The option to search in. If not defined, search in all options.\n   * @returns Conversation.\n   */\n  findConversation(conversationId, userId, option) {\n    if (conversationId) {\n      const conversations = option ? option.conversations : this.favourites.conversations.concat(this.group.conversations).concat(this.individual.conversations);\n      return conversations.find(conv => conv.id == conversationId);\n    }\n    const conversations = option ? option.conversations : this.favourites.conversations.concat(this.individual.conversations);\n    return conversations.find(conv => conv.userid == userId);\n  }\n  /**\n   * Get the option that is currently expanded, undefined if they are all collapsed.\n   *\n   * @returns Option currently expanded.\n   */\n  getExpandedOption() {\n    if (this.favourites.expanded) {\n      return this.favourites;\n    } else if (this.group.expanded) {\n      return this.group;\n    } else if (this.individual.expanded) {\n      return this.individual;\n    }\n  }\n  /**\n   * Navigate to contacts view.\n   */\n  gotoContacts() {\n    CoreNavigator.navigateToSitePath('contacts');\n  }\n  /**\n   * Navigate to a particular conversation.\n   *\n   * @param conversationId Conversation Id to load.\n   * @param userId User of the conversation. Only if there is no conversationId.\n   * @param messageId Message to scroll after loading the discussion. Used when searching.\n   */\n  gotoConversation(conversationId, userId, messageId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      _this6.selectedConversationId = conversationId;\n      _this6.selectedUserId = userId;\n      const params = {};\n      if (messageId) {\n        params.message = messageId;\n      }\n      const path = CoreNavigator.getRelativePathToParent('/messages/group-conversations') + 'discussion/' + (conversationId ? conversationId : `user/${userId}`);\n      yield CoreNavigator.navigate(path, {\n        params,\n        reset: CoreScreen.isTablet && !!_this6.splitView && !_this6.splitView.isNested\n      });\n    })();\n  }\n  /**\n   * Navigate to message settings.\n   */\n  gotoSettings() {\n    CoreNavigator.navigateToSitePath('message-settings');\n  }\n  /**\n   * Function to load more conversations.\n   *\n   * @param option The option to fetch data for.\n   * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n   * @returns Promise resolved when done.\n   */\n  loadMoreConversations(option, infiniteComplete) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this7.fetchDataForOption(option, true);\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n        option.loadMoreError = true;\n      }\n      infiniteComplete && infiniteComplete();\n    })();\n  }\n  /**\n   * Load offline messages into the conversations.\n   *\n   * @param option The option where the messages should be loaded.\n   * @param messages Offline messages.\n   * @returns Promise resolved when done.\n   */\n  loadOfflineMessages(option, messages) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      messages.forEach(message => {\n        if ('conversationid' in message) {\n          // It's an existing conversation. Search it in the current option.\n          let conversation = _this8.findConversation(message.conversationid, undefined, option);\n          if (conversation) {\n            // Check if it's the last message. Offline messages are considered more recent than sent messages.\n            if (conversation.lastmessage === undefined || conversation.lastmessage === null || !conversation.lastmessagepending || (conversation.lastmessagedate || 0) <= message.timecreated / 1000) {\n              _this8.addLastOfflineMessage(conversation, message);\n            }\n          } else {\n            var _message$conversation, _message$conversation2, _message$conversation3, _message$conversation4, _message$conversation5, _message$conversation6, _message$conversation7, _message$conversation8, _message$conversation9, _message$conversation10;\n            // Conversation not found, it could be an old one or the message could belong to another option.\n            conversation = {\n              id: message.conversationid,\n              type: ((_message$conversation = message.conversation) === null || _message$conversation === void 0 ? void 0 : _message$conversation.type) || AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n              membercount: ((_message$conversation2 = message.conversation) === null || _message$conversation2 === void 0 ? void 0 : _message$conversation2.membercount) || 0,\n              ismuted: ((_message$conversation3 = message.conversation) === null || _message$conversation3 === void 0 ? void 0 : _message$conversation3.ismuted) || false,\n              isfavourite: ((_message$conversation4 = message.conversation) === null || _message$conversation4 === void 0 ? void 0 : _message$conversation4.isfavourite) || false,\n              isread: ((_message$conversation5 = message.conversation) === null || _message$conversation5 === void 0 ? void 0 : _message$conversation5.isread) || false,\n              members: ((_message$conversation6 = message.conversation) === null || _message$conversation6 === void 0 ? void 0 : _message$conversation6.members) || [],\n              messages: ((_message$conversation7 = message.conversation) === null || _message$conversation7 === void 0 ? void 0 : _message$conversation7.messages) || [],\n              candeletemessagesforallusers: ((_message$conversation8 = message.conversation) === null || _message$conversation8 === void 0 ? void 0 : _message$conversation8.candeletemessagesforallusers) || false,\n              userid: 0,\n              name: (_message$conversation9 = message.conversation) === null || _message$conversation9 === void 0 ? void 0 : _message$conversation9.name,\n              imageurl: ((_message$conversation10 = message.conversation) === null || _message$conversation10 === void 0 ? void 0 : _message$conversation10.imageurl) || ''\n            };\n            if (_this8.getConversationOption(conversation) == option) {\n              // Message belongs to current option, add the conversation.\n              _this8.addLastOfflineMessage(conversation, message);\n              _this8.addOfflineConversation(conversation);\n            }\n          }\n        } else if (option.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {\n          // It's a new conversation. Check if we already created it (there is more than one message for the same user).\n          const conversation = _this8.findConversation(undefined, message.touserid, option);\n          message.text = message.smallmessage;\n          if (conversation) {\n            // Check if it's the last message. Offline messages are considered more recent than sent messages.\n            if ((conversation.lastmessagedate || 0) <= message.timecreated / 1000) {\n              _this8.addLastOfflineMessage(conversation, message);\n            }\n          } else {\n            // Get the user data and create a new conversation if it belongs to the current option.\n            promises.push(CoreUser.getProfile(message.touserid, undefined, true).catch(() => {\n              // User not found.\n            }).then(user => {\n              const conversation = {\n                id: 0,\n                type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n                membercount: 0,\n                ismuted: false,\n                isfavourite: false,\n                isread: false,\n                members: [],\n                messages: [],\n                candeletemessagesforallusers: false,\n                userid: message.touserid,\n                name: user ? user.fullname : String(message.touserid),\n                imageurl: user ? user.profileimageurl : ''\n              };\n              _this8.addLastOfflineMessage(conversation, message);\n              _this8.addOfflineConversation(conversation);\n              return;\n            }));\n          }\n        }\n      });\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Add an offline conversation into the right list of conversations.\n   *\n   * @param conversation Offline conversation to add.\n   */\n  addOfflineConversation(conversation) {\n    const option = this.getConversationOption(conversation);\n    option.conversations.unshift(conversation);\n  }\n  /**\n   * Add a last offline message into a conversation.\n   *\n   * @param conversation Conversation where to put the last message.\n   * @param message Offline message to add.\n   */\n  addLastOfflineMessage(conversation, message) {\n    conversation.lastmessage = message.text;\n    conversation.lastmessagedate = message.timecreated / 1000;\n    conversation.lastmessagepending = true;\n    conversation.sentfromcurrentuser = true;\n  }\n  /**\n   * Given a conversation, return its option (favourites, group, individual).\n   *\n   * @param conversation Conversation to check.\n   * @returns Option object.\n   */\n  getConversationOption(conversation) {\n    if (conversation.isfavourite) {\n      return this.favourites;\n    }\n    if (conversation.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP) {\n      return this.group;\n    }\n    return this.individual;\n  }\n  /**\n   * Refresh the data.\n   *\n   * @param refresher Refresher.\n   * @param refreshUnreadCounts Whether to refresh unread counts.\n   * @returns Promise resolved when done.\n   */\n  refreshData(refresher, refreshUnreadCounts = true) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      // Don't invalidate conversations and so, they always try to get latest data.\n      try {\n        yield AddonMessages.invalidateContactRequestsCountCache(_this9.siteId);\n      } finally {\n        try {\n          yield _this9.fetchData(refreshUnreadCounts);\n        } finally {\n          if (refresher) {\n            refresher === null || refresher === void 0 || refresher.complete();\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * Toogle the visibility of an option (expand/collapse).\n   *\n   * @param option The option to expand/collapse.\n   */\n  toggle(option) {\n    if (option.expanded) {\n      // Already expanded, close it.\n      option.expanded = false;\n      this.loadCurrentListElement();\n    } else {\n      // Pass getCounts=true to update the counts everytime the user expands an option.\n      this.expandOption(option, true).catch(error => {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n      });\n    }\n  }\n  /**\n   * Expand a certain option.\n   *\n   * @param option The option to expand.\n   * @param getCounts Whether to get counts data.\n   * @returns Promise resolved when done.\n   */\n  expandOption(option, getCounts = false) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      // Collapse all and expand the right one.\n      _this10.favourites.expanded = false;\n      _this10.group.expanded = false;\n      _this10.individual.expanded = false;\n      option.expanded = true;\n      option.loading = true;\n      try {\n        yield _this10.fetchDataForOption(option, false, getCounts);\n        _this10.loadCurrentListElement();\n      } catch (error) {\n        option.expanded = false;\n        throw error;\n      } finally {\n        option.loading = false;\n      }\n    })();\n  }\n  /**\n   * Load the current list element based on the expanded list.\n   */\n  loadCurrentListElement() {\n    if (this.favourites.expanded) {\n      this.currentListEl = this.favListEl && this.favListEl.nativeElement;\n    } else if (this.group.expanded) {\n      this.currentListEl = this.groupListEl && this.groupListEl.nativeElement;\n    } else if (this.individual.expanded) {\n      this.currentListEl = this.indListEl && this.indListEl.nativeElement;\n    } else {\n      this.currentListEl = undefined;\n    }\n  }\n  /**\n   * Navigate to the search page.\n   */\n  gotoSearch() {\n    CoreNavigator.navigateToSitePath('search');\n  }\n  /**\n   * Page destroyed.\n   */\n  ngOnDestroy() {\n    var _this$newMessagesObse, _this$appResumeSubscr, _this$pushObserver, _this$readChangedObse, _this$cronObserver, _this$openConversatio, _this$updateConversat, _this$contactRequests, _this$memberInfoObser;\n    (_this$newMessagesObse = this.newMessagesObserver) === null || _this$newMessagesObse === void 0 || _this$newMessagesObse.off();\n    (_this$appResumeSubscr = this.appResumeSubscription) === null || _this$appResumeSubscr === void 0 || _this$appResumeSubscr.unsubscribe();\n    (_this$pushObserver = this.pushObserver) === null || _this$pushObserver === void 0 || _this$pushObserver.unsubscribe();\n    (_this$readChangedObse = this.readChangedObserver) === null || _this$readChangedObse === void 0 || _this$readChangedObse.off();\n    (_this$cronObserver = this.cronObserver) === null || _this$cronObserver === void 0 || _this$cronObserver.off();\n    (_this$openConversatio = this.openConversationObserver) === null || _this$openConversatio === void 0 || _this$openConversatio.off();\n    (_this$updateConversat = this.updateConversationListObserver) === null || _this$updateConversat === void 0 || _this$updateConversat.off();\n    (_this$contactRequests = this.contactRequestsCountObserver) === null || _this$contactRequests === void 0 || _this$contactRequests.off();\n    (_this$memberInfoObser = this.memberInfoObserver) === null || _this$memberInfoObser === void 0 || _this$memberInfoObser.off();\n  }\n}\n_class = AddonMessagesGroupConversationsPage;\n_class.ɵfac = function AddonMessagesGroupConversationsPage_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-messages-group-conversations\"]],\n  viewQuery: function AddonMessagesGroupConversationsPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CoreSplitViewComponent, 5);\n      i0.ɵɵviewQuery(IonContent, 5);\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.splitView = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.favListEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.groupListEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.indListEl = _t.first);\n    }\n  },\n  decls: 80,\n  vars: 90,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"slot\", \"end\"], [\"fill\", \"clear\", 3, \"click\"], [\"name\", \"fas-magnifying-glass\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [3, \"click\"], [\"name\", \"fas-gear\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [3, \"hideUntil\", \"message\"], [\"button\", \"\", 1, \"ion-text-wrap\", \"addon-message-discussion\", 3, \"detail\", \"click\"], [\"name\", \"fas-address-book\", \"slot\", \"start\", \"aria-hidden\", \"true\"], [\"slot\", \"end\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"sr-only\", 4, \"ngIf\"], [\"button\", \"\", \"aria-controls\", \"addon-messages-groupconversations-favourite\", \"role\", \"heading\", 1, \"ion-text-wrap\", \"divider\", 3, \"detail\", \"click\"], [\"name\", \"fas-chevron-right\", \"flip-rtl\", \"\", \"slot\", \"start\", \"aria-hidden\", \"true\", 1, \"expandable-status-icon\"], [\"id\", \"addon-messages-groupconversations-favourite\", 3, \"hidden\"], [\"favlist\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"enabled\", \"error\", \"action\"], [\"class\", \"ion-text-wrap\", 4, \"ngIf\"], [\"class\", \"ion-text-center\", 4, \"ngIf\"], [\"button\", \"\", \"aria-controls\", \"addon-messages-groupconversations-group\", \"role\", \"heading\", 1, \"divider\", \"ion-text-wrap\", 3, \"detail\", \"click\"], [\"id\", \"addon-messages-groupconversations-group\", 3, \"hidden\"], [\"grouplist\", \"\"], [\"button\", \"\", \"aria-controls\", \"addon-messages-groupconversations-individual\", \"role\", \"heading\", 1, \"divider\", \"ion-text-wrap\", 3, \"detail\", \"click\"], [\"id\", \"addon-messages-groupconversations-individual\", 3, \"hidden\"], [\"indlist\", \"\"], [\"conversationsTemplate\", \"\"], [\"slot\", \"end\", \"aria-hidden\", \"true\"], [1, \"sr-only\"], [1, \"ion-text-wrap\"], [1, \"ion-text-center\"], [\"class\", \"ion-text-wrap addon-message-discussion\", \"button\", \"\", 3, \"detail\", \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"button\", \"\", 1, \"ion-text-wrap\", \"addon-message-discussion\", 3, \"detail\", \"id\", \"click\"], [\"slot\", \"start\", 4, \"ngIf\"], [\"core-user-avatar\", \"\", \"slot\", \"start\", 3, \"user\", \"linkProfile\", \"checkOnline\", 4, \"ngIf\"], [1, \"flex-row\", \"ion-justify-content-between\"], [1, \"item-heading\"], [\"contextLevel\", \"system\", 3, \"text\", \"contextInstanceId\"], [\"name\", \"fas-user-slash\", 3, \"title\", 4, \"ngIf\"], [\"name\", \"fas-volume-xmark\", 3, \"title\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"addon-message-last-message\", 4, \"ngIf\"], [\"core-external-content\", \"\", \"onError\", \"this.src='assets/img/group-avatar.svg'\", 3, \"src\", \"alt\"], [\"core-user-avatar\", \"\", \"slot\", \"start\", 3, \"user\", \"linkProfile\", \"checkOnline\"], [\"name\", \"fas-user-slash\", 3, \"title\"], [\"name\", \"fas-volume-xmark\", 3, \"title\"], [\"class\", \"addon-message-last-message-date\", 4, \"ngIf\"], [\"aria-label\", \"true\", 4, \"ngIf\"], [1, \"addon-message-last-message-date\"], [\"aria-label\", \"true\"], [1, \"addon-message-last-message\"], [\"class\", \"addon-message-last-message-user\", 4, \"ngIf\"], [\"clean\", \"true\", \"singleLine\", \"true\", \"contextLevel\", \"system\", 1, \"addon-message-last-message-text\", 3, \"text\", \"contextInstanceId\"], [1, \"addon-message-last-message-user\"]],\n  template: function AddonMessagesGroupConversationsPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵtext(7);\n      i0.ɵɵpipe(8, \"translate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"ion-buttons\", 2)(10, \"ion-button\", 3);\n      i0.ɵɵlistener(\"click\", function AddonMessagesGroupConversationsPage_Template_ion_button_click_10_listener() {\n        return ctx.gotoSearch();\n      });\n      i0.ɵɵpipe(11, \"translate\");\n      i0.ɵɵelement(12, \"ion-icon\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"ion-button\", 5);\n      i0.ɵɵlistener(\"click\", function AddonMessagesGroupConversationsPage_Template_ion_button_click_13_listener() {\n        return ctx.gotoSettings();\n      });\n      i0.ɵɵpipe(14, \"translate\");\n      i0.ɵɵelement(15, \"ion-icon\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"core-context-menu\")(17, \"core-user-menu-button\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"ion-content\")(19, \"core-split-view\")(20, \"ion-refresher\", 7);\n      i0.ɵɵlistener(\"ionRefresh\", function AddonMessagesGroupConversationsPage_Template_ion_refresher_ionRefresh_20_listener($event) {\n        return ctx.refreshData($event.target);\n      });\n      i0.ɵɵelement(21, \"ion-refresher-content\", 8);\n      i0.ɵɵpipe(22, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"core-loading\", 9)(24, \"ion-list\")(25, \"ion-item\", 10);\n      i0.ɵɵlistener(\"click\", function AddonMessagesGroupConversationsPage_Template_ion_item_click_25_listener() {\n        return ctx.gotoContacts();\n      });\n      i0.ɵɵelement(26, \"ion-icon\", 11);\n      i0.ɵɵelementStart(27, \"ion-label\")(28, \"h2\");\n      i0.ɵɵtext(29);\n      i0.ɵɵpipe(30, \"translate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(31, AddonMessagesGroupConversationsPage_ion_badge_31_Template, 2, 1, \"ion-badge\", 12);\n      i0.ɵɵtemplate(32, AddonMessagesGroupConversationsPage_span_32_Template, 3, 6, \"span\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"ion-item\", 14);\n      i0.ɵɵlistener(\"click\", function AddonMessagesGroupConversationsPage_Template_ion_item_click_33_listener() {\n        return ctx.toggle(ctx.favourites);\n      });\n      i0.ɵɵpipe(34, \"translate\");\n      i0.ɵɵelement(35, \"ion-icon\", 15);\n      i0.ɵɵelementStart(36, \"ion-label\")(37, \"h2\");\n      i0.ɵɵtext(38);\n      i0.ɵɵpipe(39, \"translate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(40, AddonMessagesGroupConversationsPage_ion_badge_40_Template, 2, 1, \"ion-badge\", 12);\n      i0.ɵɵtemplate(41, AddonMessagesGroupConversationsPage_span_41_Template, 3, 6, \"span\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(42, \"div\", 16, 17);\n      i0.ɵɵtemplate(44, AddonMessagesGroupConversationsPage_ng_container_44_Template, 1, 0, \"ng-container\", 18);\n      i0.ɵɵelementStart(45, \"core-infinite-loading\", 19);\n      i0.ɵɵlistener(\"action\", function AddonMessagesGroupConversationsPage_Template_core_infinite_loading_action_45_listener($event) {\n        return ctx.loadMoreConversations(ctx.favourites, $event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(46, AddonMessagesGroupConversationsPage_ion_item_46_Template, 5, 3, \"ion-item\", 20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(47, AddonMessagesGroupConversationsPage_ion_item_47_Template, 4, 3, \"ion-item\", 21);\n      i0.ɵɵelementStart(48, \"ion-item\", 22);\n      i0.ɵɵlistener(\"click\", function AddonMessagesGroupConversationsPage_Template_ion_item_click_48_listener() {\n        return ctx.toggle(ctx.group);\n      });\n      i0.ɵɵpipe(49, \"translate\");\n      i0.ɵɵelement(50, \"ion-icon\", 15);\n      i0.ɵɵelementStart(51, \"ion-label\")(52, \"h2\");\n      i0.ɵɵtext(53);\n      i0.ɵɵpipe(54, \"translate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(55, AddonMessagesGroupConversationsPage_ion_badge_55_Template, 2, 1, \"ion-badge\", 12);\n      i0.ɵɵtemplate(56, AddonMessagesGroupConversationsPage_span_56_Template, 3, 6, \"span\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(57, \"div\", 23, 24);\n      i0.ɵɵtemplate(59, AddonMessagesGroupConversationsPage_ng_container_59_Template, 1, 0, \"ng-container\", 18);\n      i0.ɵɵelementStart(60, \"core-infinite-loading\", 19);\n      i0.ɵɵlistener(\"action\", function AddonMessagesGroupConversationsPage_Template_core_infinite_loading_action_60_listener($event) {\n        return ctx.loadMoreConversations(ctx.group, $event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(61, AddonMessagesGroupConversationsPage_ion_item_61_Template, 5, 3, \"ion-item\", 20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(62, AddonMessagesGroupConversationsPage_ion_item_62_Template, 4, 3, \"ion-item\", 21);\n      i0.ɵɵelementStart(63, \"ion-item\", 25);\n      i0.ɵɵlistener(\"click\", function AddonMessagesGroupConversationsPage_Template_ion_item_click_63_listener() {\n        return ctx.toggle(ctx.individual);\n      });\n      i0.ɵɵpipe(64, \"translate\");\n      i0.ɵɵelement(65, \"ion-icon\", 15);\n      i0.ɵɵelementStart(66, \"ion-label\")(67, \"h2\");\n      i0.ɵɵtext(68);\n      i0.ɵɵpipe(69, \"translate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(70, AddonMessagesGroupConversationsPage_ion_badge_70_Template, 2, 1, \"ion-badge\", 12);\n      i0.ɵɵtemplate(71, AddonMessagesGroupConversationsPage_span_71_Template, 3, 6, \"span\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(72, \"div\", 26, 27);\n      i0.ɵɵtemplate(74, AddonMessagesGroupConversationsPage_ng_container_74_Template, 1, 0, \"ng-container\", 18);\n      i0.ɵɵelementStart(75, \"core-infinite-loading\", 19);\n      i0.ɵɵlistener(\"action\", function AddonMessagesGroupConversationsPage_Template_core_infinite_loading_action_75_listener($event) {\n        return ctx.loadMoreConversations(ctx.individual, $event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(76, AddonMessagesGroupConversationsPage_ion_item_76_Template, 5, 3, \"ion-item\", 20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(77, AddonMessagesGroupConversationsPage_ion_item_77_Template, 4, 3, \"ion-item\", 21);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵtemplate(78, AddonMessagesGroupConversationsPage_ng_template_78_Template, 1, 1, \"ng-template\", null, 28, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r20 = i0.ɵɵreference(79);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 60, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 62, \"addon.messages.messages\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(11, 64, \"addon.messages.searchcombined\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(14, 66, \"addon.messages.messagepreferences\"));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"disabled\", !ctx.loaded || !ctx.currentListEl);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(22, 68, \"core.pulltorefresh\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded)(\"message\", ctx.loadingMessage);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"detail\", true);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(30, 70, \"addon.messages.contacts\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.contactRequestsCount > 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.contactRequestsCount > 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"detail\", false);\n      i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(34, 72, ctx.favourites.expanded ? \"core.collapse\" : \"core.expand\"))(\"aria-expanded\", ctx.favourites.expanded);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"expandable-status-icon-expanded\", ctx.favourites.expanded);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind1(39, 74, \"core.favourites\"), \" (\", ctx.favourites.count, \")\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.favourites.unread);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.favourites.unread);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hidden\", !ctx.favourites.conversations || !ctx.favourites.expanded || ctx.favourites.loading);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r20)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(84, _c4, ctx.favourites.conversations));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"enabled\", ctx.favourites.canLoadMore)(\"error\", ctx.favourites.loadMoreError);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.favourites.conversations && ctx.favourites.conversations.length === 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.favourites.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"detail\", false);\n      i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(49, 76, ctx.group.expanded ? \"core.collapse\" : \"core.expand\"))(\"aria-expanded\", ctx.group.expanded);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"expandable-status-icon-expanded\", ctx.group.expanded);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind1(54, 78, \"addon.messages.groupconversations\"), \" (\", ctx.group.count, \")\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.group.unread);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.group.unread);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hidden\", !ctx.group.conversations || !ctx.group.expanded || ctx.group.loading);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r20)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(86, _c4, ctx.group.conversations));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"enabled\", ctx.group.canLoadMore)(\"error\", ctx.group.loadMoreError);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.group.conversations && ctx.group.conversations.length === 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.group.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"detail\", false);\n      i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(64, 80, ctx.individual.expanded ? \"core.collapse\" : \"core.expand\"))(\"aria-expanded\", ctx.individual.expanded);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"expandable-status-icon-expanded\", ctx.individual.expanded);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind1(69, 82, \"addon.messages.individualconversations\"), \" (\", ctx.individual.count, \")\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.individual.unread);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.individual.unread);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hidden\", !ctx.individual.conversations || !ctx.individual.expanded || ctx.individual.loading);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r20)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(88, _c4, ctx.individual.conversations));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"enabled\", ctx.individual.canLoadMore)(\"error\", ctx.individual.loadMoreError);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.individual.conversations && ctx.individual.conversations.length === 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.individual.loading);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet, i3.CoreContextMenuComponent, i4.CoreInfiniteLoadingComponent, i5.CoreLoadingComponent, i6.CoreSplitViewComponent, i7.CoreUserAvatarComponent, i8.CoreExternalContentDirective, i9.CoreFaIconDirective, i10.CoreFormatTextDirective, i11.CoreContentDirective, i12.CoreUpdateNonReactiveAttributesDirective, i13.IonAvatar, i13.IonBadge, i13.IonButton, i13.IonButtons, i13.IonContent, i13.IonHeader, i13.IonIcon, i13.IonItem, i13.IonLabel, i13.IonList, i13.IonNote, i13.IonRefresher, i13.IonRefresherContent, i13.IonSpinner, i13.IonTitle, i13.IonToolbar, i13.IonBackButton, i14.CoreMainMenuUserButtonComponent, i15.CoreDateDayOrTimePipe, i16.TranslatePipe],\n  styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%] {\\n  margin-right: 0;\\n  margin-left: 0;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%] {\\n  -webkit-margin-start: 2px;\\n  margin-inline-start: 2px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-self: flex-start;\\n  -webkit-margin-start: 2px;\\n  margin-inline-start: 2px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-badge[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-badge[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%] {\\n  margin-top: 3px;\\n  align-self: flex-end;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   .addon-message-last-message-date[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   .addon-message-last-message-date[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  font-size: 11px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .addon-message-last-message[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .addon-message-last-message[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: flex-start;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .addon-message-last-message-user[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .addon-message-last-message-user[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  color: var(--ion-text-color);\\n  -webkit-margin-end: 2px;\\n  margin-inline-end: 2px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .addon-message-last-message-text[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .addon-message-last-message-text[_ngcontent-%COMP%] {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  flex-shrink: 1;\\n}\\n[_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n}\\n[_nghost-%COMP%]   ion-item-divider[_ngcontent-%COMP%]   ion-badge[_ngcontent-%COMP%] {\\n  margin-left: 16px;\\n  margin-right: 16px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9nbG9iYWxzLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvdGhlbWUvaGVscGVycy9pb25pYy5mdW5jdGlvbnMuc3RyaW5nLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvdGhlbWUvaGVscGVycy9pb25pYy5mdW5jdGlvbnMuY29sb3Iuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9oZWxwZXJzL2lvbmljLm1peGlucy5zY3NzIiwid2VicGFjazovLy4vc3JjL3RoZW1lL2hlbHBlcnMvaW9uaWMuY29tcG9uZW50cy5taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9oZWxwZXJzL2N1c3RvbS5taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy90aGVtZS9nbG9iYWxzLmN1c3RvbS5zY3NzIiwid2VicGFjazovLy4vc3JjL3RoZW1lL2dsb2JhbHMudmFyaWFibGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvYWRkb25zL21lc3NhZ2VzL21lc3NhZ2VzLWNvbW1vbi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0VBQUE7QUNBQTs7Ozs7RUFBQTtBQ0FBOzs7OztFQUFBO0FDQUE7Ozs7O0VBQUE7QUNBQTs7Ozs7O0VBQUE7QUNFQTs7OztFQUFBO0FBNEdBOztFQUFBO0FDOUdBOzs7O0VBQUE7QUNBQTs7OztFQUFBO0FBK0RBOzs7O0VBQUE7QUMxRFE7O0VBQ0ksZUFBQTtFQUNBLGNBQUE7QUFrRFo7QUE5Q1k7O0VBQ0ksaUJBQUE7QUFpRGhCO0FBOUNZOztFTHNTUix5QktyU3VDO0VMc1N2Qyx3Qkt0U3VDO0FBa0QzQztBQTlDUTs7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxzQkFBQTtFTDhSUix5Qks3Um1DO0VMOFJuQyx3Qks5Um1DO0FBa0R2QztBQWhEWTs7O0VBQ0ksZUFBQTtFQUNBLG9CQUFBO0FBb0RoQjtBQWxEWTs7RUFDSSxtQkFBQTtFQUNBLGVBQUE7QUFxRGhCO0FBakRROztFQUNJLGFBQUE7RUFDQSwyQkFBQTtBQW9EWjtBQWpEUTs7RUFDSSxtQkFBQTtFQUNBLDRCQUFBO0VMNFFSLHVCSzNReUM7RUw0UXpDLHNCSzVReUM7QUFxRDdDO0FBbERROztFQUNJLGdCQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLGNBQUE7QUFxRFo7QUFoRFE7RUFDSSxnQkFBQTtBQWtEWjtBQTlDSTtFQUNJLGlCQUFBO0VBQ0Esa0JBQUE7QUFnRFIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFwcCBHbG9iYWwgdmFyaWFibGVzIFNDU1NcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBsYWNlIGhlcmUgdGhlIGRpZmZlcmVudCBmaWxlcyB5b3Ugc2hvdWxkIGltcG9ydCB0byB1c2UgZ2xvYmFsIHZhcmlhYmxlcy5cbiAqL1xuXG4kZm9udC1wYXRoOiBcIi4uL2Fzc2V0cy9mb250c1wiO1xuJGFzc2V0cy1wYXRoOiBcIi4uL2Fzc2V0c1wiO1xuXG5AaW1wb3J0IFwiLi9oZWxwZXJzL2hlbHBlcnMuc2Nzc1wiO1xuQGltcG9ydCBcIi4vZ2xvYmFscy5jdXN0b20uc2Nzc1wiO1xuQGltcG9ydCBcIi4vZ2xvYmFscy52YXJpYWJsZXMuc2Nzc1wiO1xuIiwiLyoqXG4gKiBJbXBvcnRlZCBpb25pYyBzdHJpbmcgZnVuY3Rpb25zIGZvciBTQ1NTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFeHRyYWN0ZWQgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL3RoZW1lcy9pb25pYy5mdW5jdGlvbnMuc3RyaW5nLnNjc3NcbiAqL1xuXG5cbi8vIFN0cmluZyBVdGlsaXR5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gU3RyaW5nIFJlcGxhY2UgRnVuY3Rpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBmdW5jdGlvbiBzdHItcmVwbGFjZSgkc3RyaW5nLCAkc2VhcmNoLCAkcmVwbGFjZTogXCJcIikge1xuICAkaW5kZXg6IHN0ci1pbmRleCgkc3RyaW5nLCAkc2VhcmNoKTtcblxuICBAaWYgJGluZGV4IHtcbiAgICBAcmV0dXJuIHN0ci1zbGljZSgkc3RyaW5nLCAxLCAkaW5kZXggLSAxKSArICRyZXBsYWNlICsgc3RyLXJlcGxhY2Uoc3RyLXNsaWNlKCRzdHJpbmcsICRpbmRleCArIHN0ci1sZW5ndGgoJHNlYXJjaCkpLCAkc2VhcmNoLCAkcmVwbGFjZSk7XG4gIH1cblxuICBAcmV0dXJuICRzdHJpbmc7XG59XG5cbi8vIFN0cmluZyBTcGxpdCBGdW5jdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG5AZnVuY3Rpb24gc3RyLXNwbGl0KCRzdHJpbmcsICRzZXBhcmF0b3IpIHtcbiAgLy8gZW1wdHkgYXJyYXkvbGlzdFxuICAkc3BsaXQtYXJyOiAoKTtcbiAgLy8gZmlyc3QgaW5kZXggb2Ygc2VwYXJhdG9yIGluIHN0cmluZ1xuICAkaW5kZXg6IHN0ci1pbmRleCgkc3RyaW5nLCAkc2VwYXJhdG9yKTtcbiAgLy8gbG9vcCB0aHJvdWdoIHN0cmluZ1xuICBAd2hpbGUgJGluZGV4ICE9IG51bGwge1xuICAgIC8vIGdldCB0aGUgc3Vic3RyaW5nIGZyb20gdGhlIGZpcnN0IGNoYXJhY3RlciB0byB0aGUgc2VwYXJhdG9yXG4gICAgJGl0ZW06IHN0ci1zbGljZSgkc3RyaW5nLCAxLCAkaW5kZXggLSAxKTtcbiAgICAvLyBwdXNoIGl0ZW0gdG8gYXJyYXlcbiAgICAkc3BsaXQtYXJyOiBhcHBlbmQoJHNwbGl0LWFyciwgJGl0ZW0pO1xuICAgIC8vIHJlbW92ZSBpdGVtIGFuZCBzZXBhcmF0b3IgZnJvbSBzdHJpbmdcbiAgICAkc3RyaW5nOiBzdHItc2xpY2UoJHN0cmluZywgJGluZGV4ICsgMSk7XG4gICAgLy8gZmluZCBuZXcgaW5kZXggb2Ygc2VwYXJhdG9yXG4gICAgJGluZGV4OiBzdHItaW5kZXgoJHN0cmluZywgJHNlcGFyYXRvcik7XG4gIH1cbiAgLy8gYWRkIHRoZSByZW1haW5pbmcgc3RyaW5nIHRvIGxpc3QgKHRoZSBsYXN0IGl0ZW0pXG4gICRzcGxpdC1hcnI6IGFwcGVuZCgkc3BsaXQtYXJyLCAkc3RyaW5nKTtcblxuICBAcmV0dXJuICRzcGxpdC1hcnI7XG59XG5cblxuLy8gU3RyaW5nIEV4dHJhY3QgRnVuY3Rpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBmdW5jdGlvbiBzdHItZXh0cmFjdCgkc3RyaW5nLCAkc3RhcnQsICRlbmQpIHtcbiAgJHN0YXJ0LWluZGV4OiBzdHItaW5kZXgoJHN0cmluZywgJHN0YXJ0KTtcblxuICBAaWYgJHN0YXJ0LWluZGV4IHtcbiAgICAkcG9zdDogc3RyLXNsaWNlKCRzdHJpbmcsICRzdGFydC1pbmRleCArIHN0ci1sZW5ndGgoJHN0YXJ0KSk7XG4gICAgJGVuZC1pbmRleDogc3RyLWluZGV4KCRwb3N0LCAkZW5kKTtcblxuICAgIEBpZiAkZW5kLWluZGV4IHtcbiAgICAgIEByZXR1cm4gc3RyLXNsaWNlKCRwb3N0LCAxLCAkZW5kLWluZGV4IC0gMSk7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiBudWxsO1xufVxuXG5cbi8vIFN0cmluZyBDb250YWlucyBGdW5jdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQGZ1bmN0aW9uIHN0ci1jb250YWlucygkc3RyaW5nLCAkbmVlZGxlKSB7XG4gIEBpZiAodHlwZS1vZigkc3RyaW5nKSA9PSBzdHJpbmcpIHtcbiAgICBAcmV0dXJuIHN0ci1pbmRleCgkc3RyaW5nLCAkbmVlZGxlKSAhPSBudWxsO1xuICB9XG5cbiAgQHJldHVybiBmYWxzZTtcbn1cblxuXG4vLyBVUkwgRW5jb2RlIEZ1bmN0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AZnVuY3Rpb24gdXJsLWVuY29kZSgkdmFsKSB7XG4gICRzcGFjZXM6IHN0ci1yZXBsYWNlKCR2YWwsIFwiIFwiLCBcIiUyMFwiKTtcbiAgJGVuY29kZWQ6IHN0ci1yZXBsYWNlKCRzcGFjZXMsIFwiI1wiLCBcIiUyM1wiKTtcbiAgQHJldHVybiAkZW5jb2RlZDtcbn1cblxuXG4vLyBBZGQgUm9vdCBTZWxlY3RvclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEFkZHMgYSByb290IHNlbGVjdG9yIHVzaW5nIGhvc3QgYmFzZWQgb24gdGhlIHNlbGVjdG9yIHBhc3NlZFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQGZ1bmN0aW9uIGFkZC1yb290LXNlbGVjdG9yKCRyb290LCAkYWRkSG9zdFNlbGVjdG9yKSB7XG4gICRzZWxlY3RvcnM6IHN0ci1zcGxpdCgkcm9vdCwgXCIsXCIpO1xuXG4gICRsaXN0OiAoKTtcblxuICBAZWFjaCAkc2VsZWN0b3IgaW4gJHNlbGVjdG9ycyB7XG4gICAgLy8gSWYgdGhlIHNlbGVjdG9yIGNvbnRhaW5zIDpob3N0KCBpdCBtZWFucyBpdCBpcyB0YXJnZXRpbmcgYSBjbGFzcyBvbiB0aGUgaG9zdFxuICAgIC8vIGVsZW1lbnQgc28gd2UgbmVlZCB0byBjaGFuZ2UgaG93IHdlIHRhcmdldCBpdDpcbiAgICAvLyBAaW5jbHVkZSBhZGQtcm9vdC1zZWxlY3RvcihcIjpob3N0KC5maXhlZClcIiwgXCJbZGlyPXJ0bF1cIilcbiAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLmZpeGVkKVxuICAgIC8vIC0tPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuZml4ZWRcbiAgICBAaWYgc3RyLWNvbnRhaW5zKCRzZWxlY3RvciwgXCI6aG9zdChcIikge1xuICAgICAgLy8gQGluY2x1ZGUgYWRkLXJvb3Qtc2VsZWN0b3IoXCI6aG9zdCguZml4ZWQpXCIsIFwiW2Rpcj1ydGxdXCIpXG4gICAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLmZpeGVkKVxuICAgICAgJHNoYWRvdy1lbGVtZW50OiBzdHItcmVwbGFjZSgkc2VsZWN0b3IsIFwiOmhvc3QoXCIsIFwiOmhvc3QtY29udGV4dCgjeyRhZGRIb3N0U2VsZWN0b3J9KTpob3N0KFwiKTtcbiAgICAgICRsaXN0OiBhcHBlbmQoJGxpc3QsICRzaGFkb3ctZWxlbWVudCwgY29tbWEpO1xuXG4gICAgICAkbmV3LWVsZW1lbnQ6ICgpO1xuICAgICAgJGVsZW1lbnRzOiBzdHItc3BsaXQoJHNlbGVjdG9yLCBcIiBcIik7XG5cbiAgICAgIEBlYWNoICRlbGVtZW50IGluICRlbGVtZW50cyB7XG4gICAgICAgIEBpZiBzdHItY29udGFpbnMoJGVsZW1lbnQsIFwiOmhvc3QoXCIpIHtcbiAgICAgICAgICAkc2NvcGVkLWVsZW1lbnQ6ICRlbGVtZW50O1xuXG4gICAgICAgICAgLy8gUmVwbGFjZSB0aGUgOmhvc3QoIGFuZCApIHNvIGFsbCB3ZSBoYXZlIGxlZnQgaXMgdGhlIGNsYXNzXG4gICAgICAgICAgLy8gaW5zaWRlIG9mIGl0OlxuICAgICAgICAgIC8vIDpob3N0KC5maXhlZCkgLT4gLmZpeGVkXG4gICAgICAgICAgJHNjb3BlZC1lbGVtZW50OiBzdHItcmVwbGFjZSgkc2NvcGVkLWVsZW1lbnQsIFwiKVwiLCBcIlwiKTtcbiAgICAgICAgICAkc2NvcGVkLWVsZW1lbnQ6IHN0ci1yZXBsYWNlKCRzY29wZWQtZWxlbWVudCwgXCI6aG9zdChcIiwgXCJcIik7XG5cbiAgICAgICAgICAvLyBBZGQgdGhlIGNsYXNzIGJhY2sgaW5zaWRlIG9mIGhvc3Qgd2l0aCB0aGUgcnRsIHNlbGVjdG9yOlxuICAgICAgICAgIC8vIC5maXhlZCAtPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuZml4ZWRcbiAgICAgICAgICAkc2NvcGVkLWVsZW1lbnQ6IHN0ci1yZXBsYWNlKCRzY29wZWQtZWxlbWVudCwgJHNjb3BlZC1lbGVtZW50LCBcIjpob3N0LWNvbnRleHQoI3skYWRkSG9zdFNlbGVjdG9yfSkjeyRzY29wZWQtZWxlbWVudH1cIik7XG5cbiAgICAgICAgICAvLyBAaW5jbHVkZSBhZGQtcm9vdC1zZWxlY3RvcihcIjpob3N0KC5maXhlZClcIiwgXCJbZGlyPXJ0bF1cIilcbiAgICAgICAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLmZpeGVkXG4gICAgICAgICAgJG5ldy1lbGVtZW50OiBhcHBlbmQoJG5ldy1lbGVtZW50LCAkc2NvcGVkLWVsZW1lbnQsIHNwYWNlKTtcbiAgICAgICAgfSBAZWxzZSB7XG4gICAgICAgICAgLy8gQWRkIGJhY2sgYW55IHNlbGVjdG9ycyB0aGF0IGZvbGxvd2VkIHRoZSBob3N0IGFmdGVyIHRyYW5zZm9ybWluZyB0aGVcbiAgICAgICAgICAvLyBmaXJzdCBzZWxlY3RvcjpcbiAgICAgICAgICAvLyA6aG9zdCguZml4ZWQpIDo6c2xvdHRlZChpb24taWNvbilcbiAgICAgICAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLmZpeGVkKSA6OnNsb3R0ZWQoaW9uLWljb24pXG4gICAgICAgICAgLy8gLS0+IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5maXhlZCA6OnNsb3R0ZWQoaW9uLWljb24pXG4gICAgICAgICAgJG5ldy1lbGVtZW50OiBhcHBlbmQoJG5ldy1lbGVtZW50LCAkZWxlbWVudCwgc3BhY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRsaXN0OiBhcHBlbmQoJGxpc3QsICRuZXctZWxlbWVudCwgY29tbWEpO1xuICAgIC8vIElmIHRoZSBzZWxlY3RvciBjb250YWlucyA6aG9zdCB3aXRob3V0IGEgcGFyYW50aGVzZXNcbiAgICAvLyBpdCBtZWFucyBpdCBpcyB0YXJnZXRpbmcganVzdCB0aGUgaG9zdFxuICAgIC8vIGVsZW1lbnQgc28gd2UgY2FuIGNoYW5nZSBpdCB0byBsb29rIGZvciBob3N0LWNvbnRleHRcbiAgICAvLyBAaW5jbHVkZSBhZGQtcm9vdC1zZWxlY3RvcihcIjpob3N0XCIsIFwiW2Rpcj1ydGxdXCIpXG4gICAgLy8gLS0+IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKVxuICAgIC8vIC0tPiA6aG9zdDpkaXIocnRsKVxuICAgIH0gQGVsc2UgaWYgc3RyLWNvbnRhaW5zKCRzZWxlY3RvciwgXCI6aG9zdFwiKSB7XG4gICAgICAkbmV3LWVsZW1lbnQ6ICgpO1xuICAgICAgJGVsZW1lbnRzOiBzdHItc3BsaXQoJHNlbGVjdG9yLCBcIiBcIik7XG5cbiAgICAgIEBlYWNoICRlbGVtZW50IGluICRlbGVtZW50cyB7XG4gICAgICAgIEBpZiBzdHItY29udGFpbnMoJGVsZW1lbnQsIFwiOmhvc3RcIikge1xuICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIDpob3N0IHdpdGggdGhlIGFkZEhvc3RTZWxlY3RvcjpcbiAgICAgICAgICAvLyA6aG9zdCAtPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSlcbiAgICAgICAgICAkdXBkYXRlZC1lbGVtZW50OiBzdHItcmVwbGFjZSgkZWxlbWVudCwgXCI6aG9zdFwiLCBcIjpob3N0LWNvbnRleHQoI3skYWRkSG9zdFNlbGVjdG9yfSlcIik7XG5cbiAgICAgICAgICAvLyBBZGQgdGhlIGZpbmFsIHNlbGVjdG9yIGFmdGVyIGFsbCB0cmFuc2Zvcm1hdGlvbnM6XG4gICAgICAgICAgLy8gOmhvc3QgLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pXG4gICAgICAgICAgJG5ldy1lbGVtZW50OiBhcHBlbmQoJG5ldy1lbGVtZW50LCAkdXBkYXRlZC1lbGVtZW50LCBzcGFjZSk7XG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgIC8vIEFkZCBiYWNrIGFueSBzZWxlY3RvcnMgdGhhdCBmb2xsb3dlZCB0aGUgaG9zdCBhZnRlciB0cmFuc2Zvcm1pbmcgdGhlXG4gICAgICAgICAgLy8gZmlyc3Qgc2VsZWN0b3I6XG4gICAgICAgICAgLy8gOmhvc3QgOjpzbG90dGVkKGlvbi1pY29uKSAtPiA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgOjpzbG90dGVkKGlvbi1pY29uKVxuICAgICAgICAgICRuZXctZWxlbWVudDogYXBwZW5kKCRuZXctZWxlbWVudCwgJGVsZW1lbnQsIHNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkbGlzdDogYXBwZW5kKCRsaXN0LCAkbmV3LWVsZW1lbnQsIGNvbW1hKTtcbiAgICAvLyBJZiB0aGUgc2VsZWN0b3IgZG9lcyBub3QgY29udGFpbiBob3N0IGF0IGFsbCBpdCBpcyBlaXRoZXIgYSBzaGFkb3dcbiAgICAvLyBvciBub3JtYWwgZWxlbWVudCBzbyBhcHBlbmQgYm90aCB0aGUgYWRkSG9zdFNlbGVjdG9yIGFuZCBob3N0LWNvbnRleHRcbiAgICAvLyBAaW5jbHVkZSBhZGQtcm9vdC1zZWxlY3RvcihcImlvbi1jb21wb25lbnRcIiwgXCJbZGlyPXJ0bF1cIilcbiAgICAvLyAtLT4gOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIGlvbi1jb21wb25lbnRcbiAgICAvLyAtLT4gW2Rpcj1ydGxdIGlvbi1jb21wb25lbnRcbiAgICB9IEBlbHNlIHtcbiAgICAgICRsaXN0OiBhcHBlbmQoJGxpc3QsIFwiI3skYWRkSG9zdFNlbGVjdG9yfSAjeyRzZWxlY3Rvcn1cIiwgY29tbWEpO1xuICAgICAgJGxpc3Q6IGFwcGVuZCgkbGlzdCwgXCI6aG9zdC1jb250ZXh0KCN7JGFkZEhvc3RTZWxlY3Rvcn0pICN7JHNlbGVjdG9yfVwiLCBjb21tYSk7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkbGlzdDtcbn1cbiIsIi8qKlxuICogSW1wb3J0ZWQgaW9uaWMgY29sb3IgZnVuY3Rpb25zIGZvciBTQ1NTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFeHRyYWN0ZWQgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL3RoZW1lcy9pb25pYy5mdW5jdGlvbnMuY29sb3Iuc2Nzc1xuICovXG5cbi8vIEdldHMgdGhlIGFjdGl2ZSBjb2xvcidzIGNzcyB2YXJpYWJsZSBmcm9tIGEgdmFyaWF0aW9uLiBBbHBoYSBpcyBvcHRpb25hbC5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeGFtcGxlIHVzYWdlOlxuLy8gY3VycmVudC1jb2xvcihiYXNlKSA9PiB2YXIoLS1pb24tY29sb3ItYmFzZSlcbi8vIGN1cnJlbnQtY29sb3IoY29udHJhc3QsIDAuMSkgPT4gcmdiYSh2YXIoLS1pb24tY29sb3ItY29udHJhc3QtcmdiKSwgMC4xKVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBjdXJyZW50LWNvbG9yKCR2YXJpYXRpb24sICRhbHBoYTogbnVsbCkge1xuICBAaWYgJGFscGhhID09IG51bGwge1xuICAgIEByZXR1cm4gdmFyKC0taW9uLWNvbG9yLSN7JHZhcmlhdGlvbn0pO1xuICB9IEBlbHNlIHtcbiAgICBAcmV0dXJuIHJnYmEodmFyKC0taW9uLWNvbG9yLSN7JHZhcmlhdGlvbn0tcmdiKSwgI3skYWxwaGF9KTtcbiAgfVxufVxuXG4vLyBHZXRzIHRoZSBzcGVjaWZpYyBjb2xvcidzIGNzcyB2YXJpYWJsZSBmcm9tIHRoZSBuYW1lIGFuZCB2YXJpYXRpb24uIEFscGhhL3JnYiBhcmUgb3B0aW9uYWwuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhhbXBsZSB1c2FnZTpcbi8vIGlvbi1jb2xvcihwcmltYXJ5LCBiYXNlKSA9PiB2YXIoLS1pb24tY29sb3ItcHJpbWFyeSwgIzM4ODBmZilcbi8vIGlvbi1jb2xvcihzZWNvbmRhcnksIGNvbnRyYXN0KSA9PiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5LWNvbnRyYXN0KVxuLy8gaW9uLWNvbG9yKHByaW1hcnksIGJhc2UsIDAuNSkgPT4gcmdiYSh2YXIoLS1pb24tY29sb3ItcHJpbWFyeS1yZ2IsIDU2LCAxMjgsIDI1NSksIDAuNSlcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZnVuY3Rpb24gaW9uLWNvbG9yKCRuYW1lLCAkdmFyaWF0aW9uLCAkYWxwaGE6IG51bGwsICRyZ2I6IG51bGwpIHtcbiAgJHZhbHVlczogbWFwLWdldCgkY29sb3JzLCAkbmFtZSk7XG4gICR2YWx1ZTogbWFwLWdldCgkdmFsdWVzLCAkdmFyaWF0aW9uKTtcbiAgJHZhcmlhYmxlOiAtLWlvbi1jb2xvci0jeyRuYW1lfS0jeyR2YXJpYXRpb259O1xuXG4gIEBpZiAoJHZhcmlhdGlvbiA9PSBiYXNlKSB7XG4gICAgJHZhcmlhYmxlOiAtLWlvbi1jb2xvci0jeyRuYW1lfTtcbiAgfVxuXG4gIEBpZiAoJGFscGhhKSB7XG4gICAgJHZhbHVlOiBjb2xvci10by1yZ2ItbGlzdCgkdmFsdWUpO1xuICAgIEByZXR1cm4gcmdiYSh2YXIoI3skdmFyaWFibGV9LXJnYiwgJHZhbHVlKSwgJGFscGhhKTtcbiAgfVxuICBAaWYgKCRyZ2IpIHtcbiAgICAkdmFsdWU6IGNvbG9yLXRvLXJnYi1saXN0KCR2YWx1ZSk7XG4gICAgJHZhcmlhYmxlOiAjeyR2YXJpYWJsZX0tcmdiO1xuICB9XG5cbiAgQHJldHVybiB2YXIoI3skdmFyaWFibGV9LCAkdmFsdWUpO1xufVxuXG4vLyBNaXhlcyBhIGNvbG9yIHdpdGggYmxhY2sgdG8gY3JlYXRlIGl0cyBzaGFkZS5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZnVuY3Rpb24gZ2V0LWNvbG9yLXNoYWRlKCRjb2xvcikge1xuICBAcmV0dXJuIG1peCgjMDAwLCAkY29sb3IsIDEyJSk7XG59XG5cbi8vIE1peGVzIGEgY29sb3Igd2l0aCB3aGl0ZSB0byBjcmVhdGUgaXRzIHRpbnQuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIGdldC1jb2xvci10aW50KCRjb2xvcikge1xuICBAcmV0dXJuIG1peCgjZmZmLCAkY29sb3IsIDEwJSk7XG59XG5cbi8vIENvbnZlcnRzIGEgY29sb3IgdG8gYSBjb21tYSBzZXBhcmF0ZWQgcmdiLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBjb2xvci10by1yZ2ItbGlzdCgkY29sb3IpIHtcbiAgQHJldHVybiAje3JlZCgkY29sb3IpfSwje2dyZWVuKCRjb2xvcil9LCN7Ymx1ZSgkY29sb3IpfTtcbn1cbiIsIi8qKlxuICogSW1wb3J0ZWQgaW9uaWMgbWl4aW5zIGZvciBTQ1NTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFeHRyYWN0ZWQgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL3RoZW1lcy9pb25pYy5taXhpbnMuc2Nzc1xuICovXG5cbkBtaXhpbiBpbnB1dC1jb3ZlcigpIHtcbiAgQGluY2x1ZGUgcG9zaXRpb24oMCwgbnVsbCwgbnVsbCwgMCk7XG4gIEBpbmNsdWRlIG1hcmdpbigwKTtcblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcblxuICBib3JkZXI6IDA7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgYXBwZWFyYW5jZTogbm9uZTtcbiAgb3V0bGluZTogbm9uZTtcblxuICAmOjotbW96LWZvY3VzLWlubmVyIHtcbiAgICBib3JkZXI6IDA7XG4gIH1cbn1cblxuQG1peGluIHZpc3VhbGx5LWhpZGRlbigpIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuXG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuXG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcblxuICBib3JkZXI6IDA7XG4gIG91dGxpbmU6IDA7XG4gIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG5cbiAgb3BhY2l0eTogMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuQG1peGluIHRleHQtaW5oZXJpdCgpIHtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgZm9udC1zdHlsZTogaW5oZXJpdDtcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XG4gIGxldHRlci1zcGFjaW5nOiBpbmhlcml0O1xuICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQ7XG4gIHRleHQtaW5kZW50OiBpbmhlcml0O1xuICB0ZXh0LW92ZXJmbG93OiBpbmhlcml0O1xuICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdDtcbiAgdGV4dC1hbGlnbjogaW5oZXJpdDtcbiAgd2hpdGUtc3BhY2U6IGluaGVyaXQ7XG4gIGNvbG9yOiBpbmhlcml0O1xufVxuXG5AbWl4aW4gYnV0dG9uLXN0YXRlKCkge1xuICBAaW5jbHVkZSBwb3NpdGlvbigwLCAwLCAwLCAwKTtcblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgY29udGVudDogXCJcIjtcblxuICBvcGFjaXR5OiAwO1xufVxuXG4vLyBGb250IHNtb290aGluZ1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQG1peGluIGZvbnQtc21vb3RoaW5nKCkge1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbn1cblxuLy8gR2V0IHRoZSBrZXkgZnJvbSBhIG1hcCBiYXNlZCBvbiB0aGUgaW5kZXhcbkBmdW5jdGlvbiBpbmRleC10by1rZXkoJG1hcCwgJGluZGV4KSB7XG4gICRrZXlzOiBtYXAta2V5cygkbWFwKTtcblxuICBAcmV0dXJuIG50aCgka2V5cywgJGluZGV4KTtcbn1cblxuXG4vLyBCcmVha3BvaW50IE1peGluc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEJyZWFrcG9pbnQgdmlld3BvcnQgc2l6ZXMgYW5kIG1lZGlhIHF1ZXJpZXMuXG4vL1xuLy8gQnJlYWtwb2ludHMgYXJlIGRlZmluZWQgYXMgYSBtYXAgb2YgKG5hbWU6IG1pbmltdW0gd2lkdGgpLCBvcmRlciBmcm9tIHNtYWxsIHRvIGxhcmdlOlxuLy9cbi8vICAgICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweClcbi8vXG4vLyBUaGUgbWFwIGRlZmluZWQgaW4gdGhlIGAkc2NyZWVuLWJyZWFrcG9pbnRzYCBnbG9iYWwgdmFyaWFibGUgaXMgdXNlZCBhcyB0aGUgYCRicmVha3BvaW50c2AgYXJndW1lbnQgYnkgZGVmYXVsdC5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIE1pbmltdW0gYnJlYWtwb2ludCB3aWR0aC4gTnVsbCBmb3IgdGhlIHNtYWxsZXN0IChmaXJzdCkgYnJlYWtwb2ludC5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LW1pbihzbSwgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KSlcbi8vICAgIDU3NnB4XG5AZnVuY3Rpb24gYnJlYWtwb2ludC1taW4oJG5hbWUsICRicmVha3BvaW50czogJHNjcmVlbi1icmVha3BvaW50cykge1xuICAkbWluOiBtYXAtZ2V0KCRicmVha3BvaW50cywgJG5hbWUpO1xuXG4gIEByZXR1cm4gaWYoJG5hbWUgIT0gaW5kZXgtdG8ta2V5KCRicmVha3BvaW50cywgMSksICRtaW4sIG51bGwpO1xufVxuXG4vLyBSZXR1cm5zIGEgYmxhbmsgc3RyaW5nIGlmIHNtYWxsZXN0IGJyZWFrcG9pbnQsIG90aGVyd2lzZSByZXR1cm5zIHRoZSBuYW1lIHdpdGggYSBkYXNoIGluZnJvbnQuXG4vLyBVc2VmdWwgZm9yIG1ha2luZyByZXNwb25zaXZlIHV0aWxpdGllcy5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LWluZml4KHhzLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgXCJcIiAgKFJldHVybnMgYSBibGFuayBzdHJpbmcpXG4vLyAgICA+PiBicmVha3BvaW50LWluZml4KHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgXCItc21cIlxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtaW5maXgoJG5hbWUsICRicmVha3BvaW50czogJHNjcmVlbi1icmVha3BvaW50cykge1xuICBAcmV0dXJuIGlmKGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpID09IG51bGwsIFwiXCIsIFwiLSN7JG5hbWV9XCIpO1xufVxuXG4vLyBNZWRpYSBvZiBhdCBsZWFzdCB0aGUgbWluaW11bSBicmVha3BvaW50IHdpZHRoLiBObyBxdWVyeSBmb3IgdGhlIHNtYWxsZXN0IGJyZWFrcG9pbnQuXG4vLyBNYWtlcyB0aGUgQGNvbnRlbnQgYXBwbHkgdG8gdGhlIGdpdmVuIGJyZWFrcG9pbnQgYW5kIHdpZGVyLlxuQG1peGluIG1lZGlhLWJyZWFrcG9pbnQtdXAoJG5hbWUsICRicmVha3BvaW50czogJHNjcmVlbi1icmVha3BvaW50cykge1xuICAkbWluOiBicmVha3BvaW50LW1pbigkbmFtZSwgJGJyZWFrcG9pbnRzKTtcbiAgQGlmICRtaW4ge1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiAkbWluKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vIE5hbWUgb2YgdGhlIG5leHQgYnJlYWtwb2ludCwgb3IgbnVsbCBmb3IgdGhlIGxhc3QgYnJlYWtwb2ludC5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LW5leHQoc20pXG4vLyAgICBtZFxuLy8gICAgPj4gYnJlYWtwb2ludC1uZXh0KHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgbWRcbi8vICAgID4+IGJyZWFrcG9pbnQtbmV4dChzbSwgJGJyZWFrcG9pbnQtbmFtZXM6ICh4cyBzbSBtZCBsZyB4bCkpXG4vLyAgICBtZFxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtbmV4dCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludC1uYW1lczogbWFwLWtleXMoJGJyZWFrcG9pbnRzKSkge1xuICAkbjogaW5kZXgoJGJyZWFrcG9pbnQtbmFtZXMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbiA8IGxlbmd0aCgkYnJlYWtwb2ludC1uYW1lcyksIG50aCgkYnJlYWtwb2ludC1uYW1lcywgJG4gKyAxKSwgbnVsbCk7XG59XG5cbi8vIE1heGltdW0gYnJlYWtwb2ludCB3aWR0aC4gTnVsbCBmb3IgdGhlIHNtYWxsZXN0IChmaXJzdCkgYnJlYWtwb2ludC5cbi8vIFRoZSBtYXhpbXVtIHZhbHVlIGlzIHJlZHVjZWQgYnkgMC4wMnB4IHRvIHdvcmsgYXJvdW5kIHRoZSBsaW1pdGF0aW9ucyBvZlxuLy8gYG1pbi1gIGFuZCBgbWF4LWAgcHJlZml4ZXMgYW5kIHZpZXdwb3J0cyB3aXRoIGZyYWN0aW9uYWwgd2lkdGhzLlxuLy9cbi8vIFNlZSBodHRwczovL3d3dy53My5vcmcvVFIvbWVkaWFxdWVyaWVzLTQvI21xLW1pbi1tYXhcbi8vIFVzZXMgMC4wMnB4IHJhdGhlciB0aGFuIDAuMDFweCB0byB3b3JrIGFyb3VuZCBhIGN1cnJlbnQgcm91bmRpbmcgYnVnIGluIFNhZmFyaS5cdC8vIFVzZXMgMC4wMnB4IHJhdGhlciB0aGFuIDAuMDFweCB0byB3b3JrIGFyb3VuZCBhIGN1cnJlbnQgcm91bmRpbmcgYnVnIGluIFNhZmFyaS5cbi8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTc4MjYxXHQvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE3ODI2MVxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbWF4KG1kLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgNzY3Ljk4cHhcbkBmdW5jdGlvbiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzKSB7XG4gICRtYXg6IG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAkbmFtZSk7XG4gIEByZXR1cm4gaWYoJG1heCBhbmQgJG1heCA+IDAsICRtYXggLSAuMDIsIG51bGwpO1xufVxuXG4vLyBNZWRpYSBvZiBhdCBtb3N0IHRoZSBtYXhpbXVtIGJyZWFrcG9pbnQgd2lkdGguIE5vIHF1ZXJ5IGZvciB0aGUgbGFyZ2VzdCBicmVha3BvaW50LlxuLy8gTWFrZXMgdGhlIEBjb250ZW50IGFwcGx5IHRvIHRoZSBnaXZlbiBicmVha3BvaW50IGFuZCBuYXJyb3dlci5cbkBtaXhpbiBtZWRpYS1icmVha3BvaW50LWRvd24oJG5hbWUsICRicmVha3BvaW50czogJHNjcmVlbi1icmVha3BvaW50cykge1xuICAkbWF4OiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzKTtcbiAgQGlmICRtYXgge1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbWF4KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cblxuLy8gVGV4dCBEaXJlY3Rpb24gLSBsdHIgLyBydGxcbi8vXG4vLyBDU1MgZGVmYXVsdHMgdG8gdXNlIHRoZSBsdHIgY3NzLCBhbmQgYWRkcyBbZGlyPXJ0bF0gc2VsZWN0b3JzXG4vLyB0byBvdmVycmlkZSBsdHIgZGVmYXVsdHMuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBtaXhpbiBtdWx0aS1kaXIoKSB7XG4gIEBjb250ZW50O1xuXG4gIC8vICRyb290OiAjeyZ9O1xuICAvLyBAYXQtcm9vdCBbZGlyXSB7XG4gIC8vICAgI3skcm9vdH0ge1xuICAvLyAgICAgQGNvbnRlbnQ7XG4gIC8vICAgfVxuICAvLyB9XG59XG5cbkBtaXhpbiBydGwoKSB7XG4gICRyb290OiAjeyZ9O1xuXG4gICRyb290U3BsaXQ6IHN0ci1zcGxpdCgkcm9vdCwgXCIsXCIpO1xuICAkc2VsZWN0b3JzOiAje2FkZC1yb290LXNlbGVjdG9yKCRyb290LCBcIltkaXI9cnRsXVwiKX07XG4gICRzZWxlY3RvcnNTcGxpdDogc3RyLXNwbGl0KCRzZWxlY3RvcnMsIFwiLFwiKTtcblxuICAkaG9zdENvbnRleHRTZWxlY3RvcnM6ICgpO1xuICAkcmVzdFNlbGVjdG9yczogKCk7XG4gICRkaXJTZWxlY3RvcnM6ICgpO1xuXG4gIC8vIFNlbGVjdG9ycyBtdXN0IGJlIHNwbGl0IGludG8gaW5kaXZpZHVhbCBzZWxlY3RvcnMgaW4gY2FzZSB0aGUgYnJvd3NlclxuICAvLyBkb2Vzbid0IHN1cHBvcnQgYSBzcGVjaWZpYyBzZWxlY3Rvci5cbiAgLy8gRm9yIGV4YW1wbGUsIEZpcmVmb3ggYW5kIFNhZmFyaSBkb2Vzbid0IHN1cHBvcnQgYDpob3N0LWNvbnRleHQoKWAuXG4gIC8vIElmIGFuIGludmFsaWQgc2VsZWN0b3IgaXMgdXNlZCwgdGhlbiB0aGUgZW50aXJlIGdyb3VwIG9mIHNlbGVjdG9yc1xuICAvLyB3aWxsIGJlIGlnbm9yZWQuXG4gIC8vIEBsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMtMy8jZ3JvdXBpbmdcbiAgQGVhY2ggJHNlbGVjdG9yIGluICRzZWxlY3RvcnNTcGxpdCB7XG4gICAgLy8gR3JvdXAgdGhlIHNlbGVjdG9ycyBiYWNrIGludG8gYSBzaW5nbGUgc2VsZWN0b3IgdG8gb3B0aW1pemUgdGhlIG91dHB1dC5cbiAgICBAaWYgc3RyLWluZGV4KCRzZWxlY3RvciwgXCI6aG9zdC1jb250ZXh0XCIpIHtcbiAgICAgICRob3N0Q29udGV4dFNlbGVjdG9yczogYXBwZW5kKCRob3N0Q29udGV4dFNlbGVjdG9ycywgJHNlbGVjdG9yLCBjb21tYSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAvLyBHcm91cCB0aGUgc2VsZWN0b3JzIGJhY2sgaW50byBhIHNpbmdsZSBzZWxlY3RvciB0byBvcHRpbWl6ZSB0aGUgb3V0cHV0LlxuICAgICAgJHJlc3RTZWxlY3RvcnM6IGFwcGVuZCgkcmVzdFNlbGVjdG9ycywgJHNlbGVjdG9yLCBjb21tYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3VwcG9ydGVkIGJ5IENocm9tZS5cbiAgQGlmIGxlbmd0aCgkaG9zdENvbnRleHRTZWxlY3RvcnMpID4gMCB7XG4gICAgQGF0LXJvb3QgI3skaG9zdENvbnRleHRTZWxlY3RvcnN9IHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuXG4gIC8vIFN1cHBvcnRlZCBieSBhbGwgYnJvd3NlcnMuXG4gIEBpZiBsZW5ndGgoJHJlc3RTZWxlY3RvcnMpID4gMCB7XG4gICAgQGF0LXJvb3QgI3skcmVzdFNlbGVjdG9yc30ge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgYnJvd3NlciBjYW4gc3VwcG9ydCBgOmRpcigpYCwgdGhlbiBhZGQgdGhlIGA6ZGlyKClgIHNlbGVjdG9ycy5cbiAgLy8gQHN1cHBvcnRzIHNlbGVjdG9yKDpkaXIocnRsKSkgeyAvLyBAIElNUE9UQU5UIE5PVEU6IFRoaXMgaGFzIGJlZW4gcmVtb3ZlZCBiZWNhdXNlIHNlbGVjdG9yIGZ1bmN0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gY3VycmVudCBTQ1NTXG4gIC8vIEFkZGluZyA6ZGlyKCkgaW4gY2FzZSB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgYDpob3N0LWNvbnRleHQoKWAgYW5kIGRvZXMgc3VwcG9ydCBgOmRpcigpYC5cbiAgLy8gYDpob3N0LWNvbnRleHQoKWAgaXMgYWRkZWQ6XG4gIC8vIC0gdGhyb3VnaCB0aGUgYGFkZC1yb290LXNlbGVjdG9yKClgIGZ1bmN0aW9uLlxuICAvLyAtIGZpcnN0IHNvIHRoYXQgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGA6ZGlyKClgLlxuICAvLyBGb3IgZXhhbXBsZSxcbiAgLy8gLSBGaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBgOmhvc3QtY29udGV4dCgpYCwgYnV0IGRvZXMgc3VwcG9ydCBgOmRpcigpYC5cbiAgLy8gLSBTYWZhcmkgZG9lc24ndCBzdXBwb3J0IGA6aG9zdC1jb250ZXh0KClgLCBidXQgU2FmYXJpIDE2LjQrIHN1cHBvcnRzIGA6ZGlyKClgXG4gIC8vIEBsaW5rIGh0dHBzOi8vd2Via2l0Lm9yZy9ibG9nLzEzOTY2L3dlYmtpdC1mZWF0dXJlcy1pbi1zYWZhcmktMTYtNC9cbiAgQGVhY2ggJHNlbGVjdG9yIGluICRyb290U3BsaXQge1xuICAgICRkaXJTZWxlY3RvcjogXCIjeyRzZWxlY3Rvcn06ZGlyKHJ0bClcIjtcbiAgICAvLyBHcm91cCB0aGUgc2VsZWN0b3JzIGJhY2sgaW50byBhIHNpbmdsZSBzZWxlY3RvciB0byBvcHRpbWl6ZSB0aGUgb3V0cHV0LlxuICAgICRkaXJTZWxlY3RvcnM6IGFwcGVuZCgkZGlyU2VsZWN0b3JzLCAkZGlyU2VsZWN0b3IsIGNvbW1hKTtcbiAgfVxuXG4gIC8vIFN1cHBvcnRlZCBieSBGaXJlZm94LlxuICBAaWYgbGVuZ3RoKCRkaXJTZWxlY3RvcnMpID4gMCB7XG4gICAgQGF0LXJvb3QgI3skZGlyU2VsZWN0b3JzfSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbiAgLy99XG59XG5cbkBtaXhpbiBsdHIoKSB7XG4gIEBjb250ZW50O1xufVxuXG5cbi8vIFNWRyBCYWNrZ3JvdW5kIEltYWdlIE1peGluXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN2Z1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIHN2Zy1iYWNrZ3JvdW5kLWltYWdlKCRzdmcsICRmbGlwLXJ0bDogZmFsc2UpIHtcbiAgJHVybDogdXJsLWVuY29kZSgkc3ZnKTtcbiAgJHZpZXdCb3g6IHN0ci1zcGxpdChzdHItZXh0cmFjdCgkc3ZnLCBcInZpZXdCb3g9J1wiLCBcIidcIiksIFwiIFwiKTtcblxuICBAaWYgJGZsaXAtcnRsICE9IHRydWUgb3IgJHZpZXdCb3ggPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbXVsdGktZGlyKCkge1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsI3skdXJsfVwiKTtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgICR0cmFuc2Zvcm06IFwidHJhbnNmb3JtPSd0cmFuc2xhdGUoI3tudGgoJHZpZXdCb3gsIDMpfSwgMCkgc2NhbGUoLTEsIDEpJ1wiO1xuICAgICRmbGlwcGVkLXVybDogJHN2ZztcbiAgICAkZmxpcHBlZC11cmw6IHN0ci1yZXBsYWNlKCRmbGlwcGVkLXVybCwgXCI8cGF0aFwiLCBcIjxwYXRoICN7JHRyYW5zZm9ybX1cIik7XG4gICAgJGZsaXBwZWQtdXJsOiBzdHItcmVwbGFjZSgkZmxpcHBlZC11cmwsIFwiPGxpbmVcIiwgXCI8bGluZSAjeyR0cmFuc2Zvcm19XCIpO1xuICAgICRmbGlwcGVkLXVybDogc3RyLXJlcGxhY2UoJGZsaXBwZWQtdXJsLCBcIjxwb2x5Z29uXCIsIFwiPHBvbHlnb24gI3skdHJhbnNmb3JtfVwiKTtcbiAgICAkZmxpcHBlZC11cmw6IHVybC1lbmNvZGUoJGZsaXBwZWQtdXJsKTtcblxuICAgIEBpbmNsdWRlIGx0ciAoKSB7XG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwjeyR1cmx9XCIpO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwjeyRmbGlwcGVkLXVybH1cIik7XG4gICAgfVxuICB9XG59XG5cbi8vIEFkZCBwcm9wZXJ0eSBob3Jpem9udGFsXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyBAcGFyYW0ge3N0cmluZ30gJGVuZFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIHByb3BlcnR5LWhvcml6b250YWwoJHByb3AsICRzdGFydCwgJGVuZDogJHN0YXJ0KSB7XG4gIEBpZiAkc3RhcnQgPT0gMCBhbmQgJGVuZCA9PSAwIHtcbiAgICAjeyRwcm9wfS1sZWZ0OiAkc3RhcnQ7XG4gICAgI3skcHJvcH0tcmlnaHQ6ICRlbmQ7XG5cbiAgfSBAZWxzZSB7XG4gICAgLXdlYmtpdC0jeyRwcm9wfS1zdGFydDogJHN0YXJ0O1xuICAgICN7JHByb3B9LWlubGluZS1zdGFydDogJHN0YXJ0O1xuICAgIC13ZWJraXQtI3skcHJvcH0tZW5kOiAkZW5kO1xuICAgICN7JHByb3B9LWlubGluZS1lbmQ6ICRlbmQ7XG4gIH1cbn1cblxuLy8gQWRkIHByb3BlcnR5IGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICRwcm9wXG4vLyBAcGFyYW0ge3N0cmluZ30gJHRvcFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkYm90dG9tXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyBAcGFyYW0ge2Jvb2xlYW59ICRjb250ZW50IGluY2x1ZGUgY29udGVudCBvciB1c2UgZGVmYXVsdFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIHByb3BlcnR5KCRwcm9wLCAkdG9wLCAkZW5kOiAkdG9wLCAkYm90dG9tOiAkdG9wLCAkc3RhcnQ6ICRlbmQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHktaG9yaXpvbnRhbCgkcHJvcCwgJHN0YXJ0LCAkZW5kKTtcbiAgI3skcHJvcH0tdG9wOiAkdG9wO1xuICAjeyRwcm9wfS1ib3R0b206ICRib3R0b207XG59XG5cbi8vIEFkZCBwYWRkaW5nIGhvcml6b250YWxcbi8vIEBwYXJhbSB7c3RyaW5nfSAkc3RhcnRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gcGFkZGluZy1ob3Jpem9udGFsKCRzdGFydCwgJGVuZDogJHN0YXJ0KSB7XG4gIEBpbmNsdWRlIHByb3BlcnR5LWhvcml6b250YWwocGFkZGluZywgJHN0YXJ0LCAkZW5kKTtcbn1cblxuLy8gQWRkIHBhZGRpbmcgZm9yIGFsbCBkaXJlY3Rpb25zXG4vLyBAcGFyYW0ge3N0cmluZ30gJHRvcFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkYm90dG9tXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gcGFkZGluZygkdG9wLCAkZW5kOiAkdG9wLCAkYm90dG9tOiAkdG9wLCAkc3RhcnQ6ICRlbmQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHkocGFkZGluZywgJHRvcCwgJGVuZCwgJGJvdHRvbSwgJHN0YXJ0KTtcbn1cblxuLy8gQWRkIG1hcmdpbiBob3Jpem9udGFsXG4vLyBAcGFyYW0ge3N0cmluZ30gJHN0YXJ0XG4vLyBAcGFyYW0ge3N0cmluZ30gJGVuZFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIG1hcmdpbi1ob3Jpem9udGFsKCRzdGFydCwgJGVuZDogJHN0YXJ0KSB7XG4gIEBpbmNsdWRlIHByb3BlcnR5LWhvcml6b250YWwobWFyZ2luLCAkc3RhcnQsICRlbmQpO1xufVxuXG4vLyBBZGQgbWFyZ2luIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICR0b3Bcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyBAcGFyYW0ge3N0cmluZ30gJGJvdHRvbVxuLy8gQHBhcmFtIHtzdHJpbmd9ICRzdGFydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIG1hcmdpbigkdG9wLCAkZW5kOiAkdG9wLCAkYm90dG9tOiAkdG9wLCAkc3RhcnQ6ICRlbmQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHkobWFyZ2luLCAkdG9wLCAkZW5kLCAkYm90dG9tLCAkc3RhcnQpO1xufVxuXG4vLyBBZGQgcG9zaXRpb24gaG9yaXpvbnRhbFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRzdGFydCAtIGFtb3VudCB0byBwb3NpdGlvbiBzdGFydFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRlbmQgLSBhbW91bnQgdG8gbGVmdDogMDsgZW5kXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gcG9zaXRpb24taG9yaXpvbnRhbCgkc3RhcnQ6IG51bGwsICRlbmQ6IG51bGwpIHtcbiAgQGlmICRzdGFydCA9PSAkZW5kIHtcbiAgICBAaW5jbHVkZSBtdWx0aS1kaXIoKSB7XG4gICAgICBsZWZ0OiAkc3RhcnQ7XG4gICAgICByaWdodDogJGVuZDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBhdC1yb290IHtcbiAgICAgIEBzdXBwb3J0cyAoaW5zZXQtaW5saW5lLXN0YXJ0OiAwKSB7XG4gICAgICAgICYge1xuICAgICAgICAgIGluc2V0LWlubGluZS1zdGFydDogJHN0YXJ0O1xuICAgICAgICAgIGluc2V0LWlubGluZS1lbmQ6ICRlbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPIEZXLTM3NjZcbiAgICBAYXQtcm9vdCB7XG4gICAgICBAc3VwcG9ydHMgbm90IChpbnNldC1pbmxpbmUtc3RhcnQ6IDApIHtcbiAgICAgICAgJiB7XG4gICAgICAgICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgICAgICAgbGVmdDogJHN0YXJ0O1xuICAgICAgICAgICAgcmlnaHQ6ICRlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIEBpbmNsdWRlIHJ0bCgpIHtcbiAgICAgICAgICAgIGxlZnQ6IHVuc2V0O1xuICAgICAgICAgICAgcmlnaHQ6IHVuc2V0O1xuXG4gICAgICAgICAgICBsZWZ0OiAkZW5kO1xuICAgICAgICAgICAgcmlnaHQ6ICRzdGFydDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQWRkIHBvc2l0aW9uIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICR0b3Bcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyBAcGFyYW0ge3N0cmluZ30gJGJvdHRvbVxuLy8gQHBhcmFtIHtzdHJpbmd9ICRzdGFydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIHBvc2l0aW9uKCR0b3A6IG51bGwsICRlbmQ6IG51bGwsICRib3R0b206IG51bGwsICRzdGFydDogbnVsbCkge1xuICBAaW5jbHVkZSBwb3NpdGlvbi1ob3Jpem9udGFsKCRzdGFydCwgJGVuZCk7XG4gIHRvcDogJHRvcDtcbiAgYm90dG9tOiAkYm90dG9tO1xufVxuXG4vLyBBZGQgYm9yZGVyIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICR0b3Bcbi8vIEBwYXJhbSB7c3RyaW5nfSAkZW5kXG4vLyBAcGFyYW0ge3N0cmluZ30gJGJvdHRvbVxuLy8gQHBhcmFtIHtzdHJpbmd9ICRzdGFydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIGJvcmRlcigkdG9wLCAkZW5kOiAkdG9wLCAkYm90dG9tOiAkdG9wLCAkc3RhcnQ6ICRlbmQpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHkoYm9yZGVyLCAkdG9wLCAkZW5kLCAkYm90dG9tLCAkc3RhcnQpO1xufVxuXG4vLyBBZGQgYm9yZGVyIHJhZGl1cyBmb3IgYWxsIGRpcmVjdGlvbnNcbi8vIEBwYXJhbSB7c3RyaW5nfSAkdG9wLXN0YXJ0XG4vLyBAcGFyYW0ge3N0cmluZ30gJHRvcC1lbmRcbi8vIEBwYXJhbSB7c3RyaW5nfSAkYm90dG9tLWVuZFxuLy8gQHBhcmFtIHtzdHJpbmd9ICRib3R0b20tc3RhcnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBtaXhpbiBib3JkZXItcmFkaXVzKCR0b3Atc3RhcnQsICR0b3AtZW5kOiAkdG9wLXN0YXJ0LCAkYm90dG9tLWVuZDogJHRvcC1zdGFydCwgJGJvdHRvbS1zdGFydDogJHRvcC1lbmQpIHtcbiAgQGlmICR0b3Atc3RhcnQgPT0gJHRvcC1lbmQgYW5kICR0b3Atc3RhcnQgPT0gJGJvdHRvbS1lbmQgYW5kICR0b3Atc3RhcnQgPT0gJGJvdHRvbS1zdGFydCB7XG4gICAgQGluY2x1ZGUgbXVsdGktZGlyKCkge1xuICAgICAgYm9yZGVyLXJhZGl1czogJHRvcC1zdGFydDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIGx0cigpIHtcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR0b3Atc3RhcnQ7XG4gICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJHRvcC1lbmQ7XG4gICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogJGJvdHRvbS1lbmQ7XG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAkYm90dG9tLXN0YXJ0O1xuICAgIH1cblxuICAgIEBpbmNsdWRlIHJ0bCgpIHtcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR0b3AtZW5kO1xuICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICR0b3Atc3RhcnQ7XG4gICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogJGJvdHRvbS1zdGFydDtcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRib3R0b20tZW5kO1xuICAgIH1cbiAgfVxufVxuXG4vLyBBZGQgZGlyZWN0aW9uIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICRkaXIgLSBEaXJlY3Rpb24gb24gTFRSXG5AbWl4aW4gZGlyZWN0aW9uKCRkaXIpIHtcbiAgJG90aGVyLWRpcjogbnVsbDtcblxuICBAaWYgJGRpciA9PSBsdHIge1xuICAgICRvdGhlci1kaXI6IHJ0bDtcbiAgfSBAZWxzZSB7XG4gICAgJG90aGVyLWRpcjogbHRyO1xuICB9XG5cbiAgQGluY2x1ZGUgbHRyKCkge1xuICAgIGRpcmVjdGlvbjogJGRpcjtcbiAgfVxuICBAaW5jbHVkZSBydGwoKSB7XG4gICAgZGlyZWN0aW9uOiAkb3RoZXItZGlyO1xuICB9XG59XG5cbi8vIEFkZCBmbG9hdCBmb3IgYWxsIGRpcmVjdGlvbnNcbi8vIEBwYXJhbSB7c3RyaW5nfSAkc2lkZVxuLy8gQHBhcmFtIHtzdHJpbmd9ICRkZWNvcmF0b3IgLSAhaW1wb3J0YW50XG5AbWl4aW4gZmxvYXQoJHNpZGUsICRkZWNvcmF0b3I6IG51bGwpIHtcbiAgQGlmICRzaWRlID09IHN0YXJ0IHtcbiAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICBmbG9hdDogbGVmdCAkZGVjb3JhdG9yO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICBmbG9hdDogcmlnaHQgJGRlY29yYXRvcjtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJHNpZGUgPT0gZW5kIHtcbiAgICBAaW5jbHVkZSBsdHIoKSB7XG4gICAgICBmbG9hdDogcmlnaHQgJGRlY29yYXRvcjtcbiAgICB9XG4gICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgZmxvYXQ6IGxlZnQgJGRlY29yYXRvcjtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIG11bHRpLWRpcigpIHtcbiAgICAgIGZsb2F0OiAkc2lkZSAkZGVjb3JhdG9yO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gYmFja2dyb3VuZC1wb3NpdGlvbigkaG9yaXpvbnRhbCwgJGhvcml6b250YWwtYW1vdW50OiBudWxsLCAkdmVydGljYWw6IG51bGwsICR2ZXJ0aWNhbC1hbW91bnQ6IG51bGwpIHtcbiAgQGlmICRob3Jpem9udGFsID09IHN0YXJ0IG9yICRob3Jpem9udGFsID09IGVuZCB7XG4gICAgJGhvcml6b250YWwtbHRyOiBudWxsO1xuICAgICRob3Jpem9udGFsLXJ0bDogbnVsbDtcbiAgICBAaWYgJGhvcml6b250YWwgPT0gc3RhcnQge1xuICAgICAgJGhvcml6b250YWwtbHRyOiBsZWZ0O1xuICAgICAgJGhvcml6b250YWwtcnRsOiByaWdodDtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRob3Jpem9udGFsLWx0cjogcmlnaHQ7XG4gICAgICAkaG9yaXpvbnRhbC1ydGw6IGxlZnQ7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogJGhvcml6b250YWwtbHRyICRob3Jpem9udGFsLWFtb3VudCAkdmVydGljYWwgJHZlcnRpY2FsLWFtb3VudDtcbiAgICB9XG4gICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogJGhvcml6b250YWwtcnRsICRob3Jpem9udGFsLWFtb3VudCAkdmVydGljYWwgJHZlcnRpY2FsLWFtb3VudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIG11bHRpLWRpcigpIHtcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246ICRob3Jpem9udGFsICRob3Jpem9udGFsLWFtb3VudCAkdmVydGljYWwgJHZlcnRpY2FsLWFtb3VudDtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHRyYW5zZm9ybS1vcmlnaW4oJHgtYXhpcywgJHktYXhpczogbnVsbCkge1xuICBAaWYgJHgtYXhpcyA9PSBzdGFydCB7XG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCAkeS1heGlzO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCAkeS1heGlzO1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkeC1heGlzID09IGVuZCB7XG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgJHktYXhpcztcbiAgICB9XG4gICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCAkeS1heGlzO1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkeC1heGlzID09IGxlZnQgb3IgJHgtYXhpcyA9PSByaWdodCB7XG4gICAgQGluY2x1ZGUgbXVsdGktZGlyKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogJHgtYXhpcyAkeS1heGlzO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogJHgtYXhpcyAkeS1heGlzO1xuICAgIH1cbiAgICBAaW5jbHVkZSBydGwoKSB7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjYWxjKDEwMCUgLSAjeyR4LWF4aXN9KSAkeS1heGlzO1xuICAgIH1cbiAgfVxufVxuXG4vLyBBZGQgdHJhbnNmb3JtIGZvciBhbGwgZGlyZWN0aW9uc1xuLy8gQHBhcmFtIHtzdHJpbmd9ICR0cmFuc2Zvcm1zIC0gY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgdHJhbnNmb3Jtc1xuQG1peGluIHRyYW5zZm9ybSgkdHJhbnNmb3Jtcy4uLikge1xuICAkZXh0cmE6IG51bGw7XG5cbiAgJHg6IG51bGw7XG4gICRsdHItdHJhbnNsYXRlOiBudWxsO1xuICAkcnRsLXRyYW5zbGF0ZTogbnVsbDtcblxuICBAZWFjaCAkdHJhbnNmb3JtIGluICR0cmFuc2Zvcm1zIHtcbiAgICBAaWYgKHN0ci1pbmRleCgkdHJhbnNmb3JtLCB0cmFuc2xhdGUzZCkpIHtcbiAgICAgICR0cmFuc2Zvcm06IHN0ci1yZXBsYWNlKCR0cmFuc2Zvcm0sICd0cmFuc2xhdGUzZCgnKTtcbiAgICAgICR0cmFuc2Zvcm06IHN0ci1yZXBsYWNlKCR0cmFuc2Zvcm0sICcpJyk7XG5cbiAgICAgICRjb29yZGluYXRlczogc3RyLXNwbGl0KCR0cmFuc2Zvcm0sICcsJyk7XG5cbiAgICAgICR4OiBudGgoJGNvb3JkaW5hdGVzLCAxKTtcbiAgICAgICR5OiBudGgoJGNvb3JkaW5hdGVzLCAyKTtcbiAgICAgICR6OiBudGgoJGNvb3JkaW5hdGVzLCAzKTtcblxuICAgICAgJGx0ci10cmFuc2xhdGU6IHRyYW5zbGF0ZTNkKCR4LCAkeSwgJHopO1xuICAgICAgJHJ0bC10cmFuc2xhdGU6IHRyYW5zbGF0ZTNkKGNhbGMoLTEgKiAjeyR4fSksICR5LCAkeik7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAaWYgJGV4dHJhID09IG51bGwge1xuICAgICAgICAkZXh0cmE6ICR0cmFuc2Zvcm07XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgJGV4dHJhOiAkZXh0cmEgJHRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAaWYgJHggPT0gJzAnIG9yICR4ID09IG51bGwge1xuICAgIEBpbmNsdWRlIG11bHRpLWRpcigpIHtcbiAgICAgIHRyYW5zZm9ybTogJGx0ci10cmFuc2xhdGUgJGV4dHJhO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgbHRyKCkge1xuICAgICAgdHJhbnNmb3JtOiAkbHRyLXRyYW5zbGF0ZSAkZXh0cmE7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgcnRsKCkge1xuICAgICAgdHJhbnNmb3JtOiAkcnRsLXRyYW5zbGF0ZSAkZXh0cmE7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIEltcG9ydGVkIGlvbmljIG1peGlucyBmb3IgU0NTUyBmcm9tIGRpZmZlcmVudCBjb21wb25lbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFeHRyYWN0ZWQgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL2NvbXBvbmVudHMvZ3JpZC9ncmlkLm1peGlucy5zY3NzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvY29yZS9zcmMvY29tcG9uZW50cy9pdGVtL2l0ZW0ubWl4aW5zLnNjc3NcbiAqL1xuXG4vLyBSZXNwb25zaXZlIE1peGluc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4vLyBDcmVhdGVzIGEgZml4ZWQgd2lkdGggZm9yIHRoZSBncmlkIGJhc2VkIG9uIHRoZSBzY3JlZW4gc2l6ZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBtaXhpbiBtYWtlLWdyaWQtd2lkdGhzKCR3aWR0aHM6ICRncmlkLXdpZHRocywgJGJyZWFrcG9pbnRzOiAkc2NyZWVuLWJyZWFrcG9pbnRzKSB7XG4gIEBlYWNoICRicmVha3BvaW50LCAkd2lkdGggaW4gJHdpZHRocyB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC11cCgkYnJlYWtwb2ludCwgJGJyZWFrcG9pbnRzKSB7XG4gICAgICB3aWR0aDogJHdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuXG4vLyBBZGRzIHBhZGRpbmcgdG8gdGhlIGVsZW1lbnQgYmFzZWQgb24gYnJlYWtwb2ludHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AbWl4aW4gbWFrZS1icmVha3BvaW50LXBhZGRpbmcoJHBhZGRpbmdzKSB7XG4gIEBlYWNoICRicmVha3BvaW50IGluIG1hcC1rZXlzKCRwYWRkaW5ncykge1xuICAgIEBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtdXAoJGJyZWFrcG9pbnQpIHtcbiAgICAgICRwYWRkaW5nOiBtYXAtZ2V0KCRwYWRkaW5ncywgJGJyZWFrcG9pbnQpO1xuXG4gICAgICBAaW5jbHVkZSBwYWRkaW5nKCRwYWRkaW5nKTtcbiAgICB9XG4gIH1cbn1cblxuXG4vLyBJdGVtIE1peGluc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQG1peGluIGl0ZW0tcHVzaC1zdmctdXJsKCRmaWxsKSB7XG4gICRpdGVtLWRldGFpbC1wdXNoLXN2ZzogXCI8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDEyIDIwJz48cGF0aCBkPSdNMiwyMGwtMi0ybDgtOEwwLDJsMi0ybDEwLDEwTDIsMjB6JyBmaWxsPScjeyRmaWxsfScvPjwvc3ZnPlwiO1xuXG4gIEBpbmNsdWRlIHN2Zy1iYWNrZ3JvdW5kLWltYWdlKCRpdGVtLWRldGFpbC1wdXNoLXN2ZywgdHJ1ZSk7XG59XG4iLCJAdXNlIFwic2FzczptYXRoXCIgYXMgbWF0aDtcblxuLyoqXG4gKiBBcHAgY3VzdG9tIG1peGlucyBmb3IgU0NTU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUGxhY2UgaGVyZSBvdXIgY3VzdG9tIG1peGlucy5cbiAqL1xuXG4vLyBNaXhlcyBhIGNvbG9yIHdpdGggYmxhY2sgdG8gY3JlYXRlIGl0cyBzaGFkZS5cbi8vIERlZmF1bHQgdG8gYm9vdHN0cmFwIGxldmVsIDYuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIGdldC1jb2xvci1zaGFkZS1wZXJjZW50KCRjb2xvciwgJHBlcmNlbnQ6IDQ4JSkge1xuICAgIEByZXR1cm4gbWl4KCMwMDAsICRjb2xvciwgJHBlcmNlbnQpO1xufVxuXG4vLyBNaXhlcyBhIGNvbG9yIHdpdGggd2hpdGUgdG8gY3JlYXRlIGl0cyB0aW50LlxuLy8gRGVmYXVsdCB0byBib290c3RyYXAgbGV2ZWwgLTEwLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBnZXQtY29sb3ItdGludC1wZXJjZW50KCRjb2xvciwgJHBlcmNlbnQ6IDgwJSkge1xuICAgIEByZXR1cm4gbWl4KCNmZmYsICRjb2xvciwgJHBlcmNlbnQpO1xufVxuXG4vLyBJb25pYyBDb2xvcnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBHZW5lcmF0ZXMgdGhlIGNvbG9yIGNsYXNzZXMgYW5kIHZhcmlhYmxlcyBiYXNlZCBvbiB0aGVcbi8vIGNvbG9ycyBtYXBcblxuQG1peGluIGdlbmVyYXRlLWNvbG9yKCRjb2xvci1uYW1lLCAkY29sb3JzLCAkdGhlbWUpIHtcbiAgICAkY29sb3ItdGhlbWVzOiBtYXAtZ2V0KCRjb2xvcnMsICRjb2xvci1uYW1lKTtcbiAgICAkYmFzZTogbWFwLWdldCgkY29sb3ItdGhlbWVzLCAkdGhlbWUpO1xuXG4gICAgQGlmICR0aGVtZSA9PSAnZGFyaycge1xuICAgICAgICAkYmFzZTogbWl4KG1hcC1nZXQoJGNvbG9yLXRoZW1lcywgJ2xpZ2h0JyksIHdoaXRlLCA4MCUpICFkZWZhdWx0O1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGdlbmVyYXRlLWNvbG9yLXZhcmlhbnRzKCRjb2xvci1uYW1lLCAkYmFzZSk7XG59XG5cbkBtaXhpbiBnZW5lcmF0ZS1jb2xvci12YXJpYW50cygkY29sb3ItbmFtZSwgJGJhc2UpIHtcbiAgICAkY29udHJhc3Q6IGdldF9jb250cmFzdF9jb2xvcigkYmFzZSk7XG4gICAgJHNoYWRlOiBnZXQtY29sb3Itc2hhZGUtcGVyY2VudCgkYmFzZSk7XG4gICAgJHRpbnQ6IGdldC1jb2xvci10aW50LXBlcmNlbnQoJGJhc2UpO1xuXG4gICAgLS0jeyRjb2xvci1uYW1lfTogI3skYmFzZX07XG4gICAgLS0jeyRjb2xvci1uYW1lfS1zaGFkZTogI3skc2hhZGV9O1xuICAgIC0tI3skY29sb3ItbmFtZX0tdGludDogI3skdGludH07XG4gICAgLS0jeyRjb2xvci1uYW1lfS1jb250cmFzdDogI3skY29udHJhc3R9O1xuXG4gICAgLy8gSW50ZXJuYWwgaW9uaWMgdXNlIG9ubHkuXG4gICAgLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX06IHZhcigtLSN7JGNvbG9yLW5hbWV9KTtcbiAgICAtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS1iYXNlOiB2YXIoLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0pO1xuICAgIC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LXJnYjogI3tjb2xvci10by1yZ2ItbGlzdCgkYmFzZSl9O1xuICAgIC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LWNvbnRyYXN0OiAjeyRjb250cmFzdH07XG4gICAgLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tY29udHJhc3QtcmdiOiAje2NvbG9yLXRvLXJnYi1saXN0KCRjb250cmFzdCl9O1xuICAgIC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LXNoYWRlOiAjeyRzaGFkZX07XG4gICAgLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tdGludDogI3skdGludH07XG5cbiAgICAuaW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9IHtcbiAgICAgICAgLS1pb24tY29sb3I6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfSk7XG4gICAgICAgIC0taW9uLWNvbG9yLWJhc2U6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS1iYXNlKTtcbiAgICAgICAgLS1pb24tY29sb3ItcmdiOiB2YXIoLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tcmdiKTtcbiAgICAgICAgLS1pb24tY29sb3ItY29udHJhc3Q6IHZhcigtLWlvbi1jb2xvci0jeyRjb2xvci1uYW1lfS1jb250cmFzdCk7XG4gICAgICAgIC0taW9uLWNvbG9yLWNvbnRyYXN0LXJnYjogdmFyKC0taW9uLWNvbG9yLSN7JGNvbG9yLW5hbWV9LWNvbnRyYXN0LXJnYik7XG4gICAgICAgIC0taW9uLWNvbG9yLXNoYWRlOiB2YXIoLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tc2hhZGUpO1xuICAgICAgICAtLWlvbi1jb2xvci10aW50OiB2YXIoLS1pb24tY29sb3ItI3skY29sb3ItbmFtZX0tdGludCk7XG4gICAgfVxufVxuXG5AbWl4aW4gY29yZS1mb2N1cygpIHtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAmOjphZnRlciB7XG4gICAgICAgIEBpbmNsdWRlIHBvc2l0aW9uKDAsIDAsIDAsIDApO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIEBpbmNsdWRlIGNvcmUtZm9jdXMtc3R5bGUoKTtcbiAgICB9XG59XG5cbkBtaXhpbiBjb3JlLWZvY3VzLXN0eWxlKCkge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCB2YXIoLS1hMTF5LWZvY3VzLXdpZHRoKSAxcHggdmFyKC0tYTExeS1mb2N1cy1jb2xvcik7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7XG4gICAgLy8gVGhpY2tlciBvcHRpb246XG4gICAgLy8gYm9yZGVyOiB2YXIoLS1hMTF5LWZvY3VzLXdpZHRoKSBzb2xpZCB2YXIoLS1hMTF5LWZvY3VzLWNvbG9yKTtcbn1cblxuQG1peGluIGNvcmUtdHJhbnNpdGlvbigkcHJvcGVydGllczogYWxsLCAkZHVyYXRpb246IDUwMG1zLCAkdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dCkge1xuICAgICR0cmFuc2l0aW9uczogKCk7XG4gICAgQGVhY2ggJHByb3BlcnR5IGluICRwcm9wZXJ0aWVzIHtcbiAgICAgICR0cmFuc2l0aW9uczogYXBwZW5kKCR0cmFuc2l0aW9ucywgJHByb3BlcnR5ICRkdXJhdGlvbiAkdGltaW5nLWZ1bmN0aW9uLCBjb21tYSk7XG4gICAgfVxuXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAkdHJhbnNpdGlvbnM7XG4gICAgdHJhbnNpdGlvbjogJHRyYW5zaXRpb25zO1xufVxuXG5AbWl4aW4gc3Itb25seSgpIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDFweDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogLTFweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBib3JkZXI6IDA7XG59XG5cbi8qKlxuICogU2FtZSBhcyBpdGVtLXB1c2gtc3ZnLXVybCBidXQgYWRtaXRzIGZsaXAtcnRsXG4gKi9cbkBtaXhpbiBwdXNoLWFycm93LWNvbG9yKCRmaWxsOiA2MjYyNjIsICRmbGlwLXJ0bDogZmFsc2UpIHtcbiAgICAkaXRlbS1kZXRhaWwtcHVzaC1zdmc6IFwiPHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMiAyMCc+PHBhdGggZD0nTTIsMjBsLTItMmw4LThMMCwybDItMmwxMCwxMEwyLDIweicgZmlsbD0nI3skZmlsbH0nLz48L3N2Zz5cIjtcblxuICAgIEBpbmNsdWRlIHN2Zy1iYWNrZ3JvdW5kLWltYWdlKCRpdGVtLWRldGFpbC1wdXNoLXN2ZywgJGZsaXAtcnRsKTtcbn1cblxuQG1peGluIGJvcmRlci1zdGFydCgkcHgsICR0eXBlOiBudWxsLCAkY29sb3I6IG51bGwpIHtcbiAgICBAaW5jbHVkZSBwcm9wZXJ0eS1ob3Jpem9udGFsKGJvcmRlciwgJHB4ICR0eXBlICRjb2xvciwgbnVsbCk7XG59XG5cbkBtaXhpbiBib3JkZXItZW5kKCRweCwgJHR5cGU6IG51bGwsICRjb2xvcjogbnVsbCkge1xuICAgIEBpbmNsdWRlIHByb3BlcnR5LWhvcml6b250YWwoYm9yZGVyLCBudWxsLCAkcHggJHR5cGUgJGNvbG9yKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1ib3JkZXItc3RhcnQoJHB4LCAkdHlwZSwgJGNvbG9yKSB7XG4gICAgJHNhZmUtYXJlYS1wb3NpdGlvbjogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLWxlZnQpICsgI3skcHh9KTtcblxuICAgIEBpbmNsdWRlIGJvcmRlci1zdGFydCgkc2FmZS1hcmVhLXBvc2l0aW9uLCAkdHlwZSwgJGNvbG9yKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1ib3JkZXItZW5kKCRweCwgJHR5cGUsICRjb2xvcikge1xuICAgICRzYWZlLWFyZWEtcG9zaXRpb246IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCkgKyAjeyRweH0pO1xuXG4gICAgQGluY2x1ZGUgYm9yZGVyLWVuZCgkc2FmZS1hcmVhLXBvc2l0aW9uLCAkdHlwZSwgJGNvbG9yKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1tYXJnaW4taG9yaXpvbnRhbCgkc3RhcnQsICRlbmQ6ICRzdGFydCkge1xuICAgICRzYWZlLWFyZWEtZW5kOiBudWxsO1xuICAgICRzYWZlLWFyZWEtc3RhcnQ6IG51bGw7XG5cbiAgICBAaWYgKCRlbmQpIHtcbiAgICAgICAgJHNhZmUtYXJlYS1lbmQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCkgKyAjeyRlbmR9KTtcbiAgICB9XG4gICAgQGlmICgkc3RhcnQpIHtcbiAgICAgICAgJHNhZmUtYXJlYS1zdGFydDogY2FsYyh2YXIoLS1pb24tc2FmZS1hcmVhLWxlZnQpICsgI3skc3RhcnR9KTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBtYXJnaW4taG9yaXpvbnRhbCgkc2FmZS1hcmVhLXN0YXJ0LCAkc2FmZS1hcmVhLWVuZCk7XG59XG5cbkBtaXhpbiBzYWZlLWFyZWEtbWFyZ2luLXN0YXJ0KCRzdGFydCwgJGVuZCkge1xuICAgICRzYWZlLWFyZWEtc3RhcnQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0KSArICN7JHN0YXJ0fSk7XG5cbiAgICBAaW5jbHVkZSBtYXJnaW4taG9yaXpvbnRhbCgkc2FmZS1hcmVhLXN0YXJ0LCAkZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1tYXJnaW4tZW5kKCRzdGFydCwgJGVuZCkge1xuICAgICRzYWZlLWFyZWEtZW5kOiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtcmlnaHQpICsgI3skZW5kfSk7XG5cbiAgICBAaW5jbHVkZSBtYXJnaW4taG9yaXpvbnRhbCgkc3RhcnQsICRzYWZlLWFyZWEtZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1wYWRkaW5nLWhvcml6b250YWwoJHN0YXJ0LCAkZW5kOiAkc3RhcnQpIHtcbiAgICAkc2FmZS1hcmVhLWVuZDogbnVsbDtcbiAgICAkc2FmZS1hcmVhLXN0YXJ0OiBudWxsO1xuXG4gICAgQGlmICgkZW5kKSB7XG4gICAgICAgICRzYWZlLWFyZWEtZW5kOiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtcmlnaHQpICsgI3skZW5kfSk7XG4gICAgfVxuICAgIEBpZiAoJHN0YXJ0KSB7XG4gICAgICAgICRzYWZlLWFyZWEtc3RhcnQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0KSArICN7JHN0YXJ0fSk7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgcGFkZGluZy1ob3Jpem9udGFsKCRzYWZlLWFyZWEtc3RhcnQsICRzYWZlLWFyZWEtZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1wYWRkaW5nLXN0YXJ0KCRzdGFydCwgJGVuZCkge1xuICAgICRzYWZlLWFyZWEtc3RhcnQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0KSArICN7JHN0YXJ0fSk7XG5cbiAgICBAaW5jbHVkZSBwYWRkaW5nLWhvcml6b250YWwoJHNhZmUtYXJlYS1zdGFydCwgJGVuZCk7XG59XG5cbkBtaXhpbiBzYWZlLWFyZWEtcGFkZGluZy1lbmQoJHN0YXJ0LCAkZW5kKSB7XG4gICAgJHNhZmUtYXJlYS1lbmQ6IGNhbGModmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCkgKyAjeyRlbmR9KTtcblxuICAgIEBpbmNsdWRlIHBhZGRpbmctaG9yaXpvbnRhbCgkc3RhcnQsICRzYWZlLWFyZWEtZW5kKTtcbn1cblxuQG1peGluIHNhZmUtYXJlYS1wb3NpdGlvbigkdG9wOiBudWxsLCAkZW5kOiBudWxsLCAkYm90dG9tOiBudWxsLCAkc3RhcnQ6IG51bGwpIHtcbiAgICAkc2FmZS1hcmVhLXN0YXJ0OiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtbGVmdCkgKyAjeyRzdGFydH0pO1xuICAgICRzYWZlLWFyZWEtZW5kOiBjYWxjKHZhcigtLWlvbi1zYWZlLWFyZWEtcmlnaHQpICsgI3skZW5kfSk7XG5cbiAgICBAaW5jbHVkZSBwb3NpdGlvbigkdG9wLCAkc2FmZS1hcmVhLWVuZCwgJGJvdHRvbSwgJHNhZmUtYXJlYS1zdGFydCk7XG59XG5cbkBtaXhpbiBjb3JlLWhlYWRpbmdzKCkge1xuICAgIGgxIHtcbiAgICAgICAgZm9udC1zaXplOiAyNnB4O1xuICAgIH1cbiAgICBoMiwgLml0ZW0taGVhZGluZyB7XG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICB9XG4gICAgaDMge1xuICAgICAgICBmb250LXNpemU6IDIycHg7XG4gICAgfVxuICAgIGg0IHtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgIH1cbiAgICBoNSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICB9XG4gICAgaDYge1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxufVxuXG5AbWl4aW4gZGFya21vZGUoKSB7XG4gICAgJHJvb3Q6ICN7Jn07XG5cbiAgICBAYXQtcm9vdCAje2FkZC1yb290LXNlbGVjdG9yKCRyb290LCBcImh0bWwuZGFya1wiKX0ge1xuICAgICAgICBAY29udGVudDtcbiAgICB9XG59XG5cbkBtaXhpbiBob3Jpem9udGFsX3Njcm9sbF9pdGVtKCR3aWR0aCwgJG1pbi13aWR0aCwgJG1heC13aWR0aCkge1xuICAgIGZsZXg6IDAgMCAkd2lkdGg7XG4gICAgbWluLXdpZHRoOiAkbWluLXdpZHRoO1xuICAgIG1heC13aWR0aDogJG1heC13aWR0aDtcbiAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgaW9uLWNhcmQge1xuICAgICAgICAtLXZlcnRpY2FsLW1hcmdpbjogMTBweDtcbiAgICAgICAgLS1ob3Jpem9udGFsLW1hcmdpbjogMTBweDtcblxuICAgICAgICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0taG9yaXpvbnRhbC1tYXJnaW4pIC0gdmFyKC0taG9yaXpvbnRhbC1tYXJnaW4pKTtcbiAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSB2YXIoLS12ZXJ0aWNhbC1tYXJnaW4pIC0gdmFyKC0tdmVydGljYWwtbWFyZ2luKSk7XG4gICAgICAgIG1hcmdpbjogdmFyKC0tdmVydGljYWwtbWFyZ2luKSB2YXIoLS1ob3Jpem9udGFsLW1hcmdpbik7XG5cbiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDM2MHB4KSB7XG4gICAgICAgICAgICAtLWhvcml6b250YWwtbWFyZ2luOiA2cHg7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIENvbG9yIG1peGlucy5cbkBmdW5jdGlvbiBnZXRfYnJpZ2h0bmVzcygkY29sb3IpIHtcbiAgICBAcmV0dXJuIG1hdGguZGl2KHJlZCgkY29sb3IpICsgZ3JlZW4oJGNvbG9yKSArIGJsdWUoJGNvbG9yKSwgMyk7XG59XG5cbi8vIEdldCB0aGUgYmV0dGVyIGNvbG9yIGNvbnRyYXN0IHVzaW5nIFdDQUcgYWxnb3J5dGhtLlxuQGZ1bmN0aW9uIGdldF9jb250cmFzdF9jb2xvcigkY29sb3IpIHtcbiAgICAkbHVtaWFuY2U6IGx1bWluYW5jZSgkY29sb3IpO1xuXG4gICAgLy8gV2hpdGUgbHVtaWFuY2UgaXMgMS5cbiAgICAkd2hpdGVDb250cmFzdDogbWF0aC5kaXYoJGx1bWlhbmNlICsgMC4wNSwgMSArIDAuMDUpO1xuICAgIC8vIFdoaXRlIGx1bWlhbmNlIGlzIDAuXG4gICAgJGJsYWNrQ29udHJhc3Q6IG1hdGguZGl2KDAuMDUsICRsdW1pYW5jZSArIDAuMDUpO1xuXG4gICAgQHJldHVybiBpZigkd2hpdGVDb250cmFzdCA8ICRibGFja0NvbnRyYXN0LCB3aGl0ZSwgYmxhY2spO1xufVxuXG4vLyBDb2xvciBjb250cmFzdCB1c2luZyB5aXEgYXByb3hpbWF0aW9uIHdpdGggMTUwIHRocmVzaG9sZC5cbkBmdW5jdGlvbiBnZXRfY29udHJhc3RfY29sb3JfeWlxKCRjb2xvciwgJGRhcms6IGJsYWNrLCAkbGlnaHQ6IHdoaXRlKSB7XG4gICAgJHI6IHJlZCgkY29sb3IpO1xuICAgICRnOiBncmVlbigkY29sb3IpO1xuICAgICRiOiBibHVlKCRjb2xvcik7XG5cbiAgICAkeWlxOiBtYXRoLmRpdigoJHIgKiAyOTkpICsgKCRnICogNTg3KSArICgkYiAqIDExNCksIDEwMDApO1xuXG4gICAgQHJldHVybiBpZigkeWlxID49IDEyOCwgJGRhcmssICRsaWdodCk7XG59XG5cbi8vIFdDQUcgY29udHJhc3QgYWxnb3JpdGhtXG5AZnVuY3Rpb24gY2hlY2stY29udHJhc3QoJGZvcmVncm91bmQsICRiYWNrZ3JvdW5kKSB7XG4gICAgJGZvcmVncm91bmRMdW1pYW5jZTogbHVtaW5hbmNlKCRmb3JlZ3JvdW5kKTtcbiAgICAkYmFja2dyb3VuZEx1bWluYW5jZTogbHVtaW5hbmNlKCRiYWNrZ3JvdW5kKTtcblxuICAgIEBpZiAoJGJhY2tncm91bmRMdW1pbmFuY2UgPCAkZm9yZWdyb3VuZEx1bWlhbmNlKSB7XG4gICAgICAgIEByZXR1cm4gbWF0aC5kaXYoJGJhY2tncm91bmRMdW1pbmFuY2UgKyAwLjA1LCAkZm9yZWdyb3VuZEx1bWlhbmNlICsgMC4wNSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAgIEByZXR1cm4gbWF0aC5kaXYoJGZvcmVncm91bmRMdW1pYW5jZSArIDAuMDUsICRiYWNrZ3JvdW5kTHVtaW5hbmNlICsgMC4wNSk7XG4gICAgfVxufVxuXG5AZnVuY3Rpb24gbHVtaW5hbmNlKCRjb2xvcikge1xuICAgICRyOiByZWQoJGNvbG9yKTtcbiAgICAkZzogZ3JlZW4oJGNvbG9yKTtcbiAgICAkYjogYmx1ZSgkY29sb3IpO1xuXG4gICAgJHI6IGNvbXBvbmVudC1sdW1pbmFuY2UoJHIpO1xuICAgICRnOiBjb21wb25lbnQtbHVtaW5hbmNlKCRnKTtcbiAgICAkYjogY29tcG9uZW50LWx1bWluYW5jZSgkYik7XG5cbiAgICBAcmV0dXJuICRyICogMC4yMTI2ICsgJGcgKiAwLjcxNTIgKyAkYiAqIDAuMDcyMjtcbn1cblxuQGZ1bmN0aW9uIGNvbXBvbmVudC1sdW1pbmFuY2UoJHZhbHVlKSB7XG4gICAgJHZhbHVlOiBtYXRoLmRpdigkdmFsdWUsIDI1NSk7XG5cbiAgICBAaWYgKCR2YWx1ZSA8PSAwLjAzOTI4KSB7XG4gICAgICAgIEByZXR1cm4gbWF0aC5kaXYoJHZhbHVlLCAxMi45Mik7XG4gICAgfSBAZWxzZSB7XG4gICAgICAgIEByZXR1cm4gbWF0aC5wb3cobWF0aC5kaXYoJHZhbHVlICsgMC4wNTUsIDEuMDU1KSwgMi40KTtcbiAgICB9XG59XG4iLCIvKlxuICogQXBwIEN1c3RvbSBBcHAgdmFyaWFibGVzIFNDU1NcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBsYWNlIGhlcmUgYWxsIGN1c3RvbSBhcHAgdmFyaWFibGVzLlxuICovXG4iLCIvKlxuICogQXBwIEdsb2JhbCB2YXJpYWJsZXMgU0NTU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUGxhY2UgaGVyZSBhbGwgZ2xvYmFsIHZhcmlhYmxlcy5cbiAqL1xuXG4kd2hpdGU6ICAgICAgICNmZmZmZmYgIWRlZmF1bHQ7XG4kZ3JheS0xMDA6ICAgICNmOGY5ZmEgIWRlZmF1bHQ7XG4kZ3JheS0yMDA6ICAgICNlOWVjZWYgIWRlZmF1bHQ7XG4kZ3JheS0zMDA6ICAgICNkZWUyZTYgIWRlZmF1bHQ7IC8vIFN0cm9rZVxuJGdyYXktNDAwOiAgICAjY2VkNGRhICFkZWZhdWx0O1xuJGdyYXktNTAwOiAgICAjOGY5NTllICFkZWZhdWx0OyAvLyBTdHJva2Ugb24gaW5wdXRzXG4kZ3JheS02MDA6ICAgICM2YTczN2IgIWRlZmF1bHQ7XG4kZ3JheS03MDA6ICAgICM0OTUwNTcgIWRlZmF1bHQ7XG4kZ3JheS04MDA6ICAgICMzNDNhNDAgIWRlZmF1bHQ7XG4kZ3JheS05MDA6ICAgICMyODI4MjggIWRlZmF1bHQ7IC8vIENvcHkgdGV4dFxuJGJsYWNrOiAgICAgICAjMDAwMDAwICFkZWZhdWx0OyAvLyBBdm9pZCB1c2FnZVxuXG4kYmx1ZTogICAgICAgICMwZjZjYmYgIWRlZmF1bHQ7XG4kY3lhbjogICAgICAgICMwMDgxOTYgIWRlZmF1bHQ7IC8vIE5vdCB1c2VkLlxuJGdyZWVuOiAgICAgICAjMzU3YTMyICFkZWZhdWx0O1xuJHJlZDogICAgICAgICAjY2EzMTIwICFkZWZhdWx0O1xuJHllbGxvdzogICAgICAjZjBhZDRlICFkZWZhdWx0O1xuXG4kYnJhbmQtY29sb3I6ICNmOTgwMTIgIWRlZmF1bHQ7XG5cbiR0ZXh0LWNvbG9yOiAgICAgICAgICAgICAgICRncmF5LTkwMCAhZGVmYXVsdDtcbiR0ZXh0LWNvbG9yLXJnYjogICAgICAgICAgIGNvbG9yLXRvLXJnYi1saXN0KCR0ZXh0LWNvbG9yKSAhZGVmYXVsdDtcbiR0ZXh0LWNvbG9yLWRhcms6ICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcbiR0ZXh0LWNvbG9yLWRhcmstcmdiOiAgICAgIGNvbG9yLXRvLXJnYi1saXN0KCR0ZXh0LWNvbG9yLWRhcmspICFkZWZhdWx0O1xuXG4kYmFja2dyb3VuZC1jb2xvcjogICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJGJhY2tncm91bmQtY29sb3ItcmdiOiAgICAgIGNvbG9yLXRvLXJnYi1saXN0KCRiYWNrZ3JvdW5kLWNvbG9yKSAhZGVmYXVsdDtcbiRiYWNrZ3JvdW5kLWNvbG9yLWRhcms6ICAgICAkZ3JheS05MDAgIWRlZmF1bHQ7IC8vICMxYTFhMWFcbiRiYWNrZ3JvdW5kLWNvbG9yLWRhcmstcmdiOiBjb2xvci10by1yZ2ItbGlzdCgkYmFja2dyb3VuZC1jb2xvci1kYXJrKSAhZGVmYXVsdDtcblxuJGlvbi1pdGVtLWJhY2tncm91bmQ6ICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJGlvbi1pdGVtLWJhY2tncm91bmQtcmdiOiAgY29sb3ItdG8tcmdiLWxpc3QoJGlvbi1pdGVtLWJhY2tncm91bmQpICFkZWZhdWx0O1xuJGlvbi1pdGVtLWJhY2tncm91bmQtZGFyazogJGdyYXktOTAwICFkZWZhdWx0O1xuJGlvbi1pdGVtLWJhY2tncm91bmQtZGFyay1yZ2I6IGNvbG9yLXRvLXJnYi1saXN0KCRpb24taXRlbS1iYWNrZ3JvdW5kLWRhcmspICFkZWZhdWx0O1xuXG4kcHJpbWFyeTogICAgJGJyYW5kLWNvbG9yICFkZWZhdWx0O1xuJHNlY29uZGFyeTogICRncmF5LTMwMCAhZGVmYXVsdDtcbiRkYW5nZXI6ICAgICAkcmVkICFkZWZhdWx0O1xuJHdhcm5pbmc6ICAgICR5ZWxsb3cgIWRlZmF1bHQ7XG4kc3VjY2VzczogICAgJGdyZWVuICFkZWZhdWx0O1xuJGluZm86ICAgICAgICRibHVlICFkZWZhdWx0O1xuJGxpZ2h0OiAgICAgICRncmF5LTEwMCAhZGVmYXVsdDtcbiRtZWRpdW06ICAgICAkZ3JheS03MDAgIWRlZmF1bHQ7XG4kZGFyazogICAgICAgJGdyYXktOTAwICFkZWZhdWx0O1xuXG4kY29sb3JzOiAgKFxuICAgIHByaW1hcnk6IChsaWdodDogJHByaW1hcnksIGRhcms6ICRwcmltYXJ5KSxcbiAgICBzZWNvbmRhcnk6IChsaWdodDogJHNlY29uZGFyeSwgZGFyazogJGdyYXktNzAwKSxcbiAgICBzdWNjZXNzOiAobGlnaHQ6ICRzdWNjZXNzKSxcbiAgICB3YXJuaW5nOiAobGlnaHQ6ICR3YXJuaW5nKSxcbiAgICBkYW5nZXI6ICAobGlnaHQ6ICRkYW5nZXIpLFxuICAgIGluZm86IChsaWdodDogJGluZm8pLFxuICAgIGxpZ2h0OiAobGlnaHQ6ICRsaWdodCwgZGFyazogJGRhcmspLFxuICAgIG1lZGl1bTogKGxpZ2h0OiAkbWVkaXVtLCBkYXJrOiAkZ3JheS0yMDApLFxuICAgIGRhcms6IChsaWdodDogJGRhcmssIGRhcms6ICRsaWdodCksXG4pICFkZWZhdWx0O1xuXG4vKipcbiAqIExheW91dCBCcmVha3BvaW50c1xuICpcbiAqIGh0dHBzOi8vaW9uaWNmcmFtZXdvcmsuY29tL2RvY3MvbGF5b3V0L2dyaWQjZGVmYXVsdC1icmVha3BvaW50c1xuICovXG5cbi8vIFRoZSBtaW5pbXVtIGRpbWVuc2lvbnMgYXQgd2hpY2ggeW91ciBsYXlvdXQgd2lsbCBjaGFuZ2UsXG4vLyBhZGFwdGluZyB0byBkaWZmZXJlbnQgc2NyZWVuIHNpemVzLCBmb3IgdXNlIGluIG1lZGlhIHF1ZXJpZXNcbiRzY3JlZW4tYnJlYWtwb2ludHM6IChcbiAgICB4czogMHB4LFxuICAgIHNtOiA1NzZweCxcbiAgICBtZDogNzY4cHgsXG4gICAgbGc6IDk5MnB4LFxuICAgIHRhYmxldDogOTkycHgsXG4gICAgeGw6IDEyMDBweFxuKSAhZGVmYXVsdDtcblxuJGNvcmUtY291cnNlLWltYWdlLWJhY2tncm91bmQ6ICM4MWVjZWMsICM3NGI5ZmYsICNhMjliZmUsICNkZmU2ZTksICMwMGI4OTQsICMwOTg0ZTMsICNiMmJlYzMsICNmZGNiNmUsICNmZDc5YTgsICM2YzVjZTcgIWRlZmF1bHQ7XG4kY29yZS1kZC1xdWVzdGlvbi1jb2xvcnM6ICNGRkZGRkYsICNCMEM0REUsICNEQ0RDREMsICNEOEJGRDgsICM4N0NFRkEsICNEQUE1MjAsICNGRkQ3MDAsICNGMEU2OEMgIWRlZmF1bHQ7XG4kY29yZS10ZXh0LWhpZ2h0bGlnaHQtYmFja2dyb3VuZC1jb2xvcjogbGlnaHRlbigkYmx1ZSwgNDAlKSAhZGVmYXVsdDtcblxuJGNvcmUtZml4ZWQtdXJsOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWRhc2hib2FyZC1sb2dvOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWFsd2F5cy1zaG93LW1haW4tbWVudTogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1mb3JtYXQtdGV4dC1uZXZlci1zaG9ydGVuOiBmYWxzZSAhZGVmYXVsdDtcblxuJGNvcmUtaGlkZS1jb3Vyc2VpbWFnZS1vbi1jb3Vyc2U6IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtaGlkZS1wcm9ncmVzcy1vbi1jb3Vyc2U6IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtaGlkZS1wcm9ncmVzcy1vbi1zZWN0aW9uLXNlbGVjdG9yOiBmYWxzZSAhZGVmYXVsdDtcblxuJGNvcmUtY291cnNlLWhpZGUtdGh1bWItb24tY2FyZHM6IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtY291cnNlLXRodW1iLW9uLWNhcmRzLWJhY2tncm91bmQ6IG51bGwgIWRlZmF1bHQ7XG4kY29yZS1jb3Vyc2UtaGlkZS1wcm9ncmVzcy1vbi1jYXJkczogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgbG9naW4gcGFnZS5cbiRjb3JlLWxvZ2luLWJ1dHRvbi1vdXRsaW5lOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLWxvZ2luLWJ1dHRvbi1vdXRsaW5lLWRhcms6ICRjb3JlLWxvZ2luLWJ1dHRvbi1vdXRsaW5lICFkZWZhdWx0O1xuJGNvcmUtbG9naW4tbG9hZGluZy1jb2xvcjogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1sb2dpbi1sb2FkaW5nLWNvbG9yLWRhcms6ICR0ZXh0LWNvbG9yLWRhcmsgIWRlZmF1bHQ7XG4kY29yZS1sb2dpbi1oaWRlLWZvcmdvdC1wYXNzd29yZDogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1sb2dpbi1oaWRlLW5lZWQtaGVscDogZmFsc2UgIWRlZmF1bHQ7XG4kY29yZS1sb2dpbi1oaWRlLXFyY29kZTogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgbW9yZSBwYWdlLiAoZGVwcmVjYXRlZCBvbiA0LjApXG4kY29yZS1tb3JlLWhpZGUtc2l0ZWluZm86IGZhbHNlICFkZWZhdWx0O1xuJGNvcmUtbW9yZS1oaWRlLXNpdGVuYW1lOiBmYWxzZSAhZGVmYXVsdDtcbiRjb3JlLW1vcmUtaGlkZS1zaXRldXJsOiBmYWxzZSAhZGVmYXVsdDtcblxuLy8gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB1c2VyIHBhZ2UuXG4kY29yZS11c2VyLWhpZGUtc2l0ZWluZm86ICRjb3JlLW1vcmUtaGlkZS1zaXRlaW5mbyAhZGVmYXVsdDtcbiRjb3JlLXVzZXItaGlkZS1zaXRlbmFtZTogJGNvcmUtbW9yZS1oaWRlLXNpdGVuYW1lICFkZWZhdWx0O1xuJGNvcmUtdXNlci1oaWRlLXNpdGV1cmw6ICRjb3JlLW1vcmUtaGlkZS1zaXRldXJsICFkZWZhdWx0O1xuXG4vLyBBY3Rpdml0eSBpY29uIGJhY2tncm91bmQgY29sb3JzLlxuJGFjdGl2aXR5LWljb24tY29sb3JzOiAoXG4gICAgYWRtaW5pc3RyYXRpb246ICM1ZDYzZjYsXG4gICAgYXNzZXNzbWVudDogI2ViNjZhMixcbiAgICBjb2xsYWJvcmF0aW9uOiAjZjc2MzRkLFxuICAgIGNvbW11bmljYXRpb246ICMxMWE2NzYsXG4gICAgY29udGVudDogIzM5OWJlMixcbiAgICBpbnRlcmZhY2U6ICNhMzc4ZmZcbikgIWRlZmF1bHQ7XG5cbiRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1jYXRlZ29yeTogIzhlMjRhYSAhZGVmYXVsdDtcbiRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1jb3Vyc2U6ICRyZWQgIWRlZmF1bHQ7XG4kY2FsZW5kYXItZXZlbnQtY2F0ZWdvcnktZ3JvdXA6ICR5ZWxsb3cgIWRlZmF1bHQ7XG4kY2FsZW5kYXItZXZlbnQtY2F0ZWdvcnktdXNlcjogJGJsdWUgIWRlZmF1bHQ7XG4kY2FsZW5kYXItZXZlbnQtY2F0ZWdvcnktc2l0ZTogJGdyZWVuICFkZWZhdWx0O1xuXG4vLyBDYWxlbmRhciBldmVudCBjYXRlZ29yeSBiYWNrZ3JvdW5kIGNvbG9ycy5cbiRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1jb2xvcnM6IChcbiAgICBjYXRlZ29yeTogJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LWNhdGVnb3J5LFxuICAgIGNvdXJzZTogJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LWNvdXJzZSxcbiAgICBncm91cDogJGNhbGVuZGFyLWV2ZW50LWNhdGVnb3J5LWdyb3VwLFxuICAgIHVzZXI6ICRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS11c2VyLFxuICAgIHNpdGU6ICRjYWxlbmRhci1ldmVudC1jYXRlZ29yeS1zaXRlLFxuKSAhZGVmYXVsdDtcbiIsIkB1c2UgXCJ0aGVtZS9nbG9iYWxzXCIgYXMgKjtcblxuOmhvc3Qge1xuICAgIC5hZGRvbi1tZXNzYWdlcy1jb252ZXJzYXRpb24taXRlbSxcbiAgICAuYWRkb24tbWVzc2FnZS1kaXNjdXNzaW9uIHtcbiAgICAgICAgaW9uLWxhYmVsIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLml0ZW0taGVhZGluZyB7XG4gICAgICAgICAgICBjb3JlLWZvcm1hdC10ZXh0IHtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW9uLWljb24ge1xuICAgICAgICAgICAgICAgIEBpbmNsdWRlIG1hcmdpbi1ob3Jpem9udGFsKDJweCwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpb24tbm90ZSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICAgICAgICBAaW5jbHVkZSBtYXJnaW4taG9yaXpvbnRhbCgycHgsIG51bGwpO1xuXG4gICAgICAgICAgICBpb24tYmFkZ2UsIGlvbi1pY29uIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAzcHg7XG4gICAgICAgICAgICAgICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYWRkb24tbWVzc2FnZS1sYXN0LW1lc3NhZ2UtZGF0ZSB7XG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDExcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAuYWRkb24tbWVzc2FnZS1sYXN0LW1lc3NhZ2Uge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hZGRvbi1tZXNzYWdlLWxhc3QtbWVzc2FnZS11c2VyIHtcbiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0taW9uLXRleHQtY29sb3IpO1xuICAgICAgICAgICAgQGluY2x1ZGUgbWFyZ2luLWhvcml6b250YWwobnVsbCwgMnB4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hZGRvbi1tZXNzYWdlLWxhc3QtbWVzc2FnZS10ZXh0IHtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICBmbGV4LXNocmluazogMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5hZGRvbi1tZXNzYWdlLWRpc2N1c3Npb24ge1xuICAgICAgICAuaXRlbS1oZWFkaW5nIHtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpb24taXRlbS1kaXZpZGVyIGlvbi1iYWRnZSB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxNnB4O1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["IonContent","CoreEvents","CoreSites","AddonMessagesProvider","AddonMessages","AddonMessagesOffline","CoreDomUtils","CoreUser","CorePushNotificationsDelegate","Translate","CoreUtils","CoreNavigator","CoreScreen","CoreMainMenuDeepLinkManager","CorePlatform","CoreSplitViewComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","contactRequestsCount","ɵɵtextInterpolate1","ɵɵpipeBind2","ɵɵpureFunction1","_c3","ctx_r1","ctx_r2","favourites","unread","ctx_r3","ɵɵelementContainer","ɵɵpipeBind1","ɵɵelement","ɵɵattribute","ctx_r8","group","ctx_r9","ctx_r14","individual","ctx_r15","ɵɵproperty","conversation_r24","imageurl","ɵɵsanitizeUrl","name","otherUser","showonlinestatus","lastmessagedate","unreadcount","ɵɵtemplate","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_span_1_Template","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_ion_badge_2_Template","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_span_3_Template","subname","members","fullname","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_11_span_1_Template","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_11_span_2_Template","sentfromcurrentuser","type","ctx_r31","typeGroup","lastmessage","ɵɵlistener","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_Template_ion_item_click_0_listener","restoredCtx","ɵɵrestoreView","_r47","$implicit","ctx_r46","ɵɵnextContext","ɵɵresetView","gotoConversation","id","userid","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_avatar_1_Template","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_core_user_avatar_2_Template","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_icon_7_Template","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_icon_8_Template","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_ion_note_9_Template","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_10_Template","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_p_11_Template","ɵɵpropertyInterpolate1","ctx_r23","selectedConversationId","selectedUserId","isblocked","ismuted","undefined","AddonMessagesGroupConversationsPage_ng_template_78_ion_item_0_Template","conversations_r22","AddonMessagesGroupConversationsPage","constructor","route","loaded","count","conversations","MESSAGE_CONVERSATION_TYPE_GROUP","MESSAGE_CONVERSATION_TYPE_INDIVIDUAL","loadingMessage","instant","siteId","getCurrentSiteId","currentUserId","getCurrentSiteUserId","newMessagesObserver","on","NEW_MESSAGE_EVENT","data","expandedOption","getExpandedOption","messageOption","getConversationOption","conversation","findConversation","conversationId","userId","refreshData","finally","message","timecreated","isNewer","userFrom","option","sortConversations","_this$content","content","scrollToTop","readChangedObserver","READ_CHANGED_EVENT","invalidateConversations","refreshUnreadConversationCounts","openConversationObserver","OPEN_CONVERSATION_EVENT","appResumeSubscription","resume","subscribe","updateConversationListObserver","UPDATE_CONVERSATION_LIST_EVENT","action","value","pushObserver","notification","isFalseOrZero","notif","site","cronObserver","UNREAD_CONVERSATION_COUNTS_EVENT","self","contactRequestsCountObserver","CONTACT_REQUESTS_COUNT_EVENT","memberInfoObserver","MEMBER_INFO_CHANGED_EVENT","userBlocked","userUnblocked","length","ngOnInit","_this","_asyncToGenerator","queryParams","_ref","params","getRouteNumberParam","_x","apply","arguments","deepLinkManager","fetchData","isTablet","treatLink","refreshUnreadCounts","_this2","promises","push","fetchConversationCounts","getContactRequestsCount","Promise","all","expanded","fetchDataForOption","expandOption","fetchDataForExpandedOption","error","showErrorModalDefault","_this3","loadCurrentListElement","loadingMore","getCounts","_this4","loadMoreError","limitFrom","canLoadMore","offlineMessages","then","getConversations","getAllMessages","messages","concat","loadOfflineMessages","_this5","invalidateConversationCounts","counts","getConversationCounts","find","conv","gotoContacts","navigateToSitePath","messageId","_this6","path","getRelativePathToParent","navigate","reset","splitView","isNested","gotoSettings","loadMoreConversations","infiniteComplete","_this7","_this8","forEach","conversationid","lastmessagepending","addLastOfflineMessage","_message$conversation","_message$conversation2","_message$conversation3","_message$conversation4","_message$conversation5","_message$conversation6","_message$conversation7","_message$conversation8","_message$conversation9","_message$conversation10","membercount","isfavourite","isread","candeletemessagesforallusers","addOfflineConversation","touserid","text","smallmessage","getProfile","catch","user","String","profileimageurl","unshift","refresher","_this9","invalidateContactRequestsCountCache","complete","toggle","_this10","loading","currentListEl","favListEl","nativeElement","groupListEl","indListEl","gotoSearch","ngOnDestroy","_this$newMessagesObse","_this$appResumeSubscr","_this$pushObserver","_this$readChangedObse","_this$cronObserver","_this$openConversatio","_this$updateConversat","_this$contactRequests","_this$memberInfoObser","off","unsubscribe","ɵɵdirectiveInject","i1","ActivatedRoute","selectors","viewQuery","AddonMessagesGroupConversationsPage_Query","rf","ctx","AddonMessagesGroupConversationsPage_Template_ion_button_click_10_listener","AddonMessagesGroupConversationsPage_Template_ion_button_click_13_listener","AddonMessagesGroupConversationsPage_Template_ion_refresher_ionRefresh_20_listener","$event","target","AddonMessagesGroupConversationsPage_Template_ion_item_click_25_listener","AddonMessagesGroupConversationsPage_ion_badge_31_Template","AddonMessagesGroupConversationsPage_span_32_Template","AddonMessagesGroupConversationsPage_Template_ion_item_click_33_listener","AddonMessagesGroupConversationsPage_ion_badge_40_Template","AddonMessagesGroupConversationsPage_span_41_Template","AddonMessagesGroupConversationsPage_ng_container_44_Template","AddonMessagesGroupConversationsPage_Template_core_infinite_loading_action_45_listener","AddonMessagesGroupConversationsPage_ion_item_46_Template","AddonMessagesGroupConversationsPage_ion_item_47_Template","AddonMessagesGroupConversationsPage_Template_ion_item_click_48_listener","AddonMessagesGroupConversationsPage_ion_badge_55_Template","AddonMessagesGroupConversationsPage_span_56_Template","AddonMessagesGroupConversationsPage_ng_container_59_Template","AddonMessagesGroupConversationsPage_Template_core_infinite_loading_action_60_listener","AddonMessagesGroupConversationsPage_ion_item_61_Template","AddonMessagesGroupConversationsPage_ion_item_62_Template","AddonMessagesGroupConversationsPage_Template_ion_item_click_63_listener","AddonMessagesGroupConversationsPage_ion_badge_70_Template","AddonMessagesGroupConversationsPage_span_71_Template","AddonMessagesGroupConversationsPage_ng_container_74_Template","AddonMessagesGroupConversationsPage_Template_core_infinite_loading_action_75_listener","AddonMessagesGroupConversationsPage_ion_item_76_Template","AddonMessagesGroupConversationsPage_ion_item_77_Template","AddonMessagesGroupConversationsPage_ng_template_78_Template","ɵɵtemplateRefExtractor","ɵɵpropertyInterpolate","ɵɵclassProp","ɵɵtextInterpolate2","_r20","_c4"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messages/pages/group-conversations/group-conversations.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messages/pages/group-conversations/group-conversations.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { IonContent } from '@ionic/angular';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessagesProvider,\n    AddonMessagesConversationFormatted,\n    AddonMessages,\n    AddonMessagesNewMessagedEventData,\n} from '../../services/messages';\nimport {\n    AddonMessagesOffline,\n    AddonMessagesOfflineAnyMessagesFormatted,\n} from '../../services/messages-offline';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUser } from '@features/user/services/user';\nimport { CorePushNotificationsDelegate } from '@features/pushnotifications/services/push-delegate';\nimport { Translate } from '@singletons';\nimport { Subscription } from 'rxjs';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreMainMenuDeepLinkManager } from '@features/mainmenu/classes/deep-link-manager';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\n\n/**\n * Page that displays the list of conversations, including group conversations.\n */\n@Component({\n    selector: 'page-addon-messages-group-conversations',\n    templateUrl: 'group-conversations.html',\n    styleUrls: ['../../messages-common.scss'],\n})\nexport class AddonMessagesGroupConversationsPage implements OnInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild('favlist') favListEl?: ElementRef;\n    @ViewChild('grouplist') groupListEl?: ElementRef;\n    @ViewChild('indlist') indListEl?: ElementRef;\n\n    loaded = false;\n    loadingMessage: string;\n    selectedConversationId?: number;\n    selectedUserId?: number;\n    contactRequestsCount = 0;\n    favourites: AddonMessagesGroupConversationOption = {\n        type: undefined,\n        favourites: true,\n        count: 0,\n        unread: 0,\n        conversations: [],\n    };\n\n    group: AddonMessagesGroupConversationOption = {\n        type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP,\n        favourites: false,\n        count: 0,\n        unread: 0,\n        conversations: [],\n    };\n\n    individual: AddonMessagesGroupConversationOption = {\n        type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n        favourites: false,\n        count: 0,\n        unread: 0,\n        conversations: [],\n    };\n\n    typeGroup = AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP;\n    currentListEl?: HTMLElement;\n\n    protected siteId: string;\n    protected currentUserId: number;\n    protected newMessagesObserver: CoreEventObserver;\n    protected pushObserver: Subscription;\n    protected appResumeSubscription: Subscription;\n    protected readChangedObserver: CoreEventObserver;\n    protected cronObserver: CoreEventObserver;\n    protected openConversationObserver: CoreEventObserver;\n    protected updateConversationListObserver: CoreEventObserver;\n    protected contactRequestsCountObserver: CoreEventObserver;\n    protected memberInfoObserver: CoreEventObserver;\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n        this.loadingMessage = Translate.instant('core.loading');\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n\n        // Update conversations when new message is received.\n        this.newMessagesObserver = CoreEvents.on(\n            AddonMessagesProvider.NEW_MESSAGE_EVENT,\n            (data) => {\n                // Check if the new message belongs to the option that is currently expanded.\n                const expandedOption = this.getExpandedOption();\n                const messageOption = this.getConversationOption(data);\n\n                if (expandedOption != messageOption) {\n                    return; // Message doesn't belong to current list, stop.\n                }\n\n                // Search the conversation to update.\n                const conversation = this.findConversation(data.conversationId, data.userId, expandedOption);\n\n                if (conversation === undefined) {\n                    // Probably a new conversation, refresh the list.\n                    this.loaded = false;\n                    this.refreshData().finally(() => {\n                        this.loaded = true;\n                    });\n\n                    return;\n                }\n\n                if (data.message === undefined) {\n                    conversation.lastmessage = undefined;\n                    conversation.lastmessagedate = undefined;\n                    conversation.sentfromcurrentuser = undefined;\n\n                    return;\n                }\n\n                if (conversation.lastmessage !== data.message || conversation.lastmessagedate !== data.timecreated / 1000) {\n                    const isNewer = data.timecreated / 1000 > (conversation.lastmessagedate || 0);\n\n                    // An existing conversation has a new message, update the last message.\n                    conversation.lastmessage = data.message;\n                    conversation.lastmessagedate = data.timecreated / 1000;\n                    if (data.userFrom) {\n                        conversation.sentfromcurrentuser = data.userFrom.id === this.currentUserId;\n                        if (conversation.type === AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP) {\n                            conversation.members[0] = data.userFrom;\n                        }\n                    }\n\n                    // Sort the affected list.\n                    const option = this.getConversationOption(conversation);\n                    option.conversations = AddonMessages.sortConversations(option.conversations || []);\n\n                    if (isNewer) {\n                        // The last message is newer than the previous one, scroll to top to keep viewing the conversation.\n                        this.content?.scrollToTop();\n                    }\n                }\n            },\n            this.siteId,\n        );\n\n        // Update conversations when a message is read.\n        this.readChangedObserver = CoreEvents.on(AddonMessagesProvider.READ_CHANGED_EVENT, (data) => {\n            if (data.conversationId) {\n                const conversation = this.findConversation(data.conversationId);\n\n                if (conversation !== undefined) {\n                    // A conversation has been read reset counter.\n                    conversation.unreadcount = 0;\n\n                    // Conversations changed, invalidate them and refresh unread counts.\n                    AddonMessages.invalidateConversations(this.siteId);\n                    AddonMessages.refreshUnreadConversationCounts(this.siteId);\n                }\n            }\n        }, this.siteId);\n\n        // Load a discussion if we receive an event to do so.\n        this.openConversationObserver = CoreEvents.on(\n            AddonMessagesProvider.OPEN_CONVERSATION_EVENT,\n            (data) => {\n                if (data.conversationId || data.userId) {\n                    this.gotoConversation(data.conversationId, data.userId);\n                }\n            },\n            this.siteId,\n        );\n\n        // Refresh the view when the app is resumed.\n        this.appResumeSubscription = CorePlatform.resume.subscribe(() => {\n            if (!this.loaded) {\n                return;\n            }\n            this.loaded = false;\n            this.refreshData().finally(() => {\n                this.loaded = true;\n            });\n        });\n\n        // Update conversations if we receive an event to do so.\n        this.updateConversationListObserver = CoreEvents.on(\n            AddonMessagesProvider.UPDATE_CONVERSATION_LIST_EVENT,\n            (data) => {\n                if (data && data.action == 'mute') {\n                // If the conversation is displayed, change its muted value.\n                    const expandedOption = this.getExpandedOption();\n\n                    if (expandedOption && expandedOption.conversations) {\n                        const conversation = this.findConversation(data.conversationId, undefined, expandedOption);\n                        if (conversation) {\n                            conversation.ismuted = !!data.value;\n                        }\n                    }\n\n                    return;\n                }\n\n                this.refreshData();\n\n            },\n            this.siteId,\n        );\n\n        // If a message push notification is received, refresh the view.\n        this.pushObserver = CorePushNotificationsDelegate.on<CorePushNotificationsNotificationBasicData>('receive')\n            .subscribe((notification) => {\n                // New message received. If it's from current site, refresh the data.\n                if (CoreUtils.isFalseOrZero(notification.notif) && notification.site == this.siteId) {\n                // Don't refresh unread counts, it's refreshed from the main menu handler in this case.\n                    this.refreshData(undefined, false);\n                }\n            });\n\n        // Update unread conversation counts.\n        this.cronObserver = CoreEvents.on(\n            AddonMessagesProvider.UNREAD_CONVERSATION_COUNTS_EVENT,\n            (data) => {\n                this.favourites.unread = data.favourites;\n                this.individual.unread = data.individual + data.self; // Self is only returned if it's not favourite.\n                this.group.unread = data.group;\n            },\n            this.siteId,\n        );\n\n        // Update the contact requests badge.\n        this.contactRequestsCountObserver = CoreEvents.on(\n            AddonMessagesProvider.CONTACT_REQUESTS_COUNT_EVENT,\n            (data) => {\n                this.contactRequestsCount = data.count;\n            },\n            this.siteId,\n        );\n\n        // Update block status of a user.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (!data.userBlocked && !data.userUnblocked) {\n                // The block status has not changed, ignore.\n                    return;\n                }\n\n                const expandedOption = this.getExpandedOption();\n                if (expandedOption == this.individual || expandedOption == this.favourites) {\n                    if (!expandedOption.conversations || expandedOption.conversations.length <= 0) {\n                        return;\n                    }\n\n                    const conversation = this.findConversation(undefined, data.userId, expandedOption);\n                    if (conversation) {\n                        conversation.isblocked = data.userBlocked;\n                    }\n                }\n            },\n            this.siteId,\n        );\n    }\n\n    /**\n     * Component loaded.\n     */\n    async ngOnInit(): Promise<void> {\n        this.route.queryParams.subscribe(async (params) => {\n            // When a child page loads this callback is triggered too.\n            const conversationId = CoreNavigator.getRouteNumberParam('conversationId', { params });\n            const userId = CoreNavigator.getRouteNumberParam('userId', { params });\n            if (conversationId || userId) {\n                // Update the selected ones.\n                this.selectedConversationId = conversationId;\n                this.selectedUserId = userId;\n            }\n        });\n\n        const deepLinkManager = new CoreMainMenuDeepLinkManager();\n\n        await this.fetchData();\n\n        if (!this.selectedConversationId && !this.selectedUserId && CoreScreen.isTablet) {\n            // Load the first conversation.\n            let conversation: AddonMessagesConversationForList;\n            const expandedOption = this.getExpandedOption();\n\n            if (expandedOption && expandedOption.conversations.length) {\n                conversation = expandedOption.conversations[0];\n\n                if (conversation) {\n                    await this.gotoConversation(conversation.id);\n                }\n            }\n        }\n\n        // Treat deep link now that the conversation route has been loaded if needed.\n        deepLinkManager.treatLink();\n    }\n\n    /**\n     * Fetch conversations.\n     *\n     * @param refreshUnreadCounts Whether to refresh unread counts.\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(refreshUnreadCounts: boolean = true): Promise<void> {\n        // Load the amount of conversations and contact requests.\n        const promises: Promise<unknown>[] = [];\n\n        promises.push(this.fetchConversationCounts());\n\n        // View updated by the events observers.\n        promises.push(AddonMessages.getContactRequestsCount(this.siteId));\n        if (refreshUnreadCounts) {\n            promises.push(AddonMessages.refreshUnreadConversationCounts(this.siteId));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            // The expanded status hasn't been initialized. Do it now.\n            if (this.favourites.expanded === undefined && (this.selectedConversationId || this.selectedUserId)) {\n                // A certain conversation should be opened.\n                // We don't know which option it belongs to, so we need to fetch the data for all of them.\n                const promises: Promise<void>[] = [];\n\n                promises.push(this.fetchDataForOption(this.favourites, false));\n                promises.push(this.fetchDataForOption(this.group, false));\n                promises.push(this.fetchDataForOption(this.individual, false));\n\n                await Promise.all(promises);\n                // All conversations have been loaded, find the one we need to load and expand its option.\n                const conversation = this.findConversation(this.selectedConversationId, this.selectedUserId);\n                if (conversation) {\n                    const option = this.getConversationOption(conversation);\n\n                    await this.expandOption(option);\n\n                    this.loaded = true;\n\n                    return;\n                }\n            }\n\n            // Load the data for the expanded option.\n            await this.fetchDataForExpandedOption();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n        }\n        this.loaded = true;\n    }\n\n    /**\n     * Fetch data for the expanded option.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchDataForExpandedOption(): Promise<void> {\n        if (this.favourites.expanded === undefined) {\n            // Calculate which option should be expanded initially.\n            this.favourites.expanded = this.favourites.count != 0 && !this.group.unread && !this.individual.unread;\n            this.group.expanded = !this.favourites.expanded && this.group.count != 0 && !this.individual.unread;\n            this.individual.expanded = !this.favourites.expanded && !this.group.expanded;\n        }\n\n        this.loadCurrentListElement();\n\n        const expandedOption = this.getExpandedOption();\n\n        if (expandedOption) {\n            await this.fetchDataForOption(expandedOption, false);\n        }\n    }\n\n    /**\n     * Fetch data for a certain option.\n     *\n     * @param option The option to fetch data for.\n     * @param loadingMore Whether we are loading more data or just the first ones.\n     * @param getCounts Whether to get counts data.\n     * @returns Promise resolved when done.\n     */\n    async fetchDataForOption(\n        option: AddonMessagesGroupConversationOption,\n        loadingMore = false,\n        getCounts = false,\n    ): Promise<void> {\n        option.loadMoreError = false;\n\n        const limitFrom = loadingMore ? option.conversations.length : 0;\n        const promises: Promise<unknown>[] = [];\n\n        let data = {\n            conversations: <AddonMessagesConversationForList[]> [],\n            canLoadMore: false,\n        };\n        let offlineMessages:\n        AddonMessagesOfflineAnyMessagesFormatted[] = [];\n\n        // Get the conversations and, if needed, the offline messages. Always try to get the latest data.\n        promises.push(AddonMessages.invalidateConversations(this.siteId).then(async () => {\n            data = await AddonMessages.getConversations(option.type, option.favourites, limitFrom, this.siteId);\n\n            return;\n        }));\n\n        if (!loadingMore) {\n            promises.push(AddonMessagesOffline.getAllMessages().then((messages) => {\n                offlineMessages = messages;\n\n                return;\n            }));\n        }\n\n        if (getCounts) {\n            promises.push(this.fetchConversationCounts());\n            promises.push(AddonMessages.refreshUnreadConversationCounts(this.siteId));\n        }\n\n        await Promise.all(promises);\n\n        if (loadingMore) {\n            option.conversations = option.conversations.concat(data.conversations);\n            option.canLoadMore = data.canLoadMore;\n        } else {\n            option.conversations = data.conversations;\n            option.canLoadMore = data.canLoadMore;\n\n            if (offlineMessages && offlineMessages.length) {\n                await this.loadOfflineMessages(option, offlineMessages);\n\n                // Sort the conversations, the offline messages could affect the order.\n                option.conversations = AddonMessages.sortConversations(option.conversations);\n            }\n        }\n    }\n\n    /**\n     * Fetch conversation counts.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchConversationCounts(): Promise<void> {\n        // Always try to get the latest data.\n        await AddonMessages.invalidateConversationCounts(this.siteId);\n\n        const counts = await AddonMessages.getConversationCounts(this.siteId);\n        this.favourites.count = counts.favourites;\n        this.individual.count = counts.individual + counts.self; // Self is only returned if it's not favourite.\n        this.group.count = counts.group;\n    }\n\n    /**\n     * Find a conversation in the list of loaded conversations.\n     *\n     * @param conversationId The conversation ID to search.\n     * @param userId User ID to search (if no conversationId).\n     * @param option The option to search in. If not defined, search in all options.\n     * @returns Conversation.\n     */\n    protected findConversation(\n        conversationId?: number,\n        userId?: number,\n        option?: AddonMessagesGroupConversationOption,\n    ): AddonMessagesConversationForList | undefined {\n\n        if (conversationId) {\n            const conversations: AddonMessagesConversationForList[] = option\n                ? option.conversations\n                : (this.favourites.conversations.concat(this.group.conversations).concat(this.individual.conversations));\n\n            return conversations.find((conv) => conv.id == conversationId);\n        }\n\n        const conversations = option\n            ? option.conversations\n            : this.favourites.conversations.concat(this.individual.conversations);\n\n        return conversations.find((conv) => conv.userid == userId);\n    }\n\n    /**\n     * Get the option that is currently expanded, undefined if they are all collapsed.\n     *\n     * @returns Option currently expanded.\n     */\n    protected getExpandedOption(): AddonMessagesGroupConversationOption | undefined {\n        if (this.favourites.expanded) {\n            return this.favourites;\n        } else if (this.group.expanded) {\n            return this.group;\n        } else if (this.individual.expanded) {\n            return this.individual;\n        }\n    }\n\n    /**\n     * Navigate to contacts view.\n     */\n    gotoContacts(): void {\n        CoreNavigator.navigateToSitePath('contacts');\n    }\n\n    /**\n     * Navigate to a particular conversation.\n     *\n     * @param conversationId Conversation Id to load.\n     * @param userId User of the conversation. Only if there is no conversationId.\n     * @param messageId Message to scroll after loading the discussion. Used when searching.\n     */\n    async gotoConversation(conversationId?: number, userId?: number, messageId?: number): Promise<void> {\n        this.selectedConversationId = conversationId;\n        this.selectedUserId = userId;\n\n        const params: Params = {};\n        if (messageId) {\n            params.message = messageId;\n        }\n\n        const path = CoreNavigator.getRelativePathToParent('/messages/group-conversations') + 'discussion/' +\n            (conversationId ? conversationId : `user/${userId}`);\n\n        await CoreNavigator.navigate(path, {\n            params,\n            reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested,\n        });\n    }\n\n    /**\n     * Navigate to message settings.\n     */\n    gotoSettings(): void {\n        CoreNavigator.navigateToSitePath('message-settings');\n    }\n\n    /**\n     * Function to load more conversations.\n     *\n     * @param option The option to fetch data for.\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @returns Promise resolved when done.\n     */\n    async loadMoreConversations(option: AddonMessagesGroupConversationOption, infiniteComplete?: () => void): Promise<void> {\n        try {\n            await this.fetchDataForOption(option, true);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n            option.loadMoreError = true;\n        }\n\n        infiniteComplete && infiniteComplete();\n    }\n\n    /**\n     * Load offline messages into the conversations.\n     *\n     * @param option The option where the messages should be loaded.\n     * @param messages Offline messages.\n     * @returns Promise resolved when done.\n     */\n    protected async loadOfflineMessages(\n        option: AddonMessagesGroupConversationOption,\n        messages: AddonMessagesOfflineAnyMessagesFormatted[],\n    ): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        messages.forEach((message) => {\n            if ('conversationid' in message) {\n                // It's an existing conversation. Search it in the current option.\n                let conversation = this.findConversation(message.conversationid, undefined, option);\n\n                if (conversation) {\n                    // Check if it's the last message. Offline messages are considered more recent than sent messages.\n                    if (conversation.lastmessage === undefined || conversation.lastmessage === null ||\n                            !conversation.lastmessagepending || (conversation.lastmessagedate || 0) <= message.timecreated / 1000) {\n\n                        this.addLastOfflineMessage(conversation, message);\n                    }\n                } else {\n                    // Conversation not found, it could be an old one or the message could belong to another option.\n                    conversation = {\n                        id: message.conversationid,\n                        type: message.conversation?.type || AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n                        membercount: message.conversation?.membercount || 0,\n                        ismuted: message.conversation?.ismuted || false,\n                        isfavourite: message.conversation?.isfavourite || false,\n                        isread: message.conversation?.isread || false,\n                        members: message.conversation?.members || [],\n                        messages: message.conversation?.messages || [],\n                        candeletemessagesforallusers: message.conversation?.candeletemessagesforallusers || false,\n                        userid: 0, // Faked data.\n                        name: message.conversation?.name,\n                        imageurl: message.conversation?.imageurl || '',\n                    };\n\n                    if (this.getConversationOption(conversation) == option) {\n                        // Message belongs to current option, add the conversation.\n                        this.addLastOfflineMessage(conversation, message);\n                        this.addOfflineConversation(conversation);\n                    }\n                }\n            } else if (option.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {\n                // It's a new conversation. Check if we already created it (there is more than one message for the same user).\n                const conversation = this.findConversation(undefined, message.touserid, option);\n\n                message.text = message.smallmessage;\n\n                if (conversation) {\n                    // Check if it's the last message. Offline messages are considered more recent than sent messages.\n                    if ((conversation.lastmessagedate || 0) <= message.timecreated / 1000) {\n                        this.addLastOfflineMessage(conversation, message);\n                    }\n                } else {\n                    // Get the user data and create a new conversation if it belongs to the current option.\n                    promises.push(CoreUser.getProfile(message.touserid, undefined, true).catch(() => {\n                        // User not found.\n                    }).then((user) => {\n                        const conversation: AddonMessagesConversationForList = {\n                            id: 0,\n                            type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n                            membercount: 0, // Faked data.\n                            ismuted: false, // Faked data.\n                            isfavourite: false, // Faked data.\n                            isread: false, // Faked data.\n                            members: [], // Faked data.\n                            messages: [], // Faked data.\n                            candeletemessagesforallusers: false,\n                            userid: message.touserid,\n                            name: user ? user.fullname : String(message.touserid),\n                            imageurl: user ? user.profileimageurl : '',\n                        };\n\n                        this.addLastOfflineMessage(conversation, message);\n                        this.addOfflineConversation(conversation);\n\n                        return;\n                    }));\n                }\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Add an offline conversation into the right list of conversations.\n     *\n     * @param conversation Offline conversation to add.\n     */\n    protected addOfflineConversation(conversation: AddonMessagesConversationForList): void {\n        const option = this.getConversationOption(conversation);\n        option.conversations.unshift(conversation);\n    }\n\n    /**\n     * Add a last offline message into a conversation.\n     *\n     * @param conversation Conversation where to put the last message.\n     * @param message Offline message to add.\n     */\n    protected addLastOfflineMessage(\n        conversation: AddonMessagesConversationForList,\n        message: AddonMessagesOfflineAnyMessagesFormatted,\n    ): void {\n        conversation.lastmessage = message.text;\n        conversation.lastmessagedate = message.timecreated / 1000;\n        conversation.lastmessagepending = true;\n        conversation.sentfromcurrentuser = true;\n    }\n\n    /**\n     * Given a conversation, return its option (favourites, group, individual).\n     *\n     * @param conversation Conversation to check.\n     * @returns Option object.\n     */\n    protected getConversationOption(\n        conversation: AddonMessagesConversationForList | AddonMessagesNewMessagedEventData,\n    ): AddonMessagesGroupConversationOption {\n        if (conversation.isfavourite) {\n            return this.favourites;\n        }\n\n        if (conversation.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP) {\n            return this.group;\n        }\n\n        return this.individual;\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @param refreshUnreadCounts Whether to refresh unread counts.\n     * @returns Promise resolved when done.\n     */\n    async refreshData(refresher?: HTMLIonRefresherElement, refreshUnreadCounts: boolean = true): Promise<void> {\n        // Don't invalidate conversations and so, they always try to get latest data.\n        try {\n            await AddonMessages.invalidateContactRequestsCountCache(this.siteId);\n        } finally {\n            try {\n                await this.fetchData(refreshUnreadCounts);\n            } finally {\n                if (refresher) {\n                    refresher?.complete();\n                }\n            }\n        }\n    }\n\n    /**\n     * Toogle the visibility of an option (expand/collapse).\n     *\n     * @param option The option to expand/collapse.\n     */\n    toggle(option: AddonMessagesGroupConversationOption): void {\n        if (option.expanded) {\n            // Already expanded, close it.\n            option.expanded = false;\n            this.loadCurrentListElement();\n        } else {\n            // Pass getCounts=true to update the counts everytime the user expands an option.\n            this.expandOption(option, true).catch((error) => {\n                CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n            });\n        }\n    }\n\n    /**\n     * Expand a certain option.\n     *\n     * @param option The option to expand.\n     * @param getCounts Whether to get counts data.\n     * @returns Promise resolved when done.\n     */\n    protected async expandOption(option: AddonMessagesGroupConversationOption, getCounts = false): Promise<void> {\n        // Collapse all and expand the right one.\n        this.favourites.expanded = false;\n        this.group.expanded = false;\n        this.individual.expanded = false;\n\n        option.expanded = true;\n        option.loading = true;\n\n        try {\n            await this.fetchDataForOption(option, false, getCounts);\n\n            this.loadCurrentListElement();\n        } catch (error) {\n            option.expanded = false;\n\n            throw error;\n        } finally {\n            option.loading = false;\n        }\n\n    }\n\n    /**\n     * Load the current list element based on the expanded list.\n     */\n    protected loadCurrentListElement(): void {\n        if (this.favourites.expanded) {\n            this.currentListEl = this.favListEl && this.favListEl.nativeElement;\n        } else if (this.group.expanded) {\n            this.currentListEl = this.groupListEl && this.groupListEl.nativeElement;\n        } else if (this.individual.expanded) {\n            this.currentListEl = this.indListEl && this.indListEl.nativeElement;\n        } else {\n            this.currentListEl = undefined;\n        }\n    }\n\n    /**\n     * Navigate to the search page.\n     */\n    gotoSearch(): void {\n        CoreNavigator.navigateToSitePath('search');\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.newMessagesObserver?.off();\n        this.appResumeSubscription?.unsubscribe();\n        this.pushObserver?.unsubscribe();\n        this.readChangedObserver?.off();\n        this.cronObserver?.off();\n        this.openConversationObserver?.off();\n        this.updateConversationListObserver?.off();\n        this.contactRequestsCountObserver?.off();\n        this.memberInfoObserver?.off();\n    }\n\n}\n\n/**\n * Conversation options.\n */\nexport type AddonMessagesGroupConversationOption = {\n    type?: number; // Option type.\n    favourites: boolean; // Whether it contains favourites conversations.\n    count: number; // Number of conversations.\n    unread?: number; // Number of unread conversations.\n    expanded?: boolean; // Whether the option is currently expanded.\n    loading?: boolean; // Whether the option is being loaded.\n    canLoadMore?: boolean; // Whether it can load more data.\n    loadMoreError?: boolean; // Whether there was an error loading more conversations.\n    conversations: AddonMessagesConversationForList[]; // List of conversations.\n};\n\n/**\n * Formatted conversation with some calculated data for the list.\n */\nexport type AddonMessagesConversationForList = AddonMessagesConversationFormatted & {\n    lastmessagepending?: boolean; // Calculated in the app. Whether last message is pending to be sent.\n};\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>{{ 'addon.messages.messages' | translate }}</h1>\n        </ion-title>\n        <ion-buttons slot=\"end\">\n            <ion-button fill=\"clear\" (click)=\"gotoSearch()\" [attr.aria-label]=\"'addon.messages.searchcombined' | translate\">\n                <ion-icon name=\"fas-magnifying-glass\" slot=\"icon-only\" aria-hidden=\"true\" />\n            </ion-button>\n            <ion-button (click)=\"gotoSettings()\" [attr.aria-label]=\"'addon.messages.messagepreferences' | translate\">\n                <ion-icon name=\"fas-gear\" slot=\"icon-only\" aria-hidden=\"true\" />\n            </ion-button>\n            <!-- Add an empty context menu so split view pages can add items, otherwise the menu disappears in some cases. -->\n            <core-context-menu />\n            <core-user-menu-button />\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <core-split-view>\n        <ion-refresher slot=\"fixed\" [disabled]=\"!loaded || !currentListEl\" (ionRefresh)=\"refreshData($event.target)\">\n            <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n        </ion-refresher>\n\n        <core-loading [hideUntil]=\"loaded\" [message]=\"loadingMessage\">\n            <ion-list>\n                <ion-item class=\"ion-text-wrap addon-message-discussion\" (click)=\"gotoContacts()\" [detail]=\"true\" button>\n                    <ion-icon name=\"fas-address-book\" slot=\"start\" aria-hidden=\"true\" />\n                    <ion-label>\n                        <h2>{{ 'addon.messages.contacts' | translate }}</h2>\n                    </ion-label>\n                    <ion-badge *ngIf=\"contactRequestsCount > 0\" slot=\"end\" aria-hidden=\"true\">{{contactRequestsCount}}</ion-badge>\n                    <span *ngIf=\"contactRequestsCount > 0\" class=\"sr-only\">\n                        {{ 'addon.messages.pendingcontactrequests' | translate:{$a: contactRequestsCount} }}\n                    </span>\n                </ion-item>\n                <!-- Favourite conversations. -->\n                <ion-item button class=\"ion-text-wrap divider\" (click)=\"toggle(favourites)\"\n                    [attr.aria-label]=\"(favourites.expanded ? 'core.collapse' : 'core.expand') | translate\"\n                    [attr.aria-expanded]=\"favourites.expanded\" aria-controls=\"addon-messages-groupconversations-favourite\" role=\"heading\"\n                    [detail]=\"false\">\n                    <ion-icon name=\"fas-chevron-right\" flip-rtl slot=\"start\" aria-hidden=\"true\" class=\"expandable-status-icon\"\n                        [class.expandable-status-icon-expanded]=\"favourites.expanded\" />\n                    <ion-label>\n                        <h2>{{ 'core.favourites' | translate }} ({{ favourites.count }})</h2>\n                    </ion-label>\n                    <ion-badge slot=\"end\" *ngIf=\"favourites.unread\" aria-hidden=\"true\">{{ favourites.unread }}</ion-badge>\n                    <span *ngIf=\"favourites.unread\" class=\"sr-only\">\n                        {{ 'addon.messages.unreadconversations' | translate:{$a: favourites.unread} }}\n                    </span>\n                </ion-item>\n                <div [hidden]=\"!favourites.conversations || !favourites.expanded || favourites.loading\" #favlist\n                    id=\"addon-messages-groupconversations-favourite\">\n                    <ng-container *ngTemplateOutlet=\"conversationsTemplate; context: {conversations: favourites.conversations}\" />\n                    <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\n                    <core-infinite-loading [enabled]=\"favourites.canLoadMore\" (action)=\"loadMoreConversations(favourites, $event)\"\n                        [error]=\"favourites.loadMoreError\" />\n                    <ion-item class=\"ion-text-wrap\" *ngIf=\"favourites.conversations && favourites.conversations.length === 0\">\n                        <ion-label>\n                            <p>{{ 'addon.messages.nofavourites' | translate }}</p>\n                        </ion-label>\n                    </ion-item>\n                </div>\n                <ion-item class=\"ion-text-center\" *ngIf=\"favourites.loading\">\n                    <ion-label>\n                        <ion-spinner [attr.aria-label]=\"'core.loading' | translate\" />\n                    </ion-label>\n                </ion-item>\n\n                <!-- Group conversations. -->\n                <ion-item button class=\"divider ion-text-wrap\" (click)=\"toggle(group)\"\n                    [attr.aria-label]=\"(group.expanded ? 'core.collapse' : 'core.expand') | translate\" [attr.aria-expanded]=\"group.expanded\"\n                    aria-controls=\"addon-messages-groupconversations-group\" role=\"heading\" [detail]=\"false\">\n                    <ion-icon name=\"fas-chevron-right\" flip-rtl slot=\"start\" aria-hidden=\"true\" class=\"expandable-status-icon\"\n                        [class.expandable-status-icon-expanded]=\"group.expanded\" />\n                    <ion-label>\n                        <h2>{{ 'addon.messages.groupconversations' | translate }} ({{ group.count }})</h2>\n                    </ion-label>\n                    <ion-badge slot=\"end\" *ngIf=\"group.unread\" aria-hidden=\"true\">{{ group.unread }}</ion-badge>\n                    <span *ngIf=\"group.unread\" class=\"sr-only\">\n                        {{ 'addon.messages.unreadconversations' | translate:{$a: group.unread} }}\n                    </span>\n                </ion-item>\n                <div [hidden]=\"!group.conversations || !group.expanded || group.loading\" #grouplist\n                    id=\"addon-messages-groupconversations-group\">\n                    <ng-container *ngTemplateOutlet=\"conversationsTemplate; context: {conversations: group.conversations}\" />\n                    <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\n                    <core-infinite-loading [enabled]=\"group.canLoadMore\" (action)=\"loadMoreConversations(group, $event)\"\n                        [error]=\"group.loadMoreError\" />\n                    <ion-item class=\"ion-text-wrap\" *ngIf=\"group.conversations && group.conversations.length === 0\">\n                        <ion-label>\n                            <p>{{ 'addon.messages.nogroupconversations' | translate }}</p>\n                        </ion-label>\n                    </ion-item>\n                </div>\n                <ion-item class=\"ion-text-center\" *ngIf=\"group.loading\">\n                    <ion-label>\n                        <ion-spinner [attr.aria-label]=\"'core.loading' | translate\" />\n                    </ion-label>\n                </ion-item>\n\n                <ion-item button class=\"divider ion-text-wrap\" (click)=\"toggle(individual)\"\n                    [attr.aria-label]=\"(individual.expanded ? 'core.collapse' : 'core.expand') | translate\"\n                    [attr.aria-expanded]=\"individual.expanded\" aria-controls=\"addon-messages-groupconversations-individual\" role=\"heading\"\n                    [detail]=\"false\">\n                    <ion-icon name=\"fas-chevron-right\" flip-rtl slot=\"start\" aria-hidden=\"true\" class=\"expandable-status-icon\"\n                        [class.expandable-status-icon-expanded]=\"individual.expanded\" />\n                    <ion-label>\n                        <h2>{{ 'addon.messages.individualconversations' | translate }} ({{ individual.count }})</h2>\n                    </ion-label>\n                    <ion-badge slot=\"end\" *ngIf=\"individual.unread\" aria-hidden=\"true\">{{ individual.unread }}</ion-badge>\n                    <span *ngIf=\"individual.unread\" class=\"sr-only\">\n                        {{ 'addon.messages.unreadconversations' | translate:{$a: individual.unread} }}\n                    </span>\n                </ion-item>\n                <div [hidden]=\"!individual.conversations || !individual.expanded || individual.loading\" #indlist\n                    id=\"addon-messages-groupconversations-individual\">\n                    <ng-container *ngTemplateOutlet=\"conversationsTemplate; context: {conversations: individual.conversations}\" />\n                    <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\n                    <core-infinite-loading [enabled]=\"individual.canLoadMore\" (action)=\"loadMoreConversations(individual, $event)\"\n                        [error]=\"individual.loadMoreError\" />\n                    <ion-item class=\"ion-text-wrap\" *ngIf=\"individual.conversations && individual.conversations.length === 0\">\n                        <ion-label>\n                            <p>{{ 'addon.messages.noindividualconversations' | translate }}</p>\n                        </ion-label>\n                    </ion-item>\n                </div>\n                <ion-item class=\"ion-text-center\" *ngIf=\"individual.loading\">\n                    <ion-label>\n                        <ion-spinner [attr.aria-label]=\"'core.loading' | translate\" />\n                    </ion-label>\n                </ion-item>\n\n            </ion-list>\n        </core-loading>\n    </core-split-view>\n</ion-content>\n\n<!-- Template to render a list of conversations. -->\n<ng-template #conversationsTemplate let-conversations=\"conversations\">\n    <ion-item class=\"ion-text-wrap addon-message-discussion\" *ngFor=\"let conversation of conversations\" button [detail]=\"false\"\n        [attr.aria-current]=\"((conversation.id && conversation.id === selectedConversationId) ||\n            (conversation.userid && conversation.userid === selectedUserId)) ? 'page': 'false'\"\n        (click)=\"gotoConversation(conversation.id, conversation.userid)\"\n        id=\"addon-message-conversation-{{ conversation.id ? conversation.id : 'user-' + conversation.userid }}\"\n        [attr.aria-label]=\"conversation.name\">\n        <!-- Group conversation image. -->\n        <ion-avatar slot=\"start\" *ngIf=\"conversation.type === typeGroup\">\n            <img [src]=\"conversation.imageurl\" [alt]=\"conversation.name\" core-external-content\n                onError=\"this.src='assets/img/group-avatar.svg'\">\n        </ion-avatar>\n\n        <!-- Avatar for individual conversations. -->\n        <core-user-avatar *ngIf=\"conversation.type !== typeGroup\" core-user-avatar [user]=\"conversation.otherUser\" [linkProfile]=\"false\"\n            [checkOnline]=\"conversation.showonlinestatus\" slot=\"start\" />\n\n        <ion-label>\n            <div class=\"flex-row ion-justify-content-between\">\n                <p class=\"item-heading\">\n                    <core-format-text [text]=\"conversation.name\" contextLevel=\"system\" [contextInstanceId]=\"0\" />\n                    <ion-icon name=\"fas-user-slash\" *ngIf=\"conversation.isblocked\" [title]=\"'addon.messages.contactblocked' | translate\" />\n                    <ion-icon *ngIf=\"conversation.ismuted\" name=\"fas-volume-xmark\"\n                        [title]=\"'addon.messages.mutedconversation' | translate\" />\n                </p>\n                <ion-note *ngIf=\"conversation.lastmessagedate > 0 || conversation.unreadcount\">\n                    <span *ngIf=\"conversation.lastmessagedate > 0\" class=\"addon-message-last-message-date\">\n                        {{conversation.lastmessagedate | coreDateDayOrTime}}\n                    </span>\n                    <ion-badge *ngIf=\"conversation.unreadcount > 0\" aria-label=\"true\">{{ conversation.unreadcount }}</ion-badge>\n                    <span *ngIf=\"conversation.unreadcount > 0\" class=\"sr-only\">\n                        {{ 'addon.messages.unreadmessages' | translate:{$a: conversation.unreadcount} }}\n                    </span>\n                </ion-note>\n            </div>\n            <p *ngIf=\"conversation.subname\">\n                <core-format-text [text]=\"conversation.subname\" contextLevel=\"system\" [contextInstanceId]=\"0\" />\n            </p>\n            <p *ngIf=\"conversation.lastmessage !== undefined\" class=\"addon-message-last-message\">\n                <span *ngIf=\"conversation.sentfromcurrentuser\" class=\"addon-message-last-message-user\">\n                    {{ 'addon.messages.you' | translate }}\n                </span>\n                <span *ngIf=\"!conversation.sentfromcurrentuser && conversation.type === typeGroup && conversation.members[0]\"\n                    class=\"addon-message-last-message-user\">{{ conversation.members[0].fullname + ':' }}</span>\n                <core-format-text clean=\"true\" singleLine=\"true\" [text]=\"conversation.lastmessage\" class=\"addon-message-last-message-text\"\n                    contextLevel=\"system\" [contextInstanceId]=\"0\" />\n            </p>\n        </ion-label>\n    </ion-item>\n</ng-template>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}