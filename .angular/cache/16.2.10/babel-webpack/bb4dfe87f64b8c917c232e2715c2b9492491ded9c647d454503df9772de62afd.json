{"ast":null,"code":"var _class;\nimport { CoreDelegate } from '@classes/delegate';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Delegate to register workshop assessment strategy handlers.\n * You can use this service to register your own assessment strategy handlers to be used in a workshop.\n */\nexport class AddonWorkshopAssessmentStrategyDelegateService extends CoreDelegate {\n  constructor() {\n    super('AddonWorkshopAssessmentStrategyDelegate', true);\n    this.handlerNameProperty = 'strategyName';\n  }\n  /**\n   * Check if an assessment strategy plugin is supported.\n   *\n   * @param workshopStrategy Assessment strategy name.\n   * @returns True if supported, false otherwise.\n   */\n  isPluginSupported(workshopStrategy) {\n    return this.hasHandler(workshopStrategy, true);\n  }\n  /**\n   * Get the directive to use for a certain assessment strategy plugin.\n   *\n   * @param workshopStrategy Assessment strategy name.\n   * @returns The component, undefined if not found.\n   */\n  getComponentForPlugin(workshopStrategy) {\n    return this.executeFunctionOnEnabled(workshopStrategy, 'getComponent');\n  }\n  /**\n   * Prepare original values to be shown and compared depending on the strategy selected.\n   *\n   * @param workshopStrategy Workshop strategy.\n   * @param form Original data of the form.\n   * @param workshopId Workshop ID.\n   * @returns Resolved with original values sorted.\n   */\n  getOriginalValues(workshopStrategy, form, workshopId) {\n    return Promise.resolve(this.executeFunctionOnEnabled(workshopStrategy, 'getOriginalValues', [form, workshopId]) || []);\n  }\n  /**\n   * Check if the assessment data has changed for a certain submission and workshop for a this strategy plugin.\n   *\n   * @param workshopStrategy Workshop strategy.\n   * @param originalValues Original values of the form.\n   * @param currentValues Current values of the form.\n   * @returns True if data has changed, false otherwise.\n   */\n  hasDataChanged(workshopStrategy, originalValues, currentValues) {\n    return this.executeFunctionOnEnabled(workshopStrategy, 'hasDataChanged', [originalValues, currentValues]) || false;\n  }\n  /**\n   * Prepare assessment data to be sent to the server depending on the strategy selected.\n   *\n   * @param workshopStrategy Workshop strategy to follow.\n   * @param currentValues Current values of the form.\n   * @param form Assessment form data.\n   * @returns Promise resolved with the data to be sent. Or rejected with the input errors object.\n   */\n  prepareAssessmentData(workshopStrategy, currentValues, form) {\n    return Promise.resolve(this.executeFunctionOnEnabled(workshopStrategy, 'prepareAssessmentData', [currentValues, form]));\n  }\n}\n_class = AddonWorkshopAssessmentStrategyDelegateService;\n_class.ɵfac = function AddonWorkshopAssessmentStrategyDelegateService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonWorkshopAssessmentStrategyDelegate = makeSingleton(AddonWorkshopAssessmentStrategyDelegateService);","map":{"version":3,"names":["CoreDelegate","makeSingleton","AddonWorkshopAssessmentStrategyDelegateService","constructor","handlerNameProperty","isPluginSupported","workshopStrategy","hasHandler","getComponentForPlugin","executeFunctionOnEnabled","getOriginalValues","form","workshopId","Promise","resolve","hasDataChanged","originalValues","currentValues","prepareAssessmentData","factory","ɵfac","providedIn","AddonWorkshopAssessmentStrategyDelegate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/workshop/services/assessment-strategy-delegate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\nimport { CoreDelegateHandler, CoreDelegate } from '@classes/delegate';\nimport { makeSingleton } from '@singletons';\nimport { CoreFormFields } from '@singletons/form';\nimport { AddonModWorkshopGetAssessmentFormDefinitionData, AddonModWorkshopGetAssessmentFormFieldsParsedData } from './workshop';\n\n/**\n * Interface that all assessment strategy handlers must implement.\n */\nexport interface AddonWorkshopAssessmentStrategyHandler extends CoreDelegateHandler {\n    /**\n     * The name of the assessment strategy. E.g. 'accumulative'.\n     */\n    strategyName: string;\n\n    /**\n     * Return the Component to render the plugin.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     *\n     * @param injector Injector.\n     * @returns The component (or promise resolved with component) to use, undefined if not found.\n     */\n    getComponent?(): Promise<Type<unknown>> | Type<unknown>;\n\n    /**\n     * Prepare original values to be shown and compared.\n     *\n     * @param form Original data of the form.\n     * @param workshopId WorkShop Id\n     * @returns Promise resolved with original values sorted.\n     */\n    getOriginalValues?(\n        form: AddonModWorkshopGetAssessmentFormDefinitionData,\n        workshopId: number,\n    ): Promise<AddonModWorkshopGetAssessmentFormFieldsParsedData[]>;\n\n    /**\n     * Check if the assessment data has changed for a certain submission and workshop for a this strategy plugin.\n     *\n     * @param originalValues Original values of the form.\n     * @param currentValues Current values of the form.\n     * @returns True if data has changed, false otherwise.\n     */\n    hasDataChanged?(\n        originalValues: AddonModWorkshopGetAssessmentFormFieldsParsedData[],\n        currentValues: AddonModWorkshopGetAssessmentFormFieldsParsedData[],\n    ): Promise<boolean> | boolean;\n\n    /**\n     * Prepare assessment data to be sent to the server depending on the strategy selected.\n     *\n     * @param currentValues Current values of the form.\n     * @param form Assessment form data.\n     * @returns Promise resolved with the data to be sent. Or rejected with the input errors object.\n     */\n    prepareAssessmentData(\n        currentValues: AddonModWorkshopGetAssessmentFormFieldsParsedData[],\n        form: AddonModWorkshopGetAssessmentFormDefinitionData,\n    ): Promise<CoreFormFields<unknown>>;\n}\n\n/**\n * Delegate to register workshop assessment strategy handlers.\n * You can use this service to register your own assessment strategy handlers to be used in a workshop.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonWorkshopAssessmentStrategyDelegateService extends CoreDelegate<AddonWorkshopAssessmentStrategyHandler> {\n\n    protected handlerNameProperty = 'strategyName';\n\n    constructor() {\n        super('AddonWorkshopAssessmentStrategyDelegate', true);\n    }\n\n    /**\n     * Check if an assessment strategy plugin is supported.\n     *\n     * @param workshopStrategy Assessment strategy name.\n     * @returns True if supported, false otherwise.\n     */\n    isPluginSupported(workshopStrategy: string): boolean {\n        return this.hasHandler(workshopStrategy, true);\n    }\n\n    /**\n     * Get the directive to use for a certain assessment strategy plugin.\n     *\n     * @param workshopStrategy Assessment strategy name.\n     * @returns The component, undefined if not found.\n     */\n    getComponentForPlugin(workshopStrategy: string): Promise<Type<unknown>> | Type<unknown> | undefined {\n        return this.executeFunctionOnEnabled(workshopStrategy, 'getComponent');\n    }\n\n    /**\n     * Prepare original values to be shown and compared depending on the strategy selected.\n     *\n     * @param workshopStrategy Workshop strategy.\n     * @param form Original data of the form.\n     * @param workshopId Workshop ID.\n     * @returns Resolved with original values sorted.\n     */\n    getOriginalValues(\n        workshopStrategy: string,\n        form: AddonModWorkshopGetAssessmentFormDefinitionData,\n        workshopId: number,\n    ): Promise<AddonModWorkshopGetAssessmentFormFieldsParsedData[]> {\n        return Promise.resolve(this.executeFunctionOnEnabled(workshopStrategy, 'getOriginalValues', [form, workshopId]) || []);\n    }\n\n    /**\n     * Check if the assessment data has changed for a certain submission and workshop for a this strategy plugin.\n     *\n     * @param workshopStrategy Workshop strategy.\n     * @param originalValues Original values of the form.\n     * @param currentValues Current values of the form.\n     * @returns True if data has changed, false otherwise.\n     */\n    hasDataChanged(\n        workshopStrategy: string,\n        originalValues: AddonModWorkshopGetAssessmentFormFieldsParsedData[],\n        currentValues: AddonModWorkshopGetAssessmentFormFieldsParsedData[],\n    ): boolean {\n        return this.executeFunctionOnEnabled(workshopStrategy, 'hasDataChanged', [originalValues, currentValues]) || false;\n    }\n\n    /**\n     * Prepare assessment data to be sent to the server depending on the strategy selected.\n     *\n     * @param workshopStrategy Workshop strategy to follow.\n     * @param currentValues Current values of the form.\n     * @param form Assessment form data.\n     * @returns Promise resolved with the data to be sent. Or rejected with the input errors object.\n     */\n    prepareAssessmentData(\n        workshopStrategy: string,\n        currentValues: AddonModWorkshopGetAssessmentFormFieldsParsedData[],\n        form: AddonModWorkshopGetAssessmentFormDefinitionData,\n    ): Promise<CoreFormFields<unknown> | undefined> {\n        return Promise.resolve(this.executeFunctionOnEnabled(workshopStrategy, 'prepareAssessmentData', [currentValues, form]));\n    }\n\n}\nexport const AddonWorkshopAssessmentStrategyDelegate = makeSingleton(AddonWorkshopAssessmentStrategyDelegateService);\n"],"mappings":";AAeA,SAA8BA,YAAY,QAAQ,mBAAmB;AACrE,SAASC,aAAa,QAAQ,aAAa;;AA2D3C;;;;AAKA,OAAM,MAAOC,8CAA+C,SAAQF,YAAoD;EAIpHG,YAAA;IACI,KAAK,CAAC,yCAAyC,EAAE,IAAI,CAAC;IAHhD,KAAAC,mBAAmB,GAAG,cAAc;EAI9C;EAEA;;;;;;EAMAC,iBAAiBA,CAACC,gBAAwB;IACtC,OAAO,IAAI,CAACC,UAAU,CAACD,gBAAgB,EAAE,IAAI,CAAC;EAClD;EAEA;;;;;;EAMAE,qBAAqBA,CAACF,gBAAwB;IAC1C,OAAO,IAAI,CAACG,wBAAwB,CAACH,gBAAgB,EAAE,cAAc,CAAC;EAC1E;EAEA;;;;;;;;EAQAI,iBAAiBA,CACbJ,gBAAwB,EACxBK,IAAqD,EACrDC,UAAkB;IAElB,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACL,wBAAwB,CAACH,gBAAgB,EAAE,mBAAmB,EAAE,CAACK,IAAI,EAAEC,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC;EAC1H;EAEA;;;;;;;;EAQAG,cAAcA,CACVT,gBAAwB,EACxBU,cAAmE,EACnEC,aAAkE;IAElE,OAAO,IAAI,CAACR,wBAAwB,CAACH,gBAAgB,EAAE,gBAAgB,EAAE,CAACU,cAAc,EAAEC,aAAa,CAAC,CAAC,IAAI,KAAK;EACtH;EAEA;;;;;;;;EAQAC,qBAAqBA,CACjBZ,gBAAwB,EACxBW,aAAkE,EAClEN,IAAqD;IAErD,OAAOE,OAAO,CAACC,OAAO,CAAC,IAAI,CAACL,wBAAwB,CAACH,gBAAgB,EAAE,uBAAuB,EAAE,CAACW,aAAa,EAAEN,IAAI,CAAC,CAAC,CAAC;EAC3H;;SA1EST,8CAA+C;;mBAA/CA,MAA8C;AAAA;;SAA9CA,MAA8C;EAAAiB,OAAA,EAA9CjB,MAA8C,CAAAkB,IAAA;EAAAC,UAAA,EADjC;AAAM;AA8EhC,OAAO,MAAMC,uCAAuC,GAAGrB,aAAa,CAACC,8CAA8C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}