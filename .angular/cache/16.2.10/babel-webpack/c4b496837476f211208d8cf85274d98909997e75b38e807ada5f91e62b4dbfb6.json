{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreFile } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { makeSingleton } from '@singletons';\nimport { AddonModForumProvider } from './forum';\nimport { DISCUSSIONS_TABLE, REPLIES_TABLE } from './database/offline';\nimport { CorePath } from '@singletons/path';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to handle offline forum.\n */\nexport class AddonModForumOfflineProvider {\n  /**\n   * Delete a forum offline discussion.\n   *\n   * @param forumId Forum ID.\n   * @param timeCreated The time the discussion was created.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the discussion belongs to. If not defined, current user in site.\n   * @returns Promise resolved if stored, rejected if failure.\n   */\n  deleteNewDiscussion(forumId, timeCreated, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        forumid: forumId,\n        userid: userId || site.getUserId(),\n        timecreated: timeCreated\n      };\n      yield site.getDb().deleteRecords(DISCUSSIONS_TABLE, conditions);\n    })();\n  }\n  /**\n   * Get a forum offline discussion.\n   *\n   * @param forumId Forum ID.\n   * @param timeCreated The time the discussion was created.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the discussion belongs to. If not defined, current user in site.\n   * @returns Promise resolved if stored, rejected if failure.\n   */\n  getNewDiscussion(forumId, timeCreated, siteId, userId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        forumid: forumId,\n        userid: userId || site.getUserId(),\n        timecreated: timeCreated\n      };\n      const record = yield site.getDb().getRecord(DISCUSSIONS_TABLE, conditions);\n      return _this.parseRecordOptions(record);\n    })();\n  }\n  /**\n   * Get all offline new discussions.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with discussions.\n   */\n  getAllNewDiscussions(siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const records = yield site.getDb().getRecords(DISCUSSIONS_TABLE);\n      return _this2.parseRecordsOptions(records);\n    })();\n  }\n  /**\n   * Check if there are offline new discussions to send.\n   *\n   * @param forumId Forum ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the discussions belong to. If not defined, current user in site.\n   * @returns Promise resolved with boolean: true if has offline answers, false otherwise.\n   */\n  hasNewDiscussions(forumId, siteId, userId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const discussions = yield _this3.getNewDiscussions(forumId, siteId, userId);\n        return !!discussions.length;\n      } catch (error) {\n        // No offline data found, return false.\n        return false;\n      }\n    })();\n  }\n  /**\n   * Get new discussions to be synced.\n   *\n   * @param forumId Forum ID to get.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the discussions belong to. If not defined, current user in site.\n   * @returns Promise resolved with the object to be synced.\n   */\n  getNewDiscussions(forumId, siteId, userId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        forumid: forumId,\n        userid: userId || site.getUserId()\n      };\n      const records = yield site.getDb().getRecords(DISCUSSIONS_TABLE, conditions);\n      return _this4.parseRecordsOptions(records);\n    })();\n  }\n  /**\n   * Offline version for adding a new discussion to a forum.\n   *\n   * @param forumId Forum ID.\n   * @param name Forum name.\n   * @param courseId Course ID the forum belongs to.\n   * @param subject New discussion's subject.\n   * @param message New discussion's message.\n   * @param options Options (subscribe, pin, ...).\n   * @param groupId Group this discussion belongs to.\n   * @param timeCreated The time the discussion was created. If not defined, current time.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the discussion belong to. If not defined, current user in site.\n   * @returns Promise resolved when new discussion is successfully saved.\n   */\n  addNewDiscussion(forumId, name, courseId, subject, message, options, groupId, timeCreated, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const data = {\n        forumid: forumId,\n        name: name,\n        courseid: courseId,\n        subject: subject,\n        message: message,\n        options: JSON.stringify(options || {}),\n        groupid: groupId || AddonModForumProvider.ALL_PARTICIPANTS,\n        userid: userId || site.getUserId(),\n        timecreated: timeCreated || Date.now()\n      };\n      yield site.getDb().insertRecord(DISCUSSIONS_TABLE, data);\n    })();\n  }\n  /**\n   * Delete forum offline replies.\n   *\n   * @param postId ID of the post being replied.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the reply belongs to. If not defined, current user in site.\n   * @returns Promise resolved if stored, rejected if failure.\n   */\n  deleteReply(postId, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        postid: postId,\n        userid: userId || site.getUserId()\n      };\n      yield site.getDb().deleteRecords(REPLIES_TABLE, conditions);\n    })();\n  }\n  /**\n   * Get all offline replies.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with replies.\n   */\n  getAllReplies(siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const records = yield site.getDb().getRecords(REPLIES_TABLE);\n      return _this5.parseRecordsOptions(records);\n    })();\n  }\n  /**\n   * Check if there is an offline reply for a forum to be synced.\n   *\n   * @param forumId ID of the forum being replied.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the replies belong to. If not defined, current user in site.\n   * @returns Promise resolved with boolean: true if has offline answers, false otherwise.\n   */\n  hasForumReplies(forumId, siteId, userId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const replies = yield _this6.getForumReplies(forumId, siteId, userId);\n        return !!replies.length;\n      } catch (error) {\n        // No offline data found, return false.\n        return false;\n      }\n    })();\n  }\n  /**\n   * Get the replies of a forum to be synced.\n   *\n   * @param forumId ID of the forum being replied.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the replies belong to. If not defined, current user in site.\n   * @returns Promise resolved with replies.\n   */\n  getForumReplies(forumId, siteId, userId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        forumid: forumId,\n        userid: userId || site.getUserId()\n      };\n      const records = yield site.getDb().getRecords(REPLIES_TABLE, conditions);\n      return _this7.parseRecordsOptions(records);\n    })();\n  }\n  /**\n   * Check if there is an offline reply to be synced.\n   *\n   * @param discussionId ID of the discussion the user is replying to.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the replies belong to. If not defined, current user in site.\n   * @returns Promise resolved with boolean: true if has offline answers, false otherwise.\n   */\n  hasDiscussionReplies(discussionId, siteId, userId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const replies = yield _this8.getDiscussionReplies(discussionId, siteId, userId);\n        return !!replies.length;\n      } catch (error) {\n        // No offline data found, return false.\n        return false;\n      }\n    })();\n  }\n  /**\n   * Get the replies of a discussion to be synced.\n   *\n   * @param discussionId ID of the discussion the user is replying to.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the replies belong to. If not defined, current user in site.\n   * @returns Promise resolved with discussions.\n   */\n  getDiscussionReplies(discussionId, siteId, userId) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        discussionid: discussionId,\n        userid: userId || site.getUserId()\n      };\n      const records = yield site.getDb().getRecords(REPLIES_TABLE, conditions);\n      return _this9.parseRecordsOptions(records);\n    })();\n  }\n  /**\n   * Offline version for replying to a certain post.\n   *\n   * @param postId ID of the post being replied.\n   * @param discussionId ID of the discussion the user is replying to.\n   * @param forumId ID of the forum the user is replying to.\n   * @param name Forum name.\n   * @param courseId Course ID the forum belongs to.\n   * @param subject New post's subject.\n   * @param message New post's message.\n   * @param options Options (subscribe, attachments, ...).\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the post belong to. If not defined, current user in site.\n   * @returns Promise resolved when the post is created.\n   */\n  replyPost(postId, discussionId, forumId, name, courseId, subject, message, options, siteId, userId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const data = {\n        postid: postId,\n        discussionid: discussionId,\n        forumid: forumId,\n        name: name,\n        courseid: courseId,\n        subject: subject,\n        message: message,\n        options: JSON.stringify(options || {}),\n        userid: userId || site.getUserId(),\n        timecreated: Date.now()\n      };\n      yield site.getDb().insertRecord(REPLIES_TABLE, data);\n    })();\n  }\n  /**\n   * Get the path to the folder where to store files for offline attachments in a forum.\n   *\n   * @param forumId Forum ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the path.\n   */\n  getForumFolder(forumId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const siteFolderPath = CoreFile.getSiteFolder(site.getId());\n      return CorePath.concatenatePaths(siteFolderPath, 'offlineforum/' + forumId);\n    })();\n  }\n  /**\n   * Get the path to the folder where to store files for a new offline discussion.\n   *\n   * @param forumId Forum ID.\n   * @param timeCreated The time the discussion was created.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the path.\n   */\n  getNewDiscussionFolder(forumId, timeCreated, siteId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const folderPath = yield _this10.getForumFolder(forumId, siteId);\n      return CorePath.concatenatePaths(folderPath, 'newdisc_' + timeCreated);\n    })();\n  }\n  /**\n   * Get the path to the folder where to store files for a new offline reply.\n   *\n   * @param forumId Forum ID.\n   * @param postId ID of the post being replied.\n   * @param siteId Site ID. If not defined, current site.\n   * @param userId User the replies belong to. If not defined, current user in site.\n   * @returns Promise resolved with the path.\n   */\n  getReplyFolder(forumId, postId, siteId, userId) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const folderPath = yield _this11.getForumFolder(forumId, siteId);\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      return CorePath.concatenatePaths(folderPath, 'reply_' + postId + '_' + userId);\n    })();\n  }\n  /**\n   * Parse \"options\" column of fetched record.\n   *\n   * @param records List of records.\n   * @returns List of records with options parsed.\n   */\n  parseRecordsOptions(records) {\n    return records.map(record => this.parseRecordOptions(record));\n  }\n  /**\n   * Parse \"options\" column of fetched record.\n   *\n   * @param record Record.\n   * @returns Record with options parsed.\n   */\n  parseRecordOptions(record) {\n    record.options = CoreTextUtils.parseJSON(record.options);\n    return record;\n  }\n}\n_class = AddonModForumOfflineProvider;\n_class.ɵfac = function AddonModForumOfflineProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModForumOffline = makeSingleton(AddonModForumOfflineProvider);","map":{"version":3,"names":["CoreFile","CoreSites","CoreTextUtils","makeSingleton","AddonModForumProvider","DISCUSSIONS_TABLE","REPLIES_TABLE","CorePath","AddonModForumOfflineProvider","deleteNewDiscussion","forumId","timeCreated","siteId","userId","_asyncToGenerator","site","getSite","conditions","forumid","userid","getUserId","timecreated","getDb","deleteRecords","getNewDiscussion","_this","record","getRecord","parseRecordOptions","getAllNewDiscussions","_this2","records","getRecords","parseRecordsOptions","hasNewDiscussions","_this3","discussions","getNewDiscussions","length","error","_this4","addNewDiscussion","name","courseId","subject","message","options","groupId","data","courseid","JSON","stringify","groupid","ALL_PARTICIPANTS","Date","now","insertRecord","deleteReply","postId","postid","getAllReplies","_this5","hasForumReplies","_this6","replies","getForumReplies","_this7","hasDiscussionReplies","discussionId","_this8","getDiscussionReplies","_this9","discussionid","replyPost","getForumFolder","siteFolderPath","getSiteFolder","getId","concatenatePaths","getNewDiscussionFolder","_this10","folderPath","getReplyFolder","_this11","map","parseJSON","factory","ɵfac","providedIn","AddonModForumOffline"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/forum/services/forum-offline.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { CoreFile } from '@services/file';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { makeSingleton } from '@singletons';\nimport { AddonModForumProvider } from './forum';\nimport {\n    AddonModForumOfflineDiscussionDBRecord,\n    AddonModForumOfflineReplyDBRecord,\n    DISCUSSIONS_TABLE,\n    REPLIES_TABLE,\n} from './database/offline';\nimport { CorePath } from '@singletons/path';\n\n/**\n * Service to handle offline forum.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModForumOfflineProvider {\n\n    /**\n     * Delete a forum offline discussion.\n     *\n     * @param forumId Forum ID.\n     * @param timeCreated The time the discussion was created.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the discussion belongs to. If not defined, current user in site.\n     * @returns Promise resolved if stored, rejected if failure.\n     */\n    async deleteNewDiscussion(forumId: number, timeCreated: number, siteId?: string, userId?: number): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const conditions = {\n            forumid: forumId,\n            userid: userId || site.getUserId(),\n            timecreated: timeCreated,\n        };\n\n        await site.getDb().deleteRecords(DISCUSSIONS_TABLE, conditions);\n    }\n\n    /**\n     * Get a forum offline discussion.\n     *\n     * @param forumId Forum ID.\n     * @param timeCreated The time the discussion was created.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the discussion belongs to. If not defined, current user in site.\n     * @returns Promise resolved if stored, rejected if failure.\n     */\n    async getNewDiscussion(\n        forumId: number,\n        timeCreated: number,\n        siteId?: string,\n        userId?: number,\n    ): Promise<AddonModForumOfflineDiscussion> {\n        const site = await CoreSites.getSite(siteId);\n        const conditions = {\n            forumid: forumId,\n            userid: userId || site.getUserId(),\n            timecreated: timeCreated,\n        };\n\n        const record = await site.getDb().getRecord<AddonModForumOfflineDiscussionDBRecord>(DISCUSSIONS_TABLE, conditions);\n\n        return this.parseRecordOptions(record);\n    }\n\n    /**\n     * Get all offline new discussions.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with discussions.\n     */\n    async getAllNewDiscussions(siteId?: string): Promise<AddonModForumOfflineDiscussion[]> {\n        const site = await CoreSites.getSite(siteId);\n        const records = await site.getDb().getRecords<AddonModForumOfflineDiscussionDBRecord>(DISCUSSIONS_TABLE);\n\n        return this.parseRecordsOptions(records);\n    }\n\n    /**\n     * Check if there are offline new discussions to send.\n     *\n     * @param forumId Forum ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the discussions belong to. If not defined, current user in site.\n     * @returns Promise resolved with boolean: true if has offline answers, false otherwise.\n     */\n    async hasNewDiscussions(forumId: number, siteId?: string, userId?: number): Promise<boolean> {\n        try {\n            const discussions = await this.getNewDiscussions(forumId, siteId, userId);\n\n            return !!discussions.length;\n        } catch (error) {\n            // No offline data found, return false.\n\n            return false;\n        }\n    }\n\n    /**\n     * Get new discussions to be synced.\n     *\n     * @param forumId Forum ID to get.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the discussions belong to. If not defined, current user in site.\n     * @returns Promise resolved with the object to be synced.\n     */\n    async getNewDiscussions(forumId: number, siteId?: string, userId?: number): Promise<AddonModForumOfflineDiscussion[]> {\n        const site = await CoreSites.getSite(siteId);\n        const conditions = {\n            forumid: forumId,\n            userid: userId || site.getUserId(),\n        };\n\n        const records = await site.getDb().getRecords<AddonModForumOfflineDiscussionDBRecord>(DISCUSSIONS_TABLE, conditions);\n\n        return this.parseRecordsOptions(records);\n    }\n\n    /**\n     * Offline version for adding a new discussion to a forum.\n     *\n     * @param forumId Forum ID.\n     * @param name Forum name.\n     * @param courseId Course ID the forum belongs to.\n     * @param subject New discussion's subject.\n     * @param message New discussion's message.\n     * @param options Options (subscribe, pin, ...).\n     * @param groupId Group this discussion belongs to.\n     * @param timeCreated The time the discussion was created. If not defined, current time.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the discussion belong to. If not defined, current user in site.\n     * @returns Promise resolved when new discussion is successfully saved.\n     */\n    async addNewDiscussion(\n        forumId: number,\n        name: string,\n        courseId: number,\n        subject: string,\n        message: string,\n        options?: AddonModForumDiscussionOptions,\n        groupId?: number,\n        timeCreated?: number,\n        siteId?: string,\n        userId?: number,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const data: AddonModForumOfflineDiscussionDBRecord = {\n            forumid: forumId,\n            name: name,\n            courseid: courseId,\n            subject: subject,\n            message: message,\n            options: JSON.stringify(options || {}),\n            groupid: groupId || AddonModForumProvider.ALL_PARTICIPANTS,\n            userid: userId || site.getUserId(),\n            timecreated: timeCreated || Date.now(),\n        };\n\n        await site.getDb().insertRecord(DISCUSSIONS_TABLE, data);\n    }\n\n    /**\n     * Delete forum offline replies.\n     *\n     * @param postId ID of the post being replied.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the reply belongs to. If not defined, current user in site.\n     * @returns Promise resolved if stored, rejected if failure.\n     */\n    async deleteReply(postId: number, siteId?: string, userId?: number): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const conditions = {\n            postid: postId,\n            userid: userId || site.getUserId(),\n        };\n\n        await site.getDb().deleteRecords(REPLIES_TABLE, conditions);\n    }\n\n    /**\n     * Get all offline replies.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with replies.\n     */\n    async getAllReplies(siteId?: string): Promise<AddonModForumOfflineReply[]> {\n        const site = await CoreSites.getSite(siteId);\n        const records = await site.getDb().getRecords<AddonModForumOfflineReplyDBRecord>(REPLIES_TABLE);\n\n        return this.parseRecordsOptions(records);\n    }\n\n    /**\n     * Check if there is an offline reply for a forum to be synced.\n     *\n     * @param forumId ID of the forum being replied.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the replies belong to. If not defined, current user in site.\n     * @returns Promise resolved with boolean: true if has offline answers, false otherwise.\n     */\n    async hasForumReplies(forumId: number, siteId?: string, userId?: number): Promise<boolean> {\n        try {\n            const replies = await this.getForumReplies(forumId, siteId, userId);\n\n            return !!replies.length;\n        } catch (error) {\n            // No offline data found, return false.\n\n            return false;\n        }\n    }\n\n    /**\n     * Get the replies of a forum to be synced.\n     *\n     * @param forumId ID of the forum being replied.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the replies belong to. If not defined, current user in site.\n     * @returns Promise resolved with replies.\n     */\n    async getForumReplies(forumId: number, siteId?: string, userId?: number): Promise<AddonModForumOfflineReply[]> {\n        const site = await CoreSites.getSite(siteId);\n        const conditions = {\n            forumid: forumId,\n            userid: userId || site.getUserId(),\n        };\n\n        const records = await site.getDb().getRecords<AddonModForumOfflineReplyDBRecord>(REPLIES_TABLE, conditions);\n\n        return this.parseRecordsOptions(records);\n    }\n\n    /**\n     * Check if there is an offline reply to be synced.\n     *\n     * @param discussionId ID of the discussion the user is replying to.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the replies belong to. If not defined, current user in site.\n     * @returns Promise resolved with boolean: true if has offline answers, false otherwise.\n     */\n    async hasDiscussionReplies(discussionId: number, siteId?: string, userId?: number): Promise<boolean> {\n        try {\n            const replies = await this.getDiscussionReplies(discussionId, siteId, userId);\n\n            return !!replies.length;\n        } catch (error) {\n            // No offline data found, return false.\n\n            return false;\n        }\n    }\n\n    /**\n     * Get the replies of a discussion to be synced.\n     *\n     * @param discussionId ID of the discussion the user is replying to.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the replies belong to. If not defined, current user in site.\n     * @returns Promise resolved with discussions.\n     */\n    async getDiscussionReplies(discussionId: number, siteId?: string, userId?: number): Promise<AddonModForumOfflineReply[]> {\n        const site = await CoreSites.getSite(siteId);\n        const conditions = {\n            discussionid: discussionId,\n            userid: userId || site.getUserId(),\n        };\n\n        const records = await site.getDb().getRecords<AddonModForumOfflineReplyDBRecord>(REPLIES_TABLE, conditions);\n\n        return this.parseRecordsOptions(records);\n    }\n\n    /**\n     * Offline version for replying to a certain post.\n     *\n     * @param postId ID of the post being replied.\n     * @param discussionId ID of the discussion the user is replying to.\n     * @param forumId ID of the forum the user is replying to.\n     * @param name Forum name.\n     * @param courseId Course ID the forum belongs to.\n     * @param subject New post's subject.\n     * @param message New post's message.\n     * @param options Options (subscribe, attachments, ...).\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the post belong to. If not defined, current user in site.\n     * @returns Promise resolved when the post is created.\n     */\n    async replyPost(\n        postId: number,\n        discussionId: number,\n        forumId: number,\n        name: string,\n        courseId: number,\n        subject: string,\n        message: string,\n        options?: AddonModForumReplyOptions,\n        siteId?: string,\n        userId?: number,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const data: AddonModForumOfflineReplyDBRecord = {\n            postid: postId,\n            discussionid: discussionId,\n            forumid: forumId,\n            name: name,\n            courseid: courseId,\n            subject: subject,\n            message: message,\n            options: JSON.stringify(options || {}),\n            userid: userId || site.getUserId(),\n            timecreated: Date.now(),\n        };\n\n        await site.getDb().insertRecord(REPLIES_TABLE, data);\n    }\n\n    /**\n     * Get the path to the folder where to store files for offline attachments in a forum.\n     *\n     * @param forumId Forum ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the path.\n     */\n    async getForumFolder(forumId: number, siteId?: string): Promise<string> {\n        const site = await CoreSites.getSite(siteId);\n        const siteFolderPath = CoreFile.getSiteFolder(site.getId());\n\n        return CorePath.concatenatePaths(siteFolderPath, 'offlineforum/' + forumId);\n    }\n\n    /**\n     * Get the path to the folder where to store files for a new offline discussion.\n     *\n     * @param forumId Forum ID.\n     * @param timeCreated The time the discussion was created.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the path.\n     */\n    async getNewDiscussionFolder(forumId: number, timeCreated: number, siteId?: string): Promise<string> {\n        const folderPath = await this.getForumFolder(forumId, siteId);\n\n        return CorePath.concatenatePaths(folderPath, 'newdisc_' + timeCreated);\n    }\n\n    /**\n     * Get the path to the folder where to store files for a new offline reply.\n     *\n     * @param forumId Forum ID.\n     * @param postId ID of the post being replied.\n     * @param siteId Site ID. If not defined, current site.\n     * @param userId User the replies belong to. If not defined, current user in site.\n     * @returns Promise resolved with the path.\n     */\n    async getReplyFolder(forumId: number, postId: number, siteId?: string, userId?: number): Promise<string> {\n        const folderPath = await this.getForumFolder(forumId, siteId);\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        return CorePath.concatenatePaths(folderPath, 'reply_' + postId + '_' + userId);\n    }\n\n    /**\n     * Parse \"options\" column of fetched record.\n     *\n     * @param records List of records.\n     * @returns List of records with options parsed.\n     */\n    protected parseRecordsOptions<\n        R extends { options: string },\n        O extends Record<string, unknown> = Record<string, unknown>\n    >(records: R[]): (Omit<R, 'options'> & { options: O })[] {\n        return records.map(record => this.parseRecordOptions(record));\n    }\n\n    /**\n     * Parse \"options\" column of fetched record.\n     *\n     * @param record Record.\n     * @returns Record with options parsed.\n     */\n    protected parseRecordOptions<\n        R extends { options: string },\n        O extends Record<string, unknown> = Record<string, unknown>\n    >(record: R): Omit<R, 'options'> & { options: O } {\n        record.options = CoreTextUtils.parseJSON(record.options);\n\n        return record as unknown as Omit<R, 'options'> & { options: O };\n    }\n\n}\n\nexport const AddonModForumOffline = makeSingleton(AddonModForumOfflineProvider);\n\nexport type AddonModForumDiscussionOptions = {\n    attachmentsid?: number | CoreFileUploaderStoreFilesResult;\n    discussionsubscribe?: boolean;\n    discussionpinned?: boolean;\n};\n\nexport type AddonModForumReplyOptions = {\n    private?: boolean;\n    attachmentsid?: number | CoreFileUploaderStoreFilesResult;\n};\n\nexport type AddonModForumOfflineDiscussion = {\n    forumid: number;\n    name: string;\n    courseid: number;\n    subject: string;\n    message: string;\n    options: AddonModForumDiscussionOptions;\n    groupid: number;\n    groupname?: string;\n    userid: number;\n    timecreated: number;\n};\nexport type AddonModForumOfflineReply = {\n    postid: number;\n    discussionid: number;\n    forumid: number;\n    name: string;\n    courseid: number;\n    subject: string;\n    message: string;\n    options: AddonModForumReplyOptions;\n    userid: number;\n    timecreated: number;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}