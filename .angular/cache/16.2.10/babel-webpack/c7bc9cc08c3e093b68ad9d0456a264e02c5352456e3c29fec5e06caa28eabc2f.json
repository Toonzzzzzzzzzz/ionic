{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { AddonMessagesProvider, AddonMessages } from '../../services/messages';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreApp } from '@services/app';\nimport { CoreEvents } from '@singletons/events';\nimport { Translate } from '@singletons';\nimport { CoreScreen } from '@services/screen';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../core/components/context-menu/context-menu\";\nimport * as i4 from \"../../../../core/components/empty-box/empty-box\";\nimport * as i5 from \"../../../../core/components/loading/loading\";\nimport * as i6 from \"../../../../core/components/split-view/split-view\";\nimport * as i7 from \"../../../../core/components/user-avatar/user-avatar\";\nimport * as i8 from \"../../../../core/directives/content\";\nimport * as i9 from \"@ionic/angular\";\nimport * as i10 from \"../../../../core/features/search/components/search-box/search-box\";\nimport * as i11 from \"@ngx-translate/core\";\nfunction AddonMessagesContacts35Page_core_empty_box_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-empty-box\", 9);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"message\", i0.ɵɵpipeBind1(1, 1, \"addon.messages.contactlistempty\"));\n  }\n}\nfunction AddonMessagesContacts35Page_core_empty_box_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-empty-box\", 9);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"message\", i0.ɵɵpipeBind1(1, 1, \"addon.messages.nousersfound\"));\n  }\n}\nfunction AddonMessagesContacts35Page_ion_list_21_ng_container_1_ng_container_9_ion_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 16);\n    i0.ɵɵlistener(\"click\", function AddonMessagesContacts35Page_ion_list_21_ng_container_1_ng_container_9_ion_item_1_Template_ion_item_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const contact_r6 = i0.ɵɵnextContext().$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r8.gotoDiscussion(contact_r6.id));\n    });\n    i0.ɵɵelement(1, \"core-user-avatar\", 17);\n    i0.ɵɵelementStart(2, \"ion-label\")(3, \"p\", 12);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const contact_r6 = i0.ɵɵnextContext().$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"detail\", true);\n    i0.ɵɵattribute(\"aria-label\", contact_r6.fullname)(\"aria-current\", contact_r6.id === ctx_r7.discussionUserId ? \"page\" : \"false\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"user\", contact_r6)(\"checkOnline\", contact_r6.showonlinestatus);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(contact_r6.fullname);\n  }\n}\nfunction AddonMessagesContacts35Page_ion_list_21_ng_container_1_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AddonMessagesContacts35Page_ion_list_21_ng_container_1_ng_container_9_ion_item_1_Template, 5, 6, \"ion-item\", 15);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const contact_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", contact_r6.profileimageurl || contact_r6.profileimageurlsmall);\n  }\n}\nfunction AddonMessagesContacts35Page_ion_list_21_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"ion-item-divider\")(2, \"ion-label\")(3, \"p\", 12);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"ion-note\", 13)(7, \"ion-badge\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(9, AddonMessagesContacts35Page_ion_list_21_ng_container_1_ng_container_9_Template, 2, 1, \"ng-container\", 14);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const contactType_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 3, \"addon.messages.type_\" + contactType_r3));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r4.contacts[contactType_r3].length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.contacts[contactType_r3]);\n  }\n}\nfunction AddonMessagesContacts35Page_ion_list_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-list\", 10);\n    i0.ɵɵtemplate(1, AddonMessagesContacts35Page_ion_list_21_ng_container_1_Template, 10, 5, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const contactType_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.contacts[contactType_r3] && (ctx_r2.contacts[contactType_r3].length > 0 || contactType_r3 === ctx_r2.searchType));\n  }\n}\n/**\n * Page that displays the list of contacts.\n */\nexport class AddonMessagesContacts35Page {\n  constructor(route) {\n    this.route = route;\n    this.noSearchTypes = ['online', 'offline', 'blocked', 'strangers'];\n    this.loaded = false;\n    this.contactTypes = ['online', 'offline', 'blocked', 'strangers'];\n    this.searchType = 'search';\n    this.loadingMessage = '';\n    this.hasContacts = false;\n    this.contacts = {\n      online: [],\n      offline: [],\n      strangers: [],\n      search: []\n    };\n    this.searchString = '';\n    this.siteId = CoreSites.getCurrentSiteId();\n    this.searchingMessages = Translate.instant('core.searching');\n    this.loadingMessages = Translate.instant('core.loading');\n    this.loadingMessage = this.loadingMessages;\n    // Refresh the list when a contact request is confirmed.\n    this.memberInfoObserver = CoreEvents.on(AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT, data => {\n      if (data.contactRequestConfirmed) {\n        this.refreshData();\n      }\n    }, CoreSites.getCurrentSiteId());\n  }\n  /**\n   * Component loaded.\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const discussionUserId = CoreNavigator.getRouteNumberParam('discussionUserId') || CoreNavigator.getRouteNumberParam('userId') || undefined;\n      if (_this.loaded && _this.discussionUserId == discussionUserId) {\n        return;\n      }\n      _this.discussionUserId = discussionUserId;\n      if (_this.discussionUserId) {\n        // There is a discussion to load, open the discussion in a new state.\n        _this.gotoDiscussion(_this.discussionUserId);\n      }\n      try {\n        yield _this.fetchData();\n        if (!_this.discussionUserId && _this.hasContacts && CoreScreen.isTablet) {\n          let contact;\n          for (const x in _this.contacts) {\n            if (_this.contacts[x].length > 0) {\n              contact = _this.contacts[x][0];\n              break;\n            }\n          }\n          if (contact) {\n            // Take first and load it.\n            _this.gotoDiscussion(contact.id);\n          }\n        }\n      } finally {\n        _this.loaded = true;\n      }\n    })();\n  }\n  /**\n   * Refresh the data.\n   *\n   * @param refresher Refresher.\n   * @returns Promise resolved when done.\n   */\n  refreshData(refresher) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (_this2.searchString) {\n          // User has searched, update the search.\n          yield _this2.performSearch(_this2.searchString);\n        } else {\n          // Update contacts.\n          yield AddonMessages.invalidateAllContactsCache();\n          yield _this2.fetchData();\n        }\n      } finally {\n        refresher === null || refresher === void 0 || refresher.complete();\n      }\n    })();\n  }\n  /**\n   * Fetch contacts.\n   *\n   * @returns Promise resolved when done.\n   */\n  fetchData() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.loadingMessage = _this3.loadingMessages;\n      try {\n        const contacts = yield AddonMessages.getAllContacts();\n        for (const x in contacts) {\n          if (contacts[x].length > 0) {\n            _this3.contacts[x] = _this3.sortUsers(contacts[x]);\n          } else {\n            _this3.contacts[x] = [];\n          }\n        }\n        _this3.clearSearch();\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n      }\n    })();\n  }\n  /**\n   * Sort user list by fullname\n   *\n   * @param list List to sort.\n   * @returns Sorted list.\n   */\n  sortUsers(list) {\n    return list.sort((a, b) => {\n      const compareA = a.fullname.toLowerCase();\n      const compareB = b.fullname.toLowerCase();\n      return compareA.localeCompare(compareB);\n    });\n  }\n  /**\n   * Clear search and show all contacts again.\n   */\n  clearSearch() {\n    this.searchString = ''; // Reset searched string.\n    this.contactTypes = this.noSearchTypes;\n    this.hasContacts = false;\n    for (const x in this.contacts) {\n      if (this.contacts[x].length > 0) {\n        this.hasContacts = true;\n        return;\n      }\n    }\n  }\n  /**\n   * Search users from the UI.\n   *\n   * @param query Text to search for.\n   * @returns Resolved when done.\n   */\n  search(query) {\n    CoreApp.closeKeyboard();\n    this.loaded = false;\n    this.loadingMessage = this.searchingMessages;\n    return this.performSearch(query).finally(() => {\n      this.loaded = true;\n    });\n  }\n  /**\n   * Perform the search of users.\n   *\n   * @param query Text to search for.\n   * @returns Resolved when done.\n   */\n  performSearch(query) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield AddonMessages.searchContacts(query);\n        _this4.hasContacts = result.length > 0;\n        _this4.searchString = query;\n        _this4.contactTypes = ['search'];\n        _this4.contacts.search = _this4.sortUsers(result);\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n      }\n    })();\n  }\n  /**\n   * Navigate to a particular discussion.\n   *\n   * @param discussionUserId Discussion Id to load.\n   */\n  gotoDiscussion(discussionUserId) {\n    this.discussionUserId = discussionUserId;\n    const path = CoreNavigator.getRelativePathToParent('/messages/contacts-35') + `discussion/user/${discussionUserId}`;\n    // @todo Check why this is failing on ngInit.\n    CoreNavigator.navigate(path, {\n      reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested\n    });\n  }\n  /**\n   * Component destroyed.\n   */\n  ngOnDestroy() {\n    var _this$memberInfoObser;\n    (_this$memberInfoObser = this.memberInfoObserver) === null || _this$memberInfoObser === void 0 || _this$memberInfoObser.off();\n  }\n}\n_class = AddonMessagesContacts35Page;\n_class.ɵfac = function AddonMessagesContacts35Page_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"addon-messages-contacts\"]],\n  viewQuery: function AddonMessagesContacts35Page_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CoreSplitViewComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.splitView = _t.first);\n    }\n  },\n  decls: 22,\n  vars: 19,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"slot\", \"end\"], [\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [\"autocorrect\", \"off\", \"spellcheck\", \"false\", \"lengthCheck\", \"2\", \"searchArea\", \"AddonMessagesContacts\", 3, \"placeholder\", \"disabled\", \"onSubmit\", \"onClear\"], [3, \"hideUntil\", \"message\"], [\"icon\", \"fas-address-book\", 3, \"message\", 4, \"ngIf\"], [\"class\", \"ion-no-margin\", 4, \"ngFor\", \"ngForOf\"], [\"icon\", \"fas-address-book\", 3, \"message\"], [1, \"ion-no-margin\"], [4, \"ngIf\"], [1, \"item-heading\"], [\"slot\", \"end\", 1, \"ion-padding-end\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"ion-text-wrap addon-messages-conversation-item\", \"button\", \"\", 3, \"detail\", \"click\", 4, \"ngIf\"], [\"button\", \"\", 1, \"ion-text-wrap\", \"addon-messages-conversation-item\", 3, \"detail\", \"click\"], [\"slot\", \"start\", 3, \"user\", \"checkOnline\"]],\n  template: function AddonMessagesContacts35Page_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵtext(7);\n      i0.ɵɵpipe(8, \"translate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"ion-buttons\", 2);\n      i0.ɵɵelement(10, \"core-context-menu\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(11, \"ion-content\")(12, \"core-split-view\")(13, \"ion-refresher\", 3);\n      i0.ɵɵlistener(\"ionRefresh\", function AddonMessagesContacts35Page_Template_ion_refresher_ionRefresh_13_listener($event) {\n        return ctx.refreshData($event.target);\n      });\n      i0.ɵɵelement(14, \"ion-refresher-content\", 4);\n      i0.ɵɵpipe(15, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"core-search-box\", 5);\n      i0.ɵɵlistener(\"onSubmit\", function AddonMessagesContacts35Page_Template_core_search_box_onSubmit_16_listener($event) {\n        return ctx.search($event);\n      })(\"onClear\", function AddonMessagesContacts35Page_Template_core_search_box_onClear_16_listener() {\n        return ctx.clearSearch();\n      });\n      i0.ɵɵpipe(17, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"core-loading\", 6);\n      i0.ɵɵtemplate(19, AddonMessagesContacts35Page_core_empty_box_19_Template, 2, 3, \"core-empty-box\", 7);\n      i0.ɵɵtemplate(20, AddonMessagesContacts35Page_core_empty_box_20_Template, 2, 3, \"core-empty-box\", 7);\n      i0.ɵɵtemplate(21, AddonMessagesContacts35Page_ion_list_21_Template, 2, 1, \"ion-list\", 8);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 11, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 13, \"addon.messages.contacts\"));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"disabled\", !ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(15, 15, \"core.pulltorefresh\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(17, 17, \"addon.messages.contactname\"))(\"disabled\", !ctx.loaded);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded)(\"message\", ctx.loadingMessage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.hasContacts && ctx.searchString === \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.hasContacts && ctx.searchString !== \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.contactTypes);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.CoreContextMenuComponent, i4.CoreEmptyBoxComponent, i5.CoreLoadingComponent, i6.CoreSplitViewComponent, i7.CoreUserAvatarComponent, i8.CoreContentDirective, i9.IonBadge, i9.IonButtons, i9.IonContent, i9.IonHeader, i9.IonItem, i9.IonItemDivider, i9.IonLabel, i9.IonList, i9.IonNote, i9.IonRefresher, i9.IonRefresherContent, i9.IonTitle, i9.IonToolbar, i9.IonBackButton, i10.CoreSearchBoxComponent, i11.TranslatePipe],\n  styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%] {\\n  margin-right: 0;\\n  margin-left: 0;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   core-format-text[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%] {\\n  -webkit-margin-start: 2px;\\n  margin-inline-start: 2px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-self: flex-start;\\n  -webkit-margin-start: 2px;\\n  margin-inline-start: 2px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-badge[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-badge[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%] {\\n  margin-top: 3px;\\n  align-self: flex-end;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   .addon-message-last-message-date[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   ion-note[_ngcontent-%COMP%]   .addon-message-last-message-date[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  font-size: 11px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .addon-message-last-message[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .addon-message-last-message[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: flex-start;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .addon-message-last-message-user[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .addon-message-last-message-user[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  color: var(--ion-text-color);\\n  -webkit-margin-end: 2px;\\n  margin-inline-end: 2px;\\n}\\n[_nghost-%COMP%]   .addon-messages-conversation-item[_ngcontent-%COMP%]   .addon-message-last-message-text[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .addon-message-last-message-text[_ngcontent-%COMP%] {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  flex-shrink: 1;\\n}\\n[_nghost-%COMP%]   .addon-message-discussion[_ngcontent-%COMP%]   .item-heading[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n}\\n[_nghost-%COMP%]   ion-item-divider[_ngcontent-%COMP%]   ion-badge[_ngcontent-%COMP%] {\\n  margin-left: 16px;\\n  margin-right: 16px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n});","map":{"version":3,"names":["CoreSites","AddonMessagesProvider","AddonMessages","CoreDomUtils","CoreApp","CoreEvents","Translate","CoreScreen","CoreNavigator","CoreSplitViewComponent","i0","ɵɵelement","ɵɵproperty","ɵɵpipeBind1","ɵɵelementStart","ɵɵlistener","AddonMessagesContacts35Page_ion_list_21_ng_container_1_ng_container_9_ion_item_1_Template_ion_item_click_0_listener","ɵɵrestoreView","_r10","contact_r6","ɵɵnextContext","$implicit","ctx_r8","ɵɵresetView","gotoDiscussion","id","ɵɵtext","ɵɵelementEnd","ɵɵattribute","fullname","ctx_r7","discussionUserId","ɵɵadvance","showonlinestatus","ɵɵtextInterpolate","ɵɵelementContainerStart","ɵɵtemplate","AddonMessagesContacts35Page_ion_list_21_ng_container_1_ng_container_9_ion_item_1_Template","ɵɵelementContainerEnd","profileimageurl","profileimageurlsmall","AddonMessagesContacts35Page_ion_list_21_ng_container_1_ng_container_9_Template","contactType_r3","ctx_r4","contacts","length","AddonMessagesContacts35Page_ion_list_21_ng_container_1_Template","ctx_r2","searchType","AddonMessagesContacts35Page","constructor","route","noSearchTypes","loaded","contactTypes","loadingMessage","hasContacts","online","offline","strangers","search","searchString","siteId","getCurrentSiteId","searchingMessages","instant","loadingMessages","memberInfoObserver","on","MEMBER_INFO_CHANGED_EVENT","data","contactRequestConfirmed","refreshData","ngOnInit","_this","_asyncToGenerator","getRouteNumberParam","undefined","fetchData","isTablet","contact","x","refresher","_this2","performSearch","invalidateAllContactsCache","complete","_this3","getAllContacts","sortUsers","clearSearch","error","showErrorModalDefault","list","sort","a","b","compareA","toLowerCase","compareB","localeCompare","query","closeKeyboard","finally","_this4","result","searchContacts","path","getRelativePathToParent","navigate","reset","splitView","isNested","ngOnDestroy","_this$memberInfoObser","off","ɵɵdirectiveInject","i1","ActivatedRoute","selectors","viewQuery","AddonMessagesContacts35Page_Query","rf","ctx","AddonMessagesContacts35Page_Template_ion_refresher_ionRefresh_13_listener","$event","target","AddonMessagesContacts35Page_Template_core_search_box_onSubmit_16_listener","AddonMessagesContacts35Page_Template_core_search_box_onClear_16_listener","AddonMessagesContacts35Page_core_empty_box_19_Template","AddonMessagesContacts35Page_core_empty_box_20_Template","AddonMessagesContacts35Page_ion_list_21_Template","ɵɵpropertyInterpolate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messages/pages/contacts-35/contacts.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messages/pages/contacts-35/contacts.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessagesProvider,\n    AddonMessagesGetContactsWSResponse,\n    AddonMessagesSearchContactsContact,\n    AddonMessagesGetContactsContact,\n    AddonMessages,\n} from '../../services/messages';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreApp } from '@services/app';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { ActivatedRoute } from '@angular/router';\nimport { Translate } from '@singletons';\nimport { CoreScreen } from '@services/screen';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\n\n/**\n * Page that displays the list of contacts.\n */\n@Component({\n    selector: 'addon-messages-contacts',\n    templateUrl: 'contacts.html',\n    styleUrls: ['../../messages-common.scss'],\n})\nexport class AddonMessagesContacts35Page implements OnInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    protected searchingMessages: string;\n    protected loadingMessages: string;\n    protected siteId: string;\n    protected noSearchTypes = ['online', 'offline', 'blocked', 'strangers'];\n    protected memberInfoObserver: CoreEventObserver;\n\n    loaded = false;\n    discussionUserId?: number;\n    contactTypes = ['online', 'offline', 'blocked', 'strangers'];\n    searchType = 'search';\n    loadingMessage = '';\n    hasContacts = false;\n    contacts: AddonMessagesGetContactsFormatted = {\n        online: [],\n        offline: [],\n        strangers: [],\n        search: [],\n    };\n\n    searchString = '';\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.searchingMessages = Translate.instant('core.searching');\n        this.loadingMessages = Translate.instant('core.loading');\n        this.loadingMessage = this.loadingMessages;\n\n        // Refresh the list when a contact request is confirmed.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (data.contactRequestConfirmed) {\n                    this.refreshData();\n                }\n            },\n            CoreSites.getCurrentSiteId(),\n        );\n    }\n\n    /**\n     * Component loaded.\n     */\n    async ngOnInit(): Promise<void> {\n        const discussionUserId = CoreNavigator.getRouteNumberParam('discussionUserId') ||\n            CoreNavigator.getRouteNumberParam('userId') || undefined;\n\n        if (this.loaded && this.discussionUserId == discussionUserId) {\n            return;\n        }\n\n        this.discussionUserId = discussionUserId;\n\n        if (this.discussionUserId) {\n            // There is a discussion to load, open the discussion in a new state.\n            this.gotoDiscussion(this.discussionUserId);\n        }\n\n        try {\n            await this.fetchData();\n            if (!this.discussionUserId && this.hasContacts && CoreScreen.isTablet) {\n                let contact: AddonMessagesGetContactsContact | undefined;\n                for (const x in this.contacts) {\n                    if (this.contacts[x].length > 0) {\n                        contact = this.contacts[x][0];\n                        break;\n                    }\n                }\n\n                if (contact) {\n                    // Take first and load it.\n                    this.gotoDiscussion(contact.id);\n                }\n            }\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @returns Promise resolved when done.\n     */\n    async refreshData(refresher?: HTMLIonRefresherElement): Promise<void> {\n        try {\n            if (this.searchString) {\n                // User has searched, update the search.\n                await this.performSearch(this.searchString);\n            } else {\n                // Update contacts.\n                await AddonMessages.invalidateAllContactsCache();\n                await this.fetchData();\n            }\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Fetch contacts.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        this.loadingMessage = this.loadingMessages;\n\n        try {\n            const contacts = await AddonMessages.getAllContacts();\n            for (const x in contacts) {\n                if (contacts[x].length > 0) {\n                    this.contacts[x] = this.sortUsers(contacts[x]);\n                } else {\n                    this.contacts[x] = [];\n                }\n            }\n\n            this.clearSearch();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Sort user list by fullname\n     *\n     * @param list List to sort.\n     * @returns Sorted list.\n     */\n    protected sortUsers(list: AddonMessagesSearchContactsContact[]): AddonMessagesSearchContactsContact[] {\n        return list.sort((a, b) => {\n            const compareA = a.fullname.toLowerCase();\n            const compareB = b.fullname.toLowerCase();\n\n            return compareA.localeCompare(compareB);\n        });\n    }\n\n    /**\n     * Clear search and show all contacts again.\n     */\n    clearSearch(): void {\n        this.searchString = ''; // Reset searched string.\n        this.contactTypes = this.noSearchTypes;\n\n        this.hasContacts = false;\n        for (const x in this.contacts) {\n            if (this.contacts[x].length > 0) {\n                this.hasContacts = true;\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Search users from the UI.\n     *\n     * @param query Text to search for.\n     * @returns Resolved when done.\n     */\n    search(query: string): Promise<void> {\n        CoreApp.closeKeyboard();\n\n        this.loaded = false;\n        this.loadingMessage = this.searchingMessages;\n\n        return this.performSearch(query).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Perform the search of users.\n     *\n     * @param query Text to search for.\n     * @returns Resolved when done.\n     */\n    protected async performSearch(query: string): Promise<void> {\n        try {\n            const result = await AddonMessages.searchContacts(query);\n            this.hasContacts = result.length > 0;\n            this.searchString = query;\n            this.contactTypes = ['search'];\n\n            this.contacts.search = this.sortUsers(result);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Navigate to a particular discussion.\n     *\n     * @param discussionUserId Discussion Id to load.\n     */\n    gotoDiscussion(discussionUserId: number): void {\n        this.discussionUserId = discussionUserId;\n\n        const path = CoreNavigator.getRelativePathToParent('/messages/contacts-35') + `discussion/user/${discussionUserId}`;\n\n        // @todo Check why this is failing on ngInit.\n        CoreNavigator.navigate(path, {\n            reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested,\n        });\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.memberInfoObserver?.off();\n    }\n\n}\n\n/**\n * Contacts with some calculated data.\n */\nexport type AddonMessagesGetContactsFormatted = AddonMessagesGetContactsWSResponse & {\n    search?: AddonMessagesSearchContactsContact[]; // Calculated in the app. Result of searching users.\n};\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>{{ 'addon.messages.contacts' | translate }}</h1>\n        </ion-title>\n        <ion-buttons slot=\"end\">\n            <!-- Add an empty context menu so split view pages can add items, otherwise the menu disappears in some cases. -->\n            <core-context-menu />\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <core-split-view>\n        <ion-refresher slot=\"fixed\" [disabled]=\"!loaded\" (ionRefresh)=\"refreshData($event.target)\">\n            <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n        </ion-refresher>\n\n        <core-search-box (onSubmit)=\"search($event)\" (onClear)=\"clearSearch()\" [placeholder]=\"'addon.messages.contactname' | translate\"\n            autocorrect=\"off\" spellcheck=\"false\" lengthCheck=\"2\" [disabled]=\"!loaded\" searchArea=\"AddonMessagesContacts\" />\n\n        <core-loading [hideUntil]=\"loaded\" [message]=\"loadingMessage\">\n            <core-empty-box *ngIf=\"!hasContacts && searchString === ''\" icon=\"fas-address-book\"\n                [message]=\"'addon.messages.contactlistempty' | translate\" />\n\n            <core-empty-box *ngIf=\"!hasContacts && searchString !== ''\" icon=\"fas-address-book\"\n                [message]=\"'addon.messages.nousersfound' | translate\" />\n\n            <ion-list *ngFor=\"let contactType of contactTypes\" class=\"ion-no-margin\">\n                <ng-container *ngIf=\"contacts[contactType] && (contacts[contactType].length > 0 || contactType === searchType)\">\n                    <ion-item-divider>\n                        <ion-label>\n                            <p class=\"item-heading\">{{ 'addon.messages.type_' + contactType | translate }}</p>\n                        </ion-label>\n                        <ion-note slot=\"end\" class=\"ion-padding-end\">\n                            <ion-badge>{{ contacts[contactType].length }}</ion-badge>\n                        </ion-note>\n                    </ion-item-divider>\n                    <ng-container *ngFor=\"let contact of contacts[contactType]\">\n                        <!-- Don't show deleted users -->\n                        <ion-item class=\"ion-text-wrap addon-messages-conversation-item\"\n                            *ngIf=\"contact.profileimageurl || contact.profileimageurlsmall\" [attr.aria-label]=\"contact.fullname\"\n                            (click)=\"gotoDiscussion(contact.id)\" [detail]=\"true\" button\n                            [attr.aria-current]=\"contact.id === discussionUserId ? 'page' : 'false'\">\n                            <core-user-avatar [user]=\"contact\" slot=\"start\" [checkOnline]=\"contact.showonlinestatus\" />\n                            <ion-label>\n                                <p class=\"item-heading\">{{ contact.fullname }}</p>\n                            </ion-label>\n                        </ion-item>\n                    </ng-container>\n                </ng-container>\n            </ion-list>\n        </core-loading>\n    </core-split-view>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}