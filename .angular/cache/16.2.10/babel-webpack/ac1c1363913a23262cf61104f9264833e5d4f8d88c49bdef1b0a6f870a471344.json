{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreFile } from '@services/file';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaModLti:';\nconst LAUNCHER_FILE_NAME = 'lti_launcher.html';\n/**\n * Service that provides some features for LTI.\n */\nexport class AddonModLtiProvider {\n  /**\n   * Delete launcher.\n   *\n   * @returns Promise resolved when the launcher file is deleted.\n   */\n  deleteLauncher() {\n    return CoreFile.removeFile(LAUNCHER_FILE_NAME);\n  }\n  /**\n   * Generates a launcher file.\n   *\n   * @param url Launch URL.\n   * @param params Launch params.\n   * @returns Promise resolved with the file URL.\n   */\n  generateLauncher(url, params) {\n    return _asyncToGenerator(function* () {\n      if (!CoreFile.isAvailable()) {\n        return url;\n      }\n      // Generate a form with the params.\n      let text = `<form action=\"${url}\" name=\"ltiLaunchForm\" method=\"post\" encType=\"application/x-www-form-urlencoded\">\\n`;\n      params.forEach(p => {\n        if (p.name == 'ext_submit') {\n          text += '    <input type=\"submit\"';\n        } else {\n          text += '    <input type=\"hidden\" name=\"' + CoreTextUtils.escapeHTML(p.name) + '\"';\n        }\n        text += ' value=\"' + CoreTextUtils.escapeHTML(p.value) + '\"/>\\n';\n      });\n      text += '</form>\\n';\n      // Add an in-line script to automatically submit the form.\n      text += '<script type=\"text/javascript\"> \\n' + '    window.onload = function() { \\n' + '        document.ltiLaunchForm.submit(); \\n' + '    }; \\n' + '</script> \\n';\n      const entry = yield CoreFile.writeFile(LAUNCHER_FILE_NAME, text);\n      return entry.toURL();\n    })();\n  }\n  /**\n   * Get a LTI.\n   *\n   * @param courseId Course ID.\n   * @param cmId Course module ID.\n   * @param options Other options.\n   * @returns Promise resolved when the LTI is retrieved.\n   */\n  getLti(courseId, cmId, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const params = {\n        courseids: [courseId]\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this.getLtiCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: AddonModLtiProvider.COMPONENT\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const site = yield CoreSites.getSite(options.siteId);\n      const response = yield site.read('mod_lti_get_ltis_by_courses', params, preSets);\n      const currentLti = response.ltis.find(lti => lti.coursemodule == cmId);\n      if (currentLti) {\n        return currentLti;\n      }\n      throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    })();\n  }\n  /**\n   * Get cache key for LTI data WS calls.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getLtiCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'lti:' + courseId;\n  }\n  /**\n   * Get a LTI launch data.\n   *\n   * @param id LTI id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the launch data is retrieved.\n   */\n  getLtiLaunchData(id, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const params = {\n        toolid: id\n      };\n      // Try to avoid using cache since the \"nonce\" parameter is set to a timestamp.\n      const preSets = {\n        getFromCache: false,\n        saveToCache: true,\n        emergencyCache: true,\n        cacheKey: _this2.getLtiLaunchDataCacheKey(id)\n      };\n      const site = yield CoreSites.getSite(siteId);\n      return site.read('mod_lti_get_tool_launch_data', params, preSets);\n    })();\n  }\n  /**\n   * Get cache key for LTI launch data WS calls.\n   *\n   * @param id LTI id.\n   * @returns Cache key.\n   */\n  getLtiLaunchDataCacheKey(id) {\n    return `${ROOT_CACHE_KEY}launch:${id}`;\n  }\n  /**\n   * Invalidates LTI data.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateLti(courseId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this3.getLtiCacheKey(courseId));\n    })();\n  }\n  /**\n   * Invalidates options.\n   *\n   * @param id LTI id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateLtiLaunchData(id, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this4.getLtiLaunchDataCacheKey(id));\n    })();\n  }\n  /**\n   * Check if open LTI in browser via site with auto-login is disabled.\n   * This setting was added in 3.11.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: whether it's disabled.\n   */\n  isLaunchViaSiteDisabled(siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this5.isLaunchViaSiteDisabledInSite(site);\n    })();\n  }\n  /**\n   * Check if open LTI in browser via site with auto-login is disabled.\n   * This setting was added in 3.11.\n   *\n   * @param site Site. If not defined, current site.\n   * @returns Whether it's disabled.\n   */\n  isLaunchViaSiteDisabledInSite(site) {\n    var _site;\n    site = site || CoreSites.getCurrentSite();\n    return !!((_site = site) !== null && _site !== void 0 && _site.isFeatureDisabled('CoreCourseModuleDelegate_AddonModLti:launchViaSite'));\n  }\n  /**\n   * Check if open in InAppBrowser is disabled.\n   * This setting was removed in Moodle 3.11 because the default behaviour of the app changed.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: whether it's disabled.\n   */\n  isOpenInAppBrowserDisabled(siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this6.isOpenInAppBrowserDisabledInSite(site);\n    })();\n  }\n  /**\n   * Check if open in InAppBrowser is disabled.\n   * This setting was removed in Moodle 3.11 because the default behaviour of the app changed.\n   *\n   * @param site Site. If not defined, current site.\n   * @returns Whether it's disabled.\n   */\n  isOpenInAppBrowserDisabledInSite(site) {\n    var _site2;\n    site = site || CoreSites.getCurrentSite();\n    return !!((_site2 = site) !== null && _site2 !== void 0 && _site2.isFeatureDisabled('CoreCourseModuleDelegate_AddonModLti:openInAppBrowser'));\n  }\n  /**\n   * Launch LTI.\n   *\n   * @param url Launch URL.\n   * @param params Launch params.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  launch(url, params) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (!CoreUrlUtils.isHttpURL(url)) {\n        throw Translate.instant('addon.mod_lti.errorinvalidlaunchurl');\n      }\n      // Generate launcher and open it.\n      const launcherUrl = yield _this7.generateLauncher(url, params);\n      if (CorePlatform.isMobile()) {\n        CoreUtils.openInApp(launcherUrl);\n      } else {\n        // In desktop open in browser, we found some cases where inapp caused JS issues.\n        CoreUtils.openInBrowser(launcherUrl);\n      }\n    })();\n  }\n  /**\n   * Report the LTI as being viewed.\n   *\n   * @param id LTI id.\n   * @param name Name of the lti.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logView(id, name, siteId) {\n    const params = {\n      ltiid: id\n    };\n    return CoreCourseLogHelper.log('mod_lti_view_lti', params, AddonModLtiProvider.COMPONENT, id, siteId);\n  }\n  /**\n   * Check whether the LTI should be launched in browser via the site with auto-login.\n   *\n   * @param siteId Site ID.\n   * @returns Promise resolved with boolean.\n   */\n  shouldLaunchInBrowser(siteId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      if (site.isVersionGreaterEqualThan('3.11')) {\n        // In 3.11+, launch in browser by default unless it's disabled.\n        return !_this8.isLaunchViaSiteDisabledInSite(site);\n      } else {\n        // In old sites the default behaviour is to launch in InAppBrowser.\n        return _this8.isOpenInAppBrowserDisabledInSite(site);\n      }\n    })();\n  }\n}\n_class = AddonModLtiProvider;\n_class.COMPONENT = 'mmaModLti';\n_class.ɵfac = function AddonModLtiProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModLti = makeSingleton(AddonModLtiProvider);","map":{"version":3,"names":["CoreError","CoreSite","CoreCourseLogHelper","CoreFile","CorePlatform","CoreSites","CoreTextUtils","CoreUrlUtils","CoreUtils","makeSingleton","Translate","ROOT_CACHE_KEY","LAUNCHER_FILE_NAME","AddonModLtiProvider","deleteLauncher","removeFile","generateLauncher","url","params","_asyncToGenerator","isAvailable","text","forEach","p","name","escapeHTML","value","entry","writeFile","toURL","getLti","courseId","cmId","options","_this","courseids","preSets","_objectSpread","cacheKey","getLtiCacheKey","updateFrequency","FREQUENCY_RARELY","component","COMPONENT","getReadingStrategyPreSets","readingStrategy","site","getSite","siteId","response","read","currentLti","ltis","find","lti","coursemodule","instant","getLtiLaunchData","id","_this2","toolid","getFromCache","saveToCache","emergencyCache","getLtiLaunchDataCacheKey","invalidateLti","_this3","invalidateWsCacheForKey","invalidateLtiLaunchData","_this4","isLaunchViaSiteDisabled","_this5","isLaunchViaSiteDisabledInSite","_site","getCurrentSite","isFeatureDisabled","isOpenInAppBrowserDisabled","_this6","isOpenInAppBrowserDisabledInSite","_site2","launch","_this7","isHttpURL","launcherUrl","isMobile","openInApp","openInBrowser","logView","ltiid","log","shouldLaunchInBrowser","_this8","isVersionGreaterEqualThan","_class","factory","ɵfac","providedIn","AddonModLti"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/lti/services/lti.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreFile } from '@services/file';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites, CoreSitesCommonWSOptions } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSExternalFile, CoreWSExternalWarning } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\n\nconst ROOT_CACHE_KEY = 'mmaModLti:';\nconst LAUNCHER_FILE_NAME = 'lti_launcher.html';\n\n/**\n * Service that provides some features for LTI.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModLtiProvider {\n\n    static readonly COMPONENT = 'mmaModLti';\n\n    /**\n     * Delete launcher.\n     *\n     * @returns Promise resolved when the launcher file is deleted.\n     */\n    deleteLauncher(): Promise<void> {\n        return CoreFile.removeFile(LAUNCHER_FILE_NAME);\n    }\n\n    /**\n     * Generates a launcher file.\n     *\n     * @param url Launch URL.\n     * @param params Launch params.\n     * @returns Promise resolved with the file URL.\n     */\n    async generateLauncher(url: string, params: AddonModLtiParam[]): Promise<string> {\n        if (!CoreFile.isAvailable()) {\n            return url;\n        }\n\n        // Generate a form with the params.\n        let text = `<form action=\"${url}\" name=\"ltiLaunchForm\" method=\"post\" encType=\"application/x-www-form-urlencoded\">\\n`;\n        params.forEach((p) => {\n            if (p.name == 'ext_submit') {\n                text += '    <input type=\"submit\"';\n            } else {\n                text += '    <input type=\"hidden\" name=\"' + CoreTextUtils.escapeHTML(p.name) + '\"';\n            }\n            text += ' value=\"' + CoreTextUtils.escapeHTML(p.value) + '\"/>\\n';\n        });\n        text += '</form>\\n';\n\n        // Add an in-line script to automatically submit the form.\n        text += '<script type=\"text/javascript\"> \\n' +\n            '    window.onload = function() { \\n' +\n            '        document.ltiLaunchForm.submit(); \\n' +\n            '    }; \\n' +\n            '</script> \\n';\n\n        const entry = await CoreFile.writeFile(LAUNCHER_FILE_NAME, text);\n\n        return entry.toURL();\n    }\n\n    /**\n     * Get a LTI.\n     *\n     * @param courseId Course ID.\n     * @param cmId Course module ID.\n     * @param options Other options.\n     * @returns Promise resolved when the LTI is retrieved.\n     */\n    async getLti(courseId: number, cmId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModLtiLti> {\n        const params: AddonModLtiGetLtisByCoursesWSParams = {\n            courseids: [courseId],\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getLtiCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: AddonModLtiProvider.COMPONENT,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const site = await CoreSites.getSite(options.siteId);\n\n        const response = await site.read<AddonModLtiGetLtisByCoursesWSResponse>('mod_lti_get_ltis_by_courses', params, preSets);\n\n        const currentLti = response.ltis.find((lti) => lti.coursemodule == cmId);\n        if (currentLti) {\n            return currentLti;\n        }\n\n        throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    }\n\n    /**\n     * Get cache key for LTI data WS calls.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getLtiCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'lti:' + courseId;\n    }\n\n    /**\n     * Get a LTI launch data.\n     *\n     * @param id LTI id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the launch data is retrieved.\n     */\n    async getLtiLaunchData(id: number, siteId?: string): Promise<AddonModLtiGetToolLaunchDataWSResponse> {\n        const params: AddonModLtiGetToolLaunchDataWSParams = {\n            toolid: id,\n        };\n\n        // Try to avoid using cache since the \"nonce\" parameter is set to a timestamp.\n        const preSets: CoreSiteWSPreSets = {\n            getFromCache: false,\n            saveToCache: true,\n            emergencyCache: true,\n            cacheKey: this.getLtiLaunchDataCacheKey(id),\n        };\n\n        const site = await CoreSites.getSite(siteId);\n\n        return site.read<AddonModLtiGetToolLaunchDataWSResponse>('mod_lti_get_tool_launch_data', params, preSets);\n    }\n\n    /**\n     * Get cache key for LTI launch data WS calls.\n     *\n     * @param id LTI id.\n     * @returns Cache key.\n     */\n    protected getLtiLaunchDataCacheKey(id: number): string {\n        return `${ROOT_CACHE_KEY}launch:${id}`;\n    }\n\n    /**\n     * Invalidates LTI data.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateLti(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getLtiCacheKey(courseId));\n    }\n\n    /**\n     * Invalidates options.\n     *\n     * @param id LTI id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateLtiLaunchData(id: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getLtiLaunchDataCacheKey(id));\n    }\n\n    /**\n     * Check if open LTI in browser via site with auto-login is disabled.\n     * This setting was added in 3.11.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: whether it's disabled.\n     */\n    async isLaunchViaSiteDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.isLaunchViaSiteDisabledInSite(site);\n    }\n\n    /**\n     * Check if open LTI in browser via site with auto-login is disabled.\n     * This setting was added in 3.11.\n     *\n     * @param site Site. If not defined, current site.\n     * @returns Whether it's disabled.\n     */\n    isLaunchViaSiteDisabledInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site?.isFeatureDisabled('CoreCourseModuleDelegate_AddonModLti:launchViaSite');\n    }\n\n    /**\n     * Check if open in InAppBrowser is disabled.\n     * This setting was removed in Moodle 3.11 because the default behaviour of the app changed.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: whether it's disabled.\n     */\n    async isOpenInAppBrowserDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.isOpenInAppBrowserDisabledInSite(site);\n    }\n\n    /**\n     * Check if open in InAppBrowser is disabled.\n     * This setting was removed in Moodle 3.11 because the default behaviour of the app changed.\n     *\n     * @param site Site. If not defined, current site.\n     * @returns Whether it's disabled.\n     */\n    isOpenInAppBrowserDisabledInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site?.isFeatureDisabled('CoreCourseModuleDelegate_AddonModLti:openInAppBrowser');\n    }\n\n    /**\n     * Launch LTI.\n     *\n     * @param url Launch URL.\n     * @param params Launch params.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async launch(url: string, params: AddonModLtiParam[]): Promise<void> {\n        if (!CoreUrlUtils.isHttpURL(url)) {\n            throw Translate.instant('addon.mod_lti.errorinvalidlaunchurl');\n        }\n\n        // Generate launcher and open it.\n        const launcherUrl = await this.generateLauncher(url, params);\n\n        if (CorePlatform.isMobile()) {\n            CoreUtils.openInApp(launcherUrl);\n        } else {\n            // In desktop open in browser, we found some cases where inapp caused JS issues.\n            CoreUtils.openInBrowser(launcherUrl);\n        }\n    }\n\n    /**\n     * Report the LTI as being viewed.\n     *\n     * @param id LTI id.\n     * @param name Name of the lti.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    logView(id: number, name?: string, siteId?: string): Promise<void> {\n        const params: AddonModLtiViewLtiWSParams = {\n            ltiid: id,\n        };\n\n        return CoreCourseLogHelper.log(\n            'mod_lti_view_lti',\n            params,\n            AddonModLtiProvider.COMPONENT,\n            id,\n            siteId,\n        );\n    }\n\n    /**\n     * Check whether the LTI should be launched in browser via the site with auto-login.\n     *\n     * @param siteId Site ID.\n     * @returns Promise resolved with boolean.\n     */\n    async shouldLaunchInBrowser(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        if (site.isVersionGreaterEqualThan('3.11')) {\n            // In 3.11+, launch in browser by default unless it's disabled.\n            return !this.isLaunchViaSiteDisabledInSite(site);\n        } else {\n            // In old sites the default behaviour is to launch in InAppBrowser.\n            return this.isOpenInAppBrowserDisabledInSite(site);\n        }\n    }\n\n}\n\nexport const AddonModLti = makeSingleton(AddonModLtiProvider);\n\n/**\n * Params of mod_lti_get_ltis_by_courses WS.\n */\nexport type AddonModLtiGetLtisByCoursesWSParams = {\n    courseids?: number[]; // Array of course ids.\n};\n\n/**\n * Data returned by mod_lti_get_ltis_by_courses WS.\n */\nexport type AddonModLtiGetLtisByCoursesWSResponse = {\n    ltis: AddonModLtiLti[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * LTI returned by mod_lti_get_ltis_by_courses.\n */\nexport type AddonModLtiLti = {\n    id: number; // External tool id.\n    coursemodule: number; // Course module id.\n    course: number; // Course id.\n    name: string; // LTI name.\n    intro?: string; // The LTI intro.\n    introformat?: number; // Intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    introfiles?: CoreWSExternalFile[];\n    timecreated?: number; // Time of creation.\n    timemodified?: number; // Time of last modification.\n    typeid?: number; // Type id.\n    toolurl?: string; // Tool url.\n    securetoolurl?: string; // Secure tool url.\n    instructorchoicesendname?: string; // Instructor choice send name.\n    instructorchoicesendemailaddr?: number; // Instructor choice send mail address.\n    instructorchoiceallowroster?: number; // Instructor choice allow roster.\n    instructorchoiceallowsetting?: number; // Instructor choice allow setting.\n    instructorcustomparameters?: string; // Instructor custom parameters.\n    instructorchoiceacceptgrades?: number; // Instructor choice accept grades.\n    grade?: number; // Enable grades.\n    launchcontainer?: number; // Launch container mode.\n    resourcekey?: string; // Resource key.\n    password?: string; // Shared secret.\n    debuglaunch?: number; // Debug launch.\n    showtitlelaunch?: number; // Show title launch.\n    showdescriptionlaunch?: number; // Show description launch.\n    servicesalt?: string; // Service salt.\n    icon?: string; // Alternative icon URL.\n    secureicon?: string; // Secure icon URL.\n    section?: number; // Course section id.\n    visible?: number; // Visible.\n    groupmode?: number; // Group mode.\n    groupingid?: number; // Group id.\n};\n\n/**\n * Params of mod_lti_get_tool_launch_data WS.\n */\nexport type AddonModLtiGetToolLaunchDataWSParams = {\n    toolid: number; // External tool instance id.\n};\n\n/**\n * Data returned by mod_lti_get_tool_launch_data WS.\n */\nexport type AddonModLtiGetToolLaunchDataWSResponse = {\n    endpoint: string; // Endpoint URL.\n    parameters: AddonModLtiParam[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Param to send to the LTI.\n */\nexport type AddonModLtiParam = {\n    name: string; // Parameter name.\n    value: string; // Parameter value.\n};\n/**\n * Params of mod_lti_view_lti WS.\n */\nexport type AddonModLtiViewLtiWSParams = {\n    ltiid: number; // Lti instance id.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}