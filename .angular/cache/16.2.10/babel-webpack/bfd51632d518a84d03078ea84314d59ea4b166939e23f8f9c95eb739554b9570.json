{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Check whether a given number is safe to use (does not equal undefined nor NaN).\n *\n * @param value Number value.\n * @returns Whether the number is safe.\n */\nexport function isSafeNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n/**\n * Make sure that a given number is safe to use, and convert it to undefined otherwise.\n *\n * @param value Number value.\n * @returns Branded number value if safe, undefined otherwise.\n */\nexport function safeNumber(value) {\n  if (!isSafeNumber(value)) {\n    return undefined;\n  }\n  return value;\n}","map":{"version":3,"names":["isSafeNumber","value","isNaN","safeNumber","undefined"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/utils/types.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Helper type to infer class instance types.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type Constructor<T> = { new(...args: any[]): T };\n\n/**\n * Helper type to infer whether two types are exactly the same.\n */\nexport type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? true : false;\n\n/**\n * Helper type to flatten complex types.\n */\nexport type Pretty<T> = T extends infer U ? {[K in keyof U]: U[K]} : never;\n\n/**\n * Helper type to omit union.\n * You can use it if need to omit an element from types union.\n * If you omit a value in an union with `Omit<TypeUnion, 'value'>` you will obtain\n * the values which are present in both types.\n * For example, you have 3 types:\n *\n * ```\n *  type TypeA = { propA: boolean; propB: string; propToOmit: boolean }\n *  type TypeB = { propA: boolean; propToOmit: boolean }\n *  type TypeUnion = TypeA | TypeB\n * ```\n *\n * @example\n * ```\n *  type Result = Omit<TypeUnion, 'propToOmit'>;\n *  //      ^? type Result = { propA: boolean };\n * ```\n *\n * @example\n * ```\n *  type Result = OmitUnion<TypeUnion, 'propToOmit'>;\n *  //      ^? type Result = { propA: boolean, propB: string } | { propA: boolean }\n * ```\n *\n * @see https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\n */\nexport type OmitUnion<T, A extends keyof T> = T extends '' ? never : Omit<T, A>;\n\n/**\n * Helper to create branded types.\n *\n * A branded type can be used to mark other types as having passed some validations.\n *\n * @see https://twitter.com/mattpocockuk/status/1625173884885401600\n */\nexport type Brand<T, TBrand extends string> = T & { [brand]: TBrand };\n\ndeclare const brand: unique symbol;\n\n/**\n * Number type excluding NaN values.\n */\nexport type SafeNumber = Brand<number, 'SafeNumber'>;\n\n/**\n * Check whether a given number is safe to use (does not equal undefined nor NaN).\n *\n * @param value Number value.\n * @returns Whether the number is safe.\n */\nexport function isSafeNumber(value?: unknown): value is SafeNumber {\n    return typeof value === 'number' && !isNaN(value);\n}\n\n/**\n * Make sure that a given number is safe to use, and convert it to undefined otherwise.\n *\n * @param value Number value.\n * @returns Branded number value if safe, undefined otherwise.\n */\nexport function safeNumber(value?: unknown): SafeNumber | undefined {\n    if (!isSafeNumber(value)) {\n        return undefined;\n    }\n\n    return value;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA+DA;;;;;;AAMA,OAAM,SAAUA,YAAYA,CAACC,KAAe;EACxC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACD,KAAK,CAAC;AACrD;AAEA;;;;;;AAMA,OAAM,SAAUE,UAAUA,CAACF,KAAe;EACtC,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC,EAAE;IACtB,OAAOG,SAAS;;EAGpB,OAAOH,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}