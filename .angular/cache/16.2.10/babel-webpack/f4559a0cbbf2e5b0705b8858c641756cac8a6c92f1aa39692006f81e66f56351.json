{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { AddonCalendarProvider } from '@addons/calendar/services/calendar';\nimport { EVENTS_TABLE } from '@addons/calendar/services/database/calendar';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreRemindersService } from '../reminders';\n/**\n * Database variables for CoreRemindersService service.\n */\nexport const REMINDERS_TABLE = 'core_reminders';\nexport const REMINDERS_SITE_SCHEMA = {\n  name: 'CoreRemindersService',\n  version: 1,\n  canBeCleared: [],\n  tables: [{\n    name: REMINDERS_TABLE,\n    columns: [{\n      name: 'id',\n      type: 'INTEGER',\n      primaryKey: true\n    }, {\n      name: 'component',\n      type: 'TEXT',\n      notNull: true\n    }, {\n      name: 'instanceId',\n      type: 'INTEGER',\n      notNull: true\n    }, {\n      name: 'type',\n      type: 'TEXT',\n      notNull: true\n    }, {\n      name: 'time',\n      type: 'INTEGER',\n      notNull: true\n    }, {\n      name: 'timebefore',\n      type: 'INTEGER',\n      notNull: true\n    }, {\n      name: 'title',\n      type: 'TEXT',\n      notNull: true\n    }, {\n      name: 'url',\n      type: 'TEXT'\n    }],\n    uniqueKeys: [['component', 'instanceId', 'timebefore']]\n  }],\n  install: function () {\n    var _ref = _asyncToGenerator(function* (db) {\n      yield migrateFromCalendarRemindersV1(db);\n      yield migrateFromCalendarRemindersV2(db);\n    });\n    return function install(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()\n};\nconst migrateFromCalendarRemindersV1 = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (db) {\n    // Migrate reminders. New format @since 4.0.\n    const oldTable = 'addon_calendar_reminders';\n    const tableExists = yield CoreUtils.promiseWorks(db.tableExists(oldTable));\n    if (!tableExists) {\n      return;\n    }\n    const records = yield db.getAllRecords(oldTable);\n    const events = {};\n    const uniqueReminder = {};\n    yield Promise.all(records.map( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (record) {\n        // Get the event to compare the reminder time with the event time.\n        if (!events[record.eventid]) {\n          try {\n            events[record.eventid] = yield db.getRecord(EVENTS_TABLE, {\n              id: record.eventid\n            });\n          } catch (_unused) {\n            // Event not found in local DB, shouldn't happen. Ignore the reminder.\n            return;\n          }\n        }\n        const event = events[record.eventid];\n        let reminderTime = record.time;\n        if (!reminderTime || reminderTime === -1) {\n          // Default reminder.\n          reminderTime = CoreRemindersService.DEFAULT_REMINDER_TIMEBEFORE;\n        } else if (reminderTime > event.timestart) {\n          // Reminder is after the event, ignore it.\n          return;\n        } else {\n          // Remove seconds from the old reminder, it could include seconds by mistake.\n          reminderTime = event.timestart - Math.floor(reminderTime / 60) * 60;\n        }\n        if (uniqueReminder[record.eventid] === undefined) {\n          uniqueReminder[record.eventid] = [];\n        } else {\n          if (uniqueReminder[record.eventid].includes(reminderTime)) {\n            // Reminder already exists.\n            return;\n          }\n        }\n        yield createReminder(db, event, reminderTime);\n      });\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()));\n    try {\n      yield db.dropTable(oldTable);\n    } catch (_unused2) {\n      // Error deleting old table, ignore.\n    }\n  });\n  return function migrateFromCalendarRemindersV1(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst migrateFromCalendarRemindersV2 = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (db) {\n    const oldTable = 'addon_calendar_reminders_2';\n    const tableExists = yield CoreUtils.promiseWorks(db.tableExists(oldTable));\n    if (!tableExists) {\n      return;\n    }\n    const records = yield db.getAllRecords(oldTable);\n    const events = {};\n    const uniqueReminder = {};\n    yield Promise.all(records.map( /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (record) {\n        // Get the event to compare the reminder time with the event time.\n        if (!events[record.eventid]) {\n          try {\n            events[record.eventid] = yield db.getRecord(EVENTS_TABLE, {\n              id: record.eventid\n            });\n          } catch (_unused3) {\n            // Event not found in local DB, shouldn't happen. Ignore the reminder.\n            return;\n          }\n        }\n        const event = events[record.eventid];\n        const reminderTime = record.time || CoreRemindersService.DEFAULT_REMINDER_TIMEBEFORE;\n        if (uniqueReminder[record.eventid] === undefined) {\n          uniqueReminder[record.eventid] = [];\n        } else {\n          if (uniqueReminder[record.eventid].includes(reminderTime)) {\n            // Reminder already exists.\n            return;\n          }\n        }\n        uniqueReminder[record.eventid].push(reminderTime);\n        yield createReminder(db, event, reminderTime);\n      });\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }()));\n    try {\n      yield db.dropTable(oldTable);\n    } catch (_unused4) {\n      // Error deleting old table, ignore.\n    }\n  });\n  return function migrateFromCalendarRemindersV2(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nconst createReminder = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(function* (db, event, reminderTime) {\n    const reminder = {\n      component: AddonCalendarProvider.COMPONENT,\n      instanceId: event.id,\n      type: event.eventtype,\n      timebefore: reminderTime,\n      url: event.url,\n      title: event.name,\n      time: event.timestart\n    };\n    yield db.insertRecord(REMINDERS_TABLE, reminder);\n  });\n  return function createReminder(_x6, _x7, _x8) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AddonCalendarProvider","EVENTS_TABLE","CoreUtils","CoreRemindersService","REMINDERS_TABLE","REMINDERS_SITE_SCHEMA","name","version","canBeCleared","tables","columns","type","primaryKey","notNull","uniqueKeys","install","_ref","_asyncToGenerator","db","migrateFromCalendarRemindersV1","migrateFromCalendarRemindersV2","_x","apply","arguments","_ref2","oldTable","tableExists","promiseWorks","records","getAllRecords","events","uniqueReminder","Promise","all","map","_ref3","record","eventid","getRecord","id","_unused","event","reminderTime","time","DEFAULT_REMINDER_TIMEBEFORE","timestart","Math","floor","undefined","includes","createReminder","_x3","dropTable","_unused2","_x2","_ref4","_ref5","_unused3","push","_x5","_unused4","_x4","_ref6","reminder","component","COMPONENT","instanceId","eventtype","timebefore","url","title","insertRecord","_x6","_x7","_x8"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/reminders/services/database/reminders.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AddonCalendarProvider } from '@addons/calendar/services/calendar';\nimport { AddonCalendarEventDBRecord, EVENTS_TABLE } from '@addons/calendar/services/database/calendar';\nimport { SQLiteDB } from '@classes/sqlitedb';\nimport { CoreSiteSchema } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreReminderData, CoreRemindersService } from '../reminders';\n\n/**\n * Database variables for CoreRemindersService service.\n */\nexport const REMINDERS_TABLE = 'core_reminders';\nexport const REMINDERS_SITE_SCHEMA: CoreSiteSchema = {\n    name: 'CoreRemindersService',\n    version: 1,\n    canBeCleared: [],\n    tables: [\n        {\n            name: REMINDERS_TABLE,\n            columns: [\n                {\n                    name: 'id',\n                    type: 'INTEGER',\n                    primaryKey: true,\n                },\n                {\n                    name: 'component',\n                    type: 'TEXT',\n                    notNull: true,\n                },\n                {\n                    name: 'instanceId',\n                    type: 'INTEGER',\n                    notNull: true,\n                },\n                {\n                    name: 'type',\n                    type: 'TEXT',\n                    notNull: true,\n                },\n                {\n                    name: 'time',\n                    type: 'INTEGER',\n                    notNull: true,\n                },\n                {\n                    name: 'timebefore',\n                    type: 'INTEGER',\n                    notNull: true,\n                },\n                {\n                    name: 'title',\n                    type: 'TEXT',\n                    notNull: true,\n                },\n                {\n                    name: 'url',\n                    type: 'TEXT',\n                },\n\n            ],\n            uniqueKeys: [\n                ['component', 'instanceId', 'timebefore'],\n            ],\n        },\n    ],\n    install: async (db: SQLiteDB): Promise<void> => {\n        await migrateFromCalendarRemindersV1(db);\n        await migrateFromCalendarRemindersV2(db);\n    },\n};\n\nconst migrateFromCalendarRemindersV1 = async (db: SQLiteDB): Promise<void> => {\n    // Migrate reminders. New format @since 4.0.\n    const oldTable = 'addon_calendar_reminders';\n\n    const tableExists = await CoreUtils.promiseWorks(db.tableExists(oldTable));\n    if (!tableExists) {\n        return;\n    }\n\n    const records = await db.getAllRecords<AddonCalendarReminderDBRecord>(oldTable);\n    const events: Record<number, AddonCalendarEventDBRecord> = {};\n    const uniqueReminder: Record<number, number[]> = {};\n\n    await Promise.all(records.map(async (record) => {\n        // Get the event to compare the reminder time with the event time.\n        if (!events[record.eventid]) {\n            try {\n                events[record.eventid] = await db.getRecord(EVENTS_TABLE, { id: record.eventid });\n            } catch {\n                // Event not found in local DB, shouldn't happen. Ignore the reminder.\n                return;\n            }\n        }\n\n        const event = events[record.eventid];\n\n        let reminderTime = record.time;\n\n        if (!reminderTime || reminderTime === -1) {\n            // Default reminder.\n            reminderTime = CoreRemindersService.DEFAULT_REMINDER_TIMEBEFORE;\n        } else if (reminderTime > event.timestart) {\n            // Reminder is after the event, ignore it.\n            return;\n        } else {\n            // Remove seconds from the old reminder, it could include seconds by mistake.\n            reminderTime = event.timestart - Math.floor(reminderTime / 60) * 60;\n        }\n\n        if (uniqueReminder[record.eventid] === undefined) {\n            uniqueReminder[record.eventid] = [];\n        } else {\n            if (uniqueReminder[record.eventid].includes(reminderTime)) {\n                // Reminder already exists.\n                return;\n            }\n        }\n\n        await createReminder(db, event, reminderTime);\n    }));\n\n    try {\n        await db.dropTable(oldTable);\n    } catch {\n        // Error deleting old table, ignore.\n    }\n};\n\nconst migrateFromCalendarRemindersV2 = async (db: SQLiteDB): Promise<void> => {\n    const oldTable = 'addon_calendar_reminders_2';\n\n    const tableExists = await CoreUtils.promiseWorks(db.tableExists(oldTable));\n    if (!tableExists) {\n        return;\n    }\n\n    const records = await db.getAllRecords<AddonCalendarReminderDBRecord>(oldTable);\n    const events: Record<number, AddonCalendarEventDBRecord> = {};\n    const uniqueReminder: Record<number, number[]> = {};\n\n    await Promise.all(records.map(async (record) => {\n        // Get the event to compare the reminder time with the event time.\n        if (!events[record.eventid]) {\n            try {\n                events[record.eventid] = await db.getRecord(EVENTS_TABLE, { id: record.eventid });\n            } catch {\n                // Event not found in local DB, shouldn't happen. Ignore the reminder.\n                return;\n            }\n        }\n        const event = events[record.eventid];\n\n        const reminderTime = record.time || CoreRemindersService.DEFAULT_REMINDER_TIMEBEFORE;\n\n        if (uniqueReminder[record.eventid] === undefined) {\n            uniqueReminder[record.eventid] = [];\n        } else {\n            if (uniqueReminder[record.eventid].includes(reminderTime)) {\n                // Reminder already exists.\n                return;\n            }\n        }\n\n        uniqueReminder[record.eventid].push(reminderTime);\n\n        await createReminder(db, event, reminderTime);\n    }));\n\n    try {\n        await db.dropTable(oldTable);\n    } catch {\n        // Error deleting old table, ignore.\n    }\n};\n\nconst createReminder = async (\n    db: SQLiteDB,\n    event: AddonCalendarEventDBRecord,\n    reminderTime: number,\n): Promise<void> => {\n    const reminder: CoreReminderData = {\n        component: AddonCalendarProvider.COMPONENT,\n        instanceId: event.id,\n        type: event.eventtype,\n        timebefore: reminderTime,\n        url: event.url,\n        title: event.name,\n        time: event.timestart,\n    };\n\n    await db.insertRecord(REMINDERS_TABLE, reminder);\n};\n\nexport type CoreReminderDBRecord = {\n    id: number; // Reminder ID.\n    component: string; // Component where the reminder belongs.\n    instanceId: number; // Instance Id where the reminder belongs.\n    type: string; // Event idenfier type.\n    time: number; // Event time.\n    timebefore: number; // Seconds before the event to remind.\n    title: string; // Notification title.\n    url?: string; // URL where to redirect the user.\n};\n\ntype AddonCalendarReminderDBRecord = {\n    id: number;\n    eventid: number;\n    time: number | null; // Number of seconds before the event, null for default time.\n    timecreated?: number | null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}