{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreConstants } from '@/core/constants';\nimport { asyncInstance } from '@/core/utils/async-instance';\nimport { CoreConfig, CoreConfigProvider } from '@services/config';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreDatabaseTable } from './database-table';\nimport { CoreDebugDatabaseTable } from './debug-database-table';\nimport { CoreEagerDatabaseTable } from './eager-database-table';\nimport { CoreLazyDatabaseTable } from './lazy-database-table';\n/**\n * Database table proxy used to route database interactions through different implementations.\n *\n * This class allows using a database wrapper with different optimization strategies that can be changed at runtime.\n */\nexport class CoreDatabaseTableProxy extends CoreDatabaseTable {\n  constructor() {\n    super(...arguments);\n    this.DEFAULT_CACHING_STRATEGY = CoreDatabaseCachingStrategy.None;\n    this.target = asyncInstance();\n    this.targetConstructors = {\n      [CoreDatabaseCachingStrategy.Eager]: CoreEagerDatabaseTable,\n      [CoreDatabaseCachingStrategy.Lazy]: CoreLazyDatabaseTable,\n      [CoreDatabaseCachingStrategy.None]: CoreDatabaseTable\n    };\n  }\n  /**\n   * @inheritdoc\n   */\n  initialize() {\n    var _superprop_getInitialize = () => super.initialize,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      yield _superprop_getInitialize().call(_this);\n      _this.environmentObserver = CoreEvents.on(CoreConfigProvider.ENVIRONMENT_UPDATED, /*#__PURE__*/_asyncToGenerator(function* () {\n        if (!(yield _this.shouldUpdateTarget())) {\n          return;\n        }\n        _this.updateTarget();\n      }));\n      yield _this.updateTarget();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  destroy() {\n    var _superprop_getDestroy = () => super.destroy,\n      _this2 = this;\n    return _asyncToGenerator(function* () {\n      var _this2$environmentObs;\n      yield _superprop_getDestroy().call(_this2);\n      (_this2$environmentObs = _this2.environmentObserver) === null || _this2$environmentObs === void 0 || _this2$environmentObs.off();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  matchesConfig(config) {\n    var _this$config$debug, _this$config$cachingS, _config$debug, _config$cachingStrate;\n    const thisDebug = (_this$config$debug = this.config.debug) !== null && _this$config$debug !== void 0 ? _this$config$debug : false;\n    const thisCachingStrategy = (_this$config$cachingS = this.config.cachingStrategy) !== null && _this$config$cachingS !== void 0 ? _this$config$cachingS : this.DEFAULT_CACHING_STRATEGY;\n    const otherDebug = (_config$debug = config.debug) !== null && _config$debug !== void 0 ? _config$debug : false;\n    const otherCachingStrategy = (_config$cachingStrate = config.cachingStrategy) !== null && _config$cachingStrate !== void 0 ? _config$cachingStrate : this.DEFAULT_CACHING_STRATEGY;\n    return super.matchesConfig(config) && thisDebug === otherDebug && thisCachingStrategy === otherCachingStrategy;\n  }\n  /**\n   * @inheritdoc\n   */\n  getMany(conditions, options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.target.getMany(conditions, options);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getManyWhere(conditions) {\n    return this.target.getManyWhere(conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  getOne(conditions, options) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.target.getOne(conditions, options);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getOneByPrimaryKey(primaryKey) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return _this5.target.getOneByPrimaryKey(primaryKey);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  reduce(reducer, conditions) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return _this6.target.reduce(reducer, conditions);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  hasAny(conditions) {\n    return this.target.hasAny(conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  hasAnyByPrimaryKey(primaryKey) {\n    return this.target.hasAnyByPrimaryKey(primaryKey);\n  }\n  /**\n   * @inheritdoc\n   */\n  count(conditions) {\n    return this.target.count(conditions);\n  }\n  /**\n   * @inheritdoc\n   */\n  insert(record) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return _this7.target.insert(record);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  update(updates, conditions) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      return _this8.target.update(updates, conditions);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  updateWhere(updates, conditions) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      return _this9.target.updateWhere(updates, conditions);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  delete(conditions) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      return _this10.target.delete(conditions);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  deleteByPrimaryKey(primaryKey) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      return _this11.target.deleteByPrimaryKey(primaryKey);\n    })();\n  }\n  /**\n   * Get database configuration to use at runtime.\n   *\n   * @returns Database configuration.\n   */\n  getRuntimeConfig() {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      var _CoreConstants$CONFIG;\n      yield CoreConfig.ready();\n      return _objectSpread(_objectSpread(_objectSpread({}, _this12.config), CoreConstants.CONFIG.databaseOptimizations), (_CoreConstants$CONFIG = CoreConstants.CONFIG.databaseTableOptimizations) === null || _CoreConstants$CONFIG === void 0 ? void 0 : _CoreConstants$CONFIG[_this12.tableName]);\n    })();\n  }\n  /**\n   * Update underlying target instance.\n   */\n  updateTarget() {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const oldTarget = _this13.target.instance;\n      const newTarget = yield _this13.createTarget();\n      if (oldTarget) {\n        yield oldTarget.destroy();\n        _this13.target.resetInstance();\n      }\n      yield newTarget.initialize();\n      _this13.target.setInstance(newTarget);\n    })();\n  }\n  /**\n   * Check whether the underlying target should be updated.\n   *\n   * @returns Whether target should be updated.\n   */\n  shouldUpdateTarget() {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      var _config$cachingStrate2;\n      const config = yield _this14.getRuntimeConfig();\n      const target = yield _this14.target.getInstance();\n      const originalTarget = target instanceof CoreDebugDatabaseTable ? target.getTarget() : target;\n      return config.debug && target === originalTarget || (originalTarget === null || originalTarget === void 0 ? void 0 : originalTarget.constructor) !== _this14.targetConstructors[(_config$cachingStrate2 = config.cachingStrategy) !== null && _config$cachingStrate2 !== void 0 ? _config$cachingStrate2 : _this14.DEFAULT_CACHING_STRATEGY] || !originalTarget.matchesConfig(config);\n    })();\n  }\n  /**\n   * Create proxy target.\n   *\n   * @returns Target instance.\n   */\n  createTarget() {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const config = yield _this15.getRuntimeConfig();\n      const table = _this15.createTable(config);\n      return config.debug ? new CoreDebugDatabaseTable(table) : table;\n    })();\n  }\n  /**\n   * Create a database table using the given caching strategy.\n   *\n   * @param config Database configuration.\n   * @returns Database table.\n   */\n  createTable(config) {\n    var _config$cachingStrate3;\n    const DatabaseTable = this.targetConstructors[(_config$cachingStrate3 = config.cachingStrategy) !== null && _config$cachingStrate3 !== void 0 ? _config$cachingStrate3 : this.DEFAULT_CACHING_STRATEGY];\n    return new DatabaseTable(config, this.database, this.tableName, this.primaryKeyColumns);\n  }\n}\n/**\n * Database caching strategies.\n */\nexport var CoreDatabaseCachingStrategy;\n(function (CoreDatabaseCachingStrategy) {\n  CoreDatabaseCachingStrategy[\"Eager\"] = \"eager\";\n  CoreDatabaseCachingStrategy[\"Lazy\"] = \"lazy\";\n  CoreDatabaseCachingStrategy[\"None\"] = \"none\";\n})(CoreDatabaseCachingStrategy || (CoreDatabaseCachingStrategy = {}));","map":{"version":3,"names":["CoreConstants","asyncInstance","CoreConfig","CoreConfigProvider","CoreEvents","CoreDatabaseTable","CoreDebugDatabaseTable","CoreEagerDatabaseTable","CoreLazyDatabaseTable","CoreDatabaseTableProxy","constructor","DEFAULT_CACHING_STRATEGY","CoreDatabaseCachingStrategy","None","target","targetConstructors","Eager","Lazy","initialize","_superprop_getInitialize","_this","_asyncToGenerator","call","environmentObserver","on","ENVIRONMENT_UPDATED","shouldUpdateTarget","updateTarget","destroy","_superprop_getDestroy","_this2","_this2$environmentObs","off","matchesConfig","config","_this$config$debug","_this$config$cachingS","_config$debug","_config$cachingStrate","thisDebug","debug","thisCachingStrategy","cachingStrategy","otherDebug","otherCachingStrategy","getMany","conditions","options","_this3","getManyWhere","getOne","_this4","getOneByPrimaryKey","primaryKey","_this5","reduce","reducer","_this6","hasAny","hasAnyByPrimaryKey","count","insert","record","_this7","update","updates","_this8","updateWhere","_this9","delete","_this10","deleteByPrimaryKey","_this11","getRuntimeConfig","_this12","_CoreConstants$CONFIG","ready","_objectSpread","CONFIG","databaseOptimizations","databaseTableOptimizations","tableName","_this13","oldTarget","instance","newTarget","createTarget","resetInstance","setInstance","_this14","_config$cachingStrate2","getInstance","originalTarget","getTarget","_this15","table","createTable","_config$cachingStrate3","DatabaseTable","database","primaryKeyColumns"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/database/database-table-proxy.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreConstants } from '@/core/constants';\nimport { asyncInstance } from '@/core/utils/async-instance';\nimport { SQLiteDBRecordValues } from '@classes/sqlitedb';\nimport { CoreConfig, CoreConfigProvider } from '@services/config';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport {\n    CoreDatabaseConfiguration,\n    CoreDatabaseReducer,\n    CoreDatabaseTable,\n    CoreDatabaseConditions,\n    GetDBRecordPrimaryKey,\n    CoreDatabaseQueryOptions,\n    CoreDatabaseTableConstructor,\n} from './database-table';\nimport { CoreDebugDatabaseTable } from './debug-database-table';\nimport { CoreEagerDatabaseTable } from './eager-database-table';\nimport { CoreLazyDatabaseTable } from './lazy-database-table';\n\n/**\n * Database table proxy used to route database interactions through different implementations.\n *\n * This class allows using a database wrapper with different optimization strategies that can be changed at runtime.\n */\nexport class CoreDatabaseTableProxy<\n    DBRecord extends SQLiteDBRecordValues = SQLiteDBRecordValues,\n    PrimaryKeyColumn extends keyof DBRecord = 'id',\n    PrimaryKey extends GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn> = GetDBRecordPrimaryKey<DBRecord, PrimaryKeyColumn>\n> extends CoreDatabaseTable<DBRecord, PrimaryKeyColumn, PrimaryKey> {\n\n    protected readonly DEFAULT_CACHING_STRATEGY = CoreDatabaseCachingStrategy.None;\n\n    protected target = asyncInstance<CoreDatabaseTable<DBRecord, PrimaryKeyColumn>>();\n    protected environmentObserver?: CoreEventObserver;\n    protected targetConstructors: Record<\n        CoreDatabaseCachingStrategy,\n        CoreDatabaseTableConstructor<DBRecord, PrimaryKeyColumn, PrimaryKey>\n    > = {\n        [CoreDatabaseCachingStrategy.Eager]: CoreEagerDatabaseTable,\n        [CoreDatabaseCachingStrategy.Lazy]: CoreLazyDatabaseTable,\n        [CoreDatabaseCachingStrategy.None]: CoreDatabaseTable,\n    };\n\n    /**\n     * @inheritdoc\n     */\n    async initialize(): Promise<void> {\n        await super.initialize();\n\n        this.environmentObserver = CoreEvents.on(CoreConfigProvider.ENVIRONMENT_UPDATED, async () => {\n            if (!(await this.shouldUpdateTarget())) {\n                return;\n            }\n\n            this.updateTarget();\n        });\n\n        await this.updateTarget();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async destroy(): Promise<void> {\n        await super.destroy();\n\n        this.environmentObserver?.off();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    matchesConfig(config: Partial<CoreDatabaseConfiguration>): boolean {\n        const thisDebug = this.config.debug ?? false;\n        const thisCachingStrategy = this.config.cachingStrategy ?? this.DEFAULT_CACHING_STRATEGY;\n        const otherDebug = config.debug ?? false;\n        const otherCachingStrategy = config.cachingStrategy ?? this.DEFAULT_CACHING_STRATEGY;\n\n        return super.matchesConfig(config) && thisDebug === otherDebug && thisCachingStrategy === otherCachingStrategy;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getMany(conditions?: Partial<DBRecord>, options?: Partial<CoreDatabaseQueryOptions<DBRecord>>): Promise<DBRecord[]> {\n        return this.target.getMany(conditions, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getManyWhere(conditions: CoreDatabaseConditions<DBRecord>): Promise<DBRecord[]>  {\n        return this.target.getManyWhere(conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getOne(\n        conditions?: Partial<DBRecord>,\n        options?: Partial<Omit<CoreDatabaseQueryOptions<DBRecord>, 'offset' | 'limit'>>,\n    ): Promise<DBRecord> {\n        return this.target.getOne(conditions, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getOneByPrimaryKey(primaryKey: PrimaryKey): Promise<DBRecord> {\n        return this.target.getOneByPrimaryKey(primaryKey);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async reduce<T>(reducer: CoreDatabaseReducer<DBRecord, T>, conditions?: CoreDatabaseConditions<DBRecord>): Promise<T> {\n        return this.target.reduce<T>(reducer, conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    hasAny(conditions?: Partial<DBRecord>): Promise<boolean> {\n        return this.target.hasAny(conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    hasAnyByPrimaryKey(primaryKey: PrimaryKey): Promise<boolean> {\n        return this.target.hasAnyByPrimaryKey(primaryKey);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    count(conditions?: Partial<DBRecord>): Promise<number> {\n        return this.target.count(conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async insert(record: DBRecord): Promise<void> {\n        return this.target.insert(record);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async update(updates: Partial<DBRecord>, conditions?: Partial<DBRecord>): Promise<void> {\n        return this.target.update(updates, conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async updateWhere(updates: Partial<DBRecord>, conditions: CoreDatabaseConditions<DBRecord>): Promise<void> {\n        return this.target.updateWhere(updates, conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async delete(conditions?: Partial<DBRecord>): Promise<void> {\n        return this.target.delete(conditions);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async deleteByPrimaryKey(primaryKey: PrimaryKey): Promise<void> {\n        return this.target.deleteByPrimaryKey(primaryKey);\n    }\n\n    /**\n     * Get database configuration to use at runtime.\n     *\n     * @returns Database configuration.\n     */\n    protected async getRuntimeConfig(): Promise<Partial<CoreDatabaseConfiguration>> {\n        await CoreConfig.ready();\n\n        return {\n            ...this.config,\n            ...CoreConstants.CONFIG.databaseOptimizations,\n            ...CoreConstants.CONFIG.databaseTableOptimizations?.[this.tableName],\n        };\n    }\n\n    /**\n     * Update underlying target instance.\n     */\n    protected async updateTarget(): Promise<void> {\n        const oldTarget = this.target.instance;\n        const newTarget = await this.createTarget();\n\n        if (oldTarget) {\n            await oldTarget.destroy();\n\n            this.target.resetInstance();\n        }\n\n        await newTarget.initialize();\n\n        this.target.setInstance(newTarget);\n    }\n\n    /**\n     * Check whether the underlying target should be updated.\n     *\n     * @returns Whether target should be updated.\n     */\n    protected async shouldUpdateTarget(): Promise<boolean> {\n        const config = await this.getRuntimeConfig();\n        const target = await this.target.getInstance();\n        const originalTarget = target instanceof CoreDebugDatabaseTable ? target.getTarget() : target;\n\n        return (config.debug && target === originalTarget)\n            || originalTarget?.constructor !== this.targetConstructors[config.cachingStrategy ?? this.DEFAULT_CACHING_STRATEGY]\n            || !originalTarget.matchesConfig(config);\n    }\n\n    /**\n     * Create proxy target.\n     *\n     * @returns Target instance.\n     */\n    protected async createTarget(): Promise<CoreDatabaseTable<DBRecord, PrimaryKeyColumn>> {\n        const config = await this.getRuntimeConfig();\n        const table = this.createTable(config);\n\n        return config.debug ? new CoreDebugDatabaseTable(table) : table;\n    }\n\n    /**\n     * Create a database table using the given caching strategy.\n     *\n     * @param config Database configuration.\n     * @returns Database table.\n     */\n    protected createTable(config: Partial<CoreDatabaseConfiguration>): CoreDatabaseTable<DBRecord, PrimaryKeyColumn> {\n        const DatabaseTable = this.targetConstructors[config.cachingStrategy ?? this.DEFAULT_CACHING_STRATEGY];\n\n        return new DatabaseTable(config, this.database, this.tableName, this.primaryKeyColumns);\n    }\n\n}\n\ndeclare module '@classes/database/database-table' {\n\n    /**\n     * Augment CoreDatabaseConfiguration interface with data specific to this class.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreDatabaseConfiguration {\n        cachingStrategy: CoreDatabaseCachingStrategy;\n        debug: boolean;\n    }\n\n}\n\n/**\n * Database caching strategies.\n */\nexport enum CoreDatabaseCachingStrategy {\n    Eager = 'eager',\n    Lazy = 'lazy',\n    None = 'none',\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}