{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { AddonQbehaviourDeferredFeedbackHandler } from '@addons/qbehaviour/deferredfeedback/services/handlers/deferredfeedback';\nimport { makeSingleton } from '@singletons';\nimport { CoreQuestionHelper } from '@features/question/services/question-helper';\nimport { AddonQbehaviourDeferredCBMComponent } from '../../component/deferredcbm';\nimport { CoreQuestionDelegate } from '@features/question/services/question-delegate';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to support deferred CBM question behaviour.\n */\nexport class AddonQbehaviourDeferredCBMHandlerService {\n  constructor() {\n    this.name = 'AddonQbehaviourDeferredCBM';\n    this.type = 'deferredcbm';\n  }\n  /**\n   * Determine a question new state based on its answer(s).\n   *\n   * @param component Component the question belongs to.\n   * @param attemptId Attempt ID the question belongs to.\n   * @param question The question.\n   * @param componentId Component ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns New state (or promise resolved with state).\n   */\n  determineNewState(component, attemptId, question, componentId, siteId) {\n    // Depends on deferredfeedback.\n    return AddonQbehaviourDeferredFeedbackHandler.determineNewStateDeferred(component, attemptId, question, componentId, siteId, (...args) => this.isCompleteResponse(...args), (...args) => this.isSameResponse(...args));\n  }\n  /**\n   * Handle a question behaviour.\n   * If the behaviour requires a submit button, it should add it to question.behaviourButtons.\n   * If the behaviour requires to show some extra data, it should return the components to render it.\n   *\n   * @param question The question.\n   * @returns Components (or promise resolved with components) to render some extra data in the question\n   *         (e.g. certainty options). Don't return anything if no extra data is required.\n   */\n  handleQuestion(question) {\n    if (CoreQuestionHelper.extractQbehaviourCBM(question)) {\n      return [AddonQbehaviourDeferredCBMComponent];\n    }\n  }\n  /**\n   * Check if a response is complete.\n   *\n   * @param question The question.\n   * @param answers Object with the question answers (without prefix).\n   * @param component The component the question is related to.\n   * @param componentId Component ID.\n   * @returns 1 if complete, 0 if not complete, -1 if cannot determine.\n   */\n  isCompleteResponse(question, answers, component, componentId) {\n    // First check if the question answer is complete.\n    const complete = CoreQuestionDelegate.isCompleteResponse(question, answers, component, componentId);\n    if (complete > 0) {\n      // Answer is complete, check the user answered CBM too.\n      return answers['-certainty'] ? 1 : 0;\n    }\n    return complete;\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns True or promise resolved with true if enabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * Check if two responses are the same.\n   *\n   * @param question Question.\n   * @param prevAnswers Object with the previous question answers.\n   * @param prevBasicAnswers Object with the previous basic\" answers (without sequencecheck, certainty, ...).\n   * @param newAnswers Object with the new question answers.\n   * @param newBasicAnswers Object with the previous basic\" answers (without sequencecheck, certainty, ...).\n   * @param component The component the question is related to.\n   * @param componentId Component ID.\n   * @returns Whether they're the same.\n   */\n  isSameResponse(question, prevAnswers, prevBasicAnswers, newAnswers, newBasicAnswers, component, componentId) {\n    // First check if the question answer is the same.\n    const sameResponse = CoreQuestionDelegate.isSameResponse(question, prevBasicAnswers, newBasicAnswers, component, componentId);\n    if (sameResponse) {\n      // Same response, check the CBM is the same too.\n      return prevAnswers['-certainty'] == newAnswers['-certainty'];\n    }\n    return sameResponse;\n  }\n}\n_class = AddonQbehaviourDeferredCBMHandlerService;\n_class.ɵfac = function AddonQbehaviourDeferredCBMHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonQbehaviourDeferredCBMHandler = makeSingleton(AddonQbehaviourDeferredCBMHandlerService);","map":{"version":3,"names":["AddonQbehaviourDeferredFeedbackHandler","makeSingleton","CoreQuestionHelper","AddonQbehaviourDeferredCBMComponent","CoreQuestionDelegate","AddonQbehaviourDeferredCBMHandlerService","constructor","name","type","determineNewState","component","attemptId","question","componentId","siteId","determineNewStateDeferred","args","isCompleteResponse","isSameResponse","handleQuestion","extractQbehaviourCBM","answers","complete","isEnabled","_asyncToGenerator","prevAnswers","prevBasicAnswers","newAnswers","newBasicAnswers","sameResponse","factory","ɵfac","providedIn","AddonQbehaviourDeferredCBMHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/qbehaviour/deferredcbm/services/handlers/deferredcbm.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\n\nimport { AddonQbehaviourDeferredFeedbackHandler } from '@addons/qbehaviour/deferredfeedback/services/handlers/deferredfeedback';\nimport { CoreQuestionBehaviourHandler, CoreQuestionQuestionWithAnswers } from '@features/question/services/behaviour-delegate';\nimport { makeSingleton } from '@singletons';\nimport { CoreQuestionQuestionParsed, CoreQuestionsAnswers, CoreQuestionState } from '@features/question/services/question';\nimport { CoreQuestionHelper } from '@features/question/services/question-helper';\nimport { AddonQbehaviourDeferredCBMComponent } from '../../component/deferredcbm';\nimport { CoreQuestionDelegate } from '@features/question/services/question-delegate';\n\n/**\n * Handler to support deferred CBM question behaviour.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonQbehaviourDeferredCBMHandlerService implements CoreQuestionBehaviourHandler {\n\n    name = 'AddonQbehaviourDeferredCBM';\n    type = 'deferredcbm';\n\n    /**\n     * Determine a question new state based on its answer(s).\n     *\n     * @param component Component the question belongs to.\n     * @param attemptId Attempt ID the question belongs to.\n     * @param question The question.\n     * @param componentId Component ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns New state (or promise resolved with state).\n     */\n    determineNewState(\n        component: string,\n        attemptId: number,\n        question: CoreQuestionQuestionWithAnswers,\n        componentId: string | number,\n        siteId?: string,\n    ): CoreQuestionState | Promise<CoreQuestionState> {\n        // Depends on deferredfeedback.\n        return AddonQbehaviourDeferredFeedbackHandler.determineNewStateDeferred(\n            component,\n            attemptId,\n            question,\n            componentId,\n            siteId,\n            (...args) => this.isCompleteResponse(...args),\n            (...args) => this.isSameResponse(...args),\n        );\n    }\n\n    /**\n     * Handle a question behaviour.\n     * If the behaviour requires a submit button, it should add it to question.behaviourButtons.\n     * If the behaviour requires to show some extra data, it should return the components to render it.\n     *\n     * @param question The question.\n     * @returns Components (or promise resolved with components) to render some extra data in the question\n     *         (e.g. certainty options). Don't return anything if no extra data is required.\n     */\n    handleQuestion(question: CoreQuestionQuestionParsed): void | Type<unknown>[] {\n        if (CoreQuestionHelper.extractQbehaviourCBM(question)) {\n            return [AddonQbehaviourDeferredCBMComponent];\n        }\n    }\n\n    /**\n     * Check if a response is complete.\n     *\n     * @param question The question.\n     * @param answers Object with the question answers (without prefix).\n     * @param component The component the question is related to.\n     * @param componentId Component ID.\n     * @returns 1 if complete, 0 if not complete, -1 if cannot determine.\n     */\n    protected isCompleteResponse(\n        question: CoreQuestionQuestionParsed,\n        answers: CoreQuestionsAnswers,\n        component: string,\n        componentId: string | number,\n    ): number {\n        // First check if the question answer is complete.\n        const complete = CoreQuestionDelegate.isCompleteResponse(question, answers, component, componentId);\n        if (complete > 0) {\n            // Answer is complete, check the user answered CBM too.\n            return answers['-certainty'] ? 1 : 0;\n        }\n\n        return complete;\n    }\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns True or promise resolved with true if enabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * Check if two responses are the same.\n     *\n     * @param question Question.\n     * @param prevAnswers Object with the previous question answers.\n     * @param prevBasicAnswers Object with the previous basic\" answers (without sequencecheck, certainty, ...).\n     * @param newAnswers Object with the new question answers.\n     * @param newBasicAnswers Object with the previous basic\" answers (without sequencecheck, certainty, ...).\n     * @param component The component the question is related to.\n     * @param componentId Component ID.\n     * @returns Whether they're the same.\n     */\n    protected isSameResponse(\n        question: CoreQuestionQuestionParsed,\n        prevAnswers: CoreQuestionsAnswers,\n        prevBasicAnswers: CoreQuestionsAnswers,\n        newAnswers: CoreQuestionsAnswers,\n        newBasicAnswers: CoreQuestionsAnswers,\n        component: string,\n        componentId: string | number,\n    ): boolean {\n        // First check if the question answer is the same.\n        const sameResponse = CoreQuestionDelegate.isSameResponse(\n            question,\n            prevBasicAnswers,\n            newBasicAnswers,\n            component,\n            componentId,\n        );\n\n        if (sameResponse) {\n            // Same response, check the CBM is the same too.\n            return prevAnswers['-certainty'] == newAnswers['-certainty'];\n        }\n\n        return sameResponse;\n    }\n\n}\n\nexport const AddonQbehaviourDeferredCBMHandler = makeSingleton(AddonQbehaviourDeferredCBMHandlerService);\n"],"mappings":";;AAgBA,SAASA,sCAAsC,QAAQ,wEAAwE;AAE/H,SAASC,aAAa,QAAQ,aAAa;AAE3C,SAASC,kBAAkB,QAAQ,6CAA6C;AAChF,SAASC,mCAAmC,QAAQ,6BAA6B;AACjF,SAASC,oBAAoB,QAAQ,+CAA+C;;AAEpF;;;AAIA,OAAM,MAAOC,wCAAwC;EADrDC,YAAA;IAGI,KAAAC,IAAI,GAAG,4BAA4B;IACnC,KAAAC,IAAI,GAAG,aAAa;;EAEpB;;;;;;;;;;EAUAC,iBAAiBA,CACbC,SAAiB,EACjBC,SAAiB,EACjBC,QAAyC,EACzCC,WAA4B,EAC5BC,MAAe;IAEf;IACA,OAAOd,sCAAsC,CAACe,yBAAyB,CACnEL,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXC,MAAM,EACN,CAAC,GAAGE,IAAI,KAAK,IAAI,CAACC,kBAAkB,CAAC,GAAGD,IAAI,CAAC,EAC7C,CAAC,GAAGA,IAAI,KAAK,IAAI,CAACE,cAAc,CAAC,GAAGF,IAAI,CAAC,CAC5C;EACL;EAEA;;;;;;;;;EASAG,cAAcA,CAACP,QAAoC;IAC/C,IAAIV,kBAAkB,CAACkB,oBAAoB,CAACR,QAAQ,CAAC,EAAE;MACnD,OAAO,CAACT,mCAAmC,CAAC;;EAEpD;EAEA;;;;;;;;;EASUc,kBAAkBA,CACxBL,QAAoC,EACpCS,OAA6B,EAC7BX,SAAiB,EACjBG,WAA4B;IAE5B;IACA,MAAMS,QAAQ,GAAGlB,oBAAoB,CAACa,kBAAkB,CAACL,QAAQ,EAAES,OAAO,EAAEX,SAAS,EAAEG,WAAW,CAAC;IACnG,IAAIS,QAAQ,GAAG,CAAC,EAAE;MACd;MACA,OAAOD,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC;;IAGxC,OAAOC,QAAQ;EACnB;EAEA;;;;;EAKMC,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB;EAEA;;;;;;;;;;;;EAYUN,cAAcA,CACpBN,QAAoC,EACpCa,WAAiC,EACjCC,gBAAsC,EACtCC,UAAgC,EAChCC,eAAqC,EACrClB,SAAiB,EACjBG,WAA4B;IAE5B;IACA,MAAMgB,YAAY,GAAGzB,oBAAoB,CAACc,cAAc,CACpDN,QAAQ,EACRc,gBAAgB,EAChBE,eAAe,EACflB,SAAS,EACTG,WAAW,CACd;IAED,IAAIgB,YAAY,EAAE;MACd;MACA,OAAOJ,WAAW,CAAC,YAAY,CAAC,IAAIE,UAAU,CAAC,YAAY,CAAC;;IAGhE,OAAOE,YAAY;EACvB;;SAvHSxB,wCAAwC;;mBAAxCA,MAAwC;AAAA;;SAAxCA,MAAwC;EAAAyB,OAAA,EAAxCzB,MAAwC,CAAA0B,IAAA;EAAAC,UAAA,EAD3B;AAAM;AA4HhC,OAAO,MAAMC,iCAAiC,GAAGhC,aAAa,CAACI,wCAAwC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}