{"ast":null,"code":"var _class;\nimport { Push as IonicPush } from '@awesome-cordova-plugins/push/ngx';\nimport * as i0 from \"@angular/core\";\n/**\n * Push plugin wrapper.\n */\nexport class Push extends IonicPush {\n  /**\n   * The getPublicKey method is used to retrieve x.509 public key from the device keychain.\n   * Returns null if the device doesn't support the encryption methods.\n   *\n   * @returns Public key or null.\n   */\n  getPublicKey() {\n    return new Promise((resolve, reject) => PushNotification.getPublicKey(resolve, reject));\n  }\n}\n_class = Push;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵPush_BaseFactory;\n  return function Push_Factory(t) {\n    return (ɵPush_BaseFactory || (ɵPush_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Push","IonicPush","getPublicKey","Promise","resolve","reject","PushNotification","t","factory","ɵfac","providedIn"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/native/plugins/push.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { Push as IonicPush } from '@awesome-cordova-plugins/push/ngx';\n\n/**\n * Push plugin wrapper.\n */\n@Injectable({ providedIn: 'root' })\nexport class Push extends IonicPush {\n\n    /**\n     * The getPublicKey method is used to retrieve x.509 public key from the device keychain.\n     * Returns null if the device doesn't support the encryption methods.\n     *\n     * @returns Public key or null.\n     */\n    getPublicKey(): Promise<string | null> {\n        return new Promise((resolve, reject) => PushNotification.getPublicKey(resolve, reject));\n    }\n\n}\n"],"mappings":";AAeA,SAASA,IAAI,IAAIC,SAAS,QAAQ,mCAAmC;;AAErE;;;AAIA,OAAM,MAAOD,IAAK,SAAQC,SAAS;EAE/B;;;;;;EAMAC,YAAYA,CAAA;IACR,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAKC,gBAAgB,CAACJ,YAAY,CAACE,OAAO,EAAEC,MAAM,CAAC,CAAC;EAC3F;;SAVSL,IAAK;;;;+EAALA,MAAI,IAAAO,CAAA,IAAJP,MAAI;EAAA;AAAA;;SAAJA,MAAI;EAAAQ,OAAA,EAAJR,MAAI,CAAAS,IAAA;EAAAC,UAAA,EADS;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}