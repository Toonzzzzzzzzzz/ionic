{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Render the given styles to be used inline on an element.\n *\n * @param styles Styles.\n * @returns Inline styles.\n */\nexport function renderInlineStyles(styles) {\n  return Object.entries(styles).reduce((renderedStyles, [property, value]) => {\n    const propertyValue = typeof value === 'string' ? value : `${value}px`;\n    return `${property}:${propertyValue};${renderedStyles}`;\n  }, '');\n}","map":{"version":3,"names":["renderInlineStyles","styles","Object","entries","reduce","renderedStyles","property","value","propertyValue"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/utils/style-helpers.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Element styles.\n *\n * Number styles are interpreted as pixels; any other values should be set as a string.\n */\nexport type CoreStyles = Record<string, string | number>;\n\n/**\n * Render the given styles to be used inline on an element.\n *\n * @param styles Styles.\n * @returns Inline styles.\n */\nexport function renderInlineStyles(styles: CoreStyles): string {\n    return Object\n        .entries(styles)\n        .reduce((renderedStyles, [property, value]) => {\n            const propertyValue = typeof value === 'string' ? value : `${value}px`;\n\n            return `${property}:${propertyValue};${renderedStyles}`;\n        }, '');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;;;;;;AAMA,OAAM,SAAUA,kBAAkBA,CAACC,MAAkB;EACjD,OAAOC,MAAM,CACRC,OAAO,CAACF,MAAM,CAAC,CACfG,MAAM,CAAC,CAACC,cAAc,EAAE,CAACC,QAAQ,EAAEC,KAAK,CAAC,KAAI;IAC1C,MAAMC,aAAa,GAAG,OAAOD,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,GAAGA,KAAK,IAAI;IAEtE,OAAO,GAAGD,QAAQ,IAAIE,aAAa,IAAIH,cAAc,EAAE;EAC3D,CAAC,EAAE,EAAE,CAAC;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}