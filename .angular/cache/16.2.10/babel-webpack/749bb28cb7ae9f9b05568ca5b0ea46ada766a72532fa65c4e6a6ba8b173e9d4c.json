{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreSites } from '@services/sites';\nimport { CorePath } from '@singletons/path';\n/**\n * xAPI IRI values generator.\n */\nexport class CoreXAPIIRI {\n  /**\n   * Generate a valid IRI element from a value and an optional type.\n   *\n   * @param value Value.\n   * @param type Type (e.g. 'activity'). Defaults to 'element'.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  static generate(value, type = 'element', siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return CorePath.concatenatePaths(site.getURL(), `xapi/${type}/${value}`);\n    })();\n  }\n  /**\n   * Try to extract the original value from an IRI.\n   *\n   * @param iri IRI.\n   * @param type Type (e.g. 'activity'). Defaults to 'element'.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  static extract(iri, type = 'element', siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const baseUrl = CorePath.concatenatePaths(site.getURL(), `xapi/${type}/`);\n      return iri.replace(baseUrl, '');\n    })();\n  }\n}","map":{"version":3,"names":["CoreSites","CorePath","CoreXAPIIRI","generate","value","type","siteId","_asyncToGenerator","site","getSite","concatenatePaths","getURL","extract","iri","baseUrl","replace"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/xapi/classes/iri.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSites } from '@services/sites';\nimport { CorePath } from '@singletons/path';\n\n/**\n * xAPI IRI values generator.\n */\nexport class CoreXAPIIRI {\n\n    /**\n     * Generate a valid IRI element from a value and an optional type.\n     *\n     * @param value Value.\n     * @param type Type (e.g. 'activity'). Defaults to 'element'.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    static async generate(value: string|number, type = 'element', siteId?: string): Promise<string> {\n        const site = await CoreSites.getSite(siteId);\n\n        return CorePath.concatenatePaths(site.getURL(), `xapi/${type}/${value}`);\n    }\n\n    /**\n     * Try to extract the original value from an IRI.\n     *\n     * @param iri IRI.\n     * @param type Type (e.g. 'activity'). Defaults to 'element'.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    static async extract(iri: string, type = 'element', siteId?: string): Promise<string> {\n        const site = await CoreSites.getSite(siteId);\n\n        const baseUrl = CorePath.concatenatePaths(site.getURL(), `xapi/${type}/`);\n\n        return iri.replace(baseUrl, '');\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,QAAQ,QAAQ,kBAAkB;AAE3C;;;AAGA,OAAM,MAAOC,WAAW;EAEpB;;;;;;;;EAQA,OAAaC,QAAQA,CAACC,KAAoB,EAAEC,IAAI,GAAG,SAAS,EAAEC,MAAe;IAAA,OAAAC,iBAAA;MACzE,MAAMC,IAAI,SAASR,SAAS,CAACS,OAAO,CAACH,MAAM,CAAC;MAE5C,OAAOL,QAAQ,CAACS,gBAAgB,CAACF,IAAI,CAACG,MAAM,EAAE,EAAE,QAAQN,IAAI,IAAID,KAAK,EAAE,CAAC;IAAC;EAC7E;EAEA;;;;;;;;EAQA,OAAaQ,OAAOA,CAACC,GAAW,EAAER,IAAI,GAAG,SAAS,EAAEC,MAAe;IAAA,OAAAC,iBAAA;MAC/D,MAAMC,IAAI,SAASR,SAAS,CAACS,OAAO,CAACH,MAAM,CAAC;MAE5C,MAAMQ,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,IAAI,CAACG,MAAM,EAAE,EAAE,QAAQN,IAAI,GAAG,CAAC;MAEzE,OAAOQ,GAAG,CAACE,OAAO,CAACD,OAAO,EAAE,EAAE,CAAC;IAAC;EACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}