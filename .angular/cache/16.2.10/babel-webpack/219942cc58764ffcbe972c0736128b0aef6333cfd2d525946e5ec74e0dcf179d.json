{"ast":null,"code":"var _class;\nimport { CoreTextUtils } from '@services/utils/text';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldTextHandlerService } from '../../text/services/handler';\nimport { AddonModDataFieldTextareaComponent } from '../component/textarea';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for textarea data field plugin.\n */\nexport class AddonModDataFieldTextareaHandlerService extends AddonModDataFieldTextHandlerService {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModDataFieldTextareaHandler';\n    this.type = 'textarea';\n  }\n  /**\n   * @inheritdoc\n   */\n  getComponent() {\n    return AddonModDataFieldTextareaComponent;\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldEditData(field, inputData, originalFieldData) {\n    const fieldName = 'f_' + field.id;\n    const files = this.getFieldEditFiles(field, inputData, originalFieldData);\n    let text = CoreTextUtils.restorePluginfileUrls(inputData[fieldName] || '', files);\n    // Add some HTML to the text if needed.\n    text = CoreTextUtils.formatHtmlLines(text);\n    // WS does not properly check if HTML content is blank when the field is required.\n    if (CoreTextUtils.htmlIsBlank(text)) {\n      text = '';\n    }\n    return [{\n      fieldid: field.id,\n      value: text\n    }, {\n      fieldid: field.id,\n      subfield: 'content1',\n      value: 1\n    }, {\n      fieldid: field.id,\n      subfield: 'itemid',\n      files: files\n    }];\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldEditFiles(field, inputData, originalFieldData) {\n    return originalFieldData && originalFieldData.files || [];\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldsNotifications(field, inputData) {\n    if (!field.required) {\n      return;\n    }\n    if (!inputData || !inputData.length) {\n      return Translate.instant('addon.mod_data.errormustsupplyvalue');\n    }\n    const value = inputData.find(value => value.subfield == '');\n    if (!value || CoreTextUtils.htmlIsBlank(value.value || '')) {\n      return Translate.instant('addon.mod_data.errormustsupplyvalue');\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  overrideData(originalContent, offlineContent) {\n    originalContent.content = offlineContent[''] || '';\n    if (originalContent.content.length > 0 && originalContent.files && originalContent.files.length > 0) {\n      // Take the original files since we cannot edit them on the app.\n      originalContent.content = CoreTextUtils.replacePluginfileUrls(originalContent.content, originalContent.files);\n    }\n    return originalContent;\n  }\n}\n_class = AddonModDataFieldTextareaHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModDataFieldTextareaHandlerService_BaseFactory;\n  return function AddonModDataFieldTextareaHandlerService_Factory(t) {\n    return (ɵAddonModDataFieldTextareaHandlerService_BaseFactory || (ɵAddonModDataFieldTextareaHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModDataFieldTextareaHandler = makeSingleton(AddonModDataFieldTextareaHandlerService);","map":{"version":3,"names":["CoreTextUtils","makeSingleton","Translate","AddonModDataFieldTextHandlerService","AddonModDataFieldTextareaComponent","AddonModDataFieldTextareaHandlerService","constructor","name","type","getComponent","getFieldEditData","field","inputData","originalFieldData","fieldName","id","files","getFieldEditFiles","text","restorePluginfileUrls","formatHtmlLines","htmlIsBlank","fieldid","value","subfield","getFieldsNotifications","required","length","instant","find","overrideData","originalContent","offlineContent","content","replacePluginfileUrls","t","factory","ɵfac","providedIn","AddonModDataFieldTextareaHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/fields/textarea/services/handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AddonModDataEntryField, AddonModDataField, AddonModDataSubfieldData } from '@addons/mod/data/services/data';\nimport { Injectable, Type } from '@angular/core';\nimport { CoreFormFields } from '@singletons/form';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreWSFile } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldTextHandlerService } from '../../text/services/handler';\nimport { AddonModDataFieldTextareaComponent } from '../component/textarea';\nimport { CoreFileEntry } from '@services/file-helper';\nimport type { AddonModDataFieldPluginBaseComponent } from '@addons/mod/data/classes/base-field-plugin-component';\n\n/**\n * Handler for textarea data field plugin.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModDataFieldTextareaHandlerService extends AddonModDataFieldTextHandlerService {\n\n    name = 'AddonModDataFieldTextareaHandler';\n    type = 'textarea';\n\n    /**\n     * @inheritdoc\n     */\n    getComponent(): Type<AddonModDataFieldPluginBaseComponent> {\n        return AddonModDataFieldTextareaComponent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldEditData(\n        field: AddonModDataField,\n        inputData: CoreFormFields<string>,\n        originalFieldData: AddonModDataEntryField,\n    ): AddonModDataSubfieldData[] {\n        const fieldName = 'f_' + field.id;\n        const files = this.getFieldEditFiles(field, inputData, originalFieldData);\n\n        let text = CoreTextUtils.restorePluginfileUrls(inputData[fieldName] || '', <CoreWSFile[]> files);\n        // Add some HTML to the text if needed.\n        text = CoreTextUtils.formatHtmlLines(text);\n\n        // WS does not properly check if HTML content is blank when the field is required.\n        if (CoreTextUtils.htmlIsBlank(text)) {\n            text = '';\n        }\n\n        return [\n            {\n                fieldid: field.id,\n                value: text,\n            },\n            {\n                fieldid: field.id,\n                subfield: 'content1',\n                value: 1,\n            },\n            {\n                fieldid: field.id,\n                subfield: 'itemid',\n                files: files,\n            },\n        ];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldEditFiles(\n        field: AddonModDataField,\n        inputData: CoreFormFields,\n        originalFieldData: AddonModDataEntryField,\n    ): CoreFileEntry[] {\n        return (originalFieldData && originalFieldData.files) || [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldsNotifications(field: AddonModDataField, inputData: AddonModDataSubfieldData[]): string | undefined {\n        if (!field.required) {\n            return;\n        }\n\n        if (!inputData || !inputData.length) {\n            return Translate.instant('addon.mod_data.errormustsupplyvalue');\n        }\n\n        const value = inputData.find((value) => value.subfield == '');\n\n        if (!value || CoreTextUtils.htmlIsBlank(<string>value.value || '')) {\n            return Translate.instant('addon.mod_data.errormustsupplyvalue');\n        }\n\n    }\n\n    /**\n     * @inheritdoc\n     */\n    overrideData(originalContent: AddonModDataEntryField, offlineContent: CoreFormFields<string>): AddonModDataEntryField {\n        originalContent.content = offlineContent[''] || '';\n        if (originalContent.content.length > 0 && originalContent.files && originalContent.files.length > 0) {\n            // Take the original files since we cannot edit them on the app.\n            originalContent.content = CoreTextUtils.replacePluginfileUrls(\n                originalContent.content,\n                <CoreWSFile[]> originalContent.files,\n            );\n        }\n\n        return originalContent;\n    }\n\n}\nexport const AddonModDataFieldTextareaHandler = makeSingleton(AddonModDataFieldTextareaHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}