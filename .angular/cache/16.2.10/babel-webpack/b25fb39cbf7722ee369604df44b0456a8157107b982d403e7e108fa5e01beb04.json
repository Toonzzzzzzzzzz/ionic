{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { Zip } from '@features/native/plugins/zip';\nimport * as JSZip from 'jszip';\nimport { CorePath } from '@singletons/path';\nimport { File } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Emulates the Cordova Zip plugin in browser.\n */\nexport class ZipMock extends Zip {\n  /**\n   * Create a directory. It creates all the foldes in dirPath 1 by 1 to prevent errors.\n   *\n   * @param destination Destination parent folder.\n   * @param dirPath Relative path to the folder.\n   * @returns Promise resolved when done.\n   */\n  createDir(destination, dirPath) {\n    return _asyncToGenerator(function* () {\n      // Create all the folders 1 by 1 in order, otherwise it fails.\n      const folders = dirPath.split('/');\n      for (let i = 0; i < folders.length; i++) {\n        const folder = folders[i];\n        yield File.createDir(destination, folder, true);\n        // Folder created, add it to the destination path.\n        destination = CorePath.concatenatePaths(destination, folder);\n      }\n    })();\n  }\n  /**\n   * Extracts files from a ZIP archive.\n   *\n   * @param source Path to the source ZIP file.\n   * @param destination Destination folder.\n   * @param onProgress Optional callback to be called on progress update\n   * @returns Promise that resolves with a number. 0 is success, -1 is error.\n   */\n  unzip(source, destination, onProgress) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Replace all %20 with spaces.\n      source = source.replace(/%20/g, ' ');\n      destination = destination.replace(/%20/g, ' ');\n      const sourceDir = source.substring(0, source.lastIndexOf('/'));\n      const sourceName = source.substring(source.lastIndexOf('/') + 1);\n      const zip = new JSZip();\n      try {\n        // Read the file first.\n        const data = yield File.readAsArrayBuffer(sourceDir, sourceName);\n        // Now load the file using the JSZip library.\n        yield zip.loadAsync(data);\n        if (!zip.files || !Object.keys(zip.files).length) {\n          // Nothing to extract.\n          return 0;\n        }\n        // First of all, create the directory where the files will be unzipped.\n        const destParent = destination.substring(0, destination.lastIndexOf('/'));\n        const destFolderName = destination.substring(destination.lastIndexOf('/') + 1);\n        yield File.createDir(destParent, destFolderName, true);\n        const total = Object.keys(zip.files).length;\n        let loaded = 0;\n        yield Promise.all(Object.keys(zip.files).map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (name) {\n            const file = zip.files[name];\n            if (!file.dir) {\n              // It's a file.\n              const fileDir = name.substring(0, name.lastIndexOf('/'));\n              const fileName = name.substring(name.lastIndexOf('/') + 1);\n              if (fileDir) {\n                // The file is in a subfolder, create it first.\n                yield _this.createDir(destination, fileDir);\n              }\n              // Read the file contents as a Blob.\n              const fileData = yield file.async('blob');\n              // File read and parent folder created, now write the file.\n              const parentFolder = CorePath.concatenatePaths(destination, fileDir);\n              yield File.writeFile(parentFolder, fileName, fileData, {\n                replace: true\n              });\n            } else {\n              // It's a folder, create it if it doesn't exist.\n              yield _this.createDir(destination, name);\n            }\n            // File unzipped, call the progress.\n            loaded++;\n            onProgress && onProgress({\n              loaded: loaded,\n              total: total\n            });\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()));\n        return 0;\n      } catch (error) {\n        // Error.\n        return -1;\n      }\n    })();\n  }\n}\n_class = ZipMock;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵZipMock_BaseFactory;\n  return function ZipMock_Factory(t) {\n    return (ɵZipMock_BaseFactory || (ɵZipMock_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["Zip","JSZip","CorePath","File","ZipMock","createDir","destination","dirPath","_asyncToGenerator","folders","split","i","length","folder","concatenatePaths","unzip","source","onProgress","_this","replace","sourceDir","substring","lastIndexOf","sourceName","zip","data","readAsArrayBuffer","loadAsync","files","Object","keys","destParent","destFolderName","total","loaded","Promise","all","map","_ref","name","file","dir","fileDir","fileName","fileData","async","parentFolder","writeFile","_x","apply","arguments","error","t","factory","ɵfac"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/emulator/services/zip.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { Zip } from '@features/native/plugins/zip';\nimport * as JSZip from 'jszip';\nimport { CorePath } from '@singletons/path';\nimport { File } from '@singletons';\n\n/**\n * Emulates the Cordova Zip plugin in browser.\n */\n@Injectable()\nexport class ZipMock extends Zip {\n\n    /**\n     * Create a directory. It creates all the foldes in dirPath 1 by 1 to prevent errors.\n     *\n     * @param destination Destination parent folder.\n     * @param dirPath Relative path to the folder.\n     * @returns Promise resolved when done.\n     */\n    protected async createDir(destination: string, dirPath: string): Promise<void> {\n        // Create all the folders 1 by 1 in order, otherwise it fails.\n        const folders = dirPath.split('/');\n\n        for (let i = 0; i < folders.length; i++) {\n            const folder = folders[i];\n\n            await File.createDir(destination, folder, true);\n\n            // Folder created, add it to the destination path.\n            destination = CorePath.concatenatePaths(destination, folder);\n        }\n    }\n\n    /**\n     * Extracts files from a ZIP archive.\n     *\n     * @param source Path to the source ZIP file.\n     * @param destination Destination folder.\n     * @param onProgress Optional callback to be called on progress update\n     * @returns Promise that resolves with a number. 0 is success, -1 is error.\n     */\n    async unzip(source: string, destination: string, onProgress?: (ev: {loaded: number; total: number}) => void): Promise<number> {\n        // Replace all %20 with spaces.\n        source = source.replace(/%20/g, ' ');\n        destination = destination.replace(/%20/g, ' ');\n\n        const sourceDir = source.substring(0, source.lastIndexOf('/'));\n        const sourceName = source.substring(source.lastIndexOf('/') + 1);\n        const zip = new JSZip();\n\n        try {\n            // Read the file first.\n            const data = await File.readAsArrayBuffer(sourceDir, sourceName);\n\n            // Now load the file using the JSZip library.\n            await zip.loadAsync(data);\n\n            if (!zip.files || !Object.keys(zip.files).length) {\n                // Nothing to extract.\n                return 0;\n            }\n\n            // First of all, create the directory where the files will be unzipped.\n            const destParent = destination.substring(0, destination.lastIndexOf('/'));\n            const destFolderName = destination.substring(destination.lastIndexOf('/') + 1);\n\n            await File.createDir(destParent, destFolderName, true);\n\n            const total = Object.keys(zip.files).length;\n            let loaded = 0;\n\n            await Promise.all(Object.keys(zip.files).map(async (name) => {\n                const file = zip.files[name];\n\n                if (!file.dir) {\n                    // It's a file.\n                    const fileDir = name.substring(0, name.lastIndexOf('/'));\n                    const fileName = name.substring(name.lastIndexOf('/') + 1);\n\n                    if (fileDir) {\n                        // The file is in a subfolder, create it first.\n                        await this.createDir(destination, fileDir);\n                    }\n\n                    // Read the file contents as a Blob.\n                    const fileData = await file.async('blob');\n\n                    // File read and parent folder created, now write the file.\n                    const parentFolder = CorePath.concatenatePaths(destination, fileDir);\n\n                    await File.writeFile(parentFolder, fileName, fileData, { replace: true });\n                } else {\n                    // It's a folder, create it if it doesn't exist.\n                    await this.createDir(destination, name);\n                }\n\n                // File unzipped, call the progress.\n                loaded++;\n                onProgress && onProgress({ loaded: loaded, total: total });\n            }));\n\n            return 0;\n        } catch (error) {\n            // Error.\n            return -1;\n        }\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}