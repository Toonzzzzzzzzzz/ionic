{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CorePath } from './path';\n/**\n * Singleton with helper functions for text manipulation.\n */\nexport class CoreText {\n  // Avoid creating singleton instances.\n  constructor() {\n    // Nothing to do.\n  }\n  /**\n   * Add starting slash to a string if needed.\n   *\n   * @param text Text to treat.\n   * @returns Treated text.\n   */\n  static addStartingSlash(text = '') {\n    if (text[0] === '/') {\n      return text;\n    }\n    return '/' + text;\n  }\n  /**\n   * Remove ending slash from a path or URL.\n   *\n   * @param text Text to treat.\n   * @returns Treated text.\n   */\n  static removeEndingSlash(text) {\n    if (!text) {\n      return '';\n    }\n    if (text.slice(-1) == '/') {\n      return text.substring(0, text.length - 1);\n    }\n    return text;\n  }\n  /**\n   * Remove starting slash from a string if needed.\n   *\n   * @param text Text to treat.\n   * @returns Treated text.\n   */\n  static removeStartingSlash(text = '') {\n    if (text[0] !== '/') {\n      return text;\n    }\n    return text.substring(1);\n  }\n  /**\n   * Concatenate two paths, adding a slash between them if needed.\n   *\n   * @param leftPath Left path.\n   * @param rightPath Right path.\n   * @returns Concatenated path.\n   * @deprecated since 4.1. Use CorePath.concatenatePaths instead.\n   */\n  static concatenatePaths(leftPath, rightPath) {\n    return CorePath.concatenatePaths(leftPath, rightPath);\n  }\n}","map":{"version":3,"names":["CorePath","CoreText","constructor","addStartingSlash","text","removeEndingSlash","slice","substring","length","removeStartingSlash","concatenatePaths","leftPath","rightPath"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/singletons/text.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CorePath } from './path';\n\n/**\n * Singleton with helper functions for text manipulation.\n */\nexport class CoreText {\n\n    // Avoid creating singleton instances.\n    private constructor() {\n        // Nothing to do.\n    }\n\n    /**\n     * Add starting slash to a string if needed.\n     *\n     * @param text Text to treat.\n     * @returns Treated text.\n     */\n    static addStartingSlash(text = ''): string {\n        if (text[0] === '/') {\n            return text;\n        }\n\n        return '/' + text;\n    }\n\n    /**\n     * Remove ending slash from a path or URL.\n     *\n     * @param text Text to treat.\n     * @returns Treated text.\n     */\n    static removeEndingSlash(text?: string): string {\n        if (!text) {\n            return '';\n        }\n\n        if (text.slice(-1) == '/') {\n            return text.substring(0, text.length - 1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Remove starting slash from a string if needed.\n     *\n     * @param text Text to treat.\n     * @returns Treated text.\n     */\n    static removeStartingSlash(text = ''): string {\n        if (text[0] !== '/') {\n            return text;\n        }\n\n        return text.substring(1);\n    }\n\n    /**\n     * Concatenate two paths, adding a slash between them if needed.\n     *\n     * @param leftPath Left path.\n     * @param rightPath Right path.\n     * @returns Concatenated path.\n     * @deprecated since 4.1. Use CorePath.concatenatePaths instead.\n     */\n    static concatenatePaths(leftPath: string, rightPath: string): string {\n        return CorePath.concatenatePaths(leftPath, rightPath);\n    }\n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAQ,QAAQ,QAAQ;AAEjC;;;AAGA,OAAM,MAAOC,QAAQ;EAEjB;EACAC,YAAA;IACI;EAAA;EAGJ;;;;;;EAMA,OAAOC,gBAAgBA,CAACC,IAAI,GAAG,EAAE;IAC7B,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACjB,OAAOA,IAAI;;IAGf,OAAO,GAAG,GAAGA,IAAI;EACrB;EAEA;;;;;;EAMA,OAAOC,iBAAiBA,CAACD,IAAa;IAClC,IAAI,CAACA,IAAI,EAAE;MACP,OAAO,EAAE;;IAGb,IAAIA,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;MACvB,OAAOF,IAAI,CAACG,SAAS,CAAC,CAAC,EAAEH,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC;;IAG7C,OAAOJ,IAAI;EACf;EAEA;;;;;;EAMA,OAAOK,mBAAmBA,CAACL,IAAI,GAAG,EAAE;IAChC,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACjB,OAAOA,IAAI;;IAGf,OAAOA,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC;EAC5B;EAEA;;;;;;;;EAQA,OAAOG,gBAAgBA,CAACC,QAAgB,EAAEC,SAAiB;IACvD,OAAOZ,QAAQ,CAACU,gBAAgB,CAACC,QAAQ,EAAEC,SAAS,CAAC;EACzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}