{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSyncBaseProvider } from '@classes/base-sync';\nimport { CoreNetworkError } from '@classes/errors/network-error';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreRating } from './rating';\nimport { CoreRatingOffline } from './rating-offline';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to sync ratings.\n */\nexport class CoreRatingSyncProvider extends CoreSyncBaseProvider {\n  constructor() {\n    super('CoreRatingSyncProvider');\n  }\n  /**\n   * Try to synchronize all the ratings of a certain component, instance or item set.\n   *\n   * This function should be called from the sync provider of activities with ratings.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating Area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemSetId Item set id.\n   * @param force Wether to force sync not depending on last execution.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected if sync fails.\n   */\n  syncRatings(component, ratingArea, contextLevel, instanceId, itemSetId, force, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const itemSets = yield CoreRatingOffline.getItemSets(component, ratingArea, contextLevel, instanceId, itemSetId, siteId);\n      const results = [];\n      yield Promise.all(itemSets.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (itemSet) {\n          const result = force ? yield _this.syncItemSet(component, ratingArea, itemSet.contextLevel, itemSet.instanceId, itemSet.itemSetId, siteId) : yield _this.syncItemSetIfNeeded(component, ratingArea, itemSet.contextLevel, itemSet.instanceId, itemSet.itemSetId, siteId);\n          if (result) {\n            if (result.updated) {\n              // Sync successful, send event.\n              CoreEvents.trigger(CoreRatingSyncProvider.SYNCED_EVENT, _objectSpread(_objectSpread({}, itemSet), {}, {\n                warnings: result.warnings\n              }), siteId);\n            }\n            results.push(_objectSpread({\n              itemSet\n            }, result));\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      return results;\n    })();\n  }\n  /**\n   * Sync ratings of an item set only if a certain time has passed since the last time.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating Area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemSetId Item set id. Example: forum discussion id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when ratings are synced or if it doesn't need to be synced.\n   */\n  syncItemSetIfNeeded(component, ratingArea, contextLevel, instanceId, itemSetId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const syncId = _this2.getItemSetSyncId(component, ratingArea, contextLevel, instanceId, itemSetId);\n      const needed = yield _this2.isSyncNeeded(syncId, siteId);\n      if (needed) {\n        return _this2.syncItemSet(component, ratingArea, contextLevel, instanceId, itemSetId, siteId);\n      }\n    })();\n  }\n  /**\n   * Synchronize all offline ratings of an item set.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating Area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemSetId Item set id. Example: forum discussion id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  syncItemSet(component, ratingArea, contextLevel, instanceId, itemSetId, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    const syncId = this.getItemSetSyncId(component, ratingArea, contextLevel, instanceId, itemSetId);\n    const currentSyncPromise = this.getOngoingSync(syncId, siteId);\n    if (currentSyncPromise) {\n      // There's already a sync ongoing for this item set, return the promise.\n      return currentSyncPromise;\n    }\n    this.logger.debug(`Try to sync ratings of component '${component}' rating area '${ratingArea}'` + ` context level '${contextLevel}' instance ${instanceId} item set ${itemSetId}`);\n    // Get offline events.\n    const syncPromise = this.performSyncItemSet(component, ratingArea, contextLevel, instanceId, itemSetId, siteId);\n    return this.addOngoingSync(syncId, syncPromise, siteId);\n  }\n  /**\n   * Synchronize all offline ratings of an item set.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating Area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemSetId Item set id. Example: forum discussion id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  performSyncItemSet(component, ratingArea, contextLevel, instanceId, itemSetId, siteId) {\n    return _asyncToGenerator(function* () {\n      const result = {\n        updated: [],\n        warnings: []\n      };\n      const ratings = yield CoreRatingOffline.getRatings(component, ratingArea, contextLevel, instanceId, itemSetId, siteId);\n      if (!ratings.length) {\n        // Nothing to sync.\n        return result;\n      }\n      if (!CoreNetwork.isOnline()) {\n        // Cannot sync in offline.\n        throw new CoreNetworkError();\n      }\n      const promises = ratings.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (rating) {\n          try {\n            yield CoreRating.addRatingOnline(component, ratingArea, rating.contextlevel, rating.instanceid, rating.itemid, rating.scaleid, rating.rating, rating.rateduserid, rating.aggregation, siteId);\n          } catch (error) {\n            if (!CoreUtils.isWebServiceError(error)) {\n              // Couldn't connect to server, reject.\n              throw error;\n            }\n            const warning = CoreTextUtils.getErrorMessageFromError(error);\n            if (warning) {\n              result.warnings.push(warning);\n            }\n          }\n          result.updated.push(rating.itemid);\n          try {\n            return CoreRatingOffline.deleteRating(component, ratingArea, rating.contextlevel, rating.instanceid, rating.itemid, siteId);\n          } finally {\n            yield CoreRating.invalidateRatingItems(rating.contextlevel, rating.instanceid, component, ratingArea, rating.itemid, rating.scaleid, undefined, siteId);\n          }\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      yield Promise.all(promises);\n      // All done, return the result.\n      return result;\n    })();\n  }\n  /**\n   * Get the sync id of an item set.\n   *\n   * @param component Component. Example: \"mod_forum\".\n   * @param ratingArea Rating Area. Example: \"post\".\n   * @param contextLevel Context level: course, module, user, etc.\n   * @param instanceId Context instance id.\n   * @param itemSetId Item set id. Example: forum discussion id.\n   * @returns Sync id.\n   */\n  getItemSetSyncId(component, ratingArea, contextLevel, instanceId, itemSetId) {\n    return `itemSet#${component}#${ratingArea}#${contextLevel}#${instanceId}#${itemSetId}`;\n  }\n}\n_class = CoreRatingSyncProvider;\n_class.SYNCED_EVENT = 'core_rating_synced';\n_class.ɵfac = function CoreRatingSyncProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreRatingSync = makeSingleton(CoreRatingSyncProvider);","map":{"version":3,"names":["CoreSyncBaseProvider","CoreNetworkError","CoreNetwork","CoreSites","CoreTextUtils","CoreUtils","makeSingleton","CoreEvents","CoreRating","CoreRatingOffline","CoreRatingSyncProvider","constructor","syncRatings","component","ratingArea","contextLevel","instanceId","itemSetId","force","siteId","_this","_asyncToGenerator","getCurrentSiteId","itemSets","getItemSets","results","Promise","all","map","_ref","itemSet","result","syncItemSet","syncItemSetIfNeeded","updated","trigger","SYNCED_EVENT","_objectSpread","warnings","push","_x","apply","arguments","_this2","syncId","getItemSetSyncId","needed","isSyncNeeded","currentSyncPromise","getOngoingSync","logger","debug","syncPromise","performSyncItemSet","addOngoingSync","ratings","getRatings","length","isOnline","promises","_ref2","rating","addRatingOnline","contextlevel","instanceid","itemid","scaleid","rateduserid","aggregation","error","isWebServiceError","warning","getErrorMessageFromError","deleteRating","invalidateRatingItems","undefined","_x2","_class","factory","ɵfac","providedIn","CoreRatingSync"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/rating/services/rating-sync.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ContextLevel } from '@/core/constants';\nimport { Injectable } from '@angular/core';\nimport { CoreSyncBaseProvider } from '@classes/base-sync';\nimport { CoreNetworkError } from '@classes/errors/network-error';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreRating } from './rating';\nimport { CoreRatingItemSet, CoreRatingOffline } from './rating-offline';\n\n/**\n * Service to sync ratings.\n */\n@Injectable( { providedIn: 'root' })\nexport class CoreRatingSyncProvider extends CoreSyncBaseProvider<CoreRatingSyncItem> {\n\n    static readonly SYNCED_EVENT = 'core_rating_synced';\n\n    constructor() {\n        super('CoreRatingSyncProvider');\n    }\n\n    /**\n     * Try to synchronize all the ratings of a certain component, instance or item set.\n     *\n     * This function should be called from the sync provider of activities with ratings.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating Area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemSetId Item set id.\n     * @param force Wether to force sync not depending on last execution.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected if sync fails.\n     */\n    async syncRatings(\n        component: string,\n        ratingArea: string,\n        contextLevel?: ContextLevel,\n        instanceId?: number,\n        itemSetId?: number,\n        force?: boolean,\n        siteId?: string,\n    ): Promise<CoreRatingSyncItemResult[]> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const itemSets = await CoreRatingOffline.getItemSets(component, ratingArea, contextLevel, instanceId, itemSetId, siteId);\n\n        const results: CoreRatingSyncItemResult[] = [];\n        await Promise.all(itemSets.map(async (itemSet) => {\n            const result = force\n                ? await this.syncItemSet(\n                    component,\n                    ratingArea,\n                    itemSet.contextLevel,\n                    itemSet.instanceId,\n                    itemSet.itemSetId,\n                    siteId,\n                )\n                : await this.syncItemSetIfNeeded(\n                    component,\n                    ratingArea,\n                    itemSet.contextLevel,\n                    itemSet.instanceId,\n                    itemSet.itemSetId,\n                    siteId,\n                );\n\n            if (result) {\n                if (result.updated) {\n                    // Sync successful, send event.\n                    CoreEvents.trigger(CoreRatingSyncProvider.SYNCED_EVENT, {\n                        ...itemSet,\n                        warnings: result.warnings,\n                    }, siteId);\n                }\n\n                results.push(\n                    {\n                        itemSet,\n                        ...result,\n                    },\n                );\n            }\n        }));\n\n        return results;\n    }\n\n    /**\n     * Sync ratings of an item set only if a certain time has passed since the last time.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating Area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemSetId Item set id. Example: forum discussion id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when ratings are synced or if it doesn't need to be synced.\n     */\n    protected async syncItemSetIfNeeded(\n        component: string,\n        ratingArea: string,\n        contextLevel: ContextLevel,\n        instanceId: number,\n        itemSetId: number,\n        siteId?: string,\n    ): Promise<CoreRatingSyncItem | undefined> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const syncId = this.getItemSetSyncId(component, ratingArea, contextLevel, instanceId, itemSetId);\n\n        const needed = await this.isSyncNeeded(syncId, siteId);\n\n        if (needed) {\n            return this.syncItemSet(component, ratingArea, contextLevel, instanceId, itemSetId, siteId);\n        }\n    }\n\n    /**\n     * Synchronize all offline ratings of an item set.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating Area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemSetId Item set id. Example: forum discussion id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    protected syncItemSet(\n        component: string,\n        ratingArea: string,\n        contextLevel: ContextLevel,\n        instanceId: number,\n        itemSetId: number,\n        siteId?: string,\n    ): Promise<CoreRatingSyncItem> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const syncId = this.getItemSetSyncId(component, ratingArea, contextLevel, instanceId, itemSetId);\n        const currentSyncPromise = this.getOngoingSync(syncId, siteId);\n        if (currentSyncPromise) {\n            // There's already a sync ongoing for this item set, return the promise.\n            return currentSyncPromise;\n        }\n\n        this.logger.debug(`Try to sync ratings of component '${component}' rating area '${ratingArea}'` +\n            ` context level '${contextLevel}' instance ${instanceId} item set ${itemSetId}`);\n\n        // Get offline events.\n        const syncPromise = this.performSyncItemSet(component, ratingArea, contextLevel, instanceId, itemSetId, siteId);\n\n        return this.addOngoingSync(syncId, syncPromise, siteId);\n    }\n\n    /**\n     * Synchronize all offline ratings of an item set.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating Area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemSetId Item set id. Example: forum discussion id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    protected async performSyncItemSet(\n        component: string,\n        ratingArea: string,\n        contextLevel: ContextLevel,\n        instanceId: number,\n        itemSetId: number,\n        siteId: string,\n    ): Promise<CoreRatingSyncItem> {\n        const result: CoreRatingSyncItem = {\n            updated: [],\n            warnings: [],\n        };\n\n        const ratings = await CoreRatingOffline.getRatings(component, ratingArea, contextLevel, instanceId, itemSetId, siteId);\n\n        if (!ratings.length) {\n            // Nothing to sync.\n            return result;\n        }\n        if (!CoreNetwork.isOnline()) {\n            // Cannot sync in offline.\n            throw new CoreNetworkError();\n        }\n\n        const promises = ratings.map(async (rating) => {\n            try {\n                await CoreRating.addRatingOnline(\n                    component,\n                    ratingArea,\n                    rating.contextlevel,\n                    rating.instanceid,\n                    rating.itemid,\n                    rating.scaleid,\n                    rating.rating,\n                    rating.rateduserid,\n                    rating.aggregation,\n                    siteId,\n                );\n            } catch (error) {\n                if (!CoreUtils.isWebServiceError(error)) {\n                    // Couldn't connect to server, reject.\n                    throw error;\n                }\n\n                const warning = CoreTextUtils.getErrorMessageFromError(error);\n\n                if (warning) {\n                    result.warnings.push(warning);\n                }\n            }\n\n            result.updated.push(rating.itemid);\n\n            try {\n                return CoreRatingOffline.deleteRating(\n                    component,\n                    ratingArea,\n                    rating.contextlevel,\n                    rating.instanceid,\n                    rating.itemid,\n                    siteId,\n                );\n            } finally {\n                await CoreRating.invalidateRatingItems(\n                    rating.contextlevel,\n                    rating.instanceid,\n                    component,\n                    ratingArea,\n                    rating.itemid,\n                    rating.scaleid,\n                    undefined,\n                    siteId,\n                );\n            }\n        });\n\n        await Promise.all(promises);\n\n        // All done, return the result.\n        return result;\n    }\n\n    /**\n     * Get the sync id of an item set.\n     *\n     * @param component Component. Example: \"mod_forum\".\n     * @param ratingArea Rating Area. Example: \"post\".\n     * @param contextLevel Context level: course, module, user, etc.\n     * @param instanceId Context instance id.\n     * @param itemSetId Item set id. Example: forum discussion id.\n     * @returns Sync id.\n     */\n    protected getItemSetSyncId(\n        component: string,\n        ratingArea: string,\n        contextLevel: ContextLevel,\n        instanceId: number,\n        itemSetId: number,\n    ): string {\n        return `itemSet#${component}#${ratingArea}#${contextLevel}#${instanceId}#${itemSetId}`;\n    }\n\n}\nexport const CoreRatingSync = makeSingleton(CoreRatingSyncProvider);\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [CoreRatingSyncProvider.SYNCED_EVENT]: CoreRatingSyncEventData;\n    }\n\n}\n\nexport type CoreRatingSyncItem = {\n    warnings: string[];\n    updated: number[];\n};\n\nexport type CoreRatingSyncItemResult = CoreRatingSyncItem & {\n    itemSet: CoreRatingItemSet;\n};\n\n/**\n * Data passed to SYNCED_EVENT event.\n */\nexport type CoreRatingSyncEventData = CoreRatingItemSet & {\n    warnings: string[];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}