{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreComments } from '@features/comments/services/comments';\nimport { makeSingleton } from '@singletons';\nimport { AddonModAssignSubmissionCommentsComponent } from '../component/comments';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for comments submission plugin.\n */\nexport class AddonModAssignSubmissionCommentsHandlerService {\n  constructor() {\n    this.name = 'AddonModAssignSubmissionCommentsHandler';\n    this.type = 'comments';\n  }\n  /**\n   * Whether the plugin can be edited in offline for existing submissions. In general, this should return false if the\n   * plugin uses Moodle filters. The reason is that the app only prefetches filtered data, and the user should edit\n   * unfiltered data.\n   *\n   * @returns Boolean or promise resolved with boolean: whether it can be edited in offline.\n   */\n  canEditOffline() {\n    // This plugin is read only, but return true to prevent blocking the edition.\n    return true;\n  }\n  /**\n   * Return the Component to use to display the plugin data, either in read or in edit mode.\n   * It's recommended to return the class of the component, but you can also return an instance of the component.\n   *\n   * @param plugin The plugin object.\n   * @param edit Whether the user is editing.\n   * @returns The component (or promise resolved with component) to use, undefined if not found.\n   */\n  getComponent(plugin, edit = false) {\n    return edit ? undefined : AddonModAssignSubmissionCommentsComponent;\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns True or promise resolved with true if enabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * Whether or not the handler is enabled for edit on a site level.\n   *\n   * @returns Whether or not the handler is enabled for edit on a site level.\n   */\n  isEnabledForEdit() {\n    return true;\n  }\n  /**\n   * Prefetch any required data for the plugin.\n   * This should NOT prefetch files. Files to be prefetched should be returned by the getPluginFiles function.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  prefetch(assign, submission, plugin, siteId) {\n    return _asyncToGenerator(function* () {\n      yield CoreComments.getComments('module', assign.cmid, 'assignsubmission_comments', submission.id, 'submission_comments', 0, siteId);\n    })();\n  }\n}\n_class = AddonModAssignSubmissionCommentsHandlerService;\n_class.ɵfac = function AddonModAssignSubmissionCommentsHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModAssignSubmissionCommentsHandler = makeSingleton(AddonModAssignSubmissionCommentsHandlerService);","map":{"version":3,"names":["CoreComments","makeSingleton","AddonModAssignSubmissionCommentsComponent","AddonModAssignSubmissionCommentsHandlerService","constructor","name","type","canEditOffline","getComponent","plugin","edit","undefined","isEnabled","_asyncToGenerator","isEnabledForEdit","prefetch","assign","submission","siteId","getComments","cmid","id","factory","ɵfac","providedIn","AddonModAssignSubmissionCommentsHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/submission/comments/services/handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type { AddonModAssignSubmissionPluginBaseComponent } from '@addons/mod/assign/classes/base-submission-plugin-component';\nimport { AddonModAssignAssign, AddonModAssignSubmission, AddonModAssignPlugin } from '@addons/mod/assign/services/assign';\nimport { AddonModAssignSubmissionHandler } from '@addons/mod/assign/services/submission-delegate';\nimport { Injectable, Type } from '@angular/core';\nimport { CoreComments } from '@features/comments/services/comments';\nimport { makeSingleton } from '@singletons';\nimport { AddonModAssignSubmissionCommentsComponent } from '../component/comments';\n\n/**\n * Handler for comments submission plugin.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonModAssignSubmissionCommentsHandlerService implements AddonModAssignSubmissionHandler {\n\n    name = 'AddonModAssignSubmissionCommentsHandler';\n    type = 'comments';\n\n    /**\n     * Whether the plugin can be edited in offline for existing submissions. In general, this should return false if the\n     * plugin uses Moodle filters. The reason is that the app only prefetches filtered data, and the user should edit\n     * unfiltered data.\n     *\n     * @returns Boolean or promise resolved with boolean: whether it can be edited in offline.\n     */\n    canEditOffline(): boolean {\n        // This plugin is read only, but return true to prevent blocking the edition.\n        return true;\n    }\n\n    /**\n     * Return the Component to use to display the plugin data, either in read or in edit mode.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     *\n     * @param plugin The plugin object.\n     * @param edit Whether the user is editing.\n     * @returns The component (or promise resolved with component) to use, undefined if not found.\n     */\n    getComponent(plugin: AddonModAssignPlugin, edit = false): Type<AddonModAssignSubmissionPluginBaseComponent> | undefined {\n        return edit ? undefined : AddonModAssignSubmissionCommentsComponent;\n    }\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns True or promise resolved with true if enabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * Whether or not the handler is enabled for edit on a site level.\n     *\n     * @returns Whether or not the handler is enabled for edit on a site level.\n     */\n    isEnabledForEdit(): boolean{\n        return true;\n    }\n\n    /**\n     * Prefetch any required data for the plugin.\n     * This should NOT prefetch files. Files to be prefetched should be returned by the getPluginFiles function.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async prefetch(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<void> {\n        await CoreComments.getComments(\n            'module',\n            assign.cmid,\n            'assignsubmission_comments',\n            submission.id,\n            'submission_comments',\n            0,\n            siteId,\n        );\n    }\n\n}\nexport const AddonModAssignSubmissionCommentsHandler = makeSingleton(AddonModAssignSubmissionCommentsHandlerService);\n"],"mappings":";;AAkBA,SAASA,YAAY,QAAQ,sCAAsC;AACnE,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,yCAAyC,QAAQ,uBAAuB;;AAEjF;;;AAIA,OAAM,MAAOC,8CAA8C;EAD3DC,YAAA;IAGI,KAAAC,IAAI,GAAG,yCAAyC;IAChD,KAAAC,IAAI,GAAG,UAAU;;EAEjB;;;;;;;EAOAC,cAAcA,CAAA;IACV;IACA,OAAO,IAAI;EACf;EAEA;;;;;;;;EAQAC,YAAYA,CAACC,MAA4B,EAAEC,IAAI,GAAG,KAAK;IACnD,OAAOA,IAAI,GAAGC,SAAS,GAAGT,yCAAyC;EACvE;EAEA;;;;;EAKMU,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB;EAEA;;;;;EAKAC,gBAAgBA,CAAA;IACZ,OAAO,IAAI;EACf;EAEA;;;;;;;;;;EAUMC,QAAQA,CACVC,MAA4B,EAC5BC,UAAoC,EACpCR,MAA4B,EAC5BS,MAAe;IAAA,OAAAL,iBAAA;MAEf,MAAMb,YAAY,CAACmB,WAAW,CAC1B,QAAQ,EACRH,MAAM,CAACI,IAAI,EACX,2BAA2B,EAC3BH,UAAU,CAACI,EAAE,EACb,qBAAqB,EACrB,CAAC,EACDH,MAAM,CACT;IAAC;EACN;;SAxESf,8CAA8C;;mBAA9CA,MAA8C;AAAA;;SAA9CA,MAA8C;EAAAmB,OAAA,EAA9CnB,MAA8C,CAAAoB,IAAA;EAAAC,UAAA,EADhC;AAAM;AA4EjC,OAAO,MAAMC,uCAAuC,GAAGxB,aAAa,CAACE,8CAA8C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}