{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreWSError } from '@classes/errors/wserror';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CorePath } from '@singletons/path';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaMessageOutputAirnotifier:';\n/**\n * Service to handle Airnotifier message output.\n */\nexport class AddonMessageOutputAirnotifierProvider {\n  /**\n   * Initialize.\n   */\n  initialize() {\n    var _this = this;\n    CoreEvents.on(CoreEvents.DEVICE_REGISTERED_IN_MOODLE, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (data) {\n        // Get user devices to make Moodle send the devices data to Airnotifier.\n        _this.getUserDevices(true, data.siteId);\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    CoreEvents.on(CoreEvents.LOGIN, data => {\n      this.warnPushDisabledForAdmin(data.siteId);\n    });\n  }\n  /**\n   * Enables or disables a device.\n   *\n   * @param deviceId Device ID.\n   * @param enable True to enable, false to disable.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if success.\n   */\n  enableDevice(deviceId, enable, siteId) {\n    return _asyncToGenerator(function* () {\n      var _result$warnings;\n      const site = yield CoreSites.getSite(siteId);\n      const data = {\n        deviceid: deviceId,\n        enable: !!enable\n      };\n      const result = yield site.write('message_airnotifier_enable_device', data);\n      if (result.success) {\n        return;\n      }\n      // Fail. Reject with warning message if any.\n      if ((_result$warnings = result.warnings) !== null && _result$warnings !== void 0 && _result$warnings.length) {\n        throw new CoreWSError(result.warnings[0]);\n      }\n      throw new CoreError('Error enabling device');\n    })();\n  }\n  /**\n   * Get the cache key for the is system configured call.\n   *\n   * @returns Cache key.\n   */\n  getSystemConfiguredCacheKey() {\n    return ROOT_CACHE_KEY + 'isAirnotifierConfigured';\n  }\n  /**\n   * Check if airnotifier is configured.\n   *\n   * @param options Options.\n   * @returns Promise resolved with boolean: whether it's configured.\n   */\n  isSystemConfigured(options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const preSets = _objectSpread({\n        cacheKey: _this2.getSystemConfiguredCacheKey(),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const result = yield site.read('message_airnotifier_is_system_configured', {}, preSets);\n      return result === 1;\n    })();\n  }\n  /**\n   * Get the cache key for the get user devices call.\n   *\n   * @returns Cache key.\n   */\n  getUserDevicesCacheKey() {\n    return ROOT_CACHE_KEY + 'userDevices';\n  }\n  /**\n   * Get user devices.\n   *\n   * @param ignoreCache Whether to ignore cache.\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved with the devices.\n   */\n  getUserDevices(ignoreCache, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const data = {\n        appid: CoreConstants.CONFIG.app_id\n      };\n      const preSets = {\n        cacheKey: _this3.getUserDevicesCacheKey(),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      };\n      if (ignoreCache) {\n        preSets.getFromCache = false;\n        preSets.emergencyCache = false;\n      }\n      const result = yield site.read('message_airnotifier_get_user_devices', data, preSets);\n      return result.devices;\n    })();\n  }\n  /**\n   * Invalidate get user devices.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when data is invalidated.\n   */\n  invalidateUserDevices(siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.invalidateWsCacheForKey(_this4.getUserDevicesCacheKey());\n    })();\n  }\n  /**\n   * Is user is an admin and push are disabled, notify him.\n   *\n   * @param siteId Site ID.\n   * @returns Promise resolved when done.\n   */\n  warnPushDisabledForAdmin(siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (!siteId) {\n        return;\n      }\n      try {\n        var _site$getInfo;\n        const site = yield CoreSites.getSite(siteId);\n        if (!((_site$getInfo = site.getInfo()) !== null && _site$getInfo !== void 0 && _site$getInfo.userissiteadmin)) {\n          // Not an admin or we don't know, stop.\n          return;\n        }\n        // Check if the admin already asked not to be reminded.\n        const dontAsk = yield site.getLocalSiteConfig('AddonMessageOutputAirnotifierDontRemindDisabled', 0);\n        if (dontAsk) {\n          return;\n        }\n        // Check if airnotifier is configured.\n        const isConfigured = yield _this5.isSystemConfigured({\n          readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n          siteId\n        });\n        if (isConfigured) {\n          return;\n        }\n        // Warn the admin.\n        const dontShowAgain = yield CoreDomUtils.showPrompt(Translate.instant('addon.messageoutput_airnotifier.pushdisabledwarning'), undefined, Translate.instant('core.dontshowagain'), 'checkbox', [{\n          text: Translate.instant('core.ok')\n        }, {\n          text: Translate.instant('core.goto', {\n            $a: Translate.instant('core.settings.settings')\n          }),\n          handler: (data, resolve) => {\n            resolve(data[0]);\n            const url = CorePath.concatenatePaths(site.getURL(), site.isVersionGreaterEqualThan('3.11') ? 'message/output/airnotifier/checkconfiguration.php' : 'admin/message.php');\n            // Don't try auto-login, admins cannot use it.\n            CoreUtils.openInBrowser(url, {\n              showBrowserWarning: false\n            });\n          }\n        }]);\n        if (dontShowAgain) {\n          yield site.setLocalSiteConfig('AddonMessageOutputAirnotifierDontRemindDisabled', 1);\n        }\n      } catch (_unused) {\n        // Ignore errors.\n      }\n    })();\n  }\n}\n_class = AddonMessageOutputAirnotifierProvider;\n_class.ɵfac = function AddonMessageOutputAirnotifierProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonMessageOutputAirnotifier = makeSingleton(AddonMessageOutputAirnotifierProvider);","map":{"version":3,"names":["CoreSites","CoreSitesReadingStrategy","CoreConstants","CoreSite","CoreError","CoreWSError","makeSingleton","Translate","CoreEvents","CoreDomUtils","CoreUtils","CorePath","ROOT_CACHE_KEY","AddonMessageOutputAirnotifierProvider","initialize","_this","on","DEVICE_REGISTERED_IN_MOODLE","_ref","_asyncToGenerator","data","getUserDevices","siteId","_x","apply","arguments","LOGIN","warnPushDisabledForAdmin","enableDevice","deviceId","enable","_result$warnings","site","getSite","deviceid","result","write","success","warnings","length","getSystemConfiguredCacheKey","isSystemConfigured","options","_this2","preSets","_objectSpread","cacheKey","updateFrequency","FREQUENCY_RARELY","getReadingStrategyPreSets","readingStrategy","read","getUserDevicesCacheKey","ignoreCache","_this3","appid","CONFIG","app_id","getFromCache","emergencyCache","devices","invalidateUserDevices","_this4","invalidateWsCacheForKey","_this5","_site$getInfo","getInfo","userissiteadmin","dontAsk","getLocalSiteConfig","isConfigured","dontShowAgain","showPrompt","instant","undefined","text","$a","handler","resolve","url","concatenatePaths","getURL","isVersionGreaterEqualThan","openInBrowser","showBrowserWarning","setLocalSiteConfig","_unused","factory","ɵfac","providedIn","AddonMessageOutputAirnotifier"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messageoutput/airnotifier/services/airnotifier.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreSites, CoreSitesCommonWSOptions, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreWSError } from '@classes/errors/wserror';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents, CoreEventSiteData } from '@singletons/events';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CorePath } from '@singletons/path';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\n\nconst ROOT_CACHE_KEY = 'mmaMessageOutputAirnotifier:';\n\n/**\n * Service to handle Airnotifier message output.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonMessageOutputAirnotifierProvider {\n\n    /**\n     * Initialize.\n     */\n    initialize(): void {\n        CoreEvents.on(CoreEvents.DEVICE_REGISTERED_IN_MOODLE, async (data: CoreEventSiteData) => {\n            // Get user devices to make Moodle send the devices data to Airnotifier.\n            this.getUserDevices(true, data.siteId);\n        });\n\n        CoreEvents.on(CoreEvents.LOGIN, (data) => {\n            this.warnPushDisabledForAdmin(data.siteId);\n        });\n    }\n\n    /**\n     * Enables or disables a device.\n     *\n     * @param deviceId Device ID.\n     * @param enable True to enable, false to disable.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success.\n     */\n    async enableDevice(deviceId: number, enable: boolean, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const data: AddonMessageOutputAirnotifierEnableDeviceWSParams = {\n            deviceid: deviceId,\n            enable: !!enable,\n        };\n\n        const result = await site.write<AddonMessageOutputAirnotifierEnableDeviceWSResponse>(\n            'message_airnotifier_enable_device',\n            data,\n        );\n\n        if (result.success) {\n            return;\n        }\n\n        // Fail. Reject with warning message if any.\n        if (result.warnings?.length) {\n            throw new CoreWSError(result.warnings[0]);\n        }\n\n        throw new CoreError('Error enabling device');\n    }\n\n    /**\n     * Get the cache key for the is system configured call.\n     *\n     * @returns Cache key.\n     */\n    protected getSystemConfiguredCacheKey(): string {\n        return ROOT_CACHE_KEY + 'isAirnotifierConfigured';\n    }\n\n    /**\n     * Check if airnotifier is configured.\n     *\n     * @param options Options.\n     * @returns Promise resolved with boolean: whether it's configured.\n     */\n    async isSystemConfigured(options: CoreSitesCommonWSOptions = {}): Promise<boolean> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getSystemConfiguredCacheKey(),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const result = await site.read<number>('message_airnotifier_is_system_configured', {}, preSets);\n\n        return result === 1;\n    }\n\n    /**\n     * Get the cache key for the get user devices call.\n     *\n     * @returns Cache key.\n     */\n    protected getUserDevicesCacheKey(): string {\n        return ROOT_CACHE_KEY + 'userDevices';\n    }\n\n    /**\n     * Get user devices.\n     *\n     * @param ignoreCache Whether to ignore cache.\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved with the devices.\n     */\n    async getUserDevices(ignoreCache?: boolean, siteId?: string): Promise<AddonMessageOutputAirnotifierDevice[]> {\n\n        const site = await CoreSites.getSite(siteId);\n\n        const data: AddonMessageOutputAirnotifierGetUserDevicesWSParams = {\n            appid: CoreConstants.CONFIG.app_id,\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getUserDevicesCacheKey(),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n        };\n\n        if (ignoreCache) {\n            preSets.getFromCache = false;\n            preSets.emergencyCache = false;\n        }\n\n        const result = await site.read<AddonMessageOutputAirnotifierGetUserDevicesWSResponse>(\n            'message_airnotifier_get_user_devices',\n            data,\n            preSets,\n        );\n\n        return result.devices;\n    }\n\n    /**\n     * Invalidate get user devices.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when data is invalidated.\n     */\n    async invalidateUserDevices(siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.invalidateWsCacheForKey(this.getUserDevicesCacheKey());\n    }\n\n    /**\n     * Is user is an admin and push are disabled, notify him.\n     *\n     * @param siteId Site ID.\n     * @returns Promise resolved when done.\n     */\n    protected async warnPushDisabledForAdmin(siteId?: string): Promise<void> {\n        if (!siteId) {\n            return;\n        }\n\n        try {\n            const site = await CoreSites.getSite(siteId);\n\n            if (!site.getInfo()?.userissiteadmin) {\n                // Not an admin or we don't know, stop.\n                return;\n            }\n\n            // Check if the admin already asked not to be reminded.\n            const dontAsk = await site.getLocalSiteConfig('AddonMessageOutputAirnotifierDontRemindDisabled', 0);\n            if (dontAsk) {\n                return;\n            }\n\n            // Check if airnotifier is configured.\n            const isConfigured = await this.isSystemConfigured({\n                readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n                siteId,\n            });\n\n            if (isConfigured) {\n                return;\n            }\n\n            // Warn the admin.\n            const dontShowAgain = await CoreDomUtils.showPrompt(\n                Translate.instant('addon.messageoutput_airnotifier.pushdisabledwarning'),\n                undefined,\n                Translate.instant('core.dontshowagain'),\n                'checkbox',\n                [\n                    {\n                        text: Translate.instant('core.ok'),\n                    },\n                    {\n                        text: Translate.instant('core.goto', { $a: Translate.instant('core.settings.settings') }),\n                        handler: (data, resolve) => {\n                            resolve(data[0]);\n\n                            const url = CorePath.concatenatePaths(\n                                site.getURL(),\n                                site.isVersionGreaterEqualThan('3.11') ?\n                                    'message/output/airnotifier/checkconfiguration.php' :\n                                    'admin/message.php',\n                            );\n\n                            // Don't try auto-login, admins cannot use it.\n                            CoreUtils.openInBrowser(url, {\n                                showBrowserWarning: false,\n                            });\n                        },\n                    },\n                ],\n            );\n\n            if (dontShowAgain) {\n                await site.setLocalSiteConfig('AddonMessageOutputAirnotifierDontRemindDisabled', 1);\n            }\n        } catch {\n            // Ignore errors.\n        }\n    }\n\n}\n\nexport const AddonMessageOutputAirnotifier = makeSingleton(AddonMessageOutputAirnotifierProvider);\n\n/**\n * Device data returned by WS message_airnotifier_get_user_devices.\n */\nexport type AddonMessageOutputAirnotifierDevice = {\n    id: number; // Device id (in the message_airnotifier table).\n    appid: string; // The app id, something like com.moodle.moodlemobile.\n    name: string; // The device name, 'occam' or 'iPhone' etc.\n    model: string; // The device model 'Nexus4' or 'iPad1,1' etc.\n    platform: string; // The device platform 'iOS' or 'Android' etc.\n    version: string; // The device version '6.1.2' or '4.2.2' etc.\n    pushid: string; // The device PUSH token/key/identifier/registration id.\n    uuid: string; // The device UUID.\n    enable: number | boolean; // Whether the device is enabled or not.\n    timecreated: number; // Time created.\n    timemodified: number; // Time modified.\n};\n\n/**\n * Params of message_airnotifier_enable_device WS.\n */\nexport type AddonMessageOutputAirnotifierEnableDeviceWSParams = {\n    deviceid: number; // The device id.\n    enable: boolean; // True for enable the device, false otherwise.\n};\n\n/**\n * Result of WS message_airnotifier_enable_device.\n */\nexport type AddonMessageOutputAirnotifierEnableDeviceWSResponse = {\n    success: boolean; // True if success.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of message_airnotifier_get_user_devices WS.\n */\nexport type AddonMessageOutputAirnotifierGetUserDevicesWSParams = {\n    appid: string; // App unique id (usually a reversed domain).\n    userid?: number; // User id, 0 for current user.\n};\n\n/**\n * Result of WS message_airnotifier_get_user_devices.\n */\nexport type AddonMessageOutputAirnotifierGetUserDevicesWSResponse = {\n    devices: AddonMessageOutputAirnotifierDevice[]; // List of devices.\n    warnings?: CoreWSExternalWarning[];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}