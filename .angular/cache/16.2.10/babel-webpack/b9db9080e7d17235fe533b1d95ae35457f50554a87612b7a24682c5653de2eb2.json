{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSyncBaseProvider, CoreSyncBlockedError } from '@classes/base-sync';\nimport { CoreNetworkError } from '@classes/errors/network-error';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreGroups } from '@services/groups';\nimport { CoreSites } from '@services/sites';\nimport { CoreSync } from '@services/sync';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModWiki, AddonModWikiProvider } from './wiki';\nimport { AddonModWikiOffline } from './wiki-offline';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to sync wikis.\n */\nexport class AddonModWikiSyncProvider extends CoreSyncBaseProvider {\n  constructor() {\n    super('AddonModWikiSyncProvider');\n    this.componentTranslatableString = 'wiki';\n  }\n  /**\n   * Get a string to identify a subwiki. If it doesn't have a subwiki ID it will be identified by wiki ID, user ID and group ID.\n   *\n   * @param subwikiId Subwiki ID. If not defined, wikiId, userId and groupId should be defined.\n   * @param wikiId Wiki ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param userId User ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param groupId Group ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @returns Identifier.\n   */\n  getSubwikiBlockId(subwikiId, wikiId, userId, groupId) {\n    subwikiId = AddonModWikiOffline.convertToPositiveNumber(subwikiId);\n    if (subwikiId && subwikiId > 0) {\n      return String(subwikiId);\n    }\n    wikiId = AddonModWikiOffline.convertToPositiveNumber(wikiId);\n    userId = AddonModWikiOffline.convertToPositiveNumber(userId);\n    groupId = AddonModWikiOffline.convertToPositiveNumber(groupId);\n    return `${wikiId}:${userId}:${groupId}`;\n  }\n  /**\n   * Try to synchronize all the wikis in a certain site or in all sites.\n   *\n   * @param siteId Site ID to sync. If not defined, sync all sites.\n   * @param force Wether to force sync not depending on last execution.\n   * @returns Promise resolved if sync is successful, rejected if sync fails.\n   */\n  syncAllWikis(siteId, force) {\n    return this.syncOnSites('all wikis', siteId => this.syncAllWikisFunc(!!force, siteId), siteId);\n  }\n  /**\n   * Sync all wikis on a site.\n   *\n   * @param force Wether to force sync not depending on last execution.\n   * @param siteId Site ID to sync.\n   * @returns Promise resolved if sync is successful, rejected if sync fails.\n   */\n  syncAllWikisFunc(force, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Get all the pages created in offline.\n      const pages = yield AddonModWikiOffline.getAllNewPages(siteId);\n      const subwikis = {};\n      // Sync all subwikis.\n      yield Promise.all(pages.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (page) {\n          const index = _this.getSubwikiBlockId(page.subwikiid, page.wikiid, page.userid, page.groupid);\n          if (subwikis[index]) {\n            // Already synced.\n            return;\n          }\n          subwikis[index] = true;\n          const result = force ? yield _this.syncSubwiki(page.subwikiid, page.wikiid, page.userid, page.groupid, siteId) : yield _this.syncSubwikiIfNeeded(page.subwikiid, page.wikiid, page.userid, page.groupid, siteId);\n          if (result !== null && result !== void 0 && result.updated) {\n            // Sync successful, send event.\n            CoreEvents.trigger(AddonModWikiSyncProvider.AUTO_SYNCED, {\n              siteId: siteId,\n              subwikiId: page.subwikiid,\n              wikiId: page.wikiid,\n              userId: page.userid,\n              groupId: page.groupid,\n              created: result.created,\n              discarded: result.discarded,\n              warnings: result.warnings\n            });\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n  /**\n   * Sync a subwiki only if a certain time has passed since the last time.\n   *\n   * @param subwikiId Subwiki ID. If not defined, wikiId, userId and groupId should be defined.\n   * @param wikiId Wiki ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param userId User ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param groupId Group ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when subwiki is synced or doesn't need to be synced.\n   */\n  syncSubwikiIfNeeded(subwikiId, wikiId, userId, groupId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const blockId = _this2.getSubwikiBlockId(subwikiId, wikiId, userId, groupId);\n      const needed = yield _this2.isSyncNeeded(blockId, siteId);\n      if (needed) {\n        return _this2.syncSubwiki(subwikiId, wikiId, userId, groupId, siteId);\n      }\n    })();\n  }\n  /**\n   * Synchronize a subwiki.\n   *\n   * @param subwikiId Subwiki ID. If not defined, wikiId, userId and groupId should be defined.\n   * @param wikiId Wiki ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param userId User ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param groupId Group ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  syncSubwiki(subwikiId, wikiId, userId, groupId, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    const subwikiBlockId = this.getSubwikiBlockId(subwikiId, wikiId, userId, groupId);\n    const currentSyncPromise = this.getOngoingSync(subwikiBlockId, siteId);\n    if (currentSyncPromise) {\n      // There's already a sync ongoing for this subwiki, return the promise.\n      return currentSyncPromise;\n    }\n    // Verify that subwiki isn't blocked.\n    if (CoreSync.isBlocked(AddonModWikiProvider.COMPONENT, subwikiBlockId, siteId)) {\n      this.logger.debug(`Cannot sync subwiki ${subwikiBlockId} because it is blocked.`);\n      throw new CoreSyncBlockedError(Translate.instant('core.errorsyncblocked', {\n        $a: this.componentTranslate\n      }));\n    }\n    this.logger.debug(`Try to sync subwiki ${subwikiBlockId}`);\n    return this.addOngoingSync(subwikiBlockId, this.performSyncSubwiki(subwikiId, wikiId, userId, groupId, siteId), siteId);\n  }\n  /**\n   * Synchronize a subwiki.\n   *\n   * @param subwikiId Subwiki ID. If not defined, wikiId, userId and groupId should be defined.\n   * @param wikiId Wiki ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param userId User ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param groupId Group ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  performSyncSubwiki(subwikiId, wikiId, userId, groupId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const result = {\n        warnings: [],\n        updated: false,\n        created: [],\n        discarded: []\n      };\n      const subwikiBlockId = _this3.getSubwikiBlockId(subwikiId, wikiId, userId, groupId);\n      // Get offline pages to be sent.\n      const pages = yield CoreUtils.ignoreErrors(AddonModWikiOffline.getSubwikiNewPages(subwikiId, wikiId, userId, groupId, siteId), []);\n      if (!pages || !pages.length) {\n        // Nothing to sync.\n        yield CoreUtils.ignoreErrors(_this3.setSyncTime(subwikiBlockId, siteId));\n        return result;\n      }\n      if (!CoreNetwork.isOnline()) {\n        // Cannot sync in offline.\n        throw new CoreNetworkError();\n      }\n      // Send the pages.\n      yield Promise.all(pages.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (page) {\n          try {\n            const pageId = yield AddonModWiki.newPageOnline(page.title, page.cachedcontent, {\n              subwikiId,\n              wikiId,\n              userId,\n              groupId,\n              siteId\n            });\n            result.updated = true;\n            result.created.push({\n              pageId: pageId,\n              title: page.title\n            });\n            // Delete the local page.\n            yield AddonModWikiOffline.deleteNewPage(page.title, subwikiId, wikiId, userId, groupId, siteId);\n          } catch (error) {\n            if (!CoreUtils.isWebServiceError(error)) {\n              // Couldn't connect to server, reject.\n              throw error;\n            }\n            // The WebService has thrown an error, this means that the page cannot be submitted. Delete it.\n            yield AddonModWikiOffline.deleteNewPage(page.title, subwikiId, wikiId, userId, groupId, siteId);\n            result.updated = true;\n            // Page deleted, add the page to discarded pages and add a warning.\n            const warning = _this3.getOfflineDataDeletedWarning(page.title, error);\n            result.discarded.push({\n              title: page.title,\n              warning: warning\n            });\n            result.warnings.push(warning);\n          }\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      // Sync finished, set sync time.\n      yield CoreUtils.ignoreErrors(_this3.setSyncTime(subwikiBlockId, siteId));\n      return result;\n    })();\n  }\n  /**\n   * Tries to synchronize a wiki.\n   *\n   * @param wikiId Wiki ID.\n   * @param courseId Course ID.\n   * @param cmId Wiki course module ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if sync is successful, rejected otherwise.\n   */\n  syncWiki(wikiId, courseId, cmId, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Sync offline logs.\n      yield CoreUtils.ignoreErrors(CoreCourseLogHelper.syncActivity(AddonModWikiProvider.COMPONENT, wikiId, siteId));\n      // Sync is done at subwiki level, get all the subwikis.\n      const subwikis = yield AddonModWiki.getSubwikis(wikiId, {\n        cmId,\n        siteId\n      });\n      const result = {\n        warnings: [],\n        updated: false,\n        subwikis: {},\n        siteId: siteId\n      };\n      yield Promise.all(subwikis.map( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (subwiki) {\n          const data = yield _this4.syncSubwiki(subwiki.id, subwiki.wikiid, subwiki.userid, subwiki.groupid, siteId);\n          if (data && data.updated) {\n            result.warnings = result.warnings.concat(data.warnings);\n            result.updated = true;\n            result.subwikis[subwiki.id] = {\n              created: data.created,\n              discarded: data.discarded\n            };\n          }\n        });\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n      if (result.updated) {\n        const promises = [];\n        // Something has changed, invalidate data.\n        if (wikiId) {\n          promises.push(AddonModWiki.invalidateSubwikis(wikiId));\n          promises.push(AddonModWiki.invalidateSubwikiPages(wikiId));\n          promises.push(AddonModWiki.invalidateSubwikiFiles(wikiId));\n        }\n        if (courseId) {\n          promises.push(AddonModWiki.invalidateWikiData(courseId));\n        }\n        if (cmId) {\n          promises.push(CoreGroups.invalidateActivityAllowedGroups(cmId));\n          promises.push(CoreGroups.invalidateActivityGroupMode(cmId));\n        }\n        yield CoreUtils.ignoreErrors(Promise.all(promises));\n      }\n      return result;\n    })();\n  }\n}\n_class = AddonModWikiSyncProvider;\n_class.AUTO_SYNCED = 'addon_mod_wiki_autom_synced';\n_class.MANUAL_SYNCED = 'addon_mod_wiki_manual_synced';\n_class.ɵfac = function AddonModWikiSyncProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModWikiSync = makeSingleton(AddonModWikiSyncProvider);","map":{"version":3,"names":["CoreSyncBaseProvider","CoreSyncBlockedError","CoreNetworkError","CoreCourseLogHelper","CoreNetwork","CoreGroups","CoreSites","CoreSync","CoreUtils","makeSingleton","Translate","CoreEvents","AddonModWiki","AddonModWikiProvider","AddonModWikiOffline","AddonModWikiSyncProvider","constructor","componentTranslatableString","getSubwikiBlockId","subwikiId","wikiId","userId","groupId","convertToPositiveNumber","String","syncAllWikis","siteId","force","syncOnSites","syncAllWikisFunc","_this","_asyncToGenerator","pages","getAllNewPages","subwikis","Promise","all","map","_ref","page","index","subwikiid","wikiid","userid","groupid","result","syncSubwiki","syncSubwikiIfNeeded","updated","trigger","AUTO_SYNCED","created","discarded","warnings","_x","apply","arguments","_this2","blockId","needed","isSyncNeeded","getCurrentSiteId","subwikiBlockId","currentSyncPromise","getOngoingSync","isBlocked","COMPONENT","logger","debug","instant","$a","componentTranslate","addOngoingSync","performSyncSubwiki","_this3","ignoreErrors","getSubwikiNewPages","length","setSyncTime","isOnline","_ref2","pageId","newPageOnline","title","cachedcontent","push","deleteNewPage","error","isWebServiceError","warning","getOfflineDataDeletedWarning","_x2","syncWiki","courseId","cmId","_this4","syncActivity","getSubwikis","_ref3","subwiki","data","id","concat","_x3","promises","invalidateSubwikis","invalidateSubwikiPages","invalidateSubwikiFiles","invalidateWikiData","invalidateActivityAllowedGroups","invalidateActivityGroupMode","_class","MANUAL_SYNCED","factory","ɵfac","providedIn","AddonModWikiSync"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/wiki/services/wiki-sync.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSyncBaseProvider, CoreSyncBlockedError } from '@classes/base-sync';\nimport { CoreNetworkError } from '@classes/errors/network-error';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreNetwork } from '@services/network';\nimport { CoreGroups } from '@services/groups';\nimport { CoreSites } from '@services/sites';\nimport { CoreSync, CoreSyncResult } from '@services/sync';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModWikiPageDBRecord } from './database/wiki';\nimport { AddonModWiki, AddonModWikiProvider } from './wiki';\nimport { AddonModWikiOffline } from './wiki-offline';\n\n/**\n * Service to sync wikis.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModWikiSyncProvider extends CoreSyncBaseProvider<AddonModWikiSyncSubwikiResult> {\n\n    static readonly AUTO_SYNCED = 'addon_mod_wiki_autom_synced';\n    static readonly MANUAL_SYNCED = 'addon_mod_wiki_manual_synced';\n\n    protected componentTranslatableString = 'wiki';\n\n    constructor() {\n        super('AddonModWikiSyncProvider');\n    }\n\n    /**\n     * Get a string to identify a subwiki. If it doesn't have a subwiki ID it will be identified by wiki ID, user ID and group ID.\n     *\n     * @param subwikiId Subwiki ID. If not defined, wikiId, userId and groupId should be defined.\n     * @param wikiId Wiki ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param userId User ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param groupId Group ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @returns Identifier.\n     */\n    getSubwikiBlockId(subwikiId?: number, wikiId?: number, userId?: number, groupId?: number): string {\n        subwikiId = AddonModWikiOffline.convertToPositiveNumber(subwikiId);\n\n        if (subwikiId && subwikiId > 0) {\n            return String(subwikiId);\n        }\n\n        wikiId = AddonModWikiOffline.convertToPositiveNumber(wikiId);\n        userId = AddonModWikiOffline.convertToPositiveNumber(userId);\n        groupId = AddonModWikiOffline.convertToPositiveNumber(groupId);\n\n        return `${wikiId}:${userId}:${groupId}`;\n    }\n\n    /**\n     * Try to synchronize all the wikis in a certain site or in all sites.\n     *\n     * @param siteId Site ID to sync. If not defined, sync all sites.\n     * @param force Wether to force sync not depending on last execution.\n     * @returns Promise resolved if sync is successful, rejected if sync fails.\n     */\n    syncAllWikis(siteId?: string, force?: boolean): Promise<void> {\n        return this.syncOnSites('all wikis', (siteId) => this.syncAllWikisFunc(!!force, siteId), siteId);\n    }\n\n    /**\n     * Sync all wikis on a site.\n     *\n     * @param force Wether to force sync not depending on last execution.\n     * @param siteId Site ID to sync.\n     * @returns Promise resolved if sync is successful, rejected if sync fails.\n     */\n    protected async syncAllWikisFunc(force: boolean, siteId: string): Promise<void> {\n        // Get all the pages created in offline.\n        const pages = await AddonModWikiOffline.getAllNewPages(siteId);\n\n        const subwikis: Record<string, boolean> = {};\n\n        // Sync all subwikis.\n        await Promise.all(pages.map(async (page) => {\n            const index = this.getSubwikiBlockId(page.subwikiid, page.wikiid, page.userid, page.groupid);\n\n            if (subwikis[index]) {\n                // Already synced.\n                return;\n            }\n\n            subwikis[index] = true;\n\n            const result = force ?\n                await this.syncSubwiki(page.subwikiid, page.wikiid, page.userid, page.groupid, siteId) :\n                await this.syncSubwikiIfNeeded(page.subwikiid, page.wikiid, page.userid, page.groupid, siteId);\n\n            if (result?.updated) {\n                // Sync successful, send event.\n                CoreEvents.trigger(AddonModWikiSyncProvider.AUTO_SYNCED, {\n                    siteId: siteId,\n                    subwikiId: page.subwikiid,\n                    wikiId: page.wikiid,\n                    userId: page.userid,\n                    groupId: page.groupid,\n                    created: result.created,\n                    discarded: result.discarded,\n                    warnings: result.warnings,\n                });\n            }\n        }));\n    }\n\n    /**\n     * Sync a subwiki only if a certain time has passed since the last time.\n     *\n     * @param subwikiId Subwiki ID. If not defined, wikiId, userId and groupId should be defined.\n     * @param wikiId Wiki ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param userId User ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param groupId Group ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when subwiki is synced or doesn't need to be synced.\n     */\n    async syncSubwikiIfNeeded(\n        subwikiId: number,\n        wikiId?: number,\n        userId?: number,\n        groupId?: number,\n        siteId?: string,\n    ): Promise<AddonModWikiSyncSubwikiResult | undefined> {\n\n        const blockId = this.getSubwikiBlockId(subwikiId, wikiId, userId, groupId);\n\n        const needed = await this.isSyncNeeded(blockId, siteId);\n\n        if (needed) {\n            return this.syncSubwiki(subwikiId, wikiId, userId, groupId, siteId);\n        }\n    }\n\n    /**\n     * Synchronize a subwiki.\n     *\n     * @param subwikiId Subwiki ID. If not defined, wikiId, userId and groupId should be defined.\n     * @param wikiId Wiki ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param userId User ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param groupId Group ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    syncSubwiki(\n        subwikiId: number,\n        wikiId?: number,\n        userId?: number,\n        groupId?: number,\n        siteId?: string,\n    ): Promise<AddonModWikiSyncSubwikiResult> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const subwikiBlockId = this.getSubwikiBlockId(subwikiId, wikiId, userId, groupId);\n        const currentSyncPromise = this.getOngoingSync(subwikiBlockId, siteId);\n\n        if (currentSyncPromise) {\n            // There's already a sync ongoing for this subwiki, return the promise.\n            return currentSyncPromise;\n        }\n\n        // Verify that subwiki isn't blocked.\n        if (CoreSync.isBlocked(AddonModWikiProvider.COMPONENT, subwikiBlockId, siteId)) {\n            this.logger.debug(`Cannot sync subwiki ${subwikiBlockId} because it is blocked.`);\n\n            throw new CoreSyncBlockedError(Translate.instant('core.errorsyncblocked', { $a: this.componentTranslate }));\n        }\n\n        this.logger.debug(`Try to sync subwiki ${subwikiBlockId}`);\n\n        return this.addOngoingSync(subwikiBlockId, this.performSyncSubwiki(subwikiId, wikiId, userId, groupId, siteId), siteId);\n    }\n\n    /**\n     * Synchronize a subwiki.\n     *\n     * @param subwikiId Subwiki ID. If not defined, wikiId, userId and groupId should be defined.\n     * @param wikiId Wiki ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param userId User ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param groupId Group ID. Optional, will be used to create the subwiki if subwiki ID not provided.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    protected async performSyncSubwiki(\n        subwikiId: number,\n        wikiId?: number,\n        userId?: number,\n        groupId?: number,\n        siteId?: string,\n    ): Promise<AddonModWikiSyncSubwikiResult> {\n        const result: AddonModWikiSyncSubwikiResult = {\n            warnings: [],\n            updated: false,\n            created: [],\n            discarded: [],\n        };\n        const subwikiBlockId = this.getSubwikiBlockId(subwikiId, wikiId, userId, groupId);\n\n        // Get offline pages to be sent.\n        const pages = await CoreUtils.ignoreErrors(\n            AddonModWikiOffline.getSubwikiNewPages(subwikiId, wikiId, userId, groupId, siteId),\n            <AddonModWikiPageDBRecord[]> [],\n        );\n\n        if (!pages || !pages.length) {\n            // Nothing to sync.\n            await CoreUtils.ignoreErrors(this.setSyncTime(subwikiBlockId, siteId));\n\n            return result;\n        }\n\n        if (!CoreNetwork.isOnline()) {\n            // Cannot sync in offline.\n            throw new CoreNetworkError();\n        }\n\n        // Send the pages.\n        await Promise.all(pages.map(async (page) => {\n            try {\n                const pageId = await AddonModWiki.newPageOnline(page.title, page.cachedcontent, {\n                    subwikiId,\n                    wikiId,\n                    userId,\n                    groupId,\n                    siteId,\n                });\n\n                result.updated = true;\n                result.created.push({\n                    pageId: pageId,\n                    title: page.title,\n                });\n\n                // Delete the local page.\n                await AddonModWikiOffline.deleteNewPage(page.title, subwikiId, wikiId, userId, groupId, siteId);\n            } catch (error) {\n                if (!CoreUtils.isWebServiceError(error)) {\n                    // Couldn't connect to server, reject.\n                    throw error;\n                }\n\n                // The WebService has thrown an error, this means that the page cannot be submitted. Delete it.\n                await AddonModWikiOffline.deleteNewPage(page.title, subwikiId, wikiId, userId, groupId, siteId);\n\n                result.updated = true;\n\n                // Page deleted, add the page to discarded pages and add a warning.\n                const warning = this.getOfflineDataDeletedWarning(page.title, error);\n\n                result.discarded.push({\n                    title: page.title,\n                    warning: warning,\n                });\n\n                result.warnings.push(warning);\n            }\n        }));\n\n        // Sync finished, set sync time.\n        await CoreUtils.ignoreErrors(this.setSyncTime(subwikiBlockId, siteId));\n\n        return result;\n    }\n\n    /**\n     * Tries to synchronize a wiki.\n     *\n     * @param wikiId Wiki ID.\n     * @param courseId Course ID.\n     * @param cmId Wiki course module ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if sync is successful, rejected otherwise.\n     */\n    async syncWiki(wikiId: number, courseId?: number, cmId?: number, siteId?: string): Promise<AddonModWikiSyncWikiResult> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Sync offline logs.\n        await CoreUtils.ignoreErrors(CoreCourseLogHelper.syncActivity(AddonModWikiProvider.COMPONENT, wikiId, siteId));\n\n        // Sync is done at subwiki level, get all the subwikis.\n        const subwikis = await AddonModWiki.getSubwikis(wikiId, { cmId, siteId });\n\n        const result: AddonModWikiSyncWikiResult = {\n            warnings: [],\n            updated: false,\n            subwikis: {},\n            siteId: siteId,\n        };\n\n        await Promise.all(subwikis.map(async (subwiki) => {\n            const data = await this.syncSubwiki(subwiki.id, subwiki.wikiid, subwiki.userid, subwiki.groupid, siteId);\n\n            if (data && data.updated) {\n                result.warnings = result.warnings.concat(data.warnings);\n                result.updated = true;\n                result.subwikis[subwiki.id] = {\n                    created: data.created,\n                    discarded: data.discarded,\n                };\n            }\n        }));\n\n        if (result.updated) {\n            const promises: Promise<void>[] = [];\n\n            // Something has changed, invalidate data.\n            if (wikiId) {\n                promises.push(AddonModWiki.invalidateSubwikis(wikiId));\n                promises.push(AddonModWiki.invalidateSubwikiPages(wikiId));\n                promises.push(AddonModWiki.invalidateSubwikiFiles(wikiId));\n            }\n            if (courseId) {\n                promises.push(AddonModWiki.invalidateWikiData(courseId));\n            }\n            if (cmId) {\n                promises.push(CoreGroups.invalidateActivityAllowedGroups(cmId));\n                promises.push(CoreGroups.invalidateActivityGroupMode(cmId));\n            }\n\n            await CoreUtils.ignoreErrors(Promise.all(promises));\n        }\n\n        return result;\n    }\n\n}\n\nexport const AddonModWikiSync = makeSingleton(AddonModWikiSyncProvider);\n\n/**\n * Data returned by a subwiki sync.\n */\nexport type AddonModWikiSyncSubwikiResult = CoreSyncResult & {\n    created: AddonModWikiCreatedPage[]; // List of created pages.\n    discarded: AddonModWikiDiscardedPage[]; // List of discarded pages.\n};\n\n/**\n * Data returned by a wiki sync.\n */\nexport type AddonModWikiSyncWikiResult = CoreSyncResult & {\n    subwikis: {\n        [subwikiId: number]: { // List of subwikis.\n            created: AddonModWikiCreatedPage[];\n            discarded: AddonModWikiDiscardedPage[];\n        };\n    };\n    siteId: string; // Site ID.\n};\n\n/**\n * Data returned by a wiki sync for each subwiki synced.\n */\nexport type AddonModWikiSyncWikiSubwiki = {\n    created: AddonModWikiCreatedPage[];\n    discarded: AddonModWikiDiscardedPage[];\n};\n\n/**\n * Data to identify a page created in sync.\n */\nexport type AddonModWikiCreatedPage = {\n    pageId: number;\n    title: string;\n};\n\n/**\n * Data to identify a page discarded in sync.\n */\nexport type AddonModWikiDiscardedPage = {\n    title: string;\n    warning: string;\n};\n\n/**\n * Data passed to AUTO_SYNCED event.\n */\nexport type AddonModWikiAutoSyncData = {\n    siteId: string;\n    subwikiId: number;\n    wikiId: number;\n    userId: number;\n    groupId: number;\n    created: AddonModWikiCreatedPage[];\n    discarded: AddonModWikiDiscardedPage[];\n    warnings: string[];\n};\n\n/**\n * Data passed to MANUAL_SYNCED event.\n */\nexport type AddonModWikiManualSyncData = AddonModWikiSyncWikiResult & {\n    wikiId: number;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}