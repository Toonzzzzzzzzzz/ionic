{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreNavigator } from '@services/navigator';\nimport { makeSingleton } from '@singletons';\nimport { AddonMessages } from '../messages';\nimport * as i0 from \"@angular/core\";\n/**\n * Content links handler for a contact requests.\n */\nexport class AddonMessagesContactRequestLinkHandlerService extends CoreContentLinksHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonMessagesContactRequestLinkHandler';\n    this.pattern = /\\/message\\/pendingcontactrequests\\.php/;\n  }\n  /**\n   * Get the list of actions for a link (url).\n   *\n   * @returns List of (or promise resolved with list of) actions.\n   */\n  getActions() {\n    return [{\n      action: siteId => {\n        CoreNavigator.navigateToSitePath('/messages/contacts', {\n          siteId\n        });\n      }\n    }];\n  }\n  /**\n   * Check if the handler is enabled for a certain site (site + user) and a URL.\n   * If not defined, defaults to true.\n   *\n   * @param siteId The site ID.\n   * @returns Whether the handler is enabled for the URL and site.\n   */\n  isEnabled(siteId) {\n    return _asyncToGenerator(function* () {\n      const enabled = yield AddonMessages.isPluginEnabled(siteId);\n      if (!enabled) {\n        return false;\n      }\n      return AddonMessages.isGroupMessagingEnabledInSite(siteId);\n    })();\n  }\n}\n_class = AddonMessagesContactRequestLinkHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonMessagesContactRequestLinkHandlerService_BaseFactory;\n  return function AddonMessagesContactRequestLinkHandlerService_Factory(t) {\n    return (ɵAddonMessagesContactRequestLinkHandlerService_BaseFactory || (ɵAddonMessagesContactRequestLinkHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonMessagesContactRequestLinkHandler = makeSingleton(AddonMessagesContactRequestLinkHandlerService);","map":{"version":3,"names":["CoreContentLinksHandlerBase","CoreNavigator","makeSingleton","AddonMessages","AddonMessagesContactRequestLinkHandlerService","constructor","name","pattern","getActions","action","siteId","navigateToSitePath","isEnabled","_asyncToGenerator","enabled","isPluginEnabled","isGroupMessagingEnabledInSite","t","factory","ɵfac","providedIn","AddonMessagesContactRequestLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messages/services/handlers/contact-request-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreNavigator } from '@services/navigator';\nimport { makeSingleton } from '@singletons';\nimport { AddonMessages } from '../messages';\n\n/**\n * Content links handler for a contact requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonMessagesContactRequestLinkHandlerService extends CoreContentLinksHandlerBase {\n\n    name = 'AddonMessagesContactRequestLinkHandler';\n    pattern = /\\/message\\/pendingcontactrequests\\.php/;\n\n    /**\n     * Get the list of actions for a link (url).\n     *\n     * @returns List of (or promise resolved with list of) actions.\n     */\n    getActions(): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n        return [{\n            action: (siteId): void => {\n                CoreNavigator.navigateToSitePath('/messages/contacts', { siteId });\n            },\n        }];\n    }\n\n    /**\n     * Check if the handler is enabled for a certain site (site + user) and a URL.\n     * If not defined, defaults to true.\n     *\n     * @param siteId The site ID.\n     * @returns Whether the handler is enabled for the URL and site.\n     */\n    async isEnabled(siteId: string): Promise<boolean> {\n        const enabled = await AddonMessages.isPluginEnabled(siteId);\n        if (!enabled) {\n            return false;\n        }\n\n        return AddonMessages.isGroupMessagingEnabledInSite(siteId);\n    }\n\n}\n\nexport const AddonMessagesContactRequestLinkHandler = makeSingleton(AddonMessagesContactRequestLinkHandlerService);\n"],"mappings":";;AAeA,SAASA,2BAA2B,QAAQ,6CAA6C;AAEzF,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,6CAA8C,SAAQJ,2BAA2B;EAD9FK,YAAA;;IAGI,KAAAC,IAAI,GAAG,wCAAwC;IAC/C,KAAAC,OAAO,GAAG,wCAAwC;;EAElD;;;;;EAKAC,UAAUA,CAAA;IACN,OAAO,CAAC;MACJC,MAAM,EAAGC,MAAM,IAAU;QACrBT,aAAa,CAACU,kBAAkB,CAAC,oBAAoB,EAAE;UAAED;QAAM,CAAE,CAAC;MACtE;KACH,CAAC;EACN;EAEA;;;;;;;EAOME,SAASA,CAACF,MAAc;IAAA,OAAAG,iBAAA;MAC1B,MAAMC,OAAO,SAASX,aAAa,CAACY,eAAe,CAACL,MAAM,CAAC;MAC3D,IAAI,CAACI,OAAO,EAAE;QACV,OAAO,KAAK;;MAGhB,OAAOX,aAAa,CAACa,6BAA6B,CAACN,MAAM,CAAC;IAAC;EAC/D;;SAhCSN,6CAA8C;;;;iKAA9CA,MAA6C,IAAAa,CAAA,IAA7Cb,MAA6C;EAAA;AAAA;;SAA7CA,MAA6C;EAAAc,OAAA,EAA7Cd,MAA6C,CAAAe,IAAA;EAAAC,UAAA,EADhC;AAAM;AAqChC,OAAO,MAAMC,sCAAsC,GAAGnB,aAAa,CAACE,6CAA6C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}