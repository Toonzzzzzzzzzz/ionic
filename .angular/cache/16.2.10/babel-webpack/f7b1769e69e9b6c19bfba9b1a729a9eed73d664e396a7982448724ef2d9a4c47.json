{"ast":null,"code":"var _class;\nimport { Platform } from '@ionic/angular';\nimport { Device, makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Extend Ionic's Platform service.\n */\nexport class CorePlatformService extends Platform {\n  /**\n   * Get platform major version number.\n   *\n   * @returns The platform major number.\n   */\n  getPlatformMajorVersion() {\n    var _Device$version;\n    if (!this.isMobile()) {\n      return 0;\n    }\n    return Number((_Device$version = Device.version) === null || _Device$version === void 0 ? void 0 : _Device$version.split('.')[0]);\n  }\n  /**\n   * Checks if the app is running in an Android mobile or tablet device.\n   *\n   * @returns Whether the app is running in an Android mobile or tablet device.\n   */\n  isAndroid() {\n    return this.isMobile() && this.is('android');\n  }\n  /**\n   * Checks if the app is running in an iOS mobile or tablet device.\n   *\n   * @returns Whether the app is running in an iOS mobile or tablet device.\n   */\n  isIOS() {\n    return this.isMobile() && !this.is('android');\n  }\n  /**\n   * Checks if the app is running in an iPad device.\n   *\n   * @returns Whether the app is running in an iPad device.\n   */\n  isIPad() {\n    return this.isIOS() && this.is('ipad');\n  }\n  /**\n   * Checks if the app is running in an iPhone device.\n   *\n   * @returns Whether the app is running in an iPhone device.\n   */\n  isIPhone() {\n    return this.isIOS() && this.is('iphone');\n  }\n  /**\n   * Checks if the app is running in a mobile or tablet device (Cordova).\n   *\n   * @returns Whether the app is running in a mobile or tablet device.\n   */\n  isMobile() {\n    return this.is('cordova');\n  }\n  /**\n   * Check whether the device is configured to reduce motion.\n   *\n   * @returns Whether the device is configured to reduce motion.\n   */\n  prefersReducedMotion() {\n    return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n  }\n  /**\n   * Checks whether media capture is supported.\n   *\n   * @returns Whether media capture is supported.\n   */\n  supportsMediaCapture() {\n    return 'mediaDevices' in navigator;\n  }\n  /**\n   * Checks whether web assembly is supported.\n   *\n   * @returns Whether web assembly is supported.\n   */\n  supportsWebAssembly() {\n    return 'WebAssembly' in window;\n  }\n}\n_class = CorePlatformService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵCorePlatformService_BaseFactory;\n  return function CorePlatformService_Factory(t) {\n    return (ɵCorePlatformService_BaseFactory || (ɵCorePlatformService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CorePlatform = makeSingleton(CorePlatformService);","map":{"version":3,"names":["Platform","Device","makeSingleton","CorePlatformService","getPlatformMajorVersion","_Device$version","isMobile","Number","version","split","isAndroid","is","isIOS","isIPad","isIPhone","prefersReducedMotion","window","matchMedia","matches","supportsMediaCapture","navigator","supportsWebAssembly","t","factory","ɵfac","providedIn","CorePlatform"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/platform.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Device, makeSingleton } from '@singletons';\n\n/**\n * Extend Ionic's Platform service.\n */\n@Injectable({ providedIn: 'root' })\nexport class CorePlatformService extends Platform {\n\n    /**\n     * Get platform major version number.\n     *\n     * @returns The platform major number.\n     */\n    getPlatformMajorVersion(): number {\n        if (!this.isMobile()) {\n            return 0;\n        }\n\n        return Number(Device.version?.split('.')[0]);\n    }\n\n    /**\n     * Checks if the app is running in an Android mobile or tablet device.\n     *\n     * @returns Whether the app is running in an Android mobile or tablet device.\n     */\n    isAndroid(): boolean {\n        return this.isMobile() && this.is('android');\n    }\n\n    /**\n     * Checks if the app is running in an iOS mobile or tablet device.\n     *\n     * @returns Whether the app is running in an iOS mobile or tablet device.\n     */\n    isIOS(): boolean {\n        return this.isMobile() && !this.is('android');\n    }\n\n    /**\n     * Checks if the app is running in an iPad device.\n     *\n     * @returns Whether the app is running in an iPad device.\n     */\n    isIPad(): boolean {\n        return this.isIOS() && this.is('ipad');\n    }\n\n    /**\n     * Checks if the app is running in an iPhone device.\n     *\n     * @returns Whether the app is running in an iPhone device.\n     */\n    isIPhone(): boolean {\n        return this.isIOS() && this.is('iphone');\n    }\n\n    /**\n     * Checks if the app is running in a mobile or tablet device (Cordova).\n     *\n     * @returns Whether the app is running in a mobile or tablet device.\n     */\n    isMobile(): boolean {\n        return this.is('cordova');\n    }\n\n    /**\n     * Check whether the device is configured to reduce motion.\n     *\n     * @returns Whether the device is configured to reduce motion.\n     */\n    prefersReducedMotion(): boolean {\n        return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    }\n\n    /**\n     * Checks whether media capture is supported.\n     *\n     * @returns Whether media capture is supported.\n     */\n    supportsMediaCapture(): boolean {\n        return 'mediaDevices' in navigator;\n    }\n\n    /**\n     * Checks whether web assembly is supported.\n     *\n     * @returns Whether web assembly is supported.\n     */\n    supportsWebAssembly(): boolean {\n        return 'WebAssembly' in window;\n    }\n\n}\n\nexport const CorePlatform = makeSingleton(CorePlatformService);\n"],"mappings":";AAeA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,MAAM,EAAEC,aAAa,QAAQ,aAAa;;AAEnD;;;AAIA,OAAM,MAAOC,mBAAoB,SAAQH,QAAQ;EAE7C;;;;;EAKAI,uBAAuBA,CAAA;IAAA,IAAAC,eAAA;IACnB,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE,EAAE;MAClB,OAAO,CAAC;;IAGZ,OAAOC,MAAM,EAAAF,eAAA,GAACJ,MAAM,CAACO,OAAO,cAAAH,eAAA,uBAAdA,eAAA,CAAgBI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChD;EAEA;;;;;EAKAC,SAASA,CAAA;IACL,OAAO,IAAI,CAACJ,QAAQ,EAAE,IAAI,IAAI,CAACK,EAAE,CAAC,SAAS,CAAC;EAChD;EAEA;;;;;EAKAC,KAAKA,CAAA;IACD,OAAO,IAAI,CAACN,QAAQ,EAAE,IAAI,CAAC,IAAI,CAACK,EAAE,CAAC,SAAS,CAAC;EACjD;EAEA;;;;;EAKAE,MAAMA,CAAA;IACF,OAAO,IAAI,CAACD,KAAK,EAAE,IAAI,IAAI,CAACD,EAAE,CAAC,MAAM,CAAC;EAC1C;EAEA;;;;;EAKAG,QAAQA,CAAA;IACJ,OAAO,IAAI,CAACF,KAAK,EAAE,IAAI,IAAI,CAACD,EAAE,CAAC,QAAQ,CAAC;EAC5C;EAEA;;;;;EAKAL,QAAQA,CAAA;IACJ,OAAO,IAAI,CAACK,EAAE,CAAC,SAAS,CAAC;EAC7B;EAEA;;;;;EAKAI,oBAAoBA,CAAA;IAChB,OAAOC,MAAM,CAACC,UAAU,CAAC,kCAAkC,CAAC,CAACC,OAAO;EACxE;EAEA;;;;;EAKAC,oBAAoBA,CAAA;IAChB,OAAO,cAAc,IAAIC,SAAS;EACtC;EAEA;;;;;EAKAC,mBAAmBA,CAAA;IACf,OAAO,aAAa,IAAIL,MAAM;EAClC;;SArFSb,mBAAoB;;;;6GAApBA,MAAmB,IAAAmB,CAAA,IAAnBnB,MAAmB;EAAA;AAAA;;SAAnBA,MAAmB;EAAAoB,OAAA,EAAnBpB,MAAmB,CAAAqB,IAAA;EAAAC,UAAA,EADN;AAAM;AA0FhC,OAAO,MAAMC,YAAY,GAAGxB,aAAa,CAACC,mBAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}