{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova, checkAvailability, cordovaInstance, instancePropertyGet, instancePropertySet } from '@awesome-cordova-plugins/core';\nimport * as i0 from \"@angular/core\";\nvar SQLiteObject = /** @class */function () {\n  function SQLiteObject(_objectInstance) {\n    this._objectInstance = _objectInstance;\n  }\n  SQLiteObject.prototype.addTransaction = function (transaction) {\n    return cordovaInstance(this, \"addTransaction\", {\n      \"sync\": true\n    }, arguments);\n  };\n  SQLiteObject.prototype.transaction = function (fn) {\n    return cordovaInstance(this, \"transaction\", {\n      \"successIndex\": 2,\n      \"errorIndex\": 1\n    }, arguments);\n  };\n  SQLiteObject.prototype.readTransaction = function (fn) {\n    return cordovaInstance(this, \"readTransaction\", {}, arguments);\n  };\n  SQLiteObject.prototype.startNextTransaction = function () {\n    return cordovaInstance(this, \"startNextTransaction\", {\n      \"sync\": true\n    }, arguments);\n  };\n  SQLiteObject.prototype.open = function () {\n    return cordovaInstance(this, \"open\", {}, arguments);\n  };\n  SQLiteObject.prototype.close = function () {\n    return cordovaInstance(this, \"close\", {}, arguments);\n  };\n  SQLiteObject.prototype.executeSql = function (statement, params) {\n    return cordovaInstance(this, \"executeSql\", {}, arguments);\n  };\n  SQLiteObject.prototype.sqlBatch = function (sqlStatements) {\n    return cordovaInstance(this, \"sqlBatch\", {}, arguments);\n  };\n  SQLiteObject.prototype.abortallPendingTransactions = function () {\n    return cordovaInstance(this, \"abortallPendingTransactions\", {\n      \"sync\": true\n    }, arguments);\n  };\n  Object.defineProperty(SQLiteObject.prototype, \"databaseFeatures\", {\n    get: function () {\n      return instancePropertyGet(this, \"databaseFeatures\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"databaseFeatures\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SQLiteObject.prototype, \"openDBs\", {\n    get: function () {\n      return instancePropertyGet(this, \"openDBs\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"openDBs\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SQLiteObject;\n}();\nexport { SQLiteObject };\nvar SQLite = /** @class */function (_super) {\n  __extends(SQLite, _super);\n  function SQLite() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SQLite.prototype.create = function (config) {\n    var _this = this;\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return new Promise(function (resolve, reject) {\n          sqlitePlugin.openDatabase(config, function (db) {\n            return resolve(new SQLiteObject(db));\n          }, reject);\n        });\n      }\n    }();\n  };\n  SQLite.prototype.echoTest = function () {\n    return cordova(this, \"echoTest\", {}, arguments);\n  };\n  SQLite.prototype.selfTest = function () {\n    return cordova(this, \"selfTest\", {}, arguments);\n  };\n  SQLite.prototype.deleteDatabase = function (config) {\n    return cordova(this, \"deleteDatabase\", {}, arguments);\n  };\n  SQLite.ɵfac = /* @__PURE__ */function () {\n    let ɵSQLite_BaseFactory;\n    return function SQLite_Factory(t) {\n      return (ɵSQLite_BaseFactory || (ɵSQLite_BaseFactory = i0.ɵɵgetInheritedFactory(SQLite)))(t || SQLite);\n    };\n  }();\n  SQLite.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SQLite,\n    factory: SQLite.ɵfac\n  });\n  SQLite.pluginName = \"SQLite\";\n  SQLite.pluginRef = \"sqlitePlugin\";\n  SQLite.plugin = \"cordova-sqlite-storage\";\n  SQLite.repo = \"https://github.com/litehelpers/Cordova-sqlite-storage\";\n  SQLite.platforms = [\"Android\", \"iOS\", \"macOS\", \"Windows\"];\n  SQLite = __decorate([], SQLite);\n  return SQLite;\n}(AwesomeCordovaNativePlugin);\nexport { SQLite };\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SQLite, [{\n    type: Injectable\n  }], null, {\n    create: [],\n    echoTest: [],\n    selfTest: [],\n    deleteDatabase: []\n  });\n})();","map":{"version":3,"names":["__decorate","__extends","Injectable","AwesomeCordovaNativePlugin","cordova","checkAvailability","cordovaInstance","instancePropertyGet","instancePropertySet","i0","SQLiteObject","_objectInstance","prototype","addTransaction","transaction","arguments","fn","readTransaction","startNextTransaction","open","close","executeSql","statement","params","sqlBatch","sqlStatements","abortallPendingTransactions","Object","defineProperty","get","set","value","enumerable","configurable","SQLite","_super","apply","create","config","_this","Promise","resolve","reject","sqlitePlugin","openDatabase","db","echoTest","selfTest","deleteDatabase","ɵfac","ɵSQLite_BaseFactory","SQLite_Factory","t","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","pluginName","pluginRef","plugin","repo","platforms","ngDevMode","ɵsetClassMetadata","type"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@awesome-cordova-plugins/sqlite/ngx/index.js"],"sourcesContent":["import { __decorate, __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova, checkAvailability, cordovaInstance, instancePropertyGet, instancePropertySet } from '@awesome-cordova-plugins/core';\nimport * as i0 from \"@angular/core\";\nvar SQLiteObject = /** @class */ (function () {\n    function SQLiteObject(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    SQLiteObject.prototype.addTransaction = function (transaction) { return cordovaInstance(this, \"addTransaction\", { \"sync\": true }, arguments); };\n    SQLiteObject.prototype.transaction = function (fn) { return cordovaInstance(this, \"transaction\", { \"successIndex\": 2, \"errorIndex\": 1 }, arguments); };\n    SQLiteObject.prototype.readTransaction = function (fn) { return cordovaInstance(this, \"readTransaction\", {}, arguments); };\n    SQLiteObject.prototype.startNextTransaction = function () { return cordovaInstance(this, \"startNextTransaction\", { \"sync\": true }, arguments); };\n    SQLiteObject.prototype.open = function () { return cordovaInstance(this, \"open\", {}, arguments); };\n    SQLiteObject.prototype.close = function () { return cordovaInstance(this, \"close\", {}, arguments); };\n    SQLiteObject.prototype.executeSql = function (statement, params) { return cordovaInstance(this, \"executeSql\", {}, arguments); };\n    SQLiteObject.prototype.sqlBatch = function (sqlStatements) { return cordovaInstance(this, \"sqlBatch\", {}, arguments); };\n    SQLiteObject.prototype.abortallPendingTransactions = function () { return cordovaInstance(this, \"abortallPendingTransactions\", { \"sync\": true }, arguments); };\n    Object.defineProperty(SQLiteObject.prototype, \"databaseFeatures\", {\n        get: function () { return instancePropertyGet(this, \"databaseFeatures\"); },\n        set: function (value) { instancePropertySet(this, \"databaseFeatures\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SQLiteObject.prototype, \"openDBs\", {\n        get: function () { return instancePropertyGet(this, \"openDBs\"); },\n        set: function (value) { instancePropertySet(this, \"openDBs\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    return SQLiteObject;\n}());\nexport { SQLiteObject };\nvar SQLite = /** @class */ (function (_super) {\n    __extends(SQLite, _super);\n    function SQLite() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SQLite.prototype.create = function (config) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return new Promise(function (resolve, reject) {\n                    sqlitePlugin.openDatabase(config, function (db) { return resolve(new SQLiteObject(db)); }, reject);\n                });\n            }\n        })();\n    };\n    SQLite.prototype.echoTest = function () { return cordova(this, \"echoTest\", {}, arguments); };\n    SQLite.prototype.selfTest = function () { return cordova(this, \"selfTest\", {}, arguments); };\n    SQLite.prototype.deleteDatabase = function (config) { return cordova(this, \"deleteDatabase\", {}, arguments); };\n    SQLite.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: SQLite, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    SQLite.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: SQLite });\n    SQLite.pluginName = \"SQLite\";\n    SQLite.pluginRef = \"sqlitePlugin\";\n    SQLite.plugin = \"cordova-sqlite-storage\";\n    SQLite.repo = \"https://github.com/litehelpers/Cordova-sqlite-storage\";\n    SQLite.platforms = [\"Android\", \"iOS\", \"macOS\", \"Windows\"];\n    SQLite = __decorate([], SQLite);\n    return SQLite;\n}(AwesomeCordovaNativePlugin));\nexport { SQLite };\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: SQLite, decorators: [{\n            type: Injectable\n        }], propDecorators: { create: [], echoTest: [], selfTest: [], deleteDatabase: [] } });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}