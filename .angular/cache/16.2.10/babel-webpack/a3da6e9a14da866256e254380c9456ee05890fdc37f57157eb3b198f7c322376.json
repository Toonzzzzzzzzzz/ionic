{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreLang } from '@services/lang';\nimport { CoreFilterDefaultHandler } from '@features/filter/services/handlers/default-filter';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to support the multilang2 community filter.\n *\n * @see https://moodle.org/plugins/filter_multilang2\n */\nexport class AddonFilterMultilang2HandlerService extends CoreFilterDefaultHandler {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonFilterMultilang2Handler';\n    this.filterName = 'multilang2';\n    this.replacementDone = false;\n  }\n  /**\n   * This function filters the received text based on the language\n   * tags embedded in the text, and the current user language or\n   * 'other', if present.\n   *\n   * @param text The text to filter.\n   * @returns string The filtered text for this multilang block.\n   */\n  filter(text) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (text.indexOf('mlang') === -1) {\n        return text;\n      }\n      const currentLang = yield CoreLang.getCurrentLanguage();\n      _this.replacementDone = false;\n      const parentLanguage = CoreLang.getParentLanguage();\n      const search = /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/gim;\n      const result = text.replace(search, (subString, language, content) => _this.replaceLangs(currentLang, [subString, language, content], parentLanguage));\n      if (result === null) {\n        return text; // Error during regex processing, keep original text.\n      }\n\n      if (_this.replacementDone) {\n        return result;\n      }\n      const result2 = text.replace(search, (subString, language, content) => _this.replaceLangs('other', [subString, language, content], parentLanguage));\n      return result2 !== null && result2 !== void 0 ? result2 : text;\n    })();\n  }\n  /**\n   * This function filters the current block of multilang tag. If\n   * any of the tag languages (or their parent languages) match the\n   * specified filtering language, it returns the text of the\n   * block. Otherwise it returns an empty string.\n   *\n   * @param replaceLang A string that specifies the language used to filter the matches.\n   * @param langBlock An array containing the matching captured pieces of the\n   * regular expression. They are the languages of the tag, and the text associated with those languages.\n   * @param parentLanguage A string that contains the parent language.\n   *\n   * @returns replaced string.\n   */\n  replaceLangs(replaceLang, langBlock, parentLanguage) {\n    var _langBlock$, _langBlock$2;\n    // Normalize languages.\n    const blockLangs = ((_langBlock$ = langBlock[1]) !== null && _langBlock$ !== void 0 ? _langBlock$ : '').replace(/ /g, '').replace(/_/g, '-').toLowerCase().split(',');\n    const blockText = (_langBlock$2 = langBlock[2]) !== null && _langBlock$2 !== void 0 ? _langBlock$2 : '';\n    for (const blockLang of blockLangs) {\n      /* We don't check for empty values of blockLang as they simply don't\n       * match any language and they don't produce any errors or warnings.\n       */\n      if (blockLang === replaceLang || parentLanguage === blockLang) {\n        this.replacementDone = true;\n        return blockText;\n      }\n    }\n    return '';\n  }\n}\n_class = AddonFilterMultilang2HandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonFilterMultilang2HandlerService_BaseFactory;\n  return function AddonFilterMultilang2HandlerService_Factory(t) {\n    return (ɵAddonFilterMultilang2HandlerService_BaseFactory || (ɵAddonFilterMultilang2HandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonFilterMultilang2Handler = makeSingleton(AddonFilterMultilang2HandlerService);","map":{"version":3,"names":["CoreLang","CoreFilterDefaultHandler","makeSingleton","AddonFilterMultilang2HandlerService","constructor","name","filterName","replacementDone","filter","text","_this","_asyncToGenerator","indexOf","currentLang","getCurrentLanguage","parentLanguage","getParentLanguage","search","result","replace","subString","language","content","replaceLangs","result2","replaceLang","langBlock","_langBlock$","_langBlock$2","blockLangs","toLowerCase","split","blockText","blockLang","t","factory","ɵfac","providedIn","AddonFilterMultilang2Handler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/filter/multilang2/services/handlers/multilang2.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreLang } from '@services/lang';\nimport { CoreFilterDefaultHandler } from '@features/filter/services/handlers/default-filter';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Handler to support the multilang2 community filter.\n *\n * @see https://moodle.org/plugins/filter_multilang2\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonFilterMultilang2HandlerService extends CoreFilterDefaultHandler {\n\n    name = 'AddonFilterMultilang2Handler';\n    filterName = 'multilang2';\n    replacementDone = false;\n\n    /**\n     * This function filters the received text based on the language\n     * tags embedded in the text, and the current user language or\n     * 'other', if present.\n     *\n     * @param text The text to filter.\n     * @returns string The filtered text for this multilang block.\n     */\n    async filter(text: string): Promise<string> {\n        if (text.indexOf('mlang') === -1) {\n            return text;\n        }\n\n        const currentLang = await CoreLang.getCurrentLanguage();\n        this.replacementDone = false;\n        const parentLanguage = CoreLang.getParentLanguage();\n\n        const search = /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/gim;\n        const result = text.replace(\n            search,\n            (subString, language, content) => this.replaceLangs(currentLang, [subString, language, content], parentLanguage),\n        );\n\n        if (result === null) {\n            return text; // Error during regex processing, keep original text.\n        }\n\n        if (this.replacementDone) {\n            return result;\n        }\n\n        const result2 = text.replace(\n            search,\n            (subString, language, content) => this.replaceLangs('other', [subString, language, content], parentLanguage),\n        );\n\n        return result2 ?? text;\n    }\n\n    /**\n     * This function filters the current block of multilang tag. If\n     * any of the tag languages (or their parent languages) match the\n     * specified filtering language, it returns the text of the\n     * block. Otherwise it returns an empty string.\n     *\n     * @param replaceLang A string that specifies the language used to filter the matches.\n     * @param langBlock An array containing the matching captured pieces of the\n     * regular expression. They are the languages of the tag, and the text associated with those languages.\n     * @param parentLanguage A string that contains the parent language.\n     *\n     * @returns replaced string.\n     */\n    protected replaceLangs(replaceLang: string, langBlock: string[], parentLanguage: string | undefined): string {\n        // Normalize languages.\n        const blockLangs = (langBlock[1] ?? '').replace(/ /g, '').replace(/_/g, '-').toLowerCase().split(',');\n        const blockText = langBlock[2] ?? '';\n\n        for (const blockLang of blockLangs) {\n            /* We don't check for empty values of blockLang as they simply don't\n             * match any language and they don't produce any errors or warnings.\n             */\n            if (blockLang === replaceLang || parentLanguage === blockLang) {\n                this.replacementDone = true;\n\n                return blockText;\n            }\n        }\n\n        return '';\n    }\n\n}\n\nexport const AddonFilterMultilang2Handler = makeSingleton(AddonFilterMultilang2HandlerService);\n"],"mappings":";;AAgBA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,wBAAwB,QAAQ,mDAAmD;AAC5F,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;;;AAMA,OAAM,MAAOC,mCAAoC,SAAQF,wBAAwB;EADjFG,YAAA;;IAGI,KAAAC,IAAI,GAAG,8BAA8B;IACrC,KAAAC,UAAU,GAAG,YAAY;IACzB,KAAAC,eAAe,GAAG,KAAK;;EAEvB;;;;;;;;EAQMC,MAAMA,CAACC,IAAY;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACrB,IAAIF,IAAI,CAACG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;QAC9B,OAAOH,IAAI;;MAGf,MAAMI,WAAW,SAASb,QAAQ,CAACc,kBAAkB,EAAE;MACvDJ,KAAI,CAACH,eAAe,GAAG,KAAK;MAC5B,MAAMQ,cAAc,GAAGf,QAAQ,CAACgB,iBAAiB,EAAE;MAEnD,MAAMC,MAAM,GAAG,kFAAkF;MACjG,MAAMC,MAAM,GAAGT,IAAI,CAACU,OAAO,CACvBF,MAAM,EACN,CAACG,SAAS,EAAEC,QAAQ,EAAEC,OAAO,KAAKZ,KAAI,CAACa,YAAY,CAACV,WAAW,EAAE,CAACO,SAAS,EAAEC,QAAQ,EAAEC,OAAO,CAAC,EAAEP,cAAc,CAAC,CACnH;MAED,IAAIG,MAAM,KAAK,IAAI,EAAE;QACjB,OAAOT,IAAI,CAAC,CAAC;;;MAGjB,IAAIC,KAAI,CAACH,eAAe,EAAE;QACtB,OAAOW,MAAM;;MAGjB,MAAMM,OAAO,GAAGf,IAAI,CAACU,OAAO,CACxBF,MAAM,EACN,CAACG,SAAS,EAAEC,QAAQ,EAAEC,OAAO,KAAKZ,KAAI,CAACa,YAAY,CAAC,OAAO,EAAE,CAACH,SAAS,EAAEC,QAAQ,EAAEC,OAAO,CAAC,EAAEP,cAAc,CAAC,CAC/G;MAED,OAAOS,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAIf,IAAI;IAAC;EAC3B;EAEA;;;;;;;;;;;;;EAaUc,YAAYA,CAACE,WAAmB,EAAEC,SAAmB,EAAEX,cAAkC;IAAA,IAAAY,WAAA,EAAAC,YAAA;IAC/F;IACA,MAAMC,UAAU,GAAG,EAAAF,WAAA,GAACD,SAAS,CAAC,CAAC,CAAC,cAAAC,WAAA,cAAAA,WAAA,GAAI,EAAE,EAAER,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACW,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC;IACrG,MAAMC,SAAS,IAAAJ,YAAA,GAAGF,SAAS,CAAC,CAAC,CAAC,cAAAE,YAAA,cAAAA,YAAA,GAAI,EAAE;IAEpC,KAAK,MAAMK,SAAS,IAAIJ,UAAU,EAAE;MAChC;;;MAGA,IAAII,SAAS,KAAKR,WAAW,IAAIV,cAAc,KAAKkB,SAAS,EAAE;QAC3D,IAAI,CAAC1B,eAAe,GAAG,IAAI;QAE3B,OAAOyB,SAAS;;;IAIxB,OAAO,EAAE;EACb;;SA3ES7B,mCAAoC;;;;6IAApCA,MAAmC,IAAA+B,CAAA,IAAnC/B,MAAmC;EAAA;AAAA;;SAAnCA,MAAmC;EAAAgC,OAAA,EAAnChC,MAAmC,CAAAiC,IAAA;EAAAC,UAAA,EADtB;AAAM;AAgFhC,OAAO,MAAMC,4BAA4B,GAAGpC,aAAa,CAACC,mCAAmC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}