{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Base handler for question types.\n *\n * This class is needed because parent classes cannot have @Injectable in Angular v6, so the default handler cannot be a\n * parent class.\n */\nexport class CoreQuestionBaseHandler {\n  constructor() {\n    this.name = 'CoreQuestionBase';\n    this.type = 'base';\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns True or promise resolved with true if enabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * Return the Component to use to display the question.\n   * It's recommended to return the class of the component, but you can also return an instance of the component.\n   *\n   * @param question The question to render.\n   * @returns The component (or promise resolved with component) to use, undefined if not found.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponent(question) {\n    // There is no default component for questions.\n    return undefined;\n  }\n  /**\n   * Return the name of the behaviour to use for the question.\n   * If the question should use the default behaviour you shouldn't implement this function.\n   *\n   * @param question The question.\n   * @param behaviour The default behaviour.\n   * @returns The behaviour to use.\n   */\n  getBehaviour(question, behaviour) {\n    return behaviour;\n  }\n  /**\n   * Check if a question can be submitted.\n   * If a question cannot be submitted it should return a message explaining why (translated or not).\n   *\n   * @param question The question.\n   * @returns Prevent submit message. Undefined or empty if can be submitted.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getPreventSubmitMessage(question) {\n    // Never prevent by default.\n    return undefined;\n  }\n  /**\n   * @inheritdoc\n   */\n  getValidationError(question, answers, onlineError) {\n    return onlineError;\n  }\n  /**\n   * Check if a response is complete.\n   *\n   * @param question The question.\n   * @param answers Object with the question answers (without prefix).\n   * @param component The component the question is related to.\n   * @param componentId Component ID.\n   * @returns 1 if complete, 0 if not complete, -1 if cannot determine.\n   */\n  isCompleteResponse(question,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  answers,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  component,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  componentId) {\n    return -1;\n  }\n  /**\n   * Check if a student has provided enough of an answer for the question to be graded automatically,\n   * or whether it must be considered aborted.\n   *\n   * @param question The question.\n   * @param answers Object with the question answers (without prefix).\n   * @param component The component the question is related to.\n   * @param componentId Component ID.\n   * @returns 1 if gradable, 0 if not gradable, -1 if cannot determine.\n   */\n  isGradableResponse(question,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  answers,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  component,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  componentId) {\n    return -1;\n  }\n  /**\n   * Check if two responses are the same.\n   *\n   * @param question Question.\n   * @param prevAnswers Object with the previous question answers.\n   * @param newAnswers Object with the new question answers.\n   * @returns Whether they're the same.\n   */\n  isSameResponse(question,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  prevAnswers,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  newAnswers,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  component,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  componentId) {\n    return false;\n  }\n  /**\n   * Prepare and add to answers the data to send to server based in the input. Return promise if async.\n   *\n   * @param question Question.\n   * @param answers The answers retrieved from the form. Prepared answers must be stored in this object.\n   * @param offline Whether the data should be saved in offline.\n   * @param component The component the question is related to.\n   * @param componentId Component ID.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  prepareAnswers(question,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  answers,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  offline,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  component,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  componentId,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  siteId) {\n    // Nothing to do.\n  }\n  /**\n   * Validate if an offline sequencecheck is valid compared with the online one.\n   * This function only needs to be implemented if a specific compare is required.\n   *\n   * @param question The question.\n   * @param offlineSequenceCheck Sequence check stored in offline.\n   * @returns Whether sequencecheck is valid.\n   */\n  validateSequenceCheck(question, offlineSequenceCheck) {\n    return question.sequencecheck == Number(offlineSequenceCheck);\n  }\n}","map":{"version":3,"names":["CoreQuestionBaseHandler","constructor","name","type","isEnabled","_asyncToGenerator","getComponent","question","undefined","getBehaviour","behaviour","getPreventSubmitMessage","getValidationError","answers","onlineError","isCompleteResponse","component","componentId","isGradableResponse","isSameResponse","prevAnswers","newAnswers","prepareAnswers","offline","siteId","validateSequenceCheck","offlineSequenceCheck","sequencecheck","Number"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/question/classes/base-question-handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Type } from '@angular/core';\n\nimport { CoreQuestionQuestionParsed, CoreQuestionsAnswers } from '../services/question';\nimport { CoreQuestionHandler } from '../services/question-delegate';\n\n/**\n * Base handler for question types.\n *\n * This class is needed because parent classes cannot have @Injectable in Angular v6, so the default handler cannot be a\n * parent class.\n */\nexport class CoreQuestionBaseHandler implements CoreQuestionHandler {\n\n    name = 'CoreQuestionBase';\n    type = 'base';\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns True or promise resolved with true if enabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * Return the Component to use to display the question.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     *\n     * @param question The question to render.\n     * @returns The component (or promise resolved with component) to use, undefined if not found.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getComponent(question: CoreQuestionQuestionParsed): undefined | Type<unknown> | Promise<Type<unknown>> {\n        // There is no default component for questions.\n        return undefined;\n    }\n\n    /**\n     * Return the name of the behaviour to use for the question.\n     * If the question should use the default behaviour you shouldn't implement this function.\n     *\n     * @param question The question.\n     * @param behaviour The default behaviour.\n     * @returns The behaviour to use.\n     */\n    getBehaviour(question: CoreQuestionQuestionParsed, behaviour: string): string {\n        return behaviour;\n    }\n\n    /**\n     * Check if a question can be submitted.\n     * If a question cannot be submitted it should return a message explaining why (translated or not).\n     *\n     * @param question The question.\n     * @returns Prevent submit message. Undefined or empty if can be submitted.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getPreventSubmitMessage(question: CoreQuestionQuestionParsed): string | undefined {\n        // Never prevent by default.\n        return undefined;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getValidationError(\n        question: CoreQuestionQuestionParsed,\n        answers: CoreQuestionsAnswers,\n        onlineError: string,\n    ): string | undefined {\n        return onlineError;\n    }\n\n    /**\n     * Check if a response is complete.\n     *\n     * @param question The question.\n     * @param answers Object with the question answers (without prefix).\n     * @param component The component the question is related to.\n     * @param componentId Component ID.\n     * @returns 1 if complete, 0 if not complete, -1 if cannot determine.\n     */\n    isCompleteResponse(\n        question: CoreQuestionQuestionParsed, // eslint-disable-line @typescript-eslint/no-unused-vars\n        answers: CoreQuestionsAnswers, // eslint-disable-line @typescript-eslint/no-unused-vars\n        component: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n        componentId: string | number, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): number {\n        return -1;\n    }\n\n    /**\n     * Check if a student has provided enough of an answer for the question to be graded automatically,\n     * or whether it must be considered aborted.\n     *\n     * @param question The question.\n     * @param answers Object with the question answers (without prefix).\n     * @param component The component the question is related to.\n     * @param componentId Component ID.\n     * @returns 1 if gradable, 0 if not gradable, -1 if cannot determine.\n     */\n    isGradableResponse(\n        question: CoreQuestionQuestionParsed, // eslint-disable-line @typescript-eslint/no-unused-vars\n        answers: CoreQuestionsAnswers, // eslint-disable-line @typescript-eslint/no-unused-vars\n        component: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n        componentId: string | number, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): number {\n        return -1;\n    }\n\n    /**\n     * Check if two responses are the same.\n     *\n     * @param question Question.\n     * @param prevAnswers Object with the previous question answers.\n     * @param newAnswers Object with the new question answers.\n     * @returns Whether they're the same.\n     */\n    isSameResponse(\n        question: CoreQuestionQuestionParsed, // eslint-disable-line @typescript-eslint/no-unused-vars\n        prevAnswers: CoreQuestionsAnswers, // eslint-disable-line @typescript-eslint/no-unused-vars\n        newAnswers: CoreQuestionsAnswers, // eslint-disable-line @typescript-eslint/no-unused-vars\n        component: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n        componentId: string | number, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): boolean {\n        return false;\n    }\n\n    /**\n     * Prepare and add to answers the data to send to server based in the input. Return promise if async.\n     *\n     * @param question Question.\n     * @param answers The answers retrieved from the form. Prepared answers must be stored in this object.\n     * @param offline Whether the data should be saved in offline.\n     * @param component The component the question is related to.\n     * @param componentId Component ID.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    prepareAnswers(\n        question: CoreQuestionQuestionParsed, // eslint-disable-line @typescript-eslint/no-unused-vars\n        answers: CoreQuestionsAnswers, // eslint-disable-line @typescript-eslint/no-unused-vars\n        offline: boolean, // eslint-disable-line @typescript-eslint/no-unused-vars\n        component: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n        componentId: string | number, // eslint-disable-line @typescript-eslint/no-unused-vars\n        siteId?: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): void | Promise<void> {\n        // Nothing to do.\n    }\n\n    /**\n     * Validate if an offline sequencecheck is valid compared with the online one.\n     * This function only needs to be implemented if a specific compare is required.\n     *\n     * @param question The question.\n     * @param offlineSequenceCheck Sequence check stored in offline.\n     * @returns Whether sequencecheck is valid.\n     */\n    validateSequenceCheck(question: CoreQuestionQuestionParsed, offlineSequenceCheck: string): boolean {\n        return question.sequencecheck == Number(offlineSequenceCheck);\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;;AAMA,OAAM,MAAOA,uBAAuB;EAApCC,YAAA;IAEI,KAAAC,IAAI,GAAG,kBAAkB;IACzB,KAAAC,IAAI,GAAG,MAAM;EAoJjB;EAlJI;;;;;EAKMC,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB;EAEA;;;;;;;EAOA;EACAC,YAAYA,CAACC,QAAoC;IAC7C;IACA,OAAOC,SAAS;EACpB;EAEA;;;;;;;;EAQAC,YAAYA,CAACF,QAAoC,EAAEG,SAAiB;IAChE,OAAOA,SAAS;EACpB;EAEA;;;;;;;EAOA;EACAC,uBAAuBA,CAACJ,QAAoC;IACxD;IACA,OAAOC,SAAS;EACpB;EAEA;;;EAGAI,kBAAkBA,CACdL,QAAoC,EACpCM,OAA6B,EAC7BC,WAAmB;IAEnB,OAAOA,WAAW;EACtB;EAEA;;;;;;;;;EASAC,kBAAkBA,CACdR,QAAoC;EAAE;EACtCM,OAA6B;EAAE;EAC/BG,SAAiB;EAAE;EACnBC,WAA4B;IAE5B,OAAO,CAAC,CAAC;EACb;EAEA;;;;;;;;;;EAUAC,kBAAkBA,CACdX,QAAoC;EAAE;EACtCM,OAA6B;EAAE;EAC/BG,SAAiB;EAAE;EACnBC,WAA4B;IAE5B,OAAO,CAAC,CAAC;EACb;EAEA;;;;;;;;EAQAE,cAAcA,CACVZ,QAAoC;EAAE;EACtCa,WAAiC;EAAE;EACnCC,UAAgC;EAAE;EAClCL,SAAiB;EAAE;EACnBC,WAA4B;IAE5B,OAAO,KAAK;EAChB;EAEA;;;;;;;;;;EAUAK,cAAcA,CACVf,QAAoC;EAAE;EACtCM,OAA6B;EAAE;EAC/BU,OAAgB;EAAE;EAClBP,SAAiB;EAAE;EACnBC,WAA4B;EAAE;EAC9BO,MAAe;IAEf;EAAA;EAGJ;;;;;;;;EAQAC,qBAAqBA,CAAClB,QAAoC,EAAEmB,oBAA4B;IACpF,OAAOnB,QAAQ,CAACoB,aAAa,IAAIC,MAAM,CAACF,oBAAoB,CAAC;EACjE"},"metadata":{},"sourceType":"module","externalDependencies":[]}