{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreSitePlugins } from '@features/siteplugins/services/siteplugins';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\n/**\n * Handler to prefetch a module site plugin.\n */\nexport class CoreSitePluginsModulePrefetchHandler extends CoreCourseActivityPrefetchHandlerBase {\n  constructor(component, name, modName, handlerSchema) {\n    super();\n    this.handlerSchema = handlerSchema;\n    this.component = component;\n    this.name = name;\n    this.modName = modName;\n    this.isResource = !!handlerSchema.isresource;\n    if (handlerSchema.updatesnames) {\n      try {\n        this.updatesNames = new RegExp(handlerSchema.updatesnames);\n      } catch (ex) {\n        // Ignore errors.\n      }\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  download(module, courseId, dirPath) {\n    const siteId = CoreSites.getCurrentSiteId();\n    return this.prefetchPackage(module, courseId, siteId => this.downloadPrefetchPlugin(module, courseId, false, dirPath, siteId), siteId);\n  }\n  /**\n   * Download or prefetch the plugin, downloading the files and calling the needed WS.\n   *\n   * @param module The module object returned by WS.\n   * @param courseId Course ID.\n   * @param prefetch True to prefetch, false to download right away.\n   * @param dirPath Path of the directory where to store all the content files.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  downloadPrefetchPlugin(module, courseId, prefetch, dirPath, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const args = {\n        courseid: courseId,\n        cmid: module.id,\n        userid: site.getUserId()\n      };\n      yield Promise.all([\n      // Download the files (if any).\n      _this.downloadOrPrefetchFiles(site.getId(), module, courseId, prefetch, dirPath),\n      // Call all the offline functions.\n      CoreSitePlugins.prefetchFunctions(_this.component, args, _this.handlerSchema, courseId, module, prefetch, dirPath, site)]);\n    })();\n  }\n  /**\n   * Download or prefetch the plugin files.\n   *\n   * @param siteId Site ID.\n   * @param module The module object returned by WS.\n   * @param courseId Course ID.\n   * @param prefetch True to prefetch, false to download right away.\n   * @param dirPath Path of the directory where to store all the content files.\n   * @returns Promise resolved when done.\n   */\n  downloadOrPrefetchFiles(siteId, module, courseId, prefetch, dirPath) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Load module contents (ignore cache so we always have the latest data).\n      yield _this2.loadContents(module, courseId, true);\n      // Get the intro files.\n      const introFiles = yield _this2.getIntroFiles(module, courseId);\n      const contentFiles = _this2.getContentDownloadableFiles(module);\n      if (dirPath) {\n        yield Promise.all([\n        // Download intro files in filepool root folder.\n        CoreFilepool.downloadOrPrefetchFiles(siteId, introFiles, prefetch, false, _this2.component, module.id),\n        // Download content files inside dirPath.\n        CoreFilepool.downloadOrPrefetchFiles(siteId, contentFiles, prefetch, false, _this2.component, module.id, dirPath)]);\n      } else {\n        // No dirPath, download everything in filepool root folder.\n        yield CoreFilepool.downloadOrPrefetchFiles(siteId, introFiles.concat(contentFiles), prefetch, false, _this2.component, module.id);\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getDownloadSize() {\n    return _asyncToGenerator(function* () {\n      // In most cases, to calculate the size we'll have to do all the WS calls. Just return unknown size.\n      return {\n        size: -1,\n        total: false\n      };\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateContent(moduleId, courseId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const currentSite = CoreSites.getCurrentSite();\n      if (!currentSite) {\n        return;\n      }\n      const promises = [];\n      const siteId = currentSite.getId();\n      const args = {\n        courseid: courseId,\n        cmid: moduleId,\n        userid: currentSite.getUserId()\n      };\n      // Invalidate files and the module.\n      promises.push(CoreFilepool.invalidateFilesByComponent(siteId, _this3.component, moduleId));\n      promises.push(CoreCourse.invalidateModule(moduleId, siteId));\n      // Also invalidate all the WS calls.\n      for (const method in _this3.handlerSchema.offlinefunctions) {\n        if (currentSite.wsAvailable(method)) {\n          // The method is a WS.\n          promises.push(currentSite.invalidateWsCacheForKey(CoreSitePlugins.getCallWSCacheKey(method, args)));\n        } else {\n          // It's a method to get content.\n          promises.push(CoreSitePlugins.invalidateContent(_this3.component, method, args, siteId));\n        }\n      }\n      return CoreUtils.allPromises(promises);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  loadContents(module, courseId, ignoreCache) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.isResource) {\n        return CoreCourse.loadModuleContents(module, courseId, undefined, false, ignoreCache);\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  prefetch(module, courseId, single, dirPath) {\n    return this.prefetchPackage(module, courseId, siteId => this.downloadPrefetchPlugin(module, courseId, true, dirPath, siteId));\n  }\n}","map":{"version":3,"names":["CoreCourseActivityPrefetchHandlerBase","CoreCourse","CoreSitePlugins","CoreFilepool","CoreSites","CoreUtils","CoreSitePluginsModulePrefetchHandler","constructor","component","name","modName","handlerSchema","isResource","isresource","updatesnames","updatesNames","RegExp","ex","download","module","courseId","dirPath","siteId","getCurrentSiteId","prefetchPackage","downloadPrefetchPlugin","prefetch","_this","_asyncToGenerator","site","getSite","args","courseid","cmid","id","userid","getUserId","Promise","all","downloadOrPrefetchFiles","getId","prefetchFunctions","_this2","loadContents","introFiles","getIntroFiles","contentFiles","getContentDownloadableFiles","concat","getDownloadSize","size","total","invalidateContent","moduleId","_this3","currentSite","getCurrentSite","promises","push","invalidateFilesByComponent","invalidateModule","method","offlinefunctions","wsAvailable","invalidateWsCacheForKey","getCallWSCacheKey","allPromises","isEnabled","ignoreCache","_this4","loadModuleContents","undefined","single"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/siteplugins/classes/handlers/module-prefetch-handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourse, CoreCourseAnyModuleData } from '@features/course/services/course';\nimport { CoreSitePlugins, CoreSitePluginsCourseModuleHandlerData } from '@features/siteplugins/services/siteplugins';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreFileSizeSum } from '@services/plugin-file-delegate';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\n\n/**\n * Handler to prefetch a module site plugin.\n */\nexport class CoreSitePluginsModulePrefetchHandler extends CoreCourseActivityPrefetchHandlerBase {\n\n    protected isResource: boolean;\n\n    constructor(\n        component: string,\n        name: string,\n        modName: string,\n        protected handlerSchema: CoreSitePluginsCourseModuleHandlerData,\n    ) {\n        super();\n\n        this.component = component;\n        this.name = name;\n        this.modName = modName;\n        this.isResource = !!handlerSchema.isresource;\n\n        if (handlerSchema.updatesnames) {\n            try {\n                this.updatesNames = new RegExp(handlerSchema.updatesnames);\n            } catch (ex) {\n                // Ignore errors.\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    download(module: CoreCourseAnyModuleData, courseId: number, dirPath?: string): Promise<void> {\n        const siteId = CoreSites.getCurrentSiteId();\n\n        return this.prefetchPackage(\n            module,\n            courseId,\n            (siteId) => this.downloadPrefetchPlugin(module, courseId, false, dirPath, siteId),\n            siteId,\n        );\n    }\n\n    /**\n     * Download or prefetch the plugin, downloading the files and calling the needed WS.\n     *\n     * @param module The module object returned by WS.\n     * @param courseId Course ID.\n     * @param prefetch True to prefetch, false to download right away.\n     * @param dirPath Path of the directory where to store all the content files.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    protected async downloadPrefetchPlugin(\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        prefetch: boolean,\n        dirPath?: string,\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const args = {\n            courseid: courseId,\n            cmid: module.id,\n            userid: site.getUserId(),\n        };\n\n        await Promise.all([\n            // Download the files (if any).\n            this.downloadOrPrefetchFiles(site.getId(), module, courseId, prefetch, dirPath),\n\n            // Call all the offline functions.\n            CoreSitePlugins.prefetchFunctions(\n                this.component,\n                args,\n                this.handlerSchema,\n                courseId,\n                module,\n                prefetch,\n                dirPath,\n                site,\n            ),\n        ]);\n    }\n\n    /**\n     * Download or prefetch the plugin files.\n     *\n     * @param siteId Site ID.\n     * @param module The module object returned by WS.\n     * @param courseId Course ID.\n     * @param prefetch True to prefetch, false to download right away.\n     * @param dirPath Path of the directory where to store all the content files.\n     * @returns Promise resolved when done.\n     */\n    protected async downloadOrPrefetchFiles(\n        siteId: string,\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        prefetch: boolean,\n        dirPath?: string,\n    ): Promise<void> {\n        // Load module contents (ignore cache so we always have the latest data).\n        await this.loadContents(module, courseId, true);\n\n        // Get the intro files.\n        const introFiles = await this.getIntroFiles(module, courseId);\n\n        const contentFiles = this.getContentDownloadableFiles(module);\n\n        if (dirPath) {\n            await Promise.all([\n                // Download intro files in filepool root folder.\n                CoreFilepool.downloadOrPrefetchFiles(siteId, introFiles, prefetch, false, this.component, module.id),\n\n                // Download content files inside dirPath.\n                CoreFilepool.downloadOrPrefetchFiles(\n                    siteId,\n                    contentFiles,\n                    prefetch,\n                    false,\n                    this.component,\n                    module.id,\n                    dirPath,\n                ),\n            ]);\n        } else {\n            // No dirPath, download everything in filepool root folder.\n            await CoreFilepool.downloadOrPrefetchFiles(\n                siteId,\n                introFiles.concat(contentFiles),\n                prefetch,\n                false,\n                this.component,\n                module.id,\n            );\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getDownloadSize(): Promise<CoreFileSizeSum> {\n        // In most cases, to calculate the size we'll have to do all the WS calls. Just return unknown size.\n        return { size: -1, total: false };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateContent(moduleId: number, courseId: number): Promise<void> {\n        const currentSite = CoreSites.getCurrentSite();\n        if (!currentSite) {\n            return;\n        }\n\n        const promises: Promise<void>[] = [];\n        const siteId = currentSite.getId();\n        const args = {\n            courseid: courseId,\n            cmid: moduleId,\n            userid: currentSite.getUserId(),\n        };\n\n        // Invalidate files and the module.\n        promises.push(CoreFilepool.invalidateFilesByComponent(siteId, this.component, moduleId));\n        promises.push(CoreCourse.invalidateModule(moduleId, siteId));\n\n        // Also invalidate all the WS calls.\n        for (const method in this.handlerSchema.offlinefunctions) {\n            if (currentSite.wsAvailable(method)) {\n                // The method is a WS.\n                promises.push(currentSite.invalidateWsCacheForKey(CoreSitePlugins.getCallWSCacheKey(method, args)));\n            } else {\n                // It's a method to get content.\n                promises.push(CoreSitePlugins.invalidateContent(this.component, method, args, siteId));\n            }\n        }\n\n        return CoreUtils.allPromises(promises);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async loadContents(module: CoreCourseAnyModuleData, courseId: number, ignoreCache?: boolean): Promise<void> {\n        if (this.isResource) {\n            return CoreCourse.loadModuleContents(module, courseId, undefined, false, ignoreCache);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    prefetch(module: CoreCourseAnyModuleData, courseId: number, single?: boolean, dirPath?: string): Promise<void> {\n        return this.prefetchPackage(\n            module,\n            courseId,\n            (siteId) => this.downloadPrefetchPlugin(module, courseId, true, dirPath, siteId),\n        );\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}