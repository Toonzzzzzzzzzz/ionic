{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonNotificationsProvider } from '../notifications';\nimport * as i0 from \"@angular/core\";\n/**\n * Notifications cron handler.\n */\nexport class AddonNotificationsCronHandlerService {\n  constructor() {\n    this.name = 'AddonNotificationsCronHandler';\n  }\n  /**\n   * Get the time between consecutive executions.\n   *\n   * @returns Time between consecutive executions (in ms).\n   */\n  getInterval() {\n    return CorePlatform.isMobile() ? 600000 : 60000; // 1 or 10 minutes.\n  }\n  /**\n   * Check whether it's a synchronization process or not. True if not defined.\n   *\n   * @returns Whether it's a synchronization process or not.\n   */\n  isSync() {\n    return false;\n  }\n  /**\n   * Check whether the sync can be executed manually. Call isSync if not defined.\n   *\n   * @returns Whether the sync can be executed manually.\n   */\n  canManualSync() {\n    return true;\n  }\n  /**\n   * Execute the process.\n   * Receives the ID of the site affected, undefined for all sites.\n   *\n   * @param siteId ID of the site affected, undefined for all sites.\n   * @param force Wether the execution is forced (manual sync).\n   * @returns Promise resolved when done, rejected if failure. If the promise is rejected, this function\n   *         will be called again often, it shouldn't be abused.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  execute(siteId, force) {\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getCurrentSite();\n      if (!CoreSites.isCurrentSite(siteId) || !site || site.isFeatureDisabled('CoreMainMenuDelegate_AddonNotifications')) {\n        return;\n      }\n      CoreEvents.trigger(AddonNotificationsProvider.READ_CRON_EVENT, {}, CoreSites.getCurrentSiteId());\n    })();\n  }\n}\n_class = AddonNotificationsCronHandlerService;\n_class.ɵfac = function AddonNotificationsCronHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonNotificationsCronHandler = makeSingleton(AddonNotificationsCronHandlerService);","map":{"version":3,"names":["CorePlatform","CoreSites","makeSingleton","CoreEvents","AddonNotificationsProvider","AddonNotificationsCronHandlerService","constructor","name","getInterval","isMobile","isSync","canManualSync","execute","siteId","force","_asyncToGenerator","site","getCurrentSite","isCurrentSite","isFeatureDisabled","trigger","READ_CRON_EVENT","getCurrentSiteId","factory","ɵfac","providedIn","AddonNotificationsCronHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/notifications/services/handlers/cron.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreCronHandler } from '@services/cron';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonNotificationsProvider } from '../notifications';\n\n/**\n * Notifications cron handler.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonNotificationsCronHandlerService implements CoreCronHandler {\n\n    name = 'AddonNotificationsCronHandler';\n\n    /**\n     * Get the time between consecutive executions.\n     *\n     * @returns Time between consecutive executions (in ms).\n     */\n    getInterval(): number {\n        return CorePlatform.isMobile() ? 600000 : 60000; // 1 or 10 minutes.\n    }\n\n    /**\n     * Check whether it's a synchronization process or not. True if not defined.\n     *\n     * @returns Whether it's a synchronization process or not.\n     */\n    isSync(): boolean {\n        return false;\n    }\n\n    /**\n     * Check whether the sync can be executed manually. Call isSync if not defined.\n     *\n     * @returns Whether the sync can be executed manually.\n     */\n    canManualSync(): boolean {\n        return true;\n    }\n\n    /**\n     * Execute the process.\n     * Receives the ID of the site affected, undefined for all sites.\n     *\n     * @param siteId ID of the site affected, undefined for all sites.\n     * @param force Wether the execution is forced (manual sync).\n     * @returns Promise resolved when done, rejected if failure. If the promise is rejected, this function\n     *         will be called again often, it shouldn't be abused.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async execute(siteId?: string, force?: boolean): Promise<void> {\n        const site = CoreSites.getCurrentSite();\n\n        if (\n            !CoreSites.isCurrentSite(siteId) ||\n            !site ||\n            site.isFeatureDisabled('CoreMainMenuDelegate_AddonNotifications')\n        ) {\n            return;\n        }\n\n        CoreEvents.trigger(AddonNotificationsProvider.READ_CRON_EVENT, {}, CoreSites.getCurrentSiteId());\n    }\n\n}\n\nexport const AddonNotificationsCronHandler = makeSingleton(AddonNotificationsCronHandlerService);\n"],"mappings":";;AAiBA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,0BAA0B,QAAQ,kBAAkB;;AAE7D;;;AAIA,OAAM,MAAOC,oCAAoC;EADjDC,YAAA;IAGI,KAAAC,IAAI,GAAG,+BAA+B;;EAEtC;;;;;EAKAC,WAAWA,CAAA;IACP,OAAOR,YAAY,CAACS,QAAQ,EAAE,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC;EACrD;EAEA;;;;;EAKAC,MAAMA,CAAA;IACF,OAAO,KAAK;EAChB;EAEA;;;;;EAKAC,aAAaA,CAAA;IACT,OAAO,IAAI;EACf;EAEA;;;;;;;;;EASA;EACMC,OAAOA,CAACC,MAAe,EAAEC,KAAe;IAAA,OAAAC,iBAAA;MAC1C,MAAMC,IAAI,GAAGf,SAAS,CAACgB,cAAc,EAAE;MAEvC,IACI,CAAChB,SAAS,CAACiB,aAAa,CAACL,MAAM,CAAC,IAChC,CAACG,IAAI,IACLA,IAAI,CAACG,iBAAiB,CAAC,yCAAyC,CAAC,EACnE;QACE;;MAGJhB,UAAU,CAACiB,OAAO,CAAChB,0BAA0B,CAACiB,eAAe,EAAE,EAAE,EAAEpB,SAAS,CAACqB,gBAAgB,EAAE,CAAC;IAAC;EACrG;;SArDSjB,oCAAoC;;mBAApCA,MAAoC;AAAA;;SAApCA,MAAoC;EAAAkB,OAAA,EAApClB,MAAoC,CAAAmB,IAAA;EAAAC,UAAA,EADvB;AAAM;AA0DhC,OAAO,MAAMC,6BAA6B,GAAGxB,aAAa,CAACG,oCAAoC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}