{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { AddonModAssignSubmissionPluginBaseComponent } from '@addons/mod/assign/classes/base-submission-plugin-component';\nimport { AddonModAssignProvider, AddonModAssign } from '@addons/mod/assign/services/assign';\nimport { AddonModAssignOffline } from '@addons/mod/assign/services/assign-offline';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nconst _c0 = function (a0) {\n  return {\n    \"$a\": a0\n  };\n};\nfunction AddonModAssignSubmissionOnlineTextComponent_ion_item_0_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(2, 1, \"addon.mod_assign.numwords\", i0.ɵɵpureFunction1(4, _c0, ctx_r2.words)));\n  }\n}\nfunction AddonModAssignSubmissionOnlineTextComponent_ion_item_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 2)(1, \"ion-label\")(2, \"h2\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, AddonModAssignSubmissionOnlineTextComponent_ion_item_0_p_4_Template, 3, 6, \"p\", 1);\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵelement(6, \"core-format-text\", 3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.plugin.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.words);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"component\", ctx_r0.component)(\"componentId\", ctx_r0.assign.cmid)(\"text\", ctx_r0.text)(\"contextInstanceId\", ctx_r0.assign.cmid)(\"courseId\", ctx_r0.assign.course);\n  }\n}\nfunction AddonModAssignSubmissionOnlineTextComponent_div_1_ion_item_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 2)(1, \"ion-label\")(2, \"p\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 2, \"addon.mod_assign.wordlimit\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 4, \"core.numwords\", i0.ɵɵpureFunction1(7, _c0, ctx_r3.words + \" / \" + ctx_r3.wordLimit)));\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    userid: a0,\n    action: \"editsubmission\"\n  };\n};\nfunction AddonModAssignSubmissionOnlineTextComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"ion-item-divider\", 4)(2, \"ion-label\")(3, \"h2\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(5, AddonModAssignSubmissionOnlineTextComponent_div_1_ion_item_5_Template, 8, 9, \"ion-item\", 0);\n    i0.ɵɵelementStart(6, \"ion-item\", 2)(7, \"ion-label\", 5);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"core-rich-text-editor\", 6);\n    i0.ɵɵlistener(\"contentChanged\", function AddonModAssignSubmissionOnlineTextComponent_div_1_Template_core_rich_text_editor_contentChanged_9_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onChange($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"sticky\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.plugin.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.wordLimitEnabled && ctx_r1.words >= 0);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.plugin.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"control\", ctx_r1.control)(\"placeholder\", ctx_r1.plugin.name)(\"component\", ctx_r1.component)(\"componentId\", ctx_r1.assign.cmid)(\"autoSave\", true)(\"contextInstanceId\", ctx_r1.assign.cmid)(\"draftExtraParams\", i0.ɵɵpureFunction1(11, _c1, ctx_r1.currentUserId));\n  }\n}\n/**\n * Component to render an onlinetext submission plugin.\n */\nexport class AddonModAssignSubmissionOnlineTextComponent extends AddonModAssignSubmissionPluginBaseComponent {\n  constructor(fb, element) {\n    super();\n    this.fb = fb;\n    this.words = 0;\n    this.component = AddonModAssignProvider.COMPONENT;\n    this.text = '';\n    this.loaded = false;\n    this.wordLimitEnabled = false;\n    this.wordLimit = 0;\n    this.element = element.nativeElement;\n    this.currentUserId = CoreSites.getCurrentSiteUserId();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _this$configs, _this$configs2;\n      // Get the text. Check if we have anything offline.\n      const offlineData = yield CoreUtils.ignoreErrors(AddonModAssignOffline.getSubmission(_this.assign.id), undefined);\n      _this.wordLimitEnabled = !!parseInt(((_this$configs = _this.configs) === null || _this$configs === void 0 ? void 0 : _this$configs.wordlimitenabled) || '0', 10);\n      _this.wordLimit = parseInt(((_this$configs2 = _this.configs) === null || _this$configs2 === void 0 ? void 0 : _this$configs2.wordlimit) || '0');\n      try {\n        if (offlineData && offlineData.plugindata && offlineData.plugindata.onlinetext_editor) {\n          _this.text = offlineData.plugindata.onlinetext_editor.text;\n        } else {\n          // No offline data found, return online text.\n          _this.text = AddonModAssign.getSubmissionPluginText(_this.plugin);\n        }\n        // Set the text.\n        if (!_this.edit) {\n          // Not editing, see full text when clicked.\n          _this.element.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (_this.text) {\n              // Open a new state with the interpolated contents.\n              CoreTextUtils.viewText(_this.plugin.name, _this.text, {\n                component: _this.component,\n                componentId: _this.assign.cmid,\n                filter: true,\n                contextLevel: 'module',\n                instanceId: _this.assign.cmid,\n                courseId: _this.assign.course\n              });\n            }\n          });\n        } else {\n          // Create and add the control.\n          _this.control = _this.fb.control(_this.text);\n        }\n        // Calculate initial words.\n        if (_this.wordLimitEnabled) {\n          _this.words = CoreTextUtils.countWords(_this.text);\n        }\n      } finally {\n        _this.loaded = true;\n      }\n    })();\n  }\n  /**\n   * Text changed.\n   *\n   * @param text The new text.\n   */\n  onChange(text) {\n    // Count words if needed.\n    if (this.wordLimitEnabled) {\n      // Cancel previous wait.\n      clearTimeout(this.wordCountTimeout);\n      // Wait before calculating, if the user keeps inputing we won't calculate.\n      // This is to prevent slowing down devices, this calculation can be slow if the text is long.\n      this.wordCountTimeout = window.setTimeout(() => {\n        this.words = CoreTextUtils.countWords(text);\n      }, 1500);\n    }\n  }\n}\n_class = AddonModAssignSubmissionOnlineTextComponent;\n_class.ɵfac = function AddonModAssignSubmissionOnlineTextComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"addon-mod-assign-submission-online-text\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"class\", \"ion-text-wrap\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"ion-text-wrap\"], [\"collapsible-item\", \"\", \"contextLevel\", \"module\", 3, \"component\", \"componentId\", \"text\", \"contextInstanceId\", \"courseId\"], [1, \"ion-text-wrap\", 3, \"sticky\"], [1, \"sr-only\"], [\"name\", \"onlinetext_editor_text\", \"contextLevel\", \"module\", \"elementId\", \"onlinetext_editor\", 3, \"control\", \"placeholder\", \"component\", \"componentId\", \"autoSave\", \"contextInstanceId\", \"draftExtraParams\", \"contentChanged\"], [1, \"item-heading\"]],\n  template: function AddonModAssignSubmissionOnlineTextComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AddonModAssignSubmissionOnlineTextComponent_ion_item_0_Template, 7, 7, \"ion-item\", 0);\n      i0.ɵɵtemplate(1, AddonModAssignSubmissionOnlineTextComponent_div_1_Template, 10, 13, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.edit && ctx.text);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.edit && ctx.loaded);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"names":["AddonModAssignSubmissionPluginBaseComponent","AddonModAssignProvider","AddonModAssign","AddonModAssignOffline","CoreSites","CoreTextUtils","CoreUtils","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind2","ɵɵpureFunction1","_c0","ctx_r2","words","ɵɵtemplate","AddonModAssignSubmissionOnlineTextComponent_ion_item_0_p_4_Template","ɵɵelement","ctx_r0","plugin","name","ɵɵproperty","component","assign","cmid","text","course","ɵɵpipeBind1","ctx_r3","wordLimit","AddonModAssignSubmissionOnlineTextComponent_div_1_ion_item_5_Template","ɵɵlistener","AddonModAssignSubmissionOnlineTextComponent_div_1_Template_core_rich_text_editor_contentChanged_9_listener","$event","ɵɵrestoreView","_r5","ctx_r4","ɵɵnextContext","ɵɵresetView","onChange","ctx_r1","wordLimitEnabled","control","_c1","currentUserId","AddonModAssignSubmissionOnlineTextComponent","constructor","fb","element","COMPONENT","loaded","nativeElement","getCurrentSiteUserId","ngOnInit","_this","_asyncToGenerator","_this$configs","_this$configs2","offlineData","ignoreErrors","getSubmission","id","undefined","parseInt","configs","wordlimitenabled","wordlimit","plugindata","onlinetext_editor","getSubmissionPluginText","edit","addEventListener","e","preventDefault","stopPropagation","viewText","componentId","filter","contextLevel","instanceId","courseId","countWords","clearTimeout","wordCountTimeout","window","setTimeout","ɵɵdirectiveInject","i1","FormBuilder","ElementRef","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","AddonModAssignSubmissionOnlineTextComponent_Template","rf","ctx","AddonModAssignSubmissionOnlineTextComponent_ion_item_0_Template","AddonModAssignSubmissionOnlineTextComponent_div_1_Template"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/submission/onlinetext/component/onlinetext.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/submission/onlinetext/component/addon-mod-assign-submission-onlinetext.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AddonModAssignSubmissionPluginBaseComponent } from '@addons/mod/assign/classes/base-submission-plugin-component';\nimport { AddonModAssignProvider, AddonModAssign } from '@addons/mod/assign/services/assign';\nimport { AddonModAssignOffline } from '@addons/mod/assign/services/assign-offline';\nimport { Component, OnInit, ElementRef } from '@angular/core';\nimport { FormBuilder, FormControl } from '@angular/forms';\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModAssignSubmissionOnlineTextPluginData } from '../services/handler';\n\n/**\n * Component to render an onlinetext submission plugin.\n */\n@Component({\n    selector: 'addon-mod-assign-submission-online-text',\n    templateUrl: 'addon-mod-assign-submission-onlinetext.html',\n})\nexport class AddonModAssignSubmissionOnlineTextComponent extends AddonModAssignSubmissionPluginBaseComponent implements OnInit {\n\n    control?: FormControl;\n    words = 0;\n    component = AddonModAssignProvider.COMPONENT;\n    text = '';\n    loaded = false;\n    wordLimitEnabled = false;\n    currentUserId: number;\n    wordLimit = 0;\n\n    protected wordCountTimeout?: number;\n    protected element: HTMLElement;\n\n    constructor(\n        protected fb: FormBuilder,\n        element: ElementRef,\n    ) {\n        super();\n        this.element = element.nativeElement;\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        // Get the text. Check if we have anything offline.\n        const offlineData = await CoreUtils.ignoreErrors(\n            AddonModAssignOffline.getSubmission(this.assign.id),\n            undefined,\n        );\n\n        this.wordLimitEnabled = !!parseInt(this.configs?.wordlimitenabled || '0', 10);\n        this.wordLimit = parseInt(this.configs?.wordlimit || '0');\n\n        try {\n            if (offlineData && offlineData.plugindata && offlineData.plugindata.onlinetext_editor) {\n                this.text = (<AddonModAssignSubmissionOnlineTextPluginData>offlineData.plugindata).onlinetext_editor.text;\n            } else {\n                // No offline data found, return online text.\n                this.text = AddonModAssign.getSubmissionPluginText(this.plugin);\n            }\n\n            // Set the text.\n            if (!this.edit) {\n                // Not editing, see full text when clicked.\n                this.element.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    if (this.text) {\n                        // Open a new state with the interpolated contents.\n                        CoreTextUtils.viewText(this.plugin.name, this.text, {\n                            component: this.component,\n                            componentId: this.assign.cmid,\n                            filter: true,\n                            contextLevel: 'module',\n                            instanceId: this.assign.cmid,\n                            courseId: this.assign.course,\n                        });\n                    }\n                });\n            } else {\n                // Create and add the control.\n                this.control = this.fb.control(this.text);\n            }\n\n            // Calculate initial words.\n            if (this.wordLimitEnabled) {\n                this.words = CoreTextUtils.countWords(this.text);\n            }\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Text changed.\n     *\n     * @param text The new text.\n     */\n    onChange(text?: string | null): void {\n        // Count words if needed.\n        if (this.wordLimitEnabled) {\n            // Cancel previous wait.\n            clearTimeout(this.wordCountTimeout);\n\n            // Wait before calculating, if the user keeps inputing we won't calculate.\n            // This is to prevent slowing down devices, this calculation can be slow if the text is long.\n            this.wordCountTimeout = window.setTimeout(() => {\n                this.words = CoreTextUtils.countWords(text);\n            }, 1500);\n        }\n    }\n\n}\n","<!-- Read only -->\n<ion-item class=\"ion-text-wrap\" *ngIf=\"!edit && text\">\n    <ion-label>\n        <h2>{{ plugin.name }}</h2>\n        <p *ngIf=\"words\">{{ 'addon.mod_assign.numwords' | translate: {'$a': words} }}</p>\n        <p>\n            <core-format-text [component]=\"component\" [componentId]=\"assign.cmid\" collapsible-item [text]=\"text\" contextLevel=\"module\"\n                [contextInstanceId]=\"assign.cmid\" [courseId]=\"assign.course\" />\n        </p>\n    </ion-label>\n</ion-item>\n\n<!-- Edit -->\n<div *ngIf=\"edit && loaded\">\n    <ion-item-divider class=\"ion-text-wrap\" [sticky]=\"true\">\n        <ion-label>\n            <h2>{{ plugin.name }}</h2>\n        </ion-label>\n    </ion-item-divider>\n    <ion-item class=\"ion-text-wrap\" *ngIf=\"wordLimitEnabled && words >= 0\">\n        <ion-label>\n            <p class=\"item-heading\">{{ 'addon.mod_assign.wordlimit' | translate }}</p>\n            <p>{{ 'core.numwords' | translate: {'$a': words + ' / ' + wordLimit} }}</p>\n        </ion-label>\n    </ion-item>\n    <ion-item class=\"ion-text-wrap\">\n        <ion-label class=\"sr-only\">{{ plugin.name }}</ion-label>\n        <core-rich-text-editor [control]=\"control\" [placeholder]=\"plugin.name\" name=\"onlinetext_editor_text\"\n            (contentChanged)=\"onChange($event)\" [component]=\"component\" [componentId]=\"assign.cmid\" [autoSave]=\"true\" contextLevel=\"module\"\n            [contextInstanceId]=\"assign.cmid\" elementId=\"onlinetext_editor\"\n            [draftExtraParams]=\"{userid: currentUserId, action: 'editsubmission'}\" />\n    </ion-item>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}