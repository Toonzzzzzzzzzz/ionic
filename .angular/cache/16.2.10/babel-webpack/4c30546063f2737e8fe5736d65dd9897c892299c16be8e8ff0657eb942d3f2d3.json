{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton } from '@singletons';\nimport { CoreConfig } from './config';\nimport { CoreNative } from '@features/native/services/native';\nimport * as i0 from \"@angular/core\";\n/**\n * Manage referrers.\n */\nexport class CoreReferrerService {\n  /**\n   * Consume the install referrer URL (Android only).\n   * This function will try to retrieve the siteurl supplied as referrer to Google Play.\n   *\n   * @returns Referrer URL, undefined if not supported, already consumed or no referrer URL.\n   */\n  consumeInstallReferrerUrl() {\n    return _asyncToGenerator(function* () {\n      const installReferrerPlugin = CoreNative.plugin('installReferrer');\n      if (!installReferrerPlugin) {\n        return;\n      }\n      // Only get the referrer URL once, it's only needed when the app is installed.\n      const referredConsumed = yield CoreConfig.get(CoreReferrerService.INSTALL_REFERRER_CONSUMED, 0);\n      if (referredConsumed) {\n        return;\n      }\n      try {\n        var _result$referrer;\n        const result = yield installReferrerPlugin.getReferrer();\n        const siteUrlMatch = ((_result$referrer = result.referrer) !== null && _result$referrer !== void 0 ? _result$referrer : '').match(/siteurl=([^&]+)/);\n        return siteUrlMatch === null || siteUrlMatch === void 0 ? void 0 : siteUrlMatch[1];\n      } catch (_unused) {\n        // Error getting referrer, it probably means Google Play is not available.\n      } finally {\n        yield CoreConfig.set(CoreReferrerService.INSTALL_REFERRER_CONSUMED, 1);\n      }\n    })();\n  }\n}\n_class = CoreReferrerService;\n_class.INSTALL_REFERRER_CONSUMED = 'install_referrer_consumed';\n_class.ɵfac = function CoreReferrerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreReferrer = makeSingleton(CoreReferrerService);","map":{"version":3,"names":["makeSingleton","CoreConfig","CoreNative","CoreReferrerService","consumeInstallReferrerUrl","_asyncToGenerator","installReferrerPlugin","plugin","referredConsumed","get","INSTALL_REFERRER_CONSUMED","_result$referrer","result","getReferrer","siteUrlMatch","referrer","match","_unused","set","_class","factory","ɵfac","providedIn","CoreReferrer"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/referrer.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { makeSingleton } from '@singletons';\nimport { CoreConfig } from './config';\nimport { CoreNative } from '@features/native/services/native';\n\n/**\n * Manage referrers.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreReferrerService {\n\n    protected static readonly INSTALL_REFERRER_CONSUMED = 'install_referrer_consumed';\n\n    /**\n     * Consume the install referrer URL (Android only).\n     * This function will try to retrieve the siteurl supplied as referrer to Google Play.\n     *\n     * @returns Referrer URL, undefined if not supported, already consumed or no referrer URL.\n     */\n    async consumeInstallReferrerUrl(): Promise<string | undefined> {\n        const installReferrerPlugin = CoreNative.plugin('installReferrer');\n        if (!installReferrerPlugin) {\n            return;\n        }\n\n        // Only get the referrer URL once, it's only needed when the app is installed.\n        const referredConsumed = await CoreConfig.get(CoreReferrerService.INSTALL_REFERRER_CONSUMED, 0);\n        if (referredConsumed) {\n            return;\n        }\n\n        try {\n            const result = await installReferrerPlugin.getReferrer();\n\n            const siteUrlMatch = (result.referrer ?? '').match(/siteurl=([^&]+)/);\n\n            return siteUrlMatch?.[1];\n        } catch {\n            // Error getting referrer, it probably means Google Play is not available.\n        } finally {\n            await CoreConfig.set(CoreReferrerService.INSTALL_REFERRER_CONSUMED, 1);\n        }\n    }\n\n}\n\nexport const CoreReferrer = makeSingleton(CoreReferrerService);\n"],"mappings":";;AAeA,SAASA,aAAa,QAAQ,aAAa;AAC3C,SAASC,UAAU,QAAQ,UAAU;AACrC,SAASC,UAAU,QAAQ,kCAAkC;;AAE7D;;;AAIA,OAAM,MAAOC,mBAAmB;EAI5B;;;;;;EAMMC,yBAAyBA,CAAA;IAAA,OAAAC,iBAAA;MAC3B,MAAMC,qBAAqB,GAAGJ,UAAU,CAACK,MAAM,CAAC,iBAAiB,CAAC;MAClE,IAAI,CAACD,qBAAqB,EAAE;QACxB;;MAGJ;MACA,MAAME,gBAAgB,SAASP,UAAU,CAACQ,GAAG,CAACN,mBAAmB,CAACO,yBAAyB,EAAE,CAAC,CAAC;MAC/F,IAAIF,gBAAgB,EAAE;QAClB;;MAGJ,IAAI;QAAA,IAAAG,gBAAA;QACA,MAAMC,MAAM,SAASN,qBAAqB,CAACO,WAAW,EAAE;QAExD,MAAMC,YAAY,GAAG,EAAAH,gBAAA,GAACC,MAAM,CAACG,QAAQ,cAAAJ,gBAAA,cAAAA,gBAAA,GAAI,EAAE,EAAEK,KAAK,CAAC,iBAAiB,CAAC;QAErE,OAAOF,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAG,CAAC,CAAC;OAC3B,CAAC,OAAAG,OAAA,EAAM;QACJ;MAAA,CACH,SAAS;QACN,MAAMhB,UAAU,CAACiB,GAAG,CAACf,mBAAmB,CAACO,yBAAyB,EAAE,CAAC,CAAC;;IACzE;EACL;;SAjCSP,mBAAmB;AAEFgB,MAAA,CAAAT,yBAAyB,GAAG,2BAA2B;;mBAFxEP,MAAmB;AAAA;;SAAnBA,MAAmB;EAAAiB,OAAA,EAAnBjB,MAAmB,CAAAkB,IAAA;EAAAC,UAAA,EADN;AAAM;AAsChC,OAAO,MAAMC,YAAY,GAAGvB,aAAa,CAACG,mBAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}