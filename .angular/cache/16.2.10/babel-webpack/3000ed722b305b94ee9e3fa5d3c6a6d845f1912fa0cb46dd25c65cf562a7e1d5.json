{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreCourseModuleMainActivityComponent } from '@features/course/classes/main-activity-component';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreRatingProvider } from '@features/rating/services/rating';\nimport { CoreRatingOffline } from '@features/rating/services/rating-offline';\nimport { CoreRatingSyncProvider } from '@features/rating/services/rating-sync';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModGlossaryEntriesSource } from '../../classes/glossary-entries-source';\nimport { AddonModGlossary, AddonModGlossaryProvider, GLOSSARY_ENTRY_ADDED, GLOSSARY_ENTRY_DELETED, GLOSSARY_ENTRY_UPDATED } from '../../services/glossary';\nimport { GLOSSARY_AUTO_SYNCED } from '../../services/glossary-sync';\nimport { AddonModGlossaryModuleHandlerService } from '../../services/handlers/module';\nimport { AddonModGlossaryPrefetchHandler } from '../../services/handlers/prefetch';\nimport { AddonModGlossaryModePickerPopoverComponent } from '../mode-picker/mode-picker';\nimport { CoreTime } from '@singletons/time';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@features/course/pages/contents/contents\";\nfunction AddonModGlossaryIndexComponent_ion_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 14);\n    i0.ɵɵlistener(\"click\", function AddonModGlossaryIndexComponent_ion_button_1_Template_ion_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.openModePicker($event));\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelement(2, \"ion-icon\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 1, \"addon.mod_glossary.browsemode\"));\n  }\n}\nfunction AddonModGlossaryIndexComponent_ion_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 14);\n    i0.ɵɵlistener(\"click\", function AddonModGlossaryIndexComponent_ion_button_2_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.toggleSearch());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelement(2, \"ion-icon\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 1, \"addon.mod_glossary.bysearch\"));\n  }\n}\nfunction AddonModGlossaryIndexComponent_ion_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 17);\n    i0.ɵɵlistener(\"click\", function AddonModGlossaryIndexComponent_ion_button_3_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.openModuleSummary());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelement(2, \"ion-icon\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 1, \"core.info\"));\n  }\n}\nfunction AddonModGlossaryIndexComponent_core_search_box_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"core-search-box\", 19);\n    i0.ɵɵlistener(\"onSubmit\", function AddonModGlossaryIndexComponent_core_search_box_8_Template_core_search_box_onSubmit_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.search($event));\n    })(\"onClear\", function AddonModGlossaryIndexComponent_core_search_box_8_Template_core_search_box_onClear_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.toggleSearch());\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate1(\"searchArea\", \"AddonModGlossary-\", ctx_r3.module.id, \"\");\n    i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(1, 4, \"addon.mod_glossary.searchquery\"))(\"autoFocus\", true)(\"lengthCheck\", 2);\n  }\n}\nfunction AddonModGlossaryIndexComponent_core_course_module_info_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"core-course-module-info\", 20);\n    i0.ɵɵlistener(\"completionChanged\", function AddonModGlossaryIndexComponent_core_course_module_info_10_Template_core_course_module_info_completionChanged_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.onCompletionChange());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"module\", ctx_r4.module)(\"description\", ctx_r4.description)(\"component\", ctx_r4.component)(\"componentId\", ctx_r4.componentId)(\"courseId\", ctx_r4.courseId)(\"hasDataToSync\", ctx_r4.hasOffline);\n  }\n}\nfunction AddonModGlossaryIndexComponent_ion_list_11_ion_item_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 24);\n    i0.ɵɵlistener(\"click\", function AddonModGlossaryIndexComponent_ion_list_11_ion_item_6_Template_ion_item_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r23);\n      const entry_r21 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.entries.select(entry_r21));\n    });\n    i0.ɵɵelementStart(1, \"ion-label\")(2, \"div\", 25);\n    i0.ɵɵelement(3, \"ion-icon\", 26);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelement(5, \"core-format-text\", 27);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const entry_r21 = ctx.$implicit;\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"detail\", false);\n    i0.ɵɵattribute(\"aria-current\", ctx_r20.entries.getItemAriaCurrent(entry_r21));\n    i0.ɵɵadvance(3);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(4, 6, \"core.notsent\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"text\", entry_r21.concept)(\"contextInstanceId\", ctx_r20.glossary.coursemodule)(\"courseId\", ctx_r20.courseId);\n  }\n}\nfunction AddonModGlossaryIndexComponent_ion_list_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-list\", 21)(1, \"ion-item-divider\")(2, \"ion-label\")(3, \"h2\", 22);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(6, AddonModGlossaryIndexComponent_ion_list_11_ion_item_6_Template, 6, 8, \"ion-item\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 2, \"addon.mod_glossary.entriestobesynced\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.entries.offlineEntries);\n  }\n}\nfunction AddonModGlossaryIndexComponent_ion_list_12_ng_container_1_ion_item_divider_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item-divider\")(1, \"ion-label\")(2, \"h2\", 22);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const entry_r25 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r27.getDivider(entry_r25));\n  }\n}\nfunction AddonModGlossaryIndexComponent_ion_list_12_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AddonModGlossaryIndexComponent_ion_list_12_ng_container_1_ion_item_divider_1_Template, 4, 1, \"ion-item-divider\", 9);\n    i0.ɵɵelementStart(2, \"ion-item\", 24);\n    i0.ɵɵlistener(\"click\", function AddonModGlossaryIndexComponent_ion_list_12_ng_container_1_Template_ion_item_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r30);\n      const entry_r25 = restoredCtx.$implicit;\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r29.entries.select(entry_r25));\n    });\n    i0.ɵɵelementStart(3, \"ion-label\");\n    i0.ɵɵelement(4, \"core-format-text\", 27);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const entry_r25 = ctx.$implicit;\n    const index_r26 = ctx.index;\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r24.getDivider && ctx_r24.showDivider(entry_r25, ctx_r24.entries.onlineEntries[index_r26 - 1]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"detail\", false);\n    i0.ɵɵattribute(\"aria-current\", ctx_r24.entries.getItemAriaCurrent(entry_r25));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"text\", entry_r25.concept)(\"contextInstanceId\", ctx_r24.glossary.coursemodule)(\"courseId\", ctx_r24.courseId);\n  }\n}\nfunction AddonModGlossaryIndexComponent_ion_list_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-list\");\n    i0.ɵɵtemplate(1, AddonModGlossaryIndexComponent_ion_list_12_ng_container_1_Template, 5, 6, \"ng-container\", 28);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r6.entries.onlineEntries);\n  }\n}\nfunction AddonModGlossaryIndexComponent_core_empty_box_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-empty-box\", 29);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"message\", i0.ɵɵpipeBind1(1, 1, \"addon.mod_glossary.noentriesfound\"));\n  }\n}\nfunction AddonModGlossaryIndexComponent_ion_fab_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-fab\", 30)(1, \"ion-fab-button\", 14);\n    i0.ɵɵlistener(\"click\", function AddonModGlossaryIndexComponent_ion_fab_16_Template_ion_fab_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.openNewEntry());\n    });\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelement(3, \"ion-icon\", 31);\n    i0.ɵɵelementStart(4, \"span\", 32);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(2, 2, \"addon.mod_glossary.addentry\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 4, \"addon.mod_glossary.addentry\"));\n  }\n}\n/**\n * Component that displays a glossary entry page.\n */\nexport class AddonModGlossaryIndexComponent extends CoreCourseModuleMainActivityComponent {\n  constructor(route, content, courseContentsPage) {\n    super('AddonModGlossaryIndexComponent', content, courseContentsPage);\n    this.route = route;\n    this.content = content;\n    this.courseContentsPage = courseContentsPage;\n    this.component = AddonModGlossaryProvider.COMPONENT;\n    this.pluginName = 'glossary';\n    this.canAdd = false;\n    this.loadMoreError = false;\n    this.hasOfflineEntries = false;\n    this.hasOfflineRatings = false;\n    this.syncEventName = GLOSSARY_AUTO_SYNCED;\n    this.fetchedEntriesCanLoadMore = false;\n    this.fetchedEntries = [];\n    this.checkCompletionAfterLog = false; // Use CoreListItemsManager log system instead.\n    this.showDivider = () => false;\n    this.loadingMessage = Translate.instant('core.loading');\n    this.promisedEntries = new CorePromisedValue();\n  }\n  get entries() {\n    return this.promisedEntries.value;\n  }\n  get glossary() {\n    var _this$entries;\n    return (_this$entries = this.entries) === null || _this$entries === void 0 ? void 0 : _this$entries.getSource().glossary;\n  }\n  get isSearch() {\n    var _this$entries$getSour, _this$entries2;\n    return (_this$entries$getSour = (_this$entries2 = this.entries) === null || _this$entries2 === void 0 ? void 0 : _this$entries2.getSource().isSearch) !== null && _this$entries$getSour !== void 0 ? _this$entries$getSour : false;\n  }\n  get hasSearched() {\n    var _this$entries$getSour2, _this$entries3;\n    return (_this$entries$getSour2 = (_this$entries3 = this.entries) === null || _this$entries3 === void 0 ? void 0 : _this$entries3.getSource().hasSearched) !== null && _this$entries$getSour2 !== void 0 ? _this$entries$getSour2 : false;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _superprop_getNgOnInit = () => super.ngOnInit,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      yield _superprop_getNgOnInit().call(_this);\n      // Initialize entries manager.\n      const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(AddonModGlossaryEntriesSource, [_this.courseId, _this.module.id, _this.courseContentsPage ? `${AddonModGlossaryModuleHandlerService.PAGE_NAME}/` : '']);\n      _this.promisedEntries.resolve(new AddonModGlossaryEntriesManager(source, _this));\n      _this.sourceUnsubscribe = source.addListener({\n        onItemsUpdated: items => {\n          _this.hasOfflineEntries = !!items.find(item => source.isOfflineEntry(item));\n          _this.hasOffline = _this.hasOfflineEntries || _this.hasOfflineRatings;\n        }\n      });\n      // When an entry is added, we reload the data.\n      _this.observers = [CoreEvents.on(GLOSSARY_ENTRY_ADDED, ({\n        glossaryId\n      }) => {\n        var _this$glossary;\n        if (((_this$glossary = _this.glossary) === null || _this$glossary === void 0 ? void 0 : _this$glossary.id) !== glossaryId) {\n          return;\n        }\n        // Check completion since it could be configured to complete once the user adds a new entry.\n        _this.checkCompletion();\n        _this.showLoadingAndRefresh(false);\n      }), CoreEvents.on(GLOSSARY_ENTRY_UPDATED, ({\n        glossaryId\n      }) => {\n        var _this$glossary2;\n        if (((_this$glossary2 = _this.glossary) === null || _this$glossary2 === void 0 ? void 0 : _this$glossary2.id) !== glossaryId) {\n          return;\n        }\n        _this.showLoadingAndRefresh(false);\n      }), CoreEvents.on(GLOSSARY_ENTRY_DELETED, ({\n        glossaryId\n      }) => {\n        var _this$glossary3;\n        if (((_this$glossary3 = _this.glossary) === null || _this$glossary3 === void 0 ? void 0 : _this$glossary3.id) !== glossaryId) {\n          return;\n        }\n        _this.showLoadingAndRefresh(false);\n      })];\n      // Listen for offline ratings saved and synced.\n      _this.observers.push(CoreEvents.on(CoreRatingProvider.RATING_SAVED_EVENT, data => {\n        if (_this.glossary && data.component == 'mod_glossary' && data.ratingArea == 'entry' && data.contextLevel == 'module' && data.instanceId == _this.glossary.coursemodule) {\n          _this.hasOfflineRatings = true;\n          _this.hasOffline = true;\n        }\n      }));\n      _this.observers.push(CoreEvents.on(CoreRatingSyncProvider.SYNCED_EVENT, data => {\n        if (_this.glossary && data.component == 'mod_glossary' && data.ratingArea == 'entry' && data.contextLevel == 'module' && data.instanceId == _this.glossary.coursemodule) {\n          _this.hasOfflineRatings = false;\n          _this.hasOffline = _this.hasOfflineEntries;\n        }\n      }));\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngAfterViewInit() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const entries = yield _this2.promisedEntries;\n      yield _this2.loadContent(false, true);\n      yield entries.start(_this2.splitView);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  fetchContent(refresh = false, sync = false, showErrors = false) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const entries = yield _this3.promisedEntries;\n      yield entries.getSource().loadGlossary();\n      if (!_this3.glossary) {\n        return;\n      }\n      _this3.description = _this3.glossary.intro || _this3.description;\n      _this3.canAdd = !!_this3.glossary.canaddentry || false;\n      _this3.dataRetrieved.emit(_this3.glossary);\n      if (!entries.getSource().fetchMode) {\n        _this3.switchMode('letter_all');\n      }\n      if (sync) {\n        // Try to synchronize the glossary.\n        yield _this3.syncActivity(showErrors);\n      }\n      const [hasOfflineRatings] = yield Promise.all([CoreRatingOffline.hasRatings('mod_glossary', 'entry', \"module\" /* ContextLevel.MODULE */, _this3.glossary.coursemodule), refresh ? entries.reload() : entries.load()]);\n      _this3.hasOfflineRatings = hasOfflineRatings;\n      _this3.hasOffline = _this3.hasOfflineEntries || _this3.hasOfflineRatings;\n      if (_this3.isSearch && _this3.logSearch) {\n        _this3.logSearch();\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateContent() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      var _this4$entries;\n      yield (_this4$entries = _this4.entries) === null || _this4$entries === void 0 ? void 0 : _this4$entries.getSource().invalidateCache();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  sync() {\n    return AddonModGlossaryPrefetchHandler.sync(this.module, this.courseId);\n  }\n  /**\n   * Compares sync event data with current data to check if refresh content is needed.\n   *\n   * @param syncEventData Data receiven on sync observer.\n   * @returns True if refresh is needed, false otherwise.\n   */\n  isRefreshSyncNeeded(syncEventData) {\n    return !!this.glossary && syncEventData.glossaryId == this.glossary.id && syncEventData.userId == CoreSites.getCurrentSiteUserId();\n  }\n  /**\n   * Change fetch mode.\n   *\n   * @param mode New mode.\n   */\n  switchMode(mode) {\n    var _this$entries4;\n    (_this$entries4 = this.entries) === null || _this$entries4 === void 0 || _this$entries4.getSource().switchMode(mode);\n    switch (mode) {\n      case 'author_all':\n        // Browse by author.\n        this.getDivider = entry => entry.userfullname;\n        this.showDivider = (entry, previous) => !previous || entry.userid != previous.userid;\n        break;\n      case 'cat_all':\n        {\n          // Browse by category.\n          const getDivider = entry => entry.categoryname || '';\n          this.getDivider = getDivider;\n          this.showDivider = (entry, previous) => !previous || getDivider(entry) != getDivider(previous);\n          break;\n        }\n      case 'newest_first':\n        // Newest first.\n        this.getDivider = undefined;\n        this.showDivider = () => false;\n        break;\n      case 'recently_updated':\n        // Recently updated.\n        this.getDivider = undefined;\n        this.showDivider = () => false;\n        break;\n      case 'letter_all':\n      default:\n        {\n          // Consider it is 'letter_all'.\n          const getDivider = entry => {\n            // Try to get the first letter without HTML tags.\n            const noTags = CoreTextUtils.cleanTags(entry.concept);\n            return (noTags || entry.concept).substring(0, 1).toUpperCase();\n          };\n          this.getDivider = getDivider;\n          this.showDivider = (entry, previous) => !previous || getDivider(entry) != getDivider(previous);\n          break;\n        }\n    }\n  }\n  /**\n   * Convenience function to load more entries.\n   *\n   * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n   * @returns Promise resolved when done.\n   */\n  loadMoreEntries(infiniteComplete) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const entries = yield _this5.promisedEntries;\n      try {\n        _this5.loadMoreError = false;\n        yield entries.load();\n      } catch (error) {\n        _this5.loadMoreError = true;\n        CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentries', true);\n      } finally {\n        infiniteComplete && infiniteComplete();\n      }\n    })();\n  }\n  /**\n   * Show the mode picker menu.\n   *\n   * @param event Event.\n   */\n  openModePicker(event) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this6.glossary) {\n        return;\n      }\n      const entries = yield _this6.promisedEntries;\n      const previousMode = entries.getSource().fetchMode;\n      const newMode = yield CoreDomUtils.openPopover({\n        component: AddonModGlossaryModePickerPopoverComponent,\n        componentProps: {\n          browseModes: _this6.glossary.browsemodes,\n          selectedMode: _this6.isSearch ? '' : previousMode\n        },\n        event\n      });\n      if (!newMode) {\n        return;\n      }\n      if (newMode !== previousMode) {\n        _this6.changeFetchMode(newMode);\n        return;\n      }\n      if (_this6.isSearch) {\n        _this6.toggleSearch();\n        return;\n      }\n    })();\n  }\n  /**\n   * Toggles between search and fetch mode.\n   */\n  toggleSearch() {\n    if (!this.entries) {\n      return;\n    }\n    if (this.isSearch) {\n      const fetchMode = this.entries.getSource().fetchMode;\n      fetchMode && this.switchMode(fetchMode);\n      this.entries.getSource().stopSearch(this.fetchedEntries, this.fetchedEntriesCanLoadMore);\n      return;\n    }\n    // Search for entries. The fetch function will be set when searching.\n    this.fetchedEntries = this.entries.getSource().onlineEntries;\n    this.fetchedEntriesCanLoadMore = !this.entries.completed;\n    this.getDivider = undefined;\n    this.showDivider = () => false;\n    this.entries.reset();\n    this.entries.getSource().startSearch();\n  }\n  /**\n   * Change fetch mode.\n   *\n   * @param mode Mode.\n   */\n  changeFetchMode(mode) {\n    var _this$content;\n    this.loadingMessage = Translate.instant('core.loading');\n    (_this$content = this.content) === null || _this$content === void 0 || _this$content.scrollToTop();\n    this.switchMode(mode);\n    this.showLoading = true;\n    this.loadContent();\n  }\n  /**\n   * Opens new entry editor.\n   */\n  openNewEntry() {\n    CoreNavigator.navigate(this.splitView.outletActivated ? '../new' : './entry/new');\n  }\n  /**\n   * Search entries.\n   *\n   * @param query Text entered on the search box.\n   */\n  search(query) {\n    var _this$entries5;\n    this.loadingMessage = Translate.instant('core.searching');\n    this.showLoading = true;\n    this.logSearch = CoreTime.once(() => this.performLogSearch(query));\n    (_this$entries5 = this.entries) === null || _this$entries5 === void 0 || _this$entries5.getSource().search(query);\n    this.loadContent();\n  }\n  /**\n   * Log search.\n   *\n   * @param query Text entered on the search box.\n   */\n  performLogSearch(query) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      _this7.analyticsLogEvent('mod_glossary_get_entries_by_search', {\n        data: {\n          mode: 'search',\n          hook: query,\n          fullsearch: 1\n        }\n      });\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$observers, _this$sourceUnsubscri, _this$entries6;\n    super.ngOnDestroy();\n    (_this$observers = this.observers) === null || _this$observers === void 0 || _this$observers.forEach(observer => observer.off());\n    (_this$sourceUnsubscri = this.sourceUnsubscribe) === null || _this$sourceUnsubscri === void 0 || _this$sourceUnsubscri.call(null);\n    (_this$entries6 = this.entries) === null || _this$entries6 === void 0 || _this$entries6.destroy();\n  }\n}\n/**\n * Entries manager.\n */\n_class = AddonModGlossaryIndexComponent;\n_class.ɵfac = function AddonModGlossaryIndexComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.IonContent), i0.ɵɵdirectiveInject(i3.CoreCourseContentsPage, 8));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"addon-mod-glossary-index\"]],\n  viewQuery: function AddonModGlossaryIndexComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CoreSplitViewComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.splitView = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 17,\n  vars: 19,\n  consts: [[\"slot\", \"end\"], [3, \"click\", 4, \"ngIf\"], [\"fill\", \"clear\", \"aria-haspopup\", \"true\", 3, \"click\", 4, \"ngIf\"], [\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [3, \"placeholder\", \"autoFocus\", \"lengthCheck\", \"searchArea\", \"onSubmit\", \"onClear\", 4, \"ngIf\"], [3, \"hideUntil\"], [3, \"module\", \"description\", \"component\", \"componentId\", \"courseId\", \"hasDataToSync\", \"completionChanged\", 4, \"ngIf\"], [\"class\", \"addon-mod-glossary-index--offline-entries\", 4, \"ngIf\"], [4, \"ngIf\"], [\"icon\", \"fas-list\", 3, \"message\", 4, \"ngIf\"], [3, \"enabled\", \"error\", \"action\"], [\"collapsible-footer\", \"\", 3, \"hidden\", \"courseId\", \"currentModuleId\"], [\"slot\", \"fixed\", \"core-fab\", \"\", \"vertical\", \"bottom\", \"horizontal\", \"end\", 4, \"ngIf\"], [3, \"click\"], [\"name\", \"fas-sort\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [\"name\", \"fas-magnifying-glass\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [\"fill\", \"clear\", \"aria-haspopup\", \"true\", 3, \"click\"], [\"name\", \"fas-circle-info\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [3, \"placeholder\", \"autoFocus\", \"lengthCheck\", \"searchArea\", \"onSubmit\", \"onClear\"], [3, \"module\", \"description\", \"component\", \"componentId\", \"courseId\", \"hasDataToSync\", \"completionChanged\"], [1, \"addon-mod-glossary-index--offline-entries\"], [1, \"big\"], [\"button\", \"\", 3, \"detail\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"button\", \"\", 3, \"detail\", \"click\"], [1, \"addon-mod-glossary-index--offline-entry\"], [\"name\", \"fas-clock\", 1, \"ion-margin-end\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [4, \"ngFor\", \"ngForOf\"], [\"icon\", \"fas-list\", 3, \"message\"], [\"slot\", \"fixed\", \"core-fab\", \"\", \"vertical\", \"bottom\", \"horizontal\", \"end\"], [\"name\", \"fas-plus\", \"aria-hidden\", \"true\"], [1, \"sr-only\"]],\n  template: function AddonModGlossaryIndexComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"core-navbar-buttons\", 0);\n      i0.ɵɵtemplate(1, AddonModGlossaryIndexComponent_ion_button_1_Template, 3, 3, \"ion-button\", 1);\n      i0.ɵɵtemplate(2, AddonModGlossaryIndexComponent_ion_button_2_Template, 3, 3, \"ion-button\", 1);\n      i0.ɵɵtemplate(3, AddonModGlossaryIndexComponent_ion_button_3_Template, 3, 3, \"ion-button\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"core-split-view\")(5, \"ion-refresher\", 3);\n      i0.ɵɵlistener(\"ionRefresh\", function AddonModGlossaryIndexComponent_Template_ion_refresher_ionRefresh_5_listener($event) {\n        return ctx.doRefresh($event.target);\n      });\n      i0.ɵɵelement(6, \"ion-refresher-content\", 4);\n      i0.ɵɵpipe(7, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, AddonModGlossaryIndexComponent_core_search_box_8_Template, 2, 6, \"core-search-box\", 5);\n      i0.ɵɵelementStart(9, \"core-loading\", 6);\n      i0.ɵɵtemplate(10, AddonModGlossaryIndexComponent_core_course_module_info_10_Template, 1, 6, \"core-course-module-info\", 7);\n      i0.ɵɵtemplate(11, AddonModGlossaryIndexComponent_ion_list_11_Template, 7, 4, \"ion-list\", 8);\n      i0.ɵɵtemplate(12, AddonModGlossaryIndexComponent_ion_list_12_Template, 2, 1, \"ion-list\", 9);\n      i0.ɵɵtemplate(13, AddonModGlossaryIndexComponent_core_empty_box_13_Template, 2, 3, \"core-empty-box\", 10);\n      i0.ɵɵelementStart(14, \"core-infinite-loading\", 11);\n      i0.ɵɵlistener(\"action\", function AddonModGlossaryIndexComponent_Template_core_infinite_loading_action_14_listener($event) {\n        return ctx.loadMoreEntries($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(15, \"core-course-module-navigation\", 12);\n      i0.ɵɵtemplate(16, AddonModGlossaryIndexComponent_ion_fab_16_Template, 7, 6, \"ion-fab\", 13);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.showLoading && ctx.glossary && ctx.glossary.browsemodes && ctx.glossary.browsemodes.length > 1);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.showLoading && ctx.glossary);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.showLoading);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.showLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(7, 17, \"core.pulltorefresh\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSearch);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hideUntil\", !ctx.showLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSearch);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSearch && ctx.entries && ctx.entries.offlineEntries.length > 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.entries && ctx.entries.onlineEntries.length > 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (!ctx.entries || !ctx.entries.hasEntries) && (!ctx.isSearch || ctx.hasSearched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"enabled\", ctx.entries && !ctx.entries.completed && (!ctx.isSearch || ctx.hasSearched))(\"error\", ctx.loadMoreError);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hidden\", ctx.showLoading)(\"courseId\", ctx.courseId)(\"currentModuleId\", ctx.module.id);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.canAdd && !ctx.showLoading);\n    }\n  },\n  styles: [\"[_nghost-%COMP%]   .addon-mod-glossary-index--offline-entries[_ngcontent-%COMP%] {\\n  border-bottom: 1px solid var(--stroke);\\n}\\n[_nghost-%COMP%]   .addon-mod-glossary-index--offline-entry[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: flex-start;\\n  align-items: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hZGRvbnMvbW9kL2dsb3NzYXJ5L2NvbXBvbmVudHMvaW5kZXgvaW5kZXguc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFSTtFQUNJLHNDQUFBO0FBRFI7QUFJSTtFQUNJLGFBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0FBRlIiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XG5cbiAgICAuYWRkb24tbW9kLWdsb3NzYXJ5LWluZGV4LS1vZmZsaW5lLWVudHJpZXMge1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tc3Ryb2tlKTtcbiAgICB9XG5cbiAgICAuYWRkb24tbW9kLWdsb3NzYXJ5LWluZGV4LS1vZmZsaW5lLWVudHJ5IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cblxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nclass AddonModGlossaryEntriesManager extends CoreListItemsManager {\n  constructor(source, page) {\n    super(source, page.route.component);\n    this.page = page;\n  }\n  get offlineEntries() {\n    return this.getSource().offlineEntries;\n  }\n  get onlineEntries() {\n    return this.getSource().onlineEntries;\n  }\n  /**\n   * @inheritdoc\n   */\n  getDefaultItem() {\n    return this.getSource().onlineEntries[0] || null;\n  }\n  /**\n   * @inheritdoc\n   */\n  logActivity() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const glossary = _this8.getSource().glossary;\n      const viewMode = _this8.getSource().viewMode;\n      if (!glossary || !viewMode) {\n        return;\n      }\n      try {\n        yield AddonModGlossary.logView(glossary.id, viewMode);\n        CoreCourse.checkModuleCompletion(_this8.page.courseId, _this8.page.module.completiondata);\n      } catch (_unused) {\n        // Ignore errors.\n      }\n      _this8.page.analyticsLogEvent('mod_glossary_view_glossary', {\n        data: {\n          mode: viewMode\n        }\n      });\n    })();\n  }\n  /**\n   * Check whether there is any entry in the items.\n   *\n   * @returns Whether there is an entry.\n   */\n  get hasEntries() {\n    return this.getSource().onlineEntries.length > 0 || this.getSource().offlineEntries.length > 0;\n  }\n}","map":{"version":3,"names":["CoreListItemsManager","CoreRoutedItemsManagerSourcesTracker","CorePromisedValue","CoreSplitViewComponent","CoreCourseModuleMainActivityComponent","CoreCourse","CoreRatingProvider","CoreRatingOffline","CoreRatingSyncProvider","CoreNavigator","CoreSites","CoreDomUtils","CoreTextUtils","Translate","CoreEvents","AddonModGlossaryEntriesSource","AddonModGlossary","AddonModGlossaryProvider","GLOSSARY_ENTRY_ADDED","GLOSSARY_ENTRY_DELETED","GLOSSARY_ENTRY_UPDATED","GLOSSARY_AUTO_SYNCED","AddonModGlossaryModuleHandlerService","AddonModGlossaryPrefetchHandler","AddonModGlossaryModePickerPopoverComponent","CoreTime","i0","ɵɵelementStart","ɵɵlistener","AddonModGlossaryIndexComponent_ion_button_1_Template_ion_button_click_0_listener","$event","ɵɵrestoreView","_r10","ctx_r9","ɵɵnextContext","ɵɵresetView","openModePicker","ɵɵelement","ɵɵelementEnd","ɵɵattribute","ɵɵpipeBind1","AddonModGlossaryIndexComponent_ion_button_2_Template_ion_button_click_0_listener","_r12","ctx_r11","toggleSearch","AddonModGlossaryIndexComponent_ion_button_3_Template_ion_button_click_0_listener","_r14","ctx_r13","openModuleSummary","AddonModGlossaryIndexComponent_core_search_box_8_Template_core_search_box_onSubmit_0_listener","_r16","ctx_r15","search","AddonModGlossaryIndexComponent_core_search_box_8_Template_core_search_box_onClear_0_listener","ctx_r17","ɵɵpropertyInterpolate1","ctx_r3","module","id","ɵɵproperty","AddonModGlossaryIndexComponent_core_course_module_info_10_Template_core_course_module_info_completionChanged_0_listener","_r19","ctx_r18","onCompletionChange","ctx_r4","description","component","componentId","courseId","hasOffline","AddonModGlossaryIndexComponent_ion_list_11_ion_item_6_Template_ion_item_click_0_listener","restoredCtx","_r23","entry_r21","$implicit","ctx_r22","entries","select","ctx_r20","getItemAriaCurrent","ɵɵadvance","concept","glossary","coursemodule","ɵɵtext","ɵɵtemplate","AddonModGlossaryIndexComponent_ion_list_11_ion_item_6_Template","ɵɵtextInterpolate","ctx_r5","offlineEntries","ctx_r27","getDivider","entry_r25","ɵɵelementContainerStart","AddonModGlossaryIndexComponent_ion_list_12_ng_container_1_ion_item_divider_1_Template","AddonModGlossaryIndexComponent_ion_list_12_ng_container_1_Template_ion_item_click_2_listener","_r30","ctx_r29","ɵɵelementContainerEnd","ctx_r24","showDivider","onlineEntries","index_r26","AddonModGlossaryIndexComponent_ion_list_12_ng_container_1_Template","ctx_r6","AddonModGlossaryIndexComponent_ion_fab_16_Template_ion_fab_button_click_1_listener","_r32","ctx_r31","openNewEntry","AddonModGlossaryIndexComponent","constructor","route","content","courseContentsPage","COMPONENT","pluginName","canAdd","loadMoreError","hasOfflineEntries","hasOfflineRatings","syncEventName","fetchedEntriesCanLoadMore","fetchedEntries","checkCompletionAfterLog","loadingMessage","instant","promisedEntries","value","_this$entries","getSource","isSearch","_this$entries$getSour","_this$entries2","hasSearched","_this$entries$getSour2","_this$entries3","ngOnInit","_superprop_getNgOnInit","_this","_asyncToGenerator","call","source","getOrCreateSource","PAGE_NAME","resolve","AddonModGlossaryEntriesManager","sourceUnsubscribe","addListener","onItemsUpdated","items","find","item","isOfflineEntry","observers","on","glossaryId","_this$glossary","checkCompletion","showLoadingAndRefresh","_this$glossary2","_this$glossary3","push","RATING_SAVED_EVENT","data","ratingArea","contextLevel","instanceId","SYNCED_EVENT","ngAfterViewInit","_this2","loadContent","start","splitView","fetchContent","refresh","sync","showErrors","_this3","loadGlossary","intro","canaddentry","dataRetrieved","emit","fetchMode","switchMode","syncActivity","Promise","all","hasRatings","reload","load","logSearch","invalidateContent","_this4","_this4$entries","invalidateCache","isRefreshSyncNeeded","syncEventData","userId","getCurrentSiteUserId","mode","_this$entries4","entry","userfullname","previous","userid","categoryname","undefined","noTags","cleanTags","substring","toUpperCase","loadMoreEntries","infiniteComplete","_this5","error","showErrorModalDefault","event","_this6","previousMode","newMode","openPopover","componentProps","browseModes","browsemodes","selectedMode","changeFetchMode","stopSearch","completed","reset","startSearch","_this$content","scrollToTop","showLoading","navigate","outletActivated","query","_this$entries5","once","performLogSearch","_this7","analyticsLogEvent","hook","fullsearch","ngOnDestroy","_this$observers","_this$sourceUnsubscri","_this$entries6","forEach","observer","off","destroy","_class","ɵɵdirectiveInject","i1","ActivatedRoute","i2","IonContent","i3","CoreCourseContentsPage","selectors","viewQuery","AddonModGlossaryIndexComponent_Query","rf","ctx","AddonModGlossaryIndexComponent_ion_button_1_Template","AddonModGlossaryIndexComponent_ion_button_2_Template","AddonModGlossaryIndexComponent_ion_button_3_Template","AddonModGlossaryIndexComponent_Template_ion_refresher_ionRefresh_5_listener","doRefresh","target","AddonModGlossaryIndexComponent_core_search_box_8_Template","AddonModGlossaryIndexComponent_core_course_module_info_10_Template","AddonModGlossaryIndexComponent_ion_list_11_Template","AddonModGlossaryIndexComponent_ion_list_12_Template","AddonModGlossaryIndexComponent_core_empty_box_13_Template","AddonModGlossaryIndexComponent_Template_core_infinite_loading_action_14_listener","AddonModGlossaryIndexComponent_ion_fab_16_Template","length","ɵɵpropertyInterpolate","hasEntries","page","getDefaultItem","logActivity","_this8","viewMode","logView","checkModuleCompletion","completiondata","_unused"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/components/index/index.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/components/index/addon-mod-glossary-index.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ContextLevel } from '@/core/constants';\nimport { AfterViewInit, Component, OnDestroy, OnInit, Optional, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreCourseModuleMainActivityComponent } from '@features/course/classes/main-activity-component';\nimport { CoreCourseContentsPage } from '@features/course/pages/contents/contents';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreRatingProvider } from '@features/rating/services/rating';\nimport { CoreRatingOffline } from '@features/rating/services/rating-offline';\nimport { CoreRatingSyncProvider } from '@features/rating/services/rating-sync';\nimport { IonContent } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { Translate } from '@singletons';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport {\n    AddonModGlossaryEntriesSource,\n    AddonModGlossaryEntryItem,\n    AddonModGlossaryFetchMode,\n} from '../../classes/glossary-entries-source';\nimport {\n    AddonModGlossary,\n    AddonModGlossaryEntry,\n    AddonModGlossaryEntryWithCategory,\n    AddonModGlossaryGlossary,\n    AddonModGlossaryProvider,\n    GLOSSARY_ENTRY_ADDED,\n    GLOSSARY_ENTRY_DELETED,\n    GLOSSARY_ENTRY_UPDATED,\n} from '../../services/glossary';\nimport { AddonModGlossaryOfflineEntry } from '../../services/glossary-offline';\nimport {\n    AddonModGlossaryAutoSyncedData,\n    AddonModGlossarySyncResult,\n    GLOSSARY_AUTO_SYNCED,\n} from '../../services/glossary-sync';\nimport { AddonModGlossaryModuleHandlerService } from '../../services/handlers/module';\nimport { AddonModGlossaryPrefetchHandler } from '../../services/handlers/prefetch';\nimport { AddonModGlossaryModePickerPopoverComponent } from '../mode-picker/mode-picker';\nimport { CoreTime } from '@singletons/time';\n\n/**\n * Component that displays a glossary entry page.\n */\n@Component({\n    selector: 'addon-mod-glossary-index',\n    templateUrl: 'addon-mod-glossary-index.html',\n    styleUrls: ['index.scss'],\n})\nexport class AddonModGlossaryIndexComponent extends CoreCourseModuleMainActivityComponent\n    implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    component = AddonModGlossaryProvider.COMPONENT;\n    pluginName = 'glossary';\n\n    canAdd = false;\n    loadMoreError = false;\n    loadingMessage: string;\n    promisedEntries: CorePromisedValue<AddonModGlossaryEntriesManager>;\n\n    protected hasOfflineEntries = false;\n    protected hasOfflineRatings = false;\n    protected syncEventName = GLOSSARY_AUTO_SYNCED;\n    protected fetchedEntriesCanLoadMore = false;\n    protected fetchedEntries: AddonModGlossaryEntry[] = [];\n    protected sourceUnsubscribe?: () => void;\n    protected observers?: CoreEventObserver[];\n    protected checkCompletionAfterLog = false; // Use CoreListItemsManager log system instead.\n    protected logSearch?: () => void;\n\n    getDivider?: (entry: AddonModGlossaryEntry) => string;\n    showDivider: (entry: AddonModGlossaryEntry, previous?: AddonModGlossaryEntry) => boolean = () => false;\n\n    constructor(\n        public route: ActivatedRoute,\n        protected content?: IonContent,\n        @Optional() protected courseContentsPage?: CoreCourseContentsPage,\n    ) {\n        super('AddonModGlossaryIndexComponent', content, courseContentsPage);\n\n        this.loadingMessage = Translate.instant('core.loading');\n        this.promisedEntries = new CorePromisedValue();\n    }\n\n    get entries(): AddonModGlossaryEntriesManager | null {\n        return this.promisedEntries.value;\n    }\n\n    get glossary(): AddonModGlossaryGlossary | undefined {\n        return this.entries?.getSource().glossary;\n    }\n\n    get isSearch(): boolean {\n        return this.entries?.getSource().isSearch ?? false;\n    }\n\n    get hasSearched(): boolean {\n        return this.entries?.getSource().hasSearched ?? false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        await super.ngOnInit();\n\n        // Initialize entries manager.\n        const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n            AddonModGlossaryEntriesSource,\n            [this.courseId, this.module.id, this.courseContentsPage ? `${AddonModGlossaryModuleHandlerService.PAGE_NAME}/` : ''],\n        );\n\n        this.promisedEntries.resolve(new AddonModGlossaryEntriesManager(source, this));\n\n        this.sourceUnsubscribe = source.addListener({\n            onItemsUpdated: (items) => {\n                this.hasOfflineEntries = !!items.find(item => source.isOfflineEntry(item));\n                this.hasOffline = this.hasOfflineEntries || this.hasOfflineRatings;\n            },\n        });\n\n        // When an entry is added, we reload the data.\n        this.observers = [\n            CoreEvents.on(GLOSSARY_ENTRY_ADDED, ({ glossaryId }) => {\n                if (this.glossary?.id !== glossaryId) {\n                    return;\n                }\n\n                // Check completion since it could be configured to complete once the user adds a new entry.\n                this.checkCompletion();\n\n                this.showLoadingAndRefresh(false);\n            }),\n            CoreEvents.on(GLOSSARY_ENTRY_UPDATED, ({ glossaryId }) => {\n                if (this.glossary?.id !== glossaryId) {\n                    return;\n                }\n\n                this.showLoadingAndRefresh(false);\n            }),\n            CoreEvents.on(GLOSSARY_ENTRY_DELETED, ({ glossaryId }) => {\n                if (this.glossary?.id !== glossaryId) {\n                    return;\n                }\n\n                this.showLoadingAndRefresh(false);\n            }),\n        ];\n\n        // Listen for offline ratings saved and synced.\n        this.observers.push(CoreEvents.on(CoreRatingProvider.RATING_SAVED_EVENT, (data) => {\n            if (this.glossary && data.component == 'mod_glossary' && data.ratingArea == 'entry' && data.contextLevel == 'module'\n                    && data.instanceId == this.glossary.coursemodule) {\n                this.hasOfflineRatings = true;\n                this.hasOffline = true;\n            }\n        }));\n        this.observers.push(CoreEvents.on(CoreRatingSyncProvider.SYNCED_EVENT, (data) => {\n            if (this.glossary && data.component == 'mod_glossary' && data.ratingArea == 'entry' && data.contextLevel == 'module'\n                    && data.instanceId == this.glossary.coursemodule) {\n                this.hasOfflineRatings = false;\n                this.hasOffline = this.hasOfflineEntries;\n            }\n        }));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        const entries = await this.promisedEntries;\n\n        await this.loadContent(false, true);\n        await entries.start(this.splitView);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async fetchContent(refresh = false, sync = false, showErrors = false): Promise<void> {\n        const entries = await this.promisedEntries;\n\n        await entries.getSource().loadGlossary();\n\n        if (!this.glossary) {\n            return;\n        }\n\n        this.description = this.glossary.intro || this.description;\n        this.canAdd = !!this.glossary.canaddentry || false;\n\n        this.dataRetrieved.emit(this.glossary);\n\n        if (!entries.getSource().fetchMode) {\n            this.switchMode('letter_all');\n        }\n\n        if (sync) {\n            // Try to synchronize the glossary.\n            await this.syncActivity(showErrors);\n        }\n\n        const [hasOfflineRatings] = await Promise.all([\n            CoreRatingOffline.hasRatings('mod_glossary', 'entry', ContextLevel.MODULE, this.glossary.coursemodule),\n            refresh ? entries.reload() : entries.load(),\n        ]);\n\n        this.hasOfflineRatings = hasOfflineRatings;\n        this.hasOffline = this.hasOfflineEntries || this.hasOfflineRatings;\n\n        if (this.isSearch && this.logSearch) {\n            this.logSearch();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async invalidateContent(): Promise<void> {\n        await this.entries?.getSource().invalidateCache();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected sync(): Promise<AddonModGlossarySyncResult> {\n        return AddonModGlossaryPrefetchHandler.sync(this.module, this.courseId);\n    }\n\n    /**\n     * Compares sync event data with current data to check if refresh content is needed.\n     *\n     * @param syncEventData Data receiven on sync observer.\n     * @returns True if refresh is needed, false otherwise.\n     */\n    protected isRefreshSyncNeeded(syncEventData: AddonModGlossaryAutoSyncedData): boolean {\n        return !!this.glossary && syncEventData.glossaryId == this.glossary.id &&\n                syncEventData.userId == CoreSites.getCurrentSiteUserId();\n    }\n\n    /**\n     * Change fetch mode.\n     *\n     * @param mode New mode.\n     */\n    protected switchMode(mode: AddonModGlossaryFetchMode): void {\n        this.entries?.getSource().switchMode(mode);\n\n        switch (mode) {\n            case 'author_all':\n                // Browse by author.\n                this.getDivider = (entry) => entry.userfullname;\n                this.showDivider = (entry, previous) => !previous || entry.userid != previous.userid;\n                break;\n\n            case 'cat_all': {\n                // Browse by category.\n                const getDivider = (entry: AddonModGlossaryEntryWithCategory) => entry.categoryname || '';\n\n                this.getDivider = getDivider;\n                this.showDivider = (entry, previous) => !previous || getDivider(entry) != getDivider(previous);\n                break;\n            }\n\n            case 'newest_first':\n                // Newest first.\n                this.getDivider = undefined;\n                this.showDivider = () => false;\n                break;\n\n            case 'recently_updated':\n                // Recently updated.\n                this.getDivider = undefined;\n                this.showDivider = () => false;\n                break;\n\n            case 'letter_all':\n            default: {\n                // Consider it is 'letter_all'.\n                const getDivider = (entry) => {\n                    // Try to get the first letter without HTML tags.\n                    const noTags = CoreTextUtils.cleanTags(entry.concept);\n\n                    return (noTags || entry.concept).substring(0, 1).toUpperCase();\n                };\n\n                this.getDivider = getDivider;\n                this.showDivider = (entry, previous) => !previous || getDivider(entry) != getDivider(previous);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Convenience function to load more entries.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @returns Promise resolved when done.\n     */\n    async loadMoreEntries(infiniteComplete?: () => void): Promise<void> {\n        const entries = await this.promisedEntries;\n\n        try {\n            this.loadMoreError = false;\n\n            await entries.load();\n        } catch (error) {\n            this.loadMoreError = true;\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentries', true);\n        } finally {\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Show the mode picker menu.\n     *\n     * @param event Event.\n     */\n    async openModePicker(event: MouseEvent): Promise<void> {\n        if (!this.glossary) {\n            return;\n        }\n\n        const entries = await this.promisedEntries;\n        const previousMode = entries.getSource().fetchMode;\n        const newMode = await CoreDomUtils.openPopover<AddonModGlossaryFetchMode>({\n            component: AddonModGlossaryModePickerPopoverComponent,\n            componentProps: {\n                browseModes: this.glossary.browsemodes,\n                selectedMode: this.isSearch ? '' : previousMode,\n            },\n            event,\n        });\n\n        if (!newMode) {\n            return;\n        }\n\n        if (newMode !== previousMode) {\n            this.changeFetchMode(newMode);\n\n            return;\n        }\n\n        if (this.isSearch) {\n            this.toggleSearch();\n\n            return;\n        }\n    }\n\n    /**\n     * Toggles between search and fetch mode.\n     */\n    toggleSearch(): void {\n        if (!this.entries) {\n            return;\n        }\n\n        if (this.isSearch) {\n            const fetchMode = this.entries.getSource().fetchMode;\n\n            fetchMode && this.switchMode(fetchMode);\n            this.entries.getSource().stopSearch(this.fetchedEntries, this.fetchedEntriesCanLoadMore);\n\n            return;\n        }\n\n        // Search for entries. The fetch function will be set when searching.\n        this.fetchedEntries = this.entries.getSource().onlineEntries;\n        this.fetchedEntriesCanLoadMore = !this.entries.completed;\n        this.getDivider = undefined;\n        this.showDivider = () => false;\n\n        this.entries.reset();\n        this.entries.getSource().startSearch();\n    }\n\n    /**\n     * Change fetch mode.\n     *\n     * @param mode Mode.\n     */\n    changeFetchMode(mode: AddonModGlossaryFetchMode): void {\n        this.loadingMessage = Translate.instant('core.loading');\n        this.content?.scrollToTop();\n        this.switchMode(mode);\n        this.showLoading = true;\n        this.loadContent();\n    }\n\n    /**\n     * Opens new entry editor.\n     */\n    openNewEntry(): void {\n        CoreNavigator.navigate(\n            this.splitView.outletActivated\n                ? '../new'\n                : './entry/new',\n        );\n    }\n\n    /**\n     * Search entries.\n     *\n     * @param query Text entered on the search box.\n     */\n    search(query: string): void {\n        this.loadingMessage = Translate.instant('core.searching');\n        this.showLoading = true;\n        this.logSearch = CoreTime.once(() => this.performLogSearch(query));\n\n        this.entries?.getSource().search(query);\n        this.loadContent();\n    }\n\n    /**\n     * Log search.\n     *\n     * @param query Text entered on the search box.\n     */\n    protected async performLogSearch(query: string): Promise<void> {\n        this.analyticsLogEvent('mod_glossary_get_entries_by_search', {\n            data: { mode: 'search', hook: query, fullsearch: 1 },\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n\n        this.observers?.forEach(observer => observer.off());\n        this.sourceUnsubscribe?.call(null);\n        this.entries?.destroy();\n    }\n\n}\n\n/**\n * Entries manager.\n */\nclass AddonModGlossaryEntriesManager extends CoreListItemsManager<AddonModGlossaryEntryItem, AddonModGlossaryEntriesSource> {\n\n    page: AddonModGlossaryIndexComponent;\n\n    constructor(source: AddonModGlossaryEntriesSource, page: AddonModGlossaryIndexComponent) {\n        super(source, page.route.component);\n\n        this.page = page;\n    }\n\n    get offlineEntries(): AddonModGlossaryOfflineEntry[] {\n        return this.getSource().offlineEntries;\n    }\n\n    get onlineEntries(): AddonModGlossaryEntry[] {\n        return this.getSource().onlineEntries;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getDefaultItem(): AddonModGlossaryEntryItem | null {\n        return this.getSource().onlineEntries[0] || null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async logActivity(): Promise<void> {\n        const glossary = this.getSource().glossary;\n        const viewMode = this.getSource().viewMode;\n\n        if (!glossary || !viewMode) {\n            return;\n        }\n\n        try {\n            await AddonModGlossary.logView(glossary.id, viewMode);\n\n            CoreCourse.checkModuleCompletion(this.page.courseId, this.page.module.completiondata);\n        } catch {\n            // Ignore errors.\n        }\n\n        this.page.analyticsLogEvent('mod_glossary_view_glossary', { data: { mode: viewMode } });\n    }\n\n    /**\n     * Check whether there is any entry in the items.\n     *\n     * @returns Whether there is an entry.\n     */\n    get hasEntries(): boolean {\n        return this.getSource().onlineEntries.length > 0 || this.getSource().offlineEntries.length > 0;\n    }\n\n}\n","<!-- Buttons to add to the header. -->\n<core-navbar-buttons slot=\"end\">\n    <ion-button *ngIf=\"!showLoading && glossary && glossary.browsemodes && glossary.browsemodes.length > 1\" (click)=\"openModePicker($event)\"\n        [attr.aria-label]=\"'addon.mod_glossary.browsemode' | translate\">\n        <ion-icon name=\"fas-sort\" slot=\"icon-only\" aria-hidden=\"true\" />\n    </ion-button>\n\n    <ion-button *ngIf=\"!showLoading && glossary\" (click)=\"toggleSearch()\" [attr.aria-label]=\"'addon.mod_glossary.bysearch' | translate\">\n        <ion-icon name=\"fas-magnifying-glass\" slot=\"icon-only\" aria-hidden=\"true\" />\n    </ion-button>\n\n    <ion-button *ngIf=\"!showLoading\" fill=\"clear\" (click)=\"openModuleSummary()\" aria-haspopup=\"true\"\n        [attr.aria-label]=\"'core.info' | translate\">\n        <ion-icon name=\"fas-circle-info\" slot=\"icon-only\" aria-hidden=\"true\" />\n    </ion-button>\n</core-navbar-buttons>\n\n<!-- Content. -->\n<core-split-view>\n    <ion-refresher slot=\"fixed\" [disabled]=\"showLoading\" (ionRefresh)=\"doRefresh($event.target)\">\n        <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n    </ion-refresher>\n\n    <core-search-box *ngIf=\"isSearch\" (onSubmit)=\"search($event)\" [placeholder]=\"'addon.mod_glossary.searchquery' | translate\"\n        [autoFocus]=\"true\" [lengthCheck]=\"2\" (onClear)=\"toggleSearch()\" searchArea=\"AddonModGlossary-{{module.id}}\" />\n\n    <core-loading [hideUntil]=\"!showLoading\">\n        <!-- Activity info. -->\n        <core-course-module-info *ngIf=\"!isSearch\" [module]=\"module\" [description]=\"description\" [component]=\"component\"\n            [componentId]=\"componentId\" [courseId]=\"courseId\" [hasDataToSync]=\"hasOffline\" (completionChanged)=\"onCompletionChange()\" />\n\n        <ion-list *ngIf=\"!isSearch && entries && entries.offlineEntries.length > 0\" class=\"addon-mod-glossary-index--offline-entries\">\n            <ion-item-divider>\n                <ion-label>\n                    <h2 class=\"big\">{{ 'addon.mod_glossary.entriestobesynced' | translate }}</h2>\n                </ion-label>\n            </ion-item-divider>\n            <ion-item *ngFor=\"let entry of entries.offlineEntries\" (click)=\"entries.select(entry)\" button [detail]=\"false\"\n                [attr.aria-current]=\"entries.getItemAriaCurrent(entry)\">\n                <ion-label>\n                    <div class=\"addon-mod-glossary-index--offline-entry\">\n                        <ion-icon name=\"fas-clock\" class=\"ion-margin-end\" [attr.aria-label]=\"'core.notsent' | translate\" />\n                        <core-format-text [text]=\"entry.concept\" contextLevel=\"module\" [contextInstanceId]=\"glossary!.coursemodule\"\n                            [courseId]=\"courseId\" />\n                    </div>\n                </ion-label>\n            </ion-item>\n        </ion-list>\n\n        <ion-list *ngIf=\"entries && entries.onlineEntries.length > 0\">\n            <ng-container *ngFor=\"let entry of entries.onlineEntries; let index = index\">\n                <ion-item-divider *ngIf=\"getDivider && showDivider(entry, entries.onlineEntries[index - 1])\">\n                    <ion-label>\n                        <h2 class=\"big\">{{ getDivider!(entry) }}</h2>\n                    </ion-label>\n                </ion-item-divider>\n\n                <ion-item button (click)=\"entries.select(entry)\" [attr.aria-current]=\"entries.getItemAriaCurrent(entry)\" [detail]=\"false\">\n                    <ion-label>\n                        <core-format-text [text]=\"entry.concept\" contextLevel=\"module\" [contextInstanceId]=\"glossary!.coursemodule\"\n                            [courseId]=\"courseId\" />\n                    </ion-label>\n                </ion-item>\n            </ng-container>\n        </ion-list>\n\n        <core-empty-box *ngIf=\"(!entries || !entries.hasEntries) && (!isSearch || hasSearched)\" icon=\"fas-list\"\n            [message]=\"'addon.mod_glossary.noentriesfound' | translate\" />\n\n        <core-infinite-loading [enabled]=\"entries && !entries.completed && (!isSearch || hasSearched)\" [error]=\"loadMoreError\"\n            (action)=\"loadMoreEntries($event)\" />\n    </core-loading>\n\n    <core-course-module-navigation collapsible-footer [hidden]=\"showLoading\" [courseId]=\"courseId\" [currentModuleId]=\"module.id\" />\n\n    <ion-fab slot=\"fixed\" core-fab vertical=\"bottom\" horizontal=\"end\" *ngIf=\"canAdd && !showLoading\">\n        <ion-fab-button (click)=\"openNewEntry()\" [attr.aria-label]=\"'addon.mod_glossary.addentry' | translate\">\n            <ion-icon name=\"fas-plus\" aria-hidden=\"true\" />\n            <span class=\"sr-only\">{{ 'addon.mod_glossary.addentry' | translate }}</span>\n        </ion-fab-button>\n    </ion-fab>\n</core-split-view>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}