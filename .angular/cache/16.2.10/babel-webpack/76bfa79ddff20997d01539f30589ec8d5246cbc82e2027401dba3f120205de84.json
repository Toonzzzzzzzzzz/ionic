{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldDateComponent } from '../component/date';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for date data field plugin.\n */\nexport class AddonModDataFieldDateHandlerService {\n  constructor() {\n    this.name = 'AddonModDataFieldDateHandler';\n    this.type = 'date';\n  }\n  /**\n   * @inheritdoc\n   */\n  getComponent() {\n    return AddonModDataFieldDateComponent;\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldSearchData(field, inputData) {\n    const fieldName = 'f_' + field.id;\n    const enabledName = 'f_' + field.id + '_z';\n    if (inputData[enabledName] && typeof inputData[fieldName] == 'string') {\n      const date = inputData[fieldName].substring(0, 10).split('-');\n      return [{\n        name: fieldName + '_y',\n        value: date[0]\n      }, {\n        name: fieldName + '_m',\n        value: date[1]\n      }, {\n        name: fieldName + '_d',\n        value: date[2]\n      }, {\n        name: enabledName,\n        value: 1\n      }];\n    }\n    return [];\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldEditData(field, inputData) {\n    const fieldName = 'f_' + field.id;\n    if (typeof inputData[fieldName] != 'string') {\n      return [];\n    }\n    const date = inputData[fieldName].substring(0, 10).split('-');\n    return [{\n      fieldid: field.id,\n      subfield: 'year',\n      value: date[0]\n    }, {\n      fieldid: field.id,\n      subfield: 'month',\n      value: date[1]\n    }, {\n      fieldid: field.id,\n      subfield: 'day',\n      value: date[2]\n    }];\n  }\n  /**\n   * @inheritdoc\n   */\n  hasFieldDataChanged(field, inputData, originalFieldData) {\n    const fieldName = 'f_' + field.id;\n    const input = inputData[fieldName] && inputData[fieldName].substring(0, 10) || '';\n    const content = originalFieldData && (originalFieldData === null || originalFieldData === void 0 ? void 0 : originalFieldData.content) && CoreTimeUtils.toDatetimeFormat(parseInt(originalFieldData.content, 10) * 1000).substring(0, 10) || '';\n    return input != content;\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldsNotifications(field, inputData) {\n    if (field.required && (!inputData || inputData.length < 2 || !inputData[0].value || !inputData[1].value || !inputData[2].value)) {\n      return Translate.instant('addon.mod_data.errormustsupplyvalue');\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  overrideData(originalContent, offlineContent) {\n    if (offlineContent['day']) {\n      let date = Date.UTC(parseInt(offlineContent['year'], 10), parseInt(offlineContent['month'], 10) - 1, parseInt(offlineContent['day'], 10));\n      date = Math.floor(date / 1000);\n      originalContent.content = String(date) || '';\n    }\n    return originalContent;\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n}\n_class = AddonModDataFieldDateHandlerService;\n_class.ɵfac = function AddonModDataFieldDateHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModDataFieldDateHandler = makeSingleton(AddonModDataFieldDateHandlerService);","map":{"version":3,"names":["CoreTimeUtils","makeSingleton","Translate","AddonModDataFieldDateComponent","AddonModDataFieldDateHandlerService","constructor","name","type","getComponent","getFieldSearchData","field","inputData","fieldName","id","enabledName","date","substring","split","value","getFieldEditData","fieldid","subfield","hasFieldDataChanged","originalFieldData","input","content","toDatetimeFormat","parseInt","getFieldsNotifications","required","length","instant","overrideData","originalContent","offlineContent","Date","UTC","Math","floor","String","isEnabled","_asyncToGenerator","factory","ɵfac","providedIn","AddonModDataFieldDateHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/fields/date/services/handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    AddonModDataEntryField,\n    AddonModDataField,\n    AddonModDataSearchEntriesAdvancedFieldFormatted,\n    AddonModDataSubfieldData,\n} from '@addons/mod/data/services/data';\nimport { AddonModDataFieldHandler } from '@addons/mod/data/services/data-fields-delegate';\nimport { Injectable, Type } from '@angular/core';\nimport { CoreFormFields } from '@singletons/form';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldDateComponent } from '../component/date';\nimport type { AddonModDataFieldPluginBaseComponent } from '@addons/mod/data/classes/base-field-plugin-component';\n\n/**\n * Handler for date data field plugin.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModDataFieldDateHandlerService implements AddonModDataFieldHandler {\n\n    name = 'AddonModDataFieldDateHandler';\n    type = 'date';\n\n    /**\n     * @inheritdoc\n     */\n    getComponent(): Type<AddonModDataFieldPluginBaseComponent> {\n        return AddonModDataFieldDateComponent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldSearchData(\n        field: AddonModDataField,\n        inputData: CoreFormFields<string>,\n    ): AddonModDataSearchEntriesAdvancedFieldFormatted[] {\n        const fieldName = 'f_' + field.id;\n        const enabledName = 'f_' + field.id + '_z';\n\n        if (inputData[enabledName] && typeof inputData[fieldName] == 'string') {\n            const date = inputData[fieldName].substring(0, 10).split('-');\n\n            return [\n                {\n                    name: fieldName + '_y',\n                    value: date[0],\n                },\n                {\n                    name: fieldName + '_m',\n                    value: date[1],\n                },\n                {\n                    name: fieldName + '_d',\n                    value: date[2],\n                },\n                {\n                    name: enabledName,\n                    value: 1,\n                },\n            ];\n        }\n\n        return [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldEditData(field: AddonModDataField, inputData: CoreFormFields<string>): AddonModDataSubfieldData[] {\n        const fieldName = 'f_' + field.id;\n\n        if (typeof inputData[fieldName] != 'string') {\n            return [];\n        }\n\n        const date = inputData[fieldName].substring(0, 10).split('-');\n\n        return [\n            {\n                fieldid: field.id,\n                subfield: 'year',\n                value: date[0],\n            },\n            {\n                fieldid: field.id,\n                subfield: 'month',\n                value: date[1],\n            },\n            {\n                fieldid: field.id,\n                subfield: 'day',\n                value: date[2],\n            },\n        ];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    hasFieldDataChanged(\n        field: AddonModDataField,\n        inputData: CoreFormFields<string>,\n        originalFieldData: AddonModDataEntryField,\n    ): boolean {\n        const fieldName = 'f_' + field.id;\n        const input = inputData[fieldName] && inputData[fieldName].substring(0, 10) || '';\n\n        const content = (originalFieldData && originalFieldData?.content &&\n                CoreTimeUtils.toDatetimeFormat(parseInt(originalFieldData.content, 10) * 1000).substring(0, 10)) || '';\n\n        return input != content;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldsNotifications(field: AddonModDataField, inputData: AddonModDataSubfieldData[]): string | undefined {\n        if (field.required &&\n                (!inputData || inputData.length < 2 || !inputData[0].value || !inputData[1].value || !inputData[2].value)) {\n\n            return Translate.instant('addon.mod_data.errormustsupplyvalue');\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    overrideData(originalContent: AddonModDataEntryField, offlineContent: CoreFormFields<string>): AddonModDataEntryField {\n        if (offlineContent['day']) {\n            let date = Date.UTC(\n                parseInt(offlineContent['year'], 10),\n                parseInt(offlineContent['month'], 10) - 1,\n                parseInt(offlineContent['day'], 10),\n            );\n            date = Math.floor(date / 1000);\n\n            originalContent.content = String(date) || '';\n        }\n\n        return originalContent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n}\nexport const AddonModDataFieldDateHandler = makeSingleton(AddonModDataFieldDateHandlerService);\n"],"mappings":";;AAuBA,SAASA,aAAa,QAAQ,sBAAsB;AACpD,SAASC,aAAa,EAAEC,SAAS,QAAQ,aAAa;AACtD,SAASC,8BAA8B,QAAQ,mBAAmB;;AAGlE;;;AAIA,OAAM,MAAOC,mCAAmC;EADhDC,YAAA;IAGI,KAAAC,IAAI,GAAG,8BAA8B;IACrC,KAAAC,IAAI,GAAG,MAAM;;EAEb;;;EAGAC,YAAYA,CAAA;IACR,OAAOL,8BAA8B;EACzC;EAEA;;;EAGAM,kBAAkBA,CACdC,KAAwB,EACxBC,SAAiC;IAEjC,MAAMC,SAAS,GAAG,IAAI,GAAGF,KAAK,CAACG,EAAE;IACjC,MAAMC,WAAW,GAAG,IAAI,GAAGJ,KAAK,CAACG,EAAE,GAAG,IAAI;IAE1C,IAAIF,SAAS,CAACG,WAAW,CAAC,IAAI,OAAOH,SAAS,CAACC,SAAS,CAAC,IAAI,QAAQ,EAAE;MACnE,MAAMG,IAAI,GAAGJ,SAAS,CAACC,SAAS,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;MAE7D,OAAO,CACH;QACIX,IAAI,EAAEM,SAAS,GAAG,IAAI;QACtBM,KAAK,EAAEH,IAAI,CAAC,CAAC;OAChB,EACD;QACIT,IAAI,EAAEM,SAAS,GAAG,IAAI;QACtBM,KAAK,EAAEH,IAAI,CAAC,CAAC;OAChB,EACD;QACIT,IAAI,EAAEM,SAAS,GAAG,IAAI;QACtBM,KAAK,EAAEH,IAAI,CAAC,CAAC;OAChB,EACD;QACIT,IAAI,EAAEQ,WAAW;QACjBI,KAAK,EAAE;OACV,CACJ;;IAGL,OAAO,EAAE;EACb;EAEA;;;EAGAC,gBAAgBA,CAACT,KAAwB,EAAEC,SAAiC;IACxE,MAAMC,SAAS,GAAG,IAAI,GAAGF,KAAK,CAACG,EAAE;IAEjC,IAAI,OAAOF,SAAS,CAACC,SAAS,CAAC,IAAI,QAAQ,EAAE;MACzC,OAAO,EAAE;;IAGb,MAAMG,IAAI,GAAGJ,SAAS,CAACC,SAAS,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;IAE7D,OAAO,CACH;MACIG,OAAO,EAAEV,KAAK,CAACG,EAAE;MACjBQ,QAAQ,EAAE,MAAM;MAChBH,KAAK,EAAEH,IAAI,CAAC,CAAC;KAChB,EACD;MACIK,OAAO,EAAEV,KAAK,CAACG,EAAE;MACjBQ,QAAQ,EAAE,OAAO;MACjBH,KAAK,EAAEH,IAAI,CAAC,CAAC;KAChB,EACD;MACIK,OAAO,EAAEV,KAAK,CAACG,EAAE;MACjBQ,QAAQ,EAAE,KAAK;MACfH,KAAK,EAAEH,IAAI,CAAC,CAAC;KAChB,CACJ;EACL;EAEA;;;EAGAO,mBAAmBA,CACfZ,KAAwB,EACxBC,SAAiC,EACjCY,iBAAyC;IAEzC,MAAMX,SAAS,GAAG,IAAI,GAAGF,KAAK,CAACG,EAAE;IACjC,MAAMW,KAAK,GAAGb,SAAS,CAACC,SAAS,CAAC,IAAID,SAAS,CAACC,SAAS,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE;IAEjF,MAAMS,OAAO,GAAIF,iBAAiB,KAAIA,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEE,OAAO,KACxDzB,aAAa,CAAC0B,gBAAgB,CAACC,QAAQ,CAACJ,iBAAiB,CAACE,OAAO,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,CAACT,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,IAAK,EAAE;IAE9G,OAAOQ,KAAK,IAAIC,OAAO;EAC3B;EAEA;;;EAGAG,sBAAsBA,CAAClB,KAAwB,EAAEC,SAAqC;IAClF,IAAID,KAAK,CAACmB,QAAQ,KACT,CAAClB,SAAS,IAAIA,SAAS,CAACmB,MAAM,GAAG,CAAC,IAAI,CAACnB,SAAS,CAAC,CAAC,CAAC,CAACO,KAAK,IAAI,CAACP,SAAS,CAAC,CAAC,CAAC,CAACO,KAAK,IAAI,CAACP,SAAS,CAAC,CAAC,CAAC,CAACO,KAAK,CAAC,EAAE;MAE/G,OAAOhB,SAAS,CAAC6B,OAAO,CAAC,qCAAqC,CAAC;;EAEvE;EAEA;;;EAGAC,YAAYA,CAACC,eAAuC,EAAEC,cAAsC;IACxF,IAAIA,cAAc,CAAC,KAAK,CAAC,EAAE;MACvB,IAAInB,IAAI,GAAGoB,IAAI,CAACC,GAAG,CACfT,QAAQ,CAACO,cAAc,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EACpCP,QAAQ,CAACO,cAAc,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EACzCP,QAAQ,CAACO,cAAc,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CACtC;MACDnB,IAAI,GAAGsB,IAAI,CAACC,KAAK,CAACvB,IAAI,GAAG,IAAI,CAAC;MAE9BkB,eAAe,CAACR,OAAO,GAAGc,MAAM,CAACxB,IAAI,CAAC,IAAI,EAAE;;IAGhD,OAAOkB,eAAe;EAC1B;EAEA;;;EAGMO,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB;;SAlISrC,mCAAmC;;mBAAnCA,MAAmC;AAAA;;SAAnCA,MAAmC;EAAAsC,OAAA,EAAnCtC,MAAmC,CAAAuC,IAAA;EAAAC,UAAA,EADtB;AAAM;AAsIhC,OAAO,MAAMC,4BAA4B,GAAG5C,aAAa,CAACG,mCAAmC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}