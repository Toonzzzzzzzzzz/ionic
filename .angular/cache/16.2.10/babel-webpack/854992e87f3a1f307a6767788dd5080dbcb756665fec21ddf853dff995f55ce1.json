{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDelegate } from '@classes/delegate';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites } from './sites';\nimport { CoreConfig, CoreConfigProvider } from './config';\nimport { CoreConstants } from '../constants';\nimport { CoreUrlUtils } from './utils/url';\nimport { CoreTextUtils } from '@services/utils/text';\nimport * as i0 from \"@angular/core\";\n/**\n * Helper service to support analytics.\n */\nexport class CoreAnalyticsService extends CoreDelegate {\n  constructor() {\n    super('CoreAnalyticsService', true);\n    CoreEvents.on(CoreConfigProvider.ENVIRONMENT_UPDATED, () => this.updateHandlers());\n    CoreEvents.on(CoreEvents.LOGOUT, () => this.clearSiteHandlers());\n  }\n  /**\n   * Clear current site handlers. Reserved for core use.\n   */\n  clearSiteHandlers() {\n    this.enabledHandlers = {};\n  }\n  /**\n   * Enable or disable analytics for all handlers.\n   *\n   * @param enable Whether to enable or disable.\n   * @returns Promise resolved when done.\n   */\n  enableAnalytics(enable) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield Promise.all(Object.values(_this.handlers).map(handler => {\n          var _handler$enableAnalyt;\n          return (_handler$enableAnalyt = handler.enableAnalytics) === null || _handler$enableAnalyt === void 0 ? void 0 : _handler$enableAnalyt.call(handler, enable);\n        }));\n      } catch (error) {\n        _this.logger.error(`Error ${enable ? 'enabling' : 'disabling'} analytics`, error);\n      }\n    })();\n  }\n  /**\n   * Check if analytics is available for the app/site.\n   *\n   * @returns True if available, false otherwise.\n   */\n  isAnalyticsAvailable() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var _CoreSites$getCurrent;\n      if (Object.keys(_this2.enabledHandlers).length > 0 && !((_CoreSites$getCurrent = CoreSites.getCurrentSite()) !== null && _CoreSites$getCurrent !== void 0 && _CoreSites$getCurrent.isDemoModeSite())) {\n        // There is an enabled handler, analytics is available.\n        return true;\n      }\n      // Check if there is a handler that is enabled at app level (enabled handlers are only set when logged in).\n      const enabledList = yield Promise.all(Object.values(_this2.handlers).map(handler => {\n        if (!handler.appLevelEnabled) {\n          return false;\n        }\n        return handler.isEnabled();\n      }));\n      return enabledList.includes(true);\n    })();\n  }\n  /**\n   * Log an event for the current site.\n   *\n   * @param event Event data.\n   */\n  logEvent(event) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getCurrentSite();\n      if (!site || site.isDemoModeSite()) {\n        return;\n      }\n      // Check if analytics is enabled by the user.\n      const enabled = yield CoreConfig.get(CoreConstants.SETTINGS_ANALYTICS_ENABLED, true);\n      if (!enabled) {\n        return;\n      }\n      const treatedEvent = _objectSpread(_objectSpread({}, event), {}, {\n        siteId: site.getId()\n      });\n      if (treatedEvent.type === CoreAnalyticsEventType.VIEW_ITEM || treatedEvent.type === CoreAnalyticsEventType.VIEW_ITEM_LIST) {\n        treatedEvent.name = CoreTextUtils.cleanTags(treatedEvent.name);\n      }\n      if ('url' in treatedEvent && treatedEvent.url) {\n        if (!CoreUrlUtils.isAbsoluteURL(treatedEvent.url)) {\n          treatedEvent.url = site.createSiteUrl(treatedEvent.url);\n        } else if (!site.containsUrl(treatedEvent.url)) {\n          // URL belongs to a different site, ignore the event.\n          return;\n        }\n      }\n      try {\n        yield Promise.all(Object.values(_this3.enabledHandlers).map(handler => handler.logEvent(treatedEvent)));\n      } catch (error) {\n        _this3.logger.error('Error logging event', event, error);\n      }\n    })();\n  }\n}\n_class = CoreAnalyticsService;\n_class.ɵfac = function CoreAnalyticsService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreAnalytics = makeSingleton(CoreAnalyticsService);\n/**\n * Possible types of events.\n */\nexport var CoreAnalyticsEventType;\n(function (CoreAnalyticsEventType) {\n  CoreAnalyticsEventType[\"VIEW_ITEM\"] = \"view_item\";\n  CoreAnalyticsEventType[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  CoreAnalyticsEventType[\"PUSH_NOTIFICATION\"] = \"push_notification\";\n  CoreAnalyticsEventType[\"DOWNLOAD_FILE\"] = \"download_file\";\n  CoreAnalyticsEventType[\"OPEN_LINK\"] = \"open_link\";\n})(CoreAnalyticsEventType || (CoreAnalyticsEventType = {}));","map":{"version":3,"names":["CoreDelegate","makeSingleton","CoreEvents","CoreSites","CoreConfig","CoreConfigProvider","CoreConstants","CoreUrlUtils","CoreTextUtils","CoreAnalyticsService","constructor","on","ENVIRONMENT_UPDATED","updateHandlers","LOGOUT","clearSiteHandlers","enabledHandlers","enableAnalytics","enable","_this","_asyncToGenerator","Promise","all","Object","values","handlers","map","handler","_handler$enableAnalyt","call","error","logger","isAnalyticsAvailable","_this2","_CoreSites$getCurrent","keys","length","getCurrentSite","isDemoModeSite","enabledList","appLevelEnabled","isEnabled","includes","logEvent","event","_this3","site","enabled","get","SETTINGS_ANALYTICS_ENABLED","treatedEvent","_objectSpread","siteId","getId","type","CoreAnalyticsEventType","VIEW_ITEM","VIEW_ITEM_LIST","name","cleanTags","url","isAbsoluteURL","createSiteUrl","containsUrl","factory","ɵfac","providedIn","CoreAnalytics"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/analytics.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreDelegate, CoreDelegateHandler } from '@classes/delegate';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { makeSingleton } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites } from './sites';\nimport { CoreConfig, CoreConfigProvider } from './config';\nimport { CoreConstants } from '../constants';\nimport { CoreUrlUtils } from './utils/url';\nimport { CoreTextUtils } from '@services/utils/text';\n\n/**\n * Helper service to support analytics.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreAnalyticsService extends CoreDelegate<CoreAnalyticsHandler> {\n\n    constructor() {\n        super('CoreAnalyticsService', true);\n\n        CoreEvents.on(CoreConfigProvider.ENVIRONMENT_UPDATED, () => this.updateHandlers());\n        CoreEvents.on(CoreEvents.LOGOUT, () => this.clearSiteHandlers());\n    }\n\n    /**\n     * Clear current site handlers. Reserved for core use.\n     */\n    protected clearSiteHandlers(): void {\n        this.enabledHandlers = {};\n    }\n\n    /**\n     * Enable or disable analytics for all handlers.\n     *\n     * @param enable Whether to enable or disable.\n     * @returns Promise resolved when done.\n     */\n    async enableAnalytics(enable: boolean): Promise<void> {\n        try {\n            await Promise.all(Object.values(this.handlers).map(handler => handler.enableAnalytics?.(enable)));\n        } catch (error) {\n            this.logger.error(`Error ${enable ? 'enabling' : 'disabling'} analytics`, error);\n        }\n    }\n\n    /**\n     * Check if analytics is available for the app/site.\n     *\n     * @returns True if available, false otherwise.\n     */\n    async isAnalyticsAvailable(): Promise<boolean> {\n        if (Object.keys(this.enabledHandlers).length > 0 && !CoreSites.getCurrentSite()?.isDemoModeSite()) {\n            // There is an enabled handler, analytics is available.\n            return true;\n        }\n\n        // Check if there is a handler that is enabled at app level (enabled handlers are only set when logged in).\n        const enabledList = await Promise.all(Object.values(this.handlers).map(handler => {\n            if (!handler.appLevelEnabled) {\n                return false;\n            }\n\n            return handler.isEnabled();\n        }));\n\n        return enabledList.includes(true);\n    }\n\n    /**\n     * Log an event for the current site.\n     *\n     * @param event Event data.\n     */\n    async logEvent(event: CoreAnalyticsAnyEvent): Promise<void> {\n        const site = CoreSites.getCurrentSite();\n        if (!site || site.isDemoModeSite()) {\n            return;\n        }\n\n        // Check if analytics is enabled by the user.\n        const enabled = await CoreConfig.get<boolean>(CoreConstants.SETTINGS_ANALYTICS_ENABLED, true);\n        if (!enabled) {\n            return;\n        }\n\n        const treatedEvent: CoreAnalyticsEvent = {\n            ...event,\n            siteId: site.getId(),\n        };\n\n        if (treatedEvent.type === CoreAnalyticsEventType.VIEW_ITEM || treatedEvent.type === CoreAnalyticsEventType.VIEW_ITEM_LIST) {\n            treatedEvent.name = CoreTextUtils.cleanTags(treatedEvent.name);\n        }\n\n        if ('url' in treatedEvent && treatedEvent.url) {\n            if (!CoreUrlUtils.isAbsoluteURL(treatedEvent.url)) {\n                treatedEvent.url = site.createSiteUrl(treatedEvent.url);\n            } else if (!site.containsUrl(treatedEvent.url)) {\n                // URL belongs to a different site, ignore the event.\n                return;\n            }\n        }\n\n        try {\n            await Promise.all(Object.values(this.enabledHandlers).map(handler => handler.logEvent(treatedEvent)));\n        } catch (error) {\n            this.logger.error('Error logging event', event, error);\n        }\n    }\n\n}\n\nexport const CoreAnalytics = makeSingleton(CoreAnalyticsService);\n\n/**\n * Interface that all analytics handlers must implement.\n */\nexport interface CoreAnalyticsHandler extends CoreDelegateHandler {\n\n    /**\n     * If true it means that the handler is enabled or not for the whole app, it doesn't depend on the site.\n     */\n    appLevelEnabled?: boolean;\n\n    /**\n     * Log an event.\n     *\n     * @param event Event data.\n     */\n    logEvent(event: CoreAnalyticsEvent): Promise<void>;\n\n    /**\n     * Enable or disable analytics.\n     *\n     * @param enable Whether to enable or disable.\n     * @returns Promise resolved when done.\n     */\n    enableAnalytics?(enable: boolean): Promise<void>;\n\n}\n\n/**\n * Possible types of events.\n */\nexport enum CoreAnalyticsEventType {\n    VIEW_ITEM = 'view_item', // View some page or data that mainly contains one item.\n    VIEW_ITEM_LIST = 'view_item_list', // View some page or data that mainly contains a list of items.\n    PUSH_NOTIFICATION = 'push_notification', // Event related to push notifications.\n    DOWNLOAD_FILE = 'download_file', // A file was downloaded.\n    OPEN_LINK = 'open_link', // A link was opened in browser or InAppBrowser.\n}\n\n/**\n * Any type of event data.\n */\nexport type CoreAnalyticsAnyEvent = CoreAnalyticsViewEvent | CoreAnalyticsPushEvent | CoreAnalyticsDownloadFileEvent |\nCoreAnalyticsOpenLinkEvent;\n\n/**\n * Event data, including calculated data.\n */\nexport type CoreAnalyticsEvent = CoreAnalyticsAnyEvent & {\n    siteId: string;\n};\n\n/**\n * Data specific for the VIEW_ITEM and VIEW_LIST events.\n */\nexport type CoreAnalyticsViewEvent = {\n    type: CoreAnalyticsEventType.VIEW_ITEM | CoreAnalyticsEventType.VIEW_ITEM_LIST;\n    ws: string; // Name of the WS used to log the data in LMS or to obtain the data if there is no log WS.\n    name: string; // Name of the item or page viewed.\n    url?: string; // Moodle URL. You can use the URL without the domain, e.g. /mod/foo/view.php.\n    data?: {\n        id?: number | string; // ID of the item viewed (if any).\n        category?: string; // Category of the data viewed (if any).\n        [key: string]: string | number | boolean | undefined;\n    };\n};\n\n/**\n * Data specific for the PUSH_NOTIFICATION events.\n */\nexport type CoreAnalyticsPushEvent = {\n    type: CoreAnalyticsEventType.PUSH_NOTIFICATION;\n    eventName: string; // Name of the event.\n    data: CorePushNotificationsNotificationBasicData;\n};\n\n/**\n * Data specific for the DOWNLOAD_FILE events.\n */\nexport type CoreAnalyticsDownloadFileEvent = {\n    type: CoreAnalyticsEventType.DOWNLOAD_FILE;\n    fileUrl: string;\n};\n\n/**\n * Data specific for the OPEN_LINK events.\n */\nexport type CoreAnalyticsOpenLinkEvent = {\n    type: CoreAnalyticsEventType.OPEN_LINK;\n    link: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}