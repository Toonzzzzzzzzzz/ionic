{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { AddonModDataProvider } from '@addons/mod/data/services/data';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreFileSession } from '@services/file-session';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldPictureComponent } from '../component/picture';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for picture data field plugin.\n */\nexport class AddonModDataFieldPictureHandlerService {\n  constructor() {\n    this.name = 'AddonModDataFieldPictureHandler';\n    this.type = 'picture';\n  }\n  /**\n   * @inheritdoc\n   */\n  getComponent() {\n    return AddonModDataFieldPictureComponent;\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldSearchData(field, inputData) {\n    const fieldName = 'f_' + field.id;\n    if (inputData[fieldName]) {\n      return [{\n        name: fieldName,\n        value: inputData[fieldName]\n      }];\n    }\n    return [];\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldEditData(field, inputData) {\n    const files = this.getFieldEditFiles(field);\n    const fieldName = 'f_' + field.id + '_alttext';\n    return [{\n      fieldid: field.id,\n      subfield: 'file',\n      files: files\n    }, {\n      fieldid: field.id,\n      subfield: 'alttext',\n      value: inputData[fieldName]\n    }];\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldEditFiles(field) {\n    return CoreFileSession.getFiles(AddonModDataProvider.COMPONENT, field.dataid + '_' + field.id);\n  }\n  /**\n   * @inheritdoc\n   */\n  hasFieldDataChanged(field, inputData, originalFieldData) {\n    const fieldName = 'f_' + field.id + '_alttext';\n    const altText = inputData[fieldName] || '';\n    const originalAltText = (originalFieldData === null || originalFieldData === void 0 ? void 0 : originalFieldData.content1) || '';\n    if (altText != originalAltText) {\n      return true;\n    }\n    const files = this.getFieldEditFiles(field) || [];\n    let originalFiles = (originalFieldData === null || originalFieldData === void 0 ? void 0 : originalFieldData.files) || [];\n    // Get image.\n    if (originalFiles.length > 0) {\n      const filenameSeek = (originalFieldData === null || originalFieldData === void 0 ? void 0 : originalFieldData.content) || '';\n      const file = originalFiles.find(file => ('name' in file ? file.name : file.filename) == filenameSeek);\n      if (file) {\n        originalFiles = [file];\n      }\n    }\n    return CoreFileUploader.areFileListDifferent(files, originalFiles);\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldsNotifications(field, inputData) {\n    if (!field.required) {\n      return;\n    }\n    if (!inputData || !inputData.length) {\n      return Translate.instant('addon.mod_data.errormustsupplyvalue');\n    }\n    const found = inputData.some(input => {\n      if (input.subfield !== undefined && input.subfield == 'file') {\n        return !!input.value;\n      }\n      return false;\n    });\n    if (!found) {\n      return Translate.instant('addon.mod_data.errormustsupplyvalue');\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  overrideData(originalContent, offlineContent, offlineFiles) {\n    const uploadedFilesResult = offlineContent === null || offlineContent === void 0 ? void 0 : offlineContent.file;\n    if (uploadedFilesResult && uploadedFilesResult.offline > 0 && offlineFiles && (offlineFiles === null || offlineFiles === void 0 ? void 0 : offlineFiles.length) > 0) {\n      originalContent.content = offlineFiles[0].name;\n      originalContent.files = [offlineFiles[0]];\n    } else if (uploadedFilesResult && uploadedFilesResult.online && uploadedFilesResult.online.length > 0) {\n      originalContent.content = uploadedFilesResult.online[0].filename || '';\n      originalContent.files = [uploadedFilesResult.online[0]];\n    }\n    originalContent.content1 = offlineContent.alttext || '';\n    return originalContent;\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n}\n_class = AddonModDataFieldPictureHandlerService;\n_class.ɵfac = function AddonModDataFieldPictureHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModDataFieldPictureHandler = makeSingleton(AddonModDataFieldPictureHandlerService);","map":{"version":3,"names":["AddonModDataProvider","CoreFileUploader","CoreFileSession","makeSingleton","Translate","AddonModDataFieldPictureComponent","AddonModDataFieldPictureHandlerService","constructor","name","type","getComponent","getFieldSearchData","field","inputData","fieldName","id","value","getFieldEditData","files","getFieldEditFiles","fieldid","subfield","getFiles","COMPONENT","dataid","hasFieldDataChanged","originalFieldData","altText","originalAltText","content1","originalFiles","length","filenameSeek","content","file","find","filename","areFileListDifferent","getFieldsNotifications","required","instant","found","some","input","undefined","overrideData","originalContent","offlineContent","offlineFiles","uploadedFilesResult","offline","online","alttext","isEnabled","_asyncToGenerator","factory","ɵfac","providedIn","AddonModDataFieldPictureHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/fields/picture/services/handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    AddonModDataEntryField,\n    AddonModDataField,\n    AddonModDataProvider,\n    AddonModDataSearchEntriesAdvancedFieldFormatted,\n    AddonModDataSubfieldData,\n} from '@addons/mod/data/services/data';\nimport { AddonModDataFieldHandler } from '@addons/mod/data/services/data-fields-delegate';\nimport { Injectable, Type } from '@angular/core';\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { FileEntry } from '@awesome-cordova-plugins/file/ngx';\nimport { CoreFileSession } from '@services/file-session';\nimport { CoreFormFields } from '@singletons/form';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldPictureComponent } from '../component/picture';\nimport { CoreFileEntry } from '@services/file-helper';\nimport type { AddonModDataFieldPluginBaseComponent } from '@addons/mod/data/classes/base-field-plugin-component';\n\n/**\n * Handler for picture data field plugin.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModDataFieldPictureHandlerService implements AddonModDataFieldHandler {\n\n    name = 'AddonModDataFieldPictureHandler';\n    type = 'picture';\n\n    /**\n     * @inheritdoc\n     */\n    getComponent(): Type<AddonModDataFieldPluginBaseComponent> {\n        return AddonModDataFieldPictureComponent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldSearchData(\n        field: AddonModDataField,\n        inputData: CoreFormFields<string>,\n    ): AddonModDataSearchEntriesAdvancedFieldFormatted[] {\n        const fieldName = 'f_' + field.id;\n\n        if (inputData[fieldName]) {\n            return [{\n                name: fieldName,\n                value: inputData[fieldName],\n            }];\n        }\n\n        return [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldEditData(field: AddonModDataField, inputData: CoreFormFields<string>): AddonModDataSubfieldData[] {\n        const files = this.getFieldEditFiles(field);\n        const fieldName = 'f_' + field.id + '_alttext';\n\n        return [\n            {\n                fieldid: field.id,\n                subfield: 'file',\n                files: files,\n            },\n            {\n                fieldid: field.id,\n                subfield: 'alttext',\n                value: inputData[fieldName],\n            },\n        ];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldEditFiles(field: AddonModDataField): CoreFileEntry[] {\n        return CoreFileSession.getFiles(AddonModDataProvider.COMPONENT, field.dataid + '_' + field.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    hasFieldDataChanged(\n        field: AddonModDataField,\n        inputData: CoreFormFields<string>,\n        originalFieldData: AddonModDataEntryField,\n    ): boolean {\n        const fieldName = 'f_' + field.id + '_alttext';\n        const altText = inputData[fieldName] || '';\n        const originalAltText = originalFieldData?.content1 || '';\n        if (altText != originalAltText) {\n            return true;\n        }\n\n        const files = this.getFieldEditFiles(field) || [];\n        let originalFiles = originalFieldData?.files || [];\n\n        // Get image.\n        if (originalFiles.length > 0) {\n            const filenameSeek = originalFieldData?.content || '';\n            const file = originalFiles.find((file) => ('name' in file ? file.name : file.filename) == filenameSeek);\n            if (file) {\n                originalFiles = [file];\n            }\n        }\n\n        return CoreFileUploader.areFileListDifferent(files, originalFiles);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldsNotifications(field: AddonModDataField, inputData: AddonModDataSubfieldData[]): string | undefined {\n        if (!field.required) {\n            return;\n        }\n\n        if (!inputData || !inputData.length) {\n            return Translate.instant('addon.mod_data.errormustsupplyvalue');\n        }\n\n        const found = inputData.some((input) => {\n            if (input.subfield !== undefined && input.subfield == 'file') {\n                return !!input.value;\n            }\n\n            return false;\n        });\n\n        if (!found) {\n            return Translate.instant('addon.mod_data.errormustsupplyvalue');\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    overrideData(\n        originalContent: AddonModDataEntryField,\n        offlineContent: CoreFormFields,\n        offlineFiles?: FileEntry[],\n    ): AddonModDataEntryField {\n        const uploadedFilesResult: CoreFileUploaderStoreFilesResult | undefined =\n            <CoreFileUploaderStoreFilesResult | undefined> offlineContent?.file;\n\n        if (uploadedFilesResult && uploadedFilesResult.offline > 0 && offlineFiles && offlineFiles?.length > 0) {\n            originalContent.content = offlineFiles[0].name;\n            originalContent.files = [offlineFiles[0]];\n        } else if (uploadedFilesResult && uploadedFilesResult.online && uploadedFilesResult.online.length > 0) {\n            originalContent.content = uploadedFilesResult.online[0].filename || '';\n            originalContent.files = [uploadedFilesResult.online[0]];\n        }\n\n        originalContent.content1 = <string> offlineContent.alttext || '';\n\n        return originalContent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n}\nexport const AddonModDataFieldPictureHandler = makeSingleton(AddonModDataFieldPictureHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}