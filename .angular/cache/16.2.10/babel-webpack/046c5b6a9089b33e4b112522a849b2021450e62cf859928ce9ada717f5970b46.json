{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport { CoreSitePlugins } from '../services/siteplugins';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreForms } from '@singletons/form';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../components/plugin-content/plugin-content\";\n/**\n * Base class for directives that need to call a WS.\n */\nexport class CoreSitePluginsCallWSBaseDirective {\n  constructor(element, parentContent) {\n    this.parentContent = parentContent;\n    this.onSuccess = new EventEmitter(); // Sends the result when the WS call succeeds.\n    this.onError = new EventEmitter(); // Sends the error when the WS call fails.\n    this.onDone = new EventEmitter(); // Notifies when the WS call is done (either success or fail).\n    this.element = element.nativeElement || element;\n    this.logger = CoreLogger.getInstance('CoreSitePluginsCallWS');\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this$parentContent;\n    if (!((_this$parentContent = this.parentContent) !== null && _this$parentContent !== void 0 && _this$parentContent.invalidateObservable)) {\n      return;\n    }\n    this.invalidateObserver = this.parentContent.invalidateObservable.subscribe(() => {\n      this.invalidate();\n    });\n  }\n  /**\n   * Call a WS.\n   *\n   * @returns Promise resolved when done.\n   */\n  callWS() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const params = _this.getParamsForWS();\n        const result = yield CoreSitePlugins.callWS(_this.name, params, _this.preSets);\n        _this.onSuccess.emit(result);\n        // Don't block the promise with the success function.\n        _this.wsCallSuccess(result);\n      } catch (error) {\n        _this.onError.emit(error);\n        _this.logger.error(`Error calling WS ${_this.name}`, error);\n        throw error;\n      } finally {\n        _this.onDone.emit();\n      }\n    })();\n  }\n  /**\n   * Get the params for the WS call.\n   *\n   * @returns Params.\n   */\n  getParamsForWS() {\n    let params = this.params || {};\n    if (this.parentContent) {\n      params = CoreSitePlugins.loadOtherDataInArgs(params, this.parentContent.otherData, this.useOtherDataForWS);\n    }\n    if (this.form && document.forms[this.form]) {\n      params = Object.assign(params, CoreForms.getDataFromForm(document.forms[this.form]));\n    }\n    return params;\n  }\n  /**\n   * Function called when the WS call is successful.\n   *\n   * @param result Result of the WS call.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  wsCallSuccess(result) {\n    // Function to be overridden.\n  }\n  /**\n   * Invalidate the WS call.\n   *\n   * @returns Promise resolved when done.\n   */\n  invalidate() {\n    const params = this.getParamsForWS();\n    return CoreSitePlugins.invalidateCallWS(this.name, params, this.preSets);\n  }\n  /**\n   * Directive destroyed.\n   */\n  ngOnDestroy() {\n    var _this$invalidateObser;\n    (_this$invalidateObser = this.invalidateObserver) === null || _this$invalidateObser === void 0 || _this$invalidateObser.unsubscribe();\n  }\n}\n_class = CoreSitePluginsCallWSBaseDirective;\n_class.ɵfac = function CoreSitePluginsCallWSBaseDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CoreSitePluginsPluginContentComponent));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  inputs: {\n    name: \"name\",\n    params: \"params\",\n    preSets: \"preSets\",\n    useOtherDataForWS: \"useOtherDataForWS\",\n    form: \"form\"\n  },\n  outputs: {\n    onSuccess: \"onSuccess\",\n    onError: \"onError\",\n    onDone: \"onDone\"\n  }\n});","map":{"version":3,"names":["EventEmitter","CoreSitePlugins","CoreLogger","CoreForms","CoreSitePluginsCallWSBaseDirective","constructor","element","parentContent","onSuccess","onError","onDone","nativeElement","logger","getInstance","ngOnInit","_this$parentContent","invalidateObservable","invalidateObserver","subscribe","invalidate","callWS","_this","_asyncToGenerator","params","getParamsForWS","result","name","preSets","emit","wsCallSuccess","error","loadOtherDataInArgs","otherData","useOtherDataForWS","form","document","forms","Object","assign","getDataFromForm","invalidateCallWS","ngOnDestroy","_this$invalidateObser","unsubscribe","i0","ɵɵdirectiveInject","ElementRef","i1","CoreSitePluginsPluginContentComponent","inputs","outputs"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/siteplugins/classes/call-ws-directive.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Input, OnInit, OnDestroy, ElementRef, Output, EventEmitter, Directive } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreSitePluginsPluginContentComponent } from '../components/plugin-content/plugin-content';\nimport { CoreSitePlugins } from '../services/siteplugins';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreFormFields, CoreForms } from '@singletons/form';\n\n/**\n * Base class for directives that need to call a WS.\n */\n@Directive()\nexport class CoreSitePluginsCallWSBaseDirective implements OnInit, OnDestroy {\n\n    @Input() name!: string; // The name of the WS to call.\n    @Input() params?: Record<string, unknown>; // The params for the WS call.\n    @Input() preSets?: CoreSiteWSPreSets; // The preSets for the WS call.\n    @Input() useOtherDataForWS?: string[] | unknown; // Whether to include other data in the params for the WS.\n    @Input() form?: string; // ID or name to identify a form. The form data will be retrieved and sent to the WS.\n    @Output() onSuccess = new EventEmitter<unknown>(); // Sends the result when the WS call succeeds.\n    @Output() onError = new EventEmitter<unknown>(); // Sends the error when the WS call fails.\n    @Output() onDone = new EventEmitter<void>(); // Notifies when the WS call is done (either success or fail).\n\n    protected logger: CoreLogger;\n    protected element: HTMLElement;\n    protected invalidateObserver?: Subscription;\n\n    constructor(\n        element: ElementRef,\n        protected parentContent: CoreSitePluginsPluginContentComponent | null,\n    ) {\n        this.element = element.nativeElement || element;\n        this.logger = CoreLogger.getInstance('CoreSitePluginsCallWS');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        if (!this.parentContent?.invalidateObservable) {\n            return;\n        }\n\n        this.invalidateObserver = this.parentContent.invalidateObservable.subscribe(() => {\n            this.invalidate();\n        });\n    }\n\n    /**\n     * Call a WS.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async callWS(): Promise<void> {\n        try {\n            const params = this.getParamsForWS();\n\n            const result = await CoreSitePlugins.callWS(this.name, params, this.preSets);\n\n            this.onSuccess.emit(result);\n\n            // Don't block the promise with the success function.\n            this.wsCallSuccess(result);\n        } catch (error) {\n            this.onError.emit(error);\n            this.logger.error(`Error calling WS ${this.name}`, error);\n\n            throw error;\n        } finally {\n            this.onDone.emit();\n        }\n    }\n\n    /**\n     * Get the params for the WS call.\n     *\n     * @returns Params.\n     */\n    protected getParamsForWS(): CoreFormFields {\n        let params = this.params || {};\n\n        if (this.parentContent) {\n            params = CoreSitePlugins.loadOtherDataInArgs(params, this.parentContent.otherData, this.useOtherDataForWS);\n        }\n\n        if (this.form && document.forms[this.form]) {\n            params = Object.assign(params, CoreForms.getDataFromForm(document.forms[this.form]));\n        }\n\n        return params;\n    }\n\n    /**\n     * Function called when the WS call is successful.\n     *\n     * @param result Result of the WS call.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected wsCallSuccess(result: unknown): void | Promise<void> {\n        // Function to be overridden.\n    }\n\n    /**\n     * Invalidate the WS call.\n     *\n     * @returns Promise resolved when done.\n     */\n    invalidate(): Promise<void> {\n        const params = this.getParamsForWS();\n\n        return CoreSitePlugins.invalidateCallWS(this.name, params, this.preSets);\n    }\n\n    /**\n     * Directive destroyed.\n     */\n    ngOnDestroy(): void {\n        this.invalidateObserver?.unsubscribe();\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}