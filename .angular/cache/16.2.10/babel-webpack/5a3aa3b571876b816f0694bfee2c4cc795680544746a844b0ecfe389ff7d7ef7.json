{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModSurvey, AddonModSurveyProvider } from '../survey';\nimport { AddonModSurveySync } from '../survey-sync';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to prefetch surveys.\n */\nexport class AddonModSurveyPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModSurvey';\n    this.modName = 'survey';\n    this.component = AddonModSurveyProvider.COMPONENT;\n    this.updatesNames = /^configuration$|^.*files$|^answers$/;\n  }\n  /**\n   * @inheritdoc\n   */\n  getIntroFiles(module, courseId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const survey = yield CoreUtils.ignoreErrors(AddonModSurvey.getSurvey(courseId, module.id));\n      return _this.getIntroFilesFromInstance(module, survey);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateContent(moduleId, courseId) {\n    return _asyncToGenerator(function* () {\n      return AddonModSurvey.invalidateContent(moduleId, courseId);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateModule(module, courseId) {\n    return _asyncToGenerator(function* () {\n      yield AddonModSurvey.invalidateSurveyData(courseId);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  prefetch(module, courseId) {\n    return this.prefetchPackage(module, courseId, siteId => this.prefetchSurvey(module, courseId, siteId));\n  }\n  /**\n   * Prefetch a survey.\n   *\n   * @param module Module.\n   * @param courseId Course ID the module belongs to.\n   * @param siteId SiteId or current site.\n   * @returns Promise resolved when done.\n   */\n  prefetchSurvey(module, courseId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const survey = yield AddonModSurvey.getSurvey(courseId, module.id, {\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n        siteId\n      });\n      const promises = [];\n      const files = _this2.getIntroFilesFromInstance(module, survey);\n      // Prefetch files.\n      promises.push(CoreFilepool.addFilesToQueue(siteId, files, AddonModSurveyProvider.COMPONENT, module.id));\n      // If survey isn't answered, prefetch the questions.\n      if (!survey.surveydone) {\n        promises.push(AddonModSurvey.getQuestions(survey.id, {\n          cmId: module.id,\n          readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n          siteId\n        }));\n      }\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  sync(module, courseId, siteId) {\n    return AddonModSurveySync.syncSurvey(module.instance, undefined, siteId);\n  }\n}\n_class = AddonModSurveyPrefetchHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModSurveyPrefetchHandlerService_BaseFactory;\n  return function AddonModSurveyPrefetchHandlerService_Factory(t) {\n    return (ɵAddonModSurveyPrefetchHandlerService_BaseFactory || (ɵAddonModSurveyPrefetchHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModSurveyPrefetchHandler = makeSingleton(AddonModSurveyPrefetchHandlerService);","map":{"version":3,"names":["CoreCourseActivityPrefetchHandlerBase","CoreFilepool","CoreUtils","makeSingleton","AddonModSurvey","AddonModSurveyProvider","AddonModSurveySync","AddonModSurveyPrefetchHandlerService","constructor","name","modName","component","COMPONENT","updatesNames","getIntroFiles","module","courseId","_this","_asyncToGenerator","survey","ignoreErrors","getSurvey","id","getIntroFilesFromInstance","invalidateContent","moduleId","invalidateModule","invalidateSurveyData","isEnabled","prefetch","prefetchPackage","siteId","prefetchSurvey","_this2","readingStrategy","promises","files","push","addFilesToQueue","surveydone","getQuestions","cmId","Promise","all","sync","syncSurvey","instance","undefined","t","factory","ɵfac","providedIn","AddonModSurveyPrefetchHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/survey/services/handlers/prefetch.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourseAnyModuleData } from '@features/course/services/course';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSFile } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { AddonModSurvey, AddonModSurveyProvider } from '../survey';\nimport { AddonModSurveySync, AddonModSurveySyncResult } from '../survey-sync';\n\n/**\n * Handler to prefetch surveys.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonModSurveyPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n\n    name = 'AddonModSurvey';\n    modName = 'survey';\n    component = AddonModSurveyProvider.COMPONENT;\n    updatesNames = /^configuration$|^.*files$|^answers$/;\n\n    /**\n     * @inheritdoc\n     */\n    async getIntroFiles(module: CoreCourseAnyModuleData, courseId: number): Promise<CoreWSFile[]> {\n        const survey = await CoreUtils.ignoreErrors(AddonModSurvey.getSurvey(courseId, module.id));\n\n        return this.getIntroFilesFromInstance(module, survey);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateContent(moduleId: number, courseId: number): Promise<void> {\n        return AddonModSurvey.invalidateContent(moduleId, courseId);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async invalidateModule(module: CoreCourseAnyModuleData, courseId: number): Promise<void> {\n        await AddonModSurvey.invalidateSurveyData(courseId);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    prefetch(module: CoreCourseAnyModuleData, courseId: number): Promise<void> {\n        return this.prefetchPackage(module, courseId, (siteId) => this.prefetchSurvey(module, courseId, siteId));\n    }\n\n    /**\n     * Prefetch a survey.\n     *\n     * @param module Module.\n     * @param courseId Course ID the module belongs to.\n     * @param siteId SiteId or current site.\n     * @returns Promise resolved when done.\n     */\n    protected async prefetchSurvey(module: CoreCourseAnyModuleData, courseId: number, siteId: string): Promise<void> {\n        const survey = await AddonModSurvey.getSurvey(courseId, module.id, {\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId,\n        });\n\n        const promises: Promise<unknown>[] = [];\n        const files = this.getIntroFilesFromInstance(module, survey);\n\n        // Prefetch files.\n        promises.push(CoreFilepool.addFilesToQueue(siteId, files, AddonModSurveyProvider.COMPONENT, module.id));\n\n        // If survey isn't answered, prefetch the questions.\n        if (!survey.surveydone) {\n            promises.push(AddonModSurvey.getQuestions(survey.id, {\n                cmId: module.id,\n                readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n                siteId,\n            }));\n        }\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    sync(module: CoreCourseAnyModuleData, courseId: number, siteId?: string): Promise<AddonModSurveySyncResult> {\n        return AddonModSurveySync.syncSurvey(module.instance, undefined, siteId);\n    }\n\n}\nexport const AddonModSurveyPrefetchHandler = makeSingleton(AddonModSurveyPrefetchHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}