{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreConstants } from '@/core/constants';\nimport { CoreAppProvider } from '@services/app';\nimport { CoreConfig } from '@services/config';\nimport { CoreSubscriptions } from '@singletons/subscriptions';\nimport { makeSingleton, Translate, Http } from '@singletons';\nimport moment from 'moment-timezone';\nimport { CorePlatform } from '@services/platform';\nimport { AddonFilterMultilangHandler } from '@addons/filter/multilang/services/handlers/multilang';\nimport { AddonFilterMultilang2Handler } from '@addons/filter/multilang2/services/handlers/multilang2';\nimport { firstValueFrom } from 'rxjs';\nimport { CoreLogger } from '@singletons/logger';\nimport * as i0 from \"@angular/core\";\n/*\n * Service to handle language features, like changing the current language.\n*/\nexport class CoreLangProvider {\n  constructor() {\n    this.fallbackLanguage = 'en'; // Always use English as fallback language since it contains all strings.\n    this.defaultLanguage = CoreConstants.CONFIG.default_lang || 'en'; // Lang to use if device lang not valid or is forced.\n    this.customStrings = {}; // Strings defined using the admin tool.\n    this.sitePluginsStrings = {}; // Strings defined by site plugins.\n    this.logger = CoreLogger.getInstance('CoreLang');\n  }\n  initialize() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Set fallback language and language to use until the app determines the right language to use.\n      Translate.setDefaultLang(_this.fallbackLanguage);\n      Translate.use(_this.defaultLanguage);\n      Translate.onLangChange.subscribe(event => {\n        document.documentElement.setAttribute('lang', event.lang);\n        let dir = Translate.instant('core.thisdirection');\n        dir = dir.indexOf('rtl') != -1 ? 'rtl' : 'ltr';\n        document.documentElement.setAttribute('dir', dir);\n      });\n      _this.initializeCurrentLanguage();\n    })();\n  }\n  /**\n   * Init language.\n   */\n  initializeCurrentLanguage() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield CorePlatform.ready();\n      let language;\n      if (CoreAppProvider.isAutomated()) {\n        // Force current language to English when Behat is running.\n        language = 'en';\n      } else {\n        language = yield _this2.getCurrentLanguage();\n      }\n      yield _this2.changeCurrentLanguage(language);\n    })();\n  }\n  /**\n   * Add a set of site plugins strings for a certain language.\n   *\n   * @param lang The language where to add the strings.\n   * @param strings Object with the strings to add.\n   * @param prefix A prefix to add to all keys.\n   */\n  addSitePluginsStrings(lang, strings, prefix) {\n    lang = lang.replace(/_/g, '-'); // Use the app format instead of Moodle format.\n    // Initialize structure if it doesn't exist.\n    if (!this.sitePluginsStrings[lang]) {\n      this.sitePluginsStrings[lang] = {};\n    }\n    for (const key in strings) {\n      const prefixedKey = prefix + key;\n      let value = strings[key];\n      if (this.customStrings[lang] && this.customStrings[lang][prefixedKey]) {\n        // This string is overridden by a custom string, ignore it.\n        continue;\n      }\n      // Replace the way to access subproperties.\n      value = value.replace(/\\$a->/gm, '$a.');\n      // Add another curly bracket to string params ({$a} -> {{$a}}).\n      value = value.replace(/{([^ ]+)}/gm, '{{$1}}');\n      // Make sure we didn't add to many brackets in some case.\n      value = value.replace(/{{{([^ ]+)}}}/gm, '{{$1}}');\n      // Load the string.\n      this.loadString(this.sitePluginsStrings, lang, prefixedKey, value);\n    }\n  }\n  /**\n   * Capitalize a string (make the first letter uppercase).\n   * We cannot use a function from text utils because it would cause a circular dependency.\n   *\n   * @param value String to capitalize.\n   * @returns Capitalized string.\n   */\n  capitalize(value) {\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  }\n  /**\n   * Get message for the given language.\n   *\n   * @param key Message key.\n   * @param lang Language.\n   * @returns Message if found, null otherwise.\n   */\n  getMessage(key, lang) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _messages$key;\n      const messages = yield _this3.getMessages(lang);\n      return (_messages$key = messages[key]) !== null && _messages$key !== void 0 ? _messages$key : null;\n    })();\n  }\n  /**\n   * Get messages for the given language.\n   *\n   * @param lang Language.\n   * @returns Messages.\n   */\n  getMessages(lang) {\n    return new Promise(resolve => CoreSubscriptions.once(Translate.getTranslation(lang), messages => resolve(messages), () => resolve({})));\n  }\n  /**\n   * Get the parent language defined on the language strings.\n   *\n   * @returns If a parent language is set, return the index name.\n   */\n  getParentLanguage() {\n    const parentLang = Translate.instant('core.parentlanguage');\n    if (parentLang !== '' && parentLang !== 'core.parentlanguage' && parentLang !== this.currentLanguage) {\n      return parentLang;\n    }\n  }\n  /**\n   * Change current language.\n   *\n   * @param language New language to use.\n   * @returns Promise resolved when the change is finished.\n   */\n  changeCurrentLanguage(language) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      var _this4$currentLanguag;\n      // Use british english when parent english is loaded.\n      moment.locale(language == 'en' ? 'en-gb' : language);\n      const previousLanguage = (_this4$currentLanguag = _this4.currentLanguage) !== null && _this4$currentLanguag !== void 0 ? _this4$currentLanguag : _this4.getDefaultLanguage();\n      _this4.currentLanguage = language;\n      try {\n        yield _this4.reloadLanguageStrings();\n        yield CoreConfig.set('current_language', language);\n      } catch (error) {\n        if (language !== previousLanguage) {\n          _this4.logger.error(`Language ${language} not available, reverting to ${previousLanguage}`, error);\n          return _this4.changeCurrentLanguage(previousLanguage);\n        }\n        throw error;\n      } finally {\n        // Load the custom and site plugins strings for the language.\n        if (_this4.loadLangStrings(_this4.customStrings, language) || _this4.loadLangStrings(_this4.sitePluginsStrings, language)) {\n          // Some lang strings have changed, emit an event to update the pipes.\n          Translate.onLangChange.emit({\n            lang: language,\n            translations: Translate.translations[language]\n          });\n        }\n      }\n    })();\n  }\n  /**\n   * Clear current custom strings.\n   */\n  clearCustomStrings() {\n    this.unloadStrings(this.customStrings);\n    this.customStrings = {};\n    this.customStringsRaw = '';\n  }\n  /**\n   * Clear current site plugins strings.\n   */\n  clearSitePluginsStrings() {\n    this.unloadStrings(this.sitePluginsStrings);\n    this.sitePluginsStrings = {};\n  }\n  /**\n   * Get all current custom strings.\n   *\n   * @returns Custom strings.\n   */\n  getAllCustomStrings() {\n    return this.customStrings;\n  }\n  /**\n   * Get all current site plugins strings.\n   *\n   * @returns Site plugins strings.\n   */\n  getAllSitePluginsStrings() {\n    return this.sitePluginsStrings;\n  }\n  /**\n   * Get current language.\n   *\n   * @returns Promise resolved with the current language.\n   */\n  getCurrentLanguage(format) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (_this5.currentLanguage === undefined) {\n        _this5.currentLanguage = yield _this5.detectLanguage();\n      }\n      return format ? _this5.formatLanguage(_this5.currentLanguage, format) : _this5.currentLanguage;\n    })();\n  }\n  /**\n   * Update a language code to the given format.\n   *\n   * @param lang Language code.\n   * @param format Format to use.\n   * @returns Formatted language code.\n   */\n  formatLanguage(lang, format) {\n    switch (format) {\n      case \"app\" /* CoreLangFormat.App */:\n        return lang.replace('_', '-');\n      case \"lms\" /* CoreLangFormat.LMS */:\n        return lang.replace('-', '_');\n    }\n  }\n  /**\n   * Get the current language from settings, or detect the browser one.\n   *\n   * @returns Promise resolved with the selected language.\n   */\n  detectLanguage() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // Get current language from config (user might have changed it).\n      try {\n        return yield CoreConfig.get('current_language');\n      } catch (_unused) {\n        // Try will return, ignore errors here to avoid nesting.\n      }\n      // User hasn't defined a language. If default language is forced, use it.\n      if (CoreConstants.CONFIG.default_lang && CoreConstants.CONFIG.forcedefaultlanguage) {\n        return CoreConstants.CONFIG.default_lang;\n      }\n      // No forced language, try to get current language from browser.\n      let preferredLanguage = navigator.language.toLowerCase();\n      if (preferredLanguage.indexOf('-') > -1) {\n        // Language code defined by locale has a dash, like en-US or es-ES. Check if it's supported.\n        if (CoreConstants.CONFIG.languages && CoreConstants.CONFIG.languages[preferredLanguage] === undefined) {\n          // Code is NOT supported. Fallback to language without dash. E.g. 'en-US' would fallback to 'en'.\n          preferredLanguage = preferredLanguage.substring(0, preferredLanguage.indexOf('-'));\n        }\n      }\n      if (CoreConstants.CONFIG.languages[preferredLanguage] === undefined) {\n        // Language not supported, use default language.\n        return _this6.defaultLanguage;\n      }\n      return preferredLanguage;\n    })();\n  }\n  /**\n   * Get the default language.\n   *\n   * @returns Default language.\n   */\n  getDefaultLanguage() {\n    return this.defaultLanguage;\n  }\n  /**\n   * Get the fallback language.\n   *\n   * @returns Fallback language.\n   */\n  getFallbackLanguage() {\n    return this.fallbackLanguage;\n  }\n  /**\n   * Get translated month names.\n   *\n   * @returns Translated month names.\n   */\n  getMonthNames() {\n    return moment.months().map(month => this.capitalize(month));\n  }\n  /**\n   * Get translated month short names.\n   *\n   * @returns Translated month short names.\n   */\n  getMonthShortNames() {\n    return moment.monthsShort().map(month => this.capitalize(month));\n  }\n  /**\n   * Get translated day names.\n   *\n   * @returns Translated day names.\n   */\n  getDayNames() {\n    return moment.weekdays().map(weekDay => this.capitalize(weekDay));\n  }\n  /**\n   * Get translated day short names.\n   *\n   * @returns Translated day short names.\n   */\n  getDayShortNames() {\n    return moment.weekdaysShort().map(weekDay => this.capitalize(weekDay));\n  }\n  /**\n   * Get the full list of translations for a certain language.\n   *\n   * @param lang The language to check.\n   * @returns Promise resolved when done.\n   */\n  getTranslationTable(lang) {\n    // Create a promise to convert the observable into a promise.\n    return new Promise((resolve, reject) => {\n      const observer = Translate.getTranslation(lang).subscribe({\n        next: table => {\n          resolve(table);\n          observer.unsubscribe();\n        },\n        error: err => {\n          reject(err);\n          observer.unsubscribe();\n        }\n      });\n    });\n  }\n  /**\n   * Loads custom strings obtained from site.\n   *\n   * @param currentSite Current site object.\n   */\n  loadCustomStringsFromSite(currentSite) {\n    const customStrings = currentSite.getStoredConfig('tool_mobile_customlangstrings');\n    if (customStrings !== undefined) {\n      this.loadCustomStrings(customStrings);\n    }\n  }\n  /**\n   * Load certain custom strings.\n   *\n   * @param strings Custom strings to load (tool_mobile_customlangstrings).\n   */\n  loadCustomStrings(strings) {\n    if (strings === this.customStringsRaw) {\n      // Strings haven't changed, stop.\n      return;\n    }\n    // Reset current values.\n    this.clearCustomStrings();\n    if (!strings) {\n      return;\n    }\n    let currentLangChanged = false;\n    const list = strings.split(/(?:\\r\\n|\\r|\\n)/);\n    list.forEach(entry => {\n      const values = entry.split('|').map(value => value.trim());\n      if (values.length < 3) {\n        // Not enough data, ignore the entry.\n        return;\n      }\n      const lang = this.formatLanguage(values[2], \"app\" /* CoreLangFormat.App */); // Use the app format instead of Moodle format.\n      if (lang === this.currentLanguage) {\n        currentLangChanged = true;\n      }\n      if (!this.customStrings[lang]) {\n        this.customStrings[lang] = {};\n      }\n      this.loadString(this.customStrings, lang, values[0], values[1]);\n    });\n    this.customStringsRaw = strings;\n    if (currentLangChanged && this.currentLanguage) {\n      // Some lang strings have changed, emit an event to update the pipes.\n      Translate.onLangChange.emit({\n        lang: this.currentLanguage,\n        translations: Translate.translations[this.currentLanguage]\n      });\n    }\n  }\n  /**\n   * Load custom strings for a certain language that weren't loaded because the language wasn't active.\n   *\n   * @param langObject The object with the strings to load.\n   * @param lang Language to load.\n   * @returns Whether the translation table was modified.\n   */\n  loadLangStrings(langObject, lang) {\n    let langApplied = false;\n    if (langObject[lang]) {\n      for (const key in langObject[lang]) {\n        const entry = langObject[lang][key];\n        if (!entry.applied) {\n          // Store the original value of the string.\n          entry.original = Translate.translations[lang][key];\n          // Store the string in the translations table.\n          Translate.translations[lang][key] = entry.value;\n          entry.applied = true;\n          langApplied = true;\n        }\n      }\n    }\n    return langApplied;\n  }\n  /**\n   * Load a string in a certain lang object and in the translate table if the lang is loaded.\n   *\n   * @param langObject The object where to store the lang.\n   * @param lang Language code.\n   * @param key String key.\n   * @param value String value.\n   */\n  loadString(langObject, lang, key, value) {\n    lang = lang.replace(/_/g, '-'); // Use the app format instead of Moodle format.\n    if (Translate.translations[lang]) {\n      // The language is loaded.\n      // Store the original value of the string.\n      langObject[lang][key] = {\n        original: Translate.translations[lang][key],\n        value,\n        applied: true\n      };\n      // Store the string in the translations table.\n      Translate.translations[lang][key] = value;\n    } else {\n      // The language isn't loaded.\n      // Save it in our object but not in the translations table, it will be loaded when the lang is loaded.\n      langObject[lang][key] = {\n        value,\n        applied: false\n      };\n    }\n  }\n  /**\n   * Read a language file.\n   *\n   * @param lang Language code.\n   * @returns Promise resolved with the file contents.\n   */\n  readLangFile(lang) {\n    return _asyncToGenerator(function* () {\n      const observable = Http.get(`assets/lang/${lang}.json`, {\n        responseType: 'json'\n      });\n      return yield firstValueFrom(observable);\n    })();\n  }\n  /**\n   * Filter a multilang string.\n   *\n   * @param text Multilang string.\n   * @returns Filtered string.\n   */\n  filterMultilang(text) {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve(text).then(text => AddonFilterMultilangHandler.filter(text)).then(text => AddonFilterMultilang2Handler.filter(text));\n    })();\n  }\n  /**\n   * Unload custom or site plugin strings, removing them from the translations table.\n   *\n   * @param strings Strings to unload.\n   */\n  unloadStrings(strings) {\n    // Iterate over all languages and strings.\n    for (const lang in strings) {\n      if (!Translate.translations[lang]) {\n        // Language isn't loaded, nothing to unload.\n        continue;\n      }\n      const langStrings = strings[lang];\n      for (const key in langStrings) {\n        const entry = langStrings[key];\n        if (entry.original) {\n          // The string had a value, restore it.\n          Translate.translations[lang][key] = entry.original;\n        } else {\n          // The string didn't exist, delete it.\n          delete Translate.translations[lang][key];\n        }\n      }\n    }\n  }\n  /**\n   * Reload language strings for the current language.\n   */\n  reloadLanguageStrings() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const currentLanguage = _this7.currentLanguage;\n      if (!currentLanguage) {\n        return;\n      }\n      yield new Promise((resolve, reject) => {\n        CoreSubscriptions.once(Translate.use(currentLanguage), /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (data) {\n            // Check if it has a parent language.\n            const fallbackLang = _this7.getParentLanguage();\n            if (fallbackLang) {\n              try {\n                var _Translate$translatio;\n                // Merge parent translations with the child ones.\n                const parentTranslations = (_Translate$translatio = Translate.translations[fallbackLang]) !== null && _Translate$translatio !== void 0 ? _Translate$translatio : yield _this7.readLangFile(fallbackLang);\n                const mergedData = Object.assign(parentTranslations, data);\n                Object.assign(data, mergedData);\n              } catch (_unused2) {\n                // Ignore errors.\n              }\n            }\n            resolve(data);\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(), reject);\n      });\n    })();\n  }\n}\n_class = CoreLangProvider;\n_class.ɵfac = function CoreLangProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreLang = makeSingleton(CoreLangProvider);","map":{"version":3,"names":["CoreConstants","CoreAppProvider","CoreConfig","CoreSubscriptions","makeSingleton","Translate","Http","moment","CorePlatform","AddonFilterMultilangHandler","AddonFilterMultilang2Handler","firstValueFrom","CoreLogger","CoreLangProvider","constructor","fallbackLanguage","defaultLanguage","CONFIG","default_lang","customStrings","sitePluginsStrings","logger","getInstance","initialize","_this","_asyncToGenerator","setDefaultLang","use","onLangChange","subscribe","event","document","documentElement","setAttribute","lang","dir","instant","indexOf","initializeCurrentLanguage","_this2","ready","language","isAutomated","getCurrentLanguage","changeCurrentLanguage","addSitePluginsStrings","strings","prefix","replace","key","prefixedKey","value","loadString","capitalize","charAt","toUpperCase","slice","getMessage","_this3","_messages$key","messages","getMessages","Promise","resolve","once","getTranslation","getParentLanguage","parentLang","currentLanguage","_this4","_this4$currentLanguag","locale","previousLanguage","getDefaultLanguage","reloadLanguageStrings","set","error","loadLangStrings","emit","translations","clearCustomStrings","unloadStrings","customStringsRaw","clearSitePluginsStrings","getAllCustomStrings","getAllSitePluginsStrings","format","_this5","undefined","detectLanguage","formatLanguage","_this6","get","_unused","forcedefaultlanguage","preferredLanguage","navigator","toLowerCase","languages","substring","getFallbackLanguage","getMonthNames","months","map","month","getMonthShortNames","monthsShort","getDayNames","weekdays","weekDay","getDayShortNames","weekdaysShort","getTranslationTable","reject","observer","next","table","unsubscribe","err","loadCustomStringsFromSite","currentSite","getStoredConfig","loadCustomStrings","currentLangChanged","list","split","forEach","entry","values","trim","length","langObject","langApplied","applied","original","readLangFile","observable","responseType","filterMultilang","text","then","filter","langStrings","_this7","_ref","data","fallbackLang","_Translate$translatio","parentTranslations","mergedData","Object","assign","_unused2","_x","apply","arguments","factory","ɵfac","providedIn","CoreLang"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/lang.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreConstants } from '@/core/constants';\nimport { LangChangeEvent } from '@ngx-translate/core';\nimport { CoreAppProvider } from '@services/app';\nimport { CoreConfig } from '@services/config';\nimport { CoreSubscriptions } from '@singletons/subscriptions';\nimport { makeSingleton, Translate, Http } from '@singletons';\n\nimport moment from 'moment-timezone';\nimport { CoreSite } from '../classes/sites/site';\nimport { CorePlatform } from '@services/platform';\nimport { AddonFilterMultilangHandler } from '@addons/filter/multilang/services/handlers/multilang';\nimport { AddonFilterMultilang2Handler } from '@addons/filter/multilang2/services/handlers/multilang2';\nimport { firstValueFrom } from 'rxjs';\nimport { CoreLogger } from '@singletons/logger';\n\n/*\n * Service to handle language features, like changing the current language.\n*/\n@Injectable({ providedIn: 'root' })\nexport class CoreLangProvider {\n\n    protected fallbackLanguage = 'en'; // Always use English as fallback language since it contains all strings.\n    protected defaultLanguage = CoreConstants.CONFIG.default_lang || 'en'; // Lang to use if device lang not valid or is forced.\n    protected currentLanguage?: string; // Save current language in a variable to speed up the get function.\n    protected customStrings: CoreLanguageObject = {}; // Strings defined using the admin tool.\n    protected customStringsRaw?: string;\n    protected sitePluginsStrings: CoreLanguageObject = {}; // Strings defined by site plugins.\n    protected logger: CoreLogger;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreLang');\n    }\n\n    async initialize(): Promise<void> {\n        // Set fallback language and language to use until the app determines the right language to use.\n        Translate.setDefaultLang(this.fallbackLanguage);\n        Translate.use(this.defaultLanguage);\n\n        Translate.onLangChange.subscribe((event: LangChangeEvent) => {\n            document.documentElement.setAttribute('lang', event.lang);\n\n            let dir = Translate.instant('core.thisdirection');\n            dir = dir.indexOf('rtl') != -1 ? 'rtl' : 'ltr';\n            document.documentElement.setAttribute('dir', dir);\n        });\n\n        this.initializeCurrentLanguage();\n    }\n\n    /**\n     * Init language.\n     */\n    protected async initializeCurrentLanguage(): Promise<void> {\n        await CorePlatform.ready();\n\n        let language: string;\n\n        if (CoreAppProvider.isAutomated()) {\n            // Force current language to English when Behat is running.\n            language = 'en';\n        } else {\n            language = await this.getCurrentLanguage();\n        }\n\n        await this.changeCurrentLanguage(language);\n    }\n\n    /**\n     * Add a set of site plugins strings for a certain language.\n     *\n     * @param lang The language where to add the strings.\n     * @param strings Object with the strings to add.\n     * @param prefix A prefix to add to all keys.\n     */\n    addSitePluginsStrings(lang: string, strings: string[], prefix?: string): void {\n        lang = lang.replace(/_/g, '-'); // Use the app format instead of Moodle format.\n\n        // Initialize structure if it doesn't exist.\n        if (!this.sitePluginsStrings[lang]) {\n            this.sitePluginsStrings[lang] = {};\n        }\n\n        for (const key in strings) {\n            const prefixedKey = prefix + key;\n            let value = strings[key];\n\n            if (this.customStrings[lang] && this.customStrings[lang][prefixedKey]) {\n                // This string is overridden by a custom string, ignore it.\n                continue;\n            }\n\n            // Replace the way to access subproperties.\n            value = value.replace(/\\$a->/gm, '$a.');\n            // Add another curly bracket to string params ({$a} -> {{$a}}).\n            value = value.replace(/{([^ ]+)}/gm, '{{$1}}');\n            // Make sure we didn't add to many brackets in some case.\n            value = value.replace(/{{{([^ ]+)}}}/gm, '{{$1}}');\n\n            // Load the string.\n            this.loadString(this.sitePluginsStrings, lang, prefixedKey, value);\n        }\n    }\n\n    /**\n     * Capitalize a string (make the first letter uppercase).\n     * We cannot use a function from text utils because it would cause a circular dependency.\n     *\n     * @param value String to capitalize.\n     * @returns Capitalized string.\n     */\n    protected capitalize(value: string): string {\n        return value.charAt(0).toUpperCase() + value.slice(1);\n    }\n\n    /**\n     * Get message for the given language.\n     *\n     * @param key Message key.\n     * @param lang Language.\n     * @returns Message if found, null otherwise.\n     */\n    async getMessage(key: string, lang: string): Promise<string | null>  {\n        const messages = await this.getMessages(lang);\n\n        return messages[key] ?? null;\n    }\n\n    /**\n     * Get messages for the given language.\n     *\n     * @param lang Language.\n     * @returns Messages.\n     */\n    getMessages(lang: string): Promise<Record<string, string>> {\n        return new Promise(resolve => CoreSubscriptions.once(\n            Translate.getTranslation(lang),\n            messages => resolve(messages),\n            () => resolve({}),\n        ));\n    }\n\n    /**\n     * Get the parent language defined on the language strings.\n     *\n     * @returns If a parent language is set, return the index name.\n     */\n    getParentLanguage(): string | undefined {\n        const parentLang = Translate.instant('core.parentlanguage');\n        if (parentLang !== '' && parentLang !== 'core.parentlanguage' && parentLang !== this.currentLanguage) {\n            return parentLang;\n        }\n    }\n\n    /**\n     * Change current language.\n     *\n     * @param language New language to use.\n     * @returns Promise resolved when the change is finished.\n     */\n    async changeCurrentLanguage(language: string): Promise<void> {\n        // Use british english when parent english is loaded.\n        moment.locale(language == 'en' ? 'en-gb' : language);\n\n        const previousLanguage = this.currentLanguage ?? this.getDefaultLanguage();\n\n        this.currentLanguage = language;\n\n        try {\n            await this.reloadLanguageStrings();\n            await CoreConfig.set('current_language', language);\n        } catch (error) {\n            if (language !== previousLanguage) {\n                this.logger.error(`Language ${language} not available, reverting to ${previousLanguage}`, error);\n\n                return this.changeCurrentLanguage(previousLanguage);\n            }\n\n            throw error;\n        } finally {\n            // Load the custom and site plugins strings for the language.\n            if (this.loadLangStrings(this.customStrings, language) || this.loadLangStrings(this.sitePluginsStrings, language)) {\n                // Some lang strings have changed, emit an event to update the pipes.\n                Translate.onLangChange.emit({ lang: language, translations: Translate.translations[language] });\n            }\n        }\n    }\n\n    /**\n     * Clear current custom strings.\n     */\n    clearCustomStrings(): void {\n        this.unloadStrings(this.customStrings);\n        this.customStrings = {};\n        this.customStringsRaw = '';\n    }\n\n    /**\n     * Clear current site plugins strings.\n     */\n    clearSitePluginsStrings(): void {\n        this.unloadStrings(this.sitePluginsStrings);\n        this.sitePluginsStrings = {};\n    }\n\n    /**\n     * Get all current custom strings.\n     *\n     * @returns Custom strings.\n     */\n    getAllCustomStrings(): CoreLanguageObject {\n        return this.customStrings;\n    }\n\n    /**\n     * Get all current site plugins strings.\n     *\n     * @returns Site plugins strings.\n     */\n    getAllSitePluginsStrings(): CoreLanguageObject {\n        return this.sitePluginsStrings;\n    }\n\n    /**\n     * Get current language.\n     *\n     * @returns Promise resolved with the current language.\n     */\n    async getCurrentLanguage(format?: CoreLangFormat): Promise<string> {\n        if (this.currentLanguage === undefined) {\n            this.currentLanguage = await this.detectLanguage();\n        }\n\n        return format ? this.formatLanguage(this.currentLanguage, format) : this.currentLanguage;\n    }\n\n    /**\n     * Update a language code to the given format.\n     *\n     * @param lang Language code.\n     * @param format Format to use.\n     * @returns Formatted language code.\n     */\n    formatLanguage(lang: string, format: CoreLangFormat): string {\n        switch (format) {\n            case CoreLangFormat.App:\n                return lang.replace('_', '-');\n            case CoreLangFormat.LMS:\n                return lang.replace('-', '_');\n        }\n    }\n\n    /**\n     * Get the current language from settings, or detect the browser one.\n     *\n     * @returns Promise resolved with the selected language.\n     */\n    protected async detectLanguage(): Promise<string> {\n        // Get current language from config (user might have changed it).\n        try {\n            return await CoreConfig.get<string>('current_language');\n        } catch {\n            // Try will return, ignore errors here to avoid nesting.\n        }\n\n        // User hasn't defined a language. If default language is forced, use it.\n        if (CoreConstants.CONFIG.default_lang && CoreConstants.CONFIG.forcedefaultlanguage) {\n            return CoreConstants.CONFIG.default_lang;\n        }\n\n        // No forced language, try to get current language from browser.\n        let preferredLanguage = navigator.language.toLowerCase();\n        if (preferredLanguage.indexOf('-') > -1) {\n            // Language code defined by locale has a dash, like en-US or es-ES. Check if it's supported.\n            if (CoreConstants.CONFIG.languages && CoreConstants.CONFIG.languages[preferredLanguage] === undefined) {\n                // Code is NOT supported. Fallback to language without dash. E.g. 'en-US' would fallback to 'en'.\n                preferredLanguage = preferredLanguage.substring(0, preferredLanguage.indexOf('-'));\n            }\n        }\n\n        if (CoreConstants.CONFIG.languages[preferredLanguage] === undefined) {\n            // Language not supported, use default language.\n            return this.defaultLanguage;\n        }\n\n        return preferredLanguage;\n    }\n\n    /**\n     * Get the default language.\n     *\n     * @returns Default language.\n     */\n    getDefaultLanguage(): string {\n        return this.defaultLanguage;\n    }\n\n    /**\n     * Get the fallback language.\n     *\n     * @returns Fallback language.\n     */\n    getFallbackLanguage(): string {\n        return this.fallbackLanguage;\n    }\n\n    /**\n     * Get translated month names.\n     *\n     * @returns Translated month names.\n     */\n    getMonthNames(): string[] {\n        return moment.months().map(month => this.capitalize(month));\n    }\n\n    /**\n     * Get translated month short names.\n     *\n     * @returns Translated month short names.\n     */\n    getMonthShortNames(): string[] {\n        return moment.monthsShort().map(month => this.capitalize(month));\n    }\n\n    /**\n     * Get translated day names.\n     *\n     * @returns Translated day names.\n     */\n    getDayNames(): string[] {\n        return moment.weekdays().map(weekDay => this.capitalize(weekDay));\n    }\n\n    /**\n     * Get translated day short names.\n     *\n     * @returns Translated day short names.\n     */\n    getDayShortNames(): string[] {\n        return moment.weekdaysShort().map(weekDay => this.capitalize(weekDay));\n    }\n\n    /**\n     * Get the full list of translations for a certain language.\n     *\n     * @param lang The language to check.\n     * @returns Promise resolved when done.\n     */\n    getTranslationTable(lang: string): Promise<Record<string, unknown>> {\n        // Create a promise to convert the observable into a promise.\n        return new Promise((resolve, reject): void => {\n            const observer = Translate.getTranslation(lang).subscribe({\n                next: (table) => {\n                    resolve(table);\n                    observer.unsubscribe();\n                },\n                error: (err) => {\n                    reject(err);\n                    observer.unsubscribe();\n                },\n            });\n        });\n    }\n\n    /**\n     * Loads custom strings obtained from site.\n     *\n     * @param currentSite Current site object.\n     */\n    loadCustomStringsFromSite(currentSite: CoreSite): void {\n        const customStrings = currentSite.getStoredConfig('tool_mobile_customlangstrings');\n\n        if (customStrings !== undefined) {\n            this.loadCustomStrings(customStrings);\n        }\n    }\n\n    /**\n     * Load certain custom strings.\n     *\n     * @param strings Custom strings to load (tool_mobile_customlangstrings).\n     */\n    loadCustomStrings(strings: string): void {\n        if (strings === this.customStringsRaw) {\n            // Strings haven't changed, stop.\n            return;\n        }\n\n        // Reset current values.\n        this.clearCustomStrings();\n\n        if (!strings) {\n            return;\n        }\n\n        let currentLangChanged = false;\n\n        const list: string[] = strings.split(/(?:\\r\\n|\\r|\\n)/);\n        list.forEach((entry: string) => {\n            const values: string[] = entry.split('|').map(value => value.trim());\n\n            if (values.length < 3) {\n                // Not enough data, ignore the entry.\n                return;\n            }\n\n            const lang = this.formatLanguage(values[2], CoreLangFormat.App); // Use the app format instead of Moodle format.\n\n            if (lang === this.currentLanguage) {\n                currentLangChanged = true;\n            }\n\n            if (!this.customStrings[lang]) {\n                this.customStrings[lang] = {};\n            }\n\n            this.loadString(this.customStrings, lang, values[0], values[1]);\n        });\n\n        this.customStringsRaw = strings;\n\n        if (currentLangChanged && this.currentLanguage) {\n            // Some lang strings have changed, emit an event to update the pipes.\n            Translate.onLangChange.emit({\n                lang: this.currentLanguage,\n                translations: Translate.translations[this.currentLanguage],\n            });\n        }\n    }\n\n    /**\n     * Load custom strings for a certain language that weren't loaded because the language wasn't active.\n     *\n     * @param langObject The object with the strings to load.\n     * @param lang Language to load.\n     * @returns Whether the translation table was modified.\n     */\n    loadLangStrings(langObject: CoreLanguageObject, lang: string): boolean {\n        let langApplied = false;\n\n        if (langObject[lang]) {\n            for (const key in langObject[lang]) {\n                const entry = langObject[lang][key];\n\n                if (!entry.applied) {\n                    // Store the original value of the string.\n                    entry.original = Translate.translations[lang][key];\n\n                    // Store the string in the translations table.\n                    Translate.translations[lang][key] = entry.value;\n\n                    entry.applied = true;\n                    langApplied = true;\n                }\n            }\n        }\n\n        return langApplied;\n    }\n\n    /**\n     * Load a string in a certain lang object and in the translate table if the lang is loaded.\n     *\n     * @param langObject The object where to store the lang.\n     * @param lang Language code.\n     * @param key String key.\n     * @param value String value.\n     */\n    loadString(langObject: CoreLanguageObject, lang: string, key: string, value: string): void {\n        lang = lang.replace(/_/g, '-'); // Use the app format instead of Moodle format.\n\n        if (Translate.translations[lang]) {\n            // The language is loaded.\n            // Store the original value of the string.\n            langObject[lang][key] = {\n                original: Translate.translations[lang][key],\n                value,\n                applied: true,\n            };\n\n            // Store the string in the translations table.\n            Translate.translations[lang][key] = value;\n        } else {\n            // The language isn't loaded.\n            // Save it in our object but not in the translations table, it will be loaded when the lang is loaded.\n            langObject[lang][key] = {\n                value,\n                applied: false,\n            };\n        }\n    }\n\n    /**\n     * Read a language file.\n     *\n     * @param lang Language code.\n     * @returns Promise resolved with the file contents.\n     */\n    async readLangFile(lang: CoreLangLanguage): Promise<Record<string, string>> {\n        const observable = Http.get(`assets/lang/${lang}.json`, {\n            responseType: 'json',\n        });\n\n        return <Record<string, string>> await firstValueFrom(observable);\n    }\n\n    /**\n     * Filter a multilang string.\n     *\n     * @param text Multilang string.\n     * @returns Filtered string.\n     */\n    async filterMultilang(text: string): Promise<string> {\n        return Promise.resolve(text)\n            .then(text => AddonFilterMultilangHandler.filter(text))\n            .then(text => AddonFilterMultilang2Handler.filter(text));\n    }\n\n    /**\n     * Unload custom or site plugin strings, removing them from the translations table.\n     *\n     * @param strings Strings to unload.\n     */\n    protected unloadStrings(strings: CoreLanguageObject): void {\n        // Iterate over all languages and strings.\n        for (const lang in strings) {\n            if (!Translate.translations[lang]) {\n                // Language isn't loaded, nothing to unload.\n                continue;\n            }\n\n            const langStrings = strings[lang];\n            for (const key in langStrings) {\n                const entry = langStrings[key];\n                if (entry.original) {\n                    // The string had a value, restore it.\n                    Translate.translations[lang][key] = entry.original;\n                } else {\n                    // The string didn't exist, delete it.\n                    delete Translate.translations[lang][key];\n                }\n            }\n        }\n    }\n\n    /**\n     * Reload language strings for the current language.\n     */\n    protected async reloadLanguageStrings(): Promise<void> {\n        const currentLanguage = this.currentLanguage;\n\n        if (!currentLanguage) {\n            return;\n        }\n\n        await new Promise((resolve, reject) => {\n            CoreSubscriptions.once(Translate.use(currentLanguage), async data => {\n                // Check if it has a parent language.\n                const fallbackLang = this.getParentLanguage();\n\n                if (fallbackLang) {\n                    try {\n                        // Merge parent translations with the child ones.\n                        const parentTranslations = Translate.translations[fallbackLang] ?? await this.readLangFile(fallbackLang);\n\n                        const mergedData = Object.assign(parentTranslations, data);\n\n                        Object.assign(data, mergedData);\n                    } catch {\n                        // Ignore errors.\n                    }\n                }\n\n                resolve(data);\n            }, reject);\n        });\n    }\n\n}\n\nexport const CoreLang = makeSingleton(CoreLangProvider);\n\nexport const enum CoreLangFormat {\n    LMS = 'lms',\n    App = 'app'\n}\n\n/**\n * Language code. E.g. 'au', 'es', etc.\n */\nexport type CoreLangLanguage = string;\n\n/**\n * Language object has two leves, first per language and second per string key.\n */\ntype CoreLanguageObject = {\n    [s: string]: { // Lang name.\n        [s: string]: { // String key.\n            value: string; // Value with replacings done.\n            original?: string; // Original value of the string.\n            applied?: boolean; // If the key is applied to the translations table or not.\n        };\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}