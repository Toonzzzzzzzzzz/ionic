{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreSync } from '@services/sync';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreForms } from '@singletons/form';\nimport { AddonModWiki, AddonModWikiProvider } from '../../services/wiki';\nimport { AddonModWikiOffline } from '../../services/wiki-offline';\nimport { AddonModWikiSync } from '../../services/wiki-sync';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../../core/components/loading/loading\";\nimport * as i4 from \"../../../../../core/directives/format-text\";\nimport * as i5 from \"../../../../../core/directives/content\";\nimport * as i6 from \"../../../../../core/directives/update-non-reactive-attributes\";\nimport * as i7 from \"@ionic/angular\";\nimport * as i8 from \"../../../../../core/features/editor/components/rich-text-editor/rich-text-editor\";\nimport * as i9 from \"@ngx-translate/core\";\nconst _c0 = [\"editPageForm\"];\nfunction AddonModWikiEditPage_form_14_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 13)(1, \"ion-label\", 10);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"ion-input\", 14);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, \"addon.mod_wiki.newpagetitle\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(5, 4, \"addon.mod_wiki.newpagetitle\"));\n  }\n}\nfunction AddonModWikiEditPage_form_14_ion_item_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 15)(1, \"ion-label\")(2, \"ion-badge\", 16);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 1, \"addon.mod_wiki.wrongversionlock\"));\n  }\n}\nfunction AddonModWikiEditPage_form_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"form\", 7, 8);\n    i0.ɵɵtemplate(2, AddonModWikiEditPage_form_14_ion_item_2_Template, 6, 6, \"ion-item\", 9);\n    i0.ɵɵelementStart(3, \"ion-item\")(4, \"ion-label\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"core-rich-text-editor\", 11);\n    i0.ɵɵpipe(8, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, AddonModWikiEditPage_form_14_ion_item_9_Template, 5, 3, \"ion-item\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.pageForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.canEditTitle);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 11, \"core.content\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.contentControl)(\"placeholder\", i0.ɵɵpipeBind1(8, 13, \"core.content\"))(\"component\", ctx_r0.component)(\"componentId\", ctx_r0.cmId)(\"autoSave\", true)(\"contextInstanceId\", ctx_r0.cmId)(\"draftExtraParams\", ctx_r0.editorExtraParams);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.wrongVersionLock);\n  }\n}\n/**\n * Page that allows adding or editing a wiki page.\n */\nexport class AddonModWikiEditPage {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.canEditTitle = false; // Whether title can be edited.\n    this.loaded = false; // Whether the data has been loaded.\n    this.component = AddonModWikiProvider.COMPONENT; // Component to link the files to.\n    this.wrongVersionLock = false; // Whether the page lock doesn't match the initial one.\n    this.editorExtraParams = {};\n    this.editing = false; // Whether the user is editing a page (true) or creating a new one (false).\n    this.editOffline = false; // Whether the user is editing an offline page.\n    this.subwikiFiles = []; // List of files of the subwiki.\n    this.forceLeave = false; // To allow leaving the page without checking for changes.\n    this.isDestroyed = false; // Whether the page has been destroyed.\n    this.contentControl = this.formBuilder.control('');\n    this.pageForm = this.formBuilder.group({});\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.cmId = CoreNavigator.getRouteNumberParam('cmId') || undefined;\n      _this.courseId = CoreNavigator.getRouteNumberParam('courseId') || undefined;\n      _this.subwikiId = CoreNavigator.getRouteNumberParam('subwikiId');\n      _this.wikiId = CoreNavigator.getRouteNumberParam('wikiId');\n      _this.pageId = CoreNavigator.getRouteNumberParam('pageId');\n      _this.section = CoreNavigator.getRouteParam('section');\n      _this.groupId = CoreNavigator.getRouteNumberParam('groupId');\n      _this.userId = CoreNavigator.getRouteNumberParam('userId');\n      const pageTitle = CoreNavigator.getRouteParam('pageTitle');\n      _this.originalTitle = pageTitle ? CoreTextUtils.cleanTags(pageTitle.replace(/\\+/g, ' '), {\n        singleLine: true\n      }) : '';\n      _this.canEditTitle = !_this.originalTitle;\n      _this.title = _this.originalTitle ? Translate.instant('addon.mod_wiki.editingpage', {\n        $a: _this.originalTitle\n      }) : Translate.instant('addon.mod_wiki.newpagehdr');\n      _this.blockId = AddonModWikiSync.getSubwikiBlockId(_this.subwikiId, _this.wikiId, _this.userId, _this.groupId);\n      // Create the form group and its controls.\n      _this.pageForm.addControl('title', _this.formBuilder.control(_this.originalTitle));\n      _this.pageForm.addControl('text', _this.contentControl);\n      // Block the wiki so it cannot be synced.\n      CoreSync.blockOperation(_this.component, _this.blockId);\n      if (_this.pageId) {\n        _this.editorExtraParams.pageid = _this.pageId;\n        if (_this.section) {\n          _this.editorExtraParams.section = _this.section;\n        }\n      } else if (_this.originalTitle) {\n        _this.editorExtraParams.pagetitle = _this.originalTitle;\n      }\n      try {\n        const success = yield _this.fetchWikiPageData();\n        if (success && !_this.isDestroyed) {\n          // Block the subwiki now that we have blockId for sure.\n          const newBlockId = AddonModWikiSync.getSubwikiBlockId(_this.subwikiId, _this.wikiId, _this.userId, _this.groupId);\n          if (newBlockId !== _this.blockId) {\n            CoreSync.unblockOperation(_this.component, _this.blockId);\n            _this.blockId = newBlockId;\n            CoreSync.blockOperation(_this.component, _this.blockId);\n          }\n          _this.logView();\n        }\n      } finally {\n        _this.loaded = true;\n      }\n    })();\n  }\n  /**\n   * Convenience function to get wiki page data.\n   *\n   * @returns Promise resolved with boolean: whether it was successful.\n   */\n  fetchWikiPageData() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let canEdit = false;\n      let fetchFailed = false;\n      try {\n        // Wait for sync to be over (if any).\n        const syncResult = _this2.blockId ? yield AddonModWikiSync.waitForSync(_this2.blockId) : undefined;\n        if (_this2.pageId) {\n          // Editing a page that already exists.\n          _this2.canEditTitle = false;\n          _this2.editing = true;\n          _this2.editOffline = false; // Cannot edit pages in offline.\n          // Get page contents to obtain title and editing permission\n          const pageContents = yield AddonModWiki.getPageContents(_this2.pageId, {\n            cmId: _this2.cmId\n          });\n          _this2.pageForm.controls.title.setValue(pageContents.title); // Set the title in the form group.\n          _this2.wikiId = pageContents.wikiid;\n          _this2.subwikiId = pageContents.subwikiid;\n          _this2.title = Translate.instant('addon.mod_wiki.editingpage', {\n            $a: pageContents.title\n          });\n          _this2.originalTitle = pageContents.title;\n          _this2.groupId = pageContents.groupid;\n          _this2.userId = pageContents.userid;\n          canEdit = pageContents.caneditpage;\n          yield _this2.fetchModuleAndCourseId();\n          // Get subwiki files, needed to replace URLs for rich text editor.\n          _this2.subwikiFiles = yield AddonModWiki.getSubwikiFiles(_this2.wikiId, {\n            groupId: _this2.groupId,\n            userId: _this2.userId,\n            cmId: _this2.cmId\n          });\n          // Get editable text of the page/section.\n          const editContents = yield AddonModWiki.getPageForEditing(_this2.pageId, _this2.section);\n          // Get the original page contents, treating file URLs if needed.\n          const content = CoreTextUtils.replacePluginfileUrls(editContents.content || '', _this2.subwikiFiles);\n          _this2.contentControl.setValue(content);\n          _this2.originalContent = content;\n          _this2.version = editContents.version;\n          if (canEdit) {\n            // Renew the lock every certain time.\n            _this2.renewLockInterval = window.setInterval(() => {\n              _this2.renewLock();\n            }, AddonModWikiProvider.RENEW_LOCK_TIME);\n          }\n        } else {\n          const pageTitle = _this2.pageForm.controls.title.value;\n          _this2.editing = false;\n          canEdit = !!_this2.blockId; // If no blockId, the user cannot edit the page.\n          yield _this2.fetchModuleAndCourseId();\n          // Try to get wikiId.\n          if (!_this2.wikiId && _this2.cmId && _this2.courseId) {\n            const module = yield CoreCourse.getModule(_this2.cmId, _this2.courseId, undefined, true);\n            _this2.wikiId = module.instance;\n          }\n          if (pageTitle) {\n            // Title is set, it could be editing an offline page or creating a new page using an edit link.\n            // First of all, verify if this page was created in the current sync.\n            if (syncResult) {\n              const page = syncResult.created.find(page => page.title == pageTitle);\n              if (page && page.pageId > 0) {\n                // Page was created, now it exists in the site.\n                _this2.pageId = page.pageId;\n                return _this2.fetchWikiPageData();\n              }\n            }\n            // Check if there's already some offline data for this page.\n            const page = yield CoreUtils.ignoreErrors(AddonModWikiOffline.getNewPage(pageTitle, _this2.subwikiId, _this2.wikiId, _this2.userId, _this2.groupId));\n            if (page) {\n              // Load offline content.\n              _this2.contentControl.setValue(page.cachedcontent);\n              _this2.originalContent = page.cachedcontent;\n              _this2.editOffline = true;\n            } else {\n              // No offline data found.\n              _this2.editOffline = false;\n            }\n          } else {\n            _this2.editOffline = false;\n          }\n        }\n        return true;\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error getting wiki data.');\n        fetchFailed = true;\n        // Go back.\n        _this2.forceLeavePage();\n        return false;\n      } finally {\n        if (!canEdit && !fetchFailed) {\n          // Cannot edit, show alert and go back.\n          CoreDomUtils.showAlert(Translate.instant('core.notice'), Translate.instant('addon.mod_wiki.cannoteditpage'));\n          _this2.forceLeavePage();\n        }\n      }\n    })();\n  }\n  /**\n   * Load cmId and courseId if they aren't set.\n   *\n   * @returns Promise.\n   */\n  fetchModuleAndCourseId() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.wikiId || _this3.cmId && _this3.courseId) {\n        return;\n      }\n      const module = yield CoreCourse.getModuleBasicInfoByInstance(_this3.wikiId, 'wiki', {\n        readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n      });\n      _this3.cmId = module.id;\n      _this3.courseId = module.course;\n    })();\n  }\n  /**\n   * Force leaving the page, without checking for changes.\n   */\n  forceLeavePage() {\n    this.forceLeave = true;\n    CoreNavigator.back();\n  }\n  /**\n   * Navigate to a page.\n   *\n   * @param title Page title.\n   */\n  goToPage(title) {\n    if (!this.wikiId) {\n      return;\n    }\n    // Not the firstpage.\n    AddonModWiki.setEditedPageData({\n      cmId: this.cmId,\n      courseId: this.courseId,\n      pageId: this.pageId,\n      pageTitle: title,\n      wikiId: this.wikiId,\n      subwikiId: this.subwikiId,\n      userId: this.userId,\n      groupId: this.groupId\n    });\n    this.forceLeavePage();\n  }\n  /**\n   * Check if data has changed.\n   *\n   * @returns Whether data has changed.\n   */\n  hasDataChanged() {\n    const values = this.pageForm.value;\n    return !(this.originalContent == values.text || !this.editing && !values.text && !values.title);\n  }\n  /**\n   * @inheritdoc\n   */\n  canLeave() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.forceLeave) {\n        return true;\n      }\n      // Check if data has changed.\n      if (_this4.hasDataChanged()) {\n        yield CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n      }\n      CoreForms.triggerFormCancelledEvent(_this4.formElement, CoreSites.getCurrentSiteId());\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ionViewDidLeave() {\n    // When going back, the ionViewDidEnter of the previous page should be called before this ionViewDidLeave.\n    // But just in case, use a timeout to make sure it does.\n    setTimeout(() => {\n      // Remove the edited page data (if any) if the previous page isn't a wiki page.\n      AddonModWiki.consumeEditedPageData();\n    }, 200);\n  }\n  /**\n   * Save the data.\n   *\n   * @returns Promise resolved when done.\n   */\n  save() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var _values$text;\n      const values = _this5.pageForm.value;\n      const title = values.title;\n      let text = (_values$text = values.text) !== null && _values$text !== void 0 ? _values$text : '';\n      const modal = yield CoreDomUtils.showModalLoading('core.sending', true);\n      text = CoreTextUtils.restorePluginfileUrls(text, _this5.subwikiFiles);\n      text = CoreTextUtils.formatHtmlLines(text);\n      try {\n        if (_this5.editing && _this5.pageId) {\n          // Edit existing page.\n          yield AddonModWiki.editPage(_this5.pageId, text, _this5.section);\n          CoreForms.triggerFormSubmittedEvent(_this5.formElement, true, CoreSites.getCurrentSiteId());\n          // Invalidate page since it changed.\n          yield AddonModWiki.invalidatePage(_this5.pageId);\n          return _this5.goToPage(title);\n        }\n        // Creating a new page.\n        if (!title) {\n          // Title is mandatory, stop.\n          modal.dismiss();\n          CoreDomUtils.showAlert(Translate.instant('core.notice'), Translate.instant('addon.mod_wiki.titleshouldnotbeempty'));\n          return;\n        }\n        if (!_this5.editOffline) {\n          // Check if the user has an offline page with the same title.\n          const page = yield CoreUtils.ignoreErrors(AddonModWikiOffline.getNewPage(title, _this5.subwikiId, _this5.wikiId, _this5.userId, _this5.groupId));\n          if (page) {\n            // There's a page with same title, reject with error message.\n            throw new CoreError(Translate.instant('addon.mod_wiki.pageexists'));\n          }\n        }\n        // Try to send the page.\n        const id = yield AddonModWiki.newPage(title, text, {\n          subwikiId: _this5.subwikiId,\n          wikiId: _this5.wikiId,\n          userId: _this5.userId,\n          groupId: _this5.groupId,\n          cmId: _this5.cmId\n        });\n        CoreForms.triggerFormSubmittedEvent(_this5.formElement, id > 0, CoreSites.getCurrentSiteId());\n        if (id <= 0) {\n          // Page stored in offline. Go to see the offline page.\n          return _this5.goToPage(title);\n        }\n        // Page was created, get its data and go to the page.\n        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, {\n          module: 'wiki'\n        });\n        _this5.pageId = id;\n        const pageContents = yield AddonModWiki.getPageContents(_this5.pageId, {\n          cmId: _this5.cmId\n        });\n        const promises = [];\n        _this5.wikiId = pageContents.wikiid;\n        // Invalidate subwiki pages since there are new.\n        promises.push(AddonModWiki.invalidateSubwikiPages(_this5.wikiId));\n        if (!_this5.subwikiId) {\n          // Subwiki was not created, invalidate subwikis as well.\n          promises.push(AddonModWiki.invalidateSubwikis(_this5.wikiId));\n        }\n        _this5.subwikiId = pageContents.subwikiid;\n        _this5.userId = pageContents.userid;\n        _this5.groupId = pageContents.groupid;\n        yield CoreUtils.ignoreErrors(Promise.all(promises));\n        // Notify page created.\n        CoreEvents.trigger(AddonModWikiProvider.PAGE_CREATED_EVENT, {\n          pageId: _this5.pageId,\n          subwikiId: _this5.subwikiId,\n          pageTitle: title\n        }, CoreSites.getCurrentSiteId());\n        _this5.goToPage(title);\n      } catch (error) {\n        CoreDomUtils.showErrorModalDefault(error, 'Error saving wiki data.');\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  /**\n   * Renew lock and control versions.\n   */\n  renewLock() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this6.pageId) {\n        return;\n      }\n      const response = yield AddonModWiki.getPageForEditing(_this6.pageId, _this6.section, true);\n      if (response.version && _this6.version != response.version) {\n        _this6.wrongVersionLock = true;\n      }\n    })();\n  }\n  /**\n   * Log view.\n   */\n  logView() {\n    var _this$originalTitle;\n    let url;\n    if (this.pageId) {\n      url = `/mod/wiki/edit.php?pageid=${this.pageId}` + (this.section ? `&section=${this.section.replace(/ /g, '+')}` : '');\n    } else if (this.originalTitle) {\n      const title = this.originalTitle.replace(/ /g, '+');\n      if (this.subwikiId) {\n        url = `/mod/wiki/create.php?swid=${this.subwikiId}&title=${title}&action=new`;\n      } else {\n        var _this$groupId, _this$userId;\n        url = `/mod/wiki/create.php?wid=${this.wikiId}&group=${(_this$groupId = this.groupId) !== null && _this$groupId !== void 0 ? _this$groupId : 0}&uid=${(_this$userId = this.userId) !== null && _this$userId !== void 0 ? _this$userId : 0}&title=${title}`;\n      }\n    } else {\n      url = `/mod/wiki/create.php?action=new&wid=${this.wikiId}&swid=${this.subwikiId}`;\n    }\n    CoreAnalytics.logEvent({\n      type: CoreAnalyticsEventType.VIEW_ITEM,\n      ws: this.pageId ? 'mod_wiki_edit_page' : 'mod_wiki_new_page',\n      name: (_this$originalTitle = this.originalTitle) !== null && _this$originalTitle !== void 0 ? _this$originalTitle : Translate.instant('addon.mod_wiki.newpagehdr'),\n      data: {\n        id: this.wikiId,\n        subwiki: this.subwikiId,\n        category: 'wiki'\n      },\n      url\n    });\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    this.isDestroyed = true;\n    clearInterval(this.renewLockInterval);\n    // Unblock the subwiki.\n    if (this.blockId) {\n      CoreSync.unblockOperation(this.component, this.blockId);\n    }\n  }\n}\n_class = AddonModWikiEditPage;\n_class.ɵfac = function AddonModWikiEditPage_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-mod-wiki-edit\"]],\n  viewQuery: function AddonModWikiEditPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formElement = _t.first);\n    }\n  },\n  decls: 15,\n  vars: 11,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [\"slot\", \"end\"], [\"fill\", \"clear\", 3, \"click\"], [3, \"hideUntil\"], [3, \"formGroup\", 4, \"ngIf\"], [3, \"formGroup\"], [\"editPageForm\", \"\"], [\"class\", \"ion-text-wrap\", 4, \"ngIf\"], [1, \"sr-only\"], [\"name\", \"wiki_page_content\", \"contextLevel\", \"module\", \"elementId\", \"newcontent_editor\", 3, \"control\", \"placeholder\", \"component\", \"componentId\", \"autoSave\", \"contextInstanceId\", \"draftExtraParams\"], [\"class\", \"ion-text-center addon-mod_wiki-wrongversionlock\", 4, \"ngIf\"], [1, \"ion-text-wrap\"], [\"name\", \"title\", \"type\", \"text\", \"formControlName\", \"title\", 3, \"placeholder\"], [1, \"ion-text-center\", \"addon-mod_wiki-wrongversionlock\"], [\"color\", \"danger\", 1, \"ion-padding\"]],\n  template: function AddonModWikiEditPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵelement(7, \"core-format-text\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"ion-buttons\", 3)(9, \"ion-button\", 4);\n      i0.ɵɵlistener(\"click\", function AddonModWikiEditPage_Template_ion_button_click_9_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(10);\n      i0.ɵɵpipe(11, \"translate\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(12, \"ion-content\")(13, \"core-loading\", 5);\n      i0.ɵɵtemplate(14, AddonModWikiEditPage_form_14_Template, 10, 15, \"form\", 6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 7, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"text\", ctx.title)(\"contextInstanceId\", ctx.cmId)(\"courseId\", ctx.courseId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(11, 9, \"core.save\"), \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"hideUntil\", ctx.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n    }\n  },\n  dependencies: [i2.NgIf, i3.CoreLoadingComponent, i4.CoreFormatTextDirective, i5.CoreContentDirective, i6.CoreUpdateNonReactiveAttributesDirective, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i7.IonBadge, i7.IonButton, i7.IonButtons, i7.IonContent, i7.IonHeader, i7.IonInput, i7.IonItem, i7.IonLabel, i7.IonTitle, i7.IonToolbar, i7.TextValueAccessor, i7.IonBackButton, i1.FormGroupDirective, i1.FormControlName, i8.CoreEditorRichTextEditorComponent, i9.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["CoreError","CoreCourse","CoreNavigator","CoreSites","CoreSync","CoreDomUtils","CoreTextUtils","CoreUtils","Translate","CoreEvents","CoreForms","AddonModWiki","AddonModWikiProvider","AddonModWikiOffline","AddonModWikiSync","CoreAnalytics","CoreAnalyticsEventType","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","ɵɵproperty","ɵɵtemplate","AddonModWikiEditPage_form_14_ion_item_2_Template","AddonModWikiEditPage_form_14_ion_item_9_Template","ctx_r0","pageForm","canEditTitle","contentControl","component","cmId","editorExtraParams","wrongVersionLock","AddonModWikiEditPage","constructor","formBuilder","loaded","COMPONENT","editing","editOffline","subwikiFiles","forceLeave","isDestroyed","control","group","ngOnInit","_this","_asyncToGenerator","getRouteNumberParam","undefined","courseId","subwikiId","wikiId","pageId","section","getRouteParam","groupId","userId","pageTitle","originalTitle","cleanTags","replace","singleLine","title","instant","$a","blockId","getSubwikiBlockId","addControl","blockOperation","pageid","pagetitle","success","fetchWikiPageData","newBlockId","unblockOperation","logView","_this2","canEdit","fetchFailed","syncResult","waitForSync","pageContents","getPageContents","controls","setValue","wikiid","subwikiid","groupid","userid","caneditpage","fetchModuleAndCourseId","getSubwikiFiles","editContents","getPageForEditing","content","replacePluginfileUrls","originalContent","version","renewLockInterval","window","setInterval","renewLock","RENEW_LOCK_TIME","value","module","getModule","instance","page","created","find","ignoreErrors","getNewPage","cachedcontent","error","showErrorModalDefault","forceLeavePage","showAlert","_this3","getModuleBasicInfoByInstance","readingStrategy","id","course","back","goToPage","setEditedPageData","hasDataChanged","values","text","canLeave","_this4","showConfirm","triggerFormCancelledEvent","formElement","getCurrentSiteId","ionViewDidLeave","setTimeout","consumeEditedPageData","save","_this5","_values$text","modal","showModalLoading","restorePluginfileUrls","formatHtmlLines","editPage","triggerFormSubmittedEvent","invalidatePage","dismiss","newPage","trigger","ACTIVITY_DATA_SENT","promises","push","invalidateSubwikiPages","invalidateSubwikis","Promise","all","PAGE_CREATED_EVENT","_this6","response","_this$originalTitle","url","_this$groupId","_this$userId","logEvent","type","VIEW_ITEM","ws","name","data","subwiki","category","ngOnDestroy","clearInterval","ɵɵdirectiveInject","i1","FormBuilder","selectors","viewQuery","AddonModWikiEditPage_Query","rf","ctx","ɵɵlistener","AddonModWikiEditPage_Template_ion_button_click_9_listener","AddonModWikiEditPage_form_14_Template","ɵɵtextInterpolate1"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/wiki/pages/edit/edit.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/wiki/pages/edit/edit.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CanLeave } from '@guards/can-leave';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreSync } from '@services/sync';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSFile } from '@services/ws';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreForms } from '@singletons/form';\nimport { AddonModWiki, AddonModWikiProvider } from '../../services/wiki';\nimport { AddonModWikiOffline } from '../../services/wiki-offline';\nimport { AddonModWikiSync } from '../../services/wiki-sync';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that allows adding or editing a wiki page.\n */\n@Component({\n    selector: 'page-addon-mod-wiki-edit',\n    templateUrl: 'edit.html',\n})\nexport class AddonModWikiEditPage implements OnInit, OnDestroy, CanLeave {\n\n    @ViewChild('editPageForm') formElement?: ElementRef;\n\n    cmId?: number; // Course module ID.\n    courseId?: number; // Course the wiki belongs to.\n    title?: string; // Title to display.\n    pageForm: FormGroup; // The form group.\n    contentControl: FormControl; // The FormControl for the page content.\n    canEditTitle = false; // Whether title can be edited.\n    loaded = false; // Whether the data has been loaded.\n    component = AddonModWikiProvider.COMPONENT; // Component to link the files to.\n    wrongVersionLock = false; // Whether the page lock doesn't match the initial one.\n    editorExtraParams: Record<string, unknown> = {};\n\n    protected subwikiId?: number; // Subwiki ID the page belongs to.\n    protected wikiId?: number; // Wiki ID the page belongs to.\n    protected pageId?: number; // The page ID (if editing a page).\n    protected section?: string; // The section being edited.\n    protected groupId?: number; // The group the subwiki belongs to.\n    protected userId?: number; // The user the subwiki belongs to.\n    protected blockId?: string; // ID to block the subwiki.\n    protected editing = false; // Whether the user is editing a page (true) or creating a new one (false).\n    protected editOffline = false; // Whether the user is editing an offline page.\n    protected subwikiFiles: CoreWSFile[] = []; // List of files of the subwiki.\n    protected originalContent?: string; // The original page content.\n    protected originalTitle?: string; // The original page title.\n    protected version?: number; // Page version.\n    protected renewLockInterval?: number; // An interval to renew the lock every certain time.\n    protected forceLeave = false; // To allow leaving the page without checking for changes.\n    protected isDestroyed = false; // Whether the page has been destroyed.\n\n    constructor(\n        protected formBuilder: FormBuilder,\n    ) {\n        this.contentControl = this.formBuilder.control('');\n        this.pageForm = this.formBuilder.group({});\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId') || undefined;\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId') || undefined;\n        this.subwikiId = CoreNavigator.getRouteNumberParam('subwikiId');\n        this.wikiId = CoreNavigator.getRouteNumberParam('wikiId');\n        this.pageId = CoreNavigator.getRouteNumberParam('pageId');\n        this.section = CoreNavigator.getRouteParam('section');\n        this.groupId = CoreNavigator.getRouteNumberParam('groupId');\n        this.userId = CoreNavigator.getRouteNumberParam('userId');\n\n        const pageTitle = CoreNavigator.getRouteParam<string>('pageTitle');\n        this.originalTitle = pageTitle ? CoreTextUtils.cleanTags(pageTitle.replace(/\\+/g, ' '), { singleLine: true }) : '';\n\n        this.canEditTitle = !this.originalTitle;\n        this.title = this.originalTitle ?\n            Translate.instant('addon.mod_wiki.editingpage', { $a: this.originalTitle }) :\n            Translate.instant('addon.mod_wiki.newpagehdr');\n        this.blockId = AddonModWikiSync.getSubwikiBlockId(this.subwikiId, this.wikiId, this.userId, this.groupId);\n\n        // Create the form group and its controls.\n        this.pageForm.addControl('title', this.formBuilder.control(this.originalTitle));\n        this.pageForm.addControl('text', this.contentControl);\n\n        // Block the wiki so it cannot be synced.\n        CoreSync.blockOperation(this.component, this.blockId);\n\n        if (this.pageId) {\n            this.editorExtraParams.pageid = this.pageId;\n\n            if (this.section) {\n                this.editorExtraParams.section = this.section;\n            }\n        } else if (this.originalTitle) {\n            this.editorExtraParams.pagetitle = this.originalTitle;\n        }\n\n        try {\n            const success = await this.fetchWikiPageData();\n\n            if (success && !this.isDestroyed) {\n                // Block the subwiki now that we have blockId for sure.\n                const newBlockId = AddonModWikiSync.getSubwikiBlockId(this.subwikiId, this.wikiId, this.userId, this.groupId);\n                if (newBlockId !== this.blockId) {\n                    CoreSync.unblockOperation(this.component, this.blockId);\n                    this.blockId = newBlockId;\n                    CoreSync.blockOperation(this.component, this.blockId);\n                }\n\n                this.logView();\n            }\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Convenience function to get wiki page data.\n     *\n     * @returns Promise resolved with boolean: whether it was successful.\n     */\n    protected async fetchWikiPageData(): Promise<boolean> {\n        let canEdit = false;\n        let fetchFailed = false;\n\n        try {\n            // Wait for sync to be over (if any).\n            const syncResult = this.blockId ? await AddonModWikiSync.waitForSync(this.blockId) : undefined;\n\n            if (this.pageId) {\n                // Editing a page that already exists.\n                this.canEditTitle = false;\n                this.editing = true;\n                this.editOffline = false; // Cannot edit pages in offline.\n\n                // Get page contents to obtain title and editing permission\n                const pageContents = await AddonModWiki.getPageContents(this.pageId, { cmId: this.cmId });\n\n                this.pageForm.controls.title.setValue(pageContents.title); // Set the title in the form group.\n                this.wikiId = pageContents.wikiid;\n                this.subwikiId = pageContents.subwikiid;\n                this.title = Translate.instant('addon.mod_wiki.editingpage', { $a: pageContents.title });\n                this.originalTitle = pageContents.title;\n                this.groupId = pageContents.groupid;\n                this.userId = pageContents.userid;\n                canEdit = pageContents.caneditpage;\n\n                await this.fetchModuleAndCourseId();\n\n                // Get subwiki files, needed to replace URLs for rich text editor.\n                this.subwikiFiles = await AddonModWiki.getSubwikiFiles(this.wikiId, {\n                    groupId: this.groupId,\n                    userId: this.userId,\n                    cmId: this.cmId,\n                });\n\n                // Get editable text of the page/section.\n                const editContents = await AddonModWiki.getPageForEditing(this.pageId, this.section);\n\n                // Get the original page contents, treating file URLs if needed.\n                const content = CoreTextUtils.replacePluginfileUrls(editContents.content || '', this.subwikiFiles);\n\n                this.contentControl.setValue(content);\n                this.originalContent = content;\n                this.version = editContents.version;\n\n                if (canEdit) {\n                    // Renew the lock every certain time.\n                    this.renewLockInterval = window.setInterval(() => {\n                        this.renewLock();\n                    }, AddonModWikiProvider.RENEW_LOCK_TIME);\n                }\n            } else {\n                const pageTitle = this.pageForm.controls.title.value;\n                this.editing = false;\n                canEdit = !!this.blockId; // If no blockId, the user cannot edit the page.\n\n                await this.fetchModuleAndCourseId();\n\n                // Try to get wikiId.\n                if (!this.wikiId && this.cmId && this.courseId) {\n                    const module = await CoreCourse.getModule(this.cmId, this.courseId, undefined, true);\n\n                    this.wikiId = module.instance;\n                }\n\n                if (pageTitle) {\n                    // Title is set, it could be editing an offline page or creating a new page using an edit link.\n                    // First of all, verify if this page was created in the current sync.\n                    if (syncResult) {\n                        const page = syncResult.created.find((page) => page.title == pageTitle);\n\n                        if (page && page.pageId > 0) {\n                            // Page was created, now it exists in the site.\n                            this.pageId = page.pageId;\n\n                            return this.fetchWikiPageData();\n                        }\n                    }\n\n                    // Check if there's already some offline data for this page.\n                    const page = await CoreUtils.ignoreErrors(\n                        AddonModWikiOffline.getNewPage(pageTitle, this.subwikiId, this.wikiId, this.userId, this.groupId),\n                    );\n\n                    if (page) {\n                        // Load offline content.\n                        this.contentControl.setValue(page.cachedcontent);\n                        this.originalContent = page.cachedcontent;\n                        this.editOffline = true;\n                    } else {\n                        // No offline data found.\n                        this.editOffline = false;\n                    }\n                } else {\n                    this.editOffline = false;\n                }\n            }\n\n            return true;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting wiki data.');\n            fetchFailed = true;\n\n            // Go back.\n            this.forceLeavePage();\n\n            return false;\n        } finally {\n            if (!canEdit && !fetchFailed) {\n                // Cannot edit, show alert and go back.\n                CoreDomUtils.showAlert(Translate.instant('core.notice'), Translate.instant('addon.mod_wiki.cannoteditpage'));\n                this.forceLeavePage();\n            }\n        }\n    }\n\n    /**\n     * Load cmId and courseId if they aren't set.\n     *\n     * @returns Promise.\n     */\n    protected async fetchModuleAndCourseId(): Promise<void> {\n        if (!this.wikiId || (this.cmId && this.courseId)) {\n            return;\n        }\n\n        const module = await CoreCourse.getModuleBasicInfoByInstance(\n            this.wikiId,\n            'wiki',\n            { readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE },\n        );\n\n        this.cmId = module.id;\n        this.courseId = module.course;\n    }\n\n    /**\n     * Force leaving the page, without checking for changes.\n     */\n    protected forceLeavePage(): void {\n        this.forceLeave = true;\n        CoreNavigator.back();\n    }\n\n    /**\n     * Navigate to a page.\n     *\n     * @param title Page title.\n     */\n    protected goToPage(title: string): void {\n        if (!this.wikiId) {\n            return;\n        }\n\n        // Not the firstpage.\n        AddonModWiki.setEditedPageData({\n            cmId: this.cmId,\n            courseId: this.courseId,\n            pageId: this.pageId,\n            pageTitle: title,\n            wikiId: this.wikiId,\n            subwikiId: this.subwikiId,\n            userId: this.userId,\n            groupId: this.groupId,\n        });\n\n        this.forceLeavePage();\n    }\n\n    /**\n     * Check if data has changed.\n     *\n     * @returns Whether data has changed.\n     */\n    protected hasDataChanged(): boolean {\n        const values = this.pageForm.value;\n\n        return !(this.originalContent == values.text || (!this.editing && !values.text && !values.title));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.forceLeave) {\n            return true;\n        }\n\n        // Check if data has changed.\n        if (this.hasDataChanged()) {\n            await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n        }\n\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ionViewDidLeave(): void {\n        // When going back, the ionViewDidEnter of the previous page should be called before this ionViewDidLeave.\n        // But just in case, use a timeout to make sure it does.\n        setTimeout(() => {\n            // Remove the edited page data (if any) if the previous page isn't a wiki page.\n            AddonModWiki.consumeEditedPageData();\n        }, 200);\n    }\n\n    /**\n     * Save the data.\n     *\n     * @returns Promise resolved when done.\n     */\n    async save(): Promise<void> {\n        const values = this.pageForm.value;\n        const title = values.title;\n        let text = values.text ?? '';\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n        text = CoreTextUtils.restorePluginfileUrls(text, this.subwikiFiles);\n        text = CoreTextUtils.formatHtmlLines(text);\n\n        try {\n            if (this.editing && this.pageId) {\n                // Edit existing page.\n                await AddonModWiki.editPage(this.pageId, text, this.section);\n\n                CoreForms.triggerFormSubmittedEvent(this.formElement, true, CoreSites.getCurrentSiteId());\n\n                // Invalidate page since it changed.\n                await AddonModWiki.invalidatePage(this.pageId);\n\n                return this.goToPage(title);\n            }\n\n            // Creating a new page.\n            if (!title) {\n                // Title is mandatory, stop.\n                modal.dismiss();\n                CoreDomUtils.showAlert(\n                    Translate.instant('core.notice'),\n                    Translate.instant('addon.mod_wiki.titleshouldnotbeempty'),\n                );\n\n                return;\n            }\n\n            if (!this.editOffline) {\n                // Check if the user has an offline page with the same title.\n                const page = await CoreUtils.ignoreErrors(\n                    AddonModWikiOffline.getNewPage(title, this.subwikiId, this.wikiId, this.userId, this.groupId),\n                );\n\n                if (page) {\n                    // There's a page with same title, reject with error message.\n                    throw new CoreError(Translate.instant('addon.mod_wiki.pageexists'));\n                }\n            }\n\n            // Try to send the page.\n            const id = await AddonModWiki.newPage(title, text, {\n                subwikiId: this.subwikiId,\n                wikiId: this.wikiId,\n                userId: this.userId,\n                groupId: this.groupId,\n                cmId: this.cmId,\n            });\n\n            CoreForms.triggerFormSubmittedEvent(this.formElement, id > 0, CoreSites.getCurrentSiteId());\n\n            if (id <= 0) {\n                // Page stored in offline. Go to see the offline page.\n                return this.goToPage(title);\n            }\n\n            // Page was created, get its data and go to the page.\n            CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'wiki' });\n            this.pageId = id;\n\n            const pageContents = await AddonModWiki.getPageContents(this.pageId, { cmId: this.cmId });\n\n            const promises: Promise<unknown>[] = [];\n            this.wikiId = pageContents.wikiid;\n\n            // Invalidate subwiki pages since there are new.\n            promises.push(AddonModWiki.invalidateSubwikiPages(this.wikiId));\n            if (!this.subwikiId) {\n                // Subwiki was not created, invalidate subwikis as well.\n                promises.push(AddonModWiki.invalidateSubwikis(this.wikiId));\n            }\n\n            this.subwikiId = pageContents.subwikiid;\n            this.userId = pageContents.userid;\n            this.groupId = pageContents.groupid;\n\n            await CoreUtils.ignoreErrors(Promise.all(promises));\n\n            // Notify page created.\n            CoreEvents.trigger(AddonModWikiProvider.PAGE_CREATED_EVENT, {\n                pageId: this.pageId,\n                subwikiId: this.subwikiId,\n                pageTitle: title,\n            }, CoreSites.getCurrentSiteId());\n\n            this.goToPage(title);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error saving wiki data.');\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Renew lock and control versions.\n     */\n    protected async renewLock(): Promise<void> {\n        if (!this.pageId) {\n            return;\n        }\n\n        const response = await AddonModWiki.getPageForEditing(this.pageId, this.section, true);\n\n        if (response.version && this.version != response.version) {\n            this.wrongVersionLock = true;\n        }\n    }\n\n    /**\n     * Log view.\n     */\n    protected logView(): void {\n        let url: string;\n        if (this.pageId) {\n            url = `/mod/wiki/edit.php?pageid=${this.pageId}` +\n                (this.section ? `&section=${this.section.replace(/ /g, '+')}` : '');\n        } else if (this.originalTitle) {\n            const title = this.originalTitle.replace(/ /g, '+');\n            if (this.subwikiId) {\n                url = `/mod/wiki/create.php?swid=${this.subwikiId}&title=${title}&action=new`;\n            } else {\n                url = `/mod/wiki/create.php?wid=${this.wikiId}&group=${this.groupId ?? 0}&uid=${this.userId ?? 0}&title=${title}`;\n            }\n        } else {\n            url = `/mod/wiki/create.php?action=new&wid=${this.wikiId}&swid=${this.subwikiId}`;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: this.pageId ? 'mod_wiki_edit_page' : 'mod_wiki_new_page',\n            name: this.originalTitle ?? Translate.instant('addon.mod_wiki.newpagehdr'),\n            data: { id: this.wikiId, subwiki: this.subwikiId, category: 'wiki' },\n            url,\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.isDestroyed = true;\n        clearInterval(this.renewLockInterval);\n\n        // Unblock the subwiki.\n        if (this.blockId) {\n            CoreSync.unblockOperation(this.component, this.blockId);\n        }\n    }\n\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>\n                <core-format-text [text]=\"title\" contextLevel=\"module\" [contextInstanceId]=\"cmId\" [courseId]=\"courseId\" />\n            </h1>\n        </ion-title>\n\n        <ion-buttons slot=\"end\">\n            <ion-button fill=\"clear\" (click)=\"save()\">\n                {{ 'core.save' | translate }}\n            </ion-button>\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <core-loading [hideUntil]=\"loaded\">\n        <form [formGroup]=\"pageForm\" #editPageForm *ngIf=\"loaded\">\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"canEditTitle\">\n                <ion-label class=\"sr-only\">{{ 'addon.mod_wiki.newpagetitle' | translate }}</ion-label>\n                <ion-input name=\"title\" type=\"text\" [placeholder]=\"'addon.mod_wiki.newpagetitle' | translate\" formControlName=\"title\" />\n            </ion-item>\n\n            <ion-item>\n                <ion-label class=\"sr-only\">{{ 'core.content' | translate }}</ion-label>\n                <core-rich-text-editor [control]=\"contentControl\" [placeholder]=\"'core.content' | translate\" name=\"wiki_page_content\"\n                    [component]=\"component\" [componentId]=\"cmId\" [autoSave]=\"true\" contextLevel=\"module\" [contextInstanceId]=\"cmId\"\n                    elementId=\"newcontent_editor\" [draftExtraParams]=\"editorExtraParams\" />\n            </ion-item>\n\n            <ion-item *ngIf=\"wrongVersionLock\" class=\"ion-text-center addon-mod_wiki-wrongversionlock\">\n                <ion-label>\n                    <ion-badge color=\"danger\" class=\"ion-padding\">{{ 'addon.mod_wiki.wrongversionlock' | translate }}</ion-badge>\n                </ion-label>\n            </ion-item>\n        </form>\n    </core-loading>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}