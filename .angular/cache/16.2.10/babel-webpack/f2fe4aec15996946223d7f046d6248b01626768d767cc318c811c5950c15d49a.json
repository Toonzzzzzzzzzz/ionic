{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonMessages } from '../messages';\nimport { AddonMessagesMainMenuHandlerService } from './mainmenu';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for messaging push notifications clicks.\n */\nexport class AddonMessagesPushClickHandlerService {\n  constructor() {\n    this.name = 'AddonMessagesPushClickHandler';\n    this.priority = 200;\n    this.featureName = 'CoreMainMenuDelegate_AddonMessages';\n  }\n  /**\n   * Check if a notification click is handled by this handler.\n   *\n   * @param notification The notification to check.\n   * @returns Whether the notification click is handled by this handler\n   */\n  handles(notification) {\n    return _asyncToGenerator(function* () {\n      if (CoreUtils.isTrueOrOne(notification.notif) && notification.name != 'messagecontactrequests') {\n        return false;\n      }\n      // Check that messaging is enabled.\n      return AddonMessages.isPluginEnabled(notification.site);\n    })();\n  }\n  /**\n   * Handle the notification click.\n   *\n   * @param notification The notification to check.\n   * @returns Promise resolved when done.\n   */\n  handleClick(notification) {\n    return _asyncToGenerator(function* () {\n      try {\n        yield AddonMessages.invalidateDiscussionsCache(notification.site);\n      } catch (_unused) {\n        // Ignore errors.\n      }\n      // Check if group messaging is enabled, to determine which page should be loaded.\n      const enabled = yield AddonMessages.isGroupMessagingEnabledInSite(notification.site);\n      let conversationId;\n      let userId;\n      // Check if we have enough information to open the conversation.\n      if (notification.convid && enabled) {\n        conversationId = Number(notification.convid);\n      } else if (notification.userfromid) {\n        userId = Number(notification.userfromid);\n      }\n      yield CoreNavigator.navigateToSitePath(AddonMessagesMainMenuHandlerService.PAGE_NAME, {\n        siteId: notification.site,\n        preferCurrentTab: false,\n        nextNavigation: conversationId ? {\n          path: `discussion/${conversationId}`\n        } : userId ? {\n          path: `discussion/user/${userId}`\n        } : undefined\n      });\n    })();\n  }\n}\n_class = AddonMessagesPushClickHandlerService;\n_class.ɵfac = function AddonMessagesPushClickHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonMessagesPushClickHandler = makeSingleton(AddonMessagesPushClickHandlerService);","map":{"version":3,"names":["CoreNavigator","CoreUtils","makeSingleton","AddonMessages","AddonMessagesMainMenuHandlerService","AddonMessagesPushClickHandlerService","constructor","name","priority","featureName","handles","notification","_asyncToGenerator","isTrueOrOne","notif","isPluginEnabled","site","handleClick","invalidateDiscussionsCache","_unused","enabled","isGroupMessagingEnabledInSite","conversationId","userId","convid","Number","userfromid","navigateToSitePath","PAGE_NAME","siteId","preferCurrentTab","nextNavigation","path","undefined","factory","ɵfac","providedIn","AddonMessagesPushClickHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/messages/services/handlers/push-click.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CorePushNotificationsClickHandler } from '@features/pushnotifications/services/push-delegate';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonMessages } from '../messages';\nimport { AddonMessagesMainMenuHandlerService } from './mainmenu';\n\n/**\n * Handler for messaging push notifications clicks.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonMessagesPushClickHandlerService implements CorePushNotificationsClickHandler {\n\n    name = 'AddonMessagesPushClickHandler';\n    priority = 200;\n    featureName = 'CoreMainMenuDelegate_AddonMessages';\n\n    /**\n     * Check if a notification click is handled by this handler.\n     *\n     * @param notification The notification to check.\n     * @returns Whether the notification click is handled by this handler\n     */\n    async handles(notification: AddonMessagesPushNotificationData): Promise<boolean> {\n        if (CoreUtils.isTrueOrOne(notification.notif) && notification.name != 'messagecontactrequests') {\n            return false;\n        }\n\n        // Check that messaging is enabled.\n        return AddonMessages.isPluginEnabled(notification.site);\n    }\n\n    /**\n     * Handle the notification click.\n     *\n     * @param notification The notification to check.\n     * @returns Promise resolved when done.\n     */\n    async handleClick(notification: AddonMessagesPushNotificationData): Promise<void> {\n        try {\n            await AddonMessages.invalidateDiscussionsCache(notification.site);\n        } catch {\n            // Ignore errors.\n        }\n\n        // Check if group messaging is enabled, to determine which page should be loaded.\n        const enabled = await AddonMessages.isGroupMessagingEnabledInSite(notification.site);\n\n        let conversationId: number | undefined;\n        let userId: number | undefined;\n\n        // Check if we have enough information to open the conversation.\n        if (notification.convid && enabled) {\n            conversationId = Number(notification.convid);\n        } else if (notification.userfromid) {\n            userId = Number(notification.userfromid);\n        }\n\n        await CoreNavigator.navigateToSitePath(AddonMessagesMainMenuHandlerService.PAGE_NAME, {\n            siteId: notification.site,\n            preferCurrentTab: false,\n            nextNavigation: conversationId ?\n                { path: `discussion/${conversationId}` } :\n                (userId ? { path: `discussion/user/${userId}` } : undefined),\n        });\n    }\n\n}\n\nexport const AddonMessagesPushClickHandler = makeSingleton(AddonMessagesPushClickHandlerService);\n\ntype AddonMessagesPushNotificationData = CorePushNotificationsNotificationBasicData & {\n    convid?: number; // Conversation Id.\n};\n"],"mappings":";;AAiBA,SAASA,aAAa,QAAQ,qBAAqB;AACnD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,mCAAmC,QAAQ,YAAY;;AAEhE;;;AAIA,OAAM,MAAOC,oCAAoC;EADjDC,YAAA;IAGI,KAAAC,IAAI,GAAG,+BAA+B;IACtC,KAAAC,QAAQ,GAAG,GAAG;IACd,KAAAC,WAAW,GAAG,oCAAoC;;EAElD;;;;;;EAMMC,OAAOA,CAACC,YAA+C;IAAA,OAAAC,iBAAA;MACzD,IAAIX,SAAS,CAACY,WAAW,CAACF,YAAY,CAACG,KAAK,CAAC,IAAIH,YAAY,CAACJ,IAAI,IAAI,wBAAwB,EAAE;QAC5F,OAAO,KAAK;;MAGhB;MACA,OAAOJ,aAAa,CAACY,eAAe,CAACJ,YAAY,CAACK,IAAI,CAAC;IAAC;EAC5D;EAEA;;;;;;EAMMC,WAAWA,CAACN,YAA+C;IAAA,OAAAC,iBAAA;MAC7D,IAAI;QACA,MAAMT,aAAa,CAACe,0BAA0B,CAACP,YAAY,CAACK,IAAI,CAAC;OACpE,CAAC,OAAAG,OAAA,EAAM;QACJ;MAAA;MAGJ;MACA,MAAMC,OAAO,SAASjB,aAAa,CAACkB,6BAA6B,CAACV,YAAY,CAACK,IAAI,CAAC;MAEpF,IAAIM,cAAkC;MACtC,IAAIC,MAA0B;MAE9B;MACA,IAAIZ,YAAY,CAACa,MAAM,IAAIJ,OAAO,EAAE;QAChCE,cAAc,GAAGG,MAAM,CAACd,YAAY,CAACa,MAAM,CAAC;OAC/C,MAAM,IAAIb,YAAY,CAACe,UAAU,EAAE;QAChCH,MAAM,GAAGE,MAAM,CAACd,YAAY,CAACe,UAAU,CAAC;;MAG5C,MAAM1B,aAAa,CAAC2B,kBAAkB,CAACvB,mCAAmC,CAACwB,SAAS,EAAE;QAClFC,MAAM,EAAElB,YAAY,CAACK,IAAI;QACzBc,gBAAgB,EAAE,KAAK;QACvBC,cAAc,EAAET,cAAc,GAC1B;UAAEU,IAAI,EAAE,cAAcV,cAAc;QAAE,CAAE,GACvCC,MAAM,GAAG;UAAES,IAAI,EAAE,mBAAmBT,MAAM;QAAE,CAAE,GAAGU;OACzD,CAAC;IAAC;EACP;;SAtDS5B,oCAAoC;;mBAApCA,MAAoC;AAAA;;SAApCA,MAAoC;EAAA6B,OAAA,EAApC7B,MAAoC,CAAA8B,IAAA;EAAAC,UAAA,EADvB;AAAM;AA2DhC,OAAO,MAAMC,6BAA6B,GAAGnC,aAAa,CAACG,oCAAoC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}