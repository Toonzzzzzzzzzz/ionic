{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreConstants } from '@/core/constants';\nimport { safeNumber } from '@/core/utils/types';\nimport { CoreCourseModuleMainActivityComponent } from '@features/course/classes/main-activity-component';\nimport { CoreQuestionBehaviourDelegate } from '@features/question/services/behaviour-delegate';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModQuizModuleHandlerService } from '../../services/handlers/module';\nimport { AddonModQuizPrefetchHandler } from '../../services/handlers/prefetch';\nimport { AddonModQuiz, AddonModQuizProvider } from '../../services/quiz';\nimport { AddonModQuizHelper } from '../../services/quiz-helper';\nimport { AddonModQuizSync, AddonModQuizSyncProvider } from '../../services/quiz-sync';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@features/course/pages/contents/contents\";\nfunction AddonModQuizIndexComponent_ion_card_6_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const rule_r9 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(rule_r9);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_6_ion_item_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"p\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 2, \"addon.mod_quiz.grademethod\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r6.gradeMethodReadable);\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    grade: a0,\n    maxgrade: a1\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    $a: a0\n  };\n};\nfunction AddonModQuizIndexComponent_ion_card_6_ion_item_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"p\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"translate\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 2, \"core.grades.gradepass\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 4, \"addon.mod_quiz.outof\", i0.ɵɵpureFunction1(10, _c1, i0.ɵɵpureFunction2(7, _c0, ctx_r7.bestGrade.gradetopass, ctx_r7.quiz.gradeFormatted))));\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_6_ion_item_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"p\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 2, \"core.lastsync\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r8.syncTime);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\")(1, \"ion-list\");\n    i0.ɵɵtemplate(2, AddonModQuizIndexComponent_ion_card_6_ion_item_2_Template, 4, 1, \"ion-item\", 8);\n    i0.ɵɵtemplate(3, AddonModQuizIndexComponent_ion_card_6_ion_item_3_Template, 7, 4, \"ion-item\", 9);\n    i0.ɵɵtemplate(4, AddonModQuizIndexComponent_ion_card_6_ion_item_4_Template, 8, 12, \"ion-item\", 9);\n    i0.ɵɵtemplate(5, AddonModQuizIndexComponent_ion_card_6_ion_item_5_Template, 7, 4, \"ion-item\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.accessRules);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.gradeMethodReadable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.bestGrade && ctx_r0.bestGrade.gradetopass && ctx_r0.quiz && ctx_r0.quiz.gradeFormatted);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.syncTime);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_7_ion_col_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-col\", 21)(1, \"strong\", 22);\n    i0.ɵɵtext(2, \"#\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 23);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"strong\", 24);\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 2, \"addon.mod_quiz.attemptnumber\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 4, \"addon.mod_quiz.attemptnumber\"));\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_7_ion_col_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-col\", 25)(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind1(3, 2, \"addon.mod_quiz.marks\"), \" / \", ctx_r11.quiz.sumGradesFormatted, \"\");\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_7_ion_col_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-col\", 21)(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind1(3, 2, \"addon.mod_quiz.grade\"), \" / \", ctx_r12.quiz.gradeFormatted, \"\");\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-col\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"addon.mod_quiz.preview\"), \" \");\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-col\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const attempt_r14 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", attempt_r14.attempt, \" \");\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_7_ion_item_17_p_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const sentence_r21 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(sentence_r21);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-col\", 32)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const attempt_r14 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(attempt_r14.readableMark);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-col\", 31)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const attempt_r14 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(attempt_r14.readableGrade);\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"addon-mod_quiz-highlighted\": a0\n  };\n};\nfunction AddonModQuizIndexComponent_ion_card_7_ion_item_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 26);\n    i0.ɵɵlistener(\"click\", function AddonModQuizIndexComponent_ion_card_7_ion_item_17_Template_ion_item_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r25);\n      const attempt_r14 = restoredCtx.$implicit;\n      const ctx_r24 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r24.viewAttempt(attempt_r14.id));\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelementStart(2, \"ion-label\")(3, \"ion-row\", 16);\n    i0.ɵɵtemplate(4, AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_4_Template, 3, 3, \"ion-col\", 27);\n    i0.ɵɵtemplate(5, AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_5_Template, 2, 1, \"ion-col\", 27);\n    i0.ɵɵelementStart(6, \"ion-col\", 28);\n    i0.ɵɵtemplate(7, AddonModQuizIndexComponent_ion_card_7_ion_item_17_p_7_Template, 2, 1, \"p\", 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_8_Template, 3, 1, \"ion-col\", 30);\n    i0.ɵɵtemplate(9, AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_9_Template, 3, 1, \"ion-col\", 27);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const attempt_r14 = ctx.$implicit;\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"detail\", true)(\"ngClass\", i0.ɵɵpureFunction1(10, _c2, attempt_r14.highlightGrade));\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 8, \"core.seemoredetail\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.quiz.showAttemptColumn && attempt_r14.preview);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.quiz.showAttemptColumn && !attempt_r14.preview);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", attempt_r14.readableState);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.quiz.showMarkColumn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.quiz.showGradeColumn);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 12)(1, \"ion-card-header\", 10)(2, \"ion-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"ion-card-content\", 13)(6, \"ion-item\", 14)(7, \"ion-label\", 15)(8, \"ion-row\", 16);\n    i0.ɵɵtemplate(9, AddonModQuizIndexComponent_ion_card_7_ion_col_9_Template, 9, 6, \"ion-col\", 17);\n    i0.ɵɵelementStart(10, \"ion-col\", 18)(11, \"strong\");\n    i0.ɵɵtext(12);\n    i0.ɵɵpipe(13, \"translate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(14, AddonModQuizIndexComponent_ion_card_7_ion_col_14_Template, 4, 4, \"ion-col\", 19);\n    i0.ɵɵtemplate(15, AddonModQuizIndexComponent_ion_card_7_ion_col_15_Template, 4, 4, \"ion-col\", 17);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"div\", 15);\n    i0.ɵɵtemplate(17, AddonModQuizIndexComponent_ion_card_7_ion_item_17_Template, 10, 12, \"ion-item\", 20);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 7, \"addon.mod_quiz.summaryofattempts\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"detail\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.quiz.showAttemptColumn);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 9, \"addon.mod_quiz.attemptstate\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.quiz.showMarkColumn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.quiz.showGradeColumn);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.attempts);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_8_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r26.gradeResult);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_8_ion_item_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 1, \"core.course.overriddennotice\"));\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_8_ion_item_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"p\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵelement(6, \"core-format-text\", 33);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r28 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 6, \"addon.mod_quiz.comment\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"component\", ctx_r28.component)(\"componentId\", ctx_r28.componentId)(\"text\", ctx_r28.gradebookFeedback)(\"contextInstanceId\", ctx_r28.module.id)(\"courseId\", ctx_r28.courseId);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_8_ion_item_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"p\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵelement(6, \"core-format-text\", 33);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r29 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 6, \"addon.mod_quiz.overallfeedback\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"component\", ctx_r29.component)(\"componentId\", ctx_r29.componentId)(\"text\", ctx_r29.overallFeedback)(\"contextInstanceId\", ctx_r29.module.id)(\"courseId\", ctx_r29.courseId);\n  }\n}\nfunction AddonModQuizIndexComponent_ion_card_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\")(1, \"ion-list\");\n    i0.ɵɵtemplate(2, AddonModQuizIndexComponent_ion_card_8_ion_item_2_Template, 3, 1, \"ion-item\", 9);\n    i0.ɵɵtemplate(3, AddonModQuizIndexComponent_ion_card_8_ion_item_3_Template, 4, 3, \"ion-item\", 9);\n    i0.ɵɵtemplate(4, AddonModQuizIndexComponent_ion_card_8_ion_item_4_Template, 7, 8, \"ion-item\", 9);\n    i0.ɵɵtemplate(5, AddonModQuizIndexComponent_ion_card_8_ion_item_5_Template, 7, 8, \"ion-item\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.gradeResult);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.gradeOverridden);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.gradebookFeedback);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.quiz.showFeedbackColumn && ctx_r2.overallFeedback);\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 10)(1, \"ion-label\")(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const message_r36 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(message_r36);\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_ion_card_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 40)(1, \"ion-item\", 10)(2, \"ion-label\")(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 1, \"addon.mod_quiz.noquestions\"));\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_ion_card_4_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r38 = ctx.$implicit;\n    i0.ɵɵclassMapInterpolate1(\"addon-mod_quiz-unsupported-question addon-mod_quiz-unsupported-question-\", type_r38, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r38, \" \");\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_ion_card_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 41)(1, \"ion-item\", 10)(2, \"ion-label\")(3, \"p\", 11);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AddonModQuizIndexComponent_ng_container_9_ion_card_4_p_6_Template, 2, 4, \"p\", 42);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r32 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 2, \"addon.mod_quiz.errorquestionsnotsupported\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r32.unsupportedQuestions);\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_ion_card_5_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const name_r40 = ctx.$implicit;\n    i0.ɵɵclassMapInterpolate1(\"addon-mod_quiz-unsupported-rule addon-mod_quiz-unsupported-rule-\", name_r40, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", name_r40, \" \");\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_ion_card_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 43)(1, \"ion-item\", 10)(2, \"ion-label\")(3, \"p\", 11);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AddonModQuizIndexComponent_ng_container_9_ion_card_5_p_6_Template, 2, 4, \"p\", 42);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r33 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 2, \"addon.mod_quiz.errorrulesnotsupported\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r33.unsupportedRules);\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_ion_card_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 44)(1, \"ion-item\", 10)(2, \"ion-label\")(3, \"p\", 11);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 45);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r34 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 2, \"addon.mod_quiz.errorbehaviournotsupported\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r34.quiz.preferredbehaviour);\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_ion_card_7_p_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r42 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r42);\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_ion_card_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 46)(1, \"ion-item\", 10)(2, \"ion-label\")(3, \"p\", 11);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, AddonModQuizIndexComponent_ng_container_9_ion_card_7_p_9_Template, 2, 1, \"p\", 29);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r35 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 3, \"addon.mod_quiz.canattemptbutnotsubmit\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 5, \"addon.mod_quiz.warningquestionsnotsupported\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r35.unsupportedQuestions);\n  }\n}\nfunction AddonModQuizIndexComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"ion-card\", 34);\n    i0.ɵɵtemplate(2, AddonModQuizIndexComponent_ng_container_9_ion_item_2_Template, 4, 1, \"ion-item\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, AddonModQuizIndexComponent_ng_container_9_ion_card_3_Template, 6, 3, \"ion-card\", 35);\n    i0.ɵɵtemplate(4, AddonModQuizIndexComponent_ng_container_9_ion_card_4_Template, 7, 4, \"ion-card\", 36);\n    i0.ɵɵtemplate(5, AddonModQuizIndexComponent_ng_container_9_ion_card_5_Template, 7, 4, \"ion-card\", 37);\n    i0.ɵɵtemplate(6, AddonModQuizIndexComponent_ng_container_9_ion_card_6_Template, 8, 4, \"ion-card\", 38);\n    i0.ɵɵtemplate(7, AddonModQuizIndexComponent_ng_container_9_ion_card_7_Template, 10, 7, \"ion-card\", 39);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.preventMessages);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.quiz.hasquestions === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.hasSupportedQuestions && ctx_r3.unsupportedQuestions.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.unsupportedRules.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.behaviourSupported === false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.hasSupportedQuestions && ctx_r3.unsupportedQuestions.length);\n  }\n}\nfunction AddonModQuizIndexComponent_div_10_div_1_ion_button_1_ion_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-spinner\", 55);\n  }\n}\nfunction AddonModQuizIndexComponent_div_10_div_1_ion_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r48 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 53);\n    i0.ɵɵlistener(\"click\", function AddonModQuizIndexComponent_div_10_div_1_ion_button_1_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r48);\n      const ctx_r47 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r47.attemptQuiz());\n    });\n    i0.ɵɵtemplate(1, AddonModQuizIndexComponent_div_10_div_1_ion_button_1_ion_spinner_1_Template, 1, 0, \"ion-spinner\", 54);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r44 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r44.showStatusSpinner);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r44.showStatusSpinner);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 3, ctx_r44.buttonText), \" \");\n  }\n}\nfunction AddonModQuizIndexComponent_div_10_div_1_ion_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-button\", 56);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelement(3, \"ion-icon\", 57);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r45 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"href\", ctx_r45.module.url)(\"showBrowserWarning\", false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 3, \"core.openinbrowser\"), \" \");\n  }\n}\nfunction AddonModQuizIndexComponent_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 50);\n    i0.ɵɵtemplate(1, AddonModQuizIndexComponent_div_10_div_1_ion_button_1_Template, 4, 5, \"ion-button\", 51);\n    i0.ɵɵtemplate(2, AddonModQuizIndexComponent_div_10_div_1_ion_button_2_Template, 4, 5, \"ion-button\", 52);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r43 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r43.buttonText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r43.buttonText && (!ctx_r43.hasSupportedQuestions && ctx_r43.unsupportedQuestions.length || ctx_r43.unsupportedRules.length || ctx_r43.behaviourSupported === false));\n  }\n}\nfunction AddonModQuizIndexComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 47);\n    i0.ɵɵtemplate(1, AddonModQuizIndexComponent_div_10_div_1_Template, 3, 2, \"div\", 48);\n    i0.ɵɵelement(2, \"core-course-module-navigation\", 49);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.quiz);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"courseId\", ctx_r4.courseId)(\"currentModuleId\", ctx_r4.module.id);\n  }\n}\n/**\n * Component that displays a quiz entry page.\n */\nexport class AddonModQuizIndexComponent extends CoreCourseModuleMainActivityComponent {\n  constructor(content, courseContentsPage) {\n    super('AddonModQuizIndexComponent', content, courseContentsPage);\n    this.content = content;\n    this.component = AddonModQuizProvider.COMPONENT;\n    this.pluginName = 'quiz';\n    this.hasOffline = false; // Whether the quiz has offline data.\n    this.hasSupportedQuestions = false; // Whether the quiz has at least 1 supported question.\n    this.accessRules = []; // List of access rules of the quiz.\n    this.unsupportedRules = []; // List of unsupported access rules of the quiz.\n    this.unsupportedQuestions = []; // List of unsupported question types of the quiz.\n    this.behaviourSupported = false; // Whether the quiz behaviour is supported.\n    this.showResults = false; // Whether to show the result of the quiz (grade, etc.).\n    this.gradeOverridden = false; // Whether grade has been overridden.\n    this.preventMessages = []; // List of messages explaining why the quiz cannot be attempted.\n    this.showStatusSpinner = true; // Whether to show a spinner due to quiz status.\n    this.showReviewColumn = false; // Whether to show the review column.\n    this.attempts = []; // List of attempts the user has made.\n    this.fetchContentDefaultError = 'addon.mod_quiz.errorgetquiz'; // Default error to show when loading contents.\n    this.syncEventName = AddonModQuizSyncProvider.AUTO_SYNCED;\n    this.moreAttempts = false; // Whether user can create/continue attempts.\n    this.overallStats = false; // Equivalent to overallstats in mod_quiz_view_object in Moodle.\n    this.hasPlayed = false; // Whether the user has gone to the quiz player (attempted).\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    var _superprop_getNgOnInit = () => super.ngOnInit,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      _superprop_getNgOnInit().call(_this);\n      // Listen for attempt finished events.\n      _this.finishedObserver = CoreEvents.on(AddonModQuizProvider.ATTEMPT_FINISHED_EVENT, data => {\n        // Go to review attempt if an attempt in this quiz was finished and synced.\n        if (_this.quiz && data.quizId == _this.quiz.id) {\n          _this.autoReview = data;\n        }\n      }, _this.siteId);\n      yield _this.loadContent(false, true);\n    })();\n  }\n  /**\n   * Attempt the quiz.\n   *\n   * @returns Promise resolved when done.\n   */\n  attemptQuiz() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.showStatusSpinner || !_this2.quiz) {\n        // Quiz is being downloaded or synchronized, abort.\n        return;\n      }\n      if (!AddonModQuiz.isQuizOffline(_this2.quiz)) {\n        // Quiz isn't offline, just open it.\n        return _this2.openQuiz();\n      }\n      // Quiz supports offline, check if it needs to be downloaded.\n      // If the site doesn't support check updates, always prefetch it because we cannot tell if there's something new.\n      const isDownloaded = _this2.currentStatus == CoreConstants.DOWNLOADED;\n      if (isDownloaded) {\n        // Already downloaded, open it.\n        return _this2.openQuiz();\n      }\n      // Prefetch the quiz.\n      _this2.showStatusSpinner = true;\n      try {\n        yield AddonModQuizPrefetchHandler.prefetch(_this2.module, _this2.courseId, true);\n        // Success downloading, open quiz.\n        _this2.openQuiz();\n      } catch (error) {\n        if (_this2.hasOffline) {\n          // Error downloading but there is something offline, allow continuing it.\n          // If the site doesn't support check updates, continue too because we cannot tell if there's something new.\n          _this2.openQuiz();\n        } else {\n          CoreDomUtils.showErrorModalDefault(error, 'core.errordownloading', true);\n        }\n      } finally {\n        _this2.showStatusSpinner = false;\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  fetchContent(refresh, sync = false, showErrors = false) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // First get the quiz instance.\n      const quiz = yield AddonModQuiz.getQuiz(_this3.courseId, _this3.module.id);\n      _this3.gradeMethodReadable = AddonModQuiz.getQuizGradeMethod(quiz.grademethod);\n      _this3.now = Date.now();\n      _this3.dataRetrieved.emit(quiz);\n      _this3.description = quiz.intro || _this3.description;\n      _this3.candidateQuiz = quiz;\n      // Try to get warnings from automatic sync.\n      const warnings = yield AddonModQuizSync.getSyncWarnings(quiz.id);\n      if (warnings !== null && warnings !== void 0 && warnings.length) {\n        // Show warnings and delete them so they aren't shown again.\n        CoreDomUtils.showErrorModal(CoreTextUtils.buildMessage(warnings));\n        yield AddonModQuizSync.setSyncWarnings(quiz.id, []);\n      }\n      if (AddonModQuiz.isQuizOffline(quiz)) {\n        if (sync) {\n          // Try to sync the quiz.\n          try {\n            yield _this3.syncActivity(showErrors);\n          } catch (_unused) {\n            // Ignore errors, keep getting data even if sync fails.\n            _this3.autoReview = undefined;\n          }\n        }\n      } else {\n        _this3.autoReview = undefined;\n        _this3.showStatusSpinner = false;\n      }\n      if (AddonModQuiz.isQuizOffline(quiz)) {\n        // Handle status.\n        _this3.setStatusListener();\n        // Get last synchronization time and check if sync button should be seen.\n        _this3.syncTime = yield AddonModQuizSync.getReadableSyncTime(quiz.id);\n        _this3.hasOffline = yield AddonModQuizSync.hasDataToSync(quiz.id);\n      }\n      // Get quiz access info.\n      _this3.quizAccessInfo = yield AddonModQuiz.getQuizAccessInformation(quiz.id, {\n        cmId: _this3.module.id\n      });\n      _this3.showReviewColumn = _this3.quizAccessInfo.canreviewmyattempts;\n      _this3.accessRules = _this3.quizAccessInfo.accessrules;\n      _this3.unsupportedRules = AddonModQuiz.getUnsupportedRules(_this3.quizAccessInfo.activerulenames);\n      if (quiz.preferredbehaviour) {\n        _this3.behaviourSupported = CoreQuestionBehaviourDelegate.isBehaviourSupported(quiz.preferredbehaviour);\n      }\n      // Get question types in the quiz.\n      const types = yield AddonModQuiz.getQuizRequiredQtypes(quiz.id, {\n        cmId: _this3.module.id\n      });\n      _this3.unsupportedQuestions = AddonModQuiz.getUnsupportedQuestions(types);\n      _this3.hasSupportedQuestions = !!types.find(type => type != 'random' && _this3.unsupportedQuestions.indexOf(type) == -1);\n      yield _this3.getAttempts(quiz);\n      // Quiz is ready to be shown, move it to the variable that is displayed.\n      _this3.quiz = quiz;\n    })();\n  }\n  /**\n   * Get the user attempts in the quiz and the result info.\n   *\n   * @param quiz Quiz instance.\n   * @returns Promise resolved when done.\n   */\n  getAttempts(quiz) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // Always get the best grade because it includes the grade to pass.\n      _this4.bestGrade = yield AddonModQuiz.getUserBestGrade(quiz.id, {\n        cmId: _this4.module.id\n      });\n      // Get access information of last attempt (it also works if no attempts made).\n      _this4.attemptAccessInfo = yield AddonModQuiz.getAttemptAccessInformation(quiz.id, 0, {\n        cmId: _this4.module.id\n      });\n      // Get attempts.\n      const attempts = yield AddonModQuiz.getUserAttempts(quiz.id, {\n        cmId: _this4.module.id\n      });\n      _this4.attempts = yield _this4.treatAttempts(quiz, attempts);\n      // Check if user can create/continue attempts.\n      if (_this4.attempts.length) {\n        const last = _this4.attempts[_this4.attempts.length - 1];\n        _this4.moreAttempts = !AddonModQuiz.isAttemptFinished(last.state) || !_this4.attemptAccessInfo.isfinished;\n      } else {\n        _this4.moreAttempts = !_this4.attemptAccessInfo.isfinished;\n      }\n      _this4.getButtonText(quiz);\n      yield _this4.getResultInfo(quiz);\n    })();\n  }\n  /**\n   * Get the text to show in the button. It also sets restriction messages if needed.\n   *\n   * @param quiz Quiz.\n   */\n  getButtonText(quiz) {\n    var _this$quizAccessInfo5, _this$quizAccessInfo6;\n    this.buttonText = '';\n    if (quiz.hasquestions !== 0) {\n      if (this.attempts.length && !AddonModQuiz.isAttemptFinished(this.attempts[this.attempts.length - 1].state)) {\n        var _this$quizAccessInfo, _this$quizAccessInfo2;\n        // Last attempt is unfinished.\n        if ((_this$quizAccessInfo = this.quizAccessInfo) !== null && _this$quizAccessInfo !== void 0 && _this$quizAccessInfo.canattempt) {\n          this.buttonText = 'addon.mod_quiz.continueattemptquiz';\n        } else if ((_this$quizAccessInfo2 = this.quizAccessInfo) !== null && _this$quizAccessInfo2 !== void 0 && _this$quizAccessInfo2.canpreview) {\n          this.buttonText = 'addon.mod_quiz.continuepreview';\n        }\n      } else {\n        var _this$quizAccessInfo3, _this$quizAccessInfo4;\n        // Last attempt is finished or no attempts.\n        if ((_this$quizAccessInfo3 = this.quizAccessInfo) !== null && _this$quizAccessInfo3 !== void 0 && _this$quizAccessInfo3.canattempt) {\n          var _this$attemptAccessIn;\n          this.preventMessages = ((_this$attemptAccessIn = this.attemptAccessInfo) === null || _this$attemptAccessIn === void 0 ? void 0 : _this$attemptAccessIn.preventnewattemptreasons) || [];\n          if (!this.preventMessages.length) {\n            if (!this.attempts.length) {\n              this.buttonText = 'addon.mod_quiz.attemptquiznow';\n            } else {\n              this.buttonText = 'addon.mod_quiz.reattemptquiz';\n            }\n          }\n        } else if ((_this$quizAccessInfo4 = this.quizAccessInfo) !== null && _this$quizAccessInfo4 !== void 0 && _this$quizAccessInfo4.canpreview) {\n          this.buttonText = 'addon.mod_quiz.previewquiznow';\n        }\n      }\n    }\n    if (!this.buttonText) {\n      return;\n    }\n    // So far we think a button should be printed, check if they will be allowed to access it.\n    this.preventMessages = ((_this$quizAccessInfo5 = this.quizAccessInfo) === null || _this$quizAccessInfo5 === void 0 ? void 0 : _this$quizAccessInfo5.preventaccessreasons) || [];\n    if (!this.moreAttempts) {\n      this.buttonText = '';\n    } else if ((_this$quizAccessInfo6 = this.quizAccessInfo) !== null && _this$quizAccessInfo6 !== void 0 && _this$quizAccessInfo6.canattempt && this.preventMessages.length) {\n      this.buttonText = '';\n    } else if (!this.hasSupportedQuestions || this.unsupportedRules.length || !this.behaviourSupported) {\n      this.buttonText = '';\n    }\n  }\n  /**\n   * Get result info to show.\n   *\n   * @param quiz Quiz.\n   * @returns Promise resolved when done.\n   */\n  getResultInfo(quiz) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var _this5$bestGrade, _this5$gradebookData;\n      if (!_this5.attempts.length || !quiz.showGradeColumn || !((_this5$bestGrade = _this5.bestGrade) !== null && _this5$bestGrade !== void 0 && _this5$bestGrade.hasgrade) || ((_this5$gradebookData = _this5.gradebookData) === null || _this5$gradebookData === void 0 ? void 0 : _this5$gradebookData.grade) === undefined) {\n        _this5.showResults = false;\n        return;\n      }\n      const bestGrade = _this5.bestGrade.grade;\n      const formattedGradebookGrade = AddonModQuiz.formatGrade(_this5.gradebookData.grade, quiz.decimalpoints);\n      const formattedBestGrade = AddonModQuiz.formatGrade(bestGrade, quiz.decimalpoints);\n      let gradeToShow = formattedGradebookGrade; // By default we show the grade in the gradebook.\n      _this5.showResults = true;\n      _this5.gradeOverridden = formattedGradebookGrade != formattedBestGrade;\n      _this5.gradebookFeedback = _this5.gradebookData.feedback;\n      if (bestGrade && bestGrade > _this5.gradebookData.grade && _this5.gradebookData.grade == quiz.grade) {\n        // The best grade is higher than the max grade for the quiz.\n        // We'll do like Moodle web and show the best grade instead of the gradebook grade.\n        _this5.gradeOverridden = false;\n        gradeToShow = formattedBestGrade;\n      }\n      if (_this5.overallStats) {\n        // Show the quiz grade. The message shown is different if the quiz is finished.\n        if (_this5.moreAttempts) {\n          _this5.gradeResult = Translate.instant('addon.mod_quiz.gradesofar', {\n            $a: {\n              method: _this5.gradeMethodReadable,\n              mygrade: gradeToShow,\n              quizgrade: quiz.gradeFormatted\n            }\n          });\n        } else {\n          const outOfShort = Translate.instant('addon.mod_quiz.outofshort', {\n            $a: {\n              grade: gradeToShow,\n              maxgrade: quiz.gradeFormatted\n            }\n          });\n          _this5.gradeResult = Translate.instant('addon.mod_quiz.yourfinalgradeis', {\n            $a: outOfShort\n          });\n        }\n      }\n      if (quiz.showFeedbackColumn) {\n        // Get the quiz overall feedback.\n        const response = yield AddonModQuiz.getFeedbackForGrade(quiz.id, _this5.gradebookData.grade, {\n          cmId: _this5.module.id\n        });\n        _this5.overallFeedback = response.feedbacktext;\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  logActivity() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this6.quiz) {\n        return; // Shouldn't happen.\n      }\n\n      yield CoreUtils.ignoreErrors(AddonModQuiz.logViewQuiz(_this6.quiz.id));\n      _this6.analyticsLogEvent('mod_quiz_view_quiz');\n    })();\n  }\n  /**\n   * Go to review an attempt that has just been finished.\n   *\n   * @returns Promise resolved when done.\n   */\n  goToAutoReview() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      var _this7$quizAccessInfo;\n      if (!_this7.autoReview) {\n        return;\n      }\n      // If we go to auto review it means an attempt was finished. Check completion status.\n      _this7.checkCompletion();\n      // Verify that user can see the review.\n      const attemptId = _this7.autoReview.attemptId;\n      _this7.autoReview = undefined;\n      if ((_this7$quizAccessInfo = _this7.quizAccessInfo) !== null && _this7$quizAccessInfo !== void 0 && _this7$quizAccessInfo.canreviewmyattempts) {\n        try {\n          yield AddonModQuiz.getAttemptReview(attemptId, {\n            page: -1,\n            cmId: _this7.module.id\n          });\n          yield CoreNavigator.navigateToSitePath(`${AddonModQuizModuleHandlerService.PAGE_NAME}/${_this7.courseId}/${_this7.module.id}/review/${attemptId}`);\n        } catch (_unused2) {\n          // Ignore errors.\n        }\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  hasSyncSucceed(result) {\n    if (result.attemptFinished) {\n      // An attempt was finished, check completion status.\n      this.checkCompletion();\n    }\n    // If the sync call isn't rejected it means the sync was successful.\n    return result.updated;\n  }\n  /**\n   * User entered the page that contains the component.\n   */\n  ionViewDidEnter() {\n    var _superprop_getIonViewDidEnter = () => super.ionViewDidEnter,\n      _this8 = this;\n    return _asyncToGenerator(function* () {\n      var _this8$content;\n      _superprop_getIonViewDidEnter().call(_this8);\n      if (!_this8.hasPlayed) {\n        _this8.autoReview = undefined;\n        return;\n      }\n      _this8.hasPlayed = false;\n      let promise = Promise.resolve();\n      // Update data when we come back from the player since the attempt status could have changed.\n      // Check if we need to go to review an attempt automatically.\n      if (_this8.autoReview && _this8.autoReview.synced) {\n        promise = _this8.goToAutoReview();\n      }\n      // Refresh data.\n      _this8.showLoading = true;\n      (_this8$content = _this8.content) === null || _this8$content === void 0 || _this8$content.scrollToTop();\n      yield promise;\n      yield CoreUtils.ignoreErrors(_this8.refreshContent(true));\n      _this8.showLoading = false;\n    })();\n  }\n  /**\n   * User left the page that contains the component.\n   */\n  ionViewDidLeave() {\n    super.ionViewDidLeave();\n    this.autoReview = undefined;\n  }\n  /**\n   * Perform the invalidate content function.\n   *\n   * @returns Resolved when done.\n   */\n  invalidateContent() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      promises.push(AddonModQuiz.invalidateQuizData(_this9.courseId));\n      if (_this9.quiz) {\n        promises.push(AddonModQuiz.invalidateUserAttemptsForUser(_this9.quiz.id));\n        promises.push(AddonModQuiz.invalidateQuizAccessInformation(_this9.quiz.id));\n        promises.push(AddonModQuiz.invalidateQuizRequiredQtypes(_this9.quiz.id));\n        promises.push(AddonModQuiz.invalidateAttemptAccessInformation(_this9.quiz.id));\n        promises.push(AddonModQuiz.invalidateCombinedReviewOptionsForUser(_this9.quiz.id));\n        promises.push(AddonModQuiz.invalidateUserBestGradeForUser(_this9.quiz.id));\n        promises.push(AddonModQuiz.invalidateGradeFromGradebook(_this9.courseId));\n      }\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Compares sync event data with current data to check if refresh content is needed.\n   *\n   * @param syncEventData Data receiven on sync observer.\n   * @returns True if refresh is needed, false otherwise.\n   */\n  isRefreshSyncNeeded(syncEventData) {\n    if (!this.courseId || !this.module) {\n      return false;\n    }\n    if (syncEventData.attemptFinished) {\n      // An attempt was finished, check completion status.\n      this.checkCompletion();\n    }\n    if (this.quiz && syncEventData.quizId == this.quiz.id) {\n      var _this$content;\n      (_this$content = this.content) === null || _this$content === void 0 || _this$content.scrollToTop();\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Open a quiz to attempt it.\n   */\n  openQuiz() {\n    this.hasPlayed = true;\n    CoreNavigator.navigateToSitePath(`${AddonModQuizModuleHandlerService.PAGE_NAME}/${this.courseId}/${this.module.id}/player`, {\n      params: {\n        moduleUrl: this.module.url\n      }\n    });\n  }\n  /**\n   * Displays some data based on the current status.\n   *\n   * @param status The current status.\n   * @param previousStatus The previous status. If not defined, there is no previous status.\n   */\n  showStatus(status, previousStatus) {\n    this.showStatusSpinner = status == CoreConstants.DOWNLOADING;\n    if (status == CoreConstants.DOWNLOADED && previousStatus == CoreConstants.DOWNLOADING) {\n      // Quiz downloaded now, maybe a new attempt was created. Load content again.\n      this.showLoadingAndFetch();\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  sync() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this10.candidateQuiz) {\n        return {\n          warnings: [],\n          attemptFinished: false,\n          updated: false\n        };\n      }\n      return AddonModQuizSync.syncQuiz(_this10.candidateQuiz, true);\n    })();\n  }\n  /**\n   * Treat user attempts.\n   *\n   * @param quiz Quiz data.\n   * @param attempts The attempts to treat.\n   * @returns Promise resolved when done.\n   */\n  treatAttempts(quiz, attempts) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      var _this11$gradebookData, _this11$bestGrade;\n      if (!attempts || !attempts.length) {\n        // There are no attempts to treat.\n        quiz.gradeFormatted = AddonModQuiz.formatGrade(quiz.grade, quiz.decimalpoints);\n        return [];\n      }\n      const lastFinished = AddonModQuiz.getLastFinishedAttemptFromList(attempts);\n      let openReview = false;\n      if (_this11.autoReview && lastFinished && lastFinished.id >= _this11.autoReview.attemptId) {\n        // User just finished an attempt in offline and it seems it's been synced, since it's finished in online.\n        // Go to the review of this attempt if the user hasn't left this view.\n        if (!_this11.isDestroyed && _this11.isCurrentView) {\n          openReview = true;\n        }\n      }\n      const [options] = yield Promise.all([AddonModQuiz.getCombinedReviewOptions(quiz.id, {\n        cmId: _this11.module.id\n      }), _this11.getQuizGrade(), openReview ? _this11.goToAutoReview() : undefined]);\n      _this11.options = options;\n      const grade = ((_this11$gradebookData = _this11.gradebookData) === null || _this11$gradebookData === void 0 ? void 0 : _this11$gradebookData.grade) !== undefined ? _this11.gradebookData.grade : (_this11$bestGrade = _this11.bestGrade) === null || _this11$bestGrade === void 0 ? void 0 : _this11$bestGrade.grade;\n      const quizGrade = AddonModQuiz.formatGrade(grade, quiz.decimalpoints);\n      // Calculate data to construct the header of the attempts table.\n      AddonModQuizHelper.setQuizCalculatedData(quiz, _this11.options);\n      _this11.overallStats = !!lastFinished && _this11.options.alloptions.marks >= AddonModQuizProvider.QUESTION_OPTIONS_MARK_AND_MAX;\n      // Calculate data to show for each attempt.\n      const formattedAttempts = yield Promise.all(attempts.map((attempt, index) => {\n        // Highlight the highest grade if appropriate.\n        const shouldHighlight = _this11.overallStats && quiz.grademethod == AddonModQuizProvider.GRADEHIGHEST && attempts.length > 1;\n        const isLast = index == attempts.length - 1;\n        return AddonModQuizHelper.setAttemptCalculatedData(quiz, attempt, shouldHighlight, quizGrade, isLast);\n      }));\n      return formattedAttempts;\n    })();\n  }\n  /**\n   * Get quiz grade data.\n   *\n   * @returns Promise resolved when done.\n   */\n  getQuizGrade() {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Get gradebook grade.\n        const data = yield AddonModQuiz.getGradeFromGradebook(_this12.courseId, _this12.module.id);\n        if (data) {\n          var _data$graderaw;\n          const grade = (_data$graderaw = data.graderaw) !== null && _data$graderaw !== void 0 ? _data$graderaw : data.grade !== undefined && data.grade !== null ? Number(data.grade) : undefined;\n          _this12.gradebookData = {\n            grade: safeNumber(grade),\n            feedback: data.feedback\n          };\n        }\n      } catch (_unused3) {\n        var _this12$bestGrade;\n        // Fallback to quiz best grade if failure or not found.\n        _this12.gradebookData = {\n          grade: (_this12$bestGrade = _this12.bestGrade) === null || _this12$bestGrade === void 0 ? void 0 : _this12$bestGrade.grade\n        };\n      }\n    })();\n  }\n  /**\n   * Go to page to view the attempt details.\n   *\n   * @returns Promise resolved when done.\n   */\n  viewAttempt(attemptId) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreNavigator.navigateToSitePath(`${AddonModQuizModuleHandlerService.PAGE_NAME}/${_this13.courseId}/${_this13.module.id}/attempt/${attemptId}`);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$finishedObserve;\n    super.ngOnDestroy();\n    (_this$finishedObserve = this.finishedObserver) === null || _this$finishedObserve === void 0 || _this$finishedObserve.off();\n  }\n}\n_class = AddonModQuizIndexComponent;\n_class.ɵfac = function AddonModQuizIndexComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.IonContent), i0.ɵɵdirectiveInject(i2.CoreCourseContentsPage, 8));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"addon-mod-quiz-index\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 15,\n  consts: [[\"slot\", \"end\"], [\"fill\", \"clear\", \"aria-haspopup\", \"true\", 3, \"click\"], [\"name\", \"fas-circle-info\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [3, \"hideUntil\"], [3, \"module\", \"description\", \"component\", \"componentId\", \"courseId\", \"hasDataToSync\", \"completionChanged\"], [4, \"ngIf\"], [\"class\", \"addon-mod_quiz-table\", 4, \"ngIf\"], [\"collapsible-footer\", \"\", \"slot\", \"fixed\", 4, \"ngIf\"], [\"class\", \"ion-text-wrap\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"ion-text-wrap\", 4, \"ngIf\"], [1, \"ion-text-wrap\"], [1, \"item-heading\"], [1, \"addon-mod_quiz-table\"], [\"role\", \"table\"], [1, \"ion-text-wrap\", \"addon-mod_quiz-table-header\", \"hide-detail\", 3, \"detail\"], [\"role\", \"rowgroup\"], [\"role\", \"row\", 1, \"ion-align-items-center\"], [\"class\", \"ion-text-center\", \"role\", \"columnheader\", 4, \"ngIf\"], [\"size\", \"7\", \"role\", \"columnheader\"], [\"class\", \"ion-text-center ion-hide-md-down\", \"role\", \"columnheader\", 4, \"ngIf\"], [\"button\", \"\", \"class\", \"ion-text-wrap\", 3, \"detail\", \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"columnheader\", 1, \"ion-text-center\"], [\"aria-hidden\", \"true\", 1, \"ion-hide-md-up\"], [1, \"sr-only\", \"ion-hide-md-up\"], [1, \"ion-hide-md-down\"], [\"role\", \"columnheader\", 1, \"ion-text-center\", \"ion-hide-md-down\"], [\"button\", \"\", 1, \"ion-text-wrap\", 3, \"detail\", \"ngClass\", \"click\"], [\"class\", \"ion-text-center\", \"role\", \"cell\", 4, \"ngIf\"], [\"size\", \"7\", \"role\", \"cell\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"ion-text-center ion-hide-md-down\", \"role\", \"cell\", 4, \"ngIf\"], [\"role\", \"cell\", 1, \"ion-text-center\"], [\"role\", \"cell\", 1, \"ion-text-center\", \"ion-hide-md-down\"], [\"contextLevel\", \"module\", 3, \"component\", \"componentId\", \"text\", \"contextInstanceId\", \"courseId\"], [1, \"core-danger-card\", \"addon-mod_quiz-prevent-messages\"], [\"class\", \"core-danger-card addon-mod_quiz-no-questions\", 4, \"ngIf\"], [\"class\", \"core-danger-card addon-mod_quiz-unsupported-questions\", 4, \"ngIf\"], [\"class\", \"core-danger-card addon-mod_quiz-unsupported-rules\", 4, \"ngIf\"], [\"class\", \"core-danger-card addon-mod_quiz-unsupported-behaviours\", 4, \"ngIf\"], [\"class\", \"core-warning-card\", 4, \"ngIf\"], [1, \"core-danger-card\", \"addon-mod_quiz-no-questions\"], [1, \"core-danger-card\", \"addon-mod_quiz-unsupported-questions\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"core-danger-card\", \"addon-mod_quiz-unsupported-rules\"], [1, \"core-danger-card\", \"addon-mod_quiz-unsupported-behaviours\"], [1, \"addon-mod_quiz-unsupported-behaviour\"], [1, \"core-warning-card\"], [\"collapsible-footer\", \"\", \"slot\", \"fixed\"], [\"class\", \"list-item-limited-width\", 4, \"ngIf\"], [3, \"courseId\", \"currentModuleId\"], [1, \"list-item-limited-width\"], [\"expand\", \"block\", \"class\", \"ion-margin ion-text-wrap\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"class\", \"ion-text-wrap ion-margin\", \"expand\", \"block\", \"core-link\", \"\", 3, \"href\", \"showBrowserWarning\", 4, \"ngIf\"], [\"expand\", \"block\", 1, \"ion-margin\", \"ion-text-wrap\", 3, \"disabled\", \"click\"], [\"slot\", \"start\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"slot\", \"start\", \"aria-hidden\", \"true\"], [\"expand\", \"block\", \"core-link\", \"\", 1, \"ion-text-wrap\", \"ion-margin\", 3, \"href\", \"showBrowserWarning\"], [\"name\", \"fas-up-right-from-square\", \"slot\", \"end\", \"aria-hidden\", \"true\"]],\n  template: function AddonModQuizIndexComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"core-navbar-buttons\", 0)(1, \"ion-button\", 1);\n      i0.ɵɵlistener(\"click\", function AddonModQuizIndexComponent_Template_ion_button_click_1_listener() {\n        return ctx.openModuleSummary();\n      });\n      i0.ɵɵpipe(2, \"translate\");\n      i0.ɵɵelement(3, \"ion-icon\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"core-loading\", 3)(5, \"core-course-module-info\", 4);\n      i0.ɵɵlistener(\"completionChanged\", function AddonModQuizIndexComponent_Template_core_course_module_info_completionChanged_5_listener() {\n        return ctx.onCompletionChange();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, AddonModQuizIndexComponent_ion_card_6_Template, 6, 4, \"ion-card\", 5);\n      i0.ɵɵtemplate(7, AddonModQuizIndexComponent_ion_card_7_Template, 18, 11, \"ion-card\", 6);\n      i0.ɵɵtemplate(8, AddonModQuizIndexComponent_ion_card_8_Template, 6, 4, \"ion-card\", 5);\n      i0.ɵɵtemplate(9, AddonModQuizIndexComponent_ng_container_9_Template, 8, 6, \"ng-container\", 5);\n      i0.ɵɵtemplate(10, AddonModQuizIndexComponent_div_10_Template, 3, 3, \"div\", 7);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(2, 13, \"core.info\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"hideUntil\", !ctx.showLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"module\", ctx.module)(\"description\", ctx.description)(\"component\", ctx.component)(\"componentId\", ctx.componentId)(\"courseId\", ctx.courseId)(\"hasDataToSync\", ctx.buttonText && ctx.hasOffline);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradeMethodReadable || ctx.accessRules.length || ctx.syncTime);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.quiz && ctx.attempts.length);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.quiz && ctx.showResults && (ctx.gradeResult || ctx.gradeOverridden || ctx.gradebookFeedback || ctx.quiz.showFeedbackColumn && ctx.overallFeedback));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.quiz);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.showLoading);\n    }\n  },\n  styles: [\"[_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   ion-card-content[_ngcontent-%COMP%] {\\n  padding-left: 0;\\n  padding-right: 0;\\n}\\n[_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]:nth-child(even) {\\n  --background: var(--light);\\n}\\n[_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .addon-mod_quiz-highlighted[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .item.addon-mod_quiz-highlighted[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .addon-mod_quiz-highlighted[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], [_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .item.addon-mod_quiz-highlighted[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  --background: var(--primary-tint);\\n  color: var(--primary-shade);\\n}\\n\\nhtml.dark[_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .addon-mod_quiz-highlighted[_ngcontent-%COMP%], html.dark   [_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .addon-mod_quiz-highlighted[_ngcontent-%COMP%], html.dark[_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .item.addon-mod_quiz-highlighted[_ngcontent-%COMP%], html.dark   [_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .item.addon-mod_quiz-highlighted[_ngcontent-%COMP%], html.dark[_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .addon-mod_quiz-highlighted[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], html.dark   [_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .addon-mod_quiz-highlighted[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], html.dark[_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .item.addon-mod_quiz-highlighted[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], html.dark   [_nghost-%COMP%]   .addon-mod_quiz-table[_ngcontent-%COMP%]   .item.addon-mod_quiz-highlighted[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  --background: var(--primary-shade);\\n  color: var(--primary-tint);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hZGRvbnMvbW9kL3F1aXovY29tcG9uZW50cy9pbmRleC9pbmRleC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdRO0VBQ0ksZUFBQTtFQUNBLGdCQUFBO0FBRlo7QUFLUTtFQUNJLDBCQUFBO0FBSFo7QUFNUTs7OztFQUlJLGlDQUFBO0VBQ0EsMkJBQUE7QUFKWjs7QUFXUTs7OztFQUlJLGtDQUFBO0VBQ0EsMEJBQUE7QUFSWiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcblxuICAgIC5hZGRvbi1tb2RfcXVpei10YWJsZSB7XG4gICAgICAgIGlvbi1jYXJkLWNvbnRlbnQge1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5pdGVtOm50aC1jaGlsZChldmVuKSB7XG4gICAgICAgICAgICAtLWJhY2tncm91bmQ6IHZhcigtLWxpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hZGRvbi1tb2RfcXVpei1oaWdobGlnaHRlZCxcbiAgICAgICAgLml0ZW0uYWRkb24tbW9kX3F1aXotaGlnaGxpZ2h0ZWQsXG4gICAgICAgIC5hZGRvbi1tb2RfcXVpei1oaWdobGlnaHRlZCBwLFxuICAgICAgICAuaXRlbS5hZGRvbi1tb2RfcXVpei1oaWdobGlnaHRlZCBwIHtcbiAgICAgICAgICAgIC0tYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS10aW50KTtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LXNoYWRlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuOmhvc3QtY29udGV4dChodG1sLmRhcmspIHtcbiAgICAuYWRkb24tbW9kX3F1aXotdGFibGUge1xuICAgICAgICAuYWRkb24tbW9kX3F1aXotaGlnaGxpZ2h0ZWQsXG4gICAgICAgIC5pdGVtLmFkZG9uLW1vZF9xdWl6LWhpZ2hsaWdodGVkLFxuICAgICAgICAuYWRkb24tbW9kX3F1aXotaGlnaGxpZ2h0ZWQgcCxcbiAgICAgICAgLml0ZW0uYWRkb24tbW9kX3F1aXotaGlnaGxpZ2h0ZWQgcCB7XG4gICAgICAgICAgICAtLWJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktc2hhZGUpO1xuICAgICAgICAgICAgY29sb3I6IHZhcigtLXByaW1hcnktdGludCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["CoreConstants","safeNumber","CoreCourseModuleMainActivityComponent","CoreQuestionBehaviourDelegate","CoreNavigator","CoreDomUtils","CoreTextUtils","CoreUtils","Translate","CoreEvents","AddonModQuizModuleHandlerService","AddonModQuizPrefetchHandler","AddonModQuiz","AddonModQuizProvider","AddonModQuizHelper","AddonModQuizSync","AddonModQuizSyncProvider","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","rule_r9","ɵɵpipeBind1","ctx_r6","gradeMethodReadable","ɵɵpipeBind2","ɵɵpureFunction1","_c1","ɵɵpureFunction2","_c0","ctx_r7","bestGrade","gradetopass","quiz","gradeFormatted","ctx_r8","syncTime","ɵɵtemplate","AddonModQuizIndexComponent_ion_card_6_ion_item_2_Template","AddonModQuizIndexComponent_ion_card_6_ion_item_3_Template","AddonModQuizIndexComponent_ion_card_6_ion_item_4_Template","AddonModQuizIndexComponent_ion_card_6_ion_item_5_Template","ɵɵproperty","ctx_r0","accessRules","ɵɵtextInterpolate2","ctx_r11","sumGradesFormatted","ctx_r12","ɵɵtextInterpolate1","attempt_r14","attempt","sentence_r21","readableMark","readableGrade","ɵɵlistener","AddonModQuizIndexComponent_ion_card_7_ion_item_17_Template_ion_item_click_0_listener","restoredCtx","ɵɵrestoreView","_r25","$implicit","ctx_r24","ɵɵnextContext","ɵɵresetView","viewAttempt","id","AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_4_Template","AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_5_Template","AddonModQuizIndexComponent_ion_card_7_ion_item_17_p_7_Template","AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_8_Template","AddonModQuizIndexComponent_ion_card_7_ion_item_17_ion_col_9_Template","_c2","highlightGrade","ɵɵattribute","ctx_r13","showAttemptColumn","preview","readableState","showMarkColumn","showGradeColumn","AddonModQuizIndexComponent_ion_card_7_ion_col_9_Template","AddonModQuizIndexComponent_ion_card_7_ion_col_14_Template","AddonModQuizIndexComponent_ion_card_7_ion_col_15_Template","AddonModQuizIndexComponent_ion_card_7_ion_item_17_Template","ctx_r1","attempts","ctx_r26","gradeResult","ɵɵelement","ctx_r28","component","componentId","gradebookFeedback","module","courseId","ctx_r29","overallFeedback","AddonModQuizIndexComponent_ion_card_8_ion_item_2_Template","AddonModQuizIndexComponent_ion_card_8_ion_item_3_Template","AddonModQuizIndexComponent_ion_card_8_ion_item_4_Template","AddonModQuizIndexComponent_ion_card_8_ion_item_5_Template","ctx_r2","gradeOverridden","showFeedbackColumn","message_r36","ɵɵclassMapInterpolate1","type_r38","AddonModQuizIndexComponent_ng_container_9_ion_card_4_p_6_Template","ctx_r32","unsupportedQuestions","name_r40","AddonModQuizIndexComponent_ng_container_9_ion_card_5_p_6_Template","ctx_r33","unsupportedRules","ctx_r34","preferredbehaviour","type_r42","AddonModQuizIndexComponent_ng_container_9_ion_card_7_p_9_Template","ctx_r35","ɵɵelementContainerStart","AddonModQuizIndexComponent_ng_container_9_ion_item_2_Template","AddonModQuizIndexComponent_ng_container_9_ion_card_3_Template","AddonModQuizIndexComponent_ng_container_9_ion_card_4_Template","AddonModQuizIndexComponent_ng_container_9_ion_card_5_Template","AddonModQuizIndexComponent_ng_container_9_ion_card_6_Template","AddonModQuizIndexComponent_ng_container_9_ion_card_7_Template","ɵɵelementContainerEnd","ctx_r3","preventMessages","hasquestions","hasSupportedQuestions","length","behaviourSupported","AddonModQuizIndexComponent_div_10_div_1_ion_button_1_Template_ion_button_click_0_listener","_r48","ctx_r47","attemptQuiz","AddonModQuizIndexComponent_div_10_div_1_ion_button_1_ion_spinner_1_Template","ctx_r44","showStatusSpinner","buttonText","ctx_r45","url","AddonModQuizIndexComponent_div_10_div_1_ion_button_1_Template","AddonModQuizIndexComponent_div_10_div_1_ion_button_2_Template","ctx_r43","AddonModQuizIndexComponent_div_10_div_1_Template","ctx_r4","AddonModQuizIndexComponent","constructor","content","courseContentsPage","COMPONENT","pluginName","hasOffline","showResults","showReviewColumn","fetchContentDefaultError","syncEventName","AUTO_SYNCED","moreAttempts","overallStats","hasPlayed","ngOnInit","_superprop_getNgOnInit","_this","_asyncToGenerator","call","finishedObserver","on","ATTEMPT_FINISHED_EVENT","data","quizId","autoReview","siteId","loadContent","_this2","isQuizOffline","openQuiz","isDownloaded","currentStatus","DOWNLOADED","prefetch","error","showErrorModalDefault","fetchContent","refresh","sync","showErrors","_this3","getQuiz","getQuizGradeMethod","grademethod","now","Date","dataRetrieved","emit","description","intro","candidateQuiz","warnings","getSyncWarnings","showErrorModal","buildMessage","setSyncWarnings","syncActivity","_unused","undefined","setStatusListener","getReadableSyncTime","hasDataToSync","quizAccessInfo","getQuizAccessInformation","cmId","canreviewmyattempts","accessrules","getUnsupportedRules","activerulenames","isBehaviourSupported","types","getQuizRequiredQtypes","getUnsupportedQuestions","find","type","indexOf","getAttempts","_this4","getUserBestGrade","attemptAccessInfo","getAttemptAccessInformation","getUserAttempts","treatAttempts","last","isAttemptFinished","state","isfinished","getButtonText","getResultInfo","_this$quizAccessInfo5","_this$quizAccessInfo6","_this$quizAccessInfo","_this$quizAccessInfo2","canattempt","canpreview","_this$quizAccessInfo3","_this$quizAccessInfo4","_this$attemptAccessIn","preventnewattemptreasons","preventaccessreasons","_this5","_this5$bestGrade","_this5$gradebookData","hasgrade","gradebookData","grade","formattedGradebookGrade","formatGrade","decimalpoints","formattedBestGrade","gradeToShow","feedback","instant","$a","method","mygrade","quizgrade","outOfShort","maxgrade","response","getFeedbackForGrade","feedbacktext","logActivity","_this6","ignoreErrors","logViewQuiz","analyticsLogEvent","goToAutoReview","_this7","_this7$quizAccessInfo","checkCompletion","attemptId","getAttemptReview","page","navigateToSitePath","PAGE_NAME","_unused2","hasSyncSucceed","result","attemptFinished","updated","ionViewDidEnter","_superprop_getIonViewDidEnter","_this8","_this8$content","promise","Promise","resolve","synced","showLoading","scrollToTop","refreshContent","ionViewDidLeave","invalidateContent","_this9","promises","push","invalidateQuizData","invalidateUserAttemptsForUser","invalidateQuizAccessInformation","invalidateQuizRequiredQtypes","invalidateAttemptAccessInformation","invalidateCombinedReviewOptionsForUser","invalidateUserBestGradeForUser","invalidateGradeFromGradebook","all","isRefreshSyncNeeded","syncEventData","_this$content","params","moduleUrl","showStatus","status","previousStatus","DOWNLOADING","showLoadingAndFetch","_this10","syncQuiz","_this11","_this11$gradebookData","_this11$bestGrade","lastFinished","getLastFinishedAttemptFromList","openReview","isDestroyed","isCurrentView","options","getCombinedReviewOptions","getQuizGrade","quizGrade","setQuizCalculatedData","alloptions","marks","QUESTION_OPTIONS_MARK_AND_MAX","formattedAttempts","map","index","shouldHighlight","GRADEHIGHEST","isLast","setAttemptCalculatedData","_this12","getGradeFromGradebook","_data$graderaw","graderaw","Number","_unused3","_this12$bestGrade","_this13","ngOnDestroy","_this$finishedObserve","off","ɵɵdirectiveInject","i1","IonContent","i2","CoreCourseContentsPage","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","AddonModQuizIndexComponent_Template","rf","ctx","AddonModQuizIndexComponent_Template_ion_button_click_1_listener","openModuleSummary","AddonModQuizIndexComponent_Template_core_course_module_info_completionChanged_5_listener","onCompletionChange","AddonModQuizIndexComponent_ion_card_6_Template","AddonModQuizIndexComponent_ion_card_7_Template","AddonModQuizIndexComponent_ion_card_8_Template","AddonModQuizIndexComponent_ng_container_9_Template","AddonModQuizIndexComponent_div_10_Template"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/quiz/components/index/index.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/quiz/components/index/addon-mod-quiz-index.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreConstants } from '@/core/constants';\nimport { safeNumber, SafeNumber } from '@/core/utils/types';\nimport { Component, OnDestroy, OnInit, Optional } from '@angular/core';\n\nimport { CoreCourseModuleMainActivityComponent } from '@features/course/classes/main-activity-component';\nimport { CoreCourseContentsPage } from '@features/course/pages/contents/contents';\nimport { CoreQuestionBehaviourDelegate } from '@features/question/services/behaviour-delegate';\nimport { IonContent } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { AddonModQuizModuleHandlerService } from '../../services/handlers/module';\nimport { AddonModQuizPrefetchHandler } from '../../services/handlers/prefetch';\nimport {\n    AddonModQuiz,\n    AddonModQuizAttemptFinishedData,\n    AddonModQuizAttemptWSData,\n    AddonModQuizCombinedReviewOptions,\n    AddonModQuizGetAttemptAccessInformationWSResponse,\n    AddonModQuizGetQuizAccessInformationWSResponse,\n    AddonModQuizGetUserBestGradeWSResponse,\n    AddonModQuizProvider,\n} from '../../services/quiz';\nimport { AddonModQuizAttempt, AddonModQuizHelper, AddonModQuizQuizData } from '../../services/quiz-helper';\nimport {\n    AddonModQuizAutoSyncData,\n    AddonModQuizSync,\n    AddonModQuizSyncProvider,\n    AddonModQuizSyncResult,\n} from '../../services/quiz-sync';\n\n/**\n * Component that displays a quiz entry page.\n */\n@Component({\n    selector: 'addon-mod-quiz-index',\n    templateUrl: 'addon-mod-quiz-index.html',\n    styleUrls: ['index.scss'],\n})\nexport class AddonModQuizIndexComponent extends CoreCourseModuleMainActivityComponent implements OnInit, OnDestroy {\n\n    component = AddonModQuizProvider.COMPONENT;\n    pluginName = 'quiz';\n    quiz?: AddonModQuizQuizData; // The quiz.\n    now?: number; // Current time.\n    syncTime?: string; // Last synchronization time.\n    hasOffline = false; // Whether the quiz has offline data.\n    hasSupportedQuestions = false; // Whether the quiz has at least 1 supported question.\n    accessRules: string[] = []; // List of access rules of the quiz.\n    unsupportedRules: string[] = []; // List of unsupported access rules of the quiz.\n    unsupportedQuestions: string[] = []; // List of unsupported question types of the quiz.\n    behaviourSupported = false; // Whether the quiz behaviour is supported.\n    showResults = false; // Whether to show the result of the quiz (grade, etc.).\n    gradeOverridden = false; // Whether grade has been overridden.\n    gradebookFeedback?: string; // The feedback in the gradebook.\n    gradeResult?: string; // Message with the grade.\n    overallFeedback?: string; // The feedback for the grade.\n    buttonText?: string; // Text to display in the start/continue button.\n    preventMessages: string[] = []; // List of messages explaining why the quiz cannot be attempted.\n    showStatusSpinner = true; // Whether to show a spinner due to quiz status.\n    gradeMethodReadable?: string; // Grade method in a readable format.\n    showReviewColumn = false; // Whether to show the review column.\n    attempts: AddonModQuizAttempt[] = []; // List of attempts the user has made.\n    bestGrade?: AddonModQuizGetUserBestGradeWSResponse; // Best grade data.\n\n    protected fetchContentDefaultError = 'addon.mod_quiz.errorgetquiz'; // Default error to show when loading contents.\n    protected syncEventName = AddonModQuizSyncProvider.AUTO_SYNCED;\n\n    // protected quizData: any; // Quiz instance. This variable will store the quiz instance until it's ready to be shown\n    protected autoReview?: AddonModQuizAttemptFinishedData; // Data to auto-review an attempt after finishing.\n    protected quizAccessInfo?: AddonModQuizGetQuizAccessInformationWSResponse; // Quiz access info.\n    protected attemptAccessInfo?: AddonModQuizGetAttemptAccessInformationWSResponse; // Last attempt access info.\n    protected moreAttempts = false; // Whether user can create/continue attempts.\n    protected options?: AddonModQuizCombinedReviewOptions; // Combined review options.\n    protected gradebookData?: { grade?: SafeNumber; feedback?: string }; // The gradebook grade and feedback.\n    protected overallStats = false; // Equivalent to overallstats in mod_quiz_view_object in Moodle.\n    protected finishedObserver?: CoreEventObserver; // It will observe attempt finished events.\n    protected hasPlayed = false; // Whether the user has gone to the quiz player (attempted).\n    protected candidateQuiz?: AddonModQuizQuizData;\n\n    constructor(\n        protected content?: IonContent,\n        @Optional() courseContentsPage?: CoreCourseContentsPage,\n    ) {\n        super('AddonModQuizIndexComponent', content, courseContentsPage);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        super.ngOnInit();\n\n        // Listen for attempt finished events.\n        this.finishedObserver = CoreEvents.on(\n            AddonModQuizProvider.ATTEMPT_FINISHED_EVENT,\n            (data) => {\n                // Go to review attempt if an attempt in this quiz was finished and synced.\n                if (this.quiz && data.quizId == this.quiz.id) {\n                    this.autoReview = data;\n                }\n            },\n            this.siteId,\n        );\n\n        await this.loadContent(false, true);\n    }\n\n    /**\n     * Attempt the quiz.\n     *\n     * @returns Promise resolved when done.\n     */\n    async attemptQuiz(): Promise<void> {\n        if (this.showStatusSpinner || !this.quiz) {\n            // Quiz is being downloaded or synchronized, abort.\n            return;\n        }\n\n        if (!AddonModQuiz.isQuizOffline(this.quiz)) {\n            // Quiz isn't offline, just open it.\n            return this.openQuiz();\n        }\n\n        // Quiz supports offline, check if it needs to be downloaded.\n        // If the site doesn't support check updates, always prefetch it because we cannot tell if there's something new.\n        const isDownloaded = this.currentStatus == CoreConstants.DOWNLOADED;\n\n        if (isDownloaded) {\n            // Already downloaded, open it.\n            return this.openQuiz();\n        }\n\n        // Prefetch the quiz.\n        this.showStatusSpinner = true;\n\n        try {\n            await AddonModQuizPrefetchHandler.prefetch(this.module, this.courseId, true);\n\n            // Success downloading, open quiz.\n            this.openQuiz();\n        } catch (error) {\n            if (this.hasOffline) {\n                // Error downloading but there is something offline, allow continuing it.\n                // If the site doesn't support check updates, continue too because we cannot tell if there's something new.\n                this.openQuiz();\n            } else {\n                CoreDomUtils.showErrorModalDefault(error, 'core.errordownloading', true);\n            }\n        } finally {\n            this.showStatusSpinner = false;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async fetchContent(refresh?: boolean, sync = false, showErrors = false): Promise<void> {\n        // First get the quiz instance.\n        const quiz = await AddonModQuiz.getQuiz(this.courseId, this.module.id);\n\n        this.gradeMethodReadable = AddonModQuiz.getQuizGradeMethod(quiz.grademethod);\n        this.now = Date.now();\n        this.dataRetrieved.emit(quiz);\n        this.description = quiz.intro || this.description;\n        this.candidateQuiz = quiz;\n\n        // Try to get warnings from automatic sync.\n        const warnings = await AddonModQuizSync.getSyncWarnings(quiz.id);\n\n        if (warnings?.length) {\n            // Show warnings and delete them so they aren't shown again.\n            CoreDomUtils.showErrorModal(CoreTextUtils.buildMessage(warnings));\n\n            await AddonModQuizSync.setSyncWarnings(quiz.id, []);\n        }\n\n        if (AddonModQuiz.isQuizOffline(quiz)) {\n            if (sync) {\n                // Try to sync the quiz.\n                try {\n                    await this.syncActivity(showErrors);\n                } catch {\n                    // Ignore errors, keep getting data even if sync fails.\n                    this.autoReview = undefined;\n                }\n            }\n        } else {\n            this.autoReview = undefined;\n            this.showStatusSpinner = false;\n        }\n\n        if (AddonModQuiz.isQuizOffline(quiz)) {\n            // Handle status.\n            this.setStatusListener();\n\n            // Get last synchronization time and check if sync button should be seen.\n            this.syncTime = await AddonModQuizSync.getReadableSyncTime(quiz.id);\n            this.hasOffline = await AddonModQuizSync.hasDataToSync(quiz.id);\n        }\n\n        // Get quiz access info.\n        this.quizAccessInfo = await AddonModQuiz.getQuizAccessInformation(quiz.id, { cmId: this.module.id });\n\n        this.showReviewColumn = this.quizAccessInfo.canreviewmyattempts;\n        this.accessRules = this.quizAccessInfo.accessrules;\n        this.unsupportedRules = AddonModQuiz.getUnsupportedRules(this.quizAccessInfo.activerulenames);\n\n        if (quiz.preferredbehaviour) {\n            this.behaviourSupported = CoreQuestionBehaviourDelegate.isBehaviourSupported(quiz.preferredbehaviour);\n        }\n\n        // Get question types in the quiz.\n        const types = await AddonModQuiz.getQuizRequiredQtypes(quiz.id, { cmId: this.module.id });\n\n        this.unsupportedQuestions = AddonModQuiz.getUnsupportedQuestions(types);\n        this.hasSupportedQuestions = !!types.find((type) => type != 'random' && this.unsupportedQuestions.indexOf(type) == -1);\n\n        await this.getAttempts(quiz);\n\n        // Quiz is ready to be shown, move it to the variable that is displayed.\n        this.quiz = quiz;\n    }\n\n    /**\n     * Get the user attempts in the quiz and the result info.\n     *\n     * @param quiz Quiz instance.\n     * @returns Promise resolved when done.\n     */\n    protected async getAttempts(quiz: AddonModQuizQuizData): Promise<void> {\n        // Always get the best grade because it includes the grade to pass.\n        this.bestGrade = await AddonModQuiz.getUserBestGrade(quiz.id, { cmId: this.module.id });\n\n        // Get access information of last attempt (it also works if no attempts made).\n        this.attemptAccessInfo = await AddonModQuiz.getAttemptAccessInformation(quiz.id, 0, { cmId: this.module.id });\n\n        // Get attempts.\n        const attempts = await AddonModQuiz.getUserAttempts(quiz.id, { cmId: this.module.id });\n\n        this.attempts = await this.treatAttempts(quiz, attempts);\n\n        // Check if user can create/continue attempts.\n        if (this.attempts.length) {\n            const last = this.attempts[this.attempts.length - 1];\n            this.moreAttempts = !AddonModQuiz.isAttemptFinished(last.state) || !this.attemptAccessInfo.isfinished;\n        } else {\n            this.moreAttempts = !this.attemptAccessInfo.isfinished;\n        }\n\n        this.getButtonText(quiz);\n\n        await this.getResultInfo(quiz);\n    }\n\n    /**\n     * Get the text to show in the button. It also sets restriction messages if needed.\n     *\n     * @param quiz Quiz.\n     */\n    protected getButtonText(quiz: AddonModQuizQuizData): void {\n        this.buttonText = '';\n\n        if (quiz.hasquestions !== 0) {\n            if (this.attempts.length && !AddonModQuiz.isAttemptFinished(this.attempts[this.attempts.length - 1].state)) {\n                // Last attempt is unfinished.\n                if (this.quizAccessInfo?.canattempt) {\n                    this.buttonText = 'addon.mod_quiz.continueattemptquiz';\n                } else if (this.quizAccessInfo?.canpreview) {\n                    this.buttonText = 'addon.mod_quiz.continuepreview';\n                }\n\n            } else {\n                // Last attempt is finished or no attempts.\n                if (this.quizAccessInfo?.canattempt) {\n                    this.preventMessages = this.attemptAccessInfo?.preventnewattemptreasons || [];\n                    if (!this.preventMessages.length) {\n                        if (!this.attempts.length) {\n                            this.buttonText = 'addon.mod_quiz.attemptquiznow';\n                        } else {\n                            this.buttonText = 'addon.mod_quiz.reattemptquiz';\n                        }\n                    }\n                } else if (this.quizAccessInfo?.canpreview) {\n                    this.buttonText = 'addon.mod_quiz.previewquiznow';\n                }\n            }\n        }\n\n        if (!this.buttonText) {\n            return;\n        }\n\n        // So far we think a button should be printed, check if they will be allowed to access it.\n        this.preventMessages = this.quizAccessInfo?.preventaccessreasons || [];\n\n        if (!this.moreAttempts) {\n            this.buttonText = '';\n        } else if (this.quizAccessInfo?.canattempt && this.preventMessages.length) {\n            this.buttonText = '';\n        } else if (!this.hasSupportedQuestions || this.unsupportedRules.length || !this.behaviourSupported) {\n            this.buttonText = '';\n        }\n    }\n\n    /**\n     * Get result info to show.\n     *\n     * @param quiz Quiz.\n     * @returns Promise resolved when done.\n     */\n    protected async getResultInfo(quiz: AddonModQuizQuizData): Promise<void> {\n        if (!this.attempts.length || !quiz.showGradeColumn || !this.bestGrade?.hasgrade ||\n            this.gradebookData?.grade === undefined) {\n            this.showResults = false;\n\n            return;\n        }\n\n        const bestGrade = this.bestGrade.grade;\n        const formattedGradebookGrade = AddonModQuiz.formatGrade(this.gradebookData.grade, quiz.decimalpoints);\n        const formattedBestGrade = AddonModQuiz.formatGrade(bestGrade, quiz.decimalpoints);\n        let gradeToShow = formattedGradebookGrade; // By default we show the grade in the gradebook.\n\n        this.showResults = true;\n        this.gradeOverridden = formattedGradebookGrade != formattedBestGrade;\n        this.gradebookFeedback = this.gradebookData.feedback;\n\n        if (bestGrade && bestGrade > this.gradebookData.grade && this.gradebookData.grade == quiz.grade) {\n            // The best grade is higher than the max grade for the quiz.\n            // We'll do like Moodle web and show the best grade instead of the gradebook grade.\n            this.gradeOverridden = false;\n            gradeToShow = formattedBestGrade;\n        }\n\n        if (this.overallStats) {\n            // Show the quiz grade. The message shown is different if the quiz is finished.\n            if (this.moreAttempts) {\n                this.gradeResult = Translate.instant('addon.mod_quiz.gradesofar', { $a: {\n                    method: this.gradeMethodReadable,\n                    mygrade: gradeToShow,\n                    quizgrade: quiz.gradeFormatted,\n                } });\n            } else {\n                const outOfShort = Translate.instant('addon.mod_quiz.outofshort', { $a: {\n                    grade: gradeToShow,\n                    maxgrade: quiz.gradeFormatted,\n                } });\n\n                this.gradeResult = Translate.instant('addon.mod_quiz.yourfinalgradeis', { $a: outOfShort });\n            }\n        }\n\n        if (quiz.showFeedbackColumn) {\n            // Get the quiz overall feedback.\n            const response = await AddonModQuiz.getFeedbackForGrade(quiz.id, this.gradebookData.grade, {\n                cmId: this.module.id,\n            });\n\n            this.overallFeedback = response.feedbacktext;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async logActivity(): Promise<void> {\n        if (!this.quiz) {\n            return; // Shouldn't happen.\n        }\n\n        await CoreUtils.ignoreErrors(AddonModQuiz.logViewQuiz(this.quiz.id));\n\n        this.analyticsLogEvent('mod_quiz_view_quiz');\n    }\n\n    /**\n     * Go to review an attempt that has just been finished.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async goToAutoReview(): Promise<void> {\n        if (!this.autoReview) {\n            return;\n        }\n\n        // If we go to auto review it means an attempt was finished. Check completion status.\n        this.checkCompletion();\n\n        // Verify that user can see the review.\n        const attemptId = this.autoReview.attemptId;\n        this.autoReview = undefined;\n\n        if (this.quizAccessInfo?.canreviewmyattempts) {\n            try {\n                await AddonModQuiz.getAttemptReview(attemptId, { page: -1, cmId: this.module.id });\n\n                await CoreNavigator.navigateToSitePath(\n                    `${AddonModQuizModuleHandlerService.PAGE_NAME}/${this.courseId}/${this.module.id}/review/${attemptId}`,\n                );\n            } catch {\n                // Ignore errors.\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected hasSyncSucceed(result: AddonModQuizSyncResult): boolean {\n        if (result.attemptFinished) {\n            // An attempt was finished, check completion status.\n            this.checkCompletion();\n        }\n\n        // If the sync call isn't rejected it means the sync was successful.\n        return result.updated;\n    }\n\n    /**\n     * User entered the page that contains the component.\n     */\n    async ionViewDidEnter(): Promise<void> {\n        super.ionViewDidEnter();\n\n        if (!this.hasPlayed) {\n            this.autoReview = undefined;\n\n            return;\n        }\n\n        this.hasPlayed = false;\n        let promise = Promise.resolve();\n\n        // Update data when we come back from the player since the attempt status could have changed.\n        // Check if we need to go to review an attempt automatically.\n        if (this.autoReview && this.autoReview.synced) {\n            promise = this.goToAutoReview();\n        }\n\n        // Refresh data.\n        this.showLoading = true;\n        this.content?.scrollToTop();\n\n        await promise;\n        await CoreUtils.ignoreErrors(this.refreshContent(true));\n\n        this.showLoading = false;\n    }\n\n    /**\n     * User left the page that contains the component.\n     */\n    ionViewDidLeave(): void {\n        super.ionViewDidLeave();\n        this.autoReview = undefined;\n    }\n\n    /**\n     * Perform the invalidate content function.\n     *\n     * @returns Resolved when done.\n     */\n    protected async invalidateContent(): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(AddonModQuiz.invalidateQuizData(this.courseId));\n\n        if (this.quiz) {\n            promises.push(AddonModQuiz.invalidateUserAttemptsForUser(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateQuizAccessInformation(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateQuizRequiredQtypes(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateAttemptAccessInformation(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateCombinedReviewOptionsForUser(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateUserBestGradeForUser(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateGradeFromGradebook(this.courseId));\n        }\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Compares sync event data with current data to check if refresh content is needed.\n     *\n     * @param syncEventData Data receiven on sync observer.\n     * @returns True if refresh is needed, false otherwise.\n     */\n    protected isRefreshSyncNeeded(syncEventData: AddonModQuizAutoSyncData): boolean {\n        if (!this.courseId || !this.module) {\n            return false;\n        }\n\n        if (syncEventData.attemptFinished) {\n            // An attempt was finished, check completion status.\n            this.checkCompletion();\n        }\n\n        if (this.quiz && syncEventData.quizId == this.quiz.id) {\n            this.content?.scrollToTop();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Open a quiz to attempt it.\n     */\n    protected openQuiz(): void {\n        this.hasPlayed = true;\n\n        CoreNavigator.navigateToSitePath(\n            `${AddonModQuizModuleHandlerService.PAGE_NAME}/${this.courseId}/${this.module.id}/player`,\n            {\n                params: {\n                    moduleUrl: this.module.url,\n                },\n            },\n        );\n    }\n\n    /**\n     * Displays some data based on the current status.\n     *\n     * @param status The current status.\n     * @param previousStatus The previous status. If not defined, there is no previous status.\n     */\n    protected showStatus(status: string, previousStatus?: string): void {\n        this.showStatusSpinner = status == CoreConstants.DOWNLOADING;\n\n        if (status == CoreConstants.DOWNLOADED && previousStatus == CoreConstants.DOWNLOADING) {\n            // Quiz downloaded now, maybe a new attempt was created. Load content again.\n            this.showLoadingAndFetch();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async sync(): Promise<AddonModQuizSyncResult> {\n        if (!this.candidateQuiz) {\n            return {\n                warnings: [],\n                attemptFinished: false,\n                updated: false,\n            };\n        }\n\n        return AddonModQuizSync.syncQuiz(this.candidateQuiz, true);\n    }\n\n    /**\n     * Treat user attempts.\n     *\n     * @param quiz Quiz data.\n     * @param attempts The attempts to treat.\n     * @returns Promise resolved when done.\n     */\n    protected async treatAttempts(\n        quiz: AddonModQuizQuizData,\n        attempts: AddonModQuizAttemptWSData[],\n    ): Promise<AddonModQuizAttempt[]> {\n        if (!attempts || !attempts.length) {\n            // There are no attempts to treat.\n            quiz.gradeFormatted = AddonModQuiz.formatGrade(quiz.grade, quiz.decimalpoints);\n\n            return [];\n        }\n\n        const lastFinished = AddonModQuiz.getLastFinishedAttemptFromList(attempts);\n        let openReview = false;\n\n        if (this.autoReview && lastFinished && lastFinished.id >= this.autoReview.attemptId) {\n            // User just finished an attempt in offline and it seems it's been synced, since it's finished in online.\n            // Go to the review of this attempt if the user hasn't left this view.\n            if (!this.isDestroyed && this.isCurrentView) {\n                openReview = true;\n            }\n        }\n\n        const [options] = await Promise.all([\n            AddonModQuiz.getCombinedReviewOptions(quiz.id, { cmId: this.module.id }),\n            this.getQuizGrade(),\n            openReview ? this.goToAutoReview() : undefined,\n        ]);\n\n        this.options = options;\n        const grade = this.gradebookData?.grade !== undefined ? this.gradebookData.grade : this.bestGrade?.grade;\n        const quizGrade = AddonModQuiz.formatGrade(grade, quiz.decimalpoints);\n\n        // Calculate data to construct the header of the attempts table.\n        AddonModQuizHelper.setQuizCalculatedData(quiz, this.options);\n\n        this.overallStats = !!lastFinished && this.options.alloptions.marks >= AddonModQuizProvider.QUESTION_OPTIONS_MARK_AND_MAX;\n\n        // Calculate data to show for each attempt.\n        const formattedAttempts = await Promise.all(attempts.map((attempt, index) => {\n            // Highlight the highest grade if appropriate.\n            const shouldHighlight = this.overallStats && quiz.grademethod == AddonModQuizProvider.GRADEHIGHEST &&\n                attempts.length > 1;\n            const isLast = index == attempts.length - 1;\n\n            return AddonModQuizHelper.setAttemptCalculatedData(quiz, attempt, shouldHighlight, quizGrade, isLast);\n        }));\n\n        return formattedAttempts;\n    }\n\n    /**\n     * Get quiz grade data.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async getQuizGrade(): Promise<void> {\n        try {\n            // Get gradebook grade.\n            const data = await AddonModQuiz.getGradeFromGradebook(this.courseId, this.module.id);\n\n            if (data) {\n                const grade = data.graderaw ?? (data.grade !== undefined && data.grade !== null ? Number(data.grade) : undefined);\n\n                this.gradebookData = {\n                    grade: safeNumber(grade),\n                    feedback: data.feedback,\n                };\n            }\n        } catch {\n            // Fallback to quiz best grade if failure or not found.\n            this.gradebookData = {\n                grade: this.bestGrade?.grade,\n            };\n        }\n    }\n\n    /**\n     * Go to page to view the attempt details.\n     *\n     * @returns Promise resolved when done.\n     */\n    async viewAttempt(attemptId: number): Promise<void> {\n        await CoreNavigator.navigateToSitePath(\n            `${AddonModQuizModuleHandlerService.PAGE_NAME}/${this.courseId}/${this.module.id}/attempt/${attemptId}`,\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n\n        this.finishedObserver?.off();\n    }\n\n}\n","<!-- Buttons to add to the header. -->\n<core-navbar-buttons slot=\"end\">\n    <ion-button fill=\"clear\" (click)=\"openModuleSummary()\" aria-haspopup=\"true\" [attr.aria-label]=\"'core.info' | translate\">\n        <ion-icon name=\"fas-circle-info\" slot=\"icon-only\" aria-hidden=\"true\" />\n    </ion-button>\n</core-navbar-buttons>\n\n<!-- Content. -->\n<core-loading [hideUntil]=\"!showLoading\">\n\n    <!-- Activity info. -->\n    <core-course-module-info [module]=\"module\" [description]=\"description\" [component]=\"component\" [componentId]=\"componentId\"\n        [courseId]=\"courseId\" [hasDataToSync]=\"buttonText && hasOffline\" (completionChanged)=\"onCompletionChange()\" />\n\n    <!-- Access rules description messages. -->\n    <ion-card *ngIf=\"gradeMethodReadable || accessRules.length || syncTime\">\n        <ion-list>\n            <ion-item class=\"ion-text-wrap\" *ngFor=\"let rule of accessRules\">\n                <ion-label>\n                    <p>{{ rule }}</p>\n                </ion-label>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"gradeMethodReadable\">\n                <ion-label>\n                    <p class=\"item-heading\">{{ 'addon.mod_quiz.grademethod' | translate }}</p>\n                    <p>{{ gradeMethodReadable }}</p>\n                </ion-label>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"bestGrade && bestGrade.gradetopass && quiz && quiz.gradeFormatted\">\n                <ion-label>\n                    <p class=\"item-heading\">{{ 'core.grades.gradepass' | translate }}</p>\n                    <p>{{ 'addon.mod_quiz.outof' | translate: { $a: {\n                        grade: bestGrade.gradetopass,\n                        maxgrade: quiz.gradeFormatted\n                        } } }}</p>\n                </ion-label>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"syncTime\">\n                <ion-label>\n                    <p class=\"item-heading\">{{ 'core.lastsync' | translate }}</p>\n                    <p>{{ syncTime }}</p>\n                </ion-label>\n            </ion-item>\n        </ion-list>\n    </ion-card>\n\n    <!-- List of user attempts. -->\n    <ion-card class=\"addon-mod_quiz-table\" *ngIf=\"quiz && attempts.length\">\n        <ion-card-header class=\"ion-text-wrap\">\n            <ion-card-title>{{ 'addon.mod_quiz.summaryofattempts' | translate }}</ion-card-title>\n        </ion-card-header>\n        <ion-card-content role=\"table\">\n            <!-- \"Header\" of the table -->\n            <ion-item class=\"ion-text-wrap addon-mod_quiz-table-header hide-detail\" [detail]=\"true\">\n                <ion-label role=\"rowgroup\">\n                    <ion-row class=\"ion-align-items-center\" role=\"row\">\n                        <ion-col class=\"ion-text-center\" *ngIf=\"quiz.showAttemptColumn\" role=\"columnheader\">\n                            <strong class=\"ion-hide-md-up\" aria-hidden=\"true\">#</strong>\n                            <span class=\"sr-only ion-hide-md-up\">{{ 'addon.mod_quiz.attemptnumber' | translate }}</span>\n                            <strong class=\"ion-hide-md-down\">{{ 'addon.mod_quiz.attemptnumber' | translate }}</strong>\n                        </ion-col>\n                        <ion-col size=\"7\" role=\"columnheader\">\n                            <strong>{{ 'addon.mod_quiz.attemptstate' | translate }}</strong>\n                        </ion-col>\n                        <ion-col class=\"ion-text-center ion-hide-md-down\" *ngIf=\"quiz.showMarkColumn\" role=\"columnheader\">\n                            <strong>{{ 'addon.mod_quiz.marks' | translate }} / {{ quiz.sumGradesFormatted }}</strong>\n                        </ion-col>\n                        <ion-col class=\"ion-text-center\" *ngIf=\"quiz.showGradeColumn\" role=\"columnheader\">\n                            <strong>{{ 'addon.mod_quiz.grade' | translate }} / {{ quiz.gradeFormatted }}</strong>\n                        </ion-col>\n                    </ion-row>\n                </ion-label>\n            </ion-item>\n            <div role=\"rowgroup\">\n                <!-- List of attempts. -->\n                <ion-item button [detail]=\"true\" *ngFor=\"let attempt of attempts\" class=\"ion-text-wrap\"\n                    [ngClass]='{\"addon-mod_quiz-highlighted\": attempt.highlightGrade}' [attr.aria-label]=\"'core.seemoredetail' | translate\"\n                    (click)=\"viewAttempt(attempt.id)\">\n                    <ion-label>\n                        <ion-row class=\"ion-align-items-center\" role=\"row\">\n                            <ion-col class=\"ion-text-center\" *ngIf=\"quiz.showAttemptColumn && attempt.preview\" role=\"cell\">\n                                {{ 'addon.mod_quiz.preview' | translate }}\n                            </ion-col>\n                            <ion-col class=\"ion-text-center\" *ngIf=\"quiz.showAttemptColumn && !attempt.preview\" role=\"cell\">\n                                {{ attempt.attempt }}\n                            </ion-col>\n                            <ion-col size=\"7\" role=\"cell\">\n                                <p *ngFor=\"let sentence of attempt.readableState\">{{ sentence }}</p>\n                            </ion-col>\n                            <ion-col class=\"ion-text-center ion-hide-md-down\" *ngIf=\"quiz.showMarkColumn\" role=\"cell\">\n                                <p>{{ attempt.readableMark }}</p>\n                            </ion-col>\n                            <ion-col class=\"ion-text-center\" *ngIf=\"quiz.showGradeColumn\" role=\"cell\">\n                                <p>{{ attempt.readableGrade }}</p>\n                            </ion-col>\n                        </ion-row>\n                    </ion-label>\n                </ion-item>\n            </div>\n        </ion-card-content>\n    </ion-card>\n\n    <!-- Result info. -->\n    <ion-card *ngIf=\"quiz && showResults &&\n        (gradeResult || gradeOverridden || gradebookFeedback || (quiz.showFeedbackColumn && overallFeedback))\">\n        <ion-list>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"gradeResult\">\n                <ion-label>{{ gradeResult }}</ion-label>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"gradeOverridden\">\n                <ion-label>{{ 'core.course.overriddennotice' | translate }}</ion-label>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"gradebookFeedback\">\n                <ion-label>\n                    <p class=\"item-heading\">{{ 'addon.mod_quiz.comment' | translate }}</p>\n                    <p>\n                        <core-format-text [component]=\"component\" [componentId]=\"componentId\" [text]=\"gradebookFeedback\"\n                            contextLevel=\"module\" [contextInstanceId]=\"module.id\" [courseId]=\"courseId\" />\n                    </p>\n                </ion-label>\n            </ion-item>\n            <ion-item class=\"ion-text-wrap\" *ngIf=\"quiz.showFeedbackColumn && overallFeedback\">\n                <ion-label>\n                    <p class=\"item-heading\">{{ 'addon.mod_quiz.overallfeedback' | translate }}</p>\n                    <p>\n                        <core-format-text [component]=\"component\" [componentId]=\"componentId\" [text]=\"overallFeedback\" contextLevel=\"module\"\n                            [contextInstanceId]=\"module.id\" [courseId]=\"courseId\" />\n                    </p>\n                </ion-label>\n            </ion-item>\n        </ion-list>\n    </ion-card>\n\n    <!-- More data. -->\n    <ng-container *ngIf=\"quiz\">\n        <!-- Error messages. -->\n        <ion-card class=\"core-danger-card addon-mod_quiz-prevent-messages\">\n            <ion-item class=\"ion-text-wrap\" *ngFor=\"let message of preventMessages\">\n                <ion-label>\n                    <p>{{ message }}</p>\n                </ion-label>\n            </ion-item>\n        </ion-card>\n        <ion-card class=\"core-danger-card addon-mod_quiz-no-questions\" *ngIf=\"quiz.hasquestions === 0\">\n            <ion-item class=\"ion-text-wrap\">\n                <ion-label>\n                    <p>{{ 'addon.mod_quiz.noquestions' | translate }}</p>\n                </ion-label>\n            </ion-item>\n        </ion-card>\n        <ion-card class=\"core-danger-card addon-mod_quiz-unsupported-questions\"\n            *ngIf=\"!hasSupportedQuestions && unsupportedQuestions.length\">\n            <ion-item class=\"ion-text-wrap\">\n                <ion-label>\n                    <p class=\"item-heading\">{{ 'addon.mod_quiz.errorquestionsnotsupported' | translate }}</p>\n                    <p *ngFor=\"let type of unsupportedQuestions\"\n                        class=\"addon-mod_quiz-unsupported-question addon-mod_quiz-unsupported-question-{{type}}\">\n                        {{ type }}\n                    </p>\n                </ion-label>\n            </ion-item>\n        </ion-card>\n        <ion-card class=\"core-danger-card addon-mod_quiz-unsupported-rules\" *ngIf=\"unsupportedRules.length\">\n            <ion-item class=\"ion-text-wrap\">\n                <ion-label>\n                    <p class=\"item-heading\">{{ 'addon.mod_quiz.errorrulesnotsupported' | translate }}</p>\n                    <p *ngFor=\"let name of unsupportedRules\"\n                        class=\"addon-mod_quiz-unsupported-rule addon-mod_quiz-unsupported-rule-{{name}}\">\n                        {{ name }}\n                    </p>\n                </ion-label>\n            </ion-item>\n        </ion-card>\n        <ion-card class=\"core-danger-card addon-mod_quiz-unsupported-behaviours\" *ngIf=\"behaviourSupported === false\">\n            <ion-item class=\"ion-text-wrap\">\n                <ion-label>\n                    <p class=\"item-heading\">{{ 'addon.mod_quiz.errorbehaviournotsupported' | translate }}</p>\n                    <p class=\"addon-mod_quiz-unsupported-behaviour\">{{ quiz.preferredbehaviour }}</p>\n                </ion-label>\n            </ion-item>\n        </ion-card>\n\n        <!-- Other warnings. -->\n        <ion-card class=\"core-warning-card\" *ngIf=\"hasSupportedQuestions && unsupportedQuestions.length\">\n            <ion-item class=\"ion-text-wrap\">\n                <ion-label>\n                    <p class=\"item-heading\">{{ 'addon.mod_quiz.canattemptbutnotsubmit' | translate }}</p>\n                    <p>{{ 'addon.mod_quiz.warningquestionsnotsupported' | translate }}</p>\n                    <p *ngFor=\"let type of unsupportedQuestions\">{{ type }}</p>\n                </ion-label>\n            </ion-item>\n        </ion-card>\n    </ng-container>\n\n    <div collapsible-footer *ngIf=\"!showLoading\" slot=\"fixed\">\n        <div class=\"list-item-limited-width\" *ngIf=\"quiz\">\n            <!-- Button to start/continue. -->\n            <ion-button *ngIf=\"buttonText\" expand=\"block\" (click)=\"attemptQuiz()\" class=\"ion-margin ion-text-wrap\"\n                [disabled]=\"showStatusSpinner\">\n                <ion-spinner *ngIf=\"showStatusSpinner\" slot=\"start\" aria-hidden=\"true\" />\n                {{ buttonText | translate }}\n            </ion-button>\n\n            <!-- Button to open in browser if it cannot be attempted in the app. -->\n            <ion-button class=\"ion-text-wrap ion-margin\" *ngIf=\"!buttonText && ((!hasSupportedQuestions && unsupportedQuestions.length) ||\n                unsupportedRules.length || behaviourSupported === false)\" expand=\"block\" [href]=\"module.url\" core-link\n                [showBrowserWarning]=\"false\">\n                {{ 'core.openinbrowser' | translate }}\n                <ion-icon name=\"fas-up-right-from-square\" slot=\"end\" aria-hidden=\"true\" />\n            </ion-button>\n        </div>\n\n        <core-course-module-navigation [courseId]=\"courseId\" [currentModuleId]=\"module.id\" />\n\n    </div>\n</core-loading>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}