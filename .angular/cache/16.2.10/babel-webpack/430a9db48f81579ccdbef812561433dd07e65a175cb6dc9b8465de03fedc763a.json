{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDelegate } from '@classes/delegate';\nimport { CoreError } from '@classes/errors/error';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to interact with user profile fields.\n */\nexport class CoreUserProfileFieldDelegateService extends CoreDelegate {\n  constructor() {\n    super('CoreUserProfileFieldDelegate', true);\n    this.handlerNameProperty = 'type';\n  }\n  /**\n   * Get the type of a field.\n   *\n   * @param field The field to get its type.\n   * @returns The field type.\n   */\n  getType(field) {\n    return ('type' in field ? field.type : field.datatype) || '';\n  }\n  /**\n   * Get the component to use to display an user field.\n   *\n   * @param field User field to get the directive for.\n   * @param signup True if user is in signup page.\n   * @returns Promise resolved with component to use, undefined if not found.\n   */\n  getComponent(field, signup) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const type = _this.getType(field);\n      try {\n        if (signup) {\n          return yield _this.executeFunction(type, 'getComponent', []);\n        } else {\n          return yield _this.executeFunctionOnEnabled(type, 'getComponent', []);\n        }\n      } catch (error) {\n        _this.logger.error('Error getting component for field', type, error);\n      }\n    })();\n  }\n  /**\n   * Get the data to send for a certain field based on the input data.\n   *\n   * @param field User field to get the data for.\n   * @param signup True if user is in signup page.\n   * @param registerAuth Register auth method. E.g. 'email'.\n   * @param formValues Form values.\n   * @returns Data to send for the field.\n   */\n  getDataForField(field, signup, registerAuth, formValues) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const type = _this2.getType(field);\n      const handler = _this2.getHandler(type, !signup);\n      if (handler) {\n        const name = 'profile_field_' + field.shortname;\n        if (handler.getData) {\n          return handler.getData(field, signup, registerAuth, formValues);\n        } else if (field.shortname && formValues[name] !== undefined) {\n          // Handler doesn't implement the function, but the form has data for the field.\n          return {\n            type: type,\n            name: name,\n            value: formValues[name]\n          };\n        }\n      }\n      throw new CoreError('User profile field handler not found.');\n    })();\n  }\n  /**\n   * Get the data to send for a list of fields based on the input data.\n   *\n   * @param fields User fields to get the data for.\n   * @param signup True if user is in signup page.\n   * @param registerAuth Register auth method. E.g. 'email'.\n   * @param formValues Form values.\n   * @returns Data to send.\n   */\n  getDataForFields(fields, signup = false, registerAuth = '', formValues) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!fields) {\n        return [];\n      }\n      const result = [];\n      yield Promise.all(fields.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (field) {\n          try {\n            const data = yield _this3.getDataForField(field, signup, registerAuth, formValues);\n            if (data) {\n              result.push(data);\n            }\n          } catch (_unused) {\n            // Ignore errors.\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      return result;\n    })();\n  }\n  /**\n   * Check if any of the profile fields is not supported in the app.\n   *\n   * @param fields List of fields.\n   * @returns Whether any of the profile fields is not supported in the app.\n   */\n  hasRequiredUnsupportedField(fields) {\n    if (!fields || !fields.length) {\n      return false;\n    }\n    return fields.some(field => field.required && !this.hasHandler(this.getType(field)));\n  }\n}\n_class = CoreUserProfileFieldDelegateService;\n_class.ɵfac = function CoreUserProfileFieldDelegateService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreUserProfileFieldDelegate = makeSingleton(CoreUserProfileFieldDelegateService);","map":{"version":3,"names":["CoreDelegate","CoreError","makeSingleton","CoreUserProfileFieldDelegateService","constructor","handlerNameProperty","getType","field","type","datatype","getComponent","signup","_this","_asyncToGenerator","executeFunction","executeFunctionOnEnabled","error","logger","getDataForField","registerAuth","formValues","_this2","handler","getHandler","name","shortname","getData","undefined","value","getDataForFields","fields","_this3","result","Promise","all","map","_ref","data","push","_unused","_x","apply","arguments","hasRequiredUnsupportedField","length","some","required","hasHandler","factory","ɵfac","providedIn","CoreUserProfileFieldDelegate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/user/services/user-profile-field-delegate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\n\nimport { CoreDelegate, CoreDelegateHandler } from '@classes/delegate';\nimport { CoreError } from '@classes/errors/error';\nimport { AuthEmailSignupProfileField } from '@features/login/services/login-helper';\nimport { makeSingleton } from '@singletons';\nimport { CoreUserProfileField } from './user';\n\n/**\n * Interface that all user profile field handlers must implement.\n */\nexport interface CoreUserProfileFieldHandler extends CoreDelegateHandler {\n    /**\n     * Type of the field the handler supports. E.g. 'checkbox'.\n     */\n    type: string;\n\n    /**\n     * Return the Component to use to display the user profile field.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     *\n     * @returns The component (or promise resolved with component) to use, undefined if not found.\n     */\n    getComponent(): Type<unknown> | Promise<Type<unknown>>;\n\n    /**\n     * Get the data to send for the field based on the input data.\n     *\n     * @param field User field to get the data for.\n     * @param signup True if user is in signup page.\n     * @param registerAuth Register auth method. E.g. 'email'.\n     * @param formValues Form Values.\n     * @returns Data to send for the field.\n     */\n    getData?(\n        field: AuthEmailSignupProfileField | CoreUserProfileField,\n        signup: boolean,\n        registerAuth: string,\n        formValues: Record<string, unknown>,\n    ): Promise<CoreUserProfileFieldHandlerData | undefined>;\n}\n\nexport interface CoreUserProfileFieldHandlerData {\n    /**\n     * Name of the custom field.\n     */\n    name: string;\n\n    /**\n     * The type of the custom field\n     */\n    type: string;\n\n    /**\n     * Value of the custom field.\n     */\n    value: unknown;\n}\n\n/**\n * Service to interact with user profile fields.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreUserProfileFieldDelegateService extends CoreDelegate<CoreUserProfileFieldHandler> {\n\n    protected handlerNameProperty = 'type';\n\n    constructor() {\n        super('CoreUserProfileFieldDelegate', true);\n    }\n\n    /**\n     * Get the type of a field.\n     *\n     * @param field The field to get its type.\n     * @returns The field type.\n     */\n    protected getType(field: AuthEmailSignupProfileField | CoreUserProfileField): string {\n        return ('type' in field ? field.type : field.datatype) || '';\n    }\n\n    /**\n     * Get the component to use to display an user field.\n     *\n     * @param field User field to get the directive for.\n     * @param signup True if user is in signup page.\n     * @returns Promise resolved with component to use, undefined if not found.\n     */\n    async getComponent(\n        field: AuthEmailSignupProfileField | CoreUserProfileField,\n        signup: boolean,\n    ): Promise<Type<unknown> | undefined> {\n        const type = this.getType(field);\n\n        try {\n            if (signup) {\n                return await this.executeFunction(type, 'getComponent', []);\n            } else {\n                return await this.executeFunctionOnEnabled(type, 'getComponent', []);\n            }\n        } catch (error) {\n            this.logger.error('Error getting component for field', type, error);\n        }\n    }\n\n    /**\n     * Get the data to send for a certain field based on the input data.\n     *\n     * @param field User field to get the data for.\n     * @param signup True if user is in signup page.\n     * @param registerAuth Register auth method. E.g. 'email'.\n     * @param formValues Form values.\n     * @returns Data to send for the field.\n     */\n    async getDataForField(\n        field: AuthEmailSignupProfileField | CoreUserProfileField,\n        signup: boolean,\n        registerAuth: string,\n        formValues: Record<string, unknown>,\n    ): Promise<CoreUserProfileFieldHandlerData | undefined> {\n        const type = this.getType(field);\n        const handler = this.getHandler(type, !signup);\n\n        if (handler) {\n            const name = 'profile_field_' + field.shortname;\n\n            if (handler.getData) {\n                return handler.getData(field, signup, registerAuth, formValues);\n            } else if (field.shortname && formValues[name] !== undefined) {\n                // Handler doesn't implement the function, but the form has data for the field.\n                return {\n                    type: type,\n                    name: name,\n                    value: formValues[name],\n                };\n            }\n        }\n\n        throw new CoreError('User profile field handler not found.');\n    }\n\n    /**\n     * Get the data to send for a list of fields based on the input data.\n     *\n     * @param fields User fields to get the data for.\n     * @param signup True if user is in signup page.\n     * @param registerAuth Register auth method. E.g. 'email'.\n     * @param formValues Form values.\n     * @returns Data to send.\n     */\n    async getDataForFields(\n        fields: (AuthEmailSignupProfileField | CoreUserProfileField)[] | undefined,\n        signup: boolean = false,\n        registerAuth: string = '',\n        formValues: Record<string, unknown>,\n    ): Promise<CoreUserProfileFieldHandlerData[]> {\n        if (!fields) {\n            return [];\n        }\n\n        const result: CoreUserProfileFieldHandlerData[] = [];\n\n        await Promise.all(fields.map(async (field) => {\n            try {\n                const data = await this.getDataForField(field, signup, registerAuth, formValues);\n\n                if (data) {\n                    result.push(data);\n                }\n            } catch {\n                // Ignore errors.\n            }\n        }));\n\n        return result;\n    }\n\n    /**\n     * Check if any of the profile fields is not supported in the app.\n     *\n     * @param fields List of fields.\n     * @returns Whether any of the profile fields is not supported in the app.\n     */\n    hasRequiredUnsupportedField(fields?: AuthEmailSignupProfileField[]): boolean {\n        if (!fields || !fields.length) {\n            return false;\n        }\n\n        return fields.some((field) => field.required && !this.hasHandler(this.getType(field)));\n    }\n\n}\n\nexport const CoreUserProfileFieldDelegate = makeSingleton(CoreUserProfileFieldDelegateService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}