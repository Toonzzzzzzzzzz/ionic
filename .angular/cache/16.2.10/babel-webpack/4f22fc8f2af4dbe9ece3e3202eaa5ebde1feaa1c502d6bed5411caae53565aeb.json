{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreFile } from '@services/file';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModGlossaryOffline } from './glossary-offline';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Helper to gather some common functions for glossary.\n */\nexport class AddonModGlossaryHelperProvider {\n  /**\n   * Delete stored attachment files for a new entry.\n   *\n   * @param glossaryId Glossary ID.\n   * @param entryName The name of the entry.\n   * @param timeCreated The time the entry was created.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when deleted.\n   */\n  deleteStoredFiles(glossaryId, entryName, timeCreated, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModGlossaryOffline.getEntryFolder(glossaryId, entryName, timeCreated, siteId);\n      yield CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    })();\n  }\n  /**\n   * Get a list of stored attachment files for a new entry. See AddonModGlossaryHelperProvider#storeFiles.\n   *\n   * @param glossaryId lossary ID.\n   * @param entryName The name of the entry.\n   * @param timeCreated The time the entry was created.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getStoredFiles(glossaryId, entryName, timeCreated, siteId) {\n    return _asyncToGenerator(function* () {\n      const folderPath = yield AddonModGlossaryOffline.getEntryFolder(glossaryId, entryName, timeCreated, siteId);\n      return CoreFileUploader.getStoredFiles(folderPath);\n    })();\n  }\n  /**\n   * Given a list of files (either online files or local files), store the local files in a local folder\n   * to be submitted later.\n   *\n   * @param glossaryId Glossary ID.\n   * @param entryName The name of the entry.\n   * @param timeCreated The time the entry was created.\n   * @param files List of files.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if success, rejected otherwise.\n   */\n  storeFiles(glossaryId, entryName, timeCreated, files, siteId) {\n    return _asyncToGenerator(function* () {\n      // Get the folder where to store the files.\n      const folderPath = yield AddonModGlossaryOffline.getEntryFolder(glossaryId, entryName, timeCreated, siteId);\n      return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    })();\n  }\n}\n_class = AddonModGlossaryHelperProvider;\n_class.ɵfac = function AddonModGlossaryHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModGlossaryHelper = makeSingleton(AddonModGlossaryHelperProvider);","map":{"version":3,"names":["CoreFileUploader","CoreFile","CoreUtils","AddonModGlossaryOffline","makeSingleton","AddonModGlossaryHelperProvider","deleteStoredFiles","glossaryId","entryName","timeCreated","siteId","_asyncToGenerator","folderPath","getEntryFolder","ignoreErrors","removeDir","getStoredFiles","storeFiles","files","storeFilesToUpload","factory","ɵfac","providedIn","AddonModGlossaryHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/services/glossary-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { FileEntry } from '@awesome-cordova-plugins/file/ngx';\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { CoreFile } from '@services/file';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModGlossaryOffline } from './glossary-offline';\nimport { makeSingleton } from '@singletons';\nimport { CoreFileEntry } from '@services/file-helper';\n\n/**\n * Helper to gather some common functions for glossary.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModGlossaryHelperProvider {\n\n    /**\n     * Delete stored attachment files for a new entry.\n     *\n     * @param glossaryId Glossary ID.\n     * @param entryName The name of the entry.\n     * @param timeCreated The time the entry was created.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when deleted.\n     */\n    async deleteStoredFiles(glossaryId: number, entryName: string, timeCreated: number, siteId?: string): Promise<void> {\n        const folderPath = await AddonModGlossaryOffline.getEntryFolder(glossaryId, entryName, timeCreated, siteId);\n\n        await CoreUtils.ignoreErrors(CoreFile.removeDir(folderPath));\n    }\n\n    /**\n     * Get a list of stored attachment files for a new entry. See AddonModGlossaryHelperProvider#storeFiles.\n     *\n     * @param glossaryId lossary ID.\n     * @param entryName The name of the entry.\n     * @param timeCreated The time the entry was created.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getStoredFiles(glossaryId: number, entryName: string, timeCreated: number, siteId?: string): Promise<FileEntry[]> {\n        const folderPath = await AddonModGlossaryOffline.getEntryFolder(glossaryId, entryName, timeCreated, siteId);\n\n        return CoreFileUploader.getStoredFiles(folderPath);\n    }\n\n    /**\n     * Given a list of files (either online files or local files), store the local files in a local folder\n     * to be submitted later.\n     *\n     * @param glossaryId Glossary ID.\n     * @param entryName The name of the entry.\n     * @param timeCreated The time the entry was created.\n     * @param files List of files.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if success, rejected otherwise.\n     */\n    async storeFiles(\n        glossaryId: number,\n        entryName: string,\n        timeCreated: number,\n        files: CoreFileEntry[],\n        siteId?: string,\n    ): Promise<CoreFileUploaderStoreFilesResult> {\n        // Get the folder where to store the files.\n        const folderPath = await AddonModGlossaryOffline.getEntryFolder(glossaryId, entryName, timeCreated, siteId);\n\n        return CoreFileUploader.storeFilesToUpload(folderPath, files);\n    }\n\n}\n\nexport const AddonModGlossaryHelper = makeSingleton(AddonModGlossaryHelperProvider);\n"],"mappings":";;AAgBA,SAASA,gBAAgB,QAA0C,8CAA8C;AACjH,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,uBAAuB,QAAQ,oBAAoB;AAC5D,SAASC,aAAa,QAAQ,aAAa;;AAG3C;;;AAIA,OAAM,MAAOC,8BAA8B;EAEvC;;;;;;;;;EASMC,iBAAiBA,CAACC,UAAkB,EAAEC,SAAiB,EAAEC,WAAmB,EAAEC,MAAe;IAAA,OAAAC,iBAAA;MAC/F,MAAMC,UAAU,SAAST,uBAAuB,CAACU,cAAc,CAACN,UAAU,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,CAAC;MAE3G,MAAMR,SAAS,CAACY,YAAY,CAACb,QAAQ,CAACc,SAAS,CAACH,UAAU,CAAC,CAAC;IAAC;EACjE;EAEA;;;;;;;;;EASMI,cAAcA,CAACT,UAAkB,EAAEC,SAAiB,EAAEC,WAAmB,EAAEC,MAAe;IAAA,OAAAC,iBAAA;MAC5F,MAAMC,UAAU,SAAST,uBAAuB,CAACU,cAAc,CAACN,UAAU,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,CAAC;MAE3G,OAAOV,gBAAgB,CAACgB,cAAc,CAACJ,UAAU,CAAC;IAAC;EACvD;EAEA;;;;;;;;;;;EAWMK,UAAUA,CACZV,UAAkB,EAClBC,SAAiB,EACjBC,WAAmB,EACnBS,KAAsB,EACtBR,MAAe;IAAA,OAAAC,iBAAA;MAEf;MACA,MAAMC,UAAU,SAAST,uBAAuB,CAACU,cAAc,CAACN,UAAU,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,CAAC;MAE3G,OAAOV,gBAAgB,CAACmB,kBAAkB,CAACP,UAAU,EAAEM,KAAK,CAAC;IAAC;EAClE;;SAtDSb,8BAA8B;;mBAA9BA,MAA8B;AAAA;;SAA9BA,MAA8B;EAAAe,OAAA,EAA9Bf,MAA8B,CAAAgB,IAAA;EAAAC,UAAA,EADjB;AAAM;AA2DhC,OAAO,MAAMC,sBAAsB,GAAGnB,aAAa,CAACC,8BAA8B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}