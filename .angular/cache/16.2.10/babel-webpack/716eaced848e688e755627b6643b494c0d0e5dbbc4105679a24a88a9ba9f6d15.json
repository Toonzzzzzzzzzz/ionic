{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton } from '@singletons';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreEnrolDelegate } from './enrol-delegate';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides functions for enrolment plugins.\n */\nexport class CoreEnrolService {\n  /**\n   * Get the enrolment methods from a course.\n   * Please notice that this function will only return methods that implement get_enrol_info, it won't return all\n   * enrolment methods in a course.\n   *\n   * @param courseId ID of the course.\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved with the methods.\n   */\n  getCourseEnrolmentMethods(courseId, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        courseid: courseId\n      };\n      const preSets = {\n        cacheKey: _this.getCourseEnrolmentMethodsCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      };\n      return site.read('core_enrol_get_course_enrolment_methods', params, preSets);\n    })();\n  }\n  /**\n   * Get the enrolment methods from a course that are enabled and supported by the app.\n   * Please notice that this function will only return methods that implement get_enrol_info, it won't return all\n   * enrolment methods in a course.\n   *\n   * @param courseId ID of the course.\n   * @param options Options.\n   * @returns Promise resolved with the methods.\n   */\n  getSupportedCourseEnrolmentMethods(courseId, options = {}) {\n    return _asyncToGenerator(function* () {\n      const methods = yield CoreEnrol.getCourseEnrolmentMethods(courseId, options.siteId);\n      return methods.filter(method => {\n        if (options.type && method.type !== options.type) {\n          return false;\n        }\n        return CoreEnrolDelegate.isEnrolSupported(method.type) && CoreUtils.isTrueOrOne(method.status) && (!options.action || CoreEnrolDelegate.getEnrolmentAction(method.type) === options.action);\n      });\n    })();\n  }\n  /**\n   * Get cache key for get course enrolment methods WS call.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getCourseEnrolmentMethodsCacheKey(courseId) {\n    return CoreEnrolService.ROOT_CACHE_KEY + 'enrolmentmethods:' + courseId;\n  }\n  /**\n   * Invalidates get course enrolment methods WS call.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site Id. If not defined, use current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateCourseEnrolmentMethods(courseId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield Promise.all([site.invalidateWsCacheForKey(_this2.getCourseEnrolmentMethodsCacheKey(courseId)), site.invalidateWsCacheForKey(`mmCourses:enrolmentmethods:${courseId}`) // @todo 4.4 Remove after 4.3 release.\n      ]);\n    })();\n  }\n}\n_class = CoreEnrolService;\n_class.ROOT_CACHE_KEY = 'CoreEnrol:';\n_class.ɵfac = function CoreEnrolService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreEnrol = makeSingleton(CoreEnrolService);","map":{"version":3,"names":["makeSingleton","CoreSite","CoreSites","CoreUtils","CoreEnrolDelegate","CoreEnrolService","getCourseEnrolmentMethods","courseId","siteId","_this","_asyncToGenerator","site","getSite","params","courseid","preSets","cacheKey","getCourseEnrolmentMethodsCacheKey","updateFrequency","FREQUENCY_RARELY","read","getSupportedCourseEnrolmentMethods","options","methods","CoreEnrol","filter","method","type","isEnrolSupported","isTrueOrOne","status","action","getEnrolmentAction","ROOT_CACHE_KEY","invalidateCourseEnrolmentMethods","_this2","Promise","all","invalidateWsCacheForKey","_class","factory","ɵfac","providedIn"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/enrol/services/enrol.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { makeSingleton } from '@singletons';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreEnrolAction, CoreEnrolDelegate } from './enrol-delegate';\n\n/**\n * Service that provides functions for enrolment plugins.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreEnrolService {\n\n    protected static readonly ROOT_CACHE_KEY = 'CoreEnrol:';\n\n    /**\n     * Get the enrolment methods from a course.\n     * Please notice that this function will only return methods that implement get_enrol_info, it won't return all\n     * enrolment methods in a course.\n     *\n     * @param courseId ID of the course.\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved with the methods.\n     */\n    async getCourseEnrolmentMethods(courseId: number, siteId?: string): Promise<CoreEnrolEnrolmentMethod[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: CoreEnrolGetCourseEnrolmentMethodsWSParams = {\n            courseid: courseId,\n        };\n        const preSets = {\n            cacheKey: this.getCourseEnrolmentMethodsCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n        };\n\n        return site.read<CoreEnrolGetCourseEnrolmentMethodsWSResponse>('core_enrol_get_course_enrolment_methods', params, preSets);\n    }\n\n    /**\n     * Get the enrolment methods from a course that are enabled and supported by the app.\n     * Please notice that this function will only return methods that implement get_enrol_info, it won't return all\n     * enrolment methods in a course.\n     *\n     * @param courseId ID of the course.\n     * @param options Options.\n     * @returns Promise resolved with the methods.\n     */\n    async getSupportedCourseEnrolmentMethods(\n        courseId: number,\n        options: CoreEnrolGetSupportedMethodsOptions = {},\n    ): Promise<CoreEnrolEnrolmentMethod[]> {\n        const methods = await CoreEnrol.getCourseEnrolmentMethods(courseId, options.siteId);\n\n        return methods.filter((method) => {\n            if (options.type && method.type !== options.type) {\n                return false;\n            }\n\n            return CoreEnrolDelegate.isEnrolSupported(method.type) && CoreUtils.isTrueOrOne(method.status) &&\n                (!options.action || CoreEnrolDelegate.getEnrolmentAction(method.type) === options.action);\n        });\n    }\n\n    /**\n     * Get cache key for get course enrolment methods WS call.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getCourseEnrolmentMethodsCacheKey(courseId: number): string {\n        return CoreEnrolService.ROOT_CACHE_KEY + 'enrolmentmethods:' + courseId;\n    }\n\n    /**\n     * Invalidates get course enrolment methods WS call.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site Id. If not defined, use current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateCourseEnrolmentMethods(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await Promise.all([\n            site.invalidateWsCacheForKey(this.getCourseEnrolmentMethodsCacheKey(courseId)),\n            site.invalidateWsCacheForKey(`mmCourses:enrolmentmethods:${courseId}`), // @todo 4.4 Remove after 4.3 release.\n        ]);\n    }\n\n}\n\nexport const CoreEnrol = makeSingleton(CoreEnrolService);\n\n/**\n * Params of core_enrol_get_course_enrolment_methods WS.\n */\ntype CoreEnrolGetCourseEnrolmentMethodsWSParams = {\n    courseid: number; // Course id.\n};\n\n/**\n * Data returned by core_enrol_get_course_enrolment_methods WS.\n */\ntype CoreEnrolGetCourseEnrolmentMethodsWSResponse = CoreEnrolEnrolmentMethod[];\n\n/**\n * Course enrolment method.\n */\nexport type CoreEnrolEnrolmentMethod = CoreEnrolEnrolmentInfo & {\n    wsfunction?: string; // Webservice function to get more information.\n    status: string; // Status of enrolment plugin. True if successful, else error message or false.\n};\n\n/**\n * Course enrolment basic info.\n */\nexport type CoreEnrolEnrolmentInfo = {\n    id: number; // Id of course enrolment instance.\n    courseid: number; // Id of course.\n    type: string; // Type of enrolment plugin.\n    name: string; // Name of enrolment plugin.\n};\n\nexport type CoreEnrolGetSupportedMethodsOptions = {\n    type?: string; // If set, only get methods of a certain type.\n    action?: CoreEnrolAction; // If set, only get methods that use a certain action.\n    siteId?: string; // Site ID. If not defined, use current site.\n};\n"],"mappings":";;AAeA,SAASA,aAAa,QAAQ,aAAa;AAC3C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAA0BC,iBAAiB,QAAQ,kBAAkB;;AAErE;;;AAIA,OAAM,MAAOC,gBAAgB;EAIzB;;;;;;;;;EASMC,yBAAyBA,CAACC,QAAgB,EAAEC,MAAe;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC7D,MAAMC,IAAI,SAAST,SAAS,CAACU,OAAO,CAACJ,MAAM,CAAC;MAE5C,MAAMK,MAAM,GAA+C;QACvDC,QAAQ,EAAEP;OACb;MACD,MAAMQ,OAAO,GAAG;QACZC,QAAQ,EAAEP,KAAI,CAACQ,iCAAiC,CAACV,QAAQ,CAAC;QAC1DW,eAAe,EAAEjB,QAAQ,CAACkB;OAC7B;MAED,OAAOR,IAAI,CAACS,IAAI,CAA+C,yCAAyC,EAAEP,MAAM,EAAEE,OAAO,CAAC;IAAC;EAC/H;EAEA;;;;;;;;;EASMM,kCAAkCA,CACpCd,QAAgB,EAChBe,OAAA,GAA+C,EAAE;IAAA,OAAAZ,iBAAA;MAEjD,MAAMa,OAAO,SAASC,SAAS,CAAClB,yBAAyB,CAACC,QAAQ,EAAEe,OAAO,CAACd,MAAM,CAAC;MAEnF,OAAOe,OAAO,CAACE,MAAM,CAAEC,MAAM,IAAI;QAC7B,IAAIJ,OAAO,CAACK,IAAI,IAAID,MAAM,CAACC,IAAI,KAAKL,OAAO,CAACK,IAAI,EAAE;UAC9C,OAAO,KAAK;;QAGhB,OAAOvB,iBAAiB,CAACwB,gBAAgB,CAACF,MAAM,CAACC,IAAI,CAAC,IAAIxB,SAAS,CAAC0B,WAAW,CAACH,MAAM,CAACI,MAAM,CAAC,KACzF,CAACR,OAAO,CAACS,MAAM,IAAI3B,iBAAiB,CAAC4B,kBAAkB,CAACN,MAAM,CAACC,IAAI,CAAC,KAAKL,OAAO,CAACS,MAAM,CAAC;MACjG,CAAC,CAAC;IAAC;EACP;EAEA;;;;;;EAMUd,iCAAiCA,CAACV,QAAgB;IACxD,OAAOF,gBAAgB,CAAC4B,cAAc,GAAG,mBAAmB,GAAG1B,QAAQ;EAC3E;EAEA;;;;;;;EAOM2B,gCAAgCA,CAAC3B,QAAgB,EAAEC,MAAe;IAAA,IAAA2B,MAAA;IAAA,OAAAzB,iBAAA;MACpE,MAAMC,IAAI,SAAST,SAAS,CAACU,OAAO,CAACJ,MAAM,CAAC;MAE5C,MAAM4B,OAAO,CAACC,GAAG,CAAC,CACd1B,IAAI,CAAC2B,uBAAuB,CAACH,MAAI,CAAClB,iCAAiC,CAACV,QAAQ,CAAC,CAAC,EAC9EI,IAAI,CAAC2B,uBAAuB,CAAC,8BAA8B/B,QAAQ,EAAE,CAAC,CAAE;MAAA,CAC3E,CAAC;IAAC;EACP;;SA5ESF,gBAAgB;AAECkC,MAAA,CAAAN,cAAc,GAAG,YAAY;;mBAF9C5B,MAAgB;AAAA;;SAAhBA,MAAgB;EAAAmC,OAAA,EAAhBnC,MAAgB,CAAAoC,IAAA;EAAAC,UAAA,EADH;AAAM;AAiFhC,OAAO,MAAMlB,SAAS,GAAGxB,aAAa,CAACK,gBAAgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}