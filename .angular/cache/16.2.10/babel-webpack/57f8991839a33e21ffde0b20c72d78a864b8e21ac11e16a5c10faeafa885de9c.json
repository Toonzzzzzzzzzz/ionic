{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Cron handler to update site info every certain time.\n */\nexport class CoreSiteInfoCronHandlerService {\n  constructor() {\n    this.name = 'CoreSiteInfoCronHandler';\n  }\n  /**\n   * Execute the process.\n   * Receives the ID of the site affected, undefined for all sites.\n   *\n   * @param siteId ID of the site affected, undefined for all sites.\n   * @returns Promise resolved when done, rejected on failure.\n   */\n  execute(siteId) {\n    return _asyncToGenerator(function* () {\n      if (!siteId) {\n        const siteIds = yield CoreSites.getSitesIds();\n        yield Promise.all(siteIds.map(siteId => CoreSites.updateSiteInfo(siteId)));\n      } else {\n        yield CoreSites.updateSiteInfo(siteId);\n      }\n    })();\n  }\n  /**\n   * Returns handler's interval in milliseconds. Defaults to CoreCronDelegateService.DEFAULT_INTERVAL.\n   *\n   * @returns Interval time (in milliseconds).\n   */\n  getInterval() {\n    return 10800000; // 3 hours.\n  }\n  /**\n   * Check whether it's a synchronization process or not. True if not defined.\n   *\n   * @returns Whether it's a synchronization process or not.\n   */\n  isSync() {\n    return false;\n  }\n}\n_class = CoreSiteInfoCronHandlerService;\n_class.ɵfac = function CoreSiteInfoCronHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreSiteInfoCronHandler = makeSingleton(CoreSiteInfoCronHandlerService);","map":{"version":3,"names":["CoreSites","makeSingleton","CoreSiteInfoCronHandlerService","constructor","name","execute","siteId","_asyncToGenerator","siteIds","getSitesIds","Promise","all","map","updateSiteInfo","getInterval","isSync","factory","ɵfac","providedIn","CoreSiteInfoCronHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/handlers/site-info-cron.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCronHandler } from '@services/cron';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Cron handler to update site info every certain time.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreSiteInfoCronHandlerService implements CoreCronHandler {\n\n    name = 'CoreSiteInfoCronHandler';\n\n    /**\n     * Execute the process.\n     * Receives the ID of the site affected, undefined for all sites.\n     *\n     * @param siteId ID of the site affected, undefined for all sites.\n     * @returns Promise resolved when done, rejected on failure.\n     */\n    async execute(siteId?: string): Promise<void> {\n        if (!siteId) {\n            const siteIds = await CoreSites.getSitesIds();\n\n            await Promise.all(siteIds.map((siteId) => CoreSites.updateSiteInfo(siteId)));\n        } else {\n            await CoreSites.updateSiteInfo(siteId);\n        }\n    }\n\n    /**\n     * Returns handler's interval in milliseconds. Defaults to CoreCronDelegateService.DEFAULT_INTERVAL.\n     *\n     * @returns Interval time (in milliseconds).\n     */\n    getInterval(): number {\n        return 10800000; // 3 hours.\n    }\n\n    /**\n     * Check whether it's a synchronization process or not. True if not defined.\n     *\n     * @returns Whether it's a synchronization process or not.\n     */\n    isSync(): boolean {\n        return false;\n    }\n\n}\n\nexport const CoreSiteInfoCronHandler = makeSingleton(CoreSiteInfoCronHandlerService);\n"],"mappings":";;AAgBA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,8BAA8B;EAD3CC,YAAA;IAGI,KAAAC,IAAI,GAAG,yBAAyB;;EAEhC;;;;;;;EAOMC,OAAOA,CAACC,MAAe;IAAA,OAAAC,iBAAA;MACzB,IAAI,CAACD,MAAM,EAAE;QACT,MAAME,OAAO,SAASR,SAAS,CAACS,WAAW,EAAE;QAE7C,MAAMC,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,GAAG,CAAEN,MAAM,IAAKN,SAAS,CAACa,cAAc,CAACP,MAAM,CAAC,CAAC,CAAC;OAC/E,MAAM;QACH,MAAMN,SAAS,CAACa,cAAc,CAACP,MAAM,CAAC;;IACzC;EACL;EAEA;;;;;EAKAQ,WAAWA,CAAA;IACP,OAAO,QAAQ,CAAC,CAAC;EACrB;EAEA;;;;;EAKAC,MAAMA,CAAA;IACF,OAAO,KAAK;EAChB;;SArCSb,8BAA8B;;mBAA9BA,MAA8B;AAAA;;SAA9BA,MAA8B;EAAAc,OAAA,EAA9Bd,MAA8B,CAAAe,IAAA;EAAAC,UAAA,EADjB;AAAM;AA0ChC,OAAO,MAAMC,uBAAuB,GAAGlB,aAAa,CAACC,8BAA8B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}