{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreSites } from '@services/sites';\nimport { CoreCourses } from '@features/courses/services/courses';\nimport { CoreCourse, CoreCourseProvider } from '@features/course/services/course';\nimport { CoreGrades } from '@features/grades/services/grades';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreNavigator } from '@services/navigator';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreAppProvider } from '@services/app';\nimport { CoreCourseModuleDelegate } from '@features/course/services/module-delegate';\nimport * as i0 from \"@angular/core\";\nexport const GRADES_PAGE_NAME = 'grades';\nexport const GRADES_PARTICIPANTS_PAGE_NAME = 'participant-grades';\n/**\n * Service that provides some features regarding grades information.\n */\nexport class CoreGradesHelperProvider {\n  constructor() {\n    this.logger = CoreLogger.getInstance('CoreGradesHelperProvider');\n  }\n  /**\n   * Formats a row from the grades table to be rendered in one table.\n   *\n   * @param tableRow JSON object representing row of grades table data.\n   * @param useLegacyLayout Whether to use the layout before 4.1.\n   * @returns Formatted row object.\n   */\n  formatGradeRowForTable(tableRow, useLegacyLayout) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const row = {};\n      if (!useLegacyLayout && 'leader' in tableRow) {\n        var _tableRow$leader;\n        const row = {\n          itemtype: 'leader',\n          rowspan: (_tableRow$leader = tableRow.leader) === null || _tableRow$leader === void 0 ? void 0 : _tableRow$leader.rowspan\n        };\n        _this.setRowStyleClasses(row, tableRow.leader.class);\n        return row;\n      }\n      for (let name in tableRow) {\n        const column = tableRow[name];\n        if (column.content === undefined || column.content === null) {\n          continue;\n        }\n        let content = String(column.content);\n        if (name === 'itemname') {\n          var _tableRow$leader2;\n          const itemNameColumn = column;\n          row.id = parseInt(itemNameColumn.id.split('_')[1], 10);\n          row.colspan = itemNameColumn.colspan;\n          row.rowspan = ((_tableRow$leader2 = tableRow.leader) === null || _tableRow$leader2 === void 0 ? void 0 : _tableRow$leader2.rowspan) || 1;\n          yield _this.setRowIconAndType(row, content);\n          _this.setRowStyleClasses(row, itemNameColumn.class);\n          row.rowclass += itemNameColumn.class.indexOf('hidden') >= 0 ? ' hidden' : '';\n          row.rowclass += itemNameColumn.class.indexOf('dimmed_text') >= 0 ? ' dimmed_text' : '';\n          if (!useLegacyLayout && !CoreAppProvider.isAutomated()) {\n            // Activity name is only included in the webservice response from the latest version when behat is not running.\n            content = content.replace(/<span[^>]+>.+?<\\/span>/i, '');\n          }\n          content = content.replace(/<\\/span>/gi, '\\n');\n          content = CoreTextUtils.cleanTags(content, {\n            trim: true\n          });\n          name = 'gradeitem';\n        } else if (name === 'grade') {\n          // Add the pass/fail class if present.\n          row.gradeClass = column.class.includes('gradepass') ? 'text-success' : column.class.includes('gradefail') ? 'text-danger' : '';\n          if (content.includes('fa-check')) {\n            row.gradeIcon = 'fas-check';\n            row.gradeIconAlt = Translate.instant('core.grades.pass');\n            content = CoreTextUtils.cleanTags(content);\n          } else if (content.includes('fa-times') || content.includes('fa-xmark')) {\n            row.gradeIcon = 'fas-xmark';\n            row.gradeIconAlt = Translate.instant('core.grades.fail');\n            content = CoreTextUtils.cleanTags(content);\n          }\n        } else {\n          content = CoreTextUtils.replaceNewLines(content, '<br>');\n        }\n        if (row.itemtype !== 'category') {\n          row.expandable = true;\n          row.expanded = false;\n          row.detailsid = `grade-item-${row.id}-details`;\n          row.ariaLabel = `${row.gradeitem} (${row.grade})`;\n        }\n        if (content == '&nbsp;') {\n          content = '';\n        }\n        row[name] = content.trim();\n      }\n      return row;\n    })();\n  }\n  /**\n   * Removes suffix formatted to compatibilize data from table and items.\n   *\n   * @param item Grade item to format.\n   * @returns Grade item formatted.\n   */\n  formatGradeItem(item) {\n    for (const name in item) {\n      const index = name.indexOf('formatted');\n      if (index > 0) {\n        item[name.substring(0, index)] = item[name];\n      }\n    }\n    return item;\n  }\n  /**\n   * Formats the response of gradereport_user_get_grades_table to be rendered.\n   *\n   * @param table JSON object representing a table with data.\n   * @returns Formatted HTML table.\n   */\n  formatGradesTable(table) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const maxDepth = table.maxdepth;\n      const formatted = {\n        columns: [],\n        rows: []\n      };\n      // Columns, in order.\n      const columns = {\n        gradeitem: true,\n        weight: false,\n        grade: false,\n        range: false,\n        percentage: false,\n        lettergrade: false,\n        rank: false,\n        average: false,\n        feedback: false,\n        contributiontocoursetotal: false\n      };\n      formatted.rows = yield _this2.formatGradesTableRows(table.tabledata);\n      // Get a row with some info.\n      let normalRow = formatted.rows.find(row => row.itemtype != 'leader' && (row.grade !== undefined || row.percentage !== undefined));\n      // Decide if grades or percentage is being shown on phones.\n      if (normalRow && normalRow.grade !== undefined) {\n        columns.grade = true;\n      } else if (normalRow && normalRow.percentage !== undefined) {\n        columns.percentage = true;\n      } else {\n        normalRow = formatted.rows.find(e => e.itemtype != 'leader');\n        columns.grade = true;\n      }\n      for (const colName in columns) {\n        if (normalRow && normalRow[colName] !== undefined) {\n          formatted.columns.push({\n            name: colName,\n            colspan: colName == 'gradeitem' ? maxDepth : 1,\n            hiddenPhone: !columns[colName]\n          });\n        }\n      }\n      return formatted;\n    })();\n  }\n  /**\n   * Format table rows.\n   *\n   * @param rows Unformatted rows.\n   * @returns Formatted rows.\n   */\n  formatGradesTableRows(rows) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const useLegacyLayout = !CoreSites.getRequiredCurrentSite().isVersionGreaterEqualThan('4.1');\n      const formattedRows = yield Promise.all(rows.map(row => _this3.formatGradeRowForTable(row, useLegacyLayout)));\n      if (!useLegacyLayout) {\n        for (let index = 0; index < formattedRows.length - 1; index++) {\n          var _formattedRows, _previousRow$rowclass;\n          const row = formattedRows[index];\n          const previousRow = (_formattedRows = formattedRows[index - 1]) !== null && _formattedRows !== void 0 ? _formattedRows : null;\n          if (row.itemtype !== 'leader') {\n            continue;\n          }\n          row.colspan = previousRow.colspan;\n          previousRow.rowclass = `${(_previousRow$rowclass = previousRow.rowclass) !== null && _previousRow$rowclass !== void 0 ? _previousRow$rowclass : ''} ion-no-border`.trim();\n        }\n      }\n      return formattedRows;\n    })();\n  }\n  /**\n   * Get course data for grades since they only have courseid.\n   *\n   * @param grades Grades to get the data for.\n   * @returns Promise always resolved. Resolve param is the formatted grades.\n   */\n  getGradesCourseData(grades) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // Obtain courses from cache to prevent network requests.\n      let coursesWereMissing = false;\n      try {\n        const courses = yield CoreCourses.getUserCourses(undefined, undefined, 0 /* CoreSitesReadingStrategy.ONLY_CACHE */);\n        const coursesMap = CoreUtils.arrayToObject(courses, 'id');\n        coursesWereMissing = _this4.addCourseData(grades, coursesMap);\n      } catch (_unused) {\n        coursesWereMissing = true;\n      }\n      // If any course wasn't found, make a network request.\n      if (coursesWereMissing) {\n        const courses = yield CoreCourses.getCoursesByField('ids', grades.map(grade => grade.courseid).join(','));\n        const coursesMap = CoreUtils.arrayToObject(courses, 'id');\n        _this4.addCourseData(grades, coursesMap);\n      }\n      return grades.filter(grade => 'courseFullName' in grade);\n    })();\n  }\n  /**\n   * Adds course data to grades.\n   *\n   * @param grades Array of grades to populate.\n   * @param courses HashMap of courses to read data from.\n   * @returns Boolean indicating if some courses were not found.\n   */\n  addCourseData(grades, courses) {\n    let someCoursesAreMissing = false;\n    for (const grade of grades) {\n      if (!(grade.courseid in courses)) {\n        someCoursesAreMissing = true;\n        continue;\n      }\n      grade.courseFullName = courses[grade.courseid].fullname;\n    }\n    return someCoursesAreMissing;\n  }\n  /**\n   * Returns the label of the selected grade.\n   *\n   * @param grades Array with objects with value and label.\n   * @param selectedGrade Selected grade value.\n   * @returns Selected grade label.\n   */\n  getGradeLabelFromValue(grades, selectedGrade) {\n    selectedGrade = Number(selectedGrade);\n    if (!grades || !selectedGrade || selectedGrade <= 0) {\n      return '';\n    }\n    const grade = grades.find(grade => grade.value == selectedGrade);\n    return grade ? grade.label : '';\n  }\n  /**\n   * Get the grade items for a certain module. Keep in mind that may have more than one item to include outcomes and scales.\n   *\n   * @param courseId ID of the course to get the grades from.\n   * @param moduleId Module ID.\n   * @param userId ID of the user to get the grades from. If not defined use site's current user.\n   * @param groupId ID of the group to get the grades from. Not used for old gradebook table.\n   * @param siteId Site ID. If not defined, current site.\n   * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n   * @returns Promise to be resolved when the grades are retrieved.\n   */\n  getGradeModuleItems(courseId, moduleId, userId, groupId, siteId, ignoreCache = false) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const grades = yield CoreGrades.getGradeItems(courseId, userId, groupId, siteId, ignoreCache);\n      return grades.filter(item => item.cmid == moduleId).map(item => _this5.formatGradeItem(item));\n    })();\n  }\n  /**\n   * Returns the value of the selected grade.\n   *\n   * @param grades Array with objects with value and label.\n   * @param selectedGrade Selected grade label.\n   * @returns Selected grade value.\n   */\n  getGradeValueFromLabel(grades, selectedGrade) {\n    if (!grades || !selectedGrade) {\n      return 0;\n    }\n    const grade = grades.find(grade => grade.label == selectedGrade);\n    return !grade || grade.value < 0 ? 0 : grade.value;\n  }\n  /**\n   * Gets the link to the module for the selected grade.\n   *\n   * @param text HTML where the link is present.\n   * @returns URL linking to the module.\n   */\n  getModuleLink(text) {\n    const el = CoreDomUtils.toDom(text)[0];\n    const link = el.attributes['href'] ? el.attributes['href'].value : false;\n    if (!link || link.indexOf('/mod/') < 0) {\n      return false;\n    }\n    return link;\n  }\n  /**\n   * Get module grades to display.\n   *\n   * @param courseId Course Id.\n   * @param moduleId Module Id.\n   * @returns Formatted table rows.\n   */\n  getModuleGrades(courseId, moduleId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const table = yield CoreGrades.getCourseGradesTable(courseId);\n      if (!table.tabledata) {\n        return [];\n      }\n      // Find href containing \"/mod/xxx/xxx.php\".\n      const regex = /href=\"([^\"]*\\/mod\\/[^\"|^/]*\\/[^\"|^.]*\\.php[^\"]*)/;\n      return _this6.formatGradesTableRows(table.tabledata.filter(row => {\n        if (row.itemname && row.itemname.content) {\n          const matches = row.itemname.content.match(regex);\n          if (matches && matches.length) {\n            const hrefParams = CoreUrlUtils.extractUrlParams(matches[1]);\n            return hrefParams && parseInt(hrefParams.id) === moduleId;\n          }\n        }\n        return false;\n      }));\n    })();\n  }\n  /**\n   * Go to view grades.\n   *\n   * @param courseId Course ID to view.\n   * @param userId User to view. If not defined, current user.\n   * @param moduleId Module to view. If not defined, view all course grades.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  goToGrades(courseId, userId, moduleId, siteId) {\n    return _asyncToGenerator(function* () {\n      const modal = yield CoreDomUtils.showModalLoading();\n      const site = yield CoreSites.getSite(siteId);\n      siteId = site.id;\n      const currentUserId = site.getUserId();\n      try {\n        if (!moduleId) {\n          throw new CoreError('Invalid moduleId');\n        }\n        // Try to open the module grade directly.\n        const items = yield CoreGrades.getGradeItems(courseId, userId, undefined, siteId);\n        // Find the item of the module.\n        const item = Array.isArray(items) && items.find(item => moduleId == item.cmid);\n        if (!item) {\n          throw new CoreError('Grade item not found.');\n        }\n        // Open the item directly.\n        const gradeId = item.id;\n        yield CoreUtils.ignoreErrors(CoreNavigator.navigateToSitePath(`/${GRADES_PAGE_NAME}/${courseId}`, {\n          params: {\n            gradeId\n          },\n          siteId\n        }));\n      } catch (_unused2) {\n        try {\n          // Cannot get grade items or there's no need to.\n          if (userId && userId != currentUserId) {\n            // View another user grades. Open the grades page directly.\n            yield CoreUtils.ignoreErrors(CoreNavigator.navigateToSitePath(`/${GRADES_PAGE_NAME}/${courseId}`, {\n              siteId\n            }));\n          }\n          // View own grades. Check if we already are in the course index page.\n          if (CoreCourse.currentViewIsCourse(courseId)) {\n            // Current view is this course, just select the grades tab.\n            CoreCourse.selectCourseTab('CoreGrades');\n            return;\n          }\n          // Open the course with the grades tab selected.\n          yield CoreCourseHelper.getAndOpenCourse(courseId, {\n            selectedTab: 'CoreGrades'\n          }, siteId);\n        } catch (_unused3) {\n          // Cannot get course for some reason, just open the grades page.\n          yield CoreNavigator.navigateToSitePath(`/${GRADES_PAGE_NAME}/${courseId}`, {\n            siteId\n          });\n        }\n      } finally {\n        modal.dismiss();\n      }\n    })();\n  }\n  /**\n   * Invalidate the grade items for a certain module.\n   *\n   * @param courseId ID of the course to invalidate the grades.\n   * @param userId ID of the user to invalidate. If not defined use site's current user.\n   * @param groupId ID of the group to invalidate. Not used for old gradebook table.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise to be resolved when the grades are invalidated.\n   */\n  invalidateGradeModuleItems(courseId, userId, groupId, siteId) {\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const site = yield CoreSites.getSite(siteId);\n      userId = userId || site.getUserId();\n      return CoreGrades.invalidateCourseGradesItemsData(courseId, userId, groupId, siteId);\n    })();\n  }\n  /**\n   * Set row style classes.\n   *\n   * @param row Row.\n   * @param classes Unformatted classes.\n   */\n  setRowStyleClasses(row, classes) {\n    var _classes$match$, _classes$match, _row$rowclass;\n    const level = parseInt((_classes$match$ = (_classes$match = classes.match(/(?:^|\\s)level(\\d+)(?:$|\\s)/)) === null || _classes$match === void 0 ? void 0 : _classes$match[1]) !== null && _classes$match$ !== void 0 ? _classes$match$ : '0');\n    row.rowclass = `${(_row$rowclass = row.rowclass) !== null && _row$rowclass !== void 0 ? _row$rowclass : ''} ${level % 2 === 0 ? 'even' : 'odd'}`.trim();\n    if (classes.match(/(^|\\s)(category|bagg(b|t))($|\\s)/)) {\n      row.rowclass += ' core-bold';\n    }\n  }\n  /**\n   * Parses the image and sets it to the row.\n   *\n   * @param row Row.\n   * @param text Row content.\n   */\n  setRowIconAndType(row, text) {\n    return _asyncToGenerator(function* () {\n      text = text.replace('%2F', '/').replace('%2f', '/');\n      if (text.indexOf('/agg_mean') > -1) {\n        row.itemtype = 'agg_mean';\n        row.icon = 'moodle-agg_mean';\n        row.iconAlt = Translate.instant('core.grades.aggregatemean');\n      } else if (text.indexOf('/agg_sum') > -1) {\n        row.itemtype = 'agg_sum';\n        row.icon = 'moodle-agg_sum';\n        row.iconAlt = Translate.instant('core.grades.aggregatesum');\n      } else if (text.indexOf('/outcomes') > -1 || text.indexOf('fa-tasks') > -1 || text.indexOf('fa-list-check') > -1) {\n        row.itemtype = 'outcome';\n        row.icon = 'fas-list-check';\n        row.iconAlt = Translate.instant('core.grades.outcome');\n      } else if (text.indexOf('i/folder') > -1 || text.indexOf('fa-folder') > -1 || text.indexOf('category-content') > -1) {\n        row.itemtype = 'category';\n        row.icon = 'fas-folder';\n        row.iconAlt = Translate.instant('core.grades.category');\n      } else if (text.indexOf('/manual_item') > -1 || text.indexOf('fa-square-o') > -1) {\n        row.itemtype = 'manual';\n        row.icon = 'far-square';\n        row.iconAlt = Translate.instant('core.grades.manualitem');\n      } else if (text.indexOf('/calc') > -1 || text.indexOf('fa-calculator') > -1) {\n        row.itemtype = 'calc';\n        row.icon = 'fas-calculator';\n        row.iconAlt = Translate.instant('core.grades.calculatedgrade');\n      } else if (text.indexOf('/mod/') > -1) {\n        const module = text.match(/mod\\/([^/]*)\\//);\n        const modname = module === null || module === void 0 ? void 0 : module[1];\n        if (modname !== undefined) {\n          var _CoreDomUtils$convert, _CoreDomUtils$convert2;\n          const modicon = (_CoreDomUtils$convert = (_CoreDomUtils$convert2 = CoreDomUtils.convertToElement(text).querySelector('img')) === null || _CoreDomUtils$convert2 === void 0 ? void 0 : _CoreDomUtils$convert2.getAttribute('src')) !== null && _CoreDomUtils$convert !== void 0 ? _CoreDomUtils$convert : undefined;\n          row.itemtype = 'mod';\n          row.itemmodule = modname;\n          row.iconAlt = CoreCourse.translateModuleName(row.itemmodule) || '';\n          row.image = yield CoreCourseModuleDelegate.getModuleIconSrc(modname, modicon);\n        }\n      } else {\n        if (row.rowspan && row.rowspan > 1) {\n          row.itemtype = 'category';\n          row.icon = 'fas-cubes';\n          row.iconAlt = Translate.instant('core.grades.category');\n        } else if (text.indexOf('src=') > -1) {\n          row.itemtype = 'unknown';\n          const src = text.match(/src=\"([^\"]*)\"/);\n          row.image = src === null || src === void 0 ? void 0 : src[1];\n          row.iconAlt = Translate.instant('core.unknown');\n        } else if (text.indexOf('<i ') > -1) {\n          row.itemtype = 'unknown';\n          const src = text.match(/<i class=\"(?:[^\"]*?\\s)?(fa-[a-z0-9-]+)/);\n          row.icon = src ? src[1] : '';\n          row.iconAlt = Translate.instant('core.unknown');\n        }\n      }\n    })();\n  }\n  /**\n   * Creates an array that represents all the current grades that can be chosen using the given grading type.\n   * Negative numbers are scales, zero is no grade, and positive numbers are maximum grades.\n   *\n   * Taken from make_grades_menu on moodlelib.php\n   *\n   * @param gradingType If positive, max grade you can provide. If negative, scale Id.\n   * @param moduleId Module ID. Used to retrieve the scale items when they are not passed as parameter.\n   *                 If the user does not have permision to manage the activity an empty list is returned.\n   * @param defaultLabel Element that will become default option, if not defined, it won't be added.\n   * @param defaultValue Element that will become default option value. Default ''.\n   * @param scale Scale csv list String. If not provided, it will take it from the module grade info.\n   * @returns Array with objects with value and label to create a propper HTML select.\n   */\n  makeGradesMenu(gradingType, moduleId, defaultLabel = '', defaultValue = '', scale) {\n    return _asyncToGenerator(function* () {\n      if (gradingType === undefined) {\n        return [];\n      }\n      if (gradingType < 0) {\n        if (scale) {\n          return CoreUtils.makeMenuFromList(scale, defaultLabel, undefined, defaultValue);\n        }\n        if (moduleId) {\n          const gradeInfo = yield CoreCourse.getModuleBasicGradeInfo(moduleId);\n          if (gradeInfo && gradeInfo.scale) {\n            return CoreUtils.makeMenuFromList(gradeInfo.scale, defaultLabel, undefined, defaultValue);\n          }\n        }\n        return [];\n      }\n      if (gradingType > 0) {\n        const grades = [];\n        if (defaultLabel) {\n          // Key as string to avoid resorting of the object.\n          grades.push({\n            label: defaultLabel,\n            value: defaultValue\n          });\n        }\n        for (let i = gradingType; i >= 0; i--) {\n          grades.push({\n            label: i + ' / ' + gradingType,\n            value: i\n          });\n        }\n        return grades;\n      }\n      return [];\n    })();\n  }\n  /**\n   * Type guard to check if the param is a CoreGradesGradeItem.\n   *\n   * @param item Param to check.\n   * @returns Whether the param is a CoreGradesGradeItem.\n   */\n  isGradeItem(item) {\n    return 'outcomeid' in item;\n  }\n  /**\n   * Check whether to show the gradebook to this user.\n   *\n   * @param courseId The course ID.\n   * @param accessData Access type and data. Default, guest, ...\n   * @param navOptions Course navigation options for current user. See CoreCoursesProvider.getUserNavigationOptions.\n   * @returns Whether to show the gradebook to this user.\n   */\n  showGradebook(courseId, accessData, navOptions) {\n    return _asyncToGenerator(function* () {\n      if (accessData && accessData.type == CoreCourseProvider.ACCESS_GUEST) {\n        return false; // Not enabled for guests.\n      }\n\n      if (navOptions && navOptions.grades !== undefined) {\n        return navOptions.grades;\n      }\n      return CoreGrades.isPluginEnabledForCourse(courseId);\n    })();\n  }\n}\n_class = CoreGradesHelperProvider;\n_class.ɵfac = function CoreGradesHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreGradesHelper = makeSingleton(CoreGradesHelperProvider);","map":{"version":3,"names":["CoreLogger","CoreSites","CoreCourses","CoreCourse","CoreCourseProvider","CoreGrades","CoreTextUtils","CoreUrlUtils","CoreUtils","CoreDomUtils","CoreNavigator","makeSingleton","Translate","CoreError","CoreCourseHelper","CoreAppProvider","CoreCourseModuleDelegate","GRADES_PAGE_NAME","GRADES_PARTICIPANTS_PAGE_NAME","CoreGradesHelperProvider","constructor","logger","getInstance","formatGradeRowForTable","tableRow","useLegacyLayout","_this","_asyncToGenerator","row","_tableRow$leader","itemtype","rowspan","leader","setRowStyleClasses","class","name","column","content","undefined","String","_tableRow$leader2","itemNameColumn","id","parseInt","split","colspan","setRowIconAndType","rowclass","indexOf","isAutomated","replace","cleanTags","trim","gradeClass","includes","gradeIcon","gradeIconAlt","instant","replaceNewLines","expandable","expanded","detailsid","ariaLabel","gradeitem","grade","formatGradeItem","item","index","substring","formatGradesTable","table","_this2","maxDepth","maxdepth","formatted","columns","rows","weight","range","percentage","lettergrade","rank","average","feedback","contributiontocoursetotal","formatGradesTableRows","tabledata","normalRow","find","e","colName","push","hiddenPhone","_this3","getRequiredCurrentSite","isVersionGreaterEqualThan","formattedRows","Promise","all","map","length","_formattedRows","_previousRow$rowclass","previousRow","getGradesCourseData","grades","_this4","coursesWereMissing","courses","getUserCourses","coursesMap","arrayToObject","addCourseData","_unused","getCoursesByField","courseid","join","filter","someCoursesAreMissing","courseFullName","fullname","getGradeLabelFromValue","selectedGrade","Number","value","label","getGradeModuleItems","courseId","moduleId","userId","groupId","siteId","ignoreCache","_this5","getGradeItems","cmid","getGradeValueFromLabel","getModuleLink","text","el","toDom","link","attributes","getModuleGrades","_this6","getCourseGradesTable","regex","itemname","matches","match","hrefParams","extractUrlParams","goToGrades","modal","showModalLoading","site","getSite","currentUserId","getUserId","items","Array","isArray","gradeId","ignoreErrors","navigateToSitePath","params","_unused2","currentViewIsCourse","selectCourseTab","getAndOpenCourse","selectedTab","_unused3","dismiss","invalidateGradeModuleItems","getCurrentSiteId","invalidateCourseGradesItemsData","classes","_classes$match$","_classes$match","_row$rowclass","level","icon","iconAlt","module","modname","_CoreDomUtils$convert","_CoreDomUtils$convert2","modicon","convertToElement","querySelector","getAttribute","itemmodule","translateModuleName","image","getModuleIconSrc","src","makeGradesMenu","gradingType","defaultLabel","defaultValue","scale","makeMenuFromList","gradeInfo","getModuleBasicGradeInfo","i","isGradeItem","showGradebook","accessData","navOptions","type","ACCESS_GUEST","isPluginEnabledForCourse","factory","ɵfac","providedIn","CoreGradesHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/grades/services/grades-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport {\n    CoreCourses,\n    CoreEnrolledCourseData,\n    CoreCourseSearchedData,\n    CoreCourseUserAdminOrNavOptionIndexed,\n} from '@features/courses/services/courses';\nimport { CoreCourse, CoreCourseProvider } from '@features/course/services/course';\nimport {\n    CoreGrades,\n    CoreGradesGradeItem,\n    CoreGradesGradeOverview,\n    CoreGradesTable,\n    CoreGradesTableColumn,\n    CoreGradesTableItemNameColumn,\n    CoreGradesTableLeaderColumn,\n    CoreGradesTableRow,\n} from '@features/grades/services/grades';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreMenuItem, CoreUtils } from '@services/utils/utils';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreNavigator } from '@services/navigator';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreAppProvider } from '@services/app';\nimport { CoreCourseModuleDelegate } from '@features/course/services/module-delegate';\nimport { CoreCourseAccess } from '@features/course/services/course-options-delegate';\n\nexport const GRADES_PAGE_NAME = 'grades';\nexport const GRADES_PARTICIPANTS_PAGE_NAME = 'participant-grades';\n\n/**\n * Service that provides some features regarding grades information.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreGradesHelperProvider {\n\n    protected logger: CoreLogger;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreGradesHelperProvider');\n    }\n\n    /**\n     * Formats a row from the grades table to be rendered in one table.\n     *\n     * @param tableRow JSON object representing row of grades table data.\n     * @param useLegacyLayout Whether to use the layout before 4.1.\n     * @returns Formatted row object.\n     */\n    protected async formatGradeRowForTable(\n        tableRow: CoreGradesTableRow,\n        useLegacyLayout: boolean,\n    ): Promise<CoreGradesFormattedTableRow> {\n        const row: CoreGradesFormattedTableRow = {};\n\n        if (!useLegacyLayout && 'leader' in tableRow) {\n            const row = {\n                itemtype: 'leader',\n                rowspan: tableRow.leader?.rowspan,\n            };\n\n            this.setRowStyleClasses(row, (tableRow.leader as CoreGradesTableLeaderColumn).class);\n\n            return row;\n        }\n\n        for (let name in tableRow) {\n            const column: CoreGradesTableColumn = tableRow[name];\n\n            if (column.content === undefined || column.content === null) {\n                continue;\n            }\n\n            let content = String(column.content);\n\n            if (name === 'itemname') {\n                const itemNameColumn = <CoreGradesTableItemNameColumn> column;\n\n                row.id = parseInt(itemNameColumn.id.split('_')[1], 10);\n                row.colspan = itemNameColumn.colspan;\n                row.rowspan = tableRow.leader?.rowspan || 1;\n\n                await this.setRowIconAndType(row, content);\n                this.setRowStyleClasses(row, itemNameColumn.class);\n                row.rowclass += itemNameColumn.class.indexOf('hidden') >= 0 ? ' hidden' : '';\n                row.rowclass += itemNameColumn.class.indexOf('dimmed_text') >= 0 ? ' dimmed_text' : '';\n\n                if (!useLegacyLayout && !CoreAppProvider.isAutomated()) {\n                    // Activity name is only included in the webservice response from the latest version when behat is not running.\n                    content = content.replace(/<span[^>]+>.+?<\\/span>/i, '');\n                }\n\n                content = content.replace(/<\\/span>/gi, '\\n');\n                content = CoreTextUtils.cleanTags(content, { trim: true });\n                name = 'gradeitem';\n            } else if (name === 'grade') {\n                // Add the pass/fail class if present.\n                row.gradeClass = column.class.includes('gradepass') ? 'text-success' :\n                    (column.class.includes('gradefail') ? 'text-danger' : '');\n\n                if (content.includes('fa-check')) {\n                    row.gradeIcon = 'fas-check';\n                    row.gradeIconAlt = Translate.instant('core.grades.pass');\n                    content = CoreTextUtils.cleanTags(content);\n                } else if (content.includes('fa-times') || content.includes('fa-xmark')) {\n                    row.gradeIcon = 'fas-xmark';\n                    row.gradeIconAlt = Translate.instant('core.grades.fail');\n                    content = CoreTextUtils.cleanTags(content);\n                }\n            } else {\n                content = CoreTextUtils.replaceNewLines(content, '<br>');\n            }\n\n            if (row.itemtype !== 'category') {\n                row.expandable = true;\n                row.expanded = false;\n                row.detailsid = `grade-item-${row.id}-details`;\n                row.ariaLabel = `${row.gradeitem} (${row.grade})`;\n            }\n\n            if (content == '&nbsp;') {\n                content = '';\n            }\n\n            row[name] = content.trim();\n        }\n\n        return row;\n    }\n\n    /**\n     * Removes suffix formatted to compatibilize data from table and items.\n     *\n     * @param item Grade item to format.\n     * @returns Grade item formatted.\n     */\n    protected formatGradeItem(item: CoreGradesGradeItem): CoreGradesFormattedItem {\n        for (const name in item) {\n            const index = name.indexOf('formatted');\n            if (index > 0) {\n                item[name.substring(0, index)] = item[name];\n            }\n        }\n\n        return item;\n    }\n\n    /**\n     * Formats the response of gradereport_user_get_grades_table to be rendered.\n     *\n     * @param table JSON object representing a table with data.\n     * @returns Formatted HTML table.\n     */\n    async formatGradesTable(table: CoreGradesTable): Promise<CoreGradesFormattedTable> {\n        const maxDepth = table.maxdepth;\n        const formatted: CoreGradesFormattedTable = {\n            columns: [],\n            rows: [],\n        };\n\n        // Columns, in order.\n        const columns = {\n            gradeitem: true,\n            weight: false,\n            grade: false,\n            range: false,\n            percentage: false,\n            lettergrade: false,\n            rank: false,\n            average: false,\n            feedback: false,\n            contributiontocoursetotal: false,\n        };\n        formatted.rows = await this.formatGradesTableRows(table.tabledata);\n\n        // Get a row with some info.\n        let normalRow = formatted.rows.find(\n            row =>\n                row.itemtype != 'leader' &&\n                (row.grade !== undefined || row.percentage !== undefined),\n        );\n\n        // Decide if grades or percentage is being shown on phones.\n        if (normalRow && normalRow.grade !== undefined) {\n            columns.grade = true;\n        } else if (normalRow && normalRow.percentage !== undefined) {\n            columns.percentage = true;\n        } else {\n            normalRow = formatted.rows.find((e) => e.itemtype != 'leader');\n            columns.grade = true;\n        }\n\n        for (const colName in columns) {\n            if (normalRow && normalRow[colName] !== undefined) {\n                formatted.columns.push({\n                    name: colName,\n                    colspan: colName == 'gradeitem' ? maxDepth : 1,\n                    hiddenPhone: !columns[colName],\n                });\n            }\n        }\n\n        return formatted;\n    }\n\n    /**\n     * Format table rows.\n     *\n     * @param rows Unformatted rows.\n     * @returns Formatted rows.\n     */\n    protected async formatGradesTableRows(rows: CoreGradesTableRow[]): Promise<CoreGradesFormattedTableRow[]> {\n        const useLegacyLayout = !CoreSites.getRequiredCurrentSite().isVersionGreaterEqualThan('4.1');\n        const formattedRows = await Promise.all(rows.map(row => this.formatGradeRowForTable(row, useLegacyLayout)));\n\n        if (!useLegacyLayout) {\n            for (let index = 0; index < formattedRows.length - 1; index++) {\n                const row = formattedRows[index];\n                const previousRow = formattedRows[index - 1] ?? null;\n\n                if (row.itemtype !== 'leader') {\n                    continue;\n                }\n\n                row.colspan = previousRow.colspan;\n                previousRow.rowclass = `${previousRow.rowclass ?? ''} ion-no-border`.trim();\n            }\n        }\n\n        return formattedRows;\n    }\n\n    /**\n     * Get course data for grades since they only have courseid.\n     *\n     * @param grades Grades to get the data for.\n     * @returns Promise always resolved. Resolve param is the formatted grades.\n     */\n    async getGradesCourseData(grades: CoreGradesGradeOverview[]): Promise<CoreGradesGradeOverviewWithCourseData[]> {\n        // Obtain courses from cache to prevent network requests.\n        let coursesWereMissing = false;\n\n        try {\n            const courses = await CoreCourses.getUserCourses(undefined, undefined, CoreSitesReadingStrategy.ONLY_CACHE);\n            const coursesMap = CoreUtils.arrayToObject(courses, 'id');\n\n            coursesWereMissing = this.addCourseData(grades, coursesMap);\n        } catch {\n            coursesWereMissing = true;\n        }\n\n        // If any course wasn't found, make a network request.\n        if (coursesWereMissing) {\n            const courses = await CoreCourses.getCoursesByField('ids', grades.map((grade) => grade.courseid).join(','));\n            const coursesMap =\n                CoreUtils.arrayToObject(courses as Record<string, unknown>[], 'id') as\n                    Record<string, CoreEnrolledCourseData> |\n                    Record<string, CoreCourseSearchedData>;\n\n            this.addCourseData(grades, coursesMap);\n        }\n\n        return (grades as Record<string, unknown>[])\n            .filter(grade => 'courseFullName' in grade) as CoreGradesGradeOverviewWithCourseData[];\n    }\n\n    /**\n     * Adds course data to grades.\n     *\n     * @param grades Array of grades to populate.\n     * @param courses HashMap of courses to read data from.\n     * @returns Boolean indicating if some courses were not found.\n     */\n    protected addCourseData(\n        grades: CoreGradesGradeOverview[],\n        courses: Record<string, CoreEnrolledCourseData> | Record<string, CoreCourseSearchedData>,\n    ): boolean {\n        let someCoursesAreMissing = false;\n\n        for (const grade of grades) {\n            if (!(grade.courseid in courses)) {\n                someCoursesAreMissing = true;\n\n                continue;\n            }\n\n            (grade as CoreGradesGradeOverviewWithCourseData).courseFullName = courses[grade.courseid].fullname;\n        }\n\n        return someCoursesAreMissing;\n    }\n\n    /**\n     * Returns the label of the selected grade.\n     *\n     * @param grades Array with objects with value and label.\n     * @param selectedGrade Selected grade value.\n     * @returns Selected grade label.\n     */\n    getGradeLabelFromValue(grades: CoreGradesMenuItem[], selectedGrade?: number): string {\n        selectedGrade = Number(selectedGrade);\n\n        if (!grades || !selectedGrade || selectedGrade <= 0) {\n            return '';\n        }\n\n        const grade = grades.find((grade) => grade.value == selectedGrade);\n\n        return grade ? grade.label : '';\n    }\n\n    /**\n     * Get the grade items for a certain module. Keep in mind that may have more than one item to include outcomes and scales.\n     *\n     * @param courseId ID of the course to get the grades from.\n     * @param moduleId Module ID.\n     * @param userId ID of the user to get the grades from. If not defined use site's current user.\n     * @param groupId ID of the group to get the grades from. Not used for old gradebook table.\n     * @param siteId Site ID. If not defined, current site.\n     * @param ignoreCache True if it should ignore cached data (it will always fail in offline or server down).\n     * @returns Promise to be resolved when the grades are retrieved.\n     */\n    async getGradeModuleItems(\n        courseId: number,\n        moduleId: number,\n        userId?: number,\n        groupId?: number,\n        siteId?: string,\n        ignoreCache: boolean = false,\n    ): Promise<CoreGradesFormattedItem[]> {\n        const grades = await CoreGrades.getGradeItems(courseId, userId, groupId, siteId, ignoreCache);\n\n        return grades.filter((item) => item.cmid == moduleId).map((item) => this.formatGradeItem(item));\n    }\n\n    /**\n     * Returns the value of the selected grade.\n     *\n     * @param grades Array with objects with value and label.\n     * @param selectedGrade Selected grade label.\n     * @returns Selected grade value.\n     */\n    getGradeValueFromLabel(grades: CoreMenuItem[], selectedGrade?: string): number {\n        if (!grades || !selectedGrade) {\n            return 0;\n        }\n\n        const grade = grades.find((grade) => grade.label == selectedGrade);\n\n        return !grade || grade.value < 0\n            ? 0\n            : grade.value;\n    }\n\n    /**\n     * Gets the link to the module for the selected grade.\n     *\n     * @param text HTML where the link is present.\n     * @returns URL linking to the module.\n     */\n    protected getModuleLink(text: string): string | false {\n        const el = CoreDomUtils.toDom(text)[0];\n        const link = el.attributes['href'] ? el.attributes['href'].value : false;\n\n        if (!link || link.indexOf('/mod/') < 0) {\n            return false;\n        }\n\n        return link;\n    }\n\n    /**\n     * Get module grades to display.\n     *\n     * @param courseId Course Id.\n     * @param moduleId Module Id.\n     * @returns Formatted table rows.\n     */\n    async getModuleGrades(courseId: number, moduleId: number): Promise<CoreGradesFormattedTableRow[] > {\n        const table = await CoreGrades.getCourseGradesTable(courseId);\n\n        if (!table.tabledata) {\n            return [];\n        }\n\n        // Find href containing \"/mod/xxx/xxx.php\".\n        const regex = /href=\"([^\"]*\\/mod\\/[^\"|^/]*\\/[^\"|^.]*\\.php[^\"]*)/;\n\n        return this.formatGradesTableRows(table.tabledata.filter((row) => {\n            if (row.itemname && row.itemname.content) {\n                const matches = row.itemname.content.match(regex);\n\n                if (matches && matches.length) {\n                    const hrefParams = CoreUrlUtils.extractUrlParams(matches[1]);\n\n                    return hrefParams && parseInt(hrefParams.id) === moduleId;\n                }\n            }\n\n            return false;\n        }));\n    }\n\n    /**\n     * Go to view grades.\n     *\n     * @param courseId Course ID to view.\n     * @param userId User to view. If not defined, current user.\n     * @param moduleId Module to view. If not defined, view all course grades.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async goToGrades(\n        courseId: number,\n        userId?: number,\n        moduleId?: number,\n        siteId?: string,\n    ): Promise<void> {\n        const modal = await CoreDomUtils.showModalLoading();\n\n        const site = await CoreSites.getSite(siteId);\n\n        siteId = site.id;\n        const currentUserId = site.getUserId();\n\n        try {\n            if (!moduleId) {\n                throw new CoreError('Invalid moduleId');\n            }\n\n            // Try to open the module grade directly.\n            const items = await CoreGrades.getGradeItems(courseId, userId, undefined, siteId);\n\n            // Find the item of the module.\n            const item = Array.isArray(items) && items.find((item) => moduleId == item.cmid);\n\n            if (!item) {\n                throw new CoreError('Grade item not found.');\n            }\n\n            // Open the item directly.\n            const gradeId = item.id;\n\n            await CoreUtils.ignoreErrors(\n                CoreNavigator.navigateToSitePath(\n                    `/${GRADES_PAGE_NAME}/${courseId}`,\n                    { params: { gradeId }, siteId },\n                ),\n            );\n        } catch {\n            try {\n                // Cannot get grade items or there's no need to.\n                if (userId && userId != currentUserId) {\n                    // View another user grades. Open the grades page directly.\n                    await CoreUtils.ignoreErrors(\n                        CoreNavigator.navigateToSitePath(`/${GRADES_PAGE_NAME}/${courseId}`, { siteId }),\n                    );\n                }\n\n                // View own grades. Check if we already are in the course index page.\n                if (CoreCourse.currentViewIsCourse(courseId)) {\n                    // Current view is this course, just select the grades tab.\n                    CoreCourse.selectCourseTab('CoreGrades');\n\n                    return;\n                }\n\n                // Open the course with the grades tab selected.\n                await CoreCourseHelper.getAndOpenCourse(courseId, { selectedTab: 'CoreGrades' }, siteId);\n            } catch {\n                // Cannot get course for some reason, just open the grades page.\n                await CoreNavigator.navigateToSitePath(`/${GRADES_PAGE_NAME}/${courseId}`, { siteId });\n            }\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Invalidate the grade items for a certain module.\n     *\n     * @param courseId ID of the course to invalidate the grades.\n     * @param userId ID of the user to invalidate. If not defined use site's current user.\n     * @param groupId ID of the group to invalidate. Not used for old gradebook table.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise to be resolved when the grades are invalidated.\n     */\n    async invalidateGradeModuleItems(courseId: number, userId?: number, groupId?: number, siteId?: string): Promise<void> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const site = await CoreSites.getSite(siteId);\n        userId = userId || site.getUserId();\n\n        return CoreGrades.invalidateCourseGradesItemsData(courseId, userId, groupId, siteId);\n    }\n\n    /**\n     * Set row style classes.\n     *\n     * @param row Row.\n     * @param classes Unformatted classes.\n     */\n    protected setRowStyleClasses(row: CoreGradesFormattedTableRow, classes: string): void {\n        const level = parseInt(classes.match(/(?:^|\\s)level(\\d+)(?:$|\\s)/)?.[1] ?? '0');\n\n        row.rowclass = `${row.rowclass ?? ''} ${level % 2 === 0 ? 'even' : 'odd'}`.trim();\n\n        if (classes.match(/(^|\\s)(category|bagg(b|t))($|\\s)/)) {\n            row.rowclass += ' core-bold';\n        }\n    }\n\n    /**\n     * Parses the image and sets it to the row.\n     *\n     * @param row Row.\n     * @param text Row content.\n     */\n    protected async setRowIconAndType(row: CoreGradesFormattedRowCommonData, text: string): Promise<void> {\n        text = text.replace('%2F', '/').replace('%2f', '/');\n        if (text.indexOf('/agg_mean') > -1) {\n            row.itemtype = 'agg_mean';\n            row.icon = 'moodle-agg_mean';\n            row.iconAlt = Translate.instant('core.grades.aggregatemean');\n        } else if (text.indexOf('/agg_sum') > -1) {\n            row.itemtype = 'agg_sum';\n            row.icon = 'moodle-agg_sum';\n            row.iconAlt = Translate.instant('core.grades.aggregatesum');\n        } else if (text.indexOf('/outcomes') > -1 || text.indexOf('fa-tasks') > -1 || text.indexOf('fa-list-check') > -1) {\n            row.itemtype = 'outcome';\n            row.icon = 'fas-list-check';\n            row.iconAlt = Translate.instant('core.grades.outcome');\n        } else if (text.indexOf('i/folder') > -1 || text.indexOf('fa-folder') > -1 || text.indexOf('category-content') > -1) {\n            row.itemtype = 'category';\n            row.icon = 'fas-folder';\n            row.iconAlt = Translate.instant('core.grades.category');\n        } else if (text.indexOf('/manual_item') > -1 || text.indexOf('fa-square-o') > -1) {\n            row.itemtype = 'manual';\n            row.icon = 'far-square';\n            row.iconAlt = Translate.instant('core.grades.manualitem');\n        } else if (text.indexOf('/calc') > -1 || text.indexOf('fa-calculator') > -1) {\n            row.itemtype = 'calc';\n            row.icon = 'fas-calculator';\n            row.iconAlt = Translate.instant('core.grades.calculatedgrade');\n        } else if (text.indexOf('/mod/') > -1) {\n            const module = text.match(/mod\\/([^/]*)\\//);\n            const modname = module?.[1];\n\n            if (modname !== undefined) {\n                const modicon = CoreDomUtils.convertToElement(text).querySelector('img')?.getAttribute('src') ?? undefined;\n\n                row.itemtype = 'mod';\n                row.itemmodule = modname;\n                row.iconAlt = CoreCourse.translateModuleName(row.itemmodule) || '';\n                row.image = await CoreCourseModuleDelegate.getModuleIconSrc(modname, modicon);\n            }\n        } else {\n            if (row.rowspan && row.rowspan > 1) {\n                row.itemtype = 'category';\n                row.icon = 'fas-cubes';\n                row.iconAlt = Translate.instant('core.grades.category');\n            } else if (text.indexOf('src=') > -1) {\n                row.itemtype = 'unknown';\n                const src = text.match(/src=\"([^\"]*)\"/);\n                row.image = src?.[1];\n                row.iconAlt = Translate.instant('core.unknown');\n            } else if (text.indexOf('<i ') > -1) {\n                row.itemtype = 'unknown';\n                const src = text.match(/<i class=\"(?:[^\"]*?\\s)?(fa-[a-z0-9-]+)/);\n                row.icon = src ? src[1] : '';\n                row.iconAlt = Translate.instant('core.unknown');\n            }\n        }\n    }\n\n    /**\n     * Creates an array that represents all the current grades that can be chosen using the given grading type.\n     * Negative numbers are scales, zero is no grade, and positive numbers are maximum grades.\n     *\n     * Taken from make_grades_menu on moodlelib.php\n     *\n     * @param gradingType If positive, max grade you can provide. If negative, scale Id.\n     * @param moduleId Module ID. Used to retrieve the scale items when they are not passed as parameter.\n     *                 If the user does not have permision to manage the activity an empty list is returned.\n     * @param defaultLabel Element that will become default option, if not defined, it won't be added.\n     * @param defaultValue Element that will become default option value. Default ''.\n     * @param scale Scale csv list String. If not provided, it will take it from the module grade info.\n     * @returns Array with objects with value and label to create a propper HTML select.\n     */\n    async makeGradesMenu(\n        gradingType?: number,\n        moduleId?: number,\n        defaultLabel: string = '',\n        defaultValue: string | number = '',\n        scale?: string,\n    ): Promise<CoreGradesMenuItem[]> {\n        if (gradingType === undefined) {\n            return [];\n        }\n\n        if (gradingType < 0) {\n            if (scale) {\n                return CoreUtils.makeMenuFromList(scale, defaultLabel, undefined, defaultValue);\n            }\n\n            if (moduleId) {\n                const gradeInfo = await CoreCourse.getModuleBasicGradeInfo(moduleId);\n                if (gradeInfo && gradeInfo.scale) {\n                    return CoreUtils.makeMenuFromList(gradeInfo.scale, defaultLabel, undefined, defaultValue);\n                }\n            }\n\n            return [];\n        }\n\n        if (gradingType > 0) {\n            const grades: CoreGradesMenuItem[] = [];\n\n            if (defaultLabel) {\n                // Key as string to avoid resorting of the object.\n                grades.push({\n                    label: defaultLabel,\n                    value: defaultValue,\n                });\n            }\n\n            for (let i = gradingType; i >= 0; i--) {\n                grades.push({\n                    label: i + ' / ' + gradingType,\n                    value: i,\n                });\n            }\n\n            return grades;\n        }\n\n        return [];\n    }\n\n    /**\n     * Type guard to check if the param is a CoreGradesGradeItem.\n     *\n     * @param item Param to check.\n     * @returns Whether the param is a CoreGradesGradeItem.\n     */\n    isGradeItem(item: CoreGradesGradeItem | CoreGradesFormattedRow): item is CoreGradesGradeItem {\n        return 'outcomeid' in item;\n    }\n\n    /**\n     * Check whether to show the gradebook to this user.\n     *\n     * @param courseId The course ID.\n     * @param accessData Access type and data. Default, guest, ...\n     * @param navOptions Course navigation options for current user. See CoreCoursesProvider.getUserNavigationOptions.\n     * @returns Whether to show the gradebook to this user.\n     */\n    async showGradebook(\n        courseId: number,\n        accessData: CoreCourseAccess,\n        navOptions?: CoreCourseUserAdminOrNavOptionIndexed,\n    ): Promise<boolean> {\n        if (accessData && accessData.type == CoreCourseProvider.ACCESS_GUEST) {\n            return false; // Not enabled for guests.\n        }\n\n        if (navOptions && navOptions.grades !== undefined) {\n            return navOptions.grades;\n        }\n\n        return CoreGrades.isPluginEnabledForCourse(courseId);\n    }\n\n}\n\nexport const CoreGradesHelper = makeSingleton(CoreGradesHelperProvider);\n\nexport type CoreGradesFormattedItem = CoreGradesGradeItem & {\n    weight?: string; // Weight.\n    grade?: string; // The grade formatted.\n    range?: string; // Range formatted.\n    percentage?: string; // Percentage.\n    lettergrade?: string; // Letter grade.\n    average?: string; // Grade average.\n};\n\nexport type CoreGradesFormattedRowCommonData = {\n    icon?: string;\n    rowclass?: string;\n    itemtype?: string;\n    image?: string;\n    itemmodule?: string;\n    iconAlt?: string;\n    rowspan?: number;\n    weight?: string; // Weight column.\n    grade?: string; // Grade column.\n    range?: string;// Range column.\n    percentage?: string; // Percentage column.\n    lettergrade?: string; // Lettergrade column.\n    rank?: string; // Rank column.\n    average?: string; // Average column.\n    feedback?: string; // Feedback column.\n    contributiontocoursetotal?: string; // Contributiontocoursetotal column.\n};\n\nexport type CoreGradesFormattedRow = CoreGradesFormattedRowCommonData & {\n    link?: string | false;\n    itemname?: string; // The item returned data.\n};\n\nexport type CoreGradesFormattedTable = {\n    columns: CoreGradesFormattedTableColumn[];\n    rows: CoreGradesFormattedTableRow[];\n};\n\nexport type CoreGradesFormattedTableRow = CoreGradesFormattedRowCommonData & {\n    id?: number;\n    detailsid?: string;\n    colspan?: number;\n    gradeitem?: string; // The item returned data.\n    ariaLabel?: string;\n    expandable?: boolean;\n    expanded?: boolean;\n    gradeClass?: string;\n    gradeIcon?: string;\n    gradeIconAlt?: string;\n};\n\nexport type CoreGradesFormattedTableColumn = {\n    name: string;\n    colspan: number;\n    hiddenPhone: boolean;\n};\n\n/**\n * Grade overview with course data added by CoreGradesHelperProvider#addCourseData method.\n */\nexport type CoreGradesGradeOverviewWithCourseData = CoreGradesGradeOverview & {\n    courseFullName: string;\n};\n\n/**\n * Grade menu item created by CoreGradesHelperProvider#makeGradesMenu method.\n */\nexport type CoreGradesMenuItem = {\n    label: string;\n    value: string | number;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}