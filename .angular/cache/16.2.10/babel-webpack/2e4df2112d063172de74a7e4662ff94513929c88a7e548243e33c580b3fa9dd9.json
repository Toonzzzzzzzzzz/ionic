{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreCourses } from '../courses';\nimport { CoreLogger } from '@singletons/logger';\nimport { makeSingleton } from '@singletons';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreNavigator } from '@services/navigator';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to treat links to course view or enrol (except site home).\n */\nexport class CoreCoursesCourseLinkHandlerService extends CoreContentLinksHandlerBase {\n  constructor() {\n    super();\n    this.name = 'CoreCoursesCourseLinkHandler';\n    this.pattern = /((\\/enrol\\/index\\.php)|(\\/course\\/enrol\\.php)|(\\/course\\/view\\.php)).*([?&]id=\\d+)/;\n    this.waitStart = 0;\n    this.logger = CoreLogger.getInstance('CoreCoursesCourseLinkHandler');\n  }\n  /**\n   * @inheritdoc\n   */\n  getActions(siteIds, url, params) {\n    const courseId = parseInt(params.id, 10);\n    const sectionId = params.sectionid ? parseInt(params.sectionid, 10) : undefined;\n    const pageParams = {\n      sectionId: sectionId || undefined\n    };\n    let sectionNumber = params.section !== undefined ? parseInt(params.section, 10) : NaN;\n    if (!sectionId && !sectionNumber) {\n      // Check if the URL has a hash to navigate to the section.\n      const matches = url.match(/#section-(\\d+)/);\n      if (matches && matches[1]) {\n        sectionNumber = parseInt(matches[1], 10);\n      }\n    }\n    if (!isNaN(sectionNumber)) {\n      pageParams.sectionNumber = sectionNumber;\n    } else {\n      const matches = url.match(/#inst(\\d+)/);\n      if (matches && matches[1]) {\n        pageParams.blockInstanceId = parseInt(matches[1], 10);\n      }\n    }\n    return [{\n      action: siteId => {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n        if (siteId === CoreSites.getCurrentSiteId()) {\n          // Check if we already are in the course index page.\n          if (CoreCourse.currentViewIsCourse(courseId)) {\n            // Current view is this course, just select the contents tab.\n            CoreCourse.selectCourseTab('', pageParams);\n            return;\n          } else {\n            this.actionOpen(courseId, url, pageParams).catch(() => {\n              // Ignore errors.\n            });\n          }\n        } else {\n          // Make the course the new history root (to avoid \"loops\" in history).\n          CoreCourseHelper.getAndOpenCourse(courseId, pageParams, siteId);\n        }\n      }\n    }];\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled(siteId, url, params) {\n    return _asyncToGenerator(function* () {\n      const courseId = parseInt(params.id, 10);\n      if (!courseId) {\n        return false;\n      }\n      // Get the course id of Site Home.\n      return CoreSites.getSiteHomeId(siteId).then(siteHomeId => courseId != siteHomeId);\n    })();\n  }\n  /**\n   * Try to open the course, asking the user to enrol if needed.\n   *\n   * @param courseId Course ID.\n   * @param url Treated URL.\n   * @param pageParams Params to send to the new page.\n   * @returns Promise resolved when done.\n   */\n  actionOpen(courseId, url, pageParams) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const isEnrolUrl = !!url.match(/(\\/enrol\\/index\\.php)|(\\/course\\/enrol\\.php)/);\n      if (isEnrolUrl) {\n        _this.navigateCourseSummary(courseId, pageParams);\n        return;\n      }\n      const modal = yield CoreDomUtils.showModalLoading();\n      // Check if user is enrolled in the course.\n      const hasAccess = yield CoreCourseHelper.userHasAccessToCourse(courseId);\n      const guestInfo = yield CoreCourseHelper.courseUsesGuestAccessInfo(courseId);\n      pageParams.isGuest = guestInfo.guestAccess;\n      if (hasAccess && !guestInfo.guestAccess && !guestInfo.requiresUserInput) {\n        // Direct access.\n        const course = yield CoreUtils.ignoreErrors(CoreCourses.getUserCourse(courseId), {\n          id: courseId\n        });\n        CoreCourseHelper.openCourse(course, {\n          params: pageParams\n        });\n      } else {\n        _this.navigateCourseSummary(courseId, pageParams);\n      }\n      modal.dismiss();\n    })();\n  }\n  /**\n   * Navigate course summary.\n   *\n   * @param courseId Course ID.\n   * @param pageParams Params to send to the new page.\n   */\n  navigateCourseSummary(courseId, pageParams) {\n    CoreNavigator.navigateToSitePath(`/course/${courseId}/summary`, {\n      params: pageParams\n    });\n  }\n}\n_class = CoreCoursesCourseLinkHandlerService;\n_class.ɵfac = function CoreCoursesCourseLinkHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreCoursesCourseLinkHandler = makeSingleton(CoreCoursesCourseLinkHandlerService);","map":{"version":3,"names":["CoreSites","CoreDomUtils","CoreContentLinksHandlerBase","CoreCourse","CoreCourseHelper","CoreCourses","CoreLogger","makeSingleton","CoreUtils","CoreNavigator","CoreCoursesCourseLinkHandlerService","constructor","name","pattern","waitStart","logger","getInstance","getActions","siteIds","url","params","courseId","parseInt","id","sectionId","sectionid","undefined","pageParams","sectionNumber","section","NaN","matches","match","isNaN","blockInstanceId","action","siteId","getCurrentSiteId","currentViewIsCourse","selectCourseTab","actionOpen","catch","getAndOpenCourse","isEnabled","_asyncToGenerator","getSiteHomeId","then","siteHomeId","_this","isEnrolUrl","navigateCourseSummary","modal","showModalLoading","hasAccess","userHasAccessToCourse","guestInfo","courseUsesGuestAccessInfo","isGuest","guestAccess","requiresUserInput","course","ignoreErrors","getUserCourse","openCourse","dismiss","navigateToSitePath","factory","ɵfac","providedIn","CoreCoursesCourseLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/courses/services/handlers/course-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreCourses } from '../courses';\nimport { CoreLogger } from '@singletons/logger';\nimport { makeSingleton } from '@singletons';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { Params } from '@angular/router';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreNavigator } from '@services/navigator';\n\n/**\n * Handler to treat links to course view or enrol (except site home).\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreCoursesCourseLinkHandlerService extends CoreContentLinksHandlerBase {\n\n    name = 'CoreCoursesCourseLinkHandler';\n    pattern = /((\\/enrol\\/index\\.php)|(\\/course\\/enrol\\.php)|(\\/course\\/view\\.php)).*([?&]id=\\d+)/;\n\n    protected waitStart = 0;\n    protected logger: CoreLogger;\n\n    constructor() {\n        super();\n\n        this.logger = CoreLogger.getInstance('CoreCoursesCourseLinkHandler');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Params,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n        const courseId = parseInt(params.id, 10);\n        const sectionId = params.sectionid ? parseInt(params.sectionid, 10) : undefined;\n        const pageParams: Params = {\n            sectionId: sectionId || undefined,\n        };\n        let sectionNumber = params.section !== undefined ? parseInt(params.section, 10) : NaN;\n\n        if (!sectionId && !sectionNumber) {\n            // Check if the URL has a hash to navigate to the section.\n            const matches = url.match(/#section-(\\d+)/);\n            if (matches && matches[1]) {\n                sectionNumber = parseInt(matches[1], 10);\n            }\n        }\n\n        if (!isNaN(sectionNumber)) {\n            pageParams.sectionNumber = sectionNumber;\n        } else {\n            const matches = url.match(/#inst(\\d+)/);\n\n            if (matches && matches[1]) {\n                pageParams.blockInstanceId = parseInt(matches[1], 10);\n            }\n        }\n\n        return [{\n            action: (siteId): void => {\n                siteId = siteId || CoreSites.getCurrentSiteId();\n                if (siteId === CoreSites.getCurrentSiteId()) {\n                    // Check if we already are in the course index page.\n                    if (CoreCourse.currentViewIsCourse(courseId)) {\n                        // Current view is this course, just select the contents tab.\n                        CoreCourse.selectCourseTab('', pageParams);\n\n                        return;\n                    } else {\n                        this.actionOpen(courseId, url, pageParams).catch(() => {\n                            // Ignore errors.\n                        });\n                    }\n                } else {\n                    // Make the course the new history root (to avoid \"loops\" in history).\n                    CoreCourseHelper.getAndOpenCourse(courseId, pageParams, siteId);\n                }\n            },\n        }];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(siteId: string, url: string, params: Params): Promise<boolean> {\n        const courseId = parseInt(params.id, 10);\n\n        if (!courseId) {\n            return false;\n        }\n\n        // Get the course id of Site Home.\n        return CoreSites.getSiteHomeId(siteId).then((siteHomeId) => courseId != siteHomeId);\n    }\n\n    /**\n     * Try to open the course, asking the user to enrol if needed.\n     *\n     * @param courseId Course ID.\n     * @param url Treated URL.\n     * @param pageParams Params to send to the new page.\n     * @returns Promise resolved when done.\n     */\n    protected async actionOpen(courseId: number, url: string, pageParams: Params): Promise<void> {\n        const isEnrolUrl = !!url.match(/(\\/enrol\\/index\\.php)|(\\/course\\/enrol\\.php)/);\n        if (isEnrolUrl) {\n            this.navigateCourseSummary(courseId, pageParams);\n\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        // Check if user is enrolled in the course.\n        const hasAccess = await CoreCourseHelper.userHasAccessToCourse(courseId);\n\n        const guestInfo = await CoreCourseHelper.courseUsesGuestAccessInfo(courseId);\n        pageParams.isGuest = guestInfo.guestAccess;\n\n        if (hasAccess && !guestInfo.guestAccess && !guestInfo.requiresUserInput) {\n            // Direct access.\n            const course = await CoreUtils.ignoreErrors(CoreCourses.getUserCourse(courseId), { id: courseId });\n\n            CoreCourseHelper.openCourse(course, { params: pageParams });\n        } else {\n            this.navigateCourseSummary(courseId, pageParams);\n\n        }\n\n        modal.dismiss();\n    }\n\n    /**\n     * Navigate course summary.\n     *\n     * @param courseId Course ID.\n     * @param pageParams Params to send to the new page.\n     */\n    protected navigateCourseSummary(courseId: number, pageParams: Params): void {\n        CoreNavigator.navigateToSitePath(\n            `/course/${courseId}/summary`,\n            { params: pageParams },\n        );\n    }\n\n}\n\nexport const CoreCoursesCourseLinkHandler = makeSingleton(CoreCoursesCourseLinkHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}