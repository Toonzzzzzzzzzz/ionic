{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreGroups } from '@services/groups';\nimport { CorePluginFileDelegate } from '@services/plugin-file-delegate';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModWiki, AddonModWikiProvider } from '../wiki';\nimport { AddonModWikiSync } from '../wiki-sync';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to prefetch wikis.\n */\nexport class AddonModWikiPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModWiki';\n    this.modName = 'wiki';\n    this.component = AddonModWikiProvider.COMPONENT;\n    this.updatesNames = /^.*files$|^pages$/;\n  }\n  /**\n   * Returns a list of pages that can be downloaded.\n   *\n   * @param module The module object returned by WS.\n   * @param courseId The course ID.\n   * @param options Other options.\n   * @returns List of pages.\n   */\n  getAllPages(module, courseId, options = {}) {\n    return _asyncToGenerator(function* () {\n      options.siteId = options.siteId || CoreSites.getCurrentSiteId();\n      try {\n        const wiki = yield AddonModWiki.getWiki(courseId, module.id, options);\n        return yield AddonModWiki.getWikiPageList(wiki, options);\n      } catch (_unused) {\n        // Wiki not found, return empty list.\n        return [];\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getDownloadSize(module, courseId, single) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      const siteId = CoreSites.getCurrentSiteId();\n      promises.push(_this.getFiles(module, courseId, single, siteId).then(files => CorePluginFileDelegate.getFilesDownloadSize(files)));\n      promises.push(_this.getAllPages(module, courseId, {\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n        siteId\n      }).then(pages => {\n        let size = 0;\n        pages.forEach(page => {\n          if (page.contentsize) {\n            size = size + page.contentsize;\n          }\n        });\n        return {\n          size: size,\n          total: true\n        };\n      }));\n      const sizes = yield Promise.all(promises);\n      return {\n        size: sizes[0].size + sizes[1].size,\n        total: sizes[0].total && sizes[1].total\n      };\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getFiles(module, courseId, single, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      try {\n        const wiki = yield AddonModWiki.getWiki(courseId, module.id, {\n          siteId\n        });\n        const introFiles = _this2.getIntroFilesFromInstance(module, wiki);\n        const files = yield AddonModWiki.getWikiFileList(wiki, {\n          siteId\n        });\n        return introFiles.concat(files);\n      } catch (_unused2) {\n        // Wiki not found, return empty list.\n        return [];\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateContent(moduleId, courseId) {\n    return AddonModWiki.invalidateContent(moduleId, courseId);\n  }\n  /**\n   * @inheritdoc\n   */\n  prefetch(module, courseId, single) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // Get the download time of the package before starting the download (otherwise we'd always get current time).\n      const siteId = CoreSites.getCurrentSiteId();\n      const data = yield CoreUtils.ignoreErrors(CoreFilepool.getPackageData(siteId, _this3.component, module.id));\n      const downloadTime = (data === null || data === void 0 ? void 0 : data.downloadTime) || 0;\n      return _this3.prefetchPackage(module, courseId, siteId => _this3.prefetchWiki(module, courseId, !!single, downloadTime, siteId), siteId);\n    })();\n  }\n  /**\n   * Prefetch a wiki.\n   *\n   * @param module Module.\n   * @param courseId Course ID the module belongs to.\n   * @param single True if we're downloading a single module, false if we're downloading a whole section.\n   * @param downloadTime The previous download time, 0 if no previous download.\n   * @param siteId Site ID.\n   * @returns Promise resolved when done.\n   */\n  prefetchWiki(module, courseId, single, downloadTime, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const userId = CoreSites.getCurrentSiteUserId();\n      const commonOptions = {\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n        siteId\n      };\n      const modOptions = _objectSpread({\n        cmId: module.id\n      }, commonOptions);\n      // Get the list of pages.\n      const pages = yield _this4.getAllPages(module, courseId, commonOptions);\n      const promises = [];\n      pages.forEach(page => {\n        // Fetch page contents if it needs to be fetched.\n        if (page.timemodified > downloadTime) {\n          promises.push(AddonModWiki.getPageContents(page.id, modOptions));\n        }\n      });\n      // Fetch group data.\n      promises.push(CoreGroups.getActivityGroupInfo(module.id, false, userId, siteId));\n      // Fetch info to provide wiki links.\n      promises.push(AddonModWiki.getWiki(courseId, module.id, {\n        siteId\n      }).then(wiki => CoreCourse.getModuleBasicInfoByInstance(wiki.id, 'wiki', {\n        siteId\n      })));\n      // Get related page files and fetch them.\n      promises.push(_this4.getFiles(module, courseId, single, siteId).then(files => CoreFilepool.addFilesToQueue(siteId, files, _this4.component, module.id)));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  sync(module, courseId, siteId) {\n    return AddonModWikiSync.syncWiki(module.instance, module.course, module.id, siteId);\n  }\n}\n_class = AddonModWikiPrefetchHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModWikiPrefetchHandlerService_BaseFactory;\n  return function AddonModWikiPrefetchHandlerService_Factory(t) {\n    return (ɵAddonModWikiPrefetchHandlerService_BaseFactory || (ɵAddonModWikiPrefetchHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModWikiPrefetchHandler = makeSingleton(AddonModWikiPrefetchHandlerService);","map":{"version":3,"names":["CoreCourseActivityPrefetchHandlerBase","CoreCourse","CoreFilepool","CoreGroups","CorePluginFileDelegate","CoreSites","CoreSitesReadingStrategy","CoreUtils","makeSingleton","AddonModWiki","AddonModWikiProvider","AddonModWikiSync","AddonModWikiPrefetchHandlerService","constructor","name","modName","component","COMPONENT","updatesNames","getAllPages","module","courseId","options","_asyncToGenerator","siteId","getCurrentSiteId","wiki","getWiki","id","getWikiPageList","_unused","getDownloadSize","single","_this","promises","push","getFiles","then","files","getFilesDownloadSize","readingStrategy","pages","size","forEach","page","contentsize","total","sizes","Promise","all","_this2","introFiles","getIntroFilesFromInstance","getWikiFileList","concat","_unused2","invalidateContent","moduleId","prefetch","_this3","data","ignoreErrors","getPackageData","downloadTime","prefetchPackage","prefetchWiki","_this4","userId","getCurrentSiteUserId","commonOptions","modOptions","_objectSpread","cmId","timemodified","getPageContents","getActivityGroupInfo","getModuleBasicInfoByInstance","addFilesToQueue","sync","syncWiki","instance","course","t","factory","ɵfac","providedIn","AddonModWikiPrefetchHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/wiki/services/handlers/prefetch.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourse, CoreCourseAnyModuleData } from '@features/course/services/course';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreGroups } from '@services/groups';\nimport { CoreFileSizeSum, CorePluginFileDelegate } from '@services/plugin-file-delegate';\nimport { CoreSites, CoreSitesCommonWSOptions, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSFile } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { AddonModWiki, AddonModWikiProvider, AddonModWikiSubwikiPage } from '../wiki';\nimport { AddonModWikiSync, AddonModWikiSyncWikiResult } from '../wiki-sync';\n\n/**\n * Handler to prefetch wikis.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModWikiPrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n\n    name = 'AddonModWiki';\n    modName = 'wiki';\n    component = AddonModWikiProvider.COMPONENT;\n    updatesNames = /^.*files$|^pages$/;\n\n    /**\n     * Returns a list of pages that can be downloaded.\n     *\n     * @param module The module object returned by WS.\n     * @param courseId The course ID.\n     * @param options Other options.\n     * @returns List of pages.\n     */\n    protected async getAllPages(\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<AddonModWikiSubwikiPage[]> {\n        options.siteId = options.siteId || CoreSites.getCurrentSiteId();\n\n        try {\n            const wiki = await AddonModWiki.getWiki(courseId, module.id, options);\n\n            return await AddonModWiki.getWikiPageList(wiki, options);\n        } catch {\n            // Wiki not found, return empty list.\n            return [];\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getDownloadSize(module: CoreCourseAnyModuleData, courseId: number, single?: boolean): Promise<CoreFileSizeSum> {\n        const promises: Promise<CoreFileSizeSum>[] = [];\n        const siteId = CoreSites.getCurrentSiteId();\n\n        promises.push(this.getFiles(module, courseId, single, siteId).then((files) =>\n            CorePluginFileDelegate.getFilesDownloadSize(files)));\n\n        promises.push(this.getAllPages(module, courseId, {\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId,\n        }).then((pages) => {\n            let size = 0;\n\n            pages.forEach((page) => {\n                if (page.contentsize) {\n                    size = size + page.contentsize;\n                }\n            });\n\n            return { size: size, total: true };\n        }));\n\n        const sizes = await Promise.all(promises);\n\n        return {\n            size: sizes[0].size + sizes[1].size,\n            total: sizes[0].total && sizes[1].total,\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getFiles(\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        single?: boolean,\n        siteId?: string,\n    ): Promise<CoreWSFile[]> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        try {\n            const wiki = await AddonModWiki.getWiki(courseId, module.id, { siteId });\n\n            const introFiles = this.getIntroFilesFromInstance(module, wiki);\n\n            const files = await AddonModWiki.getWikiFileList(wiki, { siteId });\n\n            return introFiles.concat(files);\n        } catch {\n            // Wiki not found, return empty list.\n            return [];\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    invalidateContent(moduleId: number, courseId: number): Promise<void> {\n        return AddonModWiki.invalidateContent(moduleId, courseId);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async prefetch(module: CoreCourseAnyModuleData, courseId: number, single?: boolean): Promise<void> {\n        // Get the download time of the package before starting the download (otherwise we'd always get current time).\n        const siteId = CoreSites.getCurrentSiteId();\n\n        const data = await CoreUtils.ignoreErrors(CoreFilepool.getPackageData(siteId, this.component, module.id));\n\n        const downloadTime = data?.downloadTime || 0;\n\n        return this.prefetchPackage(\n            module,\n            courseId,\n            (siteId) => this.prefetchWiki(module, courseId, !!single, downloadTime, siteId),\n            siteId,\n        );\n    }\n\n    /**\n     * Prefetch a wiki.\n     *\n     * @param module Module.\n     * @param courseId Course ID the module belongs to.\n     * @param single True if we're downloading a single module, false if we're downloading a whole section.\n     * @param downloadTime The previous download time, 0 if no previous download.\n     * @param siteId Site ID.\n     * @returns Promise resolved when done.\n     */\n    protected async prefetchWiki(\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        single: boolean,\n        downloadTime: number,\n        siteId: string,\n    ): Promise<void> {\n        const userId = CoreSites.getCurrentSiteUserId();\n\n        const commonOptions = {\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId,\n        };\n        const modOptions = {\n            cmId: module.id,\n            ...commonOptions, // Include all common options.\n        };\n\n        // Get the list of pages.\n        const pages = await this.getAllPages(module, courseId, commonOptions);\n        const promises: Promise<unknown>[] = [];\n\n        pages.forEach((page) => {\n            // Fetch page contents if it needs to be fetched.\n            if (page.timemodified > downloadTime) {\n                promises.push(AddonModWiki.getPageContents(page.id, modOptions));\n            }\n        });\n\n        // Fetch group data.\n        promises.push(CoreGroups.getActivityGroupInfo(module.id, false, userId, siteId));\n\n        // Fetch info to provide wiki links.\n        promises.push(AddonModWiki.getWiki(courseId, module.id, { siteId }).then((wiki) =>\n            CoreCourse.getModuleBasicInfoByInstance(wiki.id, 'wiki', { siteId })));\n\n        // Get related page files and fetch them.\n        promises.push(this.getFiles(module, courseId, single, siteId).then((files) =>\n            CoreFilepool.addFilesToQueue(siteId, files, this.component, module.id)));\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    sync(module: CoreCourseAnyModuleData, courseId: number, siteId?: string): Promise<AddonModWikiSyncWikiResult> {\n        return AddonModWikiSync.syncWiki(module.instance, module.course, module.id, siteId);\n    }\n\n}\n\nexport const AddonModWikiPrefetchHandler = makeSingleton(AddonModWikiPrefetchHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}