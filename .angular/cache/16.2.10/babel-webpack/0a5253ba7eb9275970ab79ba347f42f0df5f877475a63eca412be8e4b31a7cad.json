{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNetwork } from '@services/network';\nimport { CoreGroups } from '@services/groups';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModForumOffline } from './forum-offline';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaModForum:';\n/**\n * Service that provides some features for forums.\n */\nexport class AddonModForumProvider {\n  /**\n   * Get cache key for can add discussion WS calls.\n   *\n   * @param forumId Forum ID.\n   * @param groupId Group ID.\n   * @returns Cache key.\n   */\n  getCanAddDiscussionCacheKey(forumId, groupId) {\n    return this.getCommonCanAddDiscussionCacheKey(forumId) + groupId;\n  }\n  /**\n   * Get common part of cache key for can add discussion WS calls.\n   * TODO: Use getForumDataCacheKey as a prefix.\n   *\n   * @param forumId Forum ID.\n   * @returns Cache key.\n   */\n  getCommonCanAddDiscussionCacheKey(forumId) {\n    return ROOT_CACHE_KEY + 'canadddiscussion:' + forumId + ':';\n  }\n  /**\n   * Get prefix cache key for all forum activity data WS calls.\n   *\n   * @param forumId Forum ID.\n   * @returns Cache key.\n   */\n  getForumDataPrefixCacheKey(forumId) {\n    return ROOT_CACHE_KEY + forumId;\n  }\n  /**\n   * Get cache key for discussion post data WS calls.\n   *\n   * @param forumId Forum ID.\n   * @param discussionId Discussion ID.\n   * @param postId Course ID.\n   * @returns Cache key.\n   */\n  getDiscussionPostDataCacheKey(forumId, discussionId, postId) {\n    return this.getForumDiscussionDataCacheKey(forumId, discussionId) + ':post:' + postId;\n  }\n  /**\n   * Get cache key for forum data WS calls.\n   *\n   * @param forumId Forum ID.\n   * @param discussionId Discussion ID.\n   * @returns Cache key.\n   */\n  getForumDiscussionDataCacheKey(forumId, discussionId) {\n    return this.getForumDataPrefixCacheKey(forumId) + ':discussion:' + discussionId;\n  }\n  /**\n   * Get cache key for forum data WS calls.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getForumDataCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'forum:' + courseId;\n  }\n  /**\n   * Get cache key for forum access information WS calls.\n   * TODO: Use getForumDataCacheKey as a prefix.\n   *\n   * @param forumId Forum ID.\n   * @returns Cache key.\n   */\n  getAccessInformationCacheKey(forumId) {\n    return ROOT_CACHE_KEY + 'accessInformation:' + forumId;\n  }\n  /**\n   * Get cache key for forum discussion posts WS calls.\n   * TODO: Use getForumDiscussionDataCacheKey instead.\n   *\n   * @param discussionId Discussion ID.\n   * @returns Cache key.\n   */\n  getDiscussionPostsCacheKey(discussionId) {\n    return ROOT_CACHE_KEY + 'discussion:' + discussionId;\n  }\n  /**\n   * Get common cache key for forum discussions list WS calls.\n   *\n   * @param forumId Forum ID.\n   * @returns Cache key.\n   */\n  getDiscussionsListCommonCacheKey(forumId) {\n    return ROOT_CACHE_KEY + 'discussions:' + forumId;\n  }\n  /**\n   * Get cache key for forum discussions list WS calls.\n   *\n   * @param forumId Forum ID.\n   * @param sortOrder Sort order.\n   * @param groupId Group ID.\n   * @returns Cache key.\n   */\n  getDiscussionsListCacheKey(forumId, sortOrder, groupId) {\n    let key = this.getDiscussionsListCommonCacheKey(forumId);\n    if (sortOrder != AddonModForumProvider.SORTORDER_LASTPOST_DESC) {\n      key += ':' + sortOrder;\n    }\n    if (groupId) {\n      key += `:group${groupId}`;\n    }\n    return key;\n  }\n  /**\n   * Add a new discussion. It will fail if offline or cannot connect.\n   *\n   * @param forumId Forum ID.\n   * @param subject New discussion's subject.\n   * @param message New discussion's message.\n   * @param options Options (subscribe, pin, ...).\n   * @param groupId Group this discussion belongs to.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the discussion is created.\n   */\n  addNewDiscussionOnline(forumId, subject, message, options, groupId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        forumid: forumId,\n        subject: subject,\n        message: message,\n        // eslint-disable-next-line max-len\n        options: CoreUtils.objectToArrayOfObjects(options || {}, 'name', 'value')\n      };\n      if (groupId) {\n        params.groupid = groupId;\n      }\n      const response = yield site.write('mod_forum_add_discussion', params);\n      // Other errors ocurring.\n      return response.discussionid;\n    })();\n  }\n  /**\n   * Check if a user can post to a certain group.\n   *\n   * @param forumId Forum ID.\n   * @param groupId Group ID.\n   * @param options Other options.\n   * @returns Promise resolved with an object with the following properties:\n   *         - status (boolean)\n   *         - canpindiscussions (boolean)\n   *         - cancreateattachment (boolean)\n   */\n  canAddDiscussion(forumId, groupId, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const params = {\n        forumid: forumId,\n        groupid: groupId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this.getCanAddDiscussionCacheKey(forumId, groupId),\n        component: AddonModForumProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const site = yield CoreSites.getSite(options.siteId);\n      const result = yield site.read('mod_forum_can_add_discussion', params, preSets);\n      if (!result) {\n        throw new Error('Invalid response calling mod_forum_can_add_discussion');\n      }\n      if (result.canpindiscussions === undefined) {\n        // WS doesn't support it yet, default it to false to prevent students from seeing the option.\n        result.canpindiscussions = false;\n      }\n      if (result.cancreateattachment === undefined) {\n        // WS doesn't support it yet, default it to true since usually the users will be able to create them.\n        result.cancreateattachment = true;\n      }\n      return result;\n    })();\n  }\n  /**\n   * Check if a user can post to all groups.\n   *\n   * @param forumId Forum ID.\n   * @param options Other options.\n   * @returns Promise resolved with an object with the following properties:\n   *         - status (boolean)\n   *         - canpindiscussions (boolean)\n   *         - cancreateattachment (boolean)\n   */\n  canAddDiscussionToAll(forumId, options = {}) {\n    return this.canAddDiscussion(forumId, AddonModForumProvider.ALL_PARTICIPANTS, options);\n  }\n  /**\n   * Delete a post.\n   *\n   * @param postId Post id.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   * @since 3.8\n   */\n  deletePost(postId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        postid: postId\n      };\n      return site.write('mod_forum_delete_post', params);\n    })();\n  }\n  /**\n   * Extract the starting post of a discussion from a list of posts. The post is removed from the array passed as a parameter.\n   *\n   * @param posts Posts to search.\n   * @returns Starting post or undefined if not found.\n   */\n  extractStartingPost(posts) {\n    const index = posts.findIndex(post => !post.parentid);\n    return index >= 0 ? posts.splice(index, 1).pop() : undefined;\n  }\n  /**\n   * Returns whether or not getDiscussionPost WS available or not.\n   *\n   * @returns If WS is available.\n   * @since 3.8\n   */\n  isGetDiscussionPostAvailable() {\n    return CoreSites.wsAvailableInCurrentSite('mod_forum_get_discussion_post');\n  }\n  /**\n   * Returns whether or not getDiscussionPost WS available or not.\n   *\n   * @param site Site. If not defined, current site.\n   * @returns If WS is available.\n   * @since 3.7\n   */\n  isGetDiscussionPostsAvailable(site) {\n    return site ? site.wsAvailable('mod_forum_get_discussion_posts') : CoreSites.wsAvailableInCurrentSite('mod_forum_get_discussion_posts');\n  }\n  /**\n   * Returns whether or not deletePost WS available or not.\n   *\n   * @returns If WS is available.\n   * @since 3.8\n   */\n  isDeletePostAvailable() {\n    return CoreSites.wsAvailableInCurrentSite('mod_forum_delete_post');\n  }\n  /**\n   * Returns whether or not updatePost WS available or not.\n   *\n   * @returns If WS is available.\n   * @since 3.8\n   */\n  isUpdatePostAvailable() {\n    return CoreSites.wsAvailableInCurrentSite('mod_forum_update_discussion_post');\n  }\n  formatDiscussionsGroups(cmId, discussions) {\n    discussions = CoreUtils.clone(discussions);\n    return CoreGroups.getActivityAllowedGroups(cmId).then(result => {\n      const strAllParts = Translate.instant('core.allparticipants');\n      const strAllGroups = Translate.instant('core.allgroups');\n      // Turn groups into an object where each group is identified by id.\n      const groups = {};\n      result.groups.forEach(fg => {\n        groups[fg.id] = fg;\n      });\n      // Format discussions.\n      discussions.forEach(disc => {\n        if (disc.groupid == AddonModForumProvider.ALL_PARTICIPANTS) {\n          disc.groupname = strAllParts;\n        } else if (disc.groupid == AddonModForumProvider.ALL_GROUPS) {\n          // Offline discussions only.\n          disc.groupname = strAllGroups;\n        } else {\n          const group = groups[disc.groupid];\n          if (group) {\n            disc.groupname = group.name;\n          }\n        }\n      });\n      return discussions;\n    }).catch(() => discussions);\n  }\n  /**\n   * Get all course forums.\n   *\n   * @param courseId Course ID.\n   * @param options Other options.\n   * @returns Promise resolved when the forums are retrieved.\n   */\n  getCourseForums(courseId, options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        courseids: [courseId]\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this2.getForumDataCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: AddonModForumProvider.COMPONENT\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      return site.read('mod_forum_get_forums_by_courses', params, preSets);\n    })();\n  }\n  /**\n   * Get a particular discussion post.\n   *\n   * @param forumId Forum ID.\n   * @param discussionId Discussion ID.\n   * @param postId Post ID.\n   * @param options Other options.\n   * @returns Promise resolved when the post is retrieved.\n   */\n  getDiscussionPost(forumId, discussionId, postId, options = {}) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        postid: postId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this3.getDiscussionPostDataCacheKey(forumId, discussionId, postId),\n        updateFrequency: CoreSite.FREQUENCY_USUALLY,\n        component: AddonModForumProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_forum_get_discussion_post', params, preSets);\n      if (!response.post) {\n        throw new Error('Post not found');\n      }\n      return _this3.translateWSPost(response.post);\n    })();\n  }\n  /**\n   * Get a forum by course module ID.\n   *\n   * @param courseId Course ID.\n   * @param cmId Course module ID.\n   * @param options Other options.\n   * @returns Promise resolved when the forum is retrieved.\n   */\n  getForum(courseId, cmId, options = {}) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const forums = yield _this4.getCourseForums(courseId, options);\n      const forum = forums.find(forum => forum.cmid == cmId);\n      if (!forum) {\n        throw new CoreError(Translate.instant('core.course.modulenotfound'));\n      }\n      return forum;\n    })();\n  }\n  /**\n   * Get a forum by forum ID.\n   *\n   * @param courseId Course ID.\n   * @param forumId Forum ID.\n   * @param options Other options.\n   * @returns Promise resolved when the forum is retrieved.\n   */\n  getForumById(courseId, forumId, options = {}) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const forums = yield _this5.getCourseForums(courseId, options);\n      const forum = forums.find(forum => forum.id === forumId);\n      if (!forum) {\n        throw new Error(`Forum with id ${forumId} not found`);\n      }\n      return forum;\n    })();\n  }\n  /**\n   * Get access information for a given forum.\n   *\n   * @param forumId Forum ID.\n   * @param options Other options.\n   * @returns Object with access information.\n   * @since 3.7\n   */\n  getAccessInformation(forumId, options = {}) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      if (!site.wsAvailable('mod_forum_get_forum_access_information')) {\n        // Access information not available for 3.6 or older sites.\n        return {};\n      }\n      const params = {\n        forumid: forumId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this6.getAccessInformationCacheKey(forumId),\n        component: AddonModForumProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      return site.read('mod_forum_get_forum_access_information', params, preSets);\n    })();\n  }\n  /**\n   * Get forum discussion posts.\n   *\n   * @param discussionId Discussion ID.\n   * @param options Other options.\n   * @returns Promise resolved with forum posts and rating info.\n   */\n  getDiscussionPosts(discussionId, options = {}) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      // Convenience function to translate legacy data to new format.\n      const translateLegacyPostsFormat = posts => posts.map(post => {\n        const newPost = {\n          id: post.id,\n          discussionid: post.discussion,\n          parentid: post.parent,\n          hasparent: !!post.parent,\n          author: {\n            id: post.userid,\n            fullname: post.userfullname,\n            urls: {\n              profileimage: post.userpictureurl\n            }\n          },\n          timecreated: post.created,\n          subject: post.subject,\n          message: post.message,\n          attachments: post.attachments,\n          capabilities: {\n            reply: !!post.canreply\n          },\n          unread: !post.postread,\n          isprivatereply: !!post.isprivatereply,\n          tags: post.tags\n        };\n        if ('groupname' in post && typeof post['groupname'] === 'string') {\n          newPost.author['groups'] = [{\n            name: post['groupname']\n          }];\n        }\n        return newPost;\n      });\n      // For some reason, the new WS doesn't use the tags exporter so it returns a different format than other WebServices.\n      // Convert the new format to the exporter one so it's the same as in other WebServices.\n      const translateTagsFormatToLegacy = posts => {\n        posts.forEach(post => _this7.translateWSPost(post));\n        return posts;\n      };\n      const params = {\n        discussionid: discussionId\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this7.getDiscussionPostsCacheKey(discussionId),\n        component: AddonModForumProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const site = yield CoreSites.getSite(options.siteId);\n      const isGetDiscussionPostsAvailable = _this7.isGetDiscussionPostsAvailable(site);\n      const response = isGetDiscussionPostsAvailable ? yield site.read('mod_forum_get_discussion_posts', params, preSets) : yield site.read('mod_forum_get_forum_discussion_posts', params, preSets);\n      if (!response) {\n        throw new Error('Could not get forum posts');\n      }\n      const posts = isGetDiscussionPostsAvailable ? translateTagsFormatToLegacy(response.posts) : translateLegacyPostsFormat(response.posts);\n      _this7.storeUserData(posts);\n      return _objectSpread(_objectSpread({}, response), {}, {\n        posts\n      });\n    })();\n  }\n  /**\n   * Sort forum discussion posts by an specified field.\n   *\n   * @param posts Discussion posts to be sorted in place.\n   * @param direction Direction of the sorting (ASC / DESC).\n   */\n  sortDiscussionPosts(posts, direction) {\n    // @todo Check children when sorting.\n    posts.sort((a, b) => {\n      const timeCreatedA = Number(a.timecreated) || 0;\n      const timeCreatedB = Number(b.timecreated) || 0;\n      if (timeCreatedA == 0 || timeCreatedB == 0) {\n        // Leave 0 at the end.\n        return timeCreatedB - timeCreatedA;\n      }\n      if (direction == 'ASC') {\n        return timeCreatedA - timeCreatedB;\n      } else {\n        return timeCreatedB - timeCreatedA;\n      }\n    });\n  }\n  /**\n   * Return whether discussion lists can be sorted.\n   *\n   * @param site Site. If not defined, current site.\n   * @returns True if discussion lists can be sorted.\n   */\n  isDiscussionListSortingAvailable(site) {\n    var _site;\n    site = site || CoreSites.getCurrentSite();\n    return !!((_site = site) !== null && _site !== void 0 && _site.isVersionGreaterEqualThan('3.7'));\n  }\n  /**\n   * Return the list of available sort orders.\n   *\n   * @returns List of sort orders.\n   */\n  getAvailableSortOrders() {\n    const sortOrders = [{\n      label: 'addon.mod_forum.discussionlistsortbylastpostdesc',\n      value: AddonModForumProvider.SORTORDER_LASTPOST_DESC\n    }];\n    if (this.isDiscussionListSortingAvailable()) {\n      sortOrders.push({\n        label: 'addon.mod_forum.discussionlistsortbylastpostasc',\n        value: AddonModForumProvider.SORTORDER_LASTPOST_ASC\n      }, {\n        label: 'addon.mod_forum.discussionlistsortbycreateddesc',\n        value: AddonModForumProvider.SORTORDER_CREATED_DESC\n      }, {\n        label: 'addon.mod_forum.discussionlistsortbycreatedasc',\n        value: AddonModForumProvider.SORTORDER_CREATED_ASC\n      }, {\n        label: 'addon.mod_forum.discussionlistsortbyrepliesdesc',\n        value: AddonModForumProvider.SORTORDER_REPLIES_DESC\n      }, {\n        label: 'addon.mod_forum.discussionlistsortbyrepliesasc',\n        value: AddonModForumProvider.SORTORDER_REPLIES_ASC\n      });\n    }\n    return sortOrders;\n  }\n  /**\n   * Get sort order selected by the user.\n   *\n   * @returns Promise resolved with sort order.\n   */\n  getSelectedSortOrder() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const sortOrders = _this8.getAvailableSortOrders();\n      let sortOrderValue = null;\n      if (_this8.isDiscussionListSortingAvailable()) {\n        const preferenceValue = yield CoreUtils.ignoreErrors(CoreUser.getUserPreference(AddonModForumProvider.PREFERENCE_SORTORDER));\n        sortOrderValue = preferenceValue ? parseInt(preferenceValue, 10) : null;\n      }\n      return sortOrders.find(sortOrder => sortOrder.value === sortOrderValue) || sortOrders[0];\n    })();\n  }\n  /**\n   * Get forum discussions.\n   *\n   * @param forumId Forum ID.\n   * @param options Other options.\n   * @returns Promise resolved with an object with:\n   *         - discussions: List of discussions. Note that for every discussion in the list discussion.id is the main post ID but\n   *         discussion ID is discussion.discussion.\n   *         - canLoadMore: True if there may be more discussions to load.\n   */\n  getDiscussions(forumId, options = {}) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      options.sortOrder = options.sortOrder || AddonModForumProvider.SORTORDER_LASTPOST_DESC;\n      options.page = options.page || 0;\n      const site = yield CoreSites.getSite(options.siteId);\n      let method = 'mod_forum_get_forum_discussions_paginated';\n      const params = {\n        forumid: forumId,\n        page: options.page,\n        perpage: AddonModForumProvider.DISCUSSIONS_PER_PAGE\n      };\n      if (site.wsAvailable('mod_forum_get_forum_discussions')) {\n        // Since Moodle 3.7.\n        method = 'mod_forum_get_forum_discussions';\n        params.sortorder = options.sortOrder;\n        params.groupid = options.groupId;\n      } else {\n        if (options.sortOrder !== AddonModForumProvider.SORTORDER_LASTPOST_DESC) {\n          throw new Error('Sorting not supported with the old WS method.');\n        }\n        params.sortby = 'timemodified';\n        params.sortdirection = 'DESC';\n      }\n      const preSets = _objectSpread({\n        cacheKey: _this9.getDiscussionsListCacheKey(forumId, options.sortOrder),\n        component: AddonModForumProvider.COMPONENT,\n        componentId: options.cmId\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      let response;\n      try {\n        // eslint-disable-next-line max-len\n        response = yield site.read(method, params, preSets);\n      } catch (error) {\n        // Try to get the data from cache stored with the old WS method.\n        if (CoreNetwork.isOnline() || method !== 'mod_forum_get_forum_discussions' || options.sortOrder !== AddonModForumProvider.SORTORDER_LASTPOST_DESC) {\n          throw error;\n        }\n        const params = {\n          forumid: forumId,\n          page: options.page,\n          perpage: AddonModForumProvider.DISCUSSIONS_PER_PAGE,\n          sortby: 'timemodified',\n          sortdirection: 'DESC'\n        };\n        Object.assign(preSets, CoreSites.getReadingStrategyPreSets(1 /* CoreSitesReadingStrategy.PREFER_CACHE */));\n        response = yield site.read('mod_forum_get_forum_discussions_paginated', params, preSets);\n      }\n      if (!response) {\n        throw new Error('Could not get discussions');\n      }\n      _this9.storeUserData(response.discussions);\n      return {\n        discussions: response.discussions,\n        canLoadMore: response.discussions.length >= AddonModForumProvider.DISCUSSIONS_PER_PAGE\n      };\n    })();\n  }\n  /**\n   * Get forum discussions in several pages.\n   * If a page fails, the discussions until that page will be returned along with a flag indicating an error occurred.\n   *\n   * @param forumId Forum ID.\n   * @param options Get discussion in pages options.\n   * @returns Promise resolved with an object with:\n   *         - discussions: List of discussions.\n   *         - error: True if an error occurred, false otherwise.\n   */\n  getDiscussionsInPages(forumId, options = {}) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      var _options$page;\n      const result = {\n        discussions: [],\n        error: false\n      };\n      let numPages = options.numPages === undefined ? -1 : options.numPages;\n      if (!numPages) {\n        return result;\n      }\n      const getPage = page =>\n      // Get page discussions.\n      _this10.getDiscussions(forumId, _objectSpread(_objectSpread({}, options), {}, {\n        page\n      })).then(response => {\n        result.discussions = result.discussions.concat(response.discussions);\n        numPages--;\n        if (response.canLoadMore && numPages !== 0) {\n          return getPage(page + 1); // Get next page.\n        } else {\n          return result;\n        }\n      }).catch(() => {\n        // Error getting a page.\n        result.error = true;\n        return result;\n      });\n      return getPage((_options$page = options.page) !== null && _options$page !== void 0 ? _options$page : 0);\n    })();\n  }\n  /**\n   * Invalidates can add discussion WS calls.\n   *\n   * @param forumId Forum ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateCanAddDiscussion(forumId, siteId) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKeyStartingWith(_this11.getCommonCanAddDiscussionCacheKey(forumId));\n    })();\n  }\n  /**\n   * Invalidate the prefetched content except files.\n   *\n   * @param moduleId The module ID.\n   * @param courseId Course ID.\n   * @returns Promise resolved when data is invalidated.\n   */\n  invalidateContent(moduleId, courseId) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      // Get the forum first, we need the forum ID.\n      const forum = yield _this12.getForum(courseId, moduleId);\n      const promises = [];\n      promises.push(_this12.invalidateForumData(courseId));\n      promises.push(_this12.invalidateDiscussionsList(forum.id));\n      promises.push(_this12.invalidateCanAddDiscussion(forum.id));\n      promises.push(_this12.invalidateAccessInformation(forum.id));\n      _this12.getAvailableSortOrders().forEach(sortOrder => {\n        // We need to get the list of discussions to be able to invalidate their posts.\n        promises.push(_this12.getDiscussionsInPages(forum.id, {\n          cmId: forum.cmid,\n          sortOrder: sortOrder.value,\n          readingStrategy: 0 /* CoreSitesReadingStrategy.ONLY_CACHE */\n        }).then(response => {\n          // Now invalidate the WS calls.\n          const promises = [];\n          response.discussions.forEach(discussion => {\n            promises.push(_this12.invalidateDiscussionPosts(discussion.discussion, forum.id));\n          });\n          return CoreUtils.allPromises(promises);\n        }));\n      });\n      if (_this12.isDiscussionListSortingAvailable()) {\n        promises.push(CoreUser.invalidateUserPreference(AddonModForumProvider.PREFERENCE_SORTORDER));\n      }\n      return CoreUtils.allPromises(promises);\n    })();\n  }\n  /**\n   * Invalidates access information.\n   *\n   * @param forumId Forum ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAccessInformation(forumId, siteId) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this13.getAccessInformationCacheKey(forumId));\n    })();\n  }\n  /**\n   * Invalidates forum discussion posts.\n   *\n   * @param discussionId Discussion ID.\n   * @param forumId Forum ID. If not set, we can't invalidate individual post information.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateDiscussionPosts(discussionId, forumId, siteId) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const promises = [site.invalidateWsCacheForKey(_this14.getDiscussionPostsCacheKey(discussionId))];\n      if (forumId) {\n        promises.push(site.invalidateWsCacheForKeyStartingWith(_this14.getForumDiscussionDataCacheKey(forumId, discussionId)));\n      }\n      yield CoreUtils.allPromises(promises);\n    })();\n  }\n  /**\n   * Invalidates discussion list.\n   *\n   * @param forumId Forum ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateDiscussionsList(forumId, siteId) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKeyStartingWith(_this15.getDiscussionsListCommonCacheKey(forumId));\n    })();\n  }\n  /**\n   * Invalidates forum data.\n   *\n   * @param courseId Course ID.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateForumData(courseId) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getCurrentSite();\n      yield site === null || site === void 0 ? void 0 : site.invalidateWsCacheForKey(_this16.getForumDataCacheKey(courseId));\n    })();\n  }\n  /**\n   * Report a forum as being viewed.\n   *\n   * @param id Module ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logView(id, siteId) {\n    const params = {\n      forumid: id\n    };\n    return CoreCourseLogHelper.log('mod_forum_view_forum', params, AddonModForumProvider.COMPONENT, id, siteId);\n  }\n  /**\n   * Report a forum discussion as being viewed.\n   *\n   * @param id Discussion ID.\n   * @param forumId Forum ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logDiscussionView(id, forumId, siteId) {\n    const params = {\n      discussionid: id\n    };\n    return CoreCourseLogHelper.log('mod_forum_view_forum_discussion', params, AddonModForumProvider.COMPONENT, forumId, siteId);\n  }\n  /**\n   * Reply to a certain post.\n   *\n   * @param postId ID of the post being replied.\n   * @param discussionId ID of the discussion the user is replying to.\n   * @param forumId ID of the forum the user is replying to.\n   * @param name Forum name.\n   * @param courseId Course ID the forum belongs to.\n   * @param subject New post's subject.\n   * @param message New post's message.\n   * @param options Options (subscribe, attachments, ...).\n   * @param siteId Site ID. If not defined, current site.\n   * @param allowOffline True if it can be stored in offline, false otherwise.\n   * @returns Promise resolved with a boolean indicating if the test was sent online or not.\n   */\n  replyPost(postId, discussionId, forumId, name, courseId, subject, message, options, siteId, allowOffline) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      // Convenience function to store a message to be synchronized later.\n      const storeOffline = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* () {\n          if (!forumId) {\n            // Not enough data to store in offline, reject.\n            throw new Error(Translate.instant('core.networkerrormsg'));\n          }\n          yield AddonModForumOffline.replyPost(postId, discussionId, forumId, name, courseId, subject, message, options, siteId);\n          return false;\n        });\n        return function storeOffline() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      if (!CoreNetwork.isOnline() && allowOffline) {\n        // App is offline, store the action.\n        return storeOffline();\n      }\n      // If there's already a reply to be sent to the server, discard it first.\n      try {\n        yield AddonModForumOffline.deleteReply(postId, siteId);\n        yield _this17.replyPostOnline(postId, subject, message, options, siteId);\n        return true;\n      } catch (error) {\n        if (allowOffline && !CoreUtils.isWebServiceError(error)) {\n          // Couldn't connect to server, store in offline.\n          return storeOffline();\n        } else {\n          // The WebService has thrown an error or offline not supported, reject.\n          throw error;\n        }\n      }\n    })();\n  }\n  /**\n   * Reply to a certain post. It will fail if offline or cannot connect.\n   *\n   * @param postId ID of the post being replied.\n   * @param subject New post's subject.\n   * @param message New post's message.\n   * @param options Options (subscribe, attachments, ...).\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the created post id.\n   */\n  replyPostOnline(postId, subject, message, options, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        postid: postId,\n        subject: subject,\n        message: message,\n        options: CoreUtils.objectToArrayOfObjects(options || {}, 'name', 'value')\n      };\n      const response = yield site.write('mod_forum_add_discussion_post', params);\n      if (!response || !response.postid) {\n        throw new Error('Post id missing from response');\n      }\n      return response.postid;\n    })();\n  }\n  /**\n   * Lock or unlock a discussion.\n   *\n   * @param forumId Forum id.\n   * @param discussionId DIscussion id.\n   * @param locked True to lock, false to unlock.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   * @since 3.7\n   */\n  setLockState(forumId, discussionId, locked, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        forumid: forumId,\n        discussionid: discussionId,\n        targetstate: locked ? 0 : 1\n      };\n      return site.write('mod_forum_set_lock_state', params);\n    })();\n  }\n  /**\n   * Returns whether the set pin state WS is available.\n   *\n   * @returns Whether it's available.\n   * @since 3.7\n   */\n  isSetPinStateAvailableForSite() {\n    return CoreSites.wsAvailableInCurrentSite('mod_forum_set_pin_state');\n  }\n  /**\n   * Pin or unpin a discussion.\n   *\n   * @param discussionId Discussion id.\n   * @param pinned True to pin, false to unpin.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   * @since 3.7\n   */\n  setPinState(discussionId, pinned, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        discussionid: discussionId,\n        targetstate: pinned ? 1 : 0\n      };\n      yield site.write('mod_forum_set_pin_state', params);\n    })();\n  }\n  /**\n   * Star or unstar a discussion.\n   *\n   * @param discussionId Discussion id.\n   * @param starred True to star, false to unstar.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   * @since 3.7\n   */\n  toggleFavouriteState(discussionId, starred, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        discussionid: discussionId,\n        targetstate: starred\n      };\n      yield site.write('mod_forum_toggle_favourite_state', params);\n    })();\n  }\n  /**\n   * Store the users data from a discussions/posts list.\n   *\n   * @param list Array of posts or discussions.\n   */\n  storeUserData(list) {\n    const users = {};\n    list.forEach(entry => {\n      if ('author' in entry) {\n        const authorId = Number(entry.author.id);\n        if (!isNaN(authorId) && !users[authorId]) {\n          var _entry$author$urls;\n          users[authorId] = {\n            id: entry.author.id,\n            fullname: entry.author.fullname,\n            profileimageurl: (_entry$author$urls = entry.author.urls) === null || _entry$author$urls === void 0 ? void 0 : _entry$author$urls.profileimage\n          };\n        }\n      }\n      const userId = parseInt(entry['userid']);\n      if ('userid' in entry && !isNaN(userId) && !users[userId]) {\n        users[userId] = {\n          id: userId,\n          fullname: entry.userfullname,\n          profileimageurl: entry.userpictureurl\n        };\n      }\n      const userModified = parseInt(entry['usermodified']);\n      if ('usermodified' in entry && !isNaN(userModified) && !users[userModified]) {\n        users[userModified] = {\n          id: userModified,\n          fullname: entry.usermodifiedfullname,\n          profileimageurl: entry.usermodifiedpictureurl\n        };\n      }\n    });\n    CoreUser.storeUsers(CoreUtils.objectToArray(users));\n  }\n  /**\n   * Update a certain post.\n   *\n   * @param postId ID of the post being edited.\n   * @param subject New post's subject.\n   * @param message New post's message.\n   * @param options Options (subscribe, attachments, ...).\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with success boolean when done.\n   */\n  updatePost(postId, subject, message, options, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        postid: postId,\n        subject: subject,\n        message: message,\n        options: CoreUtils.objectToArrayOfObjects(options || {}, 'name', 'value')\n      };\n      const response = yield site.write('mod_forum_update_discussion_post', params);\n      return response && response.status;\n    })();\n  }\n  /**\n   * For some reason, the new WS doesn't use the tags exporter so it returns a different format than other WebServices.\n   * Convert the new format to the exporter one so it's the same as in other WebServices.\n   *\n   * @param post Post returned by the new WS.\n   * @returns Post using the same format as other WebServices.\n   */\n  translateWSPost(post) {\n    post.tags = (post.tags || []).map(tag => {\n      const viewUrl = tag.urls && tag.urls.view || '';\n      const params = CoreUrlUtils.extractUrlParams(viewUrl);\n      return {\n        id: tag.tagid,\n        taginstanceid: tag.id,\n        flag: tag.flag ? 1 : 0,\n        isstandard: tag.isstandard,\n        rawname: tag.displayname,\n        name: tag.displayname,\n        tagcollid: params.tc ? Number(params.tc) : undefined,\n        taginstancecontextid: params.from ? Number(params.from) : undefined\n      };\n    });\n    return post;\n  }\n}\n_class = AddonModForumProvider;\n_class.COMPONENT = 'mmaModForum';\n_class.DISCUSSIONS_PER_PAGE = 10;\n// Max of discussions per page.\n_class.NEW_DISCUSSION_EVENT = 'addon_mod_forum_new_discussion';\n_class.REPLY_DISCUSSION_EVENT = 'addon_mod_forum_reply_discussion';\n_class.CHANGE_DISCUSSION_EVENT = 'addon_mod_forum_change_discussion_status';\n_class.MARK_READ_EVENT = 'addon_mod_forum_mark_read';\n_class.LEAVING_POSTS_PAGE = 'addon_mod_forum_leaving_posts_page';\n_class.PREFERENCE_SORTORDER = 'forum_discussionlistsortorder';\n_class.SORTORDER_LASTPOST_DESC = 1;\n_class.SORTORDER_LASTPOST_ASC = 2;\n_class.SORTORDER_CREATED_DESC = 3;\n_class.SORTORDER_CREATED_ASC = 4;\n_class.SORTORDER_REPLIES_DESC = 5;\n_class.SORTORDER_REPLIES_ASC = 6;\n_class.ALL_PARTICIPANTS = -1;\n_class.ALL_GROUPS = -2;\n_class.ɵfac = function AddonModForumProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModForum = makeSingleton(AddonModForumProvider);","map":{"version":3,"names":["CoreError","CoreSite","CoreCourseLogHelper","CoreUser","CoreNetwork","CoreGroups","CoreSites","CoreSitesReadingStrategy","CoreUrlUtils","CoreUtils","makeSingleton","Translate","AddonModForumOffline","ROOT_CACHE_KEY","AddonModForumProvider","getCanAddDiscussionCacheKey","forumId","groupId","getCommonCanAddDiscussionCacheKey","getForumDataPrefixCacheKey","getDiscussionPostDataCacheKey","discussionId","postId","getForumDiscussionDataCacheKey","getForumDataCacheKey","courseId","getAccessInformationCacheKey","getDiscussionPostsCacheKey","getDiscussionsListCommonCacheKey","getDiscussionsListCacheKey","sortOrder","key","SORTORDER_LASTPOST_DESC","addNewDiscussionOnline","subject","message","options","siteId","_asyncToGenerator","site","getSite","params","forumid","objectToArrayOfObjects","groupid","response","write","discussionid","canAddDiscussion","_this","preSets","_objectSpread","cacheKey","component","COMPONENT","componentId","cmId","getReadingStrategyPreSets","readingStrategy","result","read","Error","canpindiscussions","undefined","cancreateattachment","canAddDiscussionToAll","ALL_PARTICIPANTS","deletePost","postid","extractStartingPost","posts","index","findIndex","post","parentid","splice","pop","isGetDiscussionPostAvailable","wsAvailableInCurrentSite","isGetDiscussionPostsAvailable","wsAvailable","isDeletePostAvailable","isUpdatePostAvailable","formatDiscussionsGroups","discussions","clone","getActivityAllowedGroups","then","strAllParts","instant","strAllGroups","groups","forEach","fg","id","disc","groupname","ALL_GROUPS","group","name","catch","getCourseForums","_this2","courseids","updateFrequency","FREQUENCY_RARELY","getDiscussionPost","_this3","FREQUENCY_USUALLY","translateWSPost","getForum","_this4","forums","forum","find","cmid","getForumById","_this5","getAccessInformation","_this6","getDiscussionPosts","_this7","translateLegacyPostsFormat","map","newPost","discussion","parent","hasparent","author","userid","fullname","userfullname","urls","profileimage","userpictureurl","timecreated","created","attachments","capabilities","reply","canreply","unread","postread","isprivatereply","tags","translateTagsFormatToLegacy","storeUserData","sortDiscussionPosts","direction","sort","a","b","timeCreatedA","Number","timeCreatedB","isDiscussionListSortingAvailable","_site","getCurrentSite","isVersionGreaterEqualThan","getAvailableSortOrders","sortOrders","label","value","push","SORTORDER_LASTPOST_ASC","SORTORDER_CREATED_DESC","SORTORDER_CREATED_ASC","SORTORDER_REPLIES_DESC","SORTORDER_REPLIES_ASC","getSelectedSortOrder","_this8","sortOrderValue","preferenceValue","ignoreErrors","getUserPreference","PREFERENCE_SORTORDER","parseInt","getDiscussions","_this9","page","method","perpage","DISCUSSIONS_PER_PAGE","sortorder","sortby","sortdirection","error","isOnline","Object","assign","canLoadMore","length","getDiscussionsInPages","_this10","_options$page","numPages","getPage","concat","invalidateCanAddDiscussion","_this11","invalidateWsCacheForKeyStartingWith","invalidateContent","moduleId","_this12","promises","invalidateForumData","invalidateDiscussionsList","invalidateAccessInformation","invalidateDiscussionPosts","allPromises","invalidateUserPreference","_this13","invalidateWsCacheForKey","_this14","_this15","_this16","logView","log","logDiscussionView","replyPost","allowOffline","_this17","getCurrentSiteId","storeOffline","_ref","apply","arguments","deleteReply","replyPostOnline","isWebServiceError","setLockState","locked","targetstate","isSetPinStateAvailableForSite","setPinState","pinned","toggleFavouriteState","starred","list","users","entry","authorId","isNaN","_entry$author$urls","profileimageurl","userId","userModified","usermodifiedfullname","usermodifiedpictureurl","storeUsers","objectToArray","updatePost","status","tag","viewUrl","view","extractUrlParams","tagid","taginstanceid","flag","isstandard","rawname","displayname","tagcollid","tc","taginstancecontextid","from","_class","NEW_DISCUSSION_EVENT","REPLY_DISCUSSION_EVENT","CHANGE_DISCUSSION_EVENT","MARK_READ_EVENT","LEAVING_POSTS_PAGE","factory","ɵfac","providedIn","AddonModForum"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/forum/services/forum.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourseCommonModWSOptions } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreRatingInfo } from '@features/rating/services/rating';\nimport { CoreTagItem } from '@features/tag/services/tag';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNetwork } from '@services/network';\nimport { CoreFileEntry } from '@services/file-helper';\nimport { CoreGroups } from '@services/groups';\nimport { CoreSitesCommonWSOptions, CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreStatusWithWarningsWSResponse, CoreWSExternalFile, CoreWSExternalWarning, CoreWSStoredFile } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModForumOffline, AddonModForumOfflineDiscussion, AddonModForumReplyOptions } from './forum-offline';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\n\nconst ROOT_CACHE_KEY = 'mmaModForum:';\n\ndeclare module '@singletons/events' {\n\n    /**\n     * Augment CoreEventsData interface with events specific to this service.\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\n     */\n    export interface CoreEventsData {\n        [AddonModForumProvider.NEW_DISCUSSION_EVENT]: AddonModForumNewDiscussionData;\n        [AddonModForumProvider.REPLY_DISCUSSION_EVENT]: AddonModForumReplyDiscussionData;\n        [AddonModForumProvider.CHANGE_DISCUSSION_EVENT]: AddonModForumChangeDiscussionData;\n        [AddonModForumProvider.MARK_READ_EVENT]: AddonModForumMarkReadData;\n    }\n\n}\n\n/**\n * Service that provides some features for forums.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModForumProvider {\n\n    static readonly COMPONENT = 'mmaModForum';\n    static readonly DISCUSSIONS_PER_PAGE = 10; // Max of discussions per page.\n    static readonly NEW_DISCUSSION_EVENT = 'addon_mod_forum_new_discussion';\n    static readonly REPLY_DISCUSSION_EVENT = 'addon_mod_forum_reply_discussion';\n    static readonly CHANGE_DISCUSSION_EVENT = 'addon_mod_forum_change_discussion_status';\n    static readonly MARK_READ_EVENT = 'addon_mod_forum_mark_read';\n    static readonly LEAVING_POSTS_PAGE = 'addon_mod_forum_leaving_posts_page';\n\n    static readonly PREFERENCE_SORTORDER = 'forum_discussionlistsortorder';\n    static readonly SORTORDER_LASTPOST_DESC = 1;\n    static readonly SORTORDER_LASTPOST_ASC = 2;\n    static readonly SORTORDER_CREATED_DESC = 3;\n    static readonly SORTORDER_CREATED_ASC = 4;\n    static readonly SORTORDER_REPLIES_DESC = 5;\n    static readonly SORTORDER_REPLIES_ASC = 6;\n\n    static readonly ALL_PARTICIPANTS = -1;\n    static readonly ALL_GROUPS = -2;\n\n    /**\n     * Get cache key for can add discussion WS calls.\n     *\n     * @param forumId Forum ID.\n     * @param groupId Group ID.\n     * @returns Cache key.\n     */\n    protected getCanAddDiscussionCacheKey(forumId: number, groupId: number): string {\n        return this.getCommonCanAddDiscussionCacheKey(forumId) + groupId;\n    }\n\n    /**\n     * Get common part of cache key for can add discussion WS calls.\n     * TODO: Use getForumDataCacheKey as a prefix.\n     *\n     * @param forumId Forum ID.\n     * @returns Cache key.\n     */\n    protected getCommonCanAddDiscussionCacheKey(forumId: number): string {\n        return ROOT_CACHE_KEY + 'canadddiscussion:' + forumId + ':';\n    }\n\n    /**\n     * Get prefix cache key for all forum activity data WS calls.\n     *\n     * @param forumId Forum ID.\n     * @returns Cache key.\n     */\n    protected getForumDataPrefixCacheKey(forumId: number): string {\n        return ROOT_CACHE_KEY + forumId;\n    }\n\n    /**\n     * Get cache key for discussion post data WS calls.\n     *\n     * @param forumId Forum ID.\n     * @param discussionId Discussion ID.\n     * @param postId Course ID.\n     * @returns Cache key.\n     */\n    protected getDiscussionPostDataCacheKey(forumId: number, discussionId: number, postId: number): string {\n        return this.getForumDiscussionDataCacheKey(forumId, discussionId) + ':post:' + postId;\n    }\n\n    /**\n     * Get cache key for forum data WS calls.\n     *\n     * @param forumId Forum ID.\n     * @param discussionId Discussion ID.\n     * @returns Cache key.\n     */\n    protected getForumDiscussionDataCacheKey(forumId: number, discussionId: number): string {\n        return this.getForumDataPrefixCacheKey(forumId) + ':discussion:' + discussionId;\n    }\n\n    /**\n     * Get cache key for forum data WS calls.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getForumDataCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'forum:' + courseId;\n    }\n\n    /**\n     * Get cache key for forum access information WS calls.\n     * TODO: Use getForumDataCacheKey as a prefix.\n     *\n     * @param forumId Forum ID.\n     * @returns Cache key.\n     */\n    protected getAccessInformationCacheKey(forumId: number): string {\n        return ROOT_CACHE_KEY + 'accessInformation:' + forumId;\n    }\n\n    /**\n     * Get cache key for forum discussion posts WS calls.\n     * TODO: Use getForumDiscussionDataCacheKey instead.\n     *\n     * @param discussionId Discussion ID.\n     * @returns Cache key.\n     */\n    protected getDiscussionPostsCacheKey(discussionId: number): string {\n        return ROOT_CACHE_KEY + 'discussion:' + discussionId;\n    }\n\n    /**\n     * Get common cache key for forum discussions list WS calls.\n     *\n     * @param forumId Forum ID.\n     * @returns Cache key.\n     */\n    protected getDiscussionsListCommonCacheKey(forumId: number): string {\n        return ROOT_CACHE_KEY + 'discussions:' + forumId;\n    }\n\n    /**\n     * Get cache key for forum discussions list WS calls.\n     *\n     * @param forumId Forum ID.\n     * @param sortOrder Sort order.\n     * @param groupId Group ID.\n     * @returns Cache key.\n     */\n    protected getDiscussionsListCacheKey(forumId: number, sortOrder: number, groupId?: number): string {\n        let key = this.getDiscussionsListCommonCacheKey(forumId);\n\n        if (sortOrder != AddonModForumProvider.SORTORDER_LASTPOST_DESC) {\n            key += ':' + sortOrder;\n        }\n        if (groupId) {\n            key += `:group${groupId}`;\n        }\n\n        return key;\n    }\n\n    /**\n     * Add a new discussion. It will fail if offline or cannot connect.\n     *\n     * @param forumId Forum ID.\n     * @param subject New discussion's subject.\n     * @param message New discussion's message.\n     * @param options Options (subscribe, pin, ...).\n     * @param groupId Group this discussion belongs to.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the discussion is created.\n     */\n    async addNewDiscussionOnline(\n        forumId: number,\n        subject: string,\n        message: string,\n        options?: AddonModForumAddDiscussionWSOptionsObject,\n        groupId?: number,\n        siteId?: string,\n    ): Promise<number> {\n        const site = await CoreSites.getSite(siteId);\n        const params: AddonModForumAddDiscussionWSParams = {\n            forumid: forumId,\n            subject: subject,\n            message: message,\n\n            // eslint-disable-next-line max-len\n            options: CoreUtils.objectToArrayOfObjects<AddonModForumAddDiscussionWSOptionsArray[0], AddonModForumAddDiscussionWSOptionsObject>(\n                options || {},\n                'name',\n                'value',\n            ),\n        };\n\n        if (groupId) {\n            params.groupid = groupId;\n        }\n\n        const response = await site.write<AddonModForumAddDiscussionWSResponse>('mod_forum_add_discussion', params);\n\n        // Other errors ocurring.\n        return response.discussionid;\n    }\n\n    /**\n     * Check if a user can post to a certain group.\n     *\n     * @param forumId Forum ID.\n     * @param groupId Group ID.\n     * @param options Other options.\n     * @returns Promise resolved with an object with the following properties:\n     *         - status (boolean)\n     *         - canpindiscussions (boolean)\n     *         - cancreateattachment (boolean)\n     */\n    async canAddDiscussion(\n        forumId: number,\n        groupId: number,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<AddonModForumCanAddDiscussion> {\n        const params: AddonModForumCanAddDiscussionWSParams = {\n            forumid: forumId,\n            groupid: groupId,\n        };\n        const preSets = {\n            cacheKey: this.getCanAddDiscussionCacheKey(forumId, groupId),\n            component: AddonModForumProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const site = await CoreSites.getSite(options.siteId);\n        const result = await site.read<AddonModForumCanAddDiscussionWSResponse>('mod_forum_can_add_discussion', params, preSets);\n\n        if (!result) {\n            throw new Error('Invalid response calling mod_forum_can_add_discussion');\n        }\n\n        if (result.canpindiscussions === undefined) {\n            // WS doesn't support it yet, default it to false to prevent students from seeing the option.\n            result.canpindiscussions = false;\n        }\n        if (result.cancreateattachment === undefined) {\n            // WS doesn't support it yet, default it to true since usually the users will be able to create them.\n            result.cancreateattachment = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a user can post to all groups.\n     *\n     * @param forumId Forum ID.\n     * @param options Other options.\n     * @returns Promise resolved with an object with the following properties:\n     *         - status (boolean)\n     *         - canpindiscussions (boolean)\n     *         - cancreateattachment (boolean)\n     */\n    canAddDiscussionToAll(forumId: number, options: CoreCourseCommonModWSOptions = {}): Promise<AddonModForumCanAddDiscussion> {\n        return this.canAddDiscussion(forumId, AddonModForumProvider.ALL_PARTICIPANTS, options);\n    }\n\n    /**\n     * Delete a post.\n     *\n     * @param postId Post id.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     * @since 3.8\n     */\n    async deletePost(postId: number, siteId?: string): Promise<AddonModForumDeletePostWSResponse> {\n        const site = await CoreSites.getSite(siteId);\n        const params: AddonModForumDeletePostWSParams = {\n            postid: postId,\n        };\n\n        return site.write<AddonModForumDeletePostWSResponse>('mod_forum_delete_post', params);\n    }\n\n    /**\n     * Extract the starting post of a discussion from a list of posts. The post is removed from the array passed as a parameter.\n     *\n     * @param posts Posts to search.\n     * @returns Starting post or undefined if not found.\n     */\n    extractStartingPost(posts: AddonModForumPost[]): AddonModForumPost | undefined {\n        const index = posts.findIndex((post) => !post.parentid);\n\n        return index >= 0 ? posts.splice(index, 1).pop() : undefined;\n    }\n\n    /**\n     * Returns whether or not getDiscussionPost WS available or not.\n     *\n     * @returns If WS is available.\n     * @since 3.8\n     */\n    isGetDiscussionPostAvailable(): boolean {\n        return CoreSites.wsAvailableInCurrentSite('mod_forum_get_discussion_post');\n    }\n\n    /**\n     * Returns whether or not getDiscussionPost WS available or not.\n     *\n     * @param site Site. If not defined, current site.\n     * @returns If WS is available.\n     * @since 3.7\n     */\n    isGetDiscussionPostsAvailable(site?: CoreSite): boolean {\n        return site\n            ? site.wsAvailable('mod_forum_get_discussion_posts')\n            : CoreSites.wsAvailableInCurrentSite('mod_forum_get_discussion_posts');\n    }\n\n    /**\n     * Returns whether or not deletePost WS available or not.\n     *\n     * @returns If WS is available.\n     * @since 3.8\n     */\n    isDeletePostAvailable(): boolean {\n        return CoreSites.wsAvailableInCurrentSite('mod_forum_delete_post');\n    }\n\n    /**\n     * Returns whether or not updatePost WS available or not.\n     *\n     * @returns If WS is available.\n     * @since 3.8\n     */\n    isUpdatePostAvailable(): boolean {\n        return CoreSites.wsAvailableInCurrentSite('mod_forum_update_discussion_post');\n    }\n\n    /**\n     * Format discussions, setting groupname if the discussion group is valid.\n     *\n     * @param cmId Forum cmid.\n     * @param discussions List of discussions to format.\n     * @returns Promise resolved with the formatted discussions.\n     */\n    formatDiscussionsGroups(cmId: number, discussions: AddonModForumDiscussion[]): Promise<AddonModForumDiscussion[]>;\n    formatDiscussionsGroups(cmId: number, discussions: AddonModForumOfflineDiscussion[]): Promise<AddonModForumOfflineDiscussion[]>;\n    formatDiscussionsGroups(\n        cmId: number,\n        discussions: AddonModForumDiscussion[] | AddonModForumOfflineDiscussion[],\n    ): Promise<AddonModForumDiscussion[] | AddonModForumOfflineDiscussion[]> {\n        discussions = CoreUtils.clone(discussions);\n\n        return CoreGroups.getActivityAllowedGroups(cmId).then((result) => {\n            const strAllParts = Translate.instant('core.allparticipants');\n            const strAllGroups = Translate.instant('core.allgroups');\n\n            // Turn groups into an object where each group is identified by id.\n            const groups = {};\n            result.groups.forEach((fg) => {\n                groups[fg.id] = fg;\n            });\n\n            // Format discussions.\n            discussions.forEach((disc) => {\n                if (disc.groupid == AddonModForumProvider.ALL_PARTICIPANTS) {\n                    disc.groupname = strAllParts;\n                } else if (disc.groupid == AddonModForumProvider.ALL_GROUPS) {\n                    // Offline discussions only.\n                    disc.groupname = strAllGroups;\n                } else {\n                    const group = groups[disc.groupid];\n                    if (group) {\n                        disc.groupname = group.name;\n                    }\n                }\n            });\n\n            return discussions;\n        }).catch(() => discussions);\n    }\n\n    /**\n     * Get all course forums.\n     *\n     * @param courseId Course ID.\n     * @param options Other options.\n     * @returns Promise resolved when the forums are retrieved.\n     */\n    async getCourseForums(courseId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModForumData[]> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModForumGetForumsByCoursesWSParams = {\n            courseids: [courseId],\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getForumDataCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: AddonModForumProvider.COMPONENT,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy),\n        };\n\n        return site.read('mod_forum_get_forums_by_courses', params, preSets);\n    }\n\n    /**\n     * Get a particular discussion post.\n     *\n     * @param forumId Forum ID.\n     * @param discussionId Discussion ID.\n     * @param postId Post ID.\n     * @param options Other options.\n     * @returns Promise resolved when the post is retrieved.\n     */\n    async getDiscussionPost(\n        forumId: number,\n        discussionId: number,\n        postId: number,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<AddonModForumPost> {\n        const site = await CoreSites.getSite(options.siteId);\n        const params: AddonModForumGetDiscussionPostWSParams = {\n            postid: postId,\n        };\n        const preSets = {\n            cacheKey: this.getDiscussionPostDataCacheKey(forumId, discussionId, postId),\n            updateFrequency: CoreSite.FREQUENCY_USUALLY,\n            component: AddonModForumProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const response = await site.read<AddonModForumGetDiscussionPostWSResponse>(\n            'mod_forum_get_discussion_post',\n            params,\n            preSets,\n        );\n\n        if (!response.post) {\n            throw new Error('Post not found');\n        }\n\n        return this.translateWSPost(response.post);\n    }\n\n    /**\n     * Get a forum by course module ID.\n     *\n     * @param courseId Course ID.\n     * @param cmId Course module ID.\n     * @param options Other options.\n     * @returns Promise resolved when the forum is retrieved.\n     */\n    async getForum(courseId: number, cmId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModForumData> {\n        const forums = await this.getCourseForums(courseId, options);\n\n        const forum = forums.find(forum => forum.cmid == cmId);\n\n        if (!forum) {\n            throw new CoreError(Translate.instant('core.course.modulenotfound'));\n        }\n\n        return forum;\n    }\n\n    /**\n     * Get a forum by forum ID.\n     *\n     * @param courseId Course ID.\n     * @param forumId Forum ID.\n     * @param options Other options.\n     * @returns Promise resolved when the forum is retrieved.\n     */\n    async getForumById(courseId: number, forumId: number, options: CoreSitesCommonWSOptions = {}): Promise<AddonModForumData> {\n        const forums = await this.getCourseForums(courseId, options);\n        const forum = forums.find(forum => forum.id === forumId);\n\n        if (!forum) {\n            throw new Error(`Forum with id ${forumId} not found`);\n        }\n\n        return forum;\n    }\n\n    /**\n     * Get access information for a given forum.\n     *\n     * @param forumId Forum ID.\n     * @param options Other options.\n     * @returns Object with access information.\n     * @since 3.7\n     */\n    async getAccessInformation(\n        forumId: number,\n        options: CoreCourseCommonModWSOptions = {},\n    ): Promise<AddonModForumAccessInformation> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        if (!site.wsAvailable('mod_forum_get_forum_access_information')) {\n            // Access information not available for 3.6 or older sites.\n            return {};\n        }\n\n        const params: AddonModForumGetForumAccessInformationWSParams = {\n            forumid: forumId,\n        };\n        const preSets = {\n            cacheKey: this.getAccessInformationCacheKey(forumId),\n            component: AddonModForumProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        return site.read<AddonModForumGetForumAccessInformationWSResponse>(\n            'mod_forum_get_forum_access_information',\n            params,\n            preSets,\n        );\n    }\n\n    /**\n     * Get forum discussion posts.\n     *\n     * @param discussionId Discussion ID.\n     * @param options Other options.\n     * @returns Promise resolved with forum posts and rating info.\n     */\n    async getDiscussionPosts(discussionId: number, options: CoreCourseCommonModWSOptions = {}): Promise<{\n        posts: AddonModForumPost[];\n        courseid?: number;\n        forumid?: number;\n        ratinginfo?: CoreRatingInfo;\n    }> {\n        // Convenience function to translate legacy data to new format.\n        const translateLegacyPostsFormat = (posts: AddonModForumLegacyPost[]): AddonModForumPost[] => posts.map((post) => {\n            const newPost: AddonModForumPost = {\n                id: post.id,\n                discussionid: post.discussion,\n                parentid: post.parent,\n                hasparent: !!post.parent,\n                author: {\n                    id: post.userid,\n                    fullname: post.userfullname,\n                    urls: { profileimage: post.userpictureurl },\n                },\n                timecreated: post.created,\n                subject: post.subject,\n                message: post.message,\n                attachments: post.attachments,\n                capabilities: {\n                    reply: !!post.canreply,\n                },\n\n                unread: !post.postread,\n                isprivatereply: !!post.isprivatereply,\n                tags: post.tags,\n            };\n\n            if ('groupname' in post && typeof post['groupname'] === 'string') {\n                newPost.author['groups'] = [{ name: post['groupname'] }];\n            }\n\n            return newPost;\n        });\n\n        // For some reason, the new WS doesn't use the tags exporter so it returns a different format than other WebServices.\n        // Convert the new format to the exporter one so it's the same as in other WebServices.\n        const translateTagsFormatToLegacy = (posts: AddonModForumWSPost[]): AddonModForumPost[] => {\n            posts.forEach(post => this.translateWSPost(post));\n\n            return posts as unknown as AddonModForumPost[];\n        };\n\n        const params: AddonModForumGetDiscussionPostsWSParams | AddonModForumGetForumDiscussionPostsWSParams = {\n            discussionid: discussionId,\n        };\n        const preSets = {\n            cacheKey: this.getDiscussionPostsCacheKey(discussionId),\n            component: AddonModForumProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        const site = await CoreSites.getSite(options.siteId);\n        const isGetDiscussionPostsAvailable = this.isGetDiscussionPostsAvailable(site);\n\n        const response = isGetDiscussionPostsAvailable\n            ? await site.read<AddonModForumGetDiscussionPostsWSResponse>('mod_forum_get_discussion_posts', params, preSets)\n            : await site.read<AddonModForumGetForumDiscussionPostsWSResponse>(\n                'mod_forum_get_forum_discussion_posts',\n                params,\n                preSets,\n            );\n\n        if (!response) {\n            throw new Error('Could not get forum posts');\n        }\n\n        const posts = isGetDiscussionPostsAvailable\n            ? translateTagsFormatToLegacy((response as AddonModForumGetDiscussionPostsWSResponse).posts)\n            : translateLegacyPostsFormat((response as AddonModForumGetForumDiscussionPostsWSResponse).posts);\n\n        this.storeUserData(posts);\n\n        return {\n            ...response,\n            posts,\n        };\n    }\n\n    /**\n     * Sort forum discussion posts by an specified field.\n     *\n     * @param posts Discussion posts to be sorted in place.\n     * @param direction Direction of the sorting (ASC / DESC).\n     */\n    sortDiscussionPosts(posts: AddonModForumPost[], direction: string): void {\n        // @todo Check children when sorting.\n        posts.sort((a, b) => {\n            const timeCreatedA = Number(a.timecreated) || 0;\n            const timeCreatedB = Number(b.timecreated) || 0;\n            if (timeCreatedA == 0 || timeCreatedB == 0) {\n            // Leave 0 at the end.\n                return timeCreatedB - timeCreatedA;\n            }\n\n            if (direction == 'ASC') {\n                return timeCreatedA - timeCreatedB;\n            } else {\n                return timeCreatedB - timeCreatedA;\n            }\n        });\n    }\n\n    /**\n     * Return whether discussion lists can be sorted.\n     *\n     * @param site Site. If not defined, current site.\n     * @returns True if discussion lists can be sorted.\n     */\n    isDiscussionListSortingAvailable(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!site?.isVersionGreaterEqualThan('3.7');\n    }\n\n    /**\n     * Return the list of available sort orders.\n     *\n     * @returns List of sort orders.\n     */\n    getAvailableSortOrders(): AddonModForumSortOrder[] {\n        const sortOrders = [\n            {\n                label: 'addon.mod_forum.discussionlistsortbylastpostdesc',\n                value: AddonModForumProvider.SORTORDER_LASTPOST_DESC,\n            },\n        ];\n\n        if (this.isDiscussionListSortingAvailable()) {\n            sortOrders.push(\n                {\n                    label: 'addon.mod_forum.discussionlistsortbylastpostasc',\n                    value: AddonModForumProvider.SORTORDER_LASTPOST_ASC,\n                },\n                {\n                    label: 'addon.mod_forum.discussionlistsortbycreateddesc',\n                    value: AddonModForumProvider.SORTORDER_CREATED_DESC,\n                },\n                {\n                    label: 'addon.mod_forum.discussionlistsortbycreatedasc',\n                    value: AddonModForumProvider.SORTORDER_CREATED_ASC,\n                },\n                {\n                    label: 'addon.mod_forum.discussionlistsortbyrepliesdesc',\n                    value: AddonModForumProvider.SORTORDER_REPLIES_DESC,\n                },\n                {\n                    label: 'addon.mod_forum.discussionlistsortbyrepliesasc',\n                    value: AddonModForumProvider.SORTORDER_REPLIES_ASC,\n                },\n            );\n        }\n\n        return sortOrders;\n    }\n\n    /**\n     * Get sort order selected by the user.\n     *\n     * @returns Promise resolved with sort order.\n     */\n    async getSelectedSortOrder(): Promise<AddonModForumSortOrder> {\n        const sortOrders = this.getAvailableSortOrders();\n        let sortOrderValue: number | null = null;\n\n        if (this.isDiscussionListSortingAvailable()) {\n            const preferenceValue = await CoreUtils.ignoreErrors(\n                CoreUser.getUserPreference(AddonModForumProvider.PREFERENCE_SORTORDER),\n            );\n\n            sortOrderValue = preferenceValue ? parseInt(preferenceValue, 10) : null;\n        }\n\n        return sortOrders.find(sortOrder => sortOrder.value === sortOrderValue) || sortOrders[0];\n    }\n\n    /**\n     * Get forum discussions.\n     *\n     * @param forumId Forum ID.\n     * @param options Other options.\n     * @returns Promise resolved with an object with:\n     *         - discussions: List of discussions. Note that for every discussion in the list discussion.id is the main post ID but\n     *         discussion ID is discussion.discussion.\n     *         - canLoadMore: True if there may be more discussions to load.\n     */\n    async getDiscussions(\n        forumId: number,\n        options: AddonModForumGetDiscussionsOptions = {},\n    ): Promise<{ discussions: AddonModForumDiscussion[]; canLoadMore: boolean }> {\n        options.sortOrder = options.sortOrder || AddonModForumProvider.SORTORDER_LASTPOST_DESC;\n        options.page = options.page || 0;\n\n        const site = await CoreSites.getSite(options.siteId);\n        let method = 'mod_forum_get_forum_discussions_paginated';\n        const params: AddonModForumGetForumDiscussionsPaginatedWSParams | AddonModForumGetForumDiscussionsWSParams = {\n            forumid: forumId,\n            page: options.page,\n            perpage: AddonModForumProvider.DISCUSSIONS_PER_PAGE,\n        };\n\n        if (site.wsAvailable('mod_forum_get_forum_discussions')) {\n            // Since Moodle 3.7.\n            method = 'mod_forum_get_forum_discussions';\n            (params as AddonModForumGetForumDiscussionsWSParams).sortorder = options.sortOrder;\n            (params as AddonModForumGetForumDiscussionsWSParams).groupid = options.groupId;\n        } else {\n            if (options.sortOrder !== AddonModForumProvider.SORTORDER_LASTPOST_DESC) {\n                throw new Error('Sorting not supported with the old WS method.');\n            }\n\n            (params as AddonModForumGetForumDiscussionsPaginatedWSParams).sortby = 'timemodified';\n            (params as AddonModForumGetForumDiscussionsPaginatedWSParams).sortdirection = 'DESC';\n        }\n\n        const preSets = {\n            cacheKey: this.getDiscussionsListCacheKey(forumId, options.sortOrder),\n            component: AddonModForumProvider.COMPONENT,\n            componentId: options.cmId,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy), // Include reading strategy preSets.\n        };\n\n        let response: AddonModForumGetForumDiscussionsPaginatedWSResponse | AddonModForumGetForumDiscussionsWSResponse;\n        try {\n            // eslint-disable-next-line max-len\n            response = await site.read<AddonModForumGetForumDiscussionsPaginatedWSResponse | AddonModForumGetForumDiscussionsWSResponse>(\n                method,\n                params,\n                preSets,\n            );\n        } catch (error) {\n            // Try to get the data from cache stored with the old WS method.\n            if (\n                CoreNetwork.isOnline() ||\n                method !== 'mod_forum_get_forum_discussions' ||\n                options.sortOrder !== AddonModForumProvider.SORTORDER_LASTPOST_DESC\n            ) {\n                throw error;\n            }\n\n            const params: AddonModForumGetForumDiscussionsPaginatedWSParams = {\n                forumid: forumId,\n                page: options.page,\n                perpage: AddonModForumProvider.DISCUSSIONS_PER_PAGE,\n                sortby: 'timemodified',\n                sortdirection: 'DESC',\n            };\n            Object.assign(preSets, CoreSites.getReadingStrategyPreSets(CoreSitesReadingStrategy.PREFER_CACHE));\n\n            response = await site.read<AddonModForumGetForumDiscussionsPaginatedWSResponse>(\n                'mod_forum_get_forum_discussions_paginated',\n                params,\n                preSets,\n            );\n        }\n\n        if (!response) {\n            throw new Error('Could not get discussions');\n        }\n\n        this.storeUserData(response.discussions);\n\n        return {\n            discussions: response.discussions,\n            canLoadMore: response.discussions.length >= AddonModForumProvider.DISCUSSIONS_PER_PAGE,\n        };\n    }\n\n    /**\n     * Get forum discussions in several pages.\n     * If a page fails, the discussions until that page will be returned along with a flag indicating an error occurred.\n     *\n     * @param forumId Forum ID.\n     * @param options Get discussion in pages options.\n     * @returns Promise resolved with an object with:\n     *         - discussions: List of discussions.\n     *         - error: True if an error occurred, false otherwise.\n     */\n    async getDiscussionsInPages(\n        forumId: number,\n        options: AddonModForumGetDiscussionsInPagesOptions = {},\n    ): Promise<{ discussions: AddonModForumDiscussion[]; error: boolean }> {\n        const result = {\n            discussions: [] as AddonModForumDiscussion[],\n            error: false,\n        };\n        let numPages = options.numPages === undefined ? -1 : options.numPages;\n\n        if (!numPages) {\n            return result;\n        }\n\n        const getPage = (page: number): Promise<{ discussions: AddonModForumDiscussion[]; error: boolean }> =>\n            // Get page discussions.\n            this.getDiscussions(forumId, {\n                ...options,\n                page,\n            }).then((response) => {\n                result.discussions = result.discussions.concat(response.discussions);\n                numPages--;\n\n                if (response.canLoadMore && numPages !== 0) {\n                    return getPage(page + 1); // Get next page.\n                } else {\n                    return result;\n                }\n            }).catch(() => {\n                // Error getting a page.\n                result.error = true;\n\n                return result;\n            })\n        ;\n\n        return getPage(options.page ?? 0);\n    }\n\n    /**\n     * Invalidates can add discussion WS calls.\n     *\n     * @param forumId Forum ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateCanAddDiscussion(forumId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKeyStartingWith(this.getCommonCanAddDiscussionCacheKey(forumId));\n    }\n\n    /**\n     * Invalidate the prefetched content except files.\n     *\n     * @param moduleId The module ID.\n     * @param courseId Course ID.\n     * @returns Promise resolved when data is invalidated.\n     */\n    async invalidateContent(moduleId: number, courseId: number): Promise<void> {\n        // Get the forum first, we need the forum ID.\n        const forum = await this.getForum(courseId, moduleId);\n        const promises: Promise<void>[] = [];\n\n        promises.push(this.invalidateForumData(courseId));\n        promises.push(this.invalidateDiscussionsList(forum.id));\n        promises.push(this.invalidateCanAddDiscussion(forum.id));\n        promises.push(this.invalidateAccessInformation(forum.id));\n\n        this.getAvailableSortOrders().forEach((sortOrder) => {\n            // We need to get the list of discussions to be able to invalidate their posts.\n            promises.push(\n                this\n                    .getDiscussionsInPages(forum.id, {\n                        cmId: forum.cmid,\n                        sortOrder: sortOrder.value,\n                        readingStrategy: CoreSitesReadingStrategy.ONLY_CACHE,\n                    })\n                    .then((response) => {\n                        // Now invalidate the WS calls.\n                        const promises: Promise<void>[] = [];\n\n                        response.discussions.forEach((discussion) => {\n                            promises.push(this.invalidateDiscussionPosts(discussion.discussion, forum.id));\n                        });\n\n                        return CoreUtils.allPromises(promises);\n                    }),\n            );\n        });\n\n        if (this.isDiscussionListSortingAvailable()) {\n            promises.push(CoreUser.invalidateUserPreference(AddonModForumProvider.PREFERENCE_SORTORDER));\n        }\n\n        return CoreUtils.allPromises(promises);\n    }\n\n    /**\n     * Invalidates access information.\n     *\n     * @param forumId Forum ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAccessInformation(forumId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getAccessInformationCacheKey(forumId));\n    }\n\n    /**\n     * Invalidates forum discussion posts.\n     *\n     * @param discussionId Discussion ID.\n     * @param forumId Forum ID. If not set, we can't invalidate individual post information.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateDiscussionPosts(discussionId: number, forumId?: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const promises = [site.invalidateWsCacheForKey(this.getDiscussionPostsCacheKey(discussionId))];\n\n        if (forumId) {\n            promises.push(site.invalidateWsCacheForKeyStartingWith(this.getForumDiscussionDataCacheKey(forumId, discussionId)));\n        }\n\n        await CoreUtils.allPromises(promises);\n    }\n\n    /**\n     * Invalidates discussion list.\n     *\n     * @param forumId Forum ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateDiscussionsList(forumId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKeyStartingWith(this.getDiscussionsListCommonCacheKey(forumId));\n    }\n\n    /**\n     * Invalidates forum data.\n     *\n     * @param courseId Course ID.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateForumData(courseId: number): Promise<void> {\n        const site = CoreSites.getCurrentSite();\n\n        await site?.invalidateWsCacheForKey(this.getForumDataCacheKey(courseId));\n    }\n\n    /**\n     * Report a forum as being viewed.\n     *\n     * @param id Module ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    logView(id: number, siteId?: string): Promise<void> {\n        const params = {\n            forumid: id,\n        };\n\n        return CoreCourseLogHelper.log(\n            'mod_forum_view_forum',\n            params,\n            AddonModForumProvider.COMPONENT,\n            id,\n            siteId,\n        );\n    }\n\n    /**\n     * Report a forum discussion as being viewed.\n     *\n     * @param id Discussion ID.\n     * @param forumId Forum ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    logDiscussionView(id: number, forumId: number, siteId?: string): Promise<void> {\n        const params = {\n            discussionid: id,\n        };\n\n        return CoreCourseLogHelper.log(\n            'mod_forum_view_forum_discussion',\n            params,\n            AddonModForumProvider.COMPONENT,\n            forumId,\n            siteId,\n        );\n    }\n\n    /**\n     * Reply to a certain post.\n     *\n     * @param postId ID of the post being replied.\n     * @param discussionId ID of the discussion the user is replying to.\n     * @param forumId ID of the forum the user is replying to.\n     * @param name Forum name.\n     * @param courseId Course ID the forum belongs to.\n     * @param subject New post's subject.\n     * @param message New post's message.\n     * @param options Options (subscribe, attachments, ...).\n     * @param siteId Site ID. If not defined, current site.\n     * @param allowOffline True if it can be stored in offline, false otherwise.\n     * @returns Promise resolved with a boolean indicating if the test was sent online or not.\n     */\n    async replyPost(\n        postId: number,\n        discussionId: number,\n        forumId: number,\n        name: string,\n        courseId: number,\n        subject: string,\n        message: string,\n        options?: AddonModForumReplyOptions,\n        siteId?: string,\n        allowOffline?: boolean,\n    ): Promise<boolean> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        // Convenience function to store a message to be synchronized later.\n        const storeOffline = async (): Promise<boolean> => {\n            if (!forumId) {\n                // Not enough data to store in offline, reject.\n                throw new Error(Translate.instant('core.networkerrormsg'));\n            }\n\n            await AddonModForumOffline.replyPost(\n                postId,\n                discussionId,\n                forumId,\n                name,\n                courseId,\n                subject,\n                message,\n                options,\n                siteId,\n            );\n\n            return false;\n        };\n\n        if (!CoreNetwork.isOnline() && allowOffline) {\n            // App is offline, store the action.\n            return storeOffline();\n        }\n\n        // If there's already a reply to be sent to the server, discard it first.\n        try {\n            await AddonModForumOffline.deleteReply(postId, siteId);\n            await this.replyPostOnline(\n                postId,\n                subject,\n                message,\n                options as unknown as AddonModForumAddDiscussionPostWSOptionsObject,\n                siteId,\n            );\n\n            return true;\n        } catch (error) {\n            if (allowOffline && !CoreUtils.isWebServiceError(error)) {\n                // Couldn't connect to server, store in offline.\n                return storeOffline();\n            } else {\n                // The WebService has thrown an error or offline not supported, reject.\n                throw error;\n            }\n        }\n    }\n\n    /**\n     * Reply to a certain post. It will fail if offline or cannot connect.\n     *\n     * @param postId ID of the post being replied.\n     * @param subject New post's subject.\n     * @param message New post's message.\n     * @param options Options (subscribe, attachments, ...).\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the created post id.\n     */\n    async replyPostOnline(\n        postId: number,\n        subject: string,\n        message: string,\n        options?: AddonModForumAddDiscussionPostWSOptionsObject,\n        siteId?: string,\n    ): Promise<number> {\n        const site = await CoreSites.getSite(siteId);\n        const params: AddonModForumAddDiscussionPostWSParams = {\n            postid: postId,\n            subject: subject,\n            message: message,\n\n            options: CoreUtils.objectToArrayOfObjects<\n            AddonModForumAddDiscussionPostWSOptionsArray[0],\n            AddonModForumAddDiscussionPostWSOptionsObject\n            >(\n                options || {},\n                'name',\n                'value',\n            ),\n        };\n\n        const response = await site.write<AddonModForumAddDiscussionPostWSResponse>('mod_forum_add_discussion_post', params);\n\n        if (!response || !response.postid) {\n            throw new Error('Post id missing from response');\n        }\n\n        return response.postid;\n    }\n\n    /**\n     * Lock or unlock a discussion.\n     *\n     * @param forumId Forum id.\n     * @param discussionId DIscussion id.\n     * @param locked True to lock, false to unlock.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     * @since 3.7\n     */\n    async setLockState(\n        forumId: number,\n        discussionId: number,\n        locked: boolean,\n        siteId?: string,\n    ): Promise<AddonModForumSetLockStateWSResponse> {\n        const site = await CoreSites.getSite(siteId);\n        const params: AddonModForumSetLockStateWSParams = {\n            forumid: forumId,\n            discussionid: discussionId,\n            targetstate: locked ? 0 : 1,\n        };\n\n        return site.write<AddonModForumSetLockStateWSResponse>('mod_forum_set_lock_state', params);\n    }\n\n    /**\n     * Returns whether the set pin state WS is available.\n     *\n     * @returns Whether it's available.\n     * @since 3.7\n     */\n    isSetPinStateAvailableForSite(): boolean {\n        return CoreSites.wsAvailableInCurrentSite('mod_forum_set_pin_state');\n    }\n\n    /**\n     * Pin or unpin a discussion.\n     *\n     * @param discussionId Discussion id.\n     * @param pinned True to pin, false to unpin.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     * @since 3.7\n     */\n    async setPinState(discussionId: number, pinned: boolean, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const params: AddonModForumSetPinStateWSParams = {\n            discussionid: discussionId,\n            targetstate: pinned ? 1 : 0,\n        };\n\n        await site.write<AddonModForumSetPinStateWSResponse>('mod_forum_set_pin_state', params);\n    }\n\n    /**\n     * Star or unstar a discussion.\n     *\n     * @param discussionId Discussion id.\n     * @param starred True to star, false to unstar.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     * @since 3.7\n     */\n    async toggleFavouriteState(discussionId: number, starred: boolean, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const params: AddonModForumToggleFavouriteStateWSParams = {\n            discussionid: discussionId,\n            targetstate: starred,\n        };\n\n        await site.write<AddonModForumToggleFavouriteStateWSResponse>('mod_forum_toggle_favourite_state', params);\n    }\n\n    /**\n     * Store the users data from a discussions/posts list.\n     *\n     * @param list Array of posts or discussions.\n     */\n    protected storeUserData(list: AddonModForumPost[] | AddonModForumDiscussion[]): void {\n        const users = {};\n\n        list.forEach((entry: AddonModForumPost | AddonModForumDiscussion) => {\n            if ('author' in entry) {\n                const authorId = Number(entry.author.id);\n                if (!isNaN(authorId) && !users[authorId]) {\n                    users[authorId] = {\n                        id: entry.author.id,\n                        fullname: entry.author.fullname,\n                        profileimageurl: entry.author.urls?.profileimage,\n                    };\n                }\n            }\n            const userId = parseInt(entry['userid']);\n            if ('userid' in entry && !isNaN(userId) && !users[userId]) {\n                users[userId] = {\n                    id: userId,\n                    fullname: entry.userfullname,\n                    profileimageurl: entry.userpictureurl,\n                };\n            }\n            const userModified = parseInt(entry['usermodified']);\n            if ('usermodified' in entry && !isNaN(userModified) && !users[userModified]) {\n                users[userModified] = {\n                    id: userModified,\n                    fullname: entry.usermodifiedfullname,\n                    profileimageurl: entry.usermodifiedpictureurl,\n                };\n            }\n        });\n\n        CoreUser.storeUsers(CoreUtils.objectToArray(users));\n    }\n\n    /**\n     * Update a certain post.\n     *\n     * @param postId ID of the post being edited.\n     * @param subject New post's subject.\n     * @param message New post's message.\n     * @param options Options (subscribe, attachments, ...).\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with success boolean when done.\n     */\n    async updatePost(\n        postId: number,\n        subject: string,\n        message: string,\n        options?: AddonModForumUpdateDiscussionPostWSOptionsObject,\n        siteId?: string,\n    ): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n        const params: AddonModForumUpdateDiscussionPostWSParams = {\n            postid: postId,\n            subject: subject,\n            message: message,\n\n            options: CoreUtils.objectToArrayOfObjects<\n            AddonModForumUpdateDiscussionPostWSOptionsArray[0],\n            AddonModForumUpdateDiscussionPostWSOptionsObject\n            >(\n                options || {},\n                'name',\n                'value',\n            ),\n        };\n\n        const response = await site.write<AddonModForumUpdateDiscussionPostWSResponse>('mod_forum_update_discussion_post', params);\n\n        return response && response.status;\n    }\n\n    /**\n     * For some reason, the new WS doesn't use the tags exporter so it returns a different format than other WebServices.\n     * Convert the new format to the exporter one so it's the same as in other WebServices.\n     *\n     * @param post Post returned by the new WS.\n     * @returns Post using the same format as other WebServices.\n     */\n    protected translateWSPost(post: AddonModForumWSPost): AddonModForumPost {\n        (post as unknown as AddonModForumPost).tags = (post.tags || []).map((tag) => {\n            const viewUrl = (tag.urls && tag.urls.view) || '';\n            const params = CoreUrlUtils.extractUrlParams(viewUrl);\n\n            return {\n                id: tag.tagid,\n                taginstanceid: tag.id,\n                flag: tag.flag ? 1 : 0,\n                isstandard: tag.isstandard,\n                rawname: tag.displayname,\n                name: tag.displayname,\n                tagcollid: params.tc ? Number(params.tc) : undefined,\n                taginstancecontextid: params.from ? Number(params.from) : undefined,\n            };\n        });\n\n        return post as unknown as AddonModForumPost;\n    }\n\n}\n\nexport const AddonModForum = makeSingleton(AddonModForumProvider);\n\n/**\n * Params of mod_forum_get_forums_by_courses WS.\n */\ntype AddonModForumGetForumsByCoursesWSParams = {\n    courseids?: number[]; // Array of Course IDs.\n};\n\n/**\n * General forum activity data.\n */\nexport type AddonModForumData = {\n    id: number; // Forum id.\n    course: number; // Course id.\n    type: string; // The forum type.\n    name: string; // Forum name.\n    intro: string; // The forum intro.\n    introformat: number; // Intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    introfiles?: CoreWSExternalFile[];\n    duedate?: number; // Duedate for the user.\n    cutoffdate?: number; // Cutoffdate for the user.\n    assessed: number; // Aggregate type.\n    assesstimestart: number; // Assess start time.\n    assesstimefinish: number; // Assess finish time.\n    scale: number; // Scale.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    grade_forum: number; // Whole forum grade.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    grade_forum_notify: number; // Whether to send notifications to students upon grading by default.\n    maxbytes: number; // Maximum attachment size.\n    maxattachments: number; // Maximum number of attachments.\n    forcesubscribe: number; // Force users to subscribe.\n    trackingtype: number; // Subscription mode.\n    rsstype: number; // RSS feed for this activity.\n    rssarticles: number; // Number of RSS recent articles.\n    timemodified: number; // Time modified.\n    warnafter: number; // Post threshold for warning.\n    blockafter: number; // Post threshold for blocking.\n    blockperiod: number; // Time period for blocking.\n    completiondiscussions: number; // Student must create discussions.\n    completionreplies: number; // Student must post replies.\n    completionposts: number; // Student must post discussions or replies.\n    cmid: number; // Course module id.\n    numdiscussions?: number; // Number of discussions in the forum.\n    cancreatediscussions?: boolean; // If the user can create discussions.\n    lockdiscussionafter?: number; // After what period a discussion is locked.\n    istracked?: boolean; // If the user is tracking the forum.\n    unreadpostscount?: number; // The number of unread posts for tracked forums.\n};\n\n/**\n * Forum discussion.\n */\nexport type AddonModForumDiscussion = {\n    id: number; // Post id.\n    name: string; // Discussion name.\n    groupid: number; // Group id.\n    groupname?: string; // Group name (not returned by WS).\n    timemodified: number; // Time modified.\n    usermodified: number; // The id of the user who last modified.\n    timestart: number; // Time discussion can start.\n    timeend: number; // Time discussion ends.\n    discussion: number; // Discussion id.\n    parent: number; // Parent id.\n    userid: number; // User who started the discussion id.\n    created: number; // Creation time.\n    modified: number; // Time modified.\n    mailed: number; // Mailed?.\n    subject: string; // The post subject.\n    message: string; // The post message.\n    messageformat: number; // Message format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    messagetrust: number; // Can we trust?.\n    messageinlinefiles?: CoreWSExternalFile[];\n    attachment: string; // Has attachments?.\n    attachments?: CoreWSExternalFile[];\n    totalscore: number; // The post message total score.\n    mailnow: number; // Mail now?.\n    userfullname: string | boolean; // Post author full name.\n    usermodifiedfullname: string; // Post modifier full name.\n    userpictureurl?: string; // Post author picture.\n    usermodifiedpictureurl: string; // Post modifier picture.\n    numreplies: number; // The number of replies in the discussion.\n    numunread: number; // The number of unread discussions.\n    pinned: boolean; // Is the discussion pinned.\n    locked: boolean; // Is the discussion locked.\n    starred?: boolean; // Is the discussion starred.\n    canreply: boolean; // Can the user reply to the discussion.\n    canlock: boolean; // Can the user lock the discussion.\n    canfavourite?: boolean; // Can the user star the discussion.\n};\n\n/**\n * Forum post data returned by web services.\n */\nexport type AddonModForumPost = {\n    id: number; // Id.\n    subject: string; // Subject.\n    replysubject?: string; // Replysubject.\n    message: string; // Message.\n    author: {\n        id?: number; // Id.\n        fullname?: string; // Fullname.\n        urls?: {\n            profileimage?: string; // The URL for the use profile image.\n        };\n        groups?: { // Groups.\n            name: string; // Name.\n        }[];\n    };\n    discussionid: number; // Discussionid.\n    hasparent: boolean; // Hasparent.\n    parentid?: number; // Parentid.\n    timecreated: number | false; // Timecreated.\n    unread?: boolean; // Unread.\n    isprivatereply: boolean; // Isprivatereply.\n    capabilities: {\n        reply: boolean; // Whether the user can reply to the post.\n        view?: boolean; // Whether the user can view the post.\n        edit?: boolean; // Whether the user can edit the post.\n        delete?: boolean; // Whether the user can delete the post.\n        split?: boolean; // Whether the user can split the post.\n        selfenrol?: boolean; // Whether the user can self enrol into the course.\n        export?: boolean; // Whether the user can export the post.\n        controlreadstatus?: boolean; // Whether the user can control the read status of the post.\n        canreplyprivately?: boolean; // Whether the user can post a private reply.\n    };\n    attachment?: 0 | 1;\n    attachments?: CoreFileEntry[];\n    messageinlinefiles?: CoreWSExternalFile[];\n    haswordcount?: boolean; // Haswordcount.\n    wordcount?: number; // Wordcount.\n    tags?: { // Tags.\n        id: number; // Tag id.\n        name: string; // Tag name.\n        rawname: string; // The raw, unnormalised name for the tag as entered by users.\n        // isstandard: boolean; // Whether this tag is standard.\n        tagcollid?: number; // Tag collection id.\n        taginstanceid: number; // Tag instance id.\n        taginstancecontextid?: number; // Context the tag instance belongs to.\n        // itemid: number; // Id of the record tagged.\n        // ordering: number; // Tag ordering.\n        flag: number; // Whether the tag is flagged as inappropriate.\n    }[];\n};\n\n/**\n * Legacy forum post data.\n */\nexport type AddonModForumLegacyPost = {\n    id: number; // Post id.\n    discussion: number; // Discussion id.\n    parent: number; // Parent id.\n    userid: number; // User id.\n    created: number; // Creation time.\n    modified: number; // Time modified.\n    mailed: number; // Mailed?.\n    subject: string; // The post subject.\n    message: string; // The post message.\n    messageformat: number; // Message format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    messagetrust: number; // Can we trust?.\n    messageinlinefiles?: CoreWSExternalFile[];\n    attachment: string; // Has attachments?.\n    attachments?: CoreWSExternalFile[];\n    totalscore: number; // The post message total score.\n    mailnow: number; // Mail now?.\n    children: number[];\n    canreply: boolean; // The user can reply to posts?.\n    postread: boolean; // The post was read.\n    userfullname: string; // Post author full name.\n    userpictureurl?: string; // Post author picture.\n    deleted: boolean; // This post has been removed.\n    isprivatereply: boolean; // The post is a private reply.\n    tags?: CoreTagItem[]; // Tags.\n};\n\n/**\n * Options to pass to get discussions.\n */\nexport type AddonModForumGetDiscussionsOptions = CoreCourseCommonModWSOptions & {\n    sortOrder?: number; // Sort order.\n    page?: number; // Page. Defaults to 0.\n    groupId?: number; // Group ID.\n};\n\n/**\n * Options to pass to get discussions in pages.\n */\nexport type AddonModForumGetDiscussionsInPagesOptions = AddonModForumGetDiscussionsOptions & {\n    numPages?: number; // Number of pages to get. If not defined, all pages.\n};\n\n/**\n * Forum access information.\n */\nexport type AddonModForumAccessInformation = {\n    canaddinstance?: boolean; // Whether the user has the capability mod/forum:addinstance allowed.\n    canviewdiscussion?: boolean; // Whether the user has the capability mod/forum:viewdiscussion allowed.\n    canviewhiddentimedposts?: boolean; // Whether the user has the capability mod/forum:viewhiddentimedposts allowed.\n    canstartdiscussion?: boolean; // Whether the user has the capability mod/forum:startdiscussion allowed.\n    canreplypost?: boolean; // Whether the user has the capability mod/forum:replypost allowed.\n    canaddnews?: boolean; // Whether the user has the capability mod/forum:addnews allowed.\n    canreplynews?: boolean; // Whether the user has the capability mod/forum:replynews allowed.\n    canviewrating?: boolean; // Whether the user has the capability mod/forum:viewrating allowed.\n    canviewanyrating?: boolean; // Whether the user has the capability mod/forum:viewanyrating allowed.\n    canviewallratings?: boolean; // Whether the user has the capability mod/forum:viewallratings allowed.\n    canrate?: boolean; // Whether the user has the capability mod/forum:rate allowed.\n    canpostprivatereply?: boolean; // Whether the user has the capability mod/forum:postprivatereply allowed.\n    canreadprivatereplies?: boolean; // Whether the user has the capability mod/forum:readprivatereplies allowed.\n    cancreateattachment?: boolean; // Whether the user has the capability mod/forum:createattachment allowed.\n    candeleteownpost?: boolean; // Whether the user has the capability mod/forum:deleteownpost allowed.\n    candeleteanypost?: boolean; // Whether the user has the capability mod/forum:deleteanypost allowed.\n    cansplitdiscussions?: boolean; // Whether the user has the capability mod/forum:splitdiscussions allowed.\n    canmovediscussions?: boolean; // Whether the user has the capability mod/forum:movediscussions allowed.\n    canpindiscussions?: boolean; // Whether the user has the capability mod/forum:pindiscussions allowed.\n    caneditanypost?: boolean; // Whether the user has the capability mod/forum:editanypost allowed.\n    canviewqandawithoutposting?: boolean; // Whether the user has the capability mod/forum:viewqandawithoutposting allowed.\n    canviewsubscribers?: boolean; // Whether the user has the capability mod/forum:viewsubscribers allowed.\n    canmanagesubscriptions?: boolean; // Whether the user has the capability mod/forum:managesubscriptions allowed.\n    canpostwithoutthrottling?: boolean; // Whether the user has the capability mod/forum:postwithoutthrottling allowed.\n    canexportdiscussion?: boolean; // Whether the user has the capability mod/forum:exportdiscussion allowed.\n    canexportforum?: boolean; // Whether the user has the capability mod/forum:exportforum allowed.\n    canexportpost?: boolean; // Whether the user has the capability mod/forum:exportpost allowed.\n    canexportownpost?: boolean; // Whether the user has the capability mod/forum:exportownpost allowed.\n    canaddquestion?: boolean; // Whether the user has the capability mod/forum:addquestion allowed.\n    canallowforcesubscribe?: boolean; // Whether the user has the capability mod/forum:allowforcesubscribe allowed.\n    cancanposttomygroups?: boolean; // Whether the user has the capability mod/forum:canposttomygroups allowed.\n    cancanoverridediscussionlock?: boolean; // Whether the user has the capability mod/forum:canoverridediscussionlock allowed.\n    cancanoverridecutoff?: boolean; // Whether the user has the capability mod/forum:canoverridecutoff allowed.\n    cancantogglefavourite?: boolean; // Whether the user has the capability mod/forum:cantogglefavourite allowed.\n    cangrade?: boolean; // Whether the user has the capability mod/forum:grade allowed.\n};\n\n/**\n * Post creation or edition data.\n */\nexport type AddonModForumPostFormData = {\n    id: number;\n    subject: string | null; // Null means original data is not set.\n    message: string | null; // Null means empty or just white space.\n    files: CoreFileEntry[];\n    replyingTo?: number;\n    isEditing?: boolean;\n    isprivatereply?: boolean;\n};\n\n/**\n * Can add discussion info.\n */\nexport type AddonModForumCanAddDiscussion = {\n    status: boolean; // True if the user can add discussions, false otherwise.\n    canpindiscussions?: boolean; // True if the user can pin discussions, false otherwise.\n    cancreateattachment?: boolean; // True if the user can add attachments, false otherwise.\n};\n\n/**\n * Sorting order.\n */\nexport type AddonModForumSortOrder = {\n    label: string;\n    value: number;\n};\n\n/**\n * Forum post data returned by web services.\n */\nexport type AddonModForumWSPost = {\n    id: number; // Id.\n    subject: string; // Subject.\n    replysubject: string; // Replysubject.\n    message: string; // Message.\n    messageformat: number; // Message format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    author: {\n        id?: number; // Id.\n        fullname?: string; // Fullname.\n        isdeleted?: boolean; // Isdeleted.\n        groups?: { // Groups.\n            id: number; // Id.\n            name: string; // Name.\n            urls: {\n                image?: string; // Image.\n            };\n        }[];\n        urls: {\n            profile?: string; // The URL for the use profile page.\n            profileimage?: string; // The URL for the use profile image.\n        };\n    };\n    discussionid: number; // Discussionid.\n    hasparent: boolean; // Hasparent.\n    parentid?: number; // Parentid.\n    timecreated: number; // Timecreated.\n    unread?: boolean; // Unread.\n    isdeleted: boolean; // Isdeleted.\n    isprivatereply: boolean; // Isprivatereply.\n    haswordcount: boolean; // Haswordcount.\n    wordcount?: number; // Wordcount.\n    charcount?: number; // Charcount.\n    capabilities: {\n        view: boolean; // Whether the user can view the post.\n        edit: boolean; // Whether the user can edit the post.\n        delete: boolean; // Whether the user can delete the post.\n        split: boolean; // Whether the user can split the post.\n        reply: boolean; // Whether the user can reply to the post.\n        selfenrol: boolean; // Whether the user can self enrol into the course.\n        export: boolean; // Whether the user can export the post.\n        controlreadstatus: boolean; // Whether the user can control the read status of the post.\n        canreplyprivately: boolean; // Whether the user can post a private reply.\n    };\n    urls?: {\n        view?: string; // The URL used to view the post.\n        viewisolated?: string; // The URL used to view the post in isolation.\n        viewparent?: string; // The URL used to view the parent of the post.\n        edit?: string; // The URL used to edit the post.\n        delete?: string; // The URL used to delete the post.\n\n        // The URL used to split the discussion with the selected post being the first post in the new discussion.\n        split?: string;\n\n        reply?: string; // The URL used to reply to the post.\n        export?: string; // The URL used to export the post.\n        markasread?: string; // The URL used to mark the post as read.\n        markasunread?: string; // The URL used to mark the post as unread.\n        discuss?: string; // Discuss.\n    };\n    attachments: CoreWSStoredFile[]; // Attachments.\n    tags?: { // Tags.\n        id: number; // The ID of the Tag.\n        tagid: number; // The tagid.\n        isstandard: boolean; // Whether this is a standard tag.\n        displayname: string; // The display name of the tag.\n        flag: boolean; // Wehther this tag is flagged.\n        urls: {\n            view: string; // The URL to view the tag.\n        };\n    }[];\n    html?: {\n        rating?: string; // The HTML source to rate the post.\n        taglist?: string; // The HTML source to view the list of tags.\n        authorsubheading?: string; // The HTML source to view the author details.\n    };\n};\n\n/**\n * Params of mod_forum_get_forum_discussions WS.\n */\nexport type AddonModForumGetForumDiscussionsWSParams = {\n    forumid: number; // Forum instance id.\n    sortorder?: number; // Sort by this element: numreplies, , created or timemodified.\n    page?: number; // Current page.\n    perpage?: number; // Items per page.\n    groupid?: number; // Group id.\n};\n\n/**\n * Data returned by mod_forum_get_forum_discussions WS.\n */\nexport type AddonModForumGetForumDiscussionsWSResponse = {\n    discussions: AddonModForumDiscussion[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_forum_get_forum_discussions_paginated WS.\n */\nexport type AddonModForumGetForumDiscussionsPaginatedWSParams = {\n    forumid: number; // Forum instance id.\n    sortby?: string; // Sort by this element: id, timemodified, timestart or timeend.\n    sortdirection?: string; // Sort direction: ASC or DESC.\n    page?: number; // Current page.\n    perpage?: number; // Items per page.\n};\n\n/**\n * Data returned by mod_forum_get_forum_discussions_paginated WS.\n */\nexport type AddonModForumGetForumDiscussionsPaginatedWSResponse = {\n    discussions: AddonModForumDiscussion[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Data returned by mod_forum_get_forums_by_courses WS.\n */\nexport type AddonModForumGetForumsByCoursesWSResponse = AddonModForumData[];\n\n/**\n * Array options of mod_forum_add_discussion WS.\n */\nexport type AddonModForumAddDiscussionWSOptionsArray = {\n    // Option name.\n    name: 'discussionsubscribe' | 'discussionpinned' | 'inlineattachmentsid' | 'attachmentsid';\n\n    // Option value.\n    // This param is validated in the external function, expected values are:\n    // discussionsubscribe (bool) - subscribe to the discussion?, default to true\n    // discussionpinned    (bool) - is the discussion pinned, default to false\n    // inlineattachmentsid (int)  - the draft file area id for inline attachments\n    // attachmentsid       (int)  - the draft file area id for attachments.\n    value: string;\n}[];\n\n/**\n * Object options of mod_forum_add_discussion WS.\n */\nexport type AddonModForumAddDiscussionWSOptionsObject = {\n    discussionsubscribe?: string;\n    discussionpinned?: string;\n    inlineattachmentsid?: string;\n    attachmentsid?: string;\n};\n\n/**\n * Array options of mod_forum_add_discussion_post WS.\n */\nexport type AddonModForumAddDiscussionPostWSOptionsArray = {\n    // Option name.\n    name: 'discussionsubscribe' | 'private' | 'inlineattachmentsid' | 'attachmentsid' | 'topreferredformat';\n\n    // Option value.\n    // This param is validated in the external function, expected values are:\n    // discussionsubscribe (bool) - subscribe to the discussion?, default to true\n    // private             (bool) - make this reply private to the author of the parent post, default to false.\n    // inlineattachmentsid (int)  - the draft file area id for inline attachments\n    // attachmentsid       (int)  - the draft file area id for attachments\n    // topreferredformat   (bool) - convert the message & messageformat to FORMAT_HTML, defaults to false.\n    value: string;\n}[];\n\n/**\n * Object options of mod_forum_add_discussion_post WS.\n */\nexport type AddonModForumAddDiscussionPostWSOptionsObject = {\n    discussionsubscribe?: boolean;\n    private?: boolean;\n    inlineattachmentsid?: number;\n    attachmentsid?: number;\n    topreferredformat?: boolean;\n};\n\n/**\n * Array options of mod_forum_update_discussion_post WS.\n */\nexport type AddonModForumUpdateDiscussionPostWSOptionsArray = {\n    // Option name.\n    name: 'pinned' | 'discussionsubscribe' | 'inlineattachmentsid' | 'attachmentsid';\n\n    // Option value.\n    // This param is validated in the external function, expected values are:\n    // pinned              (bool) - (only for discussions) whether to pin this discussion or not\n    // discussionsubscribe (bool) - whether to subscribe to the post or not\n    // inlineattachmentsid (int)  - the draft file area id for inline attachments in the text\n    // attachmentsid       (int)  - the draft file area id for attachments.\n    value: string; // The value of the option.\n}[];\n\n/**\n * Object options of mod_forum_update_discussion_post WS.\n */\nexport type AddonModForumUpdateDiscussionPostWSOptionsObject = {\n    pinned?: boolean;\n    discussionsubscribe?: boolean;\n    inlineattachmentsid?: number;\n    attachmentsid?: number;\n};\n\n/**\n * Params of mod_forum_add_discussion WS.\n */\nexport type AddonModForumAddDiscussionWSParams = {\n    forumid: number; // Forum instance ID.\n    subject: string; // New Discussion subject.\n    message: string; // New Discussion message (only html format allowed).\n    groupid?: number; // The group, default to 0.\n    options?: AddonModForumAddDiscussionWSOptionsArray;\n};\n\n/**\n * Data returned by mod_forum_add_discussion WS.\n */\nexport type AddonModForumAddDiscussionWSResponse = {\n    discussionid: number; // New Discussion ID.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_forum_add_discussion_post WS.\n */\nexport type AddonModForumAddDiscussionPostWSParams = {\n    postid: number; // The post id we are going to reply to (can be the initial discussion post).\n    subject: string; // New post subject.\n    message: string; // New post message (html assumed if messageformat is not provided).\n    options?: AddonModForumAddDiscussionPostWSOptionsArray;\n    messageformat?: number; // Message format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n};\n\n/**\n * Data returned by mod_forum_add_discussion_post WS.\n */\nexport type AddonModForumAddDiscussionPostWSResponse = {\n    postid: number; // New post id.\n    warnings?: CoreWSExternalWarning[];\n    post: AddonModForumWSPost;\n    messages?: { // List of warnings.\n        type: string; // The classification to be used in the client side.\n        message: string; // Untranslated english message to explain the warning.\n    }[];\n};\n\n/**\n * Params of mod_forum_get_forum_access_information WS.\n */\nexport type AddonModForumGetForumAccessInformationWSParams = {\n    forumid: number; // Forum instance id.\n};\n\n/**\n * Data returned by mod_forum_get_forum_access_information WS.\n */\nexport type AddonModForumGetForumAccessInformationWSResponse = {\n    warnings?: CoreWSExternalWarning[];\n} & AddonModForumAccessInformation;\n\n/**\n * Params of mod_forum_can_add_discussion WS.\n */\nexport type AddonModForumCanAddDiscussionWSParams = {\n    forumid: number; // Forum instance ID.\n    groupid?: number; // The group to check, default to active group (Use -1 to check if the user can post in all the groups).\n};\n\n/**\n * Data returned by mod_forum_can_add_discussion WS.\n */\nexport type AddonModForumCanAddDiscussionWSResponse = {\n    warnings?: CoreWSExternalWarning[];\n} & AddonModForumCanAddDiscussion;\n\n/**\n * Params of mod_forum_delete_post WS.\n */\nexport type AddonModForumDeletePostWSParams = {\n    postid: number; // Post to be deleted. It can be a discussion topic post.\n};\n\n/**\n * Data returned by mod_forum_delete_post WS.\n */\nexport type AddonModForumDeletePostWSResponse = CoreStatusWithWarningsWSResponse;\n\n/**\n * Params of mod_forum_get_discussion_post WS.\n */\nexport type AddonModForumGetDiscussionPostWSParams = {\n    postid: number; // Post to fetch.\n};\n\n/**\n * Data returned by mod_forum_get_discussion_post WS.\n */\nexport type AddonModForumGetDiscussionPostWSResponse = {\n    post: AddonModForumWSPost;\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_forum_get_discussion_posts WS.\n */\nexport type AddonModForumGetDiscussionPostsWSParams = {\n    discussionid: number; // The ID of the discussion from which to fetch posts.\n    sortby?: string; // Sort by this element: id, created or modified.\n    sortdirection?: string; // Sort direction: ASC or DESC.\n};\n\n/**\n * Data returned by mod_forum_get_discussion_posts WS.\n */\nexport type AddonModForumGetDiscussionPostsWSResponse = {\n    posts: AddonModForumWSPost[];\n    forumid: number; // The forum id.\n    courseid: number; // The forum course id.\n    ratinginfo?: CoreRatingInfo; // Rating information.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_forum_get_forum_discussion_posts WS.\n */\nexport type AddonModForumGetForumDiscussionPostsWSParams = {\n    discussionid: number; // Discussion ID.\n    sortby?: string; // Sort by this element: id, created or modified.\n    sortdirection?: string; // Sort direction: ASC or DESC.\n};\n\n/**\n * Data returned by mod_forum_get_forum_discussion_posts WS.\n */\nexport type AddonModForumGetForumDiscussionPostsWSResponse = {\n    posts: AddonModForumLegacyPost[];\n    ratinginfo?: CoreRatingInfo; // Rating information.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_forum_set_lock_state WS.\n */\nexport type AddonModForumSetLockStateWSParams = {\n    forumid: number; // Forum that the discussion is in.\n    discussionid: number; // The discussion to lock / unlock.\n    targetstate: number; // The timestamp for the lock state.\n};\n\n/**\n * Data returned by mod_forum_set_lock_state WS.\n */\nexport type AddonModForumSetLockStateWSResponse = {\n    id: number; // The discussion we are locking.\n    locked: boolean; // The locked state of the discussion.\n    times: {\n        locked: number; // The locked time of the discussion.\n    };\n};\n\n/**\n * Params of mod_forum_set_pin_state WS.\n */\nexport type AddonModForumSetPinStateWSParams = {\n    discussionid: number; // The discussion to pin or unpin.\n    targetstate: number; // The target state.\n};\n\n/**\n * Data returned by mod_forum_set_pin_state WS.\n */\nexport type AddonModForumSetPinStateWSResponse = {\n    id: number; // Id.\n    forumid: number; // Forumid.\n    pinned: boolean; // Pinned.\n    locked: boolean; // Locked.\n    istimelocked: boolean; // Istimelocked.\n    name: string; // Name.\n    firstpostid: number; // Firstpostid.\n    group?: {\n        name: string; // Name.\n        urls: {\n            picture?: string; // Picture.\n            userlist?: string; // Userlist.\n        };\n    };\n    times: {\n        modified: number; // Modified.\n        start: number; // Start.\n        end: number; // End.\n        locked: number; // Locked.\n    };\n    userstate: {\n        subscribed: boolean; // Subscribed.\n        favourited: boolean; // Favourited.\n    };\n    capabilities: {\n        subscribe: boolean; // Subscribe.\n        move: boolean; // Move.\n        pin: boolean; // Pin.\n        post: boolean; // Post.\n        manage: boolean; // Manage.\n        favourite: boolean; // Favourite.\n    };\n    urls: {\n        view: string; // View.\n        viewlatest?: string; // Viewlatest.\n        viewfirstunread?: string; // Viewfirstunread.\n        markasread: string; // Markasread.\n        subscribe: string; // Subscribe.\n        pin?: string; // Pin.\n    };\n    timed: {\n        istimed?: boolean; // Istimed.\n        visible?: boolean; // Visible.\n    };\n};\n\n/**\n * Params of mod_forum_toggle_favourite_state WS.\n */\nexport type AddonModForumToggleFavouriteStateWSParams = {\n    discussionid: number; // The discussion to subscribe or unsubscribe.\n    targetstate: boolean; // The target state.\n};\n\n/**\n * Data returned by mod_forum_toggle_favourite_state WS.\n */\nexport type AddonModForumToggleFavouriteStateWSResponse = {\n    id: number; // Id.\n    forumid: number; // Forumid.\n    pinned: boolean; // Pinned.\n    locked: boolean; // Locked.\n    istimelocked: boolean; // Istimelocked.\n    name: string; // Name.\n    firstpostid: number; // Firstpostid.\n    group?: {\n        name: string; // Name.\n        urls: {\n            picture?: string; // Picture.\n            userlist?: string; // Userlist.\n        };\n    };\n    times: {\n        modified: number; // Modified.\n        start: number; // Start.\n        end: number; // End.\n        locked: number; // Locked.\n    };\n    userstate: {\n        subscribed: boolean; // Subscribed.\n        favourited: boolean; // Favourited.\n    };\n    capabilities: {\n        subscribe: boolean; // Subscribe.\n        move: boolean; // Move.\n        pin: boolean; // Pin.\n        post: boolean; // Post.\n        manage: boolean; // Manage.\n        favourite: boolean; // Favourite.\n    };\n    urls: {\n        view: string; // View.\n        viewlatest?: string; // Viewlatest.\n        viewfirstunread?: string; // Viewfirstunread.\n        markasread: string; // Markasread.\n        subscribe: string; // Subscribe.\n        pin?: string; // Pin.\n    };\n    timed: {\n        istimed?: boolean; // Istimed.\n        visible?: boolean; // Visible.\n    };\n};\n\n/**\n * Params of mod_forum_update_discussion_post WS.\n */\nexport type AddonModForumUpdateDiscussionPostWSParams = {\n    postid: number; // Post to be updated. It can be a discussion topic post.\n    subject?: string; // Updated post subject.\n    message?: string; // Updated post message (HTML assumed if messageformat is not provided).\n    messageformat?: number; // Message format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    options?: AddonModForumUpdateDiscussionPostWSOptionsArray; // Configuration options for the post.\n};\n\n/**\n * Data returned by mod_forum_update_discussion_post WS.\n */\nexport type AddonModForumUpdateDiscussionPostWSResponse = CoreStatusWithWarningsWSResponse;\n\n/**\n * Data passed to NEW_DISCUSSION_EVENT event.\n */\nexport type AddonModForumNewDiscussionData = {\n    forumId: number;\n    cmId: number;\n    discussionIds?: number[] | null;\n    discTimecreated?: number;\n    groupId?: number; // The discussion group if it's created in a certain group, ALL_PARTICIPANTS for all participants.\n};\n\n/**\n * Data passed to REPLY_DISCUSSION_EVENT event.\n */\nexport type AddonModForumReplyDiscussionData = {\n    forumId: number;\n    discussionId: number;\n    cmId: number;\n};\n\n/**\n * Data passed to CHANGE_DISCUSSION_EVENT event.\n */\nexport type AddonModForumChangeDiscussionData = {\n    forumId: number;\n    discussionId: number;\n    cmId: number;\n    deleted?: boolean;\n    post?: AddonModForumPost;\n    locked?: boolean;\n    pinned?: boolean;\n    starred?: boolean;\n};\n\n/**\n * Data passed to MARK_READ_EVENT event.\n */\nexport type AddonModForumMarkReadData = {\n    courseId: number;\n    moduleId: number;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}