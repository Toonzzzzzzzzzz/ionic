{"ast":null,"code":"var _class;\nimport { Clipboard } from '@awesome-cordova-plugins/clipboard/ngx';\nimport * as i0 from \"@angular/core\";\n/**\n * Emulates the Cordova Clipboard plugin in browser.\n */\nexport class ClipboardMock extends Clipboard {\n  constructor() {\n    super();\n    // In browser the text must be selected in order to copy it. Create a hidden textarea to put the text in it.\n    this.copyTextarea = document.createElement('textarea');\n    this.copyTextarea.className = 'core-browser-copy-area';\n    this.copyTextarea.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(this.copyTextarea);\n  }\n  /**\n   * Copy some text to the clipboard.\n   *\n   * @param text The text to copy.\n   * @returns Promise resolved when copied.\n   */\n  copy(text) {\n    return new Promise((resolve, reject) => {\n      // Put the text in the hidden textarea and select it.\n      this.copyTextarea.innerHTML = text;\n      this.copyTextarea.select();\n      try {\n        // eslint-disable-next-line deprecation/deprecation\n        if (document.execCommand('copy')) {\n          resolve();\n        } else {\n          reject();\n        }\n      } catch (err) {\n        reject();\n      }\n      this.copyTextarea.innerHTML = '';\n    });\n  }\n  /*\n   * Get the text stored in the clipboard.\n   *\n   * @returns Promise resolved with the text.\n   */\n  paste() {\n    return new Promise((resolve, reject) => {\n      // Paste the text in the hidden textarea and get it.\n      this.copyTextarea.innerHTML = '';\n      this.copyTextarea.select();\n      try {\n        // eslint-disable-next-line deprecation/deprecation\n        if (document.execCommand('paste')) {\n          resolve(this.copyTextarea.innerHTML);\n        } else {\n          reject();\n        }\n      } catch (err) {\n        reject();\n      }\n      this.copyTextarea.innerHTML = '';\n    });\n  }\n}\n_class = ClipboardMock;\n_class.ɵfac = function ClipboardMock_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["Clipboard","ClipboardMock","constructor","copyTextarea","document","createElement","className","setAttribute","body","appendChild","copy","text","Promise","resolve","reject","innerHTML","select","execCommand","err","paste","factory","ɵfac"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/emulator/services/clipboard.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { Clipboard } from '@awesome-cordova-plugins/clipboard/ngx';\n\n/**\n * Emulates the Cordova Clipboard plugin in browser.\n */\n@Injectable()\nexport class ClipboardMock extends Clipboard {\n\n    protected copyTextarea: HTMLTextAreaElement;\n\n    constructor() {\n        super();\n\n        // In browser the text must be selected in order to copy it. Create a hidden textarea to put the text in it.\n        this.copyTextarea = document.createElement('textarea');\n        this.copyTextarea.className = 'core-browser-copy-area';\n        this.copyTextarea.setAttribute('aria-hidden', 'true');\n        document.body.appendChild(this.copyTextarea);\n    }\n\n    /**\n     * Copy some text to the clipboard.\n     *\n     * @param text The text to copy.\n     * @returns Promise resolved when copied.\n     */\n    copy(text: string): Promise<void> {\n        return new Promise((resolve, reject): void => {\n            // Put the text in the hidden textarea and select it.\n            this.copyTextarea.innerHTML = text;\n            this.copyTextarea.select();\n\n            try {\n                // eslint-disable-next-line deprecation/deprecation\n                if (document.execCommand('copy')) {\n                    resolve();\n                } else {\n                    reject();\n                }\n            } catch (err) {\n                reject();\n            }\n\n            this.copyTextarea.innerHTML = '';\n        });\n    }\n\n    /*\n     * Get the text stored in the clipboard.\n     *\n     * @returns Promise resolved with the text.\n     */\n    paste(): Promise<string> {\n        return new Promise((resolve, reject): void => {\n            // Paste the text in the hidden textarea and get it.\n            this.copyTextarea.innerHTML = '';\n            this.copyTextarea.select();\n\n            try {\n                // eslint-disable-next-line deprecation/deprecation\n                if (document.execCommand('paste')) {\n                    resolve(this.copyTextarea.innerHTML);\n                } else {\n                    reject();\n                }\n            } catch (err) {\n                reject();\n            }\n\n            this.copyTextarea.innerHTML = '';\n        });\n    }\n\n}\n"],"mappings":";AAeA,SAASA,SAAS,QAAQ,wCAAwC;;AAElE;;;AAIA,OAAM,MAAOC,aAAc,SAAQD,SAAS;EAIxCE,YAAA;IACI,KAAK,EAAE;IAEP;IACA,IAAI,CAACC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;IACtD,IAAI,CAACF,YAAY,CAACG,SAAS,GAAG,wBAAwB;IACtD,IAAI,CAACH,YAAY,CAACI,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;IACrDH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAAC,IAAI,CAACN,YAAY,CAAC;EAChD;EAEA;;;;;;EAMAO,IAAIA,CAACC,IAAY;IACb,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAU;MACzC;MACA,IAAI,CAACX,YAAY,CAACY,SAAS,GAAGJ,IAAI;MAClC,IAAI,CAACR,YAAY,CAACa,MAAM,EAAE;MAE1B,IAAI;QACA;QACA,IAAIZ,QAAQ,CAACa,WAAW,CAAC,MAAM,CAAC,EAAE;UAC9BJ,OAAO,EAAE;SACZ,MAAM;UACHC,MAAM,EAAE;;OAEf,CAAC,OAAOI,GAAG,EAAE;QACVJ,MAAM,EAAE;;MAGZ,IAAI,CAACX,YAAY,CAACY,SAAS,GAAG,EAAE;IACpC,CAAC,CAAC;EACN;EAEA;;;;;EAKAI,KAAKA,CAAA;IACD,OAAO,IAAIP,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAU;MACzC;MACA,IAAI,CAACX,YAAY,CAACY,SAAS,GAAG,EAAE;MAChC,IAAI,CAACZ,YAAY,CAACa,MAAM,EAAE;MAE1B,IAAI;QACA;QACA,IAAIZ,QAAQ,CAACa,WAAW,CAAC,OAAO,CAAC,EAAE;UAC/BJ,OAAO,CAAC,IAAI,CAACV,YAAY,CAACY,SAAS,CAAC;SACvC,MAAM;UACHD,MAAM,EAAE;;OAEf,CAAC,OAAOI,GAAG,EAAE;QACVJ,MAAM,EAAE;;MAGZ,IAAI,CAACX,YAAY,CAACY,SAAS,GAAG,EAAE;IACpC,CAAC,CAAC;EACN;;SAjESd,aAAc;;mBAAdA,MAAa;AAAA;;SAAbA,MAAa;EAAAmB,OAAA,EAAbnB,MAAa,CAAAoB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}