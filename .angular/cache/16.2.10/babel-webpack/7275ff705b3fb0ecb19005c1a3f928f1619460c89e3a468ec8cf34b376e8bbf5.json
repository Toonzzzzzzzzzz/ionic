{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ApplicationInitStatus, ApplicationRef, NgZone as NgZoneService, EnvironmentInjector } from '@angular/core';\nimport { Router as RouterService } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer as DomSanitizerService } from '@angular/platform-browser';\nimport { AngularDelegate as AngularDelegateService, AlertController as AlertControllerService, LoadingController as LoadingControllerService, ModalController as ModalControllerService, ToastController as ToastControllerService, GestureController as GestureControllerService, ActionSheetController as ActionSheetControllerService, NavController as NavControllerService, PopoverController as PopoverControllerService } from '@ionic/angular';\nimport { Badge as BadgeService } from '@awesome-cordova-plugins/badge/ngx';\nimport { Camera as CameraService } from '@awesome-cordova-plugins/camera/ngx';\nimport { Clipboard as ClipboardService } from '@awesome-cordova-plugins/clipboard/ngx';\nimport { Diagnostic as DiagnosticService } from '@awesome-cordova-plugins/diagnostic/ngx';\nimport { Device as DeviceService } from '@awesome-cordova-plugins/device/ngx';\nimport { File as FileService } from '@awesome-cordova-plugins/file/ngx';\nimport { FileOpener as FileOpenerService } from '@awesome-cordova-plugins/file-opener/ngx';\nimport { FileTransfer as FileTransferService } from '@awesome-cordova-plugins/file-transfer/ngx';\nimport { Geolocation as GeolocationService } from '@awesome-cordova-plugins/geolocation/ngx';\nimport { HTTP } from '@awesome-cordova-plugins/http/ngx';\nimport { InAppBrowser as InAppBrowserService } from '@awesome-cordova-plugins/in-app-browser/ngx';\nimport { WebView as WebViewService } from '@awesome-cordova-plugins/ionic-webview/ngx';\nimport { Keyboard as KeyboardService } from '@awesome-cordova-plugins/keyboard/ngx';\nimport { LocalNotifications as LocalNotificationsService } from '@awesome-cordova-plugins/local-notifications/ngx';\nimport { MediaCapture as MediaCaptureService } from '@awesome-cordova-plugins/media-capture/ngx';\nimport { StatusBar as StatusBarService } from '@awesome-cordova-plugins/status-bar/ngx';\nimport { SplashScreen as SplashScreenService } from '@awesome-cordova-plugins/splash-screen/ngx';\nimport { SQLite as SQLiteService } from '@awesome-cordova-plugins/sqlite/ngx';\nimport { WebIntent as WebIntentService } from '@awesome-cordova-plugins/web-intent/ngx';\nimport { TranslateService } from '@ngx-translate/core';\nimport { asyncInstance } from '@/core/utils/async-instance';\nimport { CorePromisedValue } from '@classes/promised-value';\n/**\n * Injector instance used to resolve singletons.\n */\nconst singletonsInjector = new CorePromisedValue();\n/**\n * Helper to create a method that proxies calls to the underlying singleton instance.\n *\n * @returns Function.\n */\n// eslint-disable-next-line\nlet createSingletonMethodProxy = (instance, method, property) => method.bind(instance);\n/**\n * Set the injector that will be used to resolve instances in the singletons of this module.\n *\n * @param injector Module injector.\n */\nexport function setSingletonsInjector(injector) {\n  singletonsInjector.resolve(injector);\n}\n/**\n * Set the method to create method proxies.\n *\n * @param method Method.\n */\nexport function setCreateSingletonMethodProxy(method) {\n  createSingletonMethodProxy = method;\n}\n/**\n * Make a singleton proxy for the given injection token.\n *\n * This method will return an object that will proxy method calls to an underlying service instance. Getters will also be proxied,\n * but these need to be configured manually using the `getters` argument. Most of the time, this proxy can be used directly like\n * you would use a service instance. If you need to get the real service instance, it can be accessed through the `instance`\n * property and it can be set with the `setInstance` method.\n *\n * @param injectionToken Injection token used to resolve the service. This is usually the service class if the provider was\n * defined using a class or the string used in the `provide` key if it was defined using an object.\n * @returns Singleton proxy.\n */\nexport function makeSingleton(injectionToken) {\n  const singleton = {\n    injectionToken,\n    setInstance(instance) {\n      Object.defineProperty(singleton, 'instance', {\n        value: instance,\n        configurable: true\n      });\n    }\n  };\n  Object.defineProperty(singleton, 'instance', {\n    get: () => {\n      const injector = singletonsInjector.value;\n      if (!injector) {\n        throw new Error('Can\\'t resolve a singleton instance without an injector');\n      }\n      // @todo Check type to avoid deprecation.\n      // eslint-disable-next-line deprecation/deprecation\n      const instance = injector.get(injectionToken);\n      singleton.setInstance(instance);\n      return instance;\n    },\n    configurable: true\n  });\n  return new Proxy(singleton, {\n    get(target, property, receiver) {\n      if (property in target) {\n        return Reflect.get(target, property, receiver);\n      }\n      const value = target.instance[property];\n      return typeof value === 'function' ? createSingletonMethodProxy(target.instance, value, property) : value;\n    },\n    set(target, property, value, receiver) {\n      Reflect.set(target.instance, property, value, receiver);\n      return true;\n    }\n  });\n}\n// Convert ionic-native services to singleton.\nexport const Badge = makeSingleton(BadgeService);\nexport const Clipboard = makeSingleton(ClipboardService);\nexport const Diagnostic = makeSingleton(DiagnosticService);\nexport const File = makeSingleton(FileService);\nexport const FileOpener = makeSingleton(FileOpenerService);\nexport const FileTransfer = makeSingleton(FileTransferService);\nexport const Geolocation = makeSingleton(GeolocationService);\nexport const InAppBrowser = makeSingleton(InAppBrowserService);\nexport const Keyboard = makeSingleton(KeyboardService);\nexport const LocalNotifications = makeSingleton(LocalNotificationsService);\nexport const MediaCapture = makeSingleton(MediaCaptureService);\nexport const NativeHttp = makeSingleton(HTTP);\nexport const StatusBar = makeSingleton(StatusBarService);\nexport const SplashScreen = makeSingleton(SplashScreenService);\nexport const SQLite = makeSingleton(SQLiteService);\nexport const WebIntent = makeSingleton(WebIntentService);\nexport const WebView = makeSingleton(WebViewService);\nexport const Camera = makeSingleton(CameraService);\nexport const Device = makeSingleton(DeviceService);\n// Convert some Angular and Ionic injectables to singletons.\nexport const NgZone = makeSingleton(NgZoneService);\nexport const Http = makeSingleton(HttpClient);\nexport const ActionSheetController = makeSingleton(ActionSheetControllerService);\nexport const AngularDelegate = makeSingleton(AngularDelegateService);\nexport const AlertController = makeSingleton(AlertControllerService);\nexport const LoadingController = makeSingleton(LoadingControllerService);\nexport const ModalController = makeSingleton(ModalControllerService);\nexport const PopoverController = makeSingleton(PopoverControllerService);\nexport const ToastController = makeSingleton(ToastControllerService);\nexport const GestureController = makeSingleton(GestureControllerService);\nexport const ApplicationInit = makeSingleton(ApplicationInitStatus);\nexport const Application = makeSingleton(ApplicationRef);\nexport const NavController = makeSingleton(NavControllerService);\nexport const Router = makeSingleton(RouterService);\nexport const DomSanitizer = makeSingleton(DomSanitizerService);\n// Convert external libraries injectables.\nexport const Translate = makeSingleton(TranslateService);\n// Async singletons.\nexport const AngularFrameworkDelegate = asyncInstance( /*#__PURE__*/_asyncToGenerator(function* () {\n  const injector = yield singletonsInjector;\n  return AngularDelegate.create(injector.get(EnvironmentInjector), injector);\n}));","map":{"version":3,"names":["ApplicationInitStatus","ApplicationRef","NgZone","NgZoneService","EnvironmentInjector","Router","RouterService","HttpClient","DomSanitizer","DomSanitizerService","AngularDelegate","AngularDelegateService","AlertController","AlertControllerService","LoadingController","LoadingControllerService","ModalController","ModalControllerService","ToastController","ToastControllerService","GestureController","GestureControllerService","ActionSheetController","ActionSheetControllerService","NavController","NavControllerService","PopoverController","PopoverControllerService","Badge","BadgeService","Camera","CameraService","Clipboard","ClipboardService","Diagnostic","DiagnosticService","Device","DeviceService","File","FileService","FileOpener","FileOpenerService","FileTransfer","FileTransferService","Geolocation","GeolocationService","HTTP","InAppBrowser","InAppBrowserService","WebView","WebViewService","Keyboard","KeyboardService","LocalNotifications","LocalNotificationsService","MediaCapture","MediaCaptureService","StatusBar","StatusBarService","SplashScreen","SplashScreenService","SQLite","SQLiteService","WebIntent","WebIntentService","TranslateService","asyncInstance","CorePromisedValue","singletonsInjector","createSingletonMethodProxy","instance","method","property","bind","setSingletonsInjector","injector","resolve","setCreateSingletonMethodProxy","makeSingleton","injectionToken","singleton","setInstance","Object","defineProperty","value","configurable","get","Error","Proxy","target","receiver","Reflect","set","NativeHttp","Http","ApplicationInit","Application","Translate","AngularFrameworkDelegate","_asyncToGenerator","create"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/singletons/index.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    AbstractType,\n    ApplicationInitStatus,\n    ApplicationRef,\n    Injector,\n    NgZone as NgZoneService,\n    Type,\n    EnvironmentInjector,\n} from '@angular/core';\nimport { Router as RouterService } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer as DomSanitizerService } from '@angular/platform-browser';\n\nimport {\n    AngularDelegate as AngularDelegateService,\n    AlertController as AlertControllerService,\n    LoadingController as LoadingControllerService,\n    ModalController as ModalControllerService,\n    ToastController as ToastControllerService,\n    GestureController as GestureControllerService,\n    ActionSheetController as ActionSheetControllerService,\n    NavController as NavControllerService,\n    PopoverController as PopoverControllerService,\n} from '@ionic/angular';\n\nimport { Badge as BadgeService } from '@awesome-cordova-plugins/badge/ngx';\nimport { Camera as CameraService } from '@awesome-cordova-plugins/camera/ngx';\nimport { Clipboard as ClipboardService } from '@awesome-cordova-plugins/clipboard/ngx';\nimport { Diagnostic as DiagnosticService } from '@awesome-cordova-plugins/diagnostic/ngx';\nimport { Device as DeviceService } from '@awesome-cordova-plugins/device/ngx';\nimport { File as FileService } from '@awesome-cordova-plugins/file/ngx';\nimport { FileOpener as FileOpenerService } from '@awesome-cordova-plugins/file-opener/ngx';\nimport { FileTransfer as FileTransferService } from '@awesome-cordova-plugins/file-transfer/ngx';\nimport { Geolocation as GeolocationService } from '@awesome-cordova-plugins/geolocation/ngx';\nimport { HTTP } from '@awesome-cordova-plugins/http/ngx';\nimport { InAppBrowser as InAppBrowserService } from '@awesome-cordova-plugins/in-app-browser/ngx';\nimport { WebView as WebViewService } from '@awesome-cordova-plugins/ionic-webview/ngx';\nimport { Keyboard as KeyboardService } from '@awesome-cordova-plugins/keyboard/ngx';\nimport { LocalNotifications as LocalNotificationsService } from '@awesome-cordova-plugins/local-notifications/ngx';\nimport { MediaCapture as MediaCaptureService } from '@awesome-cordova-plugins/media-capture/ngx';\nimport { StatusBar as StatusBarService } from '@awesome-cordova-plugins/status-bar/ngx';\nimport { SplashScreen as SplashScreenService } from '@awesome-cordova-plugins/splash-screen/ngx';\nimport { SQLite as SQLiteService } from '@awesome-cordova-plugins/sqlite/ngx';\nimport { WebIntent as WebIntentService } from '@awesome-cordova-plugins/web-intent/ngx';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { CoreApplicationInitStatus } from '@classes/application-init-status';\nimport { asyncInstance } from '@/core/utils/async-instance';\nimport { CorePromisedValue } from '@classes/promised-value';\n\n/**\n * Injector instance used to resolve singletons.\n */\nconst singletonsInjector = new CorePromisedValue<Injector>();\n\n/**\n * Helper to create a method that proxies calls to the underlying singleton instance.\n *\n * @returns Function.\n */\n// eslint-disable-next-line\nlet createSingletonMethodProxy = (instance: any, method: Function, property: string | number | symbol) => method.bind(instance);\n\n/**\n * Singleton proxy created using the factory method.\n *\n * @see makeSingleton\n */\nexport type CoreSingletonProxy<Service = unknown> = Service & {\n    instance: Service;\n    injectionToken: Type<Service> | AbstractType<Service> | Type<unknown> | string;\n    setInstance(instance: Service): void;\n};\n\n/**\n * Set the injector that will be used to resolve instances in the singletons of this module.\n *\n * @param injector Module injector.\n */\nexport function setSingletonsInjector(injector: Injector): void {\n    singletonsInjector.resolve(injector);\n}\n\n/**\n * Set the method to create method proxies.\n *\n * @param method Method.\n */\nexport function setCreateSingletonMethodProxy(method: typeof createSingletonMethodProxy): void {\n    createSingletonMethodProxy = method;\n}\n\n/**\n * Make a singleton proxy for the given injection token.\n *\n * This method will return an object that will proxy method calls to an underlying service instance. Getters will also be proxied,\n * but these need to be configured manually using the `getters` argument. Most of the time, this proxy can be used directly like\n * you would use a service instance. If you need to get the real service instance, it can be accessed through the `instance`\n * property and it can be set with the `setInstance` method.\n *\n * @param injectionToken Injection token used to resolve the service. This is usually the service class if the provider was\n * defined using a class or the string used in the `provide` key if it was defined using an object.\n * @returns Singleton proxy.\n */\nexport function makeSingleton<Service extends object = object>(\n    injectionToken: Type<Service> | AbstractType<Service> | Type<unknown> | string,\n): CoreSingletonProxy<Service> {\n    const singleton = {\n        injectionToken,\n        setInstance(instance: Service) {\n            Object.defineProperty(singleton, 'instance', {\n                value: instance,\n                configurable: true,\n            });\n        },\n    } as Pick<CoreSingletonProxy<Service>, 'injectionToken' | 'instance' | 'setInstance'>;\n\n    Object.defineProperty(singleton, 'instance', {\n        get: () => {\n            const injector = singletonsInjector.value;\n\n            if (!injector) {\n                throw new Error('Can\\'t resolve a singleton instance without an injector');\n            }\n\n            // @todo Check type to avoid deprecation.\n            // eslint-disable-next-line deprecation/deprecation\n            const instance = injector.get(injectionToken);\n\n            singleton.setInstance(instance);\n\n            return instance;\n        },\n        configurable: true,\n    });\n\n    return new Proxy(singleton, {\n        get(target, property, receiver) {\n            if (property in target) {\n                return Reflect.get(target, property, receiver);\n            }\n\n            const value = target.instance[property];\n\n            return typeof value === 'function'\n                ? createSingletonMethodProxy(target.instance, value, property)\n                : value;\n        },\n        set(target, property, value, receiver) {\n            Reflect.set(target.instance, property, value, receiver);\n\n            return true;\n        },\n    }) as CoreSingletonProxy<Service>;\n}\n\n// Convert ionic-native services to singleton.\nexport const Badge = makeSingleton(BadgeService);\nexport const Clipboard = makeSingleton(ClipboardService);\nexport const Diagnostic = makeSingleton(DiagnosticService);\nexport const File = makeSingleton(FileService);\nexport const FileOpener = makeSingleton(FileOpenerService);\nexport const FileTransfer = makeSingleton(FileTransferService);\nexport const Geolocation = makeSingleton(GeolocationService);\nexport const InAppBrowser = makeSingleton(InAppBrowserService);\nexport const Keyboard = makeSingleton(KeyboardService);\nexport const LocalNotifications = makeSingleton(LocalNotificationsService);\nexport const MediaCapture = makeSingleton(MediaCaptureService);\nexport const NativeHttp = makeSingleton(HTTP);\nexport const StatusBar = makeSingleton(StatusBarService);\nexport const SplashScreen = makeSingleton(SplashScreenService);\nexport const SQLite = makeSingleton(SQLiteService);\nexport const WebIntent = makeSingleton(WebIntentService);\nexport const WebView = makeSingleton(WebViewService);\n\nexport const Camera = makeSingleton(CameraService);\n\nexport const Device = makeSingleton(DeviceService);\n\n// Convert some Angular and Ionic injectables to singletons.\nexport const NgZone = makeSingleton(NgZoneService);\nexport const Http = makeSingleton(HttpClient);\nexport const ActionSheetController = makeSingleton(ActionSheetControllerService);\nexport const AngularDelegate = makeSingleton(AngularDelegateService);\nexport const AlertController = makeSingleton(AlertControllerService);\nexport const LoadingController = makeSingleton(LoadingControllerService);\nexport const ModalController = makeSingleton(ModalControllerService);\nexport const PopoverController = makeSingleton(PopoverControllerService);\nexport const ToastController = makeSingleton(ToastControllerService);\nexport const GestureController = makeSingleton(GestureControllerService);\nexport const ApplicationInit = makeSingleton<CoreApplicationInitStatus>(ApplicationInitStatus);\nexport const Application = makeSingleton(ApplicationRef);\nexport const NavController = makeSingleton(NavControllerService);\nexport const Router = makeSingleton(RouterService);\nexport const DomSanitizer = makeSingleton(DomSanitizerService);\n\n// Convert external libraries injectables.\nexport const Translate: Omit<CoreSingletonProxy<TranslateService>, 'instant'> & {\n    instant(keys: string[]): string[];\n    instant(key: string, interpolateParams?: Record<string, unknown>): string;\n} = makeSingleton(TranslateService);\n\n// Async singletons.\nexport const AngularFrameworkDelegate = asyncInstance(async () => {\n    const injector = await singletonsInjector;\n\n    return AngularDelegate.create(injector.get(EnvironmentInjector), injector);\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}