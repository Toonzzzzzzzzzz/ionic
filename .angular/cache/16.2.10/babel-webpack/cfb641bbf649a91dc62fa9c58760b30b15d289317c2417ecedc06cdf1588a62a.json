{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { DELETED_EVENTS_TABLE, EVENTS_TABLE } from './database/calendar-offline';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to handle offline calendar events.\n */\nexport class AddonCalendarOfflineProvider {\n  /**\n   * Delete an offline event.\n   *\n   * @param eventId Event ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if deleted, rejected if failure.\n   */\n  deleteEvent(eventId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        id: eventId\n      };\n      yield site.getDb().deleteRecords(EVENTS_TABLE, conditions);\n    })();\n  }\n  /**\n   * Get the IDs of all the events created/edited/deleted in offline.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the IDs.\n   */\n  getAllEventsIds(siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      promises.push(_this.getAllDeletedEventsIds(siteId));\n      promises.push(_this.getAllEditedEventsIds(siteId));\n      const result = yield Promise.all(promises);\n      return CoreUtils.mergeArraysWithoutDuplicates(result[0], result[1]);\n    })();\n  }\n  /**\n   * Get all the events deleted in offline.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with all the events deleted in offline.\n   */\n  getAllDeletedEvents(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(DELETED_EVENTS_TABLE);\n    })();\n  }\n  /**\n   * Get the IDs of all the events deleted in offline.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the IDs of all the events deleted in offline.\n   */\n  getAllDeletedEventsIds(siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const events = yield _this2.getAllDeletedEvents(siteId);\n      return events.map(event => event.id);\n    })();\n  }\n  /**\n   * Get all the events created/edited in offline.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with events.\n   */\n  getAllEditedEvents(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(EVENTS_TABLE);\n    })();\n  }\n  /**\n   * Get the IDs of all the events created/edited in offline.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with events IDs.\n   */\n  getAllEditedEventsIds(siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const events = yield _this3.getAllEditedEvents(siteId);\n      return events.map(event => event.id);\n    })();\n  }\n  /**\n   * Get an event deleted in offline.\n   *\n   * @param eventId Event ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the deleted event.\n   */\n  getDeletedEvent(eventId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        id: eventId\n      };\n      return site.getDb().getRecord(DELETED_EVENTS_TABLE, conditions);\n    })();\n  }\n  /**\n   * Get an offline event.\n   *\n   * @param eventId Event ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the event.\n   */\n  getEvent(eventId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        id: eventId\n      };\n      return site.getDb().getRecord(EVENTS_TABLE, conditions);\n    })();\n  }\n  /**\n   * Check if there are offline events to send.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: true if has offline events, false otherwise.\n   */\n  hasEditedEvents(siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const events = yield _this4.getAllEditedEvents(siteId);\n        return !!events.length;\n      } catch (_unused) {\n        // No offline data found, return false.\n        return false;\n      }\n    })();\n  }\n  /**\n   * Check whether there's offline data for a site.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: true if has offline data, false otherwise.\n   */\n  hasOfflineData(siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const ids = yield _this5.getAllEventsIds(siteId);\n      return ids.length > 0;\n    })();\n  }\n  /**\n   * Check if an event is deleted.\n   *\n   * @param eventId Event ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: whether the event is deleted.\n   */\n  isEventDeleted(eventId, siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const event = yield _this6.getDeletedEvent(eventId, siteId);\n        return !!event;\n      } catch (_unused2) {\n        return false;\n      }\n    })();\n  }\n  /**\n   * Mark an event as deleted.\n   *\n   * @param eventId Event ID to delete.\n   * @param name Name of the event to delete.\n   * @param deleteAll If it's a repeated event. whether to delete all events of the series.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  markDeleted(eventId, name, deleteAll, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const event = {\n        id: eventId,\n        name: name || '',\n        repeat: deleteAll ? 1 : 0,\n        timemodified: Date.now()\n      };\n      return site.getDb().insertRecord(DELETED_EVENTS_TABLE, event);\n    })();\n  }\n  /**\n   * Offline version for adding a new discussion to a forum.\n   *\n   * @param eventId Event ID. Negative value to edit offline event. If it's a new event, set it to undefined/null.\n   * @param data Event data.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the stored event.\n   */\n  saveEvent(eventId, data, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const timeCreated = Date.now();\n      const event = {\n        id: eventId || -timeCreated,\n        name: data.name,\n        timestart: data.timestart,\n        eventtype: data.eventtype,\n        categoryid: data.categoryid,\n        courseid: data.courseid,\n        groupcourseid: data.groupcourseid,\n        groupid: data.groupid,\n        description: data.description && data.description.text,\n        location: data.location,\n        duration: data.duration,\n        timedurationuntil: data.timedurationuntil,\n        timedurationminutes: data.timedurationminutes,\n        repeat: data.repeat ? 1 : 0,\n        repeats: data.repeats,\n        repeatid: data.repeatid,\n        repeateditall: data.repeateditall ? 1 : 0,\n        timecreated: timeCreated,\n        userid: site.getUserId()\n      };\n      yield site.getDb().insertRecord(EVENTS_TABLE, event);\n      return event;\n    })();\n  }\n  /**\n   * Unmark an event as deleted.\n   *\n   * @param eventId Event ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if deleted, rejected if failure.\n   */\n  unmarkDeleted(eventId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const conditions = {\n        id: eventId\n      };\n      yield site.getDb().deleteRecords(DELETED_EVENTS_TABLE, conditions);\n    })();\n  }\n}\n_class = AddonCalendarOfflineProvider;\n_class.ɵfac = function AddonCalendarOfflineProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonCalendarOffline = makeSingleton(AddonCalendarOfflineProvider);","map":{"version":3,"names":["CoreSites","CoreUtils","makeSingleton","DELETED_EVENTS_TABLE","EVENTS_TABLE","AddonCalendarOfflineProvider","deleteEvent","eventId","siteId","_asyncToGenerator","site","getSite","conditions","id","getDb","deleteRecords","getAllEventsIds","_this","promises","push","getAllDeletedEventsIds","getAllEditedEventsIds","result","Promise","all","mergeArraysWithoutDuplicates","getAllDeletedEvents","getRecords","_this2","events","map","event","getAllEditedEvents","_this3","getDeletedEvent","getRecord","getEvent","hasEditedEvents","_this4","length","_unused","hasOfflineData","_this5","ids","isEventDeleted","_this6","_unused2","markDeleted","name","deleteAll","repeat","timemodified","Date","now","insertRecord","saveEvent","data","timeCreated","timestart","eventtype","categoryid","courseid","groupcourseid","groupid","description","text","location","duration","timedurationuntil","timedurationminutes","repeats","repeatid","repeateditall","timecreated","userid","getUserId","unmarkDeleted","factory","ɵfac","providedIn","AddonCalendarOffline"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/calendar/services/calendar-offline.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { SQLiteDBRecordValues } from '@classes/sqlitedb';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonCalendarSubmitCreateUpdateFormDataWSParams } from './calendar';\nimport {\n    AddonCalendarOfflineDeletedEventDBRecord,\n    AddonCalendarOfflineEventDBRecord,\n    DELETED_EVENTS_TABLE,\n    EVENTS_TABLE,\n} from './database/calendar-offline';\n\n/**\n * Service to handle offline calendar events.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonCalendarOfflineProvider {\n\n    /**\n     * Delete an offline event.\n     *\n     * @param eventId Event ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if deleted, rejected if failure.\n     */\n    async deleteEvent(eventId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        const conditions: SQLiteDBRecordValues = {\n            id: eventId,\n        };\n\n        await site.getDb().deleteRecords(EVENTS_TABLE, conditions);\n    }\n\n    /**\n     * Get the IDs of all the events created/edited/deleted in offline.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the IDs.\n     */\n    async getAllEventsIds(siteId?: string): Promise<number[]> {\n        const promises: Promise<number[]>[] = [];\n\n        promises.push(this.getAllDeletedEventsIds(siteId));\n        promises.push(this.getAllEditedEventsIds(siteId));\n\n        const result = await Promise.all(promises);\n\n        return CoreUtils.mergeArraysWithoutDuplicates(result[0], result[1]);\n    }\n\n    /**\n     * Get all the events deleted in offline.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with all the events deleted in offline.\n     */\n    async getAllDeletedEvents(siteId?: string): Promise<AddonCalendarOfflineDeletedEventDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(DELETED_EVENTS_TABLE);\n    }\n\n    /**\n     * Get the IDs of all the events deleted in offline.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the IDs of all the events deleted in offline.\n     */\n    async getAllDeletedEventsIds(siteId?: string): Promise<number[]> {\n        const events = await this.getAllDeletedEvents(siteId);\n\n        return events.map((event) => event.id);\n    }\n\n    /**\n     * Get all the events created/edited in offline.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with events.\n     */\n    async getAllEditedEvents(siteId?: string): Promise<AddonCalendarOfflineEventDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(EVENTS_TABLE);\n    }\n\n    /**\n     * Get the IDs of all the events created/edited in offline.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with events IDs.\n     */\n    async getAllEditedEventsIds(siteId?: string): Promise<number[]> {\n        const events = await this.getAllEditedEvents(siteId);\n\n        return events.map((event) => event.id);\n    }\n\n    /**\n     * Get an event deleted in offline.\n     *\n     * @param eventId Event ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the deleted event.\n     */\n    async getDeletedEvent(eventId: number, siteId?: string): Promise<AddonCalendarOfflineDeletedEventDBRecord> {\n        const site = await CoreSites.getSite(siteId);\n        const conditions: SQLiteDBRecordValues = {\n            id: eventId,\n        };\n\n        return site.getDb().getRecord(DELETED_EVENTS_TABLE, conditions);\n    }\n\n    /**\n     * Get an offline event.\n     *\n     * @param eventId Event ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the event.\n     */\n    async getEvent(eventId: number, siteId?: string): Promise<AddonCalendarOfflineEventDBRecord> {\n        const site = await CoreSites.getSite(siteId);\n        const conditions: SQLiteDBRecordValues = {\n            id: eventId,\n        };\n\n        return site.getDb().getRecord(EVENTS_TABLE, conditions);\n    }\n\n    /**\n     * Check if there are offline events to send.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: true if has offline events, false otherwise.\n     */\n    async hasEditedEvents(siteId?: string): Promise<boolean> {\n        try {\n            const events = await this.getAllEditedEvents(siteId);\n\n            return !!events.length;\n        } catch {\n            // No offline data found, return false.\n            return false;\n        }\n    }\n\n    /**\n     * Check whether there's offline data for a site.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: true if has offline data, false otherwise.\n     */\n    async hasOfflineData(siteId?: string): Promise<boolean> {\n        const ids = await this.getAllEventsIds(siteId);\n\n        return ids.length > 0;\n    }\n\n    /**\n     * Check if an event is deleted.\n     *\n     * @param eventId Event ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: whether the event is deleted.\n     */\n    async isEventDeleted(eventId: number, siteId?: string): Promise<boolean> {\n        try {\n            const event = await this.getDeletedEvent(eventId, siteId);\n\n            return !!event;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Mark an event as deleted.\n     *\n     * @param eventId Event ID to delete.\n     * @param name Name of the event to delete.\n     * @param deleteAll If it's a repeated event. whether to delete all events of the series.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async markDeleted(eventId: number, name: string, deleteAll?: boolean, siteId?: string): Promise<number> {\n        const site = await CoreSites.getSite(siteId);\n        const event: AddonCalendarOfflineDeletedEventDBRecord = {\n            id: eventId,\n            name: name || '',\n            repeat: deleteAll ? 1 : 0,\n            timemodified: Date.now(),\n        };\n\n        return site.getDb().insertRecord(DELETED_EVENTS_TABLE, event);\n    }\n\n    /**\n     * Offline version for adding a new discussion to a forum.\n     *\n     * @param eventId Event ID. Negative value to edit offline event. If it's a new event, set it to undefined/null.\n     * @param data Event data.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the stored event.\n     */\n    async saveEvent(\n        eventId: number | undefined,\n        data: AddonCalendarSubmitCreateUpdateFormDataWSParams,\n        siteId?: string,\n    ): Promise<AddonCalendarOfflineEventDBRecord> {\n        const site = await CoreSites.getSite(siteId);\n        const timeCreated = Date.now();\n        const event: AddonCalendarOfflineEventDBRecord = {\n            id: eventId || -timeCreated,\n            name: data.name,\n            timestart: data.timestart,\n            eventtype: data.eventtype,\n            categoryid: data.categoryid,\n            courseid: data.courseid,\n            groupcourseid: data.groupcourseid,\n            groupid: data.groupid,\n            description: data.description && data.description.text,\n            location: data.location,\n            duration: data.duration,\n            timedurationuntil: data.timedurationuntil,\n            timedurationminutes: data.timedurationminutes,\n            repeat: data.repeat ? 1 : 0,\n            repeats: data.repeats,\n            repeatid: data.repeatid,\n            repeateditall: data.repeateditall ? 1 : 0,\n            timecreated: timeCreated,\n            userid: site.getUserId(),\n        };\n        await site.getDb().insertRecord(EVENTS_TABLE, event);\n\n        return event;\n    }\n\n    /**\n     * Unmark an event as deleted.\n     *\n     * @param eventId Event ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if deleted, rejected if failure.\n     */\n    async unmarkDeleted(eventId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const conditions: SQLiteDBRecordValues = {\n            id: eventId,\n        };\n\n        await site.getDb().deleteRecords(DELETED_EVENTS_TABLE, conditions);\n    }\n\n}\nexport const AddonCalendarOffline = makeSingleton(AddonCalendarOfflineProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}