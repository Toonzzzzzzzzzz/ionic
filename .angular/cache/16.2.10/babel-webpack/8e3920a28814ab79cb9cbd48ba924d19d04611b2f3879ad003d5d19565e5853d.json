{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\n/**\n * Interceptor for Http calls. Adds the header 'Content-Type'='application/x-www-form-urlencoded'\n * and serializes the parameters if needed.\n */\nexport class CoreInterceptor {\n  /**\n   * Serialize an object to be used in a request.\n   *\n   * @param obj Object to serialize.\n   * @param addNull Add null values to the serialized as empty parameters.\n   * @returns Serialization of the object.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static serialize(obj, addNull) {\n    let query = '';\n    for (const name in obj) {\n      const value = obj[name];\n      if (value instanceof Array) {\n        for (let i = 0; i < value.length; ++i) {\n          const subValue = value[i];\n          const fullSubName = name + '[' + i + ']';\n          const innerObj = {};\n          innerObj[fullSubName] = subValue;\n          query += this.serialize(innerObj) + '&';\n        }\n      } else if (value instanceof Object) {\n        for (const subName in value) {\n          const subValue = value[subName];\n          const fullSubName = name + '[' + subName + ']';\n          const innerObj = {};\n          innerObj[fullSubName] = subValue;\n          query += this.serialize(innerObj) + '&';\n        }\n      } else if (addNull || value !== undefined && value !== null) {\n        query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n    return query.length ? query.substring(0, query.length - 1) : query;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  intercept(req, next) {\n    // Add the header and serialize the body if needed.\n    const newReq = req.clone({\n      headers: req.headers.set('Content-Type', 'application/x-www-form-urlencoded'),\n      body: typeof req.body == 'object' && String(req.body) != '[object File]' ? CoreInterceptor.serialize(req.body) : req.body\n    });\n    // Pass on the cloned request instead of the original request.\n    return next.handle(newReq);\n  }\n}\n_class = CoreInterceptor;\n_class.ɵfac = function CoreInterceptor_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["CoreInterceptor","serialize","obj","addNull","query","name","value","Array","i","length","subValue","fullSubName","innerObj","Object","subName","undefined","encodeURIComponent","substring","intercept","req","next","newReq","clone","headers","set","body","String","handle","factory","ɵfac"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/interceptor.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n/**\n * Interceptor for Http calls. Adds the header 'Content-Type'='application/x-www-form-urlencoded'\n * and serializes the parameters if needed.\n */\n@Injectable()\nexport class CoreInterceptor implements HttpInterceptor {\n\n    /**\n     * Serialize an object to be used in a request.\n     *\n     * @param obj Object to serialize.\n     * @param addNull Add null values to the serialized as empty parameters.\n     * @returns Serialization of the object.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static serialize(obj: any, addNull?: boolean): string {\n        let query = '';\n\n        for (const name in obj) {\n            const value = obj[name];\n\n            if (value instanceof Array) {\n                for (let i = 0; i < value.length; ++i) {\n                    const subValue = value[i];\n                    const fullSubName = name + '[' + i + ']';\n                    const innerObj = {};\n                    innerObj[fullSubName] = subValue;\n                    query += this.serialize(innerObj) + '&';\n                }\n            } else if (value instanceof Object) {\n                for (const subName in value) {\n                    const subValue = value[subName];\n                    const fullSubName = name + '[' + subName + ']';\n                    const innerObj = {};\n                    innerObj[fullSubName] = subValue;\n                    query += this.serialize(innerObj) + '&';\n                }\n            } else if (addNull || (value !== undefined && value !== null)) {\n                query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';\n            }\n        }\n\n        return query.length ? query.substring(0, query.length - 1) : query;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<any> {\n        // Add the header and serialize the body if needed.\n        const newReq = req.clone({\n            headers: req.headers.set('Content-Type', 'application/x-www-form-urlencoded'),\n            body: typeof req.body == 'object' && String(req.body) != '[object File]' ?\n                CoreInterceptor.serialize(req.body) : req.body,\n        });\n\n        // Pass on the cloned request instead of the original request.\n        return next.handle(newReq);\n    }\n\n}\n"],"mappings":";;AAkBA;;;;AAKA,OAAM,MAAOA,eAAe;EAExB;;;;;;;EAOA;EACA,OAAOC,SAASA,CAACC,GAAQ,EAAEC,OAAiB;IACxC,IAAIC,KAAK,GAAG,EAAE;IAEd,KAAK,MAAMC,IAAI,IAAIH,GAAG,EAAE;MACpB,MAAMI,KAAK,GAAGJ,GAAG,CAACG,IAAI,CAAC;MAEvB,IAAIC,KAAK,YAAYC,KAAK,EAAE;QACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;UACnC,MAAME,QAAQ,GAAGJ,KAAK,CAACE,CAAC,CAAC;UACzB,MAAMG,WAAW,GAAGN,IAAI,GAAG,GAAG,GAAGG,CAAC,GAAG,GAAG;UACxC,MAAMI,QAAQ,GAAG,EAAE;UACnBA,QAAQ,CAACD,WAAW,CAAC,GAAGD,QAAQ;UAChCN,KAAK,IAAI,IAAI,CAACH,SAAS,CAACW,QAAQ,CAAC,GAAG,GAAG;;OAE9C,MAAM,IAAIN,KAAK,YAAYO,MAAM,EAAE;QAChC,KAAK,MAAMC,OAAO,IAAIR,KAAK,EAAE;UACzB,MAAMI,QAAQ,GAAGJ,KAAK,CAACQ,OAAO,CAAC;UAC/B,MAAMH,WAAW,GAAGN,IAAI,GAAG,GAAG,GAAGS,OAAO,GAAG,GAAG;UAC9C,MAAMF,QAAQ,GAAG,EAAE;UACnBA,QAAQ,CAACD,WAAW,CAAC,GAAGD,QAAQ;UAChCN,KAAK,IAAI,IAAI,CAACH,SAAS,CAACW,QAAQ,CAAC,GAAG,GAAG;;OAE9C,MAAM,IAAIT,OAAO,IAAKG,KAAK,KAAKS,SAAS,IAAIT,KAAK,KAAK,IAAK,EAAE;QAC3DF,KAAK,IAAIY,kBAAkB,CAACX,IAAI,CAAC,GAAG,GAAG,GAAGW,kBAAkB,CAACV,KAAK,CAAC,GAAG,GAAG;;;IAIjF,OAAOF,KAAK,CAACK,MAAM,GAAGL,KAAK,CAACa,SAAS,CAAC,CAAC,EAAEb,KAAK,CAACK,MAAM,GAAG,CAAC,CAAC,GAAGL,KAAK;EACtE;EAEA;EACAc,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAC9C;IACA,MAAMC,MAAM,GAAGF,GAAG,CAACG,KAAK,CAAC;MACrBC,OAAO,EAAEJ,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC;MAC7EC,IAAI,EAAE,OAAON,GAAG,CAACM,IAAI,IAAI,QAAQ,IAAIC,MAAM,CAACP,GAAG,CAACM,IAAI,CAAC,IAAI,eAAe,GACpEzB,eAAe,CAACC,SAAS,CAACkB,GAAG,CAACM,IAAI,CAAC,GAAGN,GAAG,CAACM;KACjD,CAAC;IAEF;IACA,OAAOL,IAAI,CAACO,MAAM,CAACN,MAAM,CAAC;EAC9B;;SAnDSrB,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAA4B,OAAA,EAAf5B,MAAe,CAAA6B;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}