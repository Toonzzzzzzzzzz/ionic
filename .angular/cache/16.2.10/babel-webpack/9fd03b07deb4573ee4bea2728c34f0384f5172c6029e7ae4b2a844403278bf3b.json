{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreApp } from '@services/app';\nimport { CoreNetwork } from '@services/network';\nimport { CoreCronDelegate } from '@services/cron';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreConfig } from '@services/config';\nimport { CoreFilter } from '@features/filter/services/filter';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreCourse } from '@features/course/services/course';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreError } from '@classes/errors/error';\nimport { Subject } from 'rxjs';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreNavigator } from '@services/navigator';\nimport * as i0 from \"@angular/core\";\n/**\n * Settings helper service.\n */\nexport class CoreSettingsHelperProvider {\n  constructor() {\n    this.syncPromises = {};\n    this.colorSchemes = [];\n    this.currentColorScheme = \"light\" /* CoreColorScheme.LIGHT */;\n    this.darkModeObservable = new Subject();\n  }\n  initialize() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.prefersDark = window.matchMedia('(prefers-color-scheme: dark)');\n      if (!CoreConstants.CONFIG.forceColorScheme) {\n        // Update color scheme when a user enters or leaves a site, or when the site info is updated.\n        const applySiteScheme = () => {\n          if (_this.isColorSchemeDisabledInSite()) {\n            // Dark mode is disabled, force light mode.\n            _this.setColorScheme(\"light\" /* CoreColorScheme.LIGHT */);\n          } else {\n            // Reset color scheme settings.\n            _this.initColorScheme();\n          }\n        };\n        CoreEvents.on(CoreEvents.LOGIN, () => applySiteScheme());\n        CoreEvents.on(CoreEvents.SITE_UPDATED, () => applySiteScheme());\n        CoreEvents.on(CoreEvents.LOGOUT, () => {\n          // Reset color scheme settings.\n          _this.initColorScheme();\n        });\n      } else {\n        _this.initColorScheme();\n      }\n      // Listen for changes to the prefers-color-scheme media query.\n      _this.prefersDark.addEventListener && _this.prefersDark.addEventListener('change', () => {\n        _this.setColorScheme(_this.currentColorScheme);\n      });\n      // Init zoom level.\n      yield _this.upgradeZoomLevel();\n      _this.initDomSettings();\n    })();\n  }\n  /**\n   * Deletes files of a site and the tables that can be cleared.\n   *\n   * @param siteName Site Name.\n   * @param siteId Site ID.\n   * @returns Resolved with detailed new info when done.\n   */\n  deleteSiteStorage(siteName, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const siteInfo = {\n        cacheEntries: 0,\n        spaceUsage: 0\n      };\n      siteName = yield CoreFilter.formatText(siteName, {\n        clean: true,\n        singleLine: true,\n        filter: false\n      }, [], siteId);\n      const title = Translate.instant('addon.storagemanager.confirmdeleteallsitedata');\n      yield CoreDomUtils.showDeleteConfirm('addon.storagemanager.deleteallsitedatainfo', {\n        name: siteName\n      }, {\n        header: title\n      });\n      const site = yield CoreSites.getSite(siteId);\n      // Clear cache tables.\n      const cleanSchemas = CoreSites.getSiteTableSchemasToClear(site);\n      const promises = cleanSchemas.map(name => site.getDb().deleteRecords(name));\n      const filepoolService = CoreFilepool.instance;\n      promises.push(site.deleteFolder().then(() => {\n        filepoolService.clearAllPackagesStatus(siteId);\n        filepoolService.clearFilepool(siteId);\n        CoreCourse.clearAllCoursesStatus(siteId);\n        siteInfo.spaceUsage = 0;\n        return;\n      }).catch( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (error) {\n          if (error && error.code === FileError.NOT_FOUND_ERR) {\n            // Not found, set size 0.\n            filepoolService.clearAllPackagesStatus(siteId);\n            siteInfo.spaceUsage = 0;\n          } else {\n            // Error, recalculate the site usage.\n            CoreDomUtils.showErrorModal('addon.storagemanager.errordeletedownloadeddata', true);\n            siteInfo.spaceUsage = yield site.getSpaceUsage();\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).then( /*#__PURE__*/_asyncToGenerator(function* () {\n        CoreEvents.trigger(CoreEvents.SITE_STORAGE_DELETED, {}, siteId);\n        siteInfo.cacheEntries = yield _this2.calcSiteClearRows(site);\n        return;\n      })));\n      yield Promise.all(promises);\n      return siteInfo;\n    })();\n  }\n  /**\n   * Calculates each site's usage, and the total usage.\n   *\n   * @param siteId ID of the site. Current site if undefined.\n   * @returns Resolved with detailed info when done.\n   */\n  getSiteSpaceUsage(siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      // Get space usage.\n      const siteInfo = {\n        cacheEntries: 0,\n        spaceUsage: 0\n      };\n      siteInfo.cacheEntries = yield _this3.calcSiteClearRows(site);\n      siteInfo.spaceUsage = yield site.getTotalUsage();\n      return siteInfo;\n    })();\n  }\n  /**\n   * Calculate the number of rows to be deleted on a site.\n   *\n   * @param site Site object.\n   * @returns If there are rows to delete or not.\n   */\n  calcSiteClearRows(site) {\n    return _asyncToGenerator(function* () {\n      const clearTables = CoreSites.getSiteTableSchemasToClear(site);\n      let totalEntries = 0;\n      yield Promise.all(clearTables.map( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (name) {\n          return totalEntries = (yield site.getDb().countRecords(name)) + totalEntries;\n        });\n        return function (_x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n      return totalEntries;\n    })();\n  }\n  /**\n   * Get the synchronization promise of a site.\n   *\n   * @param siteId ID of the site.\n   * @returns Sync promise or null if site is not being syncrhonized.\n   */\n  getSiteSyncPromise(siteId) {\n    if (this.syncPromises[siteId] !== undefined) {\n      return this.syncPromises[siteId];\n    }\n  }\n  /**\n   * Synchronize a site.\n   *\n   * @param syncOnlyOnWifi True to sync only on wifi, false otherwise.\n   * @param siteId ID of the site to synchronize.\n   * @returns Promise resolved when synchronized, rejected if failure.\n   */\n  synchronizeSite(syncOnlyOnWifi, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.syncPromises[siteId] !== undefined) {\n        // There's already a sync ongoing for this site, return the promise.\n        return _this4.syncPromises[siteId];\n      }\n      const site = yield CoreSites.getSite(siteId);\n      const hasSyncHandlers = CoreCronDelegate.hasManualSyncHandlers();\n      // All these errors should not happen on manual sync because are prevented on UI.\n      if (site.isLoggedOut()) {\n        // Cannot sync logged out sites.\n        throw new CoreError(Translate.instant('core.settings.cannotsyncloggedout'));\n      } else if (hasSyncHandlers && !CoreNetwork.isOnline()) {\n        // We need connection to execute sync.\n        throw new CoreError(Translate.instant('core.settings.cannotsyncoffline'));\n      } else if (hasSyncHandlers && syncOnlyOnWifi && CoreNetwork.isNetworkAccessLimited()) {\n        throw new CoreError(Translate.instant('core.settings.cannotsyncwithoutwifi'));\n      }\n      const syncPromise = Promise.all([\n      // Invalidate all the site files so they are re-downloaded.\n      CoreUtils.ignoreErrors(CoreFilepool.invalidateAllFiles(siteId)),\n      // Invalidate and synchronize site data.\n      site.invalidateWsCache(), CoreSites.updateSiteInfo(site.getId()), CoreCronDelegate.forceSyncExecution(site.getId())\n      // eslint-disable-next-line arrow-body-style\n      ]).then(() => {\n        return;\n      });\n      _this4.syncPromises[siteId] = syncPromise;\n      try {\n        yield syncPromise;\n      } catch (error) {\n        throw CoreTextUtils.addTitleToError(error, Translate.instant('core.settings.sitesyncfailed'));\n      } finally {\n        delete _this4.syncPromises[siteId];\n      }\n    })();\n  }\n  /**\n   * Upgrades from Font size to new zoom level.\n   */\n  upgradeZoomLevel() {\n    return _asyncToGenerator(function* () {\n      // Check old setting and update the new.\n      try {\n        const fontSize = yield CoreConfig.get('CoreSettingsFontSize');\n        if (fontSize === undefined) {\n          // Already upgraded.\n          return;\n        }\n        // Reset the value to solve edge cases.\n        CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, \"none\" /* CoreZoomLevel.NONE */);\n        if (fontSize < 100) {\n          if (fontSize > 90) {\n            CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, \"high\" /* CoreZoomLevel.HIGH */);\n          } else if (fontSize > 70) {\n            CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, \"medium\" /* CoreZoomLevel.MEDIUM */);\n          }\n        }\n\n        CoreConfig.delete('CoreSettingsFontSize');\n      } catch (_unused) {\n        // Already upgraded.\n        return;\n      }\n    })();\n  }\n  /**\n   * Get saved Zoom Level setting.\n   *\n   * @returns The saved zoom Level option.\n   */\n  getZoomLevel() {\n    return _asyncToGenerator(function* () {\n      return CoreConfig.get(CoreConstants.SETTINGS_ZOOM_LEVEL, CoreConstants.CONFIG.defaultZoomLevel);\n    })();\n  }\n  /**\n   * Get saved zoom level value.\n   *\n   * @returns The saved zoom level value in %.\n   */\n  getZoom() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const zoomLevel = yield _this5.getZoomLevel();\n      return CoreConstants.CONFIG.zoomlevels[zoomLevel];\n    })();\n  }\n  /**\n   * Init Settings related to DOM.\n   */\n  initDomSettings() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // Set the font size based on user preference.\n      const zoomLevel = yield _this6.getZoomLevel();\n      _this6.applyZoomLevel(zoomLevel);\n      _this6.initColorScheme();\n    })();\n  }\n  /**\n   * Init the color scheme.\n   */\n  initColorScheme() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (CoreConstants.CONFIG.forceColorScheme) {\n        _this7.setColorScheme(CoreConstants.CONFIG.forceColorScheme);\n      } else {\n        const scheme = yield CoreConfig.get(CoreConstants.SETTINGS_COLOR_SCHEME, \"light\" /* CoreColorScheme.LIGHT */);\n        _this7.setColorScheme(scheme);\n      }\n    })();\n  }\n  /**\n   * Check if color scheme is disabled in a site.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with whether color scheme is disabled.\n   */\n  isColorSchemeDisabled(siteId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this8.isColorSchemeDisabledInSite(site);\n    })();\n  }\n  /**\n   * Check if color scheme is disabled in a site.\n   *\n   * @param site Site instance. If not defined, current site.\n   * @returns Whether color scheme is disabled.\n   */\n  isColorSchemeDisabledInSite(site) {\n    site = site || CoreSites.getCurrentSite();\n    return site ? site.isFeatureDisabled('NoDelegate_DarkMode') : false;\n  }\n  /**\n   * Set document default font size.\n   *\n   * @param zoomLevel Zoom Level.\n   */\n  applyZoomLevel(zoomLevel) {\n    const zoom = CoreConstants.CONFIG.zoomlevels[zoomLevel];\n    document.documentElement.style.setProperty('--zoom-level', zoom + '%');\n  }\n  /**\n   * Get system allowed color schemes.\n   *\n   * @returns Allowed color schemes.\n   */\n  getAllowedColorSchemes() {\n    if (this.colorSchemes.length > 0) {\n      return this.colorSchemes;\n    }\n    if (!CoreConstants.CONFIG.forceColorScheme) {\n      this.colorSchemes.push(\"light\" /* CoreColorScheme.LIGHT */);\n      this.colorSchemes.push(\"dark\" /* CoreColorScheme.DARK */);\n      if (this.canIUsePrefersColorScheme()) {\n        this.colorSchemes.push(\"system\" /* CoreColorScheme.SYSTEM */);\n      }\n    } else {\n      this.colorSchemes = [CoreConstants.CONFIG.forceColorScheme];\n    }\n    return this.colorSchemes;\n  }\n  /**\n   * Set body color scheme.\n   *\n   * @param colorScheme Name of the color scheme.\n   */\n  setColorScheme(colorScheme) {\n    this.currentColorScheme = colorScheme;\n    if (colorScheme == \"system\" /* CoreColorScheme.SYSTEM */ && this.prefersDark) {\n      this.toggleDarkMode(this.prefersDark.matches);\n    } else {\n      this.toggleDarkMode(colorScheme == \"dark\" /* CoreColorScheme.DARK */);\n    }\n  }\n  /**\n   * Check if device can detect color scheme system preference.\n   * https://caniuse.com/prefers-color-scheme\n   *\n   * @returns if the color scheme system preference is available.\n   */\n  canIUsePrefersColorScheme() {\n    // The following check will check browser support but system may differ from that.\n    return window.matchMedia('(prefers-color-scheme)').media !== 'not all';\n  }\n  /**\n   * Toggles dark mode based on enabled boolean.\n   *\n   * @param enable True to enable dark mode, false to disable.\n   */\n  toggleDarkMode(enable = false) {\n    const isDark = CoreDomUtils.hasModeClass('dark');\n    if (isDark !== enable) {\n      CoreDomUtils.toggleModeClass('dark', enable, {\n        includeLegacy: true\n      });\n      this.darkModeObservable.next(enable);\n      CoreApp.setSystemUIColors();\n    }\n  }\n  /**\n   * Returns dark mode change observable.\n   *\n   * @returns Dark mode change observable.\n   */\n  onDarkModeChange() {\n    return this.darkModeObservable;\n  }\n  /**\n   * Get if user enabled staging sites or not.\n   *\n   * @returns Staging sites.\n   */\n  hasEnabledStagingSites() {\n    return _asyncToGenerator(function* () {\n      const staging = yield CoreConfig.get('stagingSites', 0);\n      return !!staging;\n    })();\n  }\n  /**\n   * Persist staging sites enabled status and refresh app to apply changes.\n   *\n   * @param enabled Enabled or disabled staging sites.\n   */\n  setEnabledStagingSites(enabled) {\n    return _asyncToGenerator(function* () {\n      const reloadApp = !CoreSites.isLoggedIn();\n      if (reloadApp) {\n        yield CoreDomUtils.showConfirm('Are you sure that you want to enable/disable staging sites?');\n      }\n      yield CoreConfig.set('stagingSites', enabled ? 1 : 0);\n      if (!reloadApp) {\n        return;\n      }\n      yield CoreNavigator.navigate('/');\n      window.location.reload();\n    })();\n  }\n}\n_class = CoreSettingsHelperProvider;\n_class.ɵfac = function CoreSettingsHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreSettingsHelper = makeSingleton(CoreSettingsHelperProvider);","map":{"version":3,"names":["CoreApp","CoreNetwork","CoreCronDelegate","CoreEvents","CoreFilepool","CoreSites","CoreUtils","CoreConstants","CoreConfig","CoreFilter","CoreDomUtils","CoreCourse","makeSingleton","Translate","CoreError","Subject","CoreTextUtils","CoreNavigator","CoreSettingsHelperProvider","constructor","syncPromises","colorSchemes","currentColorScheme","darkModeObservable","initialize","_this","_asyncToGenerator","prefersDark","window","matchMedia","CONFIG","forceColorScheme","applySiteScheme","isColorSchemeDisabledInSite","setColorScheme","initColorScheme","on","LOGIN","SITE_UPDATED","LOGOUT","addEventListener","upgradeZoomLevel","initDomSettings","deleteSiteStorage","siteName","siteId","_this2","siteInfo","cacheEntries","spaceUsage","formatText","clean","singleLine","filter","title","instant","showDeleteConfirm","name","header","site","getSite","cleanSchemas","getSiteTableSchemasToClear","promises","map","getDb","deleteRecords","filepoolService","instance","push","deleteFolder","then","clearAllPackagesStatus","clearFilepool","clearAllCoursesStatus","catch","_ref","error","code","FileError","NOT_FOUND_ERR","showErrorModal","getSpaceUsage","_x","apply","arguments","trigger","SITE_STORAGE_DELETED","calcSiteClearRows","Promise","all","getSiteSpaceUsage","_this3","getTotalUsage","clearTables","totalEntries","_ref3","countRecords","_x2","getSiteSyncPromise","undefined","synchronizeSite","syncOnlyOnWifi","_this4","hasSyncHandlers","hasManualSyncHandlers","isLoggedOut","isOnline","isNetworkAccessLimited","syncPromise","ignoreErrors","invalidateAllFiles","invalidateWsCache","updateSiteInfo","getId","forceSyncExecution","addTitleToError","fontSize","get","set","SETTINGS_ZOOM_LEVEL","delete","_unused","getZoomLevel","defaultZoomLevel","getZoom","_this5","zoomLevel","zoomlevels","_this6","applyZoomLevel","_this7","scheme","SETTINGS_COLOR_SCHEME","isColorSchemeDisabled","_this8","getCurrentSite","isFeatureDisabled","zoom","document","documentElement","style","setProperty","getAllowedColorSchemes","length","canIUsePrefersColorScheme","colorScheme","toggleDarkMode","matches","media","enable","isDark","hasModeClass","toggleModeClass","includeLegacy","next","setSystemUIColors","onDarkModeChange","hasEnabledStagingSites","staging","setEnabledStagingSites","enabled","reloadApp","isLoggedIn","showConfirm","navigate","location","reload","factory","ɵfac","providedIn","CoreSettingsHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/settings/services/settings-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreApp } from '@services/app';\nimport { CoreNetwork } from '@services/network';\nimport { CoreCronDelegate } from '@services/cron';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreConfig } from '@services/config';\nimport { CoreFilter } from '@features/filter/services/filter';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreCourse } from '@features/course/services/course';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CoreError } from '@classes/errors/error';\nimport { Observable, Subject } from 'rxjs';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreNavigator } from '@services/navigator';\n\n/**\n * Object with space usage and cache entries that can be erased.\n */\nexport interface CoreSiteSpaceUsage {\n    cacheEntries: number; // Number of cached entries that can be cleared.\n    spaceUsage: number; // Space used in this site (total files + estimate of cache).\n}\n\n/**\n * Constants to define color schemes.\n */\nexport const enum CoreColorScheme {\n    SYSTEM = 'system',\n    LIGHT = 'light',\n    DARK = 'dark',\n}\n\n/**\n * Constants to define zoom levels.\n */\nexport const enum CoreZoomLevel {\n    NONE = 'none',\n    MEDIUM = 'medium',\n    HIGH = 'high',\n}\n\n/**\n * Settings helper service.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreSettingsHelperProvider {\n\n    protected syncPromises: { [s: string]: Promise<void> } = {};\n    protected prefersDark?: MediaQueryList;\n    protected colorSchemes: CoreColorScheme[] = [];\n    protected currentColorScheme = CoreColorScheme.LIGHT;\n    protected darkModeObservable = new Subject<boolean>();\n\n    async initialize(): Promise<void> {\n        this.prefersDark = window.matchMedia('(prefers-color-scheme: dark)');\n\n        if (!CoreConstants.CONFIG.forceColorScheme) {\n            // Update color scheme when a user enters or leaves a site, or when the site info is updated.\n            const applySiteScheme = (): void => {\n                if (this.isColorSchemeDisabledInSite()) {\n                    // Dark mode is disabled, force light mode.\n                    this.setColorScheme(CoreColorScheme.LIGHT);\n                } else {\n                    // Reset color scheme settings.\n                    this.initColorScheme();\n                }\n            };\n\n            CoreEvents.on(CoreEvents.LOGIN, () => applySiteScheme());\n\n            CoreEvents.on(CoreEvents.SITE_UPDATED, () => applySiteScheme());\n\n            CoreEvents.on(CoreEvents.LOGOUT, () => {\n                // Reset color scheme settings.\n                this.initColorScheme();\n            });\n        } else {\n            this.initColorScheme();\n        }\n\n        // Listen for changes to the prefers-color-scheme media query.\n        this.prefersDark.addEventListener && this.prefersDark.addEventListener('change', () => {\n            this.setColorScheme(this.currentColorScheme);\n        });\n\n        // Init zoom level.\n        await this.upgradeZoomLevel();\n\n        this.initDomSettings();\n    }\n\n    /**\n     * Deletes files of a site and the tables that can be cleared.\n     *\n     * @param siteName Site Name.\n     * @param siteId Site ID.\n     * @returns Resolved with detailed new info when done.\n     */\n    async deleteSiteStorage(siteName: string, siteId: string): Promise<CoreSiteSpaceUsage> {\n        const siteInfo: CoreSiteSpaceUsage = {\n            cacheEntries: 0,\n            spaceUsage: 0,\n        };\n\n        siteName = await CoreFilter.formatText(siteName, { clean: true, singleLine: true, filter: false }, [], siteId);\n\n        const title = Translate.instant('addon.storagemanager.confirmdeleteallsitedata');\n\n        await CoreDomUtils.showDeleteConfirm(\n            'addon.storagemanager.deleteallsitedatainfo',\n            { name: siteName },\n            { header:  title },\n        );\n\n        const site = await CoreSites.getSite(siteId);\n\n        // Clear cache tables.\n        const cleanSchemas = CoreSites.getSiteTableSchemasToClear(site);\n        const promises: Promise<number | void>[] = cleanSchemas.map((name) => site.getDb().deleteRecords(name));\n        const filepoolService = CoreFilepool.instance;\n\n        promises.push(site.deleteFolder().then(() => {\n            filepoolService.clearAllPackagesStatus(siteId);\n            filepoolService.clearFilepool(siteId);\n            CoreCourse.clearAllCoursesStatus(siteId);\n\n            siteInfo.spaceUsage = 0;\n\n            return;\n        }).catch(async (error) => {\n            if (error && error.code === FileError.NOT_FOUND_ERR) {\n                // Not found, set size 0.\n                filepoolService.clearAllPackagesStatus(siteId);\n                siteInfo.spaceUsage = 0;\n            } else {\n                // Error, recalculate the site usage.\n                CoreDomUtils.showErrorModal('addon.storagemanager.errordeletedownloadeddata', true);\n\n                siteInfo.spaceUsage = await site.getSpaceUsage();\n            }\n        }).then(async () => {\n            CoreEvents.trigger(CoreEvents.SITE_STORAGE_DELETED, {}, siteId);\n\n            siteInfo.cacheEntries = await this.calcSiteClearRows(site);\n\n            return;\n        }));\n\n        await Promise.all(promises);\n\n        return siteInfo;\n    }\n\n    /**\n     * Calculates each site's usage, and the total usage.\n     *\n     * @param siteId ID of the site. Current site if undefined.\n     * @returns Resolved with detailed info when done.\n     */\n    async getSiteSpaceUsage(siteId?: string): Promise<CoreSiteSpaceUsage> {\n        const site = await CoreSites.getSite(siteId);\n\n        // Get space usage.\n        const siteInfo: CoreSiteSpaceUsage = {\n            cacheEntries: 0,\n            spaceUsage: 0,\n        };\n\n        siteInfo.cacheEntries = await this.calcSiteClearRows(site);\n        siteInfo.spaceUsage = await site.getTotalUsage();\n\n        return siteInfo;\n    }\n\n    /**\n     * Calculate the number of rows to be deleted on a site.\n     *\n     * @param site Site object.\n     * @returns If there are rows to delete or not.\n     */\n    protected async calcSiteClearRows(site: CoreSite): Promise<number> {\n        const clearTables = CoreSites.getSiteTableSchemasToClear(site);\n\n        let totalEntries = 0;\n\n        await Promise.all(clearTables.map(async (name) =>\n            totalEntries = await site.getDb().countRecords(name) + totalEntries));\n\n        return totalEntries;\n    }\n\n    /**\n     * Get the synchronization promise of a site.\n     *\n     * @param siteId ID of the site.\n     * @returns Sync promise or null if site is not being syncrhonized.\n     */\n    getSiteSyncPromise(siteId: string): Promise<void> | void {\n        if (this.syncPromises[siteId] !== undefined) {\n            return this.syncPromises[siteId];\n        }\n    }\n\n    /**\n     * Synchronize a site.\n     *\n     * @param syncOnlyOnWifi True to sync only on wifi, false otherwise.\n     * @param siteId ID of the site to synchronize.\n     * @returns Promise resolved when synchronized, rejected if failure.\n     */\n    async synchronizeSite(syncOnlyOnWifi: boolean, siteId: string): Promise<void> {\n        if (this.syncPromises[siteId] !== undefined) {\n            // There's already a sync ongoing for this site, return the promise.\n            return this.syncPromises[siteId];\n        }\n\n        const site = await CoreSites.getSite(siteId);\n        const hasSyncHandlers = CoreCronDelegate.hasManualSyncHandlers();\n\n        // All these errors should not happen on manual sync because are prevented on UI.\n        if (site.isLoggedOut()) {\n            // Cannot sync logged out sites.\n            throw new CoreError(Translate.instant('core.settings.cannotsyncloggedout'));\n        } else if (hasSyncHandlers && !CoreNetwork.isOnline()) {\n            // We need connection to execute sync.\n            throw new CoreError(Translate.instant('core.settings.cannotsyncoffline'));\n        } else if (hasSyncHandlers && syncOnlyOnWifi && CoreNetwork.isNetworkAccessLimited()) {\n            throw new CoreError(Translate.instant('core.settings.cannotsyncwithoutwifi'));\n        }\n\n        const syncPromise = Promise.all([\n            // Invalidate all the site files so they are re-downloaded.\n            CoreUtils.ignoreErrors(CoreFilepool.invalidateAllFiles(siteId)),\n            // Invalidate and synchronize site data.\n            site.invalidateWsCache(),\n            CoreSites.updateSiteInfo(site.getId()),\n            CoreCronDelegate.forceSyncExecution(site.getId()),\n        // eslint-disable-next-line arrow-body-style\n        ]).then(() => {\n            return;\n        });\n\n        this.syncPromises[siteId] = syncPromise;\n\n        try {\n            await syncPromise;\n        } catch (error) {\n            throw CoreTextUtils.addTitleToError(error, Translate.instant('core.settings.sitesyncfailed'));\n        } finally {\n            delete this.syncPromises[siteId];\n        }\n    }\n\n    /**\n     * Upgrades from Font size to new zoom level.\n     */\n    async upgradeZoomLevel(): Promise<void> {\n        // Check old setting and update the new.\n        try {\n            const fontSize = await CoreConfig.get<number>('CoreSettingsFontSize');\n            if (fontSize === undefined) {\n                // Already upgraded.\n                return;\n            }\n\n            // Reset the value to solve edge cases.\n            CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, CoreZoomLevel.NONE);\n\n            if (fontSize < 100) {\n                if (fontSize > 90) {\n                    CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, CoreZoomLevel.HIGH);\n                } else if (fontSize > 70) {\n                    CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, CoreZoomLevel.MEDIUM);\n                }\n            }\n\n            CoreConfig.delete('CoreSettingsFontSize');\n        } catch {\n            // Already upgraded.\n            return;\n        }\n    }\n\n    /**\n     * Get saved Zoom Level setting.\n     *\n     * @returns The saved zoom Level option.\n     */\n    async getZoomLevel(): Promise<CoreZoomLevel> {\n        return CoreConfig.get(CoreConstants.SETTINGS_ZOOM_LEVEL, CoreConstants.CONFIG.defaultZoomLevel);\n    }\n\n    /**\n     * Get saved zoom level value.\n     *\n     * @returns The saved zoom level value in %.\n     */\n    async getZoom(): Promise<number> {\n        const zoomLevel = await this.getZoomLevel();\n\n        return CoreConstants.CONFIG.zoomlevels[zoomLevel];\n    }\n\n    /**\n     * Init Settings related to DOM.\n     */\n    async initDomSettings(): Promise<void> {\n        // Set the font size based on user preference.\n        const zoomLevel = await this.getZoomLevel();\n\n        this.applyZoomLevel(zoomLevel);\n\n        this.initColorScheme();\n    }\n\n    /**\n     * Init the color scheme.\n     */\n    async initColorScheme(): Promise<void> {\n        if (CoreConstants.CONFIG.forceColorScheme) {\n            this.setColorScheme(CoreConstants.CONFIG.forceColorScheme);\n        } else {\n            const scheme = await CoreConfig.get(CoreConstants.SETTINGS_COLOR_SCHEME, CoreColorScheme.LIGHT);\n            this.setColorScheme(scheme);\n        }\n    }\n\n    /**\n     * Check if color scheme is disabled in a site.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with whether color scheme is disabled.\n     */\n    async isColorSchemeDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.isColorSchemeDisabledInSite(site);\n    }\n\n    /**\n     * Check if color scheme is disabled in a site.\n     *\n     * @param site Site instance. If not defined, current site.\n     * @returns Whether color scheme is disabled.\n     */\n    isColorSchemeDisabledInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return site ? site.isFeatureDisabled('NoDelegate_DarkMode') : false;\n    }\n\n    /**\n     * Set document default font size.\n     *\n     * @param zoomLevel Zoom Level.\n     */\n    applyZoomLevel(zoomLevel: CoreZoomLevel): void {\n        const zoom = CoreConstants.CONFIG.zoomlevels[zoomLevel];\n\n        document.documentElement.style.setProperty('--zoom-level', zoom + '%');\n    }\n\n    /**\n     * Get system allowed color schemes.\n     *\n     * @returns Allowed color schemes.\n     */\n    getAllowedColorSchemes(): CoreColorScheme[] {\n        if (this.colorSchemes.length > 0) {\n            return this.colorSchemes;\n        }\n\n        if (!CoreConstants.CONFIG.forceColorScheme) {\n            this.colorSchemes.push(CoreColorScheme.LIGHT);\n            this.colorSchemes.push(CoreColorScheme.DARK);\n\n            if (this.canIUsePrefersColorScheme()) {\n                this.colorSchemes.push(CoreColorScheme.SYSTEM);\n            }\n        } else {\n            this.colorSchemes = [CoreConstants.CONFIG.forceColorScheme];\n        }\n\n        return this.colorSchemes;\n    }\n\n    /**\n     * Set body color scheme.\n     *\n     * @param colorScheme Name of the color scheme.\n     */\n    setColorScheme(colorScheme: CoreColorScheme): void {\n        this.currentColorScheme = colorScheme;\n        if (colorScheme == CoreColorScheme.SYSTEM && this.prefersDark) {\n            this.toggleDarkMode(this.prefersDark.matches);\n        } else {\n            this.toggleDarkMode(colorScheme == CoreColorScheme.DARK);\n        }\n    }\n\n    /**\n     * Check if device can detect color scheme system preference.\n     * https://caniuse.com/prefers-color-scheme\n     *\n     * @returns if the color scheme system preference is available.\n     */\n    canIUsePrefersColorScheme(): boolean {\n        // The following check will check browser support but system may differ from that.\n        return window.matchMedia('(prefers-color-scheme)').media !== 'not all';\n    }\n\n    /**\n     * Toggles dark mode based on enabled boolean.\n     *\n     * @param enable True to enable dark mode, false to disable.\n     */\n    protected toggleDarkMode(enable: boolean = false): void {\n        const isDark = CoreDomUtils.hasModeClass('dark');\n\n        if (isDark !== enable) {\n            CoreDomUtils.toggleModeClass('dark', enable, { includeLegacy: true });\n            this.darkModeObservable.next(enable);\n\n            CoreApp.setSystemUIColors();\n        }\n    }\n\n    /**\n     * Returns dark mode change observable.\n     *\n     * @returns Dark mode change observable.\n     */\n    onDarkModeChange(): Observable<boolean> {\n        return this.darkModeObservable;\n    }\n\n    /**\n     * Get if user enabled staging sites or not.\n     *\n     * @returns Staging sites.\n     */\n    async hasEnabledStagingSites(): Promise<boolean> {\n        const staging = await CoreConfig.get<number>('stagingSites', 0);\n\n        return !!staging;\n    }\n\n    /**\n     * Persist staging sites enabled status and refresh app to apply changes.\n     *\n     * @param enabled Enabled or disabled staging sites.\n     */\n    async setEnabledStagingSites(enabled: boolean): Promise<void> {\n        const reloadApp = !CoreSites.isLoggedIn();\n\n        if (reloadApp) {\n            await CoreDomUtils.showConfirm('Are you sure that you want to enable/disable staging sites?');\n        }\n\n        await CoreConfig.set('stagingSites', enabled ? 1 : 0);\n\n        if (!reloadApp) {\n            return;\n        }\n\n        await CoreNavigator.navigate('/');\n        window.location.reload();\n    }\n\n}\n\nexport const CoreSettingsHelper = makeSingleton(CoreSettingsHelperProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}