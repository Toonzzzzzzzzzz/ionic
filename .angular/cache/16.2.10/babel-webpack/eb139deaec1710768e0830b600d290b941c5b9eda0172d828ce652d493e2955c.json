{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreQueueRunner } from '@classes/queue-runner';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreH5PCore } from '../classes/core';\nimport { CoreH5PFramework } from '../classes/framework';\nimport { CoreH5PPlayer } from '../classes/player';\nimport { CoreH5PStorage } from '../classes/storage';\nimport { CoreH5PValidator } from '../classes/validator';\nimport { makeSingleton } from '@singletons';\nimport { CoreError } from '@classes/errors/error';\nimport { CorePath } from '@singletons/path';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to provide H5P functionalities.\n */\nexport class CoreH5PProvider {\n  constructor() {\n    this.ROOT_CACHE_KEY = 'CoreH5P:';\n    this.queueRunner = new CoreQueueRunner(1);\n    this.h5pFramework = new CoreH5PFramework();\n    this.h5pValidator = new CoreH5PValidator(this.h5pFramework);\n    this.h5pCore = new CoreH5PCore(this.h5pFramework);\n    this.h5pStorage = new CoreH5PStorage(this.h5pCore, this.h5pFramework);\n    this.h5pPlayer = new CoreH5PPlayer(this.h5pCore, this.h5pStorage);\n  }\n  /**\n   * Returns whether or not WS to get trusted H5P file is available.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with true if ws is available, false otherwise.\n   * @since 3.8\n   */\n  canGetTrustedH5PFile(siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this.canGetTrustedH5PFileInSite(site);\n    })();\n  }\n  /**\n   * Returns whether or not WS to get trusted H5P file is available in a certain site.\n   *\n   * @param site Site. If not defined, current site.\n   * @returns Promise resolved with true if ws is available, false otherwise.\n   * @since 3.8\n   */\n  canGetTrustedH5PFileInSite(site) {\n    var _site;\n    site = site || CoreSites.getCurrentSite();\n    return !!((_site = site) !== null && _site !== void 0 && _site.wsAvailable('core_h5p_get_trusted_h5p_file'));\n  }\n  /**\n   * Get a trusted H5P file.\n   *\n   * @param url The file URL.\n   * @param options Options.\n   * @param ignoreCache Whether to ignore cache.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the file data.\n   */\n  getTrustedH5PFile(url, options, ignoreCache, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      options = options || {};\n      const site = yield CoreSites.getSite(siteId);\n      const data = {\n        url: _this2.treatH5PUrl(url, site.getURL()),\n        frame: options.frame ? 1 : 0,\n        export: options.export ? 1 : 0,\n        embed: options.embed ? 1 : 0,\n        copyright: options.copyright ? 1 : 0\n      };\n      const preSets = {\n        cacheKey: _this2.getTrustedH5PFileCacheKey(url),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      };\n      if (ignoreCache) {\n        preSets.getFromCache = false;\n        preSets.emergencyCache = false;\n      }\n      const result = yield site.read('core_h5p_get_trusted_h5p_file', data, preSets);\n      if (result.warnings && result.warnings.length) {\n        throw result.warnings[0];\n      }\n      if (result.files && result.files.length) {\n        return result.files[0];\n      }\n      throw new CoreError('File not found');\n    })();\n  }\n  /**\n   * Get cache key for trusted H5P file WS calls.\n   *\n   * @param url The file URL.\n   * @returns Cache key.\n   */\n  getTrustedH5PFileCacheKey(url) {\n    return this.getTrustedH5PFilePrefixCacheKey() + url;\n  }\n  /**\n   * Get prefixed cache key for trusted H5P file WS calls.\n   *\n   * @returns Cache key.\n   */\n  getTrustedH5PFilePrefixCacheKey() {\n    return this.ROOT_CACHE_KEY + 'trustedH5PFile:';\n  }\n  /**\n   * Invalidates all trusted H5P file WS calls.\n   *\n   * @param siteId Site ID (empty for current site).\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateAllGetTrustedH5PFile(siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKeyStartingWith(_this3.getTrustedH5PFilePrefixCacheKey());\n    })();\n  }\n  /**\n   * Invalidates get trusted H5P file WS call.\n   *\n   * @param url The URL of the file.\n   * @param siteId Site ID (empty for current site).\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateGetTrustedH5PFile(url, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this4.getTrustedH5PFileCacheKey(url));\n    })();\n  }\n  /**\n   * Check whether H5P offline is disabled.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with boolean: whether is disabled.\n   */\n  isOfflineDisabled(siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return _this5.isOfflineDisabledInSite(site);\n    })();\n  }\n  /**\n   * Check whether H5P offline is disabled.\n   *\n   * @param site Site instance. If not defined, current site.\n   * @returns Whether is disabled.\n   */\n  isOfflineDisabledInSite(site) {\n    var _site2, _site3;\n    site = site || CoreSites.getCurrentSite();\n    return !!((_site2 = site) !== null && _site2 !== void 0 && _site2.isOfflineDisabled() || (_site3 = site) !== null && _site3 !== void 0 && _site3.isFeatureDisabled('NoDelegate_H5POffline'));\n  }\n  /**\n   * Treat an H5P url before sending it to WS.\n   *\n   * @param url H5P file URL.\n   * @param siteUrl Site URL.\n   * @returns Treated url.\n   */\n  treatH5PUrl(url, siteUrl) {\n    if (url.indexOf(CorePath.concatenatePaths(siteUrl, '/webservice/pluginfile.php')) === 0) {\n      url = url.replace('/webservice/pluginfile', '/pluginfile');\n    }\n    return CoreUrlUtils.removeUrlParams(url);\n  }\n}\n_class = CoreH5PProvider;\n_class.ɵfac = function CoreH5PProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreH5P = makeSingleton(CoreH5PProvider);","map":{"version":3,"names":["CoreSites","CoreUrlUtils","CoreQueueRunner","CoreSite","CoreH5PCore","CoreH5PFramework","CoreH5PPlayer","CoreH5PStorage","CoreH5PValidator","makeSingleton","CoreError","CorePath","CoreH5PProvider","constructor","ROOT_CACHE_KEY","queueRunner","h5pFramework","h5pValidator","h5pCore","h5pStorage","h5pPlayer","canGetTrustedH5PFile","siteId","_this","_asyncToGenerator","site","getSite","canGetTrustedH5PFileInSite","_site","getCurrentSite","wsAvailable","getTrustedH5PFile","url","options","ignoreCache","_this2","data","treatH5PUrl","getURL","frame","export","embed","copyright","preSets","cacheKey","getTrustedH5PFileCacheKey","updateFrequency","FREQUENCY_RARELY","getFromCache","emergencyCache","result","read","warnings","length","files","getTrustedH5PFilePrefixCacheKey","invalidateAllGetTrustedH5PFile","_this3","invalidateWsCacheForKeyStartingWith","invalidateGetTrustedH5PFile","_this4","invalidateWsCacheForKey","isOfflineDisabled","_this5","isOfflineDisabledInSite","_site2","_site3","isFeatureDisabled","siteUrl","indexOf","concatenatePaths","replace","removeUrlParams","factory","ɵfac","providedIn","CoreH5P"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/h5p/services/h5p.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreWSExternalWarning, CoreWSExternalFile, CoreWSFile } from '@services/ws';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreQueueRunner } from '@classes/queue-runner';\nimport { CoreSite } from '@classes/sites/site';\n\nimport { CoreH5PCore } from '../classes/core';\nimport { CoreH5PFramework } from '../classes/framework';\nimport { CoreH5PPlayer } from '../classes/player';\nimport { CoreH5PStorage } from '../classes/storage';\nimport { CoreH5PValidator } from '../classes/validator';\n\nimport { makeSingleton } from '@singletons';\nimport { CoreError } from '@classes/errors/error';\nimport { CorePath } from '@singletons/path';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\n\n/**\n * Service to provide H5P functionalities.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreH5PProvider {\n\n    h5pCore: CoreH5PCore;\n    h5pFramework: CoreH5PFramework;\n    h5pPlayer: CoreH5PPlayer;\n    h5pStorage: CoreH5PStorage;\n    h5pValidator: CoreH5PValidator;\n    queueRunner: CoreQueueRunner;\n\n    protected readonly ROOT_CACHE_KEY = 'CoreH5P:';\n\n    constructor() {\n        this.queueRunner = new CoreQueueRunner(1);\n\n        this.h5pFramework = new CoreH5PFramework();\n        this.h5pValidator = new CoreH5PValidator(this.h5pFramework);\n        this.h5pCore = new CoreH5PCore(this.h5pFramework);\n        this.h5pStorage = new CoreH5PStorage(this.h5pCore, this.h5pFramework);\n        this.h5pPlayer = new CoreH5PPlayer(this.h5pCore, this.h5pStorage);\n    }\n\n    /**\n     * Returns whether or not WS to get trusted H5P file is available.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with true if ws is available, false otherwise.\n     * @since 3.8\n     */\n    async canGetTrustedH5PFile(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.canGetTrustedH5PFileInSite(site);\n    }\n\n    /**\n     * Returns whether or not WS to get trusted H5P file is available in a certain site.\n     *\n     * @param site Site. If not defined, current site.\n     * @returns Promise resolved with true if ws is available, false otherwise.\n     * @since 3.8\n     */\n    canGetTrustedH5PFileInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!(site?.wsAvailable('core_h5p_get_trusted_h5p_file'));\n    }\n\n    /**\n     * Get a trusted H5P file.\n     *\n     * @param url The file URL.\n     * @param options Options.\n     * @param ignoreCache Whether to ignore cache.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the file data.\n     */\n    async getTrustedH5PFile(\n        url: string,\n        options?: CoreH5PGetTrustedFileOptions,\n        ignoreCache?: boolean,\n        siteId?: string,\n    ): Promise<CoreWSFile> {\n\n        options = options || {};\n\n        const site = await CoreSites.getSite(siteId);\n\n        const data: CoreH5pGetTrustedH5pFileWSParams = {\n            url: this.treatH5PUrl(url, site.getURL()),\n            frame: options.frame ? 1 : 0,\n            export: options.export ? 1 : 0,\n            embed: options.embed ? 1 : 0,\n            copyright: options.copyright ? 1 : 0,\n        };\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getTrustedH5PFileCacheKey(url),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n        };\n\n        if (ignoreCache) {\n            preSets.getFromCache = false;\n            preSets.emergencyCache = false;\n        }\n\n        const result: CoreH5PGetTrustedH5PFileResult = await site.read('core_h5p_get_trusted_h5p_file', data, preSets);\n\n        if (result.warnings && result.warnings.length) {\n            throw result.warnings[0];\n        }\n\n        if (result.files && result.files.length) {\n            return result.files[0];\n        }\n\n        throw new CoreError('File not found');\n    }\n\n    /**\n     * Get cache key for trusted H5P file WS calls.\n     *\n     * @param url The file URL.\n     * @returns Cache key.\n     */\n    protected getTrustedH5PFileCacheKey(url: string): string {\n        return this.getTrustedH5PFilePrefixCacheKey() + url;\n    }\n\n    /**\n     * Get prefixed cache key for trusted H5P file WS calls.\n     *\n     * @returns Cache key.\n     */\n    protected getTrustedH5PFilePrefixCacheKey(): string {\n        return this.ROOT_CACHE_KEY + 'trustedH5PFile:';\n    }\n\n    /**\n     * Invalidates all trusted H5P file WS calls.\n     *\n     * @param siteId Site ID (empty for current site).\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateAllGetTrustedH5PFile(siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKeyStartingWith(this.getTrustedH5PFilePrefixCacheKey());\n    }\n\n    /**\n     * Invalidates get trusted H5P file WS call.\n     *\n     * @param url The URL of the file.\n     * @param siteId Site ID (empty for current site).\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateGetTrustedH5PFile(url: string, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getTrustedH5PFileCacheKey(url));\n    }\n\n    /**\n     * Check whether H5P offline is disabled.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with boolean: whether is disabled.\n     */\n    async isOfflineDisabled(siteId?: string): Promise<boolean> {\n        const site = await CoreSites.getSite(siteId);\n\n        return this.isOfflineDisabledInSite(site);\n    }\n\n    /**\n     * Check whether H5P offline is disabled.\n     *\n     * @param site Site instance. If not defined, current site.\n     * @returns Whether is disabled.\n     */\n    isOfflineDisabledInSite(site?: CoreSite): boolean {\n        site = site || CoreSites.getCurrentSite();\n\n        return !!(site?.isOfflineDisabled() || site?.isFeatureDisabled('NoDelegate_H5POffline'));\n    }\n\n    /**\n     * Treat an H5P url before sending it to WS.\n     *\n     * @param url H5P file URL.\n     * @param siteUrl Site URL.\n     * @returns Treated url.\n     */\n    treatH5PUrl(url: string, siteUrl: string): string {\n        if (url.indexOf(CorePath.concatenatePaths(siteUrl, '/webservice/pluginfile.php')) === 0) {\n            url = url.replace('/webservice/pluginfile', '/pluginfile');\n        }\n\n        return CoreUrlUtils.removeUrlParams(url);\n    }\n\n}\n\nexport const CoreH5P = makeSingleton(CoreH5PProvider);\n\n/**\n * Params of core_h5p_get_trusted_h5p_file WS.\n */\nexport type CoreH5pGetTrustedH5pFileWSParams = {\n    url: string; // H5P file url.\n    frame?: number; // The frame allow to show the bar options below the content.\n    export?: number; // The export allow to download the package.\n    embed?: number; // The embed allow to copy the code to your site.\n    copyright?: number; // The copyright option.\n};\n\n/**\n * Options for core_h5p_get_trusted_h5p_file.\n */\nexport type CoreH5PGetTrustedFileOptions = {\n    frame?: boolean; // Whether to show the bar options below the content.\n    export?: boolean; // Whether to allow to download the package.\n    embed?: boolean; // Whether to allow to copy the code to your site.\n    copyright?: boolean; // The copyright option.\n};\n\n/**\n * Result of core_h5p_get_trusted_h5p_file.\n */\nexport type CoreH5PGetTrustedH5PFileResult = {\n    files: CoreWSExternalFile[]; // Files.\n    warnings: CoreWSExternalWarning[]; // List of warnings.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}