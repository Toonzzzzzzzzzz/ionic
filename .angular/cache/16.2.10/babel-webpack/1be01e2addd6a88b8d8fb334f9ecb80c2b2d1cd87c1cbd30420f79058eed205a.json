{"ast":null,"code":"var _class;\nimport { makeSingleton, Translate } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides helper functions for surveys.\n */\nexport class AddonModSurveyHelperProvider {\n  /**\n   * Turns a string with values separated by commas into an array.\n   *\n   * @param value Value to convert.\n   * @returns Array.\n   */\n  commaStringToArray(value) {\n    if (typeof value == 'string') {\n      if (value.length > 0) {\n        return value.split(',');\n      }\n      return [];\n    }\n    return value;\n  }\n  /**\n   * Gets the parent questions and puts them in an object: ID -> question.\n   *\n   * @param questions Questions.\n   * @returns Object with parent questions.\n   */\n  getParentQuestions(questions) {\n    const parents = {};\n    questions.forEach(question => {\n      if (question.parent === 0) {\n        parents[question.id] = question;\n      }\n    });\n    return parents;\n  }\n  /**\n   * Format a questions list, turning \"multi\" and \"options\" strings into arrays and adding the properties\n   * 'num' and 'name'.\n   *\n   * @param questions Questions.\n   * @returns Promise resolved with the formatted questions.\n   */\n  formatQuestions(questions) {\n    const strIPreferThat = Translate.instant('addon.mod_survey.ipreferthat');\n    const strIFoundThat = Translate.instant('addon.mod_survey.ifoundthat');\n    const formatted = [];\n    const parents = this.getParentQuestions(questions);\n    let num = 1;\n    questions.forEach(question => {\n      // Copy the object to prevent modifying the original.\n      const q1 = Object.assign({}, question);\n      const parent = parents[q1.parent];\n      // Turn multi and options into arrays.\n      q1.multiArray = this.commaStringToArray(q1.multi);\n      q1.optionsArray = this.commaStringToArray(q1.options);\n      if (parent) {\n        // It's a sub-question.\n        q1.required = true;\n        if (parent.type === 1 || parent.type === 2) {\n          // One answer question. Set its name and add it to the returned array.\n          q1.name = 'q' + (parent.type == 2 ? 'P' : '') + q1.id;\n          q1.num = num++;\n        } else {\n          // Two answers per question (COLLES P&A). We'll add two questions.\n          const q2 = Object.assign({}, q1);\n          q1.text = strIPreferThat + ' ' + q1.text;\n          q1.name = 'qP' + q1.id;\n          q1.num = num++;\n          formatted.push(q1);\n          q2.text = strIFoundThat + ' ' + q2.text;\n          q2.name = 'q' + q1.id;\n          q2.num = num++;\n          formatted.push(q2);\n          return;\n        }\n      } else if (q1.multiArray && q1.multiArray.length === 0) {\n        // It's a single question.\n        q1.name = 'q' + q1.id;\n        q1.num = num++;\n      }\n      formatted.push(q1);\n    });\n    return formatted;\n  }\n}\n_class = AddonModSurveyHelperProvider;\n_class.ɵfac = function AddonModSurveyHelperProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModSurveyHelper = makeSingleton(AddonModSurveyHelperProvider);","map":{"version":3,"names":["makeSingleton","Translate","AddonModSurveyHelperProvider","commaStringToArray","value","length","split","getParentQuestions","questions","parents","forEach","question","parent","id","formatQuestions","strIPreferThat","instant","strIFoundThat","formatted","num","q1","Object","assign","multiArray","multi","optionsArray","options","required","type","name","q2","text","push","factory","ɵfac","providedIn","AddonModSurveyHelper"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/survey/services/survey-helper.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModSurveyQuestion } from './survey';\n\n/**\n * Service that provides helper functions for surveys.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonModSurveyHelperProvider {\n\n    /**\n     * Turns a string with values separated by commas into an array.\n     *\n     * @param value Value to convert.\n     * @returns Array.\n     */\n    protected commaStringToArray(value: string | string[]): string[] {\n        if (typeof value == 'string') {\n            if (value.length > 0) {\n                return value.split(',');\n            }\n\n            return [];\n        }\n\n        return value;\n    }\n\n    /**\n     * Gets the parent questions and puts them in an object: ID -> question.\n     *\n     * @param questions Questions.\n     * @returns Object with parent questions.\n     */\n    protected getParentQuestions(questions: AddonModSurveyQuestion[]): {[id: number]: AddonModSurveyQuestion} {\n        const parents: { [id: number]: AddonModSurveyQuestion } = {};\n\n        questions.forEach((question) => {\n            if (question.parent === 0) {\n                parents[question.id] = question;\n            }\n        });\n\n        return parents;\n    }\n\n    /**\n     * Format a questions list, turning \"multi\" and \"options\" strings into arrays and adding the properties\n     * 'num' and 'name'.\n     *\n     * @param questions Questions.\n     * @returns Promise resolved with the formatted questions.\n     */\n    formatQuestions(questions: AddonModSurveyQuestion[]): AddonModSurveyQuestionFormatted[] {\n        const strIPreferThat = Translate.instant('addon.mod_survey.ipreferthat');\n        const strIFoundThat = Translate.instant('addon.mod_survey.ifoundthat');\n\n        const formatted: AddonModSurveyQuestionFormatted[] = [];\n        const parents = this.getParentQuestions(questions);\n\n        let num = 1;\n\n        questions.forEach((question) => {\n            // Copy the object to prevent modifying the original.\n            const q1: AddonModSurveyQuestionFormatted = Object.assign({}, question);\n            const parent = parents[q1.parent];\n\n            // Turn multi and options into arrays.\n            q1.multiArray = this.commaStringToArray(q1.multi);\n            q1.optionsArray = this.commaStringToArray(q1.options);\n\n            if (parent) {\n                // It's a sub-question.\n                q1.required = true;\n\n                if (parent.type === 1 || parent.type === 2) {\n                    // One answer question. Set its name and add it to the returned array.\n                    q1.name = 'q' + (parent.type == 2 ? 'P' : '') + q1.id;\n                    q1.num = num++;\n                } else {\n                    // Two answers per question (COLLES P&A). We'll add two questions.\n                    const q2 = Object.assign({}, q1);\n\n                    q1.text = strIPreferThat + ' ' + q1.text;\n                    q1.name = 'qP' + q1.id;\n                    q1.num = num++;\n                    formatted.push(q1);\n\n                    q2.text = strIFoundThat + ' ' + q2.text;\n                    q2.name = 'q' + q1.id;\n                    q2.num = num++;\n                    formatted.push(q2);\n\n                    return;\n                }\n            } else if (q1.multiArray && q1.multiArray.length === 0) {\n                // It's a single question.\n                q1.name = 'q' + q1.id;\n                q1.num = num++;\n            }\n\n            formatted.push(q1);\n        });\n\n        return formatted;\n    }\n\n}\nexport const AddonModSurveyHelper = makeSingleton(AddonModSurveyHelperProvider);\n\n/**\n * Survey question with some calculated data.\n */\nexport type AddonModSurveyQuestionFormatted = AddonModSurveyQuestion & {\n    required?: boolean; // Calculated in the app. Whether the question is required.\n    name?: string; // Calculated in the app. The name of the question.\n    num?: number; // Calculated in the app. Number of the question.\n    multiArray?: string[]; // Subquestions ids, converted to an array.\n    optionsArray?: string[]; // Question options, converted to an array.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}