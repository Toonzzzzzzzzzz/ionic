{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreContentLinksHandlerBase } from './base-handler';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\n/**\n * Handler to handle URLs pointing to the grade of a module.\n */\nexport class CoreContentLinksModuleGradeHandler extends CoreContentLinksHandlerBase {\n  /**\n   * Construct the handler.\n   *\n   * @param addon Name of the addon as it's registered in course delegate. It'll be used to check if it's disabled.\n   * @param modName Name of the module (assign, book, ...).\n   */\n  constructor(addon, modName) {\n    super();\n    this.addon = addon;\n    this.modName = modName;\n    /**\n     * Whether the module can be reviewed in the app. If true, the handler needs to implement the goToReview function.\n     */\n    this.canReview = false;\n    /**\n     * If this boolean is set to true, the app will retrieve all modules with this modName with a single WS call.\n     * This reduces the number of WS calls, but it isn't recommended for modules that can return a lot of contents.\n     */\n    this.useModNameToGetModule = false;\n    // Match the grade.php URL with an id param.\n    this.pattern = new RegExp('/mod/' + modName + '/grade.php.*([&?]id=\\\\d+)');\n    this.featureName = 'CoreCourseModuleDelegate_' + addon;\n  }\n  /**\n   * Get the list of actions for a link (url).\n   *\n   * @param siteIds Unused. List of sites the URL belongs to.\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @param courseId Course ID related to the URL. Optional but recommended.\n   * @returns List of (or promise resolved with list of) actions.\n   */\n  getActions(siteIds, url, params, courseId) {\n    var _this = this;\n    const courseIdentifier = Number(courseId || params.courseid || params.cid);\n    return [{\n      action: function () {\n        var _ref = _asyncToGenerator(function* (siteId) {\n          // Check if userid is the site's current user.\n          const modal = yield CoreDomUtils.showModalLoading();\n          const site = yield CoreSites.getSite(siteId);\n          if (!params.userid || Number(params.userid) == site.getUserId()) {\n            // No user specified or current user. Navigate to module.\n            CoreCourseHelper.navigateToModule(Number(params.id), {\n              courseId: courseIdentifier,\n              modName: _this.useModNameToGetModule ? _this.modName : undefined,\n              siteId\n            });\n          } else if (_this.canReview) {\n            // Use the goToReview function.\n            _this.goToReview(url, params, courseIdentifier, siteId);\n          } else {\n            // Not current user and cannot review it in the app, open it in browser.\n            site.openInBrowserWithAutoLogin(url);\n          }\n          modal.dismiss();\n        });\n        return function action(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    }];\n  }\n  /**\n   * Go to the page to review.\n   *\n   * @param url The URL to treat.\n   * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n   * @param courseId Course ID related to the URL.\n   * @param siteId Site to use.\n   * @returns Promise resolved when done.\n   */\n  goToReview(url,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  params,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  courseId,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  siteId) {\n    return _asyncToGenerator(function* () {\n      // This function should be overridden.\n      return;\n    })();\n  }\n}","map":{"version":3,"names":["CoreContentLinksHandlerBase","CoreSites","CoreDomUtils","CoreCourseHelper","CoreContentLinksModuleGradeHandler","constructor","addon","modName","canReview","useModNameToGetModule","pattern","RegExp","featureName","getActions","siteIds","url","params","courseId","_this","courseIdentifier","Number","courseid","cid","action","_ref","_asyncToGenerator","siteId","modal","showModalLoading","site","getSite","userid","getUserId","navigateToModule","id","undefined","goToReview","openInBrowserWithAutoLogin","dismiss","_x","apply","arguments"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/contentlinks/classes/module-grade-handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreContentLinksAction } from '../services/contentlinks-delegate';\nimport { CoreContentLinksHandlerBase } from './base-handler';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\n\n/**\n * Handler to handle URLs pointing to the grade of a module.\n */\nexport class CoreContentLinksModuleGradeHandler extends CoreContentLinksHandlerBase {\n\n    /**\n     * Whether the module can be reviewed in the app. If true, the handler needs to implement the goToReview function.\n     */\n    canReview = false;\n\n    /**\n     * If this boolean is set to true, the app will retrieve all modules with this modName with a single WS call.\n     * This reduces the number of WS calls, but it isn't recommended for modules that can return a lot of contents.\n     */\n    protected useModNameToGetModule = false;\n\n    /**\n     * Construct the handler.\n     *\n     * @param addon Name of the addon as it's registered in course delegate. It'll be used to check if it's disabled.\n     * @param modName Name of the module (assign, book, ...).\n     */\n    constructor(\n        public addon: string,\n        public modName: string,\n    ) {\n        super();\n\n        // Match the grade.php URL with an id param.\n        this.pattern = new RegExp('/mod/' + modName + '/grade.php.*([&?]id=\\\\d+)');\n        this.featureName = 'CoreCourseModuleDelegate_' + addon;\n    }\n\n    /**\n     * Get the list of actions for a link (url).\n     *\n     * @param siteIds Unused. List of sites the URL belongs to.\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @param courseId Course ID related to the URL. Optional but recommended.\n     * @returns List of (or promise resolved with list of) actions.\n     */\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Record<string, string>,\n        courseId?: number,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n\n        const courseIdentifier = Number(courseId || params.courseid || params.cid);\n\n        return [{\n            action: async (siteId): Promise<void> => {\n                // Check if userid is the site's current user.\n                const modal = await CoreDomUtils.showModalLoading();\n                const site = await CoreSites.getSite(siteId);\n                if (!params.userid || Number(params.userid) == site.getUserId()) {\n                    // No user specified or current user. Navigate to module.\n                    CoreCourseHelper.navigateToModule(\n                        Number(params.id),\n                        {\n                            courseId: courseIdentifier,\n                            modName: this.useModNameToGetModule ? this.modName : undefined,\n                            siteId,\n                        },\n                    );\n                } else if (this.canReview) {\n                    // Use the goToReview function.\n                    this.goToReview(url, params, courseIdentifier, siteId);\n                } else {\n                    // Not current user and cannot review it in the app, open it in browser.\n                    site.openInBrowserWithAutoLogin(url);\n                }\n\n                modal.dismiss();\n            },\n        }];\n    }\n\n    /**\n     * Go to the page to review.\n     *\n     * @param url The URL to treat.\n     * @param params The params of the URL. E.g. 'mysite.com?id=1' -> {id: 1}\n     * @param courseId Course ID related to the URL.\n     * @param siteId Site to use.\n     * @returns Promise resolved when done.\n     */\n    protected async goToReview(\n        url: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n        params: Record<string, string>, // eslint-disable-line @typescript-eslint/no-unused-vars\n        courseId: number, // eslint-disable-line @typescript-eslint/no-unused-vars\n        siteId: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        // This function should be overridden.\n        return;\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,2BAA2B,QAAQ,gBAAgB;AAC5D,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,gBAAgB,QAAQ,yCAAyC;AAE1E;;;AAGA,OAAM,MAAOC,kCAAmC,SAAQJ,2BAA2B;EAa/E;;;;;;EAMAK,YACWC,KAAa,EACbC,OAAe;IAEtB,KAAK,EAAE;IAHA,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAC,OAAO,GAAPA,OAAO;IAnBlB;;;IAGA,KAAAC,SAAS,GAAG,KAAK;IAEjB;;;;IAIU,KAAAC,qBAAqB,GAAG,KAAK;IAcnC;IACA,IAAI,CAACC,OAAO,GAAG,IAAIC,MAAM,CAAC,OAAO,GAAGJ,OAAO,GAAG,2BAA2B,CAAC;IAC1E,IAAI,CAACK,WAAW,GAAG,2BAA2B,GAAGN,KAAK;EAC1D;EAEA;;;;;;;;;EASAO,UAAUA,CACNC,OAAiB,EACjBC,GAAW,EACXC,MAA8B,EAC9BC,QAAiB;IAAA,IAAAC,KAAA;IAGjB,MAAMC,gBAAgB,GAAGC,MAAM,CAACH,QAAQ,IAAID,MAAM,CAACK,QAAQ,IAAIL,MAAM,CAACM,GAAG,CAAC;IAE1E,OAAO,CAAC;MACJC,MAAM;QAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOC,MAAM,EAAmB;UACpC;UACA,MAAMC,KAAK,SAASzB,YAAY,CAAC0B,gBAAgB,EAAE;UACnD,MAAMC,IAAI,SAAS5B,SAAS,CAAC6B,OAAO,CAACJ,MAAM,CAAC;UAC5C,IAAI,CAACV,MAAM,CAACe,MAAM,IAAIX,MAAM,CAACJ,MAAM,CAACe,MAAM,CAAC,IAAIF,IAAI,CAACG,SAAS,EAAE,EAAE;YAC7D;YACA7B,gBAAgB,CAAC8B,gBAAgB,CAC7Bb,MAAM,CAACJ,MAAM,CAACkB,EAAE,CAAC,EACjB;cACIjB,QAAQ,EAAEE,gBAAgB;cAC1BZ,OAAO,EAAEW,KAAI,CAACT,qBAAqB,GAAGS,KAAI,CAACX,OAAO,GAAG4B,SAAS;cAC9DT;aACH,CACJ;WACJ,MAAM,IAAIR,KAAI,CAACV,SAAS,EAAE;YACvB;YACAU,KAAI,CAACkB,UAAU,CAACrB,GAAG,EAAEC,MAAM,EAAEG,gBAAgB,EAAEO,MAAM,CAAC;WACzD,MAAM;YACH;YACAG,IAAI,CAACQ,0BAA0B,CAACtB,GAAG,CAAC;;UAGxCY,KAAK,CAACW,OAAO,EAAE;QACnB,CAAC;QAAA,gBAAAf,OAAAgB,EAAA;UAAA,OAAAf,IAAA,CAAAgB,KAAA,OAAAC,SAAA;QAAA;MAAA;KACJ,CAAC;EACN;EAEA;;;;;;;;;EASgBL,UAAUA,CACtBrB,GAAW;EAAE;EACbC,MAA8B;EAAE;EAChCC,QAAgB;EAAE;EAClBS,MAAc;IAAA,OAAAD,iBAAA;MAEd;MACA;IAAO;EACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}