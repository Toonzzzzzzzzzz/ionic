{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { FileOpener } from '@awesome-cordova-plugins/file-opener/ngx';\nimport { CoreFile } from '@services/file';\nimport * as i0 from \"@angular/core\";\n/**\n * Emulates the FileOpener plugin in browser.\n */\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any */\nexport class FileOpenerMock extends FileOpener {\n  /**\n   * Check if an app is already installed.\n   *\n   * @param packageId Package ID.\n   * @returns Promise resolved when done.\n   */\n  appIsInstalled(packageId) {\n    return Promise.reject('appIsInstalled not supported in browser.');\n  }\n  /**\n   * Open an file.\n   *\n   * @param filePath File path.\n   * @param fileMIMEType File MIME type.\n   * @returns Promise resolved when done.\n   */\n  open(filePath, fileMIMEType) {\n    return _asyncToGenerator(function* () {\n      if (!filePath.match(/^filesystem:/)) {\n        // Just open the page.\n        window.open(filePath, '_blank');\n        return;\n      }\n      try {\n        // Opening local files in browser just display a blank page. Convert the path to an object URL.\n        const fileEntry = yield CoreFile.getExternalFile(filePath);\n        const file = yield CoreFile.getFileObjectFromFileEntry(fileEntry);\n        window.open(window.URL.createObjectURL(file), '_blank');\n      } catch (error) {\n        // File not found. Just open the URL even if it ends up being a blank page.\n        window.open(filePath, '_blank');\n      }\n    })();\n  }\n  /**\n   * Uninstalls a package.\n   *\n   * @param packageId Package ID.\n   * @returns Promise resolved when done.\n   */\n  uninstall(packageId) {\n    return Promise.reject('uninstall not supported in browser.');\n  }\n}\n_class = FileOpenerMock;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵFileOpenerMock_BaseFactory;\n  return function FileOpenerMock_Factory(t) {\n    return (ɵFileOpenerMock_BaseFactory || (ɵFileOpenerMock_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["FileOpener","CoreFile","FileOpenerMock","appIsInstalled","packageId","Promise","reject","open","filePath","fileMIMEType","_asyncToGenerator","match","window","fileEntry","getExternalFile","file","getFileObjectFromFileEntry","URL","createObjectURL","error","uninstall","t","factory","ɵfac"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/emulator/services/file-opener.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { FileOpener } from '@awesome-cordova-plugins/file-opener/ngx';\n\nimport { CoreFile } from '@services/file';\n\n/**\n * Emulates the FileOpener plugin in browser.\n */\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any */\n@Injectable()\nexport class FileOpenerMock extends FileOpener {\n\n    /**\n     * Check if an app is already installed.\n     *\n     * @param packageId Package ID.\n     * @returns Promise resolved when done.\n     */\n    appIsInstalled(packageId: string): Promise<any> {\n        return Promise.reject('appIsInstalled not supported in browser.');\n    }\n\n    /**\n     * Open an file.\n     *\n     * @param filePath File path.\n     * @param fileMIMEType File MIME type.\n     * @returns Promise resolved when done.\n     */\n    async open(filePath: string, fileMIMEType: string): Promise<any> {\n        if (!filePath.match(/^filesystem:/)) {\n            // Just open the page.\n            window.open(filePath, '_blank');\n\n            return;\n        }\n\n        try {\n            // Opening local files in browser just display a blank page. Convert the path to an object URL.\n            const fileEntry = await CoreFile.getExternalFile(filePath);\n\n            const file = await CoreFile.getFileObjectFromFileEntry(fileEntry);\n\n            window.open(window.URL.createObjectURL(file), '_blank');\n        } catch (error) {\n            // File not found. Just open the URL even if it ends up being a blank page.\n            window.open(filePath, '_blank');\n        }\n    }\n\n    /**\n     * Uninstalls a package.\n     *\n     * @param packageId Package ID.\n     * @returns Promise resolved when done.\n     */\n    uninstall(packageId: string): Promise<any> {\n        return Promise.reject('uninstall not supported in browser.');\n    }\n\n}\n"],"mappings":";;AAeA,SAASA,UAAU,QAAQ,0CAA0C;AAErE,SAASC,QAAQ,QAAQ,gBAAgB;;AAEzC;;;AAGA;AAEA,OAAM,MAAOC,cAAe,SAAQF,UAAU;EAE1C;;;;;;EAMAG,cAAcA,CAACC,SAAiB;IAC5B,OAAOC,OAAO,CAACC,MAAM,CAAC,0CAA0C,CAAC;EACrE;EAEA;;;;;;;EAOMC,IAAIA,CAACC,QAAgB,EAAEC,YAAoB;IAAA,OAAAC,iBAAA;MAC7C,IAAI,CAACF,QAAQ,CAACG,KAAK,CAAC,cAAc,CAAC,EAAE;QACjC;QACAC,MAAM,CAACL,IAAI,CAACC,QAAQ,EAAE,QAAQ,CAAC;QAE/B;;MAGJ,IAAI;QACA;QACA,MAAMK,SAAS,SAASZ,QAAQ,CAACa,eAAe,CAACN,QAAQ,CAAC;QAE1D,MAAMO,IAAI,SAASd,QAAQ,CAACe,0BAA0B,CAACH,SAAS,CAAC;QAEjED,MAAM,CAACL,IAAI,CAACK,MAAM,CAACK,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC,EAAE,QAAQ,CAAC;OAC1D,CAAC,OAAOI,KAAK,EAAE;QACZ;QACAP,MAAM,CAACL,IAAI,CAACC,QAAQ,EAAE,QAAQ,CAAC;;IAClC;EACL;EAEA;;;;;;EAMAY,SAASA,CAAChB,SAAiB;IACvB,OAAOC,OAAO,CAACC,MAAM,CAAC,qCAAqC,CAAC;EAChE;;SAhDSJ,cAAe;;;;mGAAfA,MAAc,IAAAmB,CAAA,IAAdnB,MAAc;EAAA;AAAA;;SAAdA,MAAc;EAAAoB,OAAA,EAAdpB,MAAc,CAAAqB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}