{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSyncBaseProvider } from '@classes/base-sync';\nimport { makeSingleton } from '@singletons';\nimport { CoreUserOffline } from './user-offline';\nimport { CoreUser } from './user';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to sync user preferences.\n */\nexport class CoreUserSyncProvider extends CoreSyncBaseProvider {\n  constructor() {\n    super('CoreUserSync');\n  }\n  /**\n   * Try to synchronize user preferences in a certain site or in all sites.\n   *\n   * @param siteId Site ID to sync. If not defined, sync all sites.\n   * @returns Promise resolved with warnings if sync is successful, rejected if sync fails.\n   */\n  syncPreferences(siteId) {\n    return this.syncOnSites('all user preferences', siteId => this.syncSitePreferences(siteId), siteId);\n  }\n  /**\n   * Sync user preferences of a site.\n   *\n   * @param siteId Site ID to sync.\n   * @returns Promise resolved with warnings if sync is successful, rejected if sync fails.\n   */\n  syncSitePreferences(siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const syncId = 'preferences';\n      const currentSyncPromise = _this.getOngoingSync(syncId, siteId);\n      if (currentSyncPromise) {\n        // There's already a sync ongoing, return the promise.\n        return currentSyncPromise;\n      }\n      _this.logger.debug('Try to sync user preferences');\n      const syncPromise = _this.performSyncSitePreferences(siteId);\n      return _this.addOngoingSync(syncId, syncPromise, siteId);\n    })();\n  }\n  /**\n   * Sync user preferences of a site.\n   *\n   * @param siteId Site ID to sync.\n   * @returns Promise resolved if sync is successful, rejected if sync fails.\n   */\n  performSyncSitePreferences(siteId) {\n    return _asyncToGenerator(function* () {\n      const warnings = [];\n      const preferences = yield CoreUserOffline.getChangedPreferences(siteId);\n      yield CoreUtils.allPromises(preferences.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (preference) {\n          const onlineValue = yield CoreUser.getUserPreferenceOnline(preference.name, siteId);\n          if (onlineValue !== null && preference.onlinevalue != onlineValue) {\n            // Preference was changed on web while the app was offline, do not sync.\n            return CoreUserOffline.setPreference(preference.name, onlineValue, onlineValue, siteId);\n          }\n          try {\n            yield CoreUser.setUserPreference(preference.name, preference.value, siteId);\n          } catch (error) {\n            if (CoreUtils.isWebServiceError(error)) {\n              const warning = CoreTextUtils.getErrorMessageFromError(error);\n              if (warning) {\n                warnings.push(warning);\n              }\n            } else {\n              // Couldn't connect to server, reject.\n              throw error;\n            }\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      // All done, return the warnings.\n      return warnings;\n    })();\n  }\n}\n_class = CoreUserSyncProvider;\n_class.AUTO_SYNCED = 'core_user_autom_synced';\n_class.ɵfac = function CoreUserSyncProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreUserSync = makeSingleton(CoreUserSyncProvider);","map":{"version":3,"names":["CoreSites","CoreTextUtils","CoreUtils","CoreSyncBaseProvider","makeSingleton","CoreUserOffline","CoreUser","CoreUserSyncProvider","constructor","syncPreferences","siteId","syncOnSites","syncSitePreferences","_this","_asyncToGenerator","getCurrentSiteId","syncId","currentSyncPromise","getOngoingSync","logger","debug","syncPromise","performSyncSitePreferences","addOngoingSync","warnings","preferences","getChangedPreferences","allPromises","map","_ref","preference","onlineValue","getUserPreferenceOnline","name","onlinevalue","setPreference","setUserPreference","value","error","isWebServiceError","warning","getErrorMessageFromError","push","_x","apply","arguments","_class","AUTO_SYNCED","factory","ɵfac","providedIn","CoreUserSync"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/user/services/user-sync.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSyncBaseProvider } from '@classes/base-sync';\nimport { makeSingleton } from '@singletons';\nimport { CoreUserOffline } from './user-offline';\nimport { CoreUser } from './user';\n\n/**\n * Service to sync user preferences.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreUserSyncProvider extends CoreSyncBaseProvider<string[]> {\n\n    static readonly AUTO_SYNCED = 'core_user_autom_synced';\n\n    constructor() {\n        super('CoreUserSync');\n    }\n\n    /**\n     * Try to synchronize user preferences in a certain site or in all sites.\n     *\n     * @param siteId Site ID to sync. If not defined, sync all sites.\n     * @returns Promise resolved with warnings if sync is successful, rejected if sync fails.\n     */\n    syncPreferences(siteId?: string): Promise<void> {\n        return this.syncOnSites('all user preferences', (siteId) => this.syncSitePreferences(siteId), siteId);\n    }\n\n    /**\n     * Sync user preferences of a site.\n     *\n     * @param siteId Site ID to sync.\n     * @returns Promise resolved with warnings if sync is successful, rejected if sync fails.\n     */\n    async syncSitePreferences(siteId: string): Promise<string[]> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const syncId = 'preferences';\n        const currentSyncPromise = this.getOngoingSync(syncId, siteId);\n\n        if (currentSyncPromise) {\n            // There's already a sync ongoing, return the promise.\n            return currentSyncPromise;\n        }\n\n        this.logger.debug('Try to sync user preferences');\n\n        const syncPromise = this.performSyncSitePreferences(siteId);\n\n        return this.addOngoingSync(syncId, syncPromise, siteId);\n    }\n\n    /**\n     * Sync user preferences of a site.\n     *\n     * @param siteId Site ID to sync.\n     * @returns Promise resolved if sync is successful, rejected if sync fails.\n     */\n    protected async performSyncSitePreferences(siteId: string): Promise<string[]> {\n        const warnings: string[] = [];\n\n        const preferences = await CoreUserOffline.getChangedPreferences(siteId);\n\n        await CoreUtils.allPromises(preferences.map(async (preference) => {\n            const onlineValue = await CoreUser.getUserPreferenceOnline(preference.name, siteId);\n\n            if (onlineValue !== null && preference.onlinevalue != onlineValue) {\n                // Preference was changed on web while the app was offline, do not sync.\n                return CoreUserOffline.setPreference(preference.name, onlineValue, onlineValue, siteId);\n            }\n\n            try {\n                await CoreUser.setUserPreference(preference.name, preference.value, siteId);\n            } catch (error) {\n                if (CoreUtils.isWebServiceError(error)) {\n                    const warning = CoreTextUtils.getErrorMessageFromError(error);\n                    if (warning) {\n                        warnings.push(warning);\n                    }\n                } else {\n                    // Couldn't connect to server, reject.\n                    throw error;\n                }\n            }\n        }));\n\n        // All done, return the warnings.\n        return warnings;\n    }\n\n}\n\nexport const CoreUserSync = makeSingleton(CoreUserSyncProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}