{"ast":null,"code":"var _class;\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n/**\n * QR Scanner plugin wrapper\n */\nexport class QRScanner {\n  /**\n   * Destroy the scanner instance.\n   *\n   * @returns QR scanner status.\n   */\n  destroy() {\n    return new Promise(resolve => window.QRScanner.destroy(resolve));\n  }\n  /**\n   * Request permission to use QR scanner.\n   *\n   * @returns QR scanner status.\n   */\n  prepare() {\n    return new Promise((resolve, reject) => {\n      window.QRScanner.prepare((error, status) => {\n        error ? reject(error) : resolve(status);\n      });\n    });\n  }\n  /**\n   * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM\n   * elements to transparent, allowing the webview to re-render with the transparent background.\n   *\n   * @returns QR scanner status.\n   */\n  show() {\n    return new Promise(resolve => window.QRScanner.show(status => resolve(status)));\n  }\n  /**\n   * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\n   *\n   * @returns Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\n   */\n  scan() {\n    return new Observable(observer => {\n      window.QRScanner.scan((error, text) => {\n        error ? observer.error(error) : observer.next(text);\n      });\n      return () => {\n        window.QRScanner.cancelScan();\n      };\n    });\n  }\n  /**\n   * Configures the native webview to be opaque with a white background, covering the video preview.\n   *\n   * @returns QR scanner status.\n   */\n  hide() {\n    return new Promise(resolve => window.QRScanner.hide(resolve));\n  }\n  /**\n   * Enable the device's light (for scanning in low-light environments).\n   *\n   * @returns QR scanner status.\n   */\n  enableLight() {\n    return new Promise((resolve, reject) => {\n      window.QRScanner.enableLight((error, status) => {\n        error ? reject(error) : resolve(status);\n      });\n    });\n  }\n  /**\n   * Disable the device's light.\n   *\n   * @returns QR scanner status.\n   */\n  disableLight() {\n    return new Promise((resolve, reject) => {\n      window.QRScanner.disableLight((error, status) => {\n        error ? reject(error) : resolve(status);\n      });\n    });\n  }\n  /**\n   * Use front camera.\n   *\n   * @returns QR scanner status.\n   */\n  useFrontCamera() {\n    return new Promise((resolve, reject) => {\n      window.QRScanner.useFrontCamera((error, status) => {\n        error ? reject(error) : resolve(status);\n      });\n    });\n  }\n  /**\n   * Use back camera.\n   *\n   * @returns QR scanner status.\n   */\n  useBackCamera() {\n    return new Promise((resolve, reject) => {\n      window.QRScanner.useBackCamera((error, status) => {\n        error ? reject(error) : resolve(status);\n      });\n    });\n  }\n  /**\n   * Disable the device's light.\n   *\n   * @param camera Provide `0` for back camera, and `1` for front camera.\n   * @returns QR scanner status.\n   */\n  useCamera(camera) {\n    return new Promise((resolve, reject) => {\n      window.QRScanner.useCamera(camera, (error, status) => {\n        error ? reject(error) : resolve(status);\n      });\n    });\n  }\n  /**\n   * Pauses the video preview on the current frame and pauses scanning.\n   *\n   * @returns QR scanner status.\n   */\n  pausePreview() {\n    return new Promise(resolve => window.QRScanner.pausePreview(resolve));\n  }\n  /**\n   * Resume the video preview and resumes scanning.\n   *\n   * @returns QR scanner status.\n   */\n  resumePreview() {\n    return new Promise(resolve => window.QRScanner.resumePreview(resolve));\n  }\n  /**\n   * Returns permission status.\n   *\n   * @returns QR scanner status.\n   */\n  getStatus() {\n    return new Promise(resolve => window.QRScanner.getStatus(resolve));\n  }\n  /**\n   * Opens settings to edit app permissions.\n   */\n  openSettings() {\n    window.QRScanner.openSettings();\n  }\n}\n_class = QRScanner;\n_class.ɵfac = function QRScanner_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport var QRScannerCamera;\n(function (QRScannerCamera) {\n  QRScannerCamera[QRScannerCamera[\"FRONT_CAMERA\"] = 0] = \"FRONT_CAMERA\";\n  QRScannerCamera[QRScannerCamera[\"BACK_CAMERA\"] = 1] = \"BACK_CAMERA\";\n})(QRScannerCamera || (QRScannerCamera = {}));","map":{"version":3,"names":["Observable","QRScanner","destroy","Promise","resolve","window","prepare","reject","error","status","show","scan","observer","text","next","cancelScan","hide","enableLight","disableLight","useFrontCamera","useBackCamera","useCamera","camera","pausePreview","resumePreview","getStatus","openSettings","factory","ɵfac","providedIn","QRScannerCamera"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/native/plugins/qrscanner.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { QRScannerError, QRScannerStatus } from '@moodlehq/cordova-plugin-qrscanner';\n\n/**\n * QR Scanner plugin wrapper\n */\n@Injectable({ providedIn: 'root' })\nexport class QRScanner {\n\n    /**\n     * Destroy the scanner instance.\n     *\n     * @returns QR scanner status.\n     */\n    destroy(): Promise<QRScannerStatus> {\n        return new Promise((resolve) => window.QRScanner.destroy(resolve));\n    }\n\n    /**\n     * Request permission to use QR scanner.\n     *\n     * @returns QR scanner status.\n     */\n    prepare(): Promise<QRScannerStatus> {\n        return new Promise((resolve, reject) => {\n            window.QRScanner.prepare((error: QRScannerError, status: QRScannerStatus) => {\n                error ? reject(error) : resolve(status);\n            });\n        });\n    }\n\n    /**\n     * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM\n     * elements to transparent, allowing the webview to re-render with the transparent background.\n     *\n     * @returns QR scanner status.\n     */\n    show(): Promise<QRScannerStatus> {\n        return new Promise(resolve => window.QRScanner.show((status) => resolve(status)));\n    }\n\n    /**\n     * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\n     *\n     * @returns Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\n     */\n    scan(): Observable<string> {\n        return new Observable(observer => {\n            window.QRScanner.scan((error: QRScannerError, text: string) => {\n                error ? observer.error(error) : observer.next(text);\n            });\n\n            return () => {\n                window.QRScanner.cancelScan();\n            };\n        });\n    }\n\n    /**\n     * Configures the native webview to be opaque with a white background, covering the video preview.\n     *\n     * @returns QR scanner status.\n     */\n    hide(): Promise<QRScannerStatus> {\n        return new Promise((resolve) => window.QRScanner.hide(resolve));\n    }\n\n    /**\n     * Enable the device's light (for scanning in low-light environments).\n     *\n     * @returns QR scanner status.\n     */\n    enableLight(): Promise<QRScannerStatus> {\n        return new Promise((resolve, reject) => {\n            window.QRScanner.enableLight((error: QRScannerError, status: QRScannerStatus) => {\n                error ? reject(error) : resolve(status);\n            });\n        });\n    }\n\n    /**\n     * Disable the device's light.\n     *\n     * @returns QR scanner status.\n     */\n    disableLight(): Promise<QRScannerStatus> {\n        return new Promise((resolve, reject) => {\n            window.QRScanner.disableLight((error: QRScannerError, status: QRScannerStatus) => {\n                error ? reject(error) : resolve(status);\n            });\n        });\n    }\n\n    /**\n     * Use front camera.\n     *\n     * @returns QR scanner status.\n     */\n    useFrontCamera(): Promise<QRScannerStatus> {\n        return new Promise((resolve, reject) => {\n            window.QRScanner.useFrontCamera((error: QRScannerError, status: QRScannerStatus) => {\n                error ? reject(error) : resolve(status);\n            });\n        });\n    }\n\n    /**\n     * Use back camera.\n     *\n     * @returns QR scanner status.\n     */\n    useBackCamera(): Promise<QRScannerStatus> {\n        return new Promise((resolve, reject) => {\n            window.QRScanner.useBackCamera((error: QRScannerError, status: QRScannerStatus) => {\n                error ? reject(error) : resolve(status);\n            });\n        });\n    }\n\n    /**\n     * Disable the device's light.\n     *\n     * @param camera Provide `0` for back camera, and `1` for front camera.\n     * @returns QR scanner status.\n     */\n    useCamera(camera: QRScannerCamera): Promise<QRScannerStatus> {\n        return new Promise((resolve, reject) => {\n            window.QRScanner.useCamera(camera, (error: QRScannerError, status: QRScannerStatus) => {\n                error ? reject(error) : resolve(status);\n            });\n        });\n    }\n\n    /**\n     * Pauses the video preview on the current frame and pauses scanning.\n     *\n     * @returns QR scanner status.\n     */\n    pausePreview(): Promise<QRScannerStatus> {\n        return new Promise((resolve) => window.QRScanner.pausePreview(resolve));\n    }\n\n    /**\n     * Resume the video preview and resumes scanning.\n     *\n     * @returns QR scanner status.\n     */\n    resumePreview(): Promise<QRScannerStatus> {\n        return new Promise((resolve) => window.QRScanner.resumePreview(resolve));\n    }\n\n    /**\n     * Returns permission status.\n     *\n     * @returns QR scanner status.\n     */\n    getStatus(): Promise<QRScannerStatus> {\n        return new Promise((resolve) => window.QRScanner.getStatus(resolve));\n    }\n\n    /**\n     * Opens settings to edit app permissions.\n     */\n    openSettings(): void {\n        window.QRScanner.openSettings();\n    }\n\n}\n\nexport enum QRScannerCamera {\n    FRONT_CAMERA = 0,\n    BACK_CAMERA = 1,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}