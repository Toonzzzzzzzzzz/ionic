{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton, Translate } from '@singletons';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'mmaModFolder:';\n/**\n * Service that provides some features for folder.\n */\nexport class AddonModFolderProvider {\n  /**\n   * Get a folder by course module ID.\n   *\n   * @param courseId Course ID.\n   * @param cmId Course module ID.\n   * @param options Other options.\n   * @returns Promise resolved when the book is retrieved.\n   */\n  getFolder(courseId, cmId, options) {\n    return this.getFolderByKey(courseId, 'coursemodule', cmId, options);\n  }\n  /**\n   * Get a folder.\n   *\n   * @param courseId Course ID.\n   * @param key Name of the property to check.\n   * @param value Value to search.\n   * @param options Other options.\n   * @returns Promise resolved when the book is retrieved.\n   */\n  getFolderByKey(courseId, key, value, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(options.siteId);\n      const params = {\n        courseids: [courseId]\n      };\n      const preSets = _objectSpread({\n        cacheKey: _this.getFolderCacheKey(courseId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY,\n        component: AddonModFolderProvider.COMPONENT\n      }, CoreSites.getReadingStrategyPreSets(options.readingStrategy));\n      const response = yield site.read('mod_folder_get_folders_by_courses', params, preSets);\n      const currentFolder = response.folders.find(folder => folder[key] == value);\n      if (currentFolder) {\n        return currentFolder;\n      }\n      throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    })();\n  }\n  /**\n   * Get cache key for folder data WS calls.\n   *\n   * @param courseId Course ID.\n   * @returns Cache key.\n   */\n  getFolderCacheKey(courseId) {\n    return ROOT_CACHE_KEY + 'folder:' + courseId;\n  }\n  /**\n   * Invalidate the prefetched content.\n   *\n   * @param moduleId The module ID.\n   * @param courseId Course ID of the module.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  invalidateContent(moduleId, courseId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const promises = [];\n      promises.push(_this2.invalidateFolderData(courseId, siteId));\n      promises.push(CoreCourse.invalidateModule(moduleId, siteId));\n      yield CoreUtils.allPromises(promises);\n    })();\n  }\n  /**\n   * Invalidates folder data.\n   *\n   * @param courseId Course ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateFolderData(courseId, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this3.getFolderCacheKey(courseId));\n    })();\n  }\n  /**\n   * Report a folder as being viewed.\n   *\n   * @param id Module ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when the WS call is successful.\n   */\n  logView(id, siteId) {\n    return _asyncToGenerator(function* () {\n      const params = {\n        folderid: id\n      };\n      yield CoreCourseLogHelper.log('mod_folder_view_folder', params, AddonModFolderProvider.COMPONENT, id, siteId);\n    })();\n  }\n}\n_class = AddonModFolderProvider;\n_class.COMPONENT = 'mmaModFolder';\n_class.ɵfac = function AddonModFolderProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModFolder = makeSingleton(AddonModFolderProvider);","map":{"version":3,"names":["CoreError","CoreSite","CoreCourse","CoreCourseLogHelper","CoreSites","CoreUtils","makeSingleton","Translate","ROOT_CACHE_KEY","AddonModFolderProvider","getFolder","courseId","cmId","options","getFolderByKey","key","value","_this","_asyncToGenerator","site","getSite","siteId","params","courseids","preSets","_objectSpread","cacheKey","getFolderCacheKey","updateFrequency","FREQUENCY_RARELY","component","COMPONENT","getReadingStrategyPreSets","readingStrategy","response","read","currentFolder","folders","find","folder","instant","invalidateContent","moduleId","_this2","promises","push","invalidateFolderData","invalidateModule","allPromises","_this3","invalidateWsCacheForKey","logView","id","folderid","log","_class","factory","ɵfac","providedIn","AddonModFolder"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/folder/services/folder.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseLogHelper } from '@features/course/services/log-helper';\nimport { CoreSites, CoreSitesCommonWSOptions } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSExternalFile, CoreWSExternalWarning } from '@services/ws';\nimport { makeSingleton, Translate } from '@singletons';\n\nconst ROOT_CACHE_KEY = 'mmaModFolder:';\n\n/**\n * Service that provides some features for folder.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModFolderProvider {\n\n    static readonly COMPONENT = 'mmaModFolder';\n\n    /**\n     * Get a folder by course module ID.\n     *\n     * @param courseId Course ID.\n     * @param cmId Course module ID.\n     * @param options Other options.\n     * @returns Promise resolved when the book is retrieved.\n     */\n    getFolder(courseId: number, cmId: number, options?: CoreSitesCommonWSOptions): Promise<AddonModFolderFolder> {\n        return this.getFolderByKey(courseId, 'coursemodule', cmId, options);\n    }\n\n    /**\n     * Get a folder.\n     *\n     * @param courseId Course ID.\n     * @param key Name of the property to check.\n     * @param value Value to search.\n     * @param options Other options.\n     * @returns Promise resolved when the book is retrieved.\n     */\n    protected async getFolderByKey(\n        courseId: number,\n        key: string,\n        value: number,\n        options: CoreSitesCommonWSOptions = {},\n    ): Promise<AddonModFolderFolder> {\n        const site = await CoreSites.getSite(options.siteId);\n\n        const params: AddonModFolderGetFoldersByCoursesWSParams = {\n            courseids: [courseId],\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getFolderCacheKey(courseId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n            component: AddonModFolderProvider.COMPONENT,\n            ...CoreSites.getReadingStrategyPreSets(options.readingStrategy),\n        };\n\n        const response =\n            await site.read<AddonModFolderGetFoldersByCoursesWSResponse>('mod_folder_get_folders_by_courses', params, preSets);\n\n        const currentFolder = response.folders.find((folder) => folder[key] == value);\n        if (currentFolder) {\n            return currentFolder;\n        }\n\n        throw new CoreError(Translate.instant('core.course.modulenotfound'));\n    }\n\n    /**\n     * Get cache key for folder data WS calls.\n     *\n     * @param courseId Course ID.\n     * @returns Cache key.\n     */\n    protected getFolderCacheKey(courseId: number): string {\n        return ROOT_CACHE_KEY + 'folder:' + courseId;\n    }\n\n    /**\n     * Invalidate the prefetched content.\n     *\n     * @param moduleId The module ID.\n     * @param courseId Course ID of the module.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    async invalidateContent(moduleId: number, courseId: number, siteId?: string): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(this.invalidateFolderData(courseId, siteId));\n        promises.push(CoreCourse.invalidateModule(moduleId, siteId));\n\n        await CoreUtils.allPromises(promises);\n    }\n\n    /**\n     * Invalidates folder data.\n     *\n     * @param courseId Course ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateFolderData(courseId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getFolderCacheKey(courseId));\n    }\n\n    /**\n     * Report a folder as being viewed.\n     *\n     * @param id Module ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when the WS call is successful.\n     */\n    async logView(id: number, siteId?: string): Promise<void> {\n        const params: AddonModFolderViewFolderWSParams = {\n            folderid: id,\n        };\n\n        await CoreCourseLogHelper.log(\n            'mod_folder_view_folder',\n            params,\n            AddonModFolderProvider.COMPONENT,\n            id,\n            siteId,\n        );\n    }\n\n}\nexport const AddonModFolder = makeSingleton(AddonModFolderProvider);\n\n/**\n * Folder returned by mod_folder_get_folders_by_courses.\n */\nexport type AddonModFolderFolder = {\n    id: number; // Module id.\n    coursemodule: number; // Course module id.\n    course: number; // Course id.\n    name: string; // Page name.\n    intro: string; // Summary.\n    introformat?: number; // Intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN).\n    introfiles: CoreWSExternalFile[];\n    revision: number; // Incremented when after each file changes, to avoid cache.\n    timemodified: number; // Last time the folder was modified.\n    display: number; // Display type of folder contents on a separate page or inline.\n    showexpanded: number; // 1 = expanded, 0 = collapsed for sub-folders.\n    showdownloadfolder: number; // Whether to show the download folder button.\n    section: number; // Course section id.\n    visible: number; // Module visibility.\n    groupmode: number; // Group mode.\n    groupingid: number; // Grouping id.\n};\n\n/**\n * Params of mod_folder_get_folders_by_courses WS.\n */\ntype AddonModFolderGetFoldersByCoursesWSParams = {\n    courseids?: number[]; // Array of course ids.\n};\n\n/**\n * Data returned by mod_folder_get_folders_by_courses WS.\n */\ntype AddonModFolderGetFoldersByCoursesWSResponse = {\n    folders: AddonModFolderFolder[];\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Params of mod_folder_view_folder WS.\n */\ntype AddonModFolderViewFolderWSParams = {\n    folderid: number; // Folder instance id.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}