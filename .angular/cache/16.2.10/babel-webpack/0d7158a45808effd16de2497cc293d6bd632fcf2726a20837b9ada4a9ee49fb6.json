{"ast":null,"code":"import _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreUtils } from '@services/utils/utils';\nimport { makeSingleton } from '@singletons';\nimport { AddonModChoice, AddonModChoiceProvider } from '../choice';\nimport { AddonModChoiceSync } from '../choice-sync';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to prefetch choices.\n */\nexport class AddonModChoicePrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModChoice';\n    this.modName = 'choice';\n    this.component = AddonModChoiceProvider.COMPONENT;\n    this.updatesNames = /^configuration$|^.*files$|^answers$/;\n  }\n  /**\n   * @inheritdoc\n   */\n  prefetch(module, courseId, single) {\n    return this.prefetchPackage(module, courseId, siteId => this.prefetchChoice(module, courseId, !!single, siteId));\n  }\n  /**\n   * Prefetch a choice.\n   *\n   * @param module Module.\n   * @param courseId Course ID the module belongs to.\n   * @param single True if we're downloading a single module, false if we're downloading a whole section.\n   * @param siteId Site ID.\n   * @returns Promise resolved when done.\n   */\n  prefetchChoice(module, courseId, single, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const commonOptions = {\n        readingStrategy: 2 /* CoreSitesReadingStrategy.ONLY_NETWORK */,\n        siteId\n      };\n      const modOptions = _objectSpread({\n        cmId: module.id\n      }, commonOptions);\n      const choice = yield AddonModChoice.getChoice(courseId, module.id, commonOptions);\n      // Get the intro files.\n      const introFiles = _this.getIntroFilesFromInstance(module, choice);\n      yield Promise.all([AddonModChoice.getOptions(choice.id, modOptions), _this.prefetchResults(choice.id, courseId, modOptions), CoreFilepool.addFilesToQueue(siteId, introFiles, AddonModChoiceProvider.COMPONENT, module.id)]);\n    })();\n  }\n  /**\n   * Prefetch choice results.\n   *\n   * @param choiceId Choice Id.\n   * @param courseId Course Id.\n   * @param modOptions Options.\n   * @returns Promise resolved when done.\n   */\n  prefetchResults(choiceId, courseId, modOptions) {\n    return _asyncToGenerator(function* () {\n      const options = yield AddonModChoice.getResults(choiceId, modOptions);\n      // If we can see the users that answered, prefetch their profile and avatar.\n      const promises = [];\n      options.forEach(option => {\n        option.userresponses.forEach(response => {\n          if (response.userid) {\n            promises.push(CoreUser.getProfile(response.userid, courseId, false, modOptions.siteId));\n          }\n          if (response.profileimageurl) {\n            promises.push(CoreFilepool.addToQueueByUrl(modOptions.siteId, response.profileimageurl).catch(() => {\n              // Ignore failures.\n            }));\n          }\n        });\n      });\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getIntroFiles(module, courseId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const choice = yield CoreUtils.ignoreErrors(AddonModChoice.getChoice(courseId, module.id));\n      return _this2.getIntroFilesFromInstance(module, choice);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  invalidateContent(moduleId, courseId) {\n    return AddonModChoice.invalidateContent(moduleId, courseId);\n  }\n  /**\n   * Invalidate WS calls needed to determine module status.\n   *\n   * @param module Module.\n   * @param courseId Course ID the module belongs to.\n   * @returns Promise resolved when invalidated.\n   */\n  invalidateModule(module, courseId) {\n    return AddonModChoice.invalidateChoiceData(courseId);\n  }\n  /**\n   * Sync a module.\n   *\n   * @param module Module.\n   * @param courseId Course ID the module belongs to\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  sync(module, courseId, siteId) {\n    return AddonModChoiceSync.syncChoice(module.instance, undefined, siteId);\n  }\n}\n_class = AddonModChoicePrefetchHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModChoicePrefetchHandlerService_BaseFactory;\n  return function AddonModChoicePrefetchHandlerService_Factory(t) {\n    return (ɵAddonModChoicePrefetchHandlerService_BaseFactory || (ɵAddonModChoicePrefetchHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModChoicePrefetchHandler = makeSingleton(AddonModChoicePrefetchHandlerService);","map":{"version":3,"names":["CoreCourseActivityPrefetchHandlerBase","CoreUser","CoreFilepool","CoreUtils","makeSingleton","AddonModChoice","AddonModChoiceProvider","AddonModChoiceSync","AddonModChoicePrefetchHandlerService","constructor","name","modName","component","COMPONENT","updatesNames","prefetch","module","courseId","single","prefetchPackage","siteId","prefetchChoice","_this","_asyncToGenerator","commonOptions","readingStrategy","modOptions","_objectSpread","cmId","id","choice","getChoice","introFiles","getIntroFilesFromInstance","Promise","all","getOptions","prefetchResults","addFilesToQueue","choiceId","options","getResults","promises","forEach","option","userresponses","response","userid","push","getProfile","profileimageurl","addToQueueByUrl","catch","getIntroFiles","_this2","ignoreErrors","invalidateContent","moduleId","invalidateModule","invalidateChoiceData","sync","syncChoice","instance","undefined","t","factory","ɵfac","providedIn","AddonModChoicePrefetchHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/choice/services/handlers/prefetch.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourseActivityPrefetchHandlerBase } from '@features/course/classes/activity-prefetch-handler';\nimport { CoreCourseAnyModuleData, CoreCourseCommonModWSOptions } from '@features/course/services/course';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreFilepool } from '@services/filepool';\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSFile } from '@services/ws';\nimport { makeSingleton } from '@singletons';\nimport { AddonModChoice, AddonModChoiceProvider } from '../choice';\nimport { AddonModChoiceSync, AddonModChoiceSyncResult } from '../choice-sync';\n\n/**\n * Handler to prefetch choices.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModChoicePrefetchHandlerService extends CoreCourseActivityPrefetchHandlerBase {\n\n    name = 'AddonModChoice';\n    modName = 'choice';\n    component = AddonModChoiceProvider.COMPONENT;\n    updatesNames = /^configuration$|^.*files$|^answers$/;\n\n    /**\n     * @inheritdoc\n     */\n    prefetch(module: CoreCourseAnyModuleData, courseId: number, single?: boolean): Promise<void> {\n        return this.prefetchPackage(module, courseId, (siteId) => this.prefetchChoice(module, courseId, !!single, siteId));\n    }\n\n    /**\n     * Prefetch a choice.\n     *\n     * @param module Module.\n     * @param courseId Course ID the module belongs to.\n     * @param single True if we're downloading a single module, false if we're downloading a whole section.\n     * @param siteId Site ID.\n     * @returns Promise resolved when done.\n     */\n    protected async prefetchChoice(\n        module: CoreCourseAnyModuleData,\n        courseId: number,\n        single: boolean,\n        siteId: string,\n    ): Promise<void> {\n        const commonOptions = {\n            readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId,\n        };\n        const modOptions = {\n            cmId: module.id,\n            ...commonOptions, // Include all common options.\n        };\n\n        const choice = await AddonModChoice.getChoice(courseId, module.id, commonOptions);\n\n        // Get the intro files.\n        const introFiles = this.getIntroFilesFromInstance(module, choice);\n\n        await Promise.all([\n            AddonModChoice.getOptions(choice.id, modOptions),\n            this.prefetchResults(choice.id, courseId, modOptions),\n            CoreFilepool.addFilesToQueue(siteId, introFiles, AddonModChoiceProvider.COMPONENT, module.id),\n        ]);\n    }\n\n    /**\n     * Prefetch choice results.\n     *\n     * @param choiceId Choice Id.\n     * @param courseId Course Id.\n     * @param modOptions Options.\n     * @returns Promise resolved when done.\n     */\n    protected async prefetchResults(\n        choiceId: number,\n        courseId: number,\n        modOptions: CoreCourseCommonModWSOptions,\n    ): Promise<void> {\n        const options = await AddonModChoice.getResults(choiceId, modOptions);\n\n        // If we can see the users that answered, prefetch their profile and avatar.\n        const promises: Promise<unknown>[] = [];\n\n        options.forEach((option) => {\n            option.userresponses.forEach((response) => {\n                if (response.userid) {\n                    promises.push(CoreUser.getProfile(response.userid, courseId, false, modOptions.siteId));\n                }\n                if (response.profileimageurl) {\n                    promises.push(CoreFilepool.addToQueueByUrl(modOptions.siteId!, response.profileimageurl).catch(() => {\n                        // Ignore failures.\n                    }));\n                }\n            });\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getIntroFiles(module: CoreCourseAnyModuleData, courseId: number): Promise<CoreWSFile[]> {\n        const choice = await CoreUtils.ignoreErrors(AddonModChoice.getChoice(courseId, module.id));\n\n        return this.getIntroFilesFromInstance(module, choice);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    invalidateContent(moduleId: number, courseId: number): Promise<void> {\n        return AddonModChoice.invalidateContent(moduleId, courseId);\n    }\n\n    /**\n     * Invalidate WS calls needed to determine module status.\n     *\n     * @param module Module.\n     * @param courseId Course ID the module belongs to.\n     * @returns Promise resolved when invalidated.\n     */\n    invalidateModule(module: CoreCourseAnyModuleData, courseId: number): Promise<void> {\n        return AddonModChoice.invalidateChoiceData(courseId);\n    }\n\n    /**\n     * Sync a module.\n     *\n     * @param module Module.\n     * @param courseId Course ID the module belongs to\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    sync(module: CoreCourseAnyModuleData, courseId: number, siteId?: string): Promise<AddonModChoiceSyncResult> {\n        return AddonModChoiceSync.syncChoice(module.instance, undefined, siteId);\n    }\n\n}\n\nexport const AddonModChoicePrefetchHandler = makeSingleton(AddonModChoicePrefetchHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}