{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDelegate } from '@classes/delegate';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Enrolment actions.\n */\nexport var CoreEnrolAction;\n(function (CoreEnrolAction) {\n  CoreEnrolAction[\"BROWSER\"] = \"browser\";\n  CoreEnrolAction[\"SELF\"] = \"self\";\n  CoreEnrolAction[\"GUEST\"] = \"guest\";\n  CoreEnrolAction[\"NOT_SUPPORTED\"] = \"not_supported\";\n})(CoreEnrolAction || (CoreEnrolAction = {}));\n/**\n * Delegate to register enrol handlers.\n */\nexport class CoreEnrolDelegateService extends CoreDelegate {\n  constructor() {\n    super('CoreEnrolDelegate', true);\n    this.handlerNameProperty = 'type';\n    this.featurePrefix = 'CoreEnrolDelegate_';\n  }\n  /**\n   * Check if an enrolment plugin is supported.\n   *\n   * @param methodType Enrol method type.\n   * @returns Whether it's supported.\n   */\n  isEnrolSupported(methodType) {\n    return this.hasHandler(methodType, true);\n  }\n  /**\n   * Get enrolment action.\n   *\n   * @param methodType Enrol method type.\n   * @returns The enrolment action to take.\n   */\n  getEnrolmentAction(methodType) {\n    const handler = this.getHandler(methodType, false);\n    if (!handler) {\n      return CoreEnrolAction.NOT_SUPPORTED;\n    }\n    return handler.enrolmentAction;\n  }\n  /**\n   * Get the enrol icon for a certain enrolment method.\n   *\n   * @param methodType The methodType to get the icon.\n   * @param courseId Course Id.\n   * @returns Promise resolved with the display data.\n   */\n  getInfoIcons(methodType, courseId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const icons = yield _this.executeFunctionOnEnabled(methodType, 'getInfoIcons', [courseId]);\n      icons === null || icons === void 0 || icons.forEach(icon => {\n        if (!icon.className) {\n          icon.className = `addon-enrol-${methodType}`;\n        }\n      });\n      return icons || [];\n    })();\n  }\n  /**\n   * Enrols the user and returns if it has been enrolled or not.\n   *\n   * @param method Course enrolment method.\n   * @returns If the user has been enrolled.\n   */\n  enrol(method) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const enrolled = yield _this2.executeFunctionOnEnabled(method.type, 'enrol', [method]);\n      return !!enrolled;\n    })();\n  }\n  /**\n   * Check if the user can access to the course.\n   *\n   * @param method Course enrolment method.\n   * @returns Access data.\n   */\n  canAccess(method) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const canAccess = yield _this3.executeFunctionOnEnabled(method.type, 'canAccess', [method]);\n      return canAccess !== null && canAccess !== void 0 ? canAccess : {\n        canAccess: false\n      };\n    })();\n  }\n  /**\n   * Validates the access to a course.\n   *\n   * @param method Course enrolment method.\n   * @returns Whether the user has validated the access to the course.\n   */\n  validateAccess(method) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const validated = yield _this4.executeFunctionOnEnabled(method.type, 'validateAccess', [method]);\n      return !!validated;\n    })();\n  }\n  /**\n   * Invalidates the enrolment info.\n   *\n   * @param method Course enrolment method.\n   * @returns Promise resolved when done\n   */\n  invalidate(method) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      yield _this5.executeFunctionOnEnabled(method.type, 'invalidate', [method]);\n    })();\n  }\n}\n_class = CoreEnrolDelegateService;\n_class.ɵfac = function CoreEnrolDelegateService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreEnrolDelegate = makeSingleton(CoreEnrolDelegateService);","map":{"version":3,"names":["CoreDelegate","makeSingleton","CoreEnrolAction","CoreEnrolDelegateService","constructor","handlerNameProperty","featurePrefix","isEnrolSupported","methodType","hasHandler","getEnrolmentAction","handler","getHandler","NOT_SUPPORTED","enrolmentAction","getInfoIcons","courseId","_this","_asyncToGenerator","icons","executeFunctionOnEnabled","forEach","icon","className","enrol","method","_this2","enrolled","type","canAccess","_this3","validateAccess","_this4","validated","invalidate","_this5","factory","ɵfac","providedIn","CoreEnrolDelegate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/enrol/services/enrol-delegate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreDelegate, CoreDelegateHandler } from '@classes/delegate';\nimport { makeSingleton } from '@singletons';\nimport { CoreEnrolEnrolmentMethod } from './enrol';\n\n/**\n * Enrolment actions.\n */\nexport enum CoreEnrolAction {\n    BROWSER = 'browser', // User should use the browser to enrol. Ie. paypal\n    SELF = 'self', // User can enrol himself or herself.\n    GUEST = 'guest', // User can view the course without enrolling, like guest enrolment.\n    NOT_SUPPORTED = 'not_supported', // Enrolment method is not supported by the app.\n}\n\n/**\n * Interface that all enrolment plugins must implement.\n */\nexport interface CoreEnrolHandler extends CoreDelegateHandler {\n    /**\n     * Name of the enrol the handler supports. E.g. 'self'.\n     */\n    type: string;\n\n    /**\n     * Action to take when enroling.\n     */\n    enrolmentAction: CoreEnrolAction;\n\n    /**\n     * Returns the data needed to render the icon.\n     *\n     * @param courseId Course Id.\n     * @returns Icons data.\n     */\n    getInfoIcons?(courseId: number): Promise<CoreEnrolInfoIcon[]>;\n\n    /**\n     * Invalidates the enrolment info.\n     *\n     * @param method Course enrolment method.\n     * @returns Promise resolved when done\n     */\n    invalidate?(method: CoreEnrolEnrolmentMethod): Promise<void>;\n}\n\n/**\n * Interface that all self enrolment plugins must implement.\n */\nexport interface CoreEnrolSelfHandler extends CoreEnrolHandler {\n    /**\n     * @inheritdoc\n     */\n    enrolmentAction: CoreEnrolAction.SELF;\n\n    /**\n     * Enrols the user and returns if it has been enrolled or not.\n     *\n     * @param method Course enrolment method.\n     * @returns If the user has been enrolled.\n     */\n    enrol(method: CoreEnrolEnrolmentMethod): Promise<boolean>;\n}\n\n/**\n * Interface that all guest enrolment plugins must implement.\n */\nexport interface CoreEnrolGuestHandler extends CoreEnrolHandler {\n    /**\n     * @inheritdoc\n     */\n    enrolmentAction: CoreEnrolAction.GUEST;\n\n    /**\n     * Check if the user can access to the course.\n     *\n     * @param method Course enrolment method.\n     * @returns Access info.\n     */\n    canAccess(method: CoreEnrolEnrolmentMethod): Promise<CoreEnrolCanAccessData>;\n\n    /**\n     * Validates the access to a course\n     *\n     * @param method Course enrolment method.\n     * @returns Whether the user has validated the access to the course.\n     */\n    validateAccess(method: CoreEnrolEnrolmentMethod): Promise<boolean>;\n}\n\n/**\n * Data needed to render a enrolment icons. It's returned by the handler.\n */\nexport interface CoreEnrolInfoIcon {\n    label: string;\n    icon: string;\n    className?: string;\n}\n\n/**\n * Data about course access using a GUEST enrolment method.\n */\nexport interface CoreEnrolCanAccessData {\n    canAccess: boolean; // Whether the user can access the course using this enrolment method.\n    requiresUserInput?: boolean; // Whether the user needs to input some data to access the course using this enrolment method.\n}\n\n/**\n * Delegate to register enrol handlers.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreEnrolDelegateService extends CoreDelegate<CoreEnrolHandler> {\n\n    protected handlerNameProperty = 'type';\n    protected featurePrefix = 'CoreEnrolDelegate_';\n\n    constructor() {\n        super('CoreEnrolDelegate', true);\n    }\n\n    /**\n     * Check if an enrolment plugin is supported.\n     *\n     * @param methodType Enrol method type.\n     * @returns Whether it's supported.\n     */\n    isEnrolSupported(methodType: string): boolean {\n        return this.hasHandler(methodType, true);\n    }\n\n    /**\n     * Get enrolment action.\n     *\n     * @param methodType Enrol method type.\n     * @returns The enrolment action to take.\n     */\n    getEnrolmentAction(methodType: string): CoreEnrolAction {\n        const handler = this.getHandler(methodType, false);\n        if (!handler) {\n            return CoreEnrolAction.NOT_SUPPORTED;\n        }\n\n        return handler.enrolmentAction;\n    }\n\n    /**\n     * Get the enrol icon for a certain enrolment method.\n     *\n     * @param methodType The methodType to get the icon.\n     * @param courseId Course Id.\n     * @returns Promise resolved with the display data.\n     */\n    async getInfoIcons(methodType: string, courseId: number): Promise<CoreEnrolInfoIcon[]> {\n        const icons = await this.executeFunctionOnEnabled<CoreEnrolInfoIcon[]>(\n            methodType,\n            'getInfoIcons',\n            [courseId],\n        );\n\n        icons?.forEach((icon) => {\n            if (!icon.className) {\n                icon.className = `addon-enrol-${methodType}`;\n            }\n        });\n\n        return icons || [];\n    }\n\n    /**\n     * Enrols the user and returns if it has been enrolled or not.\n     *\n     * @param method Course enrolment method.\n     * @returns If the user has been enrolled.\n     */\n    async enrol(method: CoreEnrolEnrolmentMethod): Promise<boolean> {\n        const enrolled = await this.executeFunctionOnEnabled<boolean>(\n            method.type,\n            'enrol',\n            [method],\n        );\n\n        return !!enrolled;\n    }\n\n    /**\n     * Check if the user can access to the course.\n     *\n     * @param method Course enrolment method.\n     * @returns Access data.\n     */\n    async canAccess(method: CoreEnrolEnrolmentMethod): Promise<CoreEnrolCanAccessData> {\n        const canAccess = await this.executeFunctionOnEnabled<CoreEnrolCanAccessData>(\n            method.type,\n            'canAccess',\n            [method],\n        );\n\n        return canAccess ?? { canAccess: false };\n    }\n\n    /**\n     * Validates the access to a course.\n     *\n     * @param method Course enrolment method.\n     * @returns Whether the user has validated the access to the course.\n     */\n    async validateAccess(method: CoreEnrolEnrolmentMethod): Promise<boolean> {\n        const validated = await this.executeFunctionOnEnabled<boolean>(\n            method.type,\n            'validateAccess',\n            [method],\n        );\n\n        return !!validated;\n    }\n\n    /**\n     * Invalidates the enrolment info.\n     *\n     * @param method Course enrolment method.\n     * @returns Promise resolved when done\n     */\n    async invalidate(method: CoreEnrolEnrolmentMethod): Promise<void> {\n        await this.executeFunctionOnEnabled<boolean>(\n            method.type,\n            'invalidate',\n            [method],\n        );\n    }\n\n}\n\nexport const CoreEnrolDelegate = makeSingleton(CoreEnrolDelegateService);\n"],"mappings":";;AAeA,SAASA,YAAY,QAA6B,mBAAmB;AACrE,SAASC,aAAa,QAAQ,aAAa;;AAG3C;;;AAGA,WAAYC,eAKX;AALD,WAAYA,eAAe;EACvBA,eAAA,uBAAmB;EACnBA,eAAA,iBAAa;EACbA,eAAA,mBAAe;EACfA,eAAA,mCAA+B;AACnC,CAAC,EALWA,eAAe,KAAfA,eAAe;AAmG3B;;;AAIA,OAAM,MAAOC,wBAAyB,SAAQH,YAA8B;EAKxEI,YAAA;IACI,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAAC;IAJ1B,KAAAC,mBAAmB,GAAG,MAAM;IAC5B,KAAAC,aAAa,GAAG,oBAAoB;EAI9C;EAEA;;;;;;EAMAC,gBAAgBA,CAACC,UAAkB;IAC/B,OAAO,IAAI,CAACC,UAAU,CAACD,UAAU,EAAE,IAAI,CAAC;EAC5C;EAEA;;;;;;EAMAE,kBAAkBA,CAACF,UAAkB;IACjC,MAAMG,OAAO,GAAG,IAAI,CAACC,UAAU,CAACJ,UAAU,EAAE,KAAK,CAAC;IAClD,IAAI,CAACG,OAAO,EAAE;MACV,OAAOT,eAAe,CAACW,aAAa;;IAGxC,OAAOF,OAAO,CAACG,eAAe;EAClC;EAEA;;;;;;;EAOMC,YAAYA,CAACP,UAAkB,EAAEQ,QAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACnD,MAAMC,KAAK,SAASF,KAAI,CAACG,wBAAwB,CAC7CZ,UAAU,EACV,cAAc,EACd,CAACQ,QAAQ,CAAC,CACb;MAEDG,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEE,OAAO,CAAEC,IAAI,IAAI;QACpB,IAAI,CAACA,IAAI,CAACC,SAAS,EAAE;UACjBD,IAAI,CAACC,SAAS,GAAG,eAAef,UAAU,EAAE;;MAEpD,CAAC,CAAC;MAEF,OAAOW,KAAK,IAAI,EAAE;IAAC;EACvB;EAEA;;;;;;EAMMK,KAAKA,CAACC,MAAgC;IAAA,IAAAC,MAAA;IAAA,OAAAR,iBAAA;MACxC,MAAMS,QAAQ,SAASD,MAAI,CAACN,wBAAwB,CAChDK,MAAM,CAACG,IAAI,EACX,OAAO,EACP,CAACH,MAAM,CAAC,CACX;MAED,OAAO,CAAC,CAACE,QAAQ;IAAC;EACtB;EAEA;;;;;;EAMME,SAASA,CAACJ,MAAgC;IAAA,IAAAK,MAAA;IAAA,OAAAZ,iBAAA;MAC5C,MAAMW,SAAS,SAASC,MAAI,CAACV,wBAAwB,CACjDK,MAAM,CAACG,IAAI,EACX,WAAW,EACX,CAACH,MAAM,CAAC,CACX;MAED,OAAOI,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI;QAAEA,SAAS,EAAE;MAAK,CAAE;IAAC;EAC7C;EAEA;;;;;;EAMME,cAAcA,CAACN,MAAgC;IAAA,IAAAO,MAAA;IAAA,OAAAd,iBAAA;MACjD,MAAMe,SAAS,SAASD,MAAI,CAACZ,wBAAwB,CACjDK,MAAM,CAACG,IAAI,EACX,gBAAgB,EAChB,CAACH,MAAM,CAAC,CACX;MAED,OAAO,CAAC,CAACQ,SAAS;IAAC;EACvB;EAEA;;;;;;EAMMC,UAAUA,CAACT,MAAgC;IAAA,IAAAU,MAAA;IAAA,OAAAjB,iBAAA;MAC7C,MAAMiB,MAAI,CAACf,wBAAwB,CAC/BK,MAAM,CAACG,IAAI,EACX,YAAY,EACZ,CAACH,MAAM,CAAC,CACX;IAAC;EACN;;SArHStB,wBAAyB;;mBAAzBA,MAAwB;AAAA;;SAAxBA,MAAwB;EAAAiC,OAAA,EAAxBjC,MAAwB,CAAAkC,IAAA;EAAAC,UAAA,EADX;AAAM;AA0HhC,OAAO,MAAMC,iBAAiB,GAAGtC,aAAa,CAACE,wBAAwB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}