{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { AddonBadges } from '../../services/badges';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { AddonBadgesUserBadgesSource } from '@addons/badges/classes/user-badges-source';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreTime } from '@singletons/time';\nimport { Translate } from '@singletons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../../../core/components/empty-box/empty-box\";\nimport * as i3 from \"../../../../core/components/loading/loading\";\nimport * as i4 from \"../../../../core/components/split-view/split-view\";\nimport * as i5 from \"../../../../core/directives/external-content\";\nimport * as i6 from \"../../../../core/directives/content\";\nimport * as i7 from \"@ionic/angular\";\nimport * as i8 from \"../../../../core/pipes/format-date\";\nimport * as i9 from \"@ngx-translate/core\";\nfunction AddonBadgesUserBadgesPage_core_empty_box_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"core-empty-box\", 7);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"message\", i0.ɵɵpipeBind1(1, 1, \"addon.badges.nobadges\"));\n  }\n}\nfunction AddonBadgesUserBadgesPage_ion_list_16_ion_item_1_ion_badge_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-badge\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"addon.badges.expired\"), \" \");\n  }\n}\nfunction AddonBadgesUserBadgesPage_ion_list_16_ion_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\", 10);\n    i0.ɵɵlistener(\"click\", function AddonBadgesUserBadgesPage_ion_list_16_ion_item_1_Template_ion_item_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const badge_r3 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.badges.select(badge_r3));\n    });\n    i0.ɵɵelementStart(1, \"ion-avatar\", 0);\n    i0.ɵɵelement(2, \"img\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-label\")(4, \"p\", 12);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"coreFormatDate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(9, AddonBadgesUserBadgesPage_ion_list_16_ion_item_1_ion_badge_9_Template, 3, 3, \"ion-badge\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const badge_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"detail\", true);\n    i0.ɵɵattribute(\"aria-label\", badge_r3.name)(\"aria-current\", ctx_r2.badges.getItemAriaCurrent(badge_r3));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", badge_r3.badgeurl, i0.ɵɵsanitizeUrl)(\"alt\", badge_r3.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(badge_r3.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(8, 8, badge_r3.dateissued * 1000, \"strftimedatetimeshort\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", badge_r3.dateexpire && ctx_r2.currentTime >= badge_r3.dateexpire);\n  }\n}\nfunction AddonBadgesUserBadgesPage_ion_list_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-list\", 8);\n    i0.ɵɵtemplate(1, AddonBadgesUserBadgesPage_ion_list_16_ion_item_1_Template, 10, 11, \"ion-item\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.badges.items);\n  }\n}\n/**\n * Page that displays the list of calendar events.\n */\nexport class AddonBadgesUserBadgesPage {\n  constructor() {\n    var _CoreNavigator$getRou, _CoreNavigator$getRou2;\n    this.currentTime = 0;\n    let courseId = (_CoreNavigator$getRou = CoreNavigator.getRouteNumberParam('courseId')) !== null && _CoreNavigator$getRou !== void 0 ? _CoreNavigator$getRou : 0; // Use 0 for site badges.\n    const userId = (_CoreNavigator$getRou2 = CoreNavigator.getRouteNumberParam('userId')) !== null && _CoreNavigator$getRou2 !== void 0 ? _CoreNavigator$getRou2 : CoreSites.getCurrentSiteUserId();\n    if (courseId === CoreSites.getCurrentSiteHomeId()) {\n      // Use courseId 0 for site home, otherwise the site doesn't return site badges.\n      courseId = 0;\n    }\n    this.badges = new CoreListItemsManager(CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(AddonBadgesUserBadgesSource, [courseId, userId]), AddonBadgesUserBadgesPage);\n    this.logView = CoreTime.once(() => {\n      CoreAnalytics.logEvent({\n        type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n        ws: 'core_badges_view_user_badges',\n        name: Translate.instant('addon.badges.badges'),\n        data: {\n          courseId: this.badges.getSource().COURSE_ID,\n          category: 'badges'\n        },\n        url: '/badges/mybadges.php'\n      });\n    });\n  }\n  /**\n   * @inheritdoc\n   */\n  ngAfterViewInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.fetchInitialBadges();\n      _this.badges.start(_this.splitView);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    this.badges.destroy();\n  }\n  /**\n   * Refresh the badges.\n   *\n   * @param refresher Refresher.\n   */\n  refreshBadges(refresher) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreUtils.ignoreErrors(AddonBadges.invalidateUserBadges(_this2.badges.getSource().COURSE_ID, _this2.badges.getSource().USER_ID));\n      yield CoreUtils.ignoreErrors(_this2.badges.reload());\n      refresher === null || refresher === void 0 || refresher.complete();\n    })();\n  }\n  /**\n   * Obtain the initial list of badges.\n   */\n  fetchInitialBadges() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.currentTime = CoreTimeUtils.timestamp();\n      try {\n        yield _this3.badges.reload();\n        _this3.logView();\n      } catch (message) {\n        CoreDomUtils.showErrorModalDefault(message, 'Error loading badges');\n        _this3.badges.reset();\n      }\n    })();\n  }\n}\n_class = AddonBadgesUserBadgesPage;\n_class.ɵfac = function AddonBadgesUserBadgesPage_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"page-addon-badges-user-badges\"]],\n  viewQuery: function AddonBadgesUserBadgesPage_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CoreSplitViewComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.splitView = _t.first);\n    }\n  },\n  decls: 17,\n  vars: 13,\n  consts: [[\"slot\", \"start\"], [3, \"text\"], [\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [3, \"hideUntil\"], [\"icon\", \"fas-trophy\", 3, \"message\", 4, \"ngIf\"], [\"class\", \"ion-no-margin\", 4, \"ngIf\"], [\"icon\", \"fas-trophy\", 3, \"message\"], [1, \"ion-no-margin\"], [\"button\", \"\", \"class\", \"ion-text-wrap\", 3, \"detail\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"button\", \"\", 1, \"ion-text-wrap\", 3, \"detail\", \"click\"], [\"core-external-content\", \"\", 3, \"src\", \"alt\"], [1, \"item-heading\"], [\"slot\", \"end\", \"color\", \"danger\", 4, \"ngIf\"], [\"slot\", \"end\", \"color\", \"danger\"]],\n  template: function AddonBadgesUserBadgesPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n      i0.ɵɵelement(3, \"ion-back-button\", 1);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ion-title\")(6, \"h1\");\n      i0.ɵɵtext(7);\n      i0.ɵɵpipe(8, \"translate\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(9, \"ion-content\")(10, \"core-split-view\")(11, \"ion-refresher\", 2);\n      i0.ɵɵlistener(\"ionRefresh\", function AddonBadgesUserBadgesPage_Template_ion_refresher_ionRefresh_11_listener($event) {\n        return ctx.refreshBadges($event.target);\n      });\n      i0.ɵɵelement(12, \"ion-refresher-content\", 3);\n      i0.ɵɵpipe(13, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"core-loading\", 4);\n      i0.ɵɵtemplate(15, AddonBadgesUserBadgesPage_core_empty_box_15_Template, 2, 3, \"core-empty-box\", 5);\n      i0.ɵɵtemplate(16, AddonBadgesUserBadgesPage_ion_list_16_Template, 2, 1, \"ion-list\", 6);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"text\", i0.ɵɵpipeBind1(4, 7, \"core.back\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 9, \"addon.badges.badges\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", !ctx.badges.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"pullingText\", i0.ɵɵpipeBind1(13, 11, \"core.pulltorefresh\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hideUntil\", ctx.badges.loaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.badges.empty);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.badges.empty);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.CoreEmptyBoxComponent, i3.CoreLoadingComponent, i4.CoreSplitViewComponent, i5.CoreExternalContentDirective, i6.CoreContentDirective, i7.IonAvatar, i7.IonBadge, i7.IonButtons, i7.IonContent, i7.IonHeader, i7.IonItem, i7.IonLabel, i7.IonList, i7.IonRefresher, i7.IonRefresherContent, i7.IonTitle, i7.IonToolbar, i7.IonBackButton, i8.CoreFormatDatePipe, i9.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["AddonBadges","CoreTimeUtils","CoreDomUtils","CoreSites","CoreUtils","CoreSplitViewComponent","CoreNavigator","CoreListItemsManager","AddonBadgesUserBadgesSource","CoreRoutedItemsManagerSourcesTracker","CoreAnalytics","CoreAnalyticsEventType","CoreTime","Translate","i0","ɵɵelement","ɵɵproperty","ɵɵpipeBind1","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ɵɵlistener","AddonBadgesUserBadgesPage_ion_list_16_ion_item_1_Template_ion_item_click_0_listener","restoredCtx","ɵɵrestoreView","_r6","badge_r3","$implicit","ctx_r5","ɵɵnextContext","ɵɵresetView","badges","select","ɵɵtemplate","AddonBadgesUserBadgesPage_ion_list_16_ion_item_1_ion_badge_9_Template","ɵɵattribute","name","ctx_r2","getItemAriaCurrent","badgeurl","ɵɵsanitizeUrl","ɵɵtextInterpolate","ɵɵpipeBind2","dateissued","dateexpire","currentTime","AddonBadgesUserBadgesPage_ion_list_16_ion_item_1_Template","ctx_r1","items","AddonBadgesUserBadgesPage","constructor","_CoreNavigator$getRou","_CoreNavigator$getRou2","courseId","getRouteNumberParam","userId","getCurrentSiteUserId","getCurrentSiteHomeId","getOrCreateSource","logView","once","logEvent","type","VIEW_ITEM_LIST","ws","instant","data","getSource","COURSE_ID","category","url","ngAfterViewInit","_this","_asyncToGenerator","fetchInitialBadges","start","splitView","ngOnDestroy","destroy","refreshBadges","refresher","_this2","ignoreErrors","invalidateUserBadges","USER_ID","reload","complete","_this3","timestamp","message","showErrorModalDefault","reset","selectors","viewQuery","AddonBadgesUserBadgesPage_Query","rf","ctx","AddonBadgesUserBadgesPage_Template_ion_refresher_ionRefresh_11_listener","$event","target","AddonBadgesUserBadgesPage_core_empty_box_15_Template","AddonBadgesUserBadgesPage_ion_list_16_Template","loaded","ɵɵpropertyInterpolate","empty"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/badges/pages/user-badges/user-badges.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/badges/pages/user-badges/user-badges.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { AddonBadges, AddonBadgesUserBadge } from '../../services/badges';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { AddonBadgesUserBadgesSource } from '@addons/badges/classes/user-badges-source';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreTime } from '@singletons/time';\nimport { Translate } from '@singletons';\n\n/**\n * Page that displays the list of calendar events.\n */\n@Component({\n    selector: 'page-addon-badges-user-badges',\n    templateUrl: 'user-badges.html',\n})\nexport class AddonBadgesUserBadgesPage implements AfterViewInit, OnDestroy {\n\n    currentTime = 0;\n    badges: CoreListItemsManager<AddonBadgesUserBadge, AddonBadgesUserBadgesSource>;\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    protected logView: () => void;\n\n    constructor() {\n        let courseId = CoreNavigator.getRouteNumberParam('courseId') ?? 0; // Use 0 for site badges.\n        const userId = CoreNavigator.getRouteNumberParam('userId') ?? CoreSites.getCurrentSiteUserId();\n\n        if (courseId === CoreSites.getCurrentSiteHomeId()) {\n            // Use courseId 0 for site home, otherwise the site doesn't return site badges.\n            courseId = 0;\n        }\n\n        this.badges = new CoreListItemsManager(\n            CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(AddonBadgesUserBadgesSource, [courseId, userId]),\n            AddonBadgesUserBadgesPage,\n        );\n\n        this.logView = CoreTime.once(() => {\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n                ws: 'core_badges_view_user_badges',\n                name: Translate.instant('addon.badges.badges'),\n                data: { courseId: this.badges.getSource().COURSE_ID, category: 'badges' },\n                url: '/badges/mybadges.php',\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        await this.fetchInitialBadges();\n\n        this.badges.start(this.splitView);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.badges.destroy();\n    }\n\n    /**\n     * Refresh the badges.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshBadges(refresher?: HTMLIonRefresherElement): Promise<void> {\n        await CoreUtils.ignoreErrors(\n            AddonBadges.invalidateUserBadges(\n                this.badges.getSource().COURSE_ID,\n                this.badges.getSource().USER_ID,\n            ),\n        );\n        await CoreUtils.ignoreErrors(this.badges.reload());\n\n        refresher?.complete();\n    }\n\n    /**\n     * Obtain the initial list of badges.\n     */\n    private async fetchInitialBadges(): Promise<void> {\n        this.currentTime = CoreTimeUtils.timestamp();\n\n        try {\n            await this.badges.reload();\n\n            this.logView();\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'Error loading badges');\n\n            this.badges.reset();\n        }\n    }\n\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-back-button [text]=\"'core.back' | translate\" />\n        </ion-buttons>\n        <ion-title>\n            <h1>{{ 'addon.badges.badges' | translate }}</h1>\n        </ion-title>\n    </ion-toolbar>\n</ion-header>\n<ion-content>\n    <core-split-view>\n        <ion-refresher slot=\"fixed\" [disabled]=\"!badges.loaded\" (ionRefresh)=\"refreshBadges($event.target)\">\n            <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\" />\n        </ion-refresher>\n        <core-loading [hideUntil]=\"badges.loaded\">\n            <core-empty-box *ngIf=\"badges.empty\" icon=\"fas-trophy\" [message]=\"'addon.badges.nobadges' | translate\" />\n\n            <ion-list *ngIf=\"!badges.empty\" class=\"ion-no-margin\">\n                <ion-item button class=\"ion-text-wrap\" *ngFor=\"let badge of badges.items\" [attr.aria-label]=\"badge.name\"\n                    (click)=\"badges.select(badge)\" [attr.aria-current]=\"badges.getItemAriaCurrent(badge)\" [detail]=\"true\">\n                    <ion-avatar slot=\"start\">\n                        <img [src]=\"badge.badgeurl\" [alt]=\"badge.name\" core-external-content>\n                    </ion-avatar>\n                    <ion-label>\n                        <p class=\"item-heading\">{{ badge.name }}</p>\n                        <p>{{ badge.dateissued * 1000 | coreFormatDate :'strftimedatetimeshort' }}</p>\n                    </ion-label>\n                    <ion-badge slot=\"end\" color=\"danger\" *ngIf=\"badge.dateexpire && currentTime >= badge.dateexpire\">\n                        {{ 'addon.badges.expired' | translate }}\n                    </ion-badge>\n                </ion-item>\n            </ion-list>\n        </core-loading>\n    </core-split-view>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}