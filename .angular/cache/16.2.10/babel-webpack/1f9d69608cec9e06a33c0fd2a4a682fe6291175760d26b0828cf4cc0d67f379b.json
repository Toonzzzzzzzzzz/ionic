{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreContentLinksHelper } from '@features/contentlinks/services/contentlinks-helper';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreNavigator } from '@services/navigator';\n/**\n * A class to handle opening deep links in a main menu page. There are 2 type of deep links:\n *   -A Moodle URL to treat.\n *   -A combination of path + options.\n */\nexport class CoreMainMenuDeepLinkManager {\n  constructor() {\n    const urlToOpen = CoreNavigator.getRouteParam('urlToOpen');\n    const redirectPath = CoreNavigator.getRouteParam('redirectPath');\n    if (urlToOpen || redirectPath) {\n      this.pendingRedirect = {\n        redirectPath,\n        redirectOptions: CoreNavigator.getRouteParam('redirectOptions'),\n        urlToOpen\n      };\n    }\n  }\n  /**\n   * Whether there is a deep link to be treated.\n   *\n   * @returns Whether there is a deep link to be treated.\n   */\n  hasDeepLinkToTreat() {\n    var _this$pendingRedirect, _this$pendingRedirect2;\n    return !!((_this$pendingRedirect = this.pendingRedirect) !== null && _this$pendingRedirect !== void 0 && _this$pendingRedirect.urlToOpen) || !!((_this$pendingRedirect2 = this.pendingRedirect) !== null && _this$pendingRedirect2 !== void 0 && _this$pendingRedirect2.redirectPath);\n  }\n  /**\n   * Treat a deep link if there's any to treat.\n   */\n  treatLink() {\n    if (!this.pendingRedirect) {\n      return;\n    }\n    if (this.pendingRedirect.redirectPath) {\n      this.treatPath(this.pendingRedirect.redirectPath, this.pendingRedirect.redirectOptions);\n    } else if (this.pendingRedirect.urlToOpen) {\n      this.treatUrlToOpen(this.pendingRedirect.urlToOpen);\n    }\n    delete this.pendingRedirect;\n  }\n  /**\n   * Open a path.\n   *\n   * @param path Path.\n   * @param navOptions Navigation options.\n   */\n  treatPath(path, navOptions = {}) {\n    const params = navOptions.params;\n    const coursePathMatches = path.match(/^course\\/(\\d+)\\/?$/);\n    if (coursePathMatches) {\n      if (!(params !== null && params !== void 0 && params.course)) {\n        CoreCourseHelper.getAndOpenCourse(Number(coursePathMatches[1]), params);\n      } else {\n        CoreCourse.openCourse(params.course, navOptions);\n      }\n    } else {\n      CoreNavigator.navigateToSitePath(path, _objectSpread(_objectSpread({}, navOptions), {}, {\n        preferCurrentTab: false\n      }));\n    }\n  }\n  /**\n   * Treat a URL to open.\n   *\n   * @param url URL to open.\n   */\n  treatUrlToOpen(url) {\n    return _asyncToGenerator(function* () {\n      var _action$sites;\n      const action = yield CoreContentLinksHelper.getFirstValidActionFor(url);\n      if (action !== null && action !== void 0 && (_action$sites = action.sites) !== null && _action$sites !== void 0 && _action$sites[0]) {\n        action.action(action.sites[0]);\n      }\n    })();\n  }\n}","map":{"version":3,"names":["CoreContentLinksHelper","CoreCourse","CoreCourseHelper","CoreNavigator","CoreMainMenuDeepLinkManager","constructor","urlToOpen","getRouteParam","redirectPath","pendingRedirect","redirectOptions","hasDeepLinkToTreat","_this$pendingRedirect","_this$pendingRedirect2","treatLink","treatPath","treatUrlToOpen","path","navOptions","params","coursePathMatches","match","course","getAndOpenCourse","Number","openCourse","navigateToSitePath","_objectSpread","preferCurrentTab","url","_asyncToGenerator","_action$sites","action","getFirstValidActionFor","sites"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/mainmenu/classes/deep-link-manager.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreContentLinksHelper } from '@features/contentlinks/services/contentlinks-helper';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CoreNavigationOptions, CoreNavigator, CoreRedirectPayload } from '@services/navigator';\n\n/**\n * A class to handle opening deep links in a main menu page. There are 2 type of deep links:\n *   -A Moodle URL to treat.\n *   -A combination of path + options.\n */\nexport class CoreMainMenuDeepLinkManager {\n\n    protected pendingRedirect?: CoreRedirectPayload;\n\n    constructor() {\n        const urlToOpen = CoreNavigator.getRouteParam('urlToOpen');\n        const redirectPath = CoreNavigator.getRouteParam('redirectPath');\n        if (urlToOpen || redirectPath) {\n            this.pendingRedirect = {\n                redirectPath,\n                redirectOptions: CoreNavigator.getRouteParam('redirectOptions'),\n                urlToOpen,\n            };\n        }\n    }\n\n    /**\n     * Whether there is a deep link to be treated.\n     *\n     * @returns Whether there is a deep link to be treated.\n     */\n    hasDeepLinkToTreat(): boolean {\n        return !!this.pendingRedirect?.urlToOpen || !!this.pendingRedirect?.redirectPath;\n    }\n\n    /**\n     * Treat a deep link if there's any to treat.\n     */\n    treatLink(): void {\n        if (!this.pendingRedirect) {\n            return;\n        }\n\n        if (this.pendingRedirect.redirectPath) {\n            this.treatPath(this.pendingRedirect.redirectPath, this.pendingRedirect.redirectOptions);\n        } else if (this.pendingRedirect.urlToOpen) {\n            this.treatUrlToOpen(this.pendingRedirect.urlToOpen);\n        }\n\n        delete this.pendingRedirect;\n    }\n\n    /**\n     * Open a path.\n     *\n     * @param path Path.\n     * @param navOptions Navigation options.\n     */\n    protected treatPath(path: string, navOptions: CoreNavigationOptions = {}): void {\n        const params = navOptions.params;\n        const coursePathMatches = path.match(/^course\\/(\\d+)\\/?$/);\n\n        if (coursePathMatches) {\n            if (!params?.course) {\n                CoreCourseHelper.getAndOpenCourse(Number(coursePathMatches[1]), params);\n            } else {\n                CoreCourse.openCourse(params.course, navOptions);\n            }\n        } else {\n            CoreNavigator.navigateToSitePath(path, {\n                ...navOptions,\n                preferCurrentTab: false,\n            });\n        }\n    }\n\n    /**\n     * Treat a URL to open.\n     *\n     * @param url URL to open.\n     */\n    protected async treatUrlToOpen(url: string): Promise<void> {\n        const action = await CoreContentLinksHelper.getFirstValidActionFor(url);\n        if (action?.sites?.[0]) {\n            action.action(action.sites[0]);\n        }\n    }\n\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,sBAAsB,QAAQ,qDAAqD;AAC5F,SAASC,UAAU,QAAQ,kCAAkC;AAC7D,SAASC,gBAAgB,QAAQ,yCAAyC;AAC1E,SAAgCC,aAAa,QAA6B,qBAAqB;AAE/F;;;;;AAKA,OAAM,MAAOC,2BAA2B;EAIpCC,YAAA;IACI,MAAMC,SAAS,GAAGH,aAAa,CAACI,aAAa,CAAC,WAAW,CAAC;IAC1D,MAAMC,YAAY,GAAGL,aAAa,CAACI,aAAa,CAAC,cAAc,CAAC;IAChE,IAAID,SAAS,IAAIE,YAAY,EAAE;MAC3B,IAAI,CAACC,eAAe,GAAG;QACnBD,YAAY;QACZE,eAAe,EAAEP,aAAa,CAACI,aAAa,CAAC,iBAAiB,CAAC;QAC/DD;OACH;;EAET;EAEA;;;;;EAKAK,kBAAkBA,CAAA;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IACd,OAAO,CAAC,GAAAD,qBAAA,GAAC,IAAI,CAACH,eAAe,cAAAG,qBAAA,eAApBA,qBAAA,CAAsBN,SAAS,KAAI,CAAC,GAAAO,sBAAA,GAAC,IAAI,CAACJ,eAAe,cAAAI,sBAAA,eAApBA,sBAAA,CAAsBL,YAAY;EACpF;EAEA;;;EAGAM,SAASA,CAAA;IACL,IAAI,CAAC,IAAI,CAACL,eAAe,EAAE;MACvB;;IAGJ,IAAI,IAAI,CAACA,eAAe,CAACD,YAAY,EAAE;MACnC,IAAI,CAACO,SAAS,CAAC,IAAI,CAACN,eAAe,CAACD,YAAY,EAAE,IAAI,CAACC,eAAe,CAACC,eAAe,CAAC;KAC1F,MAAM,IAAI,IAAI,CAACD,eAAe,CAACH,SAAS,EAAE;MACvC,IAAI,CAACU,cAAc,CAAC,IAAI,CAACP,eAAe,CAACH,SAAS,CAAC;;IAGvD,OAAO,IAAI,CAACG,eAAe;EAC/B;EAEA;;;;;;EAMUM,SAASA,CAACE,IAAY,EAAEC,UAAA,GAAoC,EAAE;IACpE,MAAMC,MAAM,GAAGD,UAAU,CAACC,MAAM;IAChC,MAAMC,iBAAiB,GAAGH,IAAI,CAACI,KAAK,CAAC,oBAAoB,CAAC;IAE1D,IAAID,iBAAiB,EAAE;MACnB,IAAI,EAACD,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEG,MAAM,GAAE;QACjBpB,gBAAgB,CAACqB,gBAAgB,CAACC,MAAM,CAACJ,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAED,MAAM,CAAC;OAC1E,MAAM;QACHlB,UAAU,CAACwB,UAAU,CAACN,MAAM,CAACG,MAAM,EAAEJ,UAAU,CAAC;;KAEvD,MAAM;MACHf,aAAa,CAACuB,kBAAkB,CAACT,IAAI,EAAAU,aAAA,CAAAA,aAAA,KAC9BT,UAAU;QACbU,gBAAgB,EAAE;MAAK,EAC1B,CAAC;;EAEV;EAEA;;;;;EAKgBZ,cAAcA,CAACa,GAAW;IAAA,OAAAC,iBAAA;MAAA,IAAAC,aAAA;MACtC,MAAMC,MAAM,SAAShC,sBAAsB,CAACiC,sBAAsB,CAACJ,GAAG,CAAC;MACvE,IAAIG,MAAM,aAANA,MAAM,gBAAAD,aAAA,GAANC,MAAM,CAAEE,KAAK,cAAAH,aAAA,eAAbA,aAAA,CAAgB,CAAC,CAAC,EAAE;QACpBC,MAAM,CAACA,MAAM,CAACA,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC;;IACjC;EACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}