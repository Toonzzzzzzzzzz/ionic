{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreFileUploaderHelper } from '../fileuploader-helper';\nimport { CoreFileUploader } from '../fileuploader';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CorePlatform } from '@services/platform';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to upload any type of file.\n */\nexport class CoreFileUploaderFileHandlerService {\n  constructor() {\n    this.name = 'CoreFileUploaderFile';\n    this.priority = 1200;\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns Promise resolved with true if enabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n  /**\n   * Given a list of mimetypes, return the ones that are supported by the handler.\n   *\n   * @param mimetypes List of mimetypes.\n   * @returns Supported mimetypes.\n   */\n  getSupportedMimetypes(mimetypes) {\n    return mimetypes;\n  }\n  /**\n   * Get the data to display the handler.\n   *\n   * @returns Data.\n   */\n  getData() {\n    const handler = {\n      title: 'core.fileuploader.file',\n      class: 'core-fileuploader-file-handler',\n      icon: 'folder' // Cannot use font-awesome in action sheet.\n    };\n\n    if (CorePlatform.isMobile()) {\n      handler.action = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (maxSize, upload, allowOffline, mimetypes) {\n          const result = yield CoreFileUploaderHelper.chooseAndUploadFile(maxSize, upload, allowOffline, mimetypes);\n          return {\n            treated: true,\n            result: result\n          };\n        });\n        return function (_x, _x2, _x3, _x4) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    } else {\n      handler.afterRender = (maxSize, upload, allowOffline, mimetypes) => {\n        // Add an invisible file input in the file handler.\n        // It needs to be done like this because the action sheet items don't accept inputs.\n        const element = document.querySelector('.core-fileuploader-file-handler');\n        if (!element) {\n          return;\n        }\n        const input = document.createElement('input');\n        input.setAttribute('type', 'file');\n        input.classList.add('core-fileuploader-file-handler-input');\n        if (mimetypes && mimetypes.length && (!CorePlatform.isAndroid() || mimetypes.length == 1)) {\n          // Don't use accept attribute in Android with several mimetypes, it's not supported.\n          input.setAttribute('accept', mimetypes.join(', '));\n        }\n        input.addEventListener('change', /*#__PURE__*/_asyncToGenerator(function* () {\n          var _input$files;\n          const file = (_input$files = input.files) === null || _input$files === void 0 ? void 0 : _input$files[0];\n          input.value = ''; // Unset input.\n          if (!file) {\n            return;\n          }\n          // Verify that the mimetype of the file is supported, in case the accept attribute isn't supported.\n          const error = CoreFileUploader.isInvalidMimetype(mimetypes, file.name, file.type);\n          if (error) {\n            CoreDomUtils.showErrorModal(error);\n            return;\n          }\n          try {\n            // Upload the picked file.\n            const result = yield CoreFileUploaderHelper.uploadFileObject(file, maxSize, upload, allowOffline, file.name);\n            CoreFileUploaderHelper.fileUploaded(result);\n          } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, Translate.instant('core.fileuploader.errorreadingfile'));\n          }\n        }));\n        if (CorePlatform.isIOS()) {\n          var _element$parentElemen;\n          // In iOS, the click on the input stopped working for some reason. We need to put it 1 level higher.\n          (_element$parentElemen = element.parentElement) === null || _element$parentElemen === void 0 || _element$parentElemen.appendChild(input);\n          // Animate the button when the input is clicked.\n          input.addEventListener('mousedown', () => {\n            element.classList.add('activated');\n          });\n          input.addEventListener('mouseup', () => {\n            setTimeout(() => {\n              element.classList.remove('activated');\n            }, 80);\n          });\n        } else {\n          element.appendChild(input);\n        }\n      };\n    }\n    return handler;\n  }\n}\n_class = CoreFileUploaderFileHandlerService;\n_class.ɵfac = function CoreFileUploaderFileHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreFileUploaderFileHandler = makeSingleton(CoreFileUploaderFileHandlerService);","map":{"version":3,"names":["CoreDomUtils","CoreFileUploaderHelper","CoreFileUploader","makeSingleton","Translate","CorePlatform","CoreFileUploaderFileHandlerService","constructor","name","priority","isEnabled","_asyncToGenerator","getSupportedMimetypes","mimetypes","getData","handler","title","class","icon","isMobile","action","_ref","maxSize","upload","allowOffline","result","chooseAndUploadFile","treated","_x","_x2","_x3","_x4","apply","arguments","afterRender","element","document","querySelector","input","createElement","setAttribute","classList","add","length","isAndroid","join","addEventListener","_input$files","file","files","value","error","isInvalidMimetype","type","showErrorModal","uploadFileObject","fileUploaded","showErrorModalDefault","instant","isIOS","_element$parentElemen","parentElement","appendChild","setTimeout","remove","factory","ɵfac","providedIn","CoreFileUploaderFileHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/fileuploader/services/handlers/file.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreFileUploaderHandler, CoreFileUploaderHandlerData, CoreFileUploaderHandlerResult } from '../fileuploader-delegate';\nimport { CoreFileUploaderHelper } from '../fileuploader-helper';\nimport { CoreFileUploader } from '../fileuploader';\nimport { makeSingleton, Translate } from '@singletons';\nimport { CorePlatform } from '@services/platform';\n\n/**\n * Handler to upload any type of file.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreFileUploaderFileHandlerService implements CoreFileUploaderHandler {\n\n    name = 'CoreFileUploaderFile';\n    priority = 1200;\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns Promise resolved with true if enabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * Given a list of mimetypes, return the ones that are supported by the handler.\n     *\n     * @param mimetypes List of mimetypes.\n     * @returns Supported mimetypes.\n     */\n    getSupportedMimetypes(mimetypes: string[]): string[] {\n        return mimetypes;\n    }\n\n    /**\n     * Get the data to display the handler.\n     *\n     * @returns Data.\n     */\n    getData(): CoreFileUploaderHandlerData {\n        const handler: CoreFileUploaderHandlerData = {\n            title: 'core.fileuploader.file',\n            class: 'core-fileuploader-file-handler',\n            icon: 'folder', // Cannot use font-awesome in action sheet.\n        };\n\n        if (CorePlatform.isMobile()) {\n            handler.action = async (\n                maxSize?: number,\n                upload?: boolean,\n                allowOffline?: boolean,\n                mimetypes?: string[],\n            ): Promise<CoreFileUploaderHandlerResult> => {\n                const result = await CoreFileUploaderHelper.chooseAndUploadFile(maxSize, upload, allowOffline, mimetypes);\n\n                return {\n                    treated: true,\n                    result: result,\n                };\n            };\n\n        } else {\n            handler.afterRender = (\n                maxSize?: number,\n                upload?: boolean,\n                allowOffline?: boolean,\n                mimetypes?: string[],\n            ): void => {\n                // Add an invisible file input in the file handler.\n                // It needs to be done like this because the action sheet items don't accept inputs.\n                const element = document.querySelector('.core-fileuploader-file-handler');\n                if (!element) {\n                    return;\n                }\n\n                const input = document.createElement('input');\n                input.setAttribute('type', 'file');\n                input.classList.add('core-fileuploader-file-handler-input');\n                if (mimetypes && mimetypes.length && (!CorePlatform.isAndroid() || mimetypes.length == 1)) {\n                    // Don't use accept attribute in Android with several mimetypes, it's not supported.\n                    input.setAttribute('accept', mimetypes.join(', '));\n                }\n\n                input.addEventListener('change', async () => {\n                    const file = input.files?.[0];\n\n                    input.value = ''; // Unset input.\n                    if (!file) {\n                        return;\n                    }\n\n                    // Verify that the mimetype of the file is supported, in case the accept attribute isn't supported.\n                    const error = CoreFileUploader.isInvalidMimetype(mimetypes, file.name, file.type);\n                    if (error) {\n                        CoreDomUtils.showErrorModal(error);\n\n                        return;\n                    }\n\n                    try {\n                        // Upload the picked file.\n                        const result = await CoreFileUploaderHelper.uploadFileObject(\n                            file,\n                            maxSize,\n                            upload,\n                            allowOffline,\n                            file.name,\n                        );\n\n                        CoreFileUploaderHelper.fileUploaded(result);\n                    } catch (error) {\n                        CoreDomUtils.showErrorModalDefault(\n                            error,\n                            Translate.instant('core.fileuploader.errorreadingfile'),\n                        );\n                    }\n                });\n\n                if (CorePlatform.isIOS()) {\n                    // In iOS, the click on the input stopped working for some reason. We need to put it 1 level higher.\n                    element.parentElement?.appendChild(input);\n\n                    // Animate the button when the input is clicked.\n                    input.addEventListener('mousedown', () => {\n                        element.classList.add('activated');\n                    });\n                    input.addEventListener('mouseup', () => {\n                        setTimeout(() => {\n                            element.classList.remove('activated');\n                        }, 80);\n                    });\n                } else {\n                    element.appendChild(input);\n                }\n            };\n        }\n\n        return handler;\n    }\n\n}\n\nexport const CoreFileUploaderFileHandler = makeSingleton(CoreFileUploaderFileHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}