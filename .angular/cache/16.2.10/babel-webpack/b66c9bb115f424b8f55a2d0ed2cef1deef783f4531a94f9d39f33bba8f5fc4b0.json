{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CorePlatform } from '@services/platform';\nimport { CoreMimetypeUtils } from '@services/utils/mimetype';\n/**\n * Singleton with helper functions for media.\n */\nexport class CoreMedia {\n  // Avoid creating singleton instances.\n  constructor() {\n    // Nothing to do.\n  }\n  /**\n   * Get all source URLs and types for a video or audio.\n   *\n   * @param mediaElement Audio or video element.\n   * @returns List of sources.\n   */\n  static getMediaSources(mediaElement) {\n    const sources = Array.from(mediaElement.querySelectorAll('source')).map(source => ({\n      src: source.src || source.getAttribute('target-src') || '',\n      type: source.type\n    }));\n    if (mediaElement.src) {\n      sources.push({\n        src: mediaElement.src,\n        type: ''\n      });\n    }\n    return sources;\n  }\n  /**\n   * Check if a source needs to be converted to be able to reproduce it.\n   *\n   * @param source Source.\n   * @returns Whether needs conversion.\n   */\n  static sourceNeedsConversion(source) {\n    if (!CorePlatform.isIOS()) {\n      return false;\n    }\n    let extension = source.type ? CoreMimetypeUtils.getExtension(source.type) : undefined;\n    if (!extension) {\n      extension = CoreMimetypeUtils.guessExtensionFromUrl(source.src);\n    }\n    return !!extension && ['ogv', 'webm', 'oga', 'ogg'].includes(extension);\n  }\n  /**\n   * Check if JS player should be used for a certain source.\n   *\n   * @param source Source.\n   * @returns Whether JS player should be used.\n   */\n  static sourceUsesJavascriptPlayer(source) {\n    // For now, only use JS player if the source needs to be converted.\n    return CoreMedia.sourceNeedsConversion(source);\n  }\n  /**\n   * Check if JS player should be used for a certain audio or video.\n   *\n   * @param mediaElement Media element.\n   * @returns Whether JS player should be used.\n   */\n  static mediaUsesJavascriptPlayer(mediaElement) {\n    if (!CorePlatform.isIOS()) {\n      return false;\n    }\n    const sources = CoreMedia.getMediaSources(mediaElement);\n    return sources.some(source => CoreMedia.sourceUsesJavascriptPlayer(source));\n  }\n}","map":{"version":3,"names":["CorePlatform","CoreMimetypeUtils","CoreMedia","constructor","getMediaSources","mediaElement","sources","Array","from","querySelectorAll","map","source","src","getAttribute","type","push","sourceNeedsConversion","isIOS","extension","getExtension","undefined","guessExtensionFromUrl","includes","sourceUsesJavascriptPlayer","mediaUsesJavascriptPlayer","some"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/singletons/media.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CorePlatform } from '@services/platform';\nimport { CoreMimetypeUtils } from '@services/utils/mimetype';\n\n/**\n * Singleton with helper functions for media.\n */\nexport class CoreMedia {\n\n    // Avoid creating singleton instances.\n    private constructor() {\n        // Nothing to do.\n    }\n\n    /**\n     * Get all source URLs and types for a video or audio.\n     *\n     * @param mediaElement Audio or video element.\n     * @returns List of sources.\n     */\n    static getMediaSources(mediaElement: HTMLVideoElement | HTMLAudioElement): CoreMediaSource[] {\n        const sources = Array.from(mediaElement.querySelectorAll('source')).map(source => ({\n            src: source.src || source.getAttribute('target-src') || '',\n            type: source.type,\n        }));\n\n        if (mediaElement.src) {\n            sources.push({\n                src: mediaElement.src,\n                type: '',\n            });\n        }\n\n        return sources;\n    }\n\n    /**\n     * Check if a source needs to be converted to be able to reproduce it.\n     *\n     * @param source Source.\n     * @returns Whether needs conversion.\n     */\n    static sourceNeedsConversion(source: CoreMediaSource): boolean {\n        if (!CorePlatform.isIOS()) {\n            return false;\n        }\n\n        let extension = source.type ? CoreMimetypeUtils.getExtension(source.type) : undefined;\n        if (!extension) {\n            extension = CoreMimetypeUtils.guessExtensionFromUrl(source.src);\n        }\n\n        return !!extension && ['ogv', 'webm', 'oga', 'ogg'].includes(extension);\n    }\n\n    /**\n     * Check if JS player should be used for a certain source.\n     *\n     * @param source Source.\n     * @returns Whether JS player should be used.\n     */\n    static sourceUsesJavascriptPlayer(source: CoreMediaSource): boolean {\n        // For now, only use JS player if the source needs to be converted.\n        return CoreMedia.sourceNeedsConversion(source);\n    }\n\n    /**\n     * Check if JS player should be used for a certain audio or video.\n     *\n     * @param mediaElement Media element.\n     * @returns Whether JS player should be used.\n     */\n    static mediaUsesJavascriptPlayer(mediaElement: HTMLVideoElement | HTMLAudioElement): boolean {\n        if (!CorePlatform.isIOS()) {\n            return false;\n        }\n\n        const sources = CoreMedia.getMediaSources(mediaElement);\n\n        return sources.some(source => CoreMedia.sourceUsesJavascriptPlayer(source));\n    }\n\n}\n\n/**\n * Source of a media element.\n */\nexport type CoreMediaSource = {\n    src: string;\n    type?: string;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,iBAAiB,QAAQ,0BAA0B;AAE5D;;;AAGA,OAAM,MAAOC,SAAS;EAElB;EACAC,YAAA;IACI;EAAA;EAGJ;;;;;;EAMA,OAAOC,eAAeA,CAACC,YAAiD;IACpE,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAACH,YAAY,CAACI,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAACC,GAAG,CAACC,MAAM,KAAK;MAC/EC,GAAG,EAAED,MAAM,CAACC,GAAG,IAAID,MAAM,CAACE,YAAY,CAAC,YAAY,CAAC,IAAI,EAAE;MAC1DC,IAAI,EAAEH,MAAM,CAACG;KAChB,CAAC,CAAC;IAEH,IAAIT,YAAY,CAACO,GAAG,EAAE;MAClBN,OAAO,CAACS,IAAI,CAAC;QACTH,GAAG,EAAEP,YAAY,CAACO,GAAG;QACrBE,IAAI,EAAE;OACT,CAAC;;IAGN,OAAOR,OAAO;EAClB;EAEA;;;;;;EAMA,OAAOU,qBAAqBA,CAACL,MAAuB;IAChD,IAAI,CAACX,YAAY,CAACiB,KAAK,EAAE,EAAE;MACvB,OAAO,KAAK;;IAGhB,IAAIC,SAAS,GAAGP,MAAM,CAACG,IAAI,GAAGb,iBAAiB,CAACkB,YAAY,CAACR,MAAM,CAACG,IAAI,CAAC,GAAGM,SAAS;IACrF,IAAI,CAACF,SAAS,EAAE;MACZA,SAAS,GAAGjB,iBAAiB,CAACoB,qBAAqB,CAACV,MAAM,CAACC,GAAG,CAAC;;IAGnE,OAAO,CAAC,CAACM,SAAS,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAACI,QAAQ,CAACJ,SAAS,CAAC;EAC3E;EAEA;;;;;;EAMA,OAAOK,0BAA0BA,CAACZ,MAAuB;IACrD;IACA,OAAOT,SAAS,CAACc,qBAAqB,CAACL,MAAM,CAAC;EAClD;EAEA;;;;;;EAMA,OAAOa,yBAAyBA,CAACnB,YAAiD;IAC9E,IAAI,CAACL,YAAY,CAACiB,KAAK,EAAE,EAAE;MACvB,OAAO,KAAK;;IAGhB,MAAMX,OAAO,GAAGJ,SAAS,CAACE,eAAe,CAACC,YAAY,CAAC;IAEvD,OAAOC,OAAO,CAACmB,IAAI,CAACd,MAAM,IAAIT,SAAS,CAACqB,0BAA0B,CAACZ,MAAM,CAAC,CAAC;EAC/E"},"metadata":{},"sourceType":"module","externalDependencies":[]}