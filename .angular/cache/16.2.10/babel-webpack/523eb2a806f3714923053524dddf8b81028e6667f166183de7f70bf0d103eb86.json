{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreH5P } from '@features/h5p/services/h5p';\nimport { CoreH5PCore, CoreH5PDisplayOptionBehaviour } from './core';\nimport { CONTENT_TABLE_NAME, LIBRARIES_CACHEDASSETS_TABLE_NAME, LIBRARIES_TABLE_NAME, LIBRARY_DEPENDENCIES_TABLE_NAME, CONTENTS_LIBRARIES_TABLE_NAME } from '../services/database/h5p';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreH5PMetadata } from './metadata';\nimport { Translate } from '@singletons';\nimport { SQLiteDB } from '@classes/sqlitedb';\n/**\n * Equivalent to Moodle's implementation of H5PFrameworkInterface.\n */\nexport class CoreH5PFramework {\n  /**\n   * Will clear filtered params for all the content that uses the specified libraries.\n   * This means that the content dependencies will have to be rebuilt and the parameters re-filtered.\n   *\n   * @param libraryIds Array of library ids.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  clearFilteredParameters(libraryIds, siteId) {\n    return _asyncToGenerator(function* () {\n      if (!libraryIds || !libraryIds.length) {\n        return;\n      }\n      const db = yield CoreSites.getSiteDb(siteId);\n      const whereAndParams = SQLiteDB.getInOrEqual(libraryIds);\n      whereAndParams.sql = 'mainlibraryid ' + whereAndParams.sql;\n      yield db.updateRecordsWhere(CONTENT_TABLE_NAME, {\n        filtered: null\n      }, whereAndParams.sql, whereAndParams.params);\n    })();\n  }\n  /**\n   * Delete cached assets from DB.\n   *\n   * @param libraryId Library identifier.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the removed entries.\n   */\n  deleteCachedAssets(libraryId, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      // Get all the hashes that use this library.\n      const entries = yield db.getRecords(LIBRARIES_CACHEDASSETS_TABLE_NAME, {\n        libraryid: libraryId\n      });\n      const hashes = entries.map(entry => entry.hash);\n      if (hashes.length) {\n        // Delete the entries from DB.\n        yield db.deleteRecordsList(LIBRARIES_CACHEDASSETS_TABLE_NAME, 'hash', hashes);\n      }\n      return entries;\n    })();\n  }\n  /**\n   * Delete content data from DB.\n   *\n   * @param id Content ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  deleteContentData(id, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      // The user content should be reset (instead of removed), because this method is called when H5P content needs\n      // to be updated too (and the previous states must be kept, but reset).\n      yield _this.resetContentUserData(id, siteId);\n      yield Promise.all([\n      // Delete the content data.\n      db.deleteRecords(CONTENT_TABLE_NAME, {\n        id\n      }),\n      // Remove content library dependencies.\n      _this.deleteLibraryUsage(id, siteId)]);\n    })();\n  }\n  /**\n   * Delete library data from DB.\n   *\n   * @param id Library ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  deleteLibrary(id, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      yield db.deleteRecords(LIBRARIES_TABLE_NAME, {\n        id\n      });\n    })();\n  }\n  /**\n   * Delete all dependencies belonging to given library.\n   *\n   * @param libraryId Library ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  deleteLibraryDependencies(libraryId, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      yield db.deleteRecords(LIBRARY_DEPENDENCIES_TABLE_NAME, {\n        libraryid: libraryId\n      });\n    })();\n  }\n  /**\n   * Delete what libraries a content item is using.\n   *\n   * @param id Package ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  deleteLibraryUsage(id, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      yield db.deleteRecords(CONTENTS_LIBRARIES_TABLE_NAME, {\n        h5pid: id\n      });\n    })();\n  }\n  /**\n   * Get all conent data from DB.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the list of content data.\n   */\n  getAllContentData(siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      return db.getAllRecords(CONTENT_TABLE_NAME);\n    })();\n  }\n  /**\n   * Get conent data from DB.\n   *\n   * @param id Content ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the content data.\n   */\n  getContentData(id, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      return db.getRecord(CONTENT_TABLE_NAME, {\n        id\n      });\n    })();\n  }\n  /**\n   * Get conent data from DB.\n   *\n   * @param fileUrl H5P file URL.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the content data.\n   */\n  getContentDataByUrl(fileUrl, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const db = site.getDb();\n      // Try to use the folder name, it should be more reliable than the URL.\n      const folderName = yield CoreH5P.h5pCore.h5pFS.getContentFolderNameByUrl(fileUrl, site.getId());\n      try {\n        return yield db.getRecord(CONTENT_TABLE_NAME, {\n          foldername: folderName\n        });\n      } catch (error) {\n        // Cannot get folder name, the h5p file was probably deleted. Just use the URL.\n        return db.getRecord(CONTENT_TABLE_NAME, {\n          fileurl: fileUrl\n        });\n      }\n    })();\n  }\n  /**\n   * Get the latest library version.\n   *\n   * @param machineName The library's machine name.\n   * @returns Promise resolved with the latest library version data.\n   */\n  getLatestLibraryVersion(machineName, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      try {\n        const records = yield db.getRecords(LIBRARIES_TABLE_NAME, {\n          machinename: machineName\n        }, 'majorversion DESC, minorversion DESC, patchversion DESC', '*', 0, 1);\n        if (records && records[0]) {\n          return _this2.parseLibDBData(records[0]);\n        }\n      } catch (error) {\n        // Library not found.\n      }\n      throw new CoreError(`Missing required library: ${machineName}`);\n    })();\n  }\n  /**\n   * Get a library data stored in DB.\n   *\n   * @param machineName Machine name.\n   * @param majorVersion Major version number.\n   * @param minorVersion Minor version number.\n   * @param siteId The site ID. If not defined, current site.\n   * @returns Promise resolved with the library data, rejected if not found.\n   */\n  getLibrary(machineName, majorVersion, minorVersion, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      const libraries = yield db.getRecords(LIBRARIES_TABLE_NAME, {\n        machinename: machineName,\n        majorversion: majorVersion,\n        minorversion: minorVersion\n      });\n      if (!libraries.length) {\n        throw new CoreError('Libary not found.');\n      }\n      return _this3.parseLibDBData(libraries[0]);\n    })();\n  }\n  /**\n   * Get a library data stored in DB.\n   *\n   * @param libraryData Library data.\n   * @param siteId The site ID. If not defined, current site.\n   * @returns Promise resolved with the library data, rejected if not found.\n   */\n  getLibraryByData(libraryData, siteId) {\n    return this.getLibrary(libraryData.machineName, libraryData.majorVersion, libraryData.minorVersion, siteId);\n  }\n  /**\n   * Get a library data stored in DB by ID.\n   *\n   * @param id Library ID.\n   * @param siteId The site ID. If not defined, current site.\n   * @returns Promise resolved with the library data, rejected if not found.\n   */\n  getLibraryById(id, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      const library = yield db.getRecord(LIBRARIES_TABLE_NAME, {\n        id\n      });\n      return _this4.parseLibDBData(library);\n    })();\n  }\n  /**\n   * Get a library ID. If not found, return null.\n   *\n   * @param machineName Machine name.\n   * @param majorVersion Major version number.\n   * @param minorVersion Minor version number.\n   * @param siteId The site ID. If not defined, current site.\n   * @returns Promise resolved with the library ID, null if not found.\n   */\n  getLibraryId(machineName, majorVersion, minorVersion, siteId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const library = yield _this5.getLibrary(machineName, majorVersion, minorVersion, siteId);\n        return library.id || undefined;\n      } catch (error) {\n        return undefined;\n      }\n    })();\n  }\n  /**\n   * Get a library ID. If not found, return null.\n   *\n   * @param libraryData Library data.\n   * @param siteId The site ID. If not defined, current site.\n   * @returns Promise resolved with the library ID, null if not found.\n   */\n  getLibraryIdByData(libraryData, siteId) {\n    return this.getLibraryId(libraryData.machineName, libraryData.majorVersion, libraryData.minorVersion, siteId);\n  }\n  /**\n   * Get the default behaviour for the display option defined.\n   *\n   * @param name Identifier for the setting.\n   * @param defaultValue Optional default value if settings is not set.\n   * @returns Return the value for this display option.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getOption(name, defaultValue) {\n    // For now, all them are disabled by default, so only will be rendered when defined in the display options.\n    return CoreH5PDisplayOptionBehaviour.CONTROLLED_BY_AUTHOR_DEFAULT_OFF;\n  }\n  /**\n   * Check whether the user has permission to execute an action.\n   *\n   * @param permission Permission to check.\n   * @param id H5P package id.\n   * @returns Whether the user has permission to execute an action.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  hasPermission(permission, id) {\n    // H5P capabilities have not been introduced.\n    return true;\n  }\n  /**\n   * Determines if content slug is used.\n   *\n   * @param slug The content slug.\n   * @returns Whether the content slug is used\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isContentSlugAvailable(slug) {\n    // By default the slug should be available as it's currently generated as a unique value for each h5p content.\n    return true;\n  }\n  /**\n   * Check whether a library is a patched version of the one installed.\n   *\n   * @param library Library to check.\n   * @param dbData Installed library. If not supplied it will be calculated.\n   * @returns Promise resolved with boolean: whether it's a patched library.\n   */\n  isPatchedLibrary(library, dbData) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!dbData) {\n        dbData = yield _this6.getLibraryByData(library);\n      }\n      return library.patchVersion > dbData.patchversion;\n    })();\n  }\n  /**\n   * Convert list of library parameter values to csv.\n   *\n   * @param libraryData Library data as found in library.json files.\n   * @param key Key that should be found in libraryData.\n   * @param searchParam The library parameter (Default: 'path').\n   * @returns Library parameter values separated by ', '\n   */\n  libraryParameterValuesToCsv(libraryData, key, searchParam = 'path') {\n    if (libraryData[key] !== undefined) {\n      const parameterValues = [];\n      libraryData[key].forEach(file => {\n        for (const index in file) {\n          if (index === searchParam) {\n            parameterValues.push(file[index]);\n          }\n        }\n      });\n      return parameterValues.join(',');\n    }\n    return '';\n  }\n  /**\n   * Load addon libraries.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the addon libraries.\n   */\n  loadAddons(siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      const query = 'SELECT l1.id AS libraryId, l1.machinename AS machineName, ' + 'l1.majorversion AS majorVersion, l1.minorversion AS minorVersion, ' + 'l1.patchversion AS patchVersion, l1.addto AS addTo, ' + 'l1.preloadedjs AS preloadedJs, l1.preloadedcss AS preloadedCss ' + 'FROM ' + LIBRARIES_TABLE_NAME + ' l1 ' + 'LEFT JOIN ' + LIBRARIES_TABLE_NAME + ' l2 ON l1.machinename = l2.machinename AND (' + 'l1.majorversion < l2.majorversion OR (l1.majorversion = l2.majorversion AND ' + 'l1.minorversion < l2.minorversion)) ' + 'WHERE l1.addto IS NOT NULL AND l2.machinename IS NULL';\n      const result = yield db.execute(query);\n      const addons = [];\n      for (let i = 0; i < result.rows.length; i++) {\n        addons.push(_this7.parseLibAddonData(result.rows.item(i)));\n      }\n      return addons;\n    })();\n  }\n  /**\n   * Load content data from DB.\n   *\n   * @param id Content ID.\n   * @param fileUrl H5P file URL. Required if id is not provided.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the content data.\n   */\n  loadContent(id, fileUrl, siteId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      let contentData;\n      if (id) {\n        contentData = yield _this8.getContentData(id, siteId);\n      } else if (fileUrl) {\n        contentData = yield _this8.getContentDataByUrl(fileUrl, siteId);\n      } else {\n        throw new CoreError('No id or fileUrl supplied to loadContent.');\n      }\n      // Load the main library data.\n      const libData = yield _this8.getLibraryById(contentData.mainlibraryid, siteId);\n      // Map the values to the names used by the H5P core (it's the same Moodle web does).\n      const content = {\n        id: contentData.id,\n        params: contentData.jsoncontent,\n        embedType: 'iframe',\n        disable: null,\n        folderName: contentData.foldername,\n        title: libData.title,\n        slug: CoreH5PCore.slugify(libData.title) + '-' + contentData.id,\n        filtered: contentData.filtered,\n        libraryId: libData.id,\n        libraryName: libData.machinename,\n        libraryMajorVersion: libData.majorversion,\n        libraryMinorVersion: libData.minorversion,\n        libraryEmbedTypes: libData.embedtypes,\n        libraryFullscreen: libData.fullscreen,\n        metadata: null\n      };\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const params = CoreTextUtils.parseJSON(contentData.jsoncontent);\n      if (!params.metadata) {\n        params.metadata = {};\n      }\n      // Add title to metadata.\n      if (typeof params.title === 'string' && !params.metadata.title) {\n        params.metadata.title = params.title;\n      }\n      content.metadata = params.metadata;\n      content.params = JSON.stringify(params.params !== undefined && params.params != null ? params.params : params);\n      return content;\n    })();\n  }\n  /**\n   * Load dependencies for the given content of the given type.\n   *\n   * @param id Content ID.\n   * @param type The dependency type.\n   * @returns Content dependencies, indexed by machine name.\n   */\n  loadContentDependencies(id, type, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      let query = 'SELECT hl.id AS libraryId, hl.machinename AS machineName, ' + 'hl.majorversion AS majorVersion, hl.minorversion AS minorVersion, ' + 'hl.patchversion AS patchVersion, hl.preloadedcss AS preloadedCss, ' + 'hl.preloadedjs AS preloadedJs, hcl.dropcss AS dropCss, ' + 'hcl.dependencytype as dependencyType ' + 'FROM ' + CONTENTS_LIBRARIES_TABLE_NAME + ' hcl ' + 'JOIN ' + LIBRARIES_TABLE_NAME + ' hl ON hcl.libraryid = hl.id ' + 'WHERE hcl.h5pid = ?';\n      const queryArgs = [];\n      queryArgs.push(id);\n      if (type) {\n        query += ' AND hcl.dependencytype = ?';\n        queryArgs.push(type);\n      }\n      query += ' ORDER BY hcl.weight';\n      const result = yield db.execute(query, queryArgs);\n      const dependencies = {};\n      for (let i = 0; i < result.rows.length; i++) {\n        const dependency = result.rows.item(i);\n        dependencies[dependency.machineName] = dependency;\n      }\n      return dependencies;\n    })();\n  }\n  /**\n   * Loads a library and its dependencies.\n   *\n   * @param machineName The library's machine name.\n   * @param majorVersion The library's major version.\n   * @param minorVersion The library's minor version.\n   * @param siteId The site ID. If not defined, current site.\n   * @returns Promise resolved with the library data.\n   */\n  loadLibrary(machineName, majorVersion, minorVersion, siteId) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      // First get the library data from DB.\n      const library = yield _this9.getLibrary(machineName, majorVersion, minorVersion, siteId);\n      const libraryData = {\n        libraryId: library.id,\n        title: library.title,\n        machineName: library.machinename,\n        majorVersion: library.majorversion,\n        minorVersion: library.minorversion,\n        patchVersion: library.patchversion,\n        runnable: library.runnable,\n        fullscreen: library.fullscreen,\n        embedTypes: library.embedtypes,\n        preloadedJs: library.preloadedjs || undefined,\n        preloadedCss: library.preloadedcss || undefined,\n        dropLibraryCss: library.droplibrarycss || undefined,\n        semantics: library.semantics || undefined,\n        preloadedDependencies: [],\n        dynamicDependencies: [],\n        editorDependencies: []\n      };\n      // Now get the dependencies.\n      const sql = 'SELECT hl.id, hl.machinename, hl.majorversion, hl.minorversion, hll.dependencytype ' + 'FROM ' + LIBRARY_DEPENDENCIES_TABLE_NAME + ' hll ' + 'JOIN ' + LIBRARIES_TABLE_NAME + ' hl ON hll.requiredlibraryid = hl.id ' + 'WHERE hll.libraryid = ? ' + 'ORDER BY hl.id ASC';\n      const sqlParams = [library.id];\n      const db = yield CoreSites.getSiteDb(siteId);\n      const result = yield db.execute(sql, sqlParams);\n      for (let i = 0; i < result.rows.length; i++) {\n        const dependency = result.rows.item(i);\n        const key = dependency.dependencytype + 'Dependencies';\n        libraryData[key].push({\n          machineName: dependency.machinename,\n          majorVersion: dependency.majorversion,\n          minorVersion: dependency.minorversion\n        });\n      }\n      return libraryData;\n    })();\n  }\n  /**\n   * Parse library addon data.\n   *\n   * @param library Library addon data.\n   * @returns Parsed library.\n   */\n  parseLibAddonData(library) {\n    const parsedLib = library;\n    parsedLib.addTo = CoreTextUtils.parseJSON(library.addTo, null);\n    return parsedLib;\n  }\n  /**\n   * Parse library DB data.\n   *\n   * @param library Library DB data.\n   * @returns Parsed library.\n   */\n  parseLibDBData(library) {\n    return Object.assign(library, {\n      semantics: library.semantics ? CoreTextUtils.parseJSON(library.semantics, null) : null,\n      addto: library.addto ? CoreTextUtils.parseJSON(library.addto, null) : null,\n      metadatasettings: library.metadatasettings ? CoreTextUtils.parseJSON(library.metadatasettings, null) : null\n    });\n  }\n  /**\n   * Resets marked user data for the given content.\n   *\n   * @param contentId Content ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  resetContentUserData(contentId, siteId) {\n    return _asyncToGenerator(function* () {})();\n  } // In LMS, all the states of the component are deleted here.\n  // This isn't possible in the app because we lack the course ID, which is needed for example by h5pactivity.\n  /**\n   * Stores hash keys for cached assets, aggregated JavaScripts and stylesheets, and connects it to libraries so that we\n   * know which cache file to delete when a library is updated.\n   *\n   * @param hash Hash key for the given libraries.\n   * @param dependencies List of dependencies used to create the key.\n   * @param folderName The name of the folder that contains the H5P.\n   * @param siteId The site ID.\n   * @returns Promise resolved when done.\n   */\n  saveCachedAssets(hash, dependencies, folderName, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      yield Promise.all(Object.keys(dependencies).map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (key) {\n          const data = {\n            hash: key,\n            libraryid: dependencies[key].libraryId,\n            foldername: folderName\n          };\n          yield db.insertRecord(LIBRARIES_CACHEDASSETS_TABLE_NAME, data);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n  /**\n   * Save library data in DB.\n   *\n   * @param libraryData Library data to save.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  saveLibraryData(libraryData, siteId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      // Some special properties needs some checking and converting before they can be saved.\n      const preloadedJS = _this10.libraryParameterValuesToCsv(libraryData, 'preloadedJs', 'path');\n      const preloadedCSS = _this10.libraryParameterValuesToCsv(libraryData, 'preloadedCss', 'path');\n      const dropLibraryCSS = _this10.libraryParameterValuesToCsv(libraryData, 'dropLibraryCss', 'machineName');\n      if (libraryData.semantics === undefined) {\n        libraryData.semantics = [];\n      }\n      if (libraryData.fullscreen === undefined) {\n        libraryData.fullscreen = 0;\n      }\n      let embedTypes = '';\n      if (libraryData.embedTypes !== undefined) {\n        embedTypes = libraryData.embedTypes.join(', ');\n      }\n      const site = yield CoreSites.getSite(siteId);\n      const db = site.getDb();\n      const data = {\n        title: libraryData.title,\n        machinename: libraryData.machineName,\n        majorversion: libraryData.majorVersion,\n        minorversion: libraryData.minorVersion,\n        patchversion: libraryData.patchVersion,\n        runnable: libraryData.runnable,\n        fullscreen: libraryData.fullscreen,\n        embedtypes: embedTypes,\n        preloadedjs: preloadedJS,\n        preloadedcss: preloadedCSS,\n        droplibrarycss: dropLibraryCSS,\n        semantics: libraryData.semantics !== undefined ? JSON.stringify(libraryData.semantics) : null,\n        addto: libraryData.addTo !== undefined ? JSON.stringify(libraryData.addTo) : null,\n        metadatasettings: libraryData.metadataSettings !== undefined ? CoreH5PMetadata.boolifyAndEncodeSettings(libraryData.metadataSettings) : null\n      };\n      if (libraryData.libraryId) {\n        data.id = libraryData.libraryId;\n      }\n      yield db.insertRecord(LIBRARIES_TABLE_NAME, data);\n      if (!data.id) {\n        // New library. Get its ID.\n        const entry = yield db.getRecord(LIBRARIES_TABLE_NAME, data);\n        libraryData.libraryId = entry.id;\n      } else {\n        // Updated libary. Remove old dependencies.\n        yield _this10.deleteLibraryDependencies(data.id, site.getId());\n      }\n    })();\n  }\n  /**\n   * Save what libraries a library is depending on.\n   *\n   * @param library Library data for the library we're saving dependencies for.\n   * @param dependencies List of dependencies as associative arrays containing machineName, majorVersion, minorVersion.\n   * @param dependencyType The type of dependency.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  saveLibraryDependencies(library, dependencies, dependencyType, siteId) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      yield Promise.all(dependencies.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (dependency) {\n          // Get the ID of the library.\n          const dependencyId = yield _this11.getLibraryIdByData(dependency, siteId);\n          if (!dependencyId) {\n            // Missing dependency. It should have been detected before installing the package.\n            throw new CoreError(Translate.instant('core.h5p.missingdependency', {\n              $a: {\n                lib: CoreH5PCore.libraryToString(library),\n                dep: CoreH5PCore.libraryToString(dependency)\n              }\n            }));\n          }\n          // Create the relation.\n          const entry = {\n            libraryid: library.libraryId,\n            requiredlibraryid: dependencyId,\n            dependencytype: dependencyType\n          };\n          yield db.insertRecord(LIBRARY_DEPENDENCIES_TABLE_NAME, entry);\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n  /**\n   * Saves what libraries the content uses.\n   *\n   * @param id Id identifying the package.\n   * @param librariesInUse List of libraries the content uses.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  saveLibraryUsage(id, librariesInUse, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      // Calculate the CSS to drop.\n      const dropLibraryCssList = {};\n      for (const key in librariesInUse) {\n        const dependency = librariesInUse[key];\n        if ('dropLibraryCss' in dependency.library && dependency.library.dropLibraryCss) {\n          const split = dependency.library.dropLibraryCss.split(', ');\n          split.forEach(css => {\n            dropLibraryCssList[css] = css;\n          });\n        }\n      }\n      // Now save the uusage.\n      yield Promise.all(Object.keys(librariesInUse).map(key => {\n        const dependency = librariesInUse[key];\n        const data = {\n          h5pid: id,\n          libraryid: dependency.library.libraryId,\n          dependencytype: dependency.type,\n          dropcss: dropLibraryCssList[dependency.library.machineName] ? 1 : 0,\n          weight: dependency.weight\n        };\n        return db.insertRecord(CONTENTS_LIBRARIES_TABLE_NAME, data);\n      }));\n    })();\n  }\n  /**\n   * Save content data in DB and clear cache.\n   *\n   * @param content Content to save.\n   * @param folderName The name of the folder that contains the H5P.\n   * @param fileUrl The online URL of the package.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with content ID.\n   */\n  updateContent(content, folderName, fileUrl, siteId) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      var _content$library;\n      const db = yield CoreSites.getSiteDb(siteId);\n      // If the libraryid declared in the package is empty, get the latest version.\n      if (content.library && content.library.libraryId === undefined) {\n        const mainLibrary = yield _this12.getLatestLibraryVersion(content.library.machineName, siteId);\n        content.library.libraryId = mainLibrary.id;\n      }\n      // Add title to 'params' to be able to add it to metadata later.\n      if (typeof content.title === 'string') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const params = CoreTextUtils.parseJSON(content.params || '{}');\n        params.title = content.title;\n        content.params = JSON.stringify(params);\n      }\n      const data = {\n        id: undefined,\n        jsoncontent: content.params,\n        mainlibraryid: (_content$library = content.library) === null || _content$library === void 0 ? void 0 : _content$library.libraryId,\n        timemodified: Date.now(),\n        filtered: null,\n        foldername: folderName,\n        fileurl: fileUrl,\n        timecreated: undefined\n      };\n      let contentId;\n      if (content.id !== undefined) {\n        data.id = content.id;\n        contentId = content.id;\n      } else {\n        data.timecreated = data.timemodified;\n      }\n      yield db.insertRecord(CONTENT_TABLE_NAME, data);\n      if (!contentId) {\n        // New content. Get its ID.\n        const entry = yield db.getRecord(CONTENT_TABLE_NAME, data);\n        content.id = entry.id;\n        contentId = content.id;\n      }\n      return contentId;\n    })();\n  }\n  /**\n   * This will update selected fields on the given content.\n   *\n   * @param id Content identifier.\n   * @param fields Object with the fields to update.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  updateContentFields(id, fields, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      const data = Object.assign({}, fields);\n      yield db.updateRecords(CONTENT_TABLE_NAME, data, {\n        id\n      });\n    })();\n  }\n}","map":{"version":3,"names":["CoreSites","CoreTextUtils","CoreH5P","CoreH5PCore","CoreH5PDisplayOptionBehaviour","CONTENT_TABLE_NAME","LIBRARIES_CACHEDASSETS_TABLE_NAME","LIBRARIES_TABLE_NAME","LIBRARY_DEPENDENCIES_TABLE_NAME","CONTENTS_LIBRARIES_TABLE_NAME","CoreError","CoreH5PMetadata","Translate","SQLiteDB","CoreH5PFramework","clearFilteredParameters","libraryIds","siteId","_asyncToGenerator","length","db","getSiteDb","whereAndParams","getInOrEqual","sql","updateRecordsWhere","filtered","params","deleteCachedAssets","libraryId","entries","getRecords","libraryid","hashes","map","entry","hash","deleteRecordsList","deleteContentData","id","_this","resetContentUserData","Promise","all","deleteRecords","deleteLibraryUsage","deleteLibrary","deleteLibraryDependencies","h5pid","getAllContentData","getAllRecords","getContentData","getRecord","getContentDataByUrl","fileUrl","site","getSite","getDb","folderName","h5pCore","h5pFS","getContentFolderNameByUrl","getId","foldername","error","fileurl","getLatestLibraryVersion","machineName","_this2","records","machinename","parseLibDBData","getLibrary","majorVersion","minorVersion","_this3","libraries","majorversion","minorversion","getLibraryByData","libraryData","getLibraryById","_this4","library","getLibraryId","_this5","undefined","getLibraryIdByData","getOption","name","defaultValue","CONTROLLED_BY_AUTHOR_DEFAULT_OFF","hasPermission","permission","isContentSlugAvailable","slug","isPatchedLibrary","dbData","_this6","patchVersion","patchversion","libraryParameterValuesToCsv","key","searchParam","parameterValues","forEach","file","index","push","join","loadAddons","_this7","query","result","execute","addons","i","rows","parseLibAddonData","item","loadContent","_this8","getCurrentSiteId","contentData","libData","mainlibraryid","content","jsoncontent","embedType","disable","title","slugify","libraryName","libraryMajorVersion","libraryMinorVersion","libraryEmbedTypes","embedtypes","libraryFullscreen","fullscreen","metadata","parseJSON","JSON","stringify","loadContentDependencies","type","queryArgs","dependencies","dependency","loadLibrary","_this9","runnable","embedTypes","preloadedJs","preloadedjs","preloadedCss","preloadedcss","dropLibraryCss","droplibrarycss","semantics","preloadedDependencies","dynamicDependencies","editorDependencies","sqlParams","dependencytype","parsedLib","addTo","Object","assign","addto","metadatasettings","contentId","saveCachedAssets","keys","_ref","data","insertRecord","_x","apply","arguments","saveLibraryData","_this10","preloadedJS","preloadedCSS","dropLibraryCSS","metadataSettings","boolifyAndEncodeSettings","saveLibraryDependencies","dependencyType","_this11","_ref2","dependencyId","instant","$a","lib","libraryToString","dep","requiredlibraryid","_x2","saveLibraryUsage","librariesInUse","dropLibraryCssList","split","css","dropcss","weight","updateContent","_this12","_content$library","mainLibrary","timemodified","Date","now","timecreated","updateContentFields","fields","updateRecords"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/h5p/classes/framework.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSites } from '@services/sites';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreH5P } from '@features/h5p/services/h5p';\nimport {\n    CoreH5PCore,\n    CoreH5PDisplayOptionBehaviour,\n    CoreH5PContentDependencyData,\n    CoreH5PLibraryData,\n    CoreH5PLibraryAddonData,\n    CoreH5PContentDepsTreeDependency,\n    CoreH5PLibraryBasicData,\n    CoreH5PLibraryBasicDataWithPatch,\n} from './core';\nimport {\n    CONTENT_TABLE_NAME,\n    LIBRARIES_CACHEDASSETS_TABLE_NAME,\n    CoreH5PLibraryCachedAssetsDBRecord,\n    LIBRARIES_TABLE_NAME,\n    LIBRARY_DEPENDENCIES_TABLE_NAME,\n    CONTENTS_LIBRARIES_TABLE_NAME,\n    CoreH5PContentDBRecord,\n    CoreH5PLibraryDBRecord,\n    CoreH5PLibraryDependencyDBRecord,\n    CoreH5PContentsLibraryDBRecord,\n} from '../services/database/h5p';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreH5PSemantics } from './content-validator';\nimport { CoreH5PContentBeingSaved, CoreH5PLibraryBeingSaved } from './storage';\nimport { CoreH5PLibraryAddTo, CoreH5PLibraryMetadataSettings } from './validator';\nimport { CoreH5PMetadata } from './metadata';\nimport { Translate } from '@singletons';\nimport { SQLiteDB } from '@classes/sqlitedb';\n\n/**\n * Equivalent to Moodle's implementation of H5PFrameworkInterface.\n */\nexport class CoreH5PFramework {\n\n    /**\n     * Will clear filtered params for all the content that uses the specified libraries.\n     * This means that the content dependencies will have to be rebuilt and the parameters re-filtered.\n     *\n     * @param libraryIds Array of library ids.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async clearFilteredParameters(libraryIds: number[], siteId?: string): Promise<void> {\n        if (!libraryIds || !libraryIds.length) {\n            return;\n        }\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        const whereAndParams = SQLiteDB.getInOrEqual(libraryIds);\n        whereAndParams.sql = 'mainlibraryid ' + whereAndParams.sql;\n\n        await db.updateRecordsWhere(CONTENT_TABLE_NAME, { filtered: null }, whereAndParams.sql, whereAndParams.params);\n    }\n\n    /**\n     * Delete cached assets from DB.\n     *\n     * @param libraryId Library identifier.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the removed entries.\n     */\n    async deleteCachedAssets(libraryId: number, siteId?: string): Promise<CoreH5PLibraryCachedAssetsDBRecord[]> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        // Get all the hashes that use this library.\n        const entries = await db.getRecords<CoreH5PLibraryCachedAssetsDBRecord>(\n            LIBRARIES_CACHEDASSETS_TABLE_NAME,\n            { libraryid: libraryId },\n        );\n\n        const hashes = entries.map((entry) => entry.hash);\n\n        if (hashes.length) {\n            // Delete the entries from DB.\n            await db.deleteRecordsList(LIBRARIES_CACHEDASSETS_TABLE_NAME, 'hash', hashes);\n        }\n\n        return entries;\n    }\n\n    /**\n     * Delete content data from DB.\n     *\n     * @param id Content ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async deleteContentData(id: number, siteId?: string): Promise<void> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        // The user content should be reset (instead of removed), because this method is called when H5P content needs\n        // to be updated too (and the previous states must be kept, but reset).\n        await this.resetContentUserData(id, siteId);\n\n        await Promise.all([\n            // Delete the content data.\n            db.deleteRecords(CONTENT_TABLE_NAME, { id }),\n\n            // Remove content library dependencies.\n            this.deleteLibraryUsage(id, siteId),\n        ]);\n    }\n\n    /**\n     * Delete library data from DB.\n     *\n     * @param id Library ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async deleteLibrary(id: number, siteId?: string): Promise<void> {\n        const db = await CoreSites.getSiteDb(siteId);\n\n        await db.deleteRecords(LIBRARIES_TABLE_NAME, { id });\n    }\n\n    /**\n     * Delete all dependencies belonging to given library.\n     *\n     * @param libraryId Library ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async deleteLibraryDependencies(libraryId: number, siteId?: string): Promise<void> {\n        const db = await CoreSites.getSiteDb(siteId);\n\n        await db.deleteRecords(LIBRARY_DEPENDENCIES_TABLE_NAME, { libraryid: libraryId });\n    }\n\n    /**\n     * Delete what libraries a content item is using.\n     *\n     * @param id Package ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async deleteLibraryUsage(id: number, siteId?: string): Promise<void> {\n        const db = await CoreSites.getSiteDb(siteId);\n\n        await db.deleteRecords(CONTENTS_LIBRARIES_TABLE_NAME, { h5pid: id });\n    }\n\n    /**\n     * Get all conent data from DB.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the list of content data.\n     */\n    async getAllContentData(siteId?: string): Promise<CoreH5PContentDBRecord[]> {\n        const db = await CoreSites.getSiteDb(siteId);\n\n        return db.getAllRecords<CoreH5PContentDBRecord>(CONTENT_TABLE_NAME);\n    }\n\n    /**\n     * Get conent data from DB.\n     *\n     * @param id Content ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the content data.\n     */\n    async getContentData(id: number, siteId?: string): Promise<CoreH5PContentDBRecord> {\n        const db = await CoreSites.getSiteDb(siteId);\n\n        return db.getRecord<CoreH5PContentDBRecord>(CONTENT_TABLE_NAME, { id });\n    }\n\n    /**\n     * Get conent data from DB.\n     *\n     * @param fileUrl H5P file URL.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the content data.\n     */\n    async getContentDataByUrl(fileUrl: string, siteId?: string): Promise<CoreH5PContentDBRecord> {\n        const site = await CoreSites.getSite(siteId);\n\n        const db = site.getDb();\n\n        // Try to use the folder name, it should be more reliable than the URL.\n        const folderName = await CoreH5P.h5pCore.h5pFS.getContentFolderNameByUrl(fileUrl, site.getId());\n\n        try {\n            return await db.getRecord<CoreH5PContentDBRecord>(CONTENT_TABLE_NAME, { foldername: folderName });\n        } catch (error) {\n            // Cannot get folder name, the h5p file was probably deleted. Just use the URL.\n            return db.getRecord<CoreH5PContentDBRecord>(CONTENT_TABLE_NAME, { fileurl: fileUrl });\n        }\n    }\n\n    /**\n     * Get the latest library version.\n     *\n     * @param machineName The library's machine name.\n     * @returns Promise resolved with the latest library version data.\n     */\n    async getLatestLibraryVersion(machineName: string, siteId?: string): Promise<CoreH5PLibraryParsedDBRecord> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        try {\n            const records = await db.getRecords<CoreH5PLibraryDBRecord>(\n                LIBRARIES_TABLE_NAME,\n                { machinename: machineName },\n                'majorversion DESC, minorversion DESC, patchversion DESC',\n                '*',\n                0,\n                1,\n            );\n\n            if (records && records[0]) {\n                return this.parseLibDBData(records[0]);\n            }\n        } catch (error) {\n            // Library not found.\n        }\n\n        throw new CoreError(`Missing required library: ${machineName}`);\n    }\n\n    /**\n     * Get a library data stored in DB.\n     *\n     * @param machineName Machine name.\n     * @param majorVersion Major version number.\n     * @param minorVersion Minor version number.\n     * @param siteId The site ID. If not defined, current site.\n     * @returns Promise resolved with the library data, rejected if not found.\n     */\n    protected async getLibrary(\n        machineName: string,\n        majorVersion?: string | number,\n        minorVersion?: string | number,\n        siteId?: string,\n    ): Promise<CoreH5PLibraryParsedDBRecord> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        const libraries = await db.getRecords<CoreH5PLibraryDBRecord>(LIBRARIES_TABLE_NAME, {\n            machinename: machineName,\n            majorversion: majorVersion,\n            minorversion: minorVersion,\n        });\n\n        if (!libraries.length) {\n            throw new CoreError('Libary not found.');\n        }\n\n        return this.parseLibDBData(libraries[0]);\n    }\n\n    /**\n     * Get a library data stored in DB.\n     *\n     * @param libraryData Library data.\n     * @param siteId The site ID. If not defined, current site.\n     * @returns Promise resolved with the library data, rejected if not found.\n     */\n    getLibraryByData(libraryData: CoreH5PLibraryBasicData, siteId?: string): Promise<CoreH5PLibraryParsedDBRecord> {\n        return this.getLibrary(libraryData.machineName, libraryData.majorVersion, libraryData.minorVersion, siteId);\n    }\n\n    /**\n     * Get a library data stored in DB by ID.\n     *\n     * @param id Library ID.\n     * @param siteId The site ID. If not defined, current site.\n     * @returns Promise resolved with the library data, rejected if not found.\n     */\n    async getLibraryById(id: number, siteId?: string): Promise<CoreH5PLibraryParsedDBRecord> {\n        const db = await CoreSites.getSiteDb(siteId);\n\n        const library = await db.getRecord<CoreH5PLibraryDBRecord>(LIBRARIES_TABLE_NAME, { id });\n\n        return this.parseLibDBData(library);\n    }\n\n    /**\n     * Get a library ID. If not found, return null.\n     *\n     * @param machineName Machine name.\n     * @param majorVersion Major version number.\n     * @param minorVersion Minor version number.\n     * @param siteId The site ID. If not defined, current site.\n     * @returns Promise resolved with the library ID, null if not found.\n     */\n    async getLibraryId(\n        machineName: string,\n        majorVersion?: string | number,\n        minorVersion?: string | number,\n        siteId?: string,\n    ): Promise<number | undefined> {\n        try {\n            const library = await this.getLibrary(machineName, majorVersion, minorVersion, siteId);\n\n            return library.id || undefined;\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    /**\n     * Get a library ID. If not found, return null.\n     *\n     * @param libraryData Library data.\n     * @param siteId The site ID. If not defined, current site.\n     * @returns Promise resolved with the library ID, null if not found.\n     */\n    getLibraryIdByData(libraryData: CoreH5PLibraryBasicData, siteId?: string): Promise<number | undefined> {\n        return this.getLibraryId(libraryData.machineName, libraryData.majorVersion, libraryData.minorVersion, siteId);\n    }\n\n    /**\n     * Get the default behaviour for the display option defined.\n     *\n     * @param name Identifier for the setting.\n     * @param defaultValue Optional default value if settings is not set.\n     * @returns Return the value for this display option.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getOption(name: string, defaultValue: unknown): unknown {\n        // For now, all them are disabled by default, so only will be rendered when defined in the display options.\n        return CoreH5PDisplayOptionBehaviour.CONTROLLED_BY_AUTHOR_DEFAULT_OFF;\n    }\n\n    /**\n     * Check whether the user has permission to execute an action.\n     *\n     * @param permission Permission to check.\n     * @param id H5P package id.\n     * @returns Whether the user has permission to execute an action.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    hasPermission(permission: number, id: number): boolean {\n        // H5P capabilities have not been introduced.\n        return true;\n    }\n\n    /**\n     * Determines if content slug is used.\n     *\n     * @param slug The content slug.\n     * @returns Whether the content slug is used\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isContentSlugAvailable(slug: string): boolean {\n        // By default the slug should be available as it's currently generated as a unique value for each h5p content.\n        return true;\n    }\n\n    /**\n     * Check whether a library is a patched version of the one installed.\n     *\n     * @param library Library to check.\n     * @param dbData Installed library. If not supplied it will be calculated.\n     * @returns Promise resolved with boolean: whether it's a patched library.\n     */\n    async isPatchedLibrary(library: CoreH5PLibraryBasicDataWithPatch, dbData?: CoreH5PLibraryParsedDBRecord): Promise<boolean> {\n        if (!dbData) {\n            dbData = await this.getLibraryByData(library);\n        }\n\n        return library.patchVersion > dbData.patchversion;\n    }\n\n    /**\n     * Convert list of library parameter values to csv.\n     *\n     * @param libraryData Library data as found in library.json files.\n     * @param key Key that should be found in libraryData.\n     * @param searchParam The library parameter (Default: 'path').\n     * @returns Library parameter values separated by ', '\n     */\n    libraryParameterValuesToCsv(libraryData: CoreH5PLibraryBeingSaved, key: string, searchParam: string = 'path'): string {\n        if (libraryData[key] !== undefined) {\n            const parameterValues: string[] = [];\n\n            libraryData[key].forEach((file) => {\n                for (const index in file) {\n                    if (index === searchParam) {\n                        parameterValues.push(file[index]);\n                    }\n                }\n            });\n\n            return parameterValues.join(',');\n        }\n\n        return '';\n    }\n\n    /**\n     * Load addon libraries.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the addon libraries.\n     */\n    async loadAddons(siteId?: string): Promise<CoreH5PLibraryAddonData[]> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        const query = 'SELECT l1.id AS libraryId, l1.machinename AS machineName, ' +\n                        'l1.majorversion AS majorVersion, l1.minorversion AS minorVersion, ' +\n                        'l1.patchversion AS patchVersion, l1.addto AS addTo, ' +\n                        'l1.preloadedjs AS preloadedJs, l1.preloadedcss AS preloadedCss ' +\n                    'FROM ' + LIBRARIES_TABLE_NAME + ' l1 ' +\n                    'LEFT JOIN ' + LIBRARIES_TABLE_NAME + ' l2 ON l1.machinename = l2.machinename AND (' +\n                        'l1.majorversion < l2.majorversion OR (l1.majorversion = l2.majorversion AND ' +\n                        'l1.minorversion < l2.minorversion)) ' +\n                    'WHERE l1.addto IS NOT NULL AND l2.machinename IS NULL';\n\n        const result = await db.execute(query);\n\n        const addons: CoreH5PLibraryAddonData[] = [];\n\n        for (let i = 0; i < result.rows.length; i++) {\n            addons.push(this.parseLibAddonData(result.rows.item(i)));\n        }\n\n        return addons;\n    }\n\n    /**\n     * Load content data from DB.\n     *\n     * @param id Content ID.\n     * @param fileUrl H5P file URL. Required if id is not provided.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the content data.\n     */\n    async loadContent(id?: number, fileUrl?: string, siteId?: string): Promise<CoreH5PFrameworkContentData> {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        let contentData: CoreH5PContentDBRecord;\n\n        if (id) {\n            contentData = await this.getContentData(id, siteId);\n        } else if (fileUrl) {\n            contentData = await this.getContentDataByUrl(fileUrl, siteId);\n        } else {\n            throw new CoreError('No id or fileUrl supplied to loadContent.');\n        }\n\n        // Load the main library data.\n        const libData = await this.getLibraryById(contentData.mainlibraryid, siteId);\n\n        // Map the values to the names used by the H5P core (it's the same Moodle web does).\n        const content = {\n            id: contentData.id,\n            params: contentData.jsoncontent,\n            embedType: 'iframe', // Always use iframe.\n            disable: null,\n            folderName: contentData.foldername,\n            title: libData.title,\n            slug: CoreH5PCore.slugify(libData.title) + '-' + contentData.id,\n            filtered: contentData.filtered,\n            libraryId: libData.id,\n            libraryName: libData.machinename,\n            libraryMajorVersion: libData.majorversion,\n            libraryMinorVersion: libData.minorversion,\n            libraryEmbedTypes: libData.embedtypes,\n            libraryFullscreen: libData.fullscreen,\n            metadata: null,\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const params = CoreTextUtils.parseJSON<any>(contentData.jsoncontent);\n        if (!params.metadata) {\n            params.metadata = {};\n        }\n        // Add title to metadata.\n        if (typeof params.title === 'string' && !params.metadata.title) {\n            params.metadata.title = params.title;\n        }\n        content.metadata = params.metadata;\n        content.params = JSON.stringify(params.params !== undefined && params.params != null ? params.params : params);\n\n        return content;\n    }\n\n    /**\n     * Load dependencies for the given content of the given type.\n     *\n     * @param id Content ID.\n     * @param type The dependency type.\n     * @returns Content dependencies, indexed by machine name.\n     */\n    async loadContentDependencies(\n        id: number,\n        type?: string,\n        siteId?: string,\n    ): Promise<{[machineName: string]: CoreH5PContentDependencyData}> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        let query = 'SELECT hl.id AS libraryId, hl.machinename AS machineName, ' +\n                        'hl.majorversion AS majorVersion, hl.minorversion AS minorVersion, ' +\n                        'hl.patchversion AS patchVersion, hl.preloadedcss AS preloadedCss, ' +\n                        'hl.preloadedjs AS preloadedJs, hcl.dropcss AS dropCss, ' +\n                        'hcl.dependencytype as dependencyType ' +\n                    'FROM ' + CONTENTS_LIBRARIES_TABLE_NAME + ' hcl ' +\n                    'JOIN ' + LIBRARIES_TABLE_NAME + ' hl ON hcl.libraryid = hl.id ' +\n                    'WHERE hcl.h5pid = ?';\n\n        const queryArgs: (string | number)[] = [];\n        queryArgs.push(id);\n\n        if (type) {\n            query += ' AND hcl.dependencytype = ?';\n            queryArgs.push(type);\n        }\n\n        query += ' ORDER BY hcl.weight';\n\n        const result = await db.execute(query, queryArgs);\n\n        const dependencies: {[machineName: string]: CoreH5PContentDependencyData} = {};\n\n        for (let i = 0; i < result.rows.length; i++) {\n            const dependency = result.rows.item(i);\n\n            dependencies[dependency.machineName] = dependency;\n        }\n\n        return dependencies;\n    }\n\n    /**\n     * Loads a library and its dependencies.\n     *\n     * @param machineName The library's machine name.\n     * @param majorVersion The library's major version.\n     * @param minorVersion The library's minor version.\n     * @param siteId The site ID. If not defined, current site.\n     * @returns Promise resolved with the library data.\n     */\n    async loadLibrary(\n        machineName: string,\n        majorVersion: number,\n        minorVersion: number,\n        siteId?: string,\n    ): Promise<CoreH5PLibraryData> {\n\n        // First get the library data from DB.\n        const library = await this.getLibrary(machineName, majorVersion, minorVersion, siteId);\n\n        const libraryData: CoreH5PLibraryData = {\n            libraryId: library.id,\n            title: library.title,\n            machineName: library.machinename,\n            majorVersion: library.majorversion,\n            minorVersion: library.minorversion,\n            patchVersion: library.patchversion,\n            runnable: library.runnable,\n            fullscreen: library.fullscreen,\n            embedTypes: library.embedtypes,\n            preloadedJs: library.preloadedjs || undefined,\n            preloadedCss: library.preloadedcss || undefined,\n            dropLibraryCss: library.droplibrarycss || undefined,\n            semantics: library.semantics || undefined,\n            preloadedDependencies: [],\n            dynamicDependencies: [],\n            editorDependencies: [],\n        };\n\n        // Now get the dependencies.\n        const sql = 'SELECT hl.id, hl.machinename, hl.majorversion, hl.minorversion, hll.dependencytype ' +\n                'FROM ' + LIBRARY_DEPENDENCIES_TABLE_NAME + ' hll ' +\n                'JOIN ' + LIBRARIES_TABLE_NAME + ' hl ON hll.requiredlibraryid = hl.id ' +\n                'WHERE hll.libraryid = ? ' +\n                'ORDER BY hl.id ASC';\n\n        const sqlParams = [\n            library.id,\n        ];\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        const result = await db.execute(sql, sqlParams);\n\n        for (let i = 0; i < result.rows.length; i++) {\n            const dependency: LibraryDependency = result.rows.item(i);\n            const key = dependency.dependencytype + 'Dependencies';\n\n            libraryData[key].push({\n                machineName: dependency.machinename,\n                majorVersion: dependency.majorversion,\n                minorVersion: dependency.minorversion,\n            });\n        }\n\n        return libraryData;\n    }\n\n    /**\n     * Parse library addon data.\n     *\n     * @param library Library addon data.\n     * @returns Parsed library.\n     */\n    parseLibAddonData(library: LibraryAddonDBData): CoreH5PLibraryAddonData {\n        const parsedLib = <CoreH5PLibraryAddonData> library;\n        parsedLib.addTo = CoreTextUtils.parseJSON<CoreH5PLibraryAddTo | null>(library.addTo, null);\n\n        return parsedLib;\n    }\n\n    /**\n     * Parse library DB data.\n     *\n     * @param library Library DB data.\n     * @returns Parsed library.\n     */\n    protected parseLibDBData(library: CoreH5PLibraryDBRecord): CoreH5PLibraryParsedDBRecord {\n        return Object.assign(library, {\n            semantics: library.semantics ? CoreTextUtils.parseJSON(library.semantics, null) : null,\n            addto: library.addto ? CoreTextUtils.parseJSON(library.addto, null) : null,\n            metadatasettings: library.metadatasettings ? CoreTextUtils.parseJSON(library.metadatasettings, null) : null,\n        });\n    }\n\n    /**\n     * Resets marked user data for the given content.\n     *\n     * @param contentId Content ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async resetContentUserData(contentId: number, siteId?: string): Promise<void> {\n        // In LMS, all the states of the component are deleted here.\n        // This isn't possible in the app because we lack the course ID, which is needed for example by h5pactivity.\n    }\n\n    /**\n     * Stores hash keys for cached assets, aggregated JavaScripts and stylesheets, and connects it to libraries so that we\n     * know which cache file to delete when a library is updated.\n     *\n     * @param hash Hash key for the given libraries.\n     * @param dependencies List of dependencies used to create the key.\n     * @param folderName The name of the folder that contains the H5P.\n     * @param siteId The site ID.\n     * @returns Promise resolved when done.\n     */\n    async saveCachedAssets(\n        hash: string,\n        dependencies: {[machineName: string]: CoreH5PContentDependencyData},\n        folderName: string,\n        siteId?: string,\n    ): Promise<void> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        await Promise.all(Object.keys(dependencies).map(async (key) => {\n            const data: Partial<CoreH5PLibraryCachedAssetsDBRecord> = {\n                hash: key,\n                libraryid: dependencies[key].libraryId,\n                foldername: folderName,\n            };\n\n            await db.insertRecord(LIBRARIES_CACHEDASSETS_TABLE_NAME, data);\n        }));\n    }\n\n    /**\n     * Save library data in DB.\n     *\n     * @param libraryData Library data to save.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async saveLibraryData(libraryData: CoreH5PLibraryBeingSaved, siteId?: string): Promise<void> {\n        // Some special properties needs some checking and converting before they can be saved.\n        const preloadedJS = this.libraryParameterValuesToCsv(libraryData, 'preloadedJs', 'path');\n        const preloadedCSS = this.libraryParameterValuesToCsv(libraryData, 'preloadedCss', 'path');\n        const dropLibraryCSS = this.libraryParameterValuesToCsv(libraryData, 'dropLibraryCss', 'machineName');\n\n        if (libraryData.semantics === undefined) {\n            libraryData.semantics = [];\n        }\n        if (libraryData.fullscreen === undefined) {\n            libraryData.fullscreen = 0;\n        }\n\n        let embedTypes = '';\n        if (libraryData.embedTypes !== undefined) {\n            embedTypes = libraryData.embedTypes.join(', ');\n        }\n\n        const site = await CoreSites.getSite(siteId);\n\n        const db = site.getDb();\n        const data: Partial<CoreH5PLibraryDBRecord> = {\n            title: libraryData.title,\n            machinename: libraryData.machineName,\n            majorversion: libraryData.majorVersion,\n            minorversion: libraryData.minorVersion,\n            patchversion: libraryData.patchVersion,\n            runnable: libraryData.runnable,\n            fullscreen: libraryData.fullscreen,\n            embedtypes: embedTypes,\n            preloadedjs: preloadedJS,\n            preloadedcss: preloadedCSS,\n            droplibrarycss: dropLibraryCSS,\n            semantics: libraryData.semantics !== undefined ? JSON.stringify(libraryData.semantics) : null,\n            addto: libraryData.addTo !== undefined ? JSON.stringify(libraryData.addTo) : null,\n            metadatasettings: libraryData.metadataSettings !== undefined ?\n                CoreH5PMetadata.boolifyAndEncodeSettings(libraryData.metadataSettings) : null,\n        };\n\n        if (libraryData.libraryId) {\n            data.id = libraryData.libraryId;\n        }\n\n        await db.insertRecord(LIBRARIES_TABLE_NAME, data);\n\n        if (!data.id) {\n            // New library. Get its ID.\n            const entry = await db.getRecord<CoreH5PLibraryDBRecord>(LIBRARIES_TABLE_NAME, data);\n\n            libraryData.libraryId = entry.id;\n        } else {\n            // Updated libary. Remove old dependencies.\n            await this.deleteLibraryDependencies(data.id, site.getId());\n        }\n    }\n\n    /**\n     * Save what libraries a library is depending on.\n     *\n     * @param library Library data for the library we're saving dependencies for.\n     * @param dependencies List of dependencies as associative arrays containing machineName, majorVersion, minorVersion.\n     * @param dependencyType The type of dependency.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async saveLibraryDependencies(\n        library: CoreH5PLibraryBeingSaved,\n        dependencies: CoreH5PLibraryBasicData[],\n        dependencyType: string,\n        siteId?: string,\n    ): Promise<void> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        await Promise.all(dependencies.map(async (dependency) => {\n            // Get the ID of the library.\n            const dependencyId = await this.getLibraryIdByData(dependency, siteId);\n\n            if (!dependencyId) {\n                // Missing dependency. It should have been detected before installing the package.\n                throw new CoreError(Translate.instant('core.h5p.missingdependency', { $a: {\n                    lib: CoreH5PCore.libraryToString(library),\n                    dep: CoreH5PCore.libraryToString(dependency),\n                } }));\n            }\n\n            // Create the relation.\n            const entry: Partial<CoreH5PLibraryDependencyDBRecord> = {\n                libraryid: library.libraryId,\n                requiredlibraryid: dependencyId,\n                dependencytype: dependencyType,\n            };\n\n            await db.insertRecord(LIBRARY_DEPENDENCIES_TABLE_NAME, entry);\n        }));\n    }\n\n    /**\n     * Saves what libraries the content uses.\n     *\n     * @param id Id identifying the package.\n     * @param librariesInUse List of libraries the content uses.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async saveLibraryUsage(\n        id: number,\n        librariesInUse: {[key: string]: CoreH5PContentDepsTreeDependency},\n        siteId?: string,\n    ): Promise<void> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        // Calculate the CSS to drop.\n        const dropLibraryCssList: Record<string, string> = {};\n\n        for (const key in librariesInUse) {\n            const dependency = librariesInUse[key];\n\n            if ('dropLibraryCss' in dependency.library && dependency.library.dropLibraryCss) {\n                const split = dependency.library.dropLibraryCss.split(', ');\n\n                split.forEach((css) => {\n                    dropLibraryCssList[css] = css;\n                });\n            }\n        }\n\n        // Now save the uusage.\n        await Promise.all(Object.keys(librariesInUse).map((key) => {\n            const dependency = librariesInUse[key];\n            const data: Partial<CoreH5PContentsLibraryDBRecord> = {\n                h5pid: id,\n                libraryid: dependency.library.libraryId,\n                dependencytype: dependency.type,\n                dropcss: dropLibraryCssList[dependency.library.machineName] ? 1 : 0,\n                weight: dependency.weight,\n            };\n\n            return db.insertRecord(CONTENTS_LIBRARIES_TABLE_NAME, data);\n        }));\n    }\n\n    /**\n     * Save content data in DB and clear cache.\n     *\n     * @param content Content to save.\n     * @param folderName The name of the folder that contains the H5P.\n     * @param fileUrl The online URL of the package.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with content ID.\n     */\n    async updateContent(content: CoreH5PContentBeingSaved, folderName: string, fileUrl: string, siteId?: string): Promise<number> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        // If the libraryid declared in the package is empty, get the latest version.\n        if (content.library && content.library.libraryId === undefined) {\n            const mainLibrary = await this.getLatestLibraryVersion(content.library.machineName, siteId);\n\n            content.library.libraryId = mainLibrary.id;\n        }\n\n        // Add title to 'params' to be able to add it to metadata later.\n        if (typeof content.title === 'string') {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const params = CoreTextUtils.parseJSON<any>(content.params || '{}');\n            params.title = content.title;\n            content.params = JSON.stringify(params);\n        }\n\n        const data: Partial<CoreH5PContentDBRecord> = {\n            id: undefined,\n            jsoncontent: content.params,\n            mainlibraryid: content.library?.libraryId,\n            timemodified: Date.now(),\n            filtered: null,\n            foldername: folderName,\n            fileurl: fileUrl,\n            timecreated: undefined,\n        };\n        let contentId: number | undefined;\n\n        if (content.id !== undefined) {\n            data.id = content.id;\n            contentId = content.id;\n        } else {\n            data.timecreated = data.timemodified;\n        }\n\n        await db.insertRecord(CONTENT_TABLE_NAME, data);\n\n        if (!contentId) {\n            // New content. Get its ID.\n            const entry = await db.getRecord<CoreH5PContentDBRecord>(CONTENT_TABLE_NAME, data);\n\n            content.id = entry.id;\n            contentId = content.id;\n        }\n\n        return contentId;\n    }\n\n    /**\n     * This will update selected fields on the given content.\n     *\n     * @param id Content identifier.\n     * @param fields Object with the fields to update.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    async updateContentFields(id: number, fields: Partial<CoreH5PContentDBRecord>, siteId?: string): Promise<void> {\n\n        const db = await CoreSites.getSiteDb(siteId);\n\n        const data = Object.assign({}, fields);\n\n        await db.updateRecords(CONTENT_TABLE_NAME, data, { id });\n    }\n\n}\n\n/**\n * Content data returned by loadContent.\n */\nexport type CoreH5PFrameworkContentData = {\n    id: number; // The id of the content.\n    params: string; // The content in json format.\n    embedType: string; // Embed type to use.\n    disable: number | null; // H5P Button display options.\n    folderName: string; // Name of the folder that contains the contents.\n    title: string; // Main library's title.\n    slug: string; // Lib title and ID slugified.\n    filtered: string | null; // Filtered version of json_content.\n    libraryId: number; // Main library's ID.\n    libraryName: string; // Main library's machine name.\n    libraryMajorVersion: number; // Main library's major version.\n    libraryMinorVersion: number; // Main library's minor version.\n    libraryEmbedTypes: string; // Main library's list of supported embed types.\n    libraryFullscreen: number; // Main library's display fullscreen button.\n    metadata: unknown; // Content metadata.\n};\n\nexport type CoreH5PLibraryParsedDBRecord = Omit<CoreH5PLibraryDBRecord, 'semantics'|'addto'|'metadatasettings'> & {\n    semantics: CoreH5PSemantics[] | null;\n    addto: CoreH5PLibraryAddTo | null;\n    metadatasettings: CoreH5PLibraryMetadataSettings | null;\n};\n\ntype LibraryDependency = {\n    id: number;\n    machinename: string;\n    majorversion: number;\n    minorversion: number;\n    dependencytype: string;\n};\n\ntype LibraryAddonDBData = Omit<CoreH5PLibraryAddonData, 'addTo'> & {\n    addTo: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}