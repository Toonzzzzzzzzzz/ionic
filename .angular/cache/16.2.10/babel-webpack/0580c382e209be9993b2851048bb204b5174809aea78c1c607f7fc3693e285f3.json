{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonReportInsights } from '../insights';\nimport * as i0 from \"@angular/core\";\n// Bulk actions supported, along with the related lang string.\nconst BULK_ACTIONS = {\n  fixed: 'addon.report_insights.fixedack',\n  incorrectlyflagged: 'addon.report_insights.incorrectlyflagged',\n  notapplicable: 'addon.report_insights.notapplicable',\n  notuseful: 'addon.report_insights.notuseful',\n  useful: 'addon.report_insights.useful'\n};\n/**\n * Content links handler for calendar view page.\n */\nexport class AddonReportInsightsActionLinkHandlerService extends CoreContentLinksHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonReportInsightsActionLinkHandler';\n    this.pattern = /\\/report\\/insights\\/action\\.php/;\n  }\n  /**\n   * @inheritdoc\n   */\n  getActions(siteIds, url, params) {\n    return [{\n      action: function () {\n        var _ref = _asyncToGenerator(function* (siteId) {\n          // Send the action.\n          const modal = yield CoreDomUtils.showModalLoading('core.sending', true);\n          try {\n            yield AddonReportInsights.sendActionExecuted(params.action, [Number(params.predictionid)], siteId);\n          } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n            return;\n          } finally {\n            modal.dismiss();\n          }\n          if (BULK_ACTIONS[params.action]) {\n            // Done, display a toast.\n            CoreDomUtils.showToast(Translate.instant('addon.report_insights.actionsaved', {\n              $a: Translate.instant(BULK_ACTIONS[params.action])\n            }));\n          } else if (!params.forwardurl) {\n            // Forward URL not defined, display a toast.\n            CoreDomUtils.showToast('core.success', true);\n          } else {\n            // Try to open the link in the app.\n            const forwardUrl = decodeURIComponent(params.forwardurl);\n            yield CoreSites.visitLink(forwardUrl, {\n              siteId\n            });\n          }\n        });\n        return function action(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    }];\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled(siteId, url, params) {\n    return _asyncToGenerator(function* () {\n      if (!params.action || !params.predictionid) {\n        // Required params missing.\n        return false;\n      }\n      return AddonReportInsights.canSendActionInSite(siteId);\n    })();\n  }\n}\n_class = AddonReportInsightsActionLinkHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonReportInsightsActionLinkHandlerService_BaseFactory;\n  return function AddonReportInsightsActionLinkHandlerService_Factory(t) {\n    return (ɵAddonReportInsightsActionLinkHandlerService_BaseFactory || (ɵAddonReportInsightsActionLinkHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonReportInsightsActionLinkHandler = makeSingleton(AddonReportInsightsActionLinkHandlerService);","map":{"version":3,"names":["CoreContentLinksHandlerBase","CoreSites","CoreDomUtils","makeSingleton","Translate","AddonReportInsights","BULK_ACTIONS","fixed","incorrectlyflagged","notapplicable","notuseful","useful","AddonReportInsightsActionLinkHandlerService","constructor","name","pattern","getActions","siteIds","url","params","action","_ref","_asyncToGenerator","siteId","modal","showModalLoading","sendActionExecuted","Number","predictionid","error","showErrorModal","dismiss","showToast","instant","$a","forwardurl","forwardUrl","decodeURIComponent","visitLink","_x","apply","arguments","isEnabled","canSendActionInSite","t","factory","ɵfac","providedIn","AddonReportInsightsActionLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/report/insights/services/handlers/action-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonReportInsights } from '../insights';\n\n// Bulk actions supported, along with the related lang string.\nconst BULK_ACTIONS = {\n    fixed: 'addon.report_insights.fixedack',\n    incorrectlyflagged: 'addon.report_insights.incorrectlyflagged',\n    notapplicable: 'addon.report_insights.notapplicable',\n    notuseful: 'addon.report_insights.notuseful',\n    useful: 'addon.report_insights.useful',\n};\n\n/**\n * Content links handler for calendar view page.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonReportInsightsActionLinkHandlerService extends CoreContentLinksHandlerBase {\n\n    name = 'AddonReportInsightsActionLinkHandler';\n    pattern = /\\/report\\/insights\\/action\\.php/;\n\n    /**\n     * @inheritdoc\n     */\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Record<string, string>,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n        return [{\n            action: async (siteId?: string): Promise<void> => {\n                // Send the action.\n                const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n                try {\n                    await AddonReportInsights.sendActionExecuted(params.action, [Number(params.predictionid)], siteId);\n                } catch (error) {\n                    CoreDomUtils.showErrorModal(error);\n\n                    return;\n                } finally {\n                    modal.dismiss();\n                }\n\n                if (BULK_ACTIONS[params.action]) {\n                    // Done, display a toast.\n                    CoreDomUtils.showToast(Translate.instant('addon.report_insights.actionsaved', {\n                        $a: Translate.instant(BULK_ACTIONS[params.action]),\n                    }));\n                } else if (!params.forwardurl) {\n                    // Forward URL not defined, display a toast.\n                    CoreDomUtils.showToast('core.success', true);\n                } else {\n                    // Try to open the link in the app.\n                    const forwardUrl = decodeURIComponent(params.forwardurl);\n\n                    await CoreSites.visitLink(forwardUrl, { siteId });\n                }\n            },\n        }];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(siteId: string, url: string, params: Record<string, string>): Promise<boolean> {\n        if (!params.action || !params.predictionid) {\n            // Required params missing.\n            return false;\n        }\n\n        return AddonReportInsights.canSendActionInSite(siteId);\n    }\n\n}\n\nexport const AddonReportInsightsActionLinkHandler = makeSingleton(AddonReportInsightsActionLinkHandlerService);\n"],"mappings":";;AAgBA,SAASA,2BAA2B,QAAQ,6CAA6C;AAEzF,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,aAAa,EAAEC,SAAS,QAAQ,aAAa;AACtD,SAASC,mBAAmB,QAAQ,aAAa;;AAEjD;AACA,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,gCAAgC;EACvCC,kBAAkB,EAAE,0CAA0C;EAC9DC,aAAa,EAAE,qCAAqC;EACpDC,SAAS,EAAE,iCAAiC;EAC5CC,MAAM,EAAE;CACX;AAED;;;AAIA,OAAM,MAAOC,2CAA4C,SAAQZ,2BAA2B;EAD5Fa,YAAA;;IAGI,KAAAC,IAAI,GAAG,sCAAsC;IAC7C,KAAAC,OAAO,GAAG,iCAAiC;;EAE3C;;;EAGAC,UAAUA,CACNC,OAAiB,EACjBC,GAAW,EACXC,MAA8B;IAE9B,OAAO,CAAC;MACJC,MAAM;QAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOC,MAAe,EAAmB;UAC7C;UACA,MAAMC,KAAK,SAAStB,YAAY,CAACuB,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC;UAEvE,IAAI;YACA,MAAMpB,mBAAmB,CAACqB,kBAAkB,CAACP,MAAM,CAACC,MAAM,EAAE,CAACO,MAAM,CAACR,MAAM,CAACS,YAAY,CAAC,CAAC,EAAEL,MAAM,CAAC;WACrG,CAAC,OAAOM,KAAK,EAAE;YACZ3B,YAAY,CAAC4B,cAAc,CAACD,KAAK,CAAC;YAElC;WACH,SAAS;YACNL,KAAK,CAACO,OAAO,EAAE;;UAGnB,IAAIzB,YAAY,CAACa,MAAM,CAACC,MAAM,CAAC,EAAE;YAC7B;YACAlB,YAAY,CAAC8B,SAAS,CAAC5B,SAAS,CAAC6B,OAAO,CAAC,mCAAmC,EAAE;cAC1EC,EAAE,EAAE9B,SAAS,CAAC6B,OAAO,CAAC3B,YAAY,CAACa,MAAM,CAACC,MAAM,CAAC;aACpD,CAAC,CAAC;WACN,MAAM,IAAI,CAACD,MAAM,CAACgB,UAAU,EAAE;YAC3B;YACAjC,YAAY,CAAC8B,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC;WAC/C,MAAM;YACH;YACA,MAAMI,UAAU,GAAGC,kBAAkB,CAAClB,MAAM,CAACgB,UAAU,CAAC;YAExD,MAAMlC,SAAS,CAACqC,SAAS,CAACF,UAAU,EAAE;cAAEb;YAAM,CAAE,CAAC;;QAEzD,CAAC;QAAA,gBAAAH,OAAAmB,EAAA;UAAA,OAAAlB,IAAA,CAAAmB,KAAA,OAAAC,SAAA;QAAA;MAAA;KACJ,CAAC;EACN;EAEA;;;EAGMC,SAASA,CAACnB,MAAc,EAAEL,GAAW,EAAEC,MAA8B;IAAA,OAAAG,iBAAA;MACvE,IAAI,CAACH,MAAM,CAACC,MAAM,IAAI,CAACD,MAAM,CAACS,YAAY,EAAE;QACxC;QACA,OAAO,KAAK;;MAGhB,OAAOvB,mBAAmB,CAACsC,mBAAmB,CAACpB,MAAM,CAAC;IAAC;EAC3D;;SAxDSX,2CAA4C;;;;6JAA5CA,MAA2C,IAAAgC,CAAA,IAA3ChC,MAA2C;EAAA;AAAA;;SAA3CA,MAA2C;EAAAiC,OAAA,EAA3CjC,MAA2C,CAAAkC,IAAA;EAAAC,UAAA,EAD9B;AAAM;AA6DhC,OAAO,MAAMC,oCAAoC,GAAG7C,aAAa,CAACS,2CAA2C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}