{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreLang } from '@services/lang';\nimport { CoreFilterDefaultHandler } from '@features/filter/services/handlers/default-filter';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to support the Multilang filter in core.\n */\nexport class AddonFilterMultilangHandlerService extends CoreFilterDefaultHandler {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonFilterMultilangHandler';\n    this.filterName = 'multilang';\n  }\n  /**\n   * Filter some text.\n   *\n   * @param text The text to filter.\n   * @param filter The filter.\n   * @param options Options passed to the filters.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Filtered text (or promise resolved with the filtered text).\n   */\n  filter(text, filter,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  options,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  siteId) {\n    return _asyncToGenerator(function* () {\n      // Get available languages.\n      const regex = /<(?:lang|span)[^>]+lang=\"([a-zA-Z0-9_-]+)\"[^>]*>.*?<\\/(?:lang|span)>/img;\n      const languages = new Set();\n      let firstLanguage;\n      let match;\n      while (match = regex.exec(text)) {\n        var _firstLanguage;\n        const language = match[1].toLowerCase().replace(/_/g, '-');\n        firstLanguage = (_firstLanguage = firstLanguage) !== null && _firstLanguage !== void 0 ? _firstLanguage : language;\n        languages.add(language);\n      }\n      // Find language to use.\n      const language = [yield CoreLang.getCurrentLanguage(), CoreLang.getParentLanguage(), CoreLang.getFallbackLanguage(), firstLanguage].find(candidate => candidate && languages.has(candidate));\n      if (!language) {\n        return text;\n      }\n      // Apply filter.\n      const anyLangRegEx = /<(lang|span)[^>]+lang=\"[a-zA-Z0-9_-]+\"[^>]*>.*?<\\/(lang|span)>/img;\n      const languageRegEx = language.replace(/-/g, '(?:-|_)');\n      const currentLangRegEx = new RegExp(`<(?:lang|span)[^>]+lang=\"${languageRegEx}\"[^>]*>(.*?)</(?:lang|span)>`, 'img');\n      text = text.replace(currentLangRegEx, '$1');\n      text = text.replace(anyLangRegEx, '');\n      return text;\n    })();\n  }\n  /**\n   * Check if the filter should be applied in a certain site based on some filter options.\n   *\n   * @param options Options.\n   * @param site Site.\n   * @returns Whether filter should be applied.\n   */\n  shouldBeApplied(options, site) {\n    // The filter should be applied if site is older than 3.7 or the WS didn't filter the text.\n    return !!(options.wsNotFiltered || site && !site.isVersionGreaterEqualThan('3.7'));\n  }\n}\n_class = AddonFilterMultilangHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonFilterMultilangHandlerService_BaseFactory;\n  return function AddonFilterMultilangHandlerService_Factory(t) {\n    return (ɵAddonFilterMultilangHandlerService_BaseFactory || (ɵAddonFilterMultilangHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonFilterMultilangHandler = makeSingleton(AddonFilterMultilangHandlerService);","map":{"version":3,"names":["CoreLang","CoreFilterDefaultHandler","makeSingleton","AddonFilterMultilangHandlerService","constructor","name","filterName","filter","text","options","siteId","_asyncToGenerator","regex","languages","Set","firstLanguage","match","exec","_firstLanguage","language","toLowerCase","replace","add","getCurrentLanguage","getParentLanguage","getFallbackLanguage","find","candidate","has","anyLangRegEx","languageRegEx","currentLangRegEx","RegExp","shouldBeApplied","site","wsNotFiltered","isVersionGreaterEqualThan","t","factory","ɵfac","providedIn","AddonFilterMultilangHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/filter/multilang/services/handlers/multilang.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreLang } from '@services/lang';\nimport { CoreFilterDefaultHandler } from '@features/filter/services/handlers/default-filter';\nimport { CoreFilterFilter, CoreFilterFormatTextOptions } from '@features/filter/services/filter';\nimport { CoreSite } from '@classes/sites/site';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Handler to support the Multilang filter in core.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonFilterMultilangHandlerService extends CoreFilterDefaultHandler {\n\n    name = 'AddonFilterMultilangHandler';\n    filterName = 'multilang';\n\n    /**\n     * Filter some text.\n     *\n     * @param text The text to filter.\n     * @param filter The filter.\n     * @param options Options passed to the filters.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Filtered text (or promise resolved with the filtered text).\n     */\n    async filter(\n        text: string,\n        filter?: CoreFilterFilter, // eslint-disable-line @typescript-eslint/no-unused-vars\n        options?: CoreFilterFormatTextOptions, // eslint-disable-line @typescript-eslint/no-unused-vars\n        siteId?: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<string> {\n        // Get available languages.\n        const regex = /<(?:lang|span)[^>]+lang=\"([a-zA-Z0-9_-]+)\"[^>]*>.*?<\\/(?:lang|span)>/img;\n        const languages: Set<string> = new Set();\n        let firstLanguage: string | undefined;\n        let match: RegExpExecArray | null;\n\n        while ((match = regex.exec(text))) {\n            const language = match[1].toLowerCase().replace(/_/g, '-');\n            firstLanguage = firstLanguage ?? language;\n\n            languages.add(language);\n        }\n\n        // Find language to use.\n        const language = [\n            await CoreLang.getCurrentLanguage(),\n            CoreLang.getParentLanguage(),\n            CoreLang.getFallbackLanguage(),\n            firstLanguage,\n        ]\n            .find(candidate => candidate && languages.has(candidate));\n\n        if (!language) {\n            return text;\n        }\n\n        // Apply filter.\n        const anyLangRegEx = /<(lang|span)[^>]+lang=\"[a-zA-Z0-9_-]+\"[^>]*>.*?<\\/(lang|span)>/img;\n        const languageRegEx = language.replace(/-/g, '(?:-|_)');\n        const currentLangRegEx = new RegExp(`<(?:lang|span)[^>]+lang=\"${languageRegEx}\"[^>]*>(.*?)</(?:lang|span)>`, 'img');\n\n        text = text.replace(currentLangRegEx, '$1');\n        text = text.replace(anyLangRegEx, '');\n\n        return text;\n    }\n\n    /**\n     * Check if the filter should be applied in a certain site based on some filter options.\n     *\n     * @param options Options.\n     * @param site Site.\n     * @returns Whether filter should be applied.\n     */\n    shouldBeApplied(options: CoreFilterFormatTextOptions, site?: CoreSite): boolean {\n        // The filter should be applied if site is older than 3.7 or the WS didn't filter the text.\n        return !!(options.wsNotFiltered || (site && !site.isVersionGreaterEqualThan('3.7')));\n    }\n\n}\n\nexport const AddonFilterMultilangHandler = makeSingleton(AddonFilterMultilangHandlerService);\n"],"mappings":";;AAgBA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,wBAAwB,QAAQ,mDAAmD;AAG5F,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,kCAAmC,SAAQF,wBAAwB;EADhFG,YAAA;;IAGI,KAAAC,IAAI,GAAG,6BAA6B;IACpC,KAAAC,UAAU,GAAG,WAAW;;EAExB;;;;;;;;;EASMC,MAAMA,CACRC,IAAY,EACZD,MAAyB;EAAE;EAC3BE,OAAqC;EAAE;EACvCC,MAAe;IAAA,OAAAC,iBAAA;MAEf;MACA,MAAMC,KAAK,GAAG,yEAAyE;MACvF,MAAMC,SAAS,GAAgB,IAAIC,GAAG,EAAE;MACxC,IAAIC,aAAiC;MACrC,IAAIC,KAA6B;MAEjC,OAAQA,KAAK,GAAGJ,KAAK,CAACK,IAAI,CAACT,IAAI,CAAC,EAAG;QAAA,IAAAU,cAAA;QAC/B,MAAMC,QAAQ,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACI,WAAW,EAAE,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;QAC1DN,aAAa,IAAAG,cAAA,GAAGH,aAAa,cAAAG,cAAA,cAAAA,cAAA,GAAIC,QAAQ;QAEzCN,SAAS,CAACS,GAAG,CAACH,QAAQ,CAAC;;MAG3B;MACA,MAAMA,QAAQ,GAAG,OACPnB,QAAQ,CAACuB,kBAAkB,EAAE,EACnCvB,QAAQ,CAACwB,iBAAiB,EAAE,EAC5BxB,QAAQ,CAACyB,mBAAmB,EAAE,EAC9BV,aAAa,CAChB,CACIW,IAAI,CAACC,SAAS,IAAIA,SAAS,IAAId,SAAS,CAACe,GAAG,CAACD,SAAS,CAAC,CAAC;MAE7D,IAAI,CAACR,QAAQ,EAAE;QACX,OAAOX,IAAI;;MAGf;MACA,MAAMqB,YAAY,GAAG,mEAAmE;MACxF,MAAMC,aAAa,GAAGX,QAAQ,CAACE,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC;MACvD,MAAMU,gBAAgB,GAAG,IAAIC,MAAM,CAAC,4BAA4BF,aAAa,8BAA8B,EAAE,KAAK,CAAC;MAEnHtB,IAAI,GAAGA,IAAI,CAACa,OAAO,CAACU,gBAAgB,EAAE,IAAI,CAAC;MAC3CvB,IAAI,GAAGA,IAAI,CAACa,OAAO,CAACQ,YAAY,EAAE,EAAE,CAAC;MAErC,OAAOrB,IAAI;IAAC;EAChB;EAEA;;;;;;;EAOAyB,eAAeA,CAACxB,OAAoC,EAAEyB,IAAe;IACjE;IACA,OAAO,CAAC,EAAEzB,OAAO,CAAC0B,aAAa,IAAKD,IAAI,IAAI,CAACA,IAAI,CAACE,yBAAyB,CAAC,KAAK,CAAE,CAAC;EACxF;;SAnESjC,kCAAmC;;;;2IAAnCA,MAAkC,IAAAkC,CAAA,IAAlClC,MAAkC;EAAA;AAAA;;SAAlCA,MAAkC;EAAAmC,OAAA,EAAlCnC,MAAkC,CAAAoC,IAAA;EAAAC,UAAA,EADrB;AAAM;AAwEhC,OAAO,MAAMC,2BAA2B,GAAGvC,aAAa,CAACC,kCAAkC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}