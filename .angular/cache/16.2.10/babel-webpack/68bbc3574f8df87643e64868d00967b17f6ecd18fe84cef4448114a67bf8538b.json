{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova, checkAvailability, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';\nimport { Observable, merge } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport var Connection;\n(function (Connection) {\n  Connection[\"UNKNOWN\"] = \"unknown\";\n  Connection[\"ETHERNET\"] = \"ethernet\";\n  Connection[\"WIFI\"] = \"wifi\";\n  Connection[\"CELL_2G\"] = \"2g\";\n  Connection[\"CELL_3G\"] = \"3g\";\n  Connection[\"CELL_4G\"] = \"4g\";\n  Connection[\"CELL\"] = \"cellular\";\n  Connection[\"NONE\"] = \"none\";\n})(Connection || (Connection = {}));\nvar Network = /** @class */function (_super) {\n  __extends(Network, _super);\n  function Network() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Constants for possible connection types\n     */\n    _this.Connection = {\n      UNKNOWN: 'unknown',\n      ETHERNET: 'ethernet',\n      WIFI: 'wifi',\n      CELL_2G: '2g',\n      CELL_3G: '3g',\n      CELL_4G: '4g',\n      CELL: 'cellular',\n      NONE: 'none'\n    };\n    return _this;\n  }\n  Network.prototype.onChange = function () {\n    var _this = this;\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return merge(_this.onConnect().pipe(mapTo('connected')), _this.onDisconnect().pipe(mapTo('disconnected')));\n      }\n    }();\n  };\n  Network.prototype.onDisconnect = function () {\n    return cordova(this, \"onDisconnect\", {\n      \"eventObservable\": true,\n      \"event\": \"offline\",\n      \"element\": \"document\"\n    }, arguments);\n  };\n  Network.prototype.onConnect = function () {\n    return cordova(this, \"onConnect\", {\n      \"eventObservable\": true,\n      \"event\": \"online\",\n      \"element\": \"document\"\n    }, arguments);\n  };\n  Object.defineProperty(Network.prototype, \"type\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"type\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"type\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Network.prototype, \"downlinkMax\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"downlinkMax\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"downlinkMax\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Network.ɵfac = /* @__PURE__ */function () {\n    let ɵNetwork_BaseFactory;\n    return function Network_Factory(t) {\n      return (ɵNetwork_BaseFactory || (ɵNetwork_BaseFactory = i0.ɵɵgetInheritedFactory(Network)))(t || Network);\n    };\n  }();\n  Network.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Network,\n    factory: Network.ɵfac\n  });\n  Network.pluginName = \"Network\";\n  Network.plugin = \"cordova-plugin-network-information\";\n  Network.pluginRef = \"navigator.connection\";\n  Network.repo = \"https://github.com/apache/cordova-plugin-network-information\";\n  Network.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\"];\n  Network = __decorate([], Network);\n  return Network;\n}(AwesomeCordovaNativePlugin);\nexport { Network };\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Network, [{\n    type: Injectable\n  }], null, {\n    type: [],\n    downlinkMax: [],\n    onChange: [],\n    onDisconnect: [],\n    onConnect: []\n  });\n})();","map":{"version":3,"names":["__decorate","__extends","Injectable","AwesomeCordovaNativePlugin","cordova","checkAvailability","cordovaPropertyGet","cordovaPropertySet","Observable","merge","mapTo","i0","Connection","Network","_super","_this","apply","arguments","UNKNOWN","ETHERNET","WIFI","CELL_2G","CELL_3G","CELL_4G","CELL","NONE","prototype","onChange","onConnect","pipe","onDisconnect","Object","defineProperty","get","set","value","enumerable","configurable","ɵfac","ɵNetwork_BaseFactory","Network_Factory","t","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","pluginName","plugin","pluginRef","repo","platforms","ngDevMode","ɵsetClassMetadata","type","downlinkMax"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@awesome-cordova-plugins/network/ngx/index.js"],"sourcesContent":["import { __decorate, __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova, checkAvailability, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';\nimport { Observable, merge } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport var Connection;\n(function (Connection) {\n    Connection[\"UNKNOWN\"] = \"unknown\";\n    Connection[\"ETHERNET\"] = \"ethernet\";\n    Connection[\"WIFI\"] = \"wifi\";\n    Connection[\"CELL_2G\"] = \"2g\";\n    Connection[\"CELL_3G\"] = \"3g\";\n    Connection[\"CELL_4G\"] = \"4g\";\n    Connection[\"CELL\"] = \"cellular\";\n    Connection[\"NONE\"] = \"none\";\n})(Connection || (Connection = {}));\nvar Network = /** @class */ (function (_super) {\n    __extends(Network, _super);\n    function Network() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Constants for possible connection types\n         */\n        _this.Connection = {\n            UNKNOWN: 'unknown',\n            ETHERNET: 'ethernet',\n            WIFI: 'wifi',\n            CELL_2G: '2g',\n            CELL_3G: '3g',\n            CELL_4G: '4g',\n            CELL: 'cellular',\n            NONE: 'none',\n        };\n        return _this;\n    }\n    Network.prototype.onChange = function () {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return merge(_this.onConnect().pipe(mapTo('connected')), _this.onDisconnect().pipe(mapTo('disconnected')));\n            }\n        })();\n    };\n    Network.prototype.onDisconnect = function () { return cordova(this, \"onDisconnect\", { \"eventObservable\": true, \"event\": \"offline\", \"element\": \"document\" }, arguments); };\n    Network.prototype.onConnect = function () { return cordova(this, \"onConnect\", { \"eventObservable\": true, \"event\": \"online\", \"element\": \"document\" }, arguments); };\n    Object.defineProperty(Network.prototype, \"type\", {\n        get: function () { return cordovaPropertyGet(this, \"type\"); },\n        set: function (value) { cordovaPropertySet(this, \"type\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Network.prototype, \"downlinkMax\", {\n        get: function () { return cordovaPropertyGet(this, \"downlinkMax\"); },\n        set: function (value) { cordovaPropertySet(this, \"downlinkMax\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Network.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: Network, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    Network.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: Network });\n    Network.pluginName = \"Network\";\n    Network.plugin = \"cordova-plugin-network-information\";\n    Network.pluginRef = \"navigator.connection\";\n    Network.repo = \"https://github.com/apache/cordova-plugin-network-information\";\n    Network.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\"];\n    Network = __decorate([], Network);\n    return Network;\n}(AwesomeCordovaNativePlugin));\nexport { Network };\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: Network, decorators: [{\n            type: Injectable\n        }], propDecorators: { type: [], downlinkMax: [], onChange: [], onDisconnect: [], onConnect: [] } });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}