{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport { AddonModWikiIndexPage } from '../../pages/index';\nimport { AddonModWiki } from '../wiki';\nimport { AddonModWikiModuleHandlerService } from './module';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to treat links to create a wiki page.\n */\nexport class AddonModWikiCreateLinkHandlerService extends CoreContentLinksHandlerBase {\n  constructor() {\n    super(...arguments);\n    this.name = 'AddonModWikiCreateLinkHandler';\n    this.featureName = 'CoreCourseModuleDelegate_AddonModWiki';\n    this.pattern = /\\/mod\\/wiki\\/create\\.php.*([&?]swid=\\d+)/;\n  }\n  /**\n   * Check if the current view is a wiki page of the same wiki.\n   *\n   * @param route Activated route if current route is wiki index page, null otherwise.\n   * @param subwikiId Subwiki ID to check.\n   * @param siteId Site ID.\n   * @returns Promise resolved with boolean: whether current view belongs to the same wiki.\n   */\n  currentStateIsSameWiki(route, subwikiId, siteId) {\n    return _asyncToGenerator(function* () {\n      if (!route) {\n        // Current view isn't wiki index.\n        return false;\n      }\n      const params = route.snapshot.params;\n      const queryParams = route.snapshot.queryParams;\n      if (queryParams.subwikiId == subwikiId) {\n        // Same subwiki, so it's same wiki.\n        return true;\n      }\n      const options = {\n        cmId: params.cmId,\n        readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */,\n        siteId\n      };\n      if (queryParams.pageId) {\n        // Get the page contents to check the subwiki.\n        try {\n          const page = yield AddonModWiki.getPageContents(queryParams.pageId, options);\n          return page.subwikiid == subwikiId;\n        } catch (_unused) {\n          // Not found, check next case.\n        }\n      }\n      try {\n        // Get the wiki.\n        const wiki = yield AddonModWiki.getWiki(params.courseId, params.cmId, options);\n        // Check if the subwiki belongs to this wiki.\n        return yield AddonModWiki.wikiHasSubwiki(wiki.id, subwikiId, options);\n      } catch (_unused2) {\n        // Not found, return false.\n        return false;\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getActions(siteIds, url, params, courseId) {\n    var _this = this;\n    courseId = Number(courseId || params.courseid || params.cid);\n    return [{\n      action: function () {\n        var _ref = _asyncToGenerator(function* (siteId) {\n          const modal = yield CoreDomUtils.showModalLoading();\n          try {\n            const route = CoreNavigator.getCurrentRoute({\n              pageComponent: AddonModWikiIndexPage\n            });\n            if (!route) {\n              // Current view isn't wiki index.\n              return;\n            }\n            const subwikiId = parseInt(params.swid, 10);\n            const wikiId = parseInt(params.wid, 10);\n            let path = AddonModWikiModuleHandlerService.PAGE_NAME;\n            // Check if the link is inside the same wiki.\n            const isSameWiki = yield _this.currentStateIsSameWiki(route, subwikiId, siteId);\n            if (isSameWiki) {\n              // User is seeing the wiki, we can get the module from the wiki params.\n              path = path + `/${route.snapshot.params.courseId}/${route.snapshot.params.cmId}/edit`;\n            } else if (wikiId) {\n              // The URL specifies which wiki it belongs to. Get the module.\n              const module = yield CoreCourse.getModuleBasicInfoByInstance(wikiId, 'wiki', {\n                siteId,\n                readingStrategy: 1 /* CoreSitesReadingStrategy.PREFER_CACHE */\n              });\n              path = path + `/${module.course}/${module.id}/edit`;\n            } else {\n              // Cannot get module ID.\n              path = path + `/${courseId || 0}/0/edit`;\n            }\n            // Open the page.\n            CoreNavigator.navigateToSitePath(path, {\n              params: {\n                pageTitle: params.title,\n                subwikiId: subwikiId\n              },\n              siteId\n            });\n          } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_wiki.errorloadingpage', true);\n          } finally {\n            modal.dismiss();\n          }\n        });\n        return function action(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    }];\n  }\n}\n_class = AddonModWikiCreateLinkHandlerService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵAddonModWikiCreateLinkHandlerService_BaseFactory;\n  return function AddonModWikiCreateLinkHandlerService_Factory(t) {\n    return (ɵAddonModWikiCreateLinkHandlerService_BaseFactory || (ɵAddonModWikiCreateLinkHandlerService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModWikiCreateLinkHandler = makeSingleton(AddonModWikiCreateLinkHandlerService);","map":{"version":3,"names":["CoreContentLinksHandlerBase","CoreCourse","CoreNavigator","CoreDomUtils","makeSingleton","AddonModWikiIndexPage","AddonModWiki","AddonModWikiModuleHandlerService","AddonModWikiCreateLinkHandlerService","constructor","name","featureName","pattern","currentStateIsSameWiki","route","subwikiId","siteId","_asyncToGenerator","params","snapshot","queryParams","options","cmId","readingStrategy","pageId","page","getPageContents","subwikiid","_unused","wiki","getWiki","courseId","wikiHasSubwiki","id","_unused2","getActions","siteIds","url","_this","Number","courseid","cid","action","_ref","modal","showModalLoading","getCurrentRoute","pageComponent","parseInt","swid","wikiId","wid","path","PAGE_NAME","isSameWiki","module","getModuleBasicInfoByInstance","course","navigateToSitePath","pageTitle","title","error","showErrorModalDefault","dismiss","_x","apply","arguments","t","factory","ɵfac","providedIn","AddonModWikiCreateLinkHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/wiki/services/handlers/create-link.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreContentLinksHandlerBase } from '@features/contentlinks/classes/base-handler';\nimport { CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { makeSingleton } from '@singletons';\nimport { AddonModWikiIndexPage } from '../../pages/index';\nimport { AddonModWiki } from '../wiki';\nimport { AddonModWikiModuleHandlerService } from './module';\n\n/**\n * Handler to treat links to create a wiki page.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModWikiCreateLinkHandlerService extends CoreContentLinksHandlerBase {\n\n    name = 'AddonModWikiCreateLinkHandler';\n    featureName = 'CoreCourseModuleDelegate_AddonModWiki';\n    pattern = /\\/mod\\/wiki\\/create\\.php.*([&?]swid=\\d+)/;\n\n    /**\n     * Check if the current view is a wiki page of the same wiki.\n     *\n     * @param route Activated route if current route is wiki index page, null otherwise.\n     * @param subwikiId Subwiki ID to check.\n     * @param siteId Site ID.\n     * @returns Promise resolved with boolean: whether current view belongs to the same wiki.\n     */\n    protected async currentStateIsSameWiki(route: ActivatedRoute | null, subwikiId: number, siteId: string): Promise<boolean> {\n        if (!route) {\n            // Current view isn't wiki index.\n            return false;\n        }\n\n        const params = route.snapshot.params;\n        const queryParams = route.snapshot.queryParams;\n\n        if (queryParams.subwikiId == subwikiId) {\n            // Same subwiki, so it's same wiki.\n            return true;\n        }\n\n        const options = {\n            cmId: params.cmId,\n            readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE,\n            siteId,\n        };\n\n        if (queryParams.pageId) {\n            // Get the page contents to check the subwiki.\n            try {\n                const page = await AddonModWiki.getPageContents(queryParams.pageId, options);\n\n                return page.subwikiid == subwikiId;\n            } catch {\n                // Not found, check next case.\n            }\n        }\n\n        try {\n            // Get the wiki.\n            const wiki = await AddonModWiki.getWiki(params.courseId, params.cmId, options);\n\n            // Check if the subwiki belongs to this wiki.\n            return await AddonModWiki.wikiHasSubwiki(wiki.id, subwikiId, options);\n        } catch {\n            // Not found, return false.\n            return false;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getActions(\n        siteIds: string[],\n        url: string,\n        params: Record<string, string>,\n        courseId?: number,\n    ): CoreContentLinksAction[] | Promise<CoreContentLinksAction[]> {\n        courseId = Number(courseId || params.courseid || params.cid);\n\n        return [{\n            action: async (siteId: string) => {\n                const modal = await CoreDomUtils.showModalLoading();\n\n                try {\n                    const route = CoreNavigator.getCurrentRoute({ pageComponent: AddonModWikiIndexPage });\n                    if (!route) {\n                        // Current view isn't wiki index.\n                        return;\n                    }\n                    const subwikiId = parseInt(params.swid, 10);\n                    const wikiId = parseInt(params.wid, 10);\n                    let path = AddonModWikiModuleHandlerService.PAGE_NAME;\n\n                    // Check if the link is inside the same wiki.\n                    const isSameWiki = await this.currentStateIsSameWiki(route, subwikiId, siteId);\n\n                    if (isSameWiki) {\n                        // User is seeing the wiki, we can get the module from the wiki params.\n                        path = path + `/${route.snapshot.params.courseId}/${route.snapshot.params.cmId}/edit`;\n                    } else if (wikiId) {\n                        // The URL specifies which wiki it belongs to. Get the module.\n                        const module = await CoreCourse.getModuleBasicInfoByInstance(\n                            wikiId,\n                            'wiki',\n                            { siteId, readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE },\n                        );\n\n                        path = path + `/${module.course}/${module.id}/edit`;\n                    } else {\n                        // Cannot get module ID.\n                        path = path + `/${courseId || 0}/0/edit`;\n                    }\n\n                    // Open the page.\n                    CoreNavigator.navigateToSitePath(\n                        path,\n                        {\n                            params: {\n                                pageTitle: params.title,\n                                subwikiId: subwikiId,\n                            },\n                            siteId,\n                        },\n                    );\n                } catch (error) {\n                    CoreDomUtils.showErrorModalDefault(error, 'addon.mod_wiki.errorloadingpage', true);\n                } finally {\n                    modal.dismiss();\n                }\n            },\n        }];\n    }\n\n}\n\nexport const AddonModWikiCreateLinkHandler = makeSingleton(AddonModWikiCreateLinkHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}