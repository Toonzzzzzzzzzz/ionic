{"ast":null,"code":"var _class;\nimport moment from 'moment-timezone';\nimport { makeSingleton, Translate } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/*\n * \"Utils\" service with helper functions for date and time.\n*/\nexport class CoreTimeUtilsProvider {\n  /**\n   * Initialize.\n   */\n  initialize() {\n    // Set relative time thresholds for humanize(), otherwise for example 47 minutes were converted to 'an hour'.\n    moment.relativeTimeThreshold('s', 60);\n    moment.relativeTimeThreshold('m', 60);\n    moment.relativeTimeThreshold('h', 24);\n    moment.relativeTimeThreshold('d', 30);\n    moment.relativeTimeThreshold('M', 12);\n    moment.relativeTimeThreshold('y', 365);\n    moment.relativeTimeThreshold('ss', 0); // To display exact number of seconds instead of just \"a few seconds\".\n  }\n  /**\n   * Convert a PHP format to a Moment format.\n   *\n   * @param format PHP format.\n   * @returns Converted format.\n   */\n  convertPHPToMoment(format) {\n    if (typeof format != 'string') {\n      // Not valid.\n      return '';\n    }\n    let converted = '';\n    let escaping = false;\n    for (let i = 0; i < format.length; i++) {\n      let char = format[i];\n      if (char == '%') {\n        // It's a PHP format, try to convert it.\n        i++;\n        char += format[i] || '';\n        if (escaping) {\n          // We were escaping some characters, stop doing it now.\n          escaping = false;\n          converted += ']';\n        }\n        converted += CoreTimeUtilsProvider.FORMAT_REPLACEMENTS[char] !== undefined ? CoreTimeUtilsProvider.FORMAT_REPLACEMENTS[char] : char;\n      } else {\n        // Not a PHP format. We need to escape them, otherwise the letters could be confused with Moment formats.\n        if (!escaping) {\n          escaping = true;\n          converted += '[';\n        }\n        converted += char;\n      }\n    }\n    if (escaping) {\n      // Finish escaping.\n      converted += ']';\n    }\n    return converted;\n  }\n  /**\n   * Fix format to use in an ion-datetime.\n   *\n   * @param format Format to use.\n   * @returns Fixed format.\n   */\n  fixFormatForDatetime(format) {\n    if (!format) {\n      return '';\n    }\n    // The component ion-datetime doesn't support escaping characters ([]), so we remove them.\n    let fixed = format.replace(/[[\\]]/g, '');\n    if (fixed.indexOf('A') != -1) {\n      // Do not use am/pm format because there is a bug in ion-datetime.\n      fixed = fixed.replace(/ ?A/g, '');\n      fixed = fixed.replace(/h/g, 'H');\n    }\n    return fixed;\n  }\n  /**\n   * Return the current timestamp in a \"readable\" format: YYYYMMDDHHmmSS.\n   *\n   * @returns The readable timestamp.\n   */\n  readableTimestamp() {\n    return moment(Date.now()).format('YYYYMMDDHHmmSS');\n  }\n  /**\n   * Return the current timestamp (UNIX format, seconds).\n   *\n   * @returns The current timestamp in seconds.\n   */\n  timestamp() {\n    return Math.round(Date.now() / 1000);\n  }\n  /**\n   * Convert a timestamp into a readable date.\n   *\n   * @param timestamp Timestamp in milliseconds.\n   * @param format The format to use (lang key). Defaults to core.strftimedaydatetime.\n   * @param convert If true (default), convert the format from PHP to Moment. Set it to false for Moment formats.\n   * @param fixDay If true (default) then the leading zero from %d is removed.\n   * @param fixHour If true (default) then the leading zero from %I is removed.\n   * @returns Readable date.\n   */\n  userDate(timestamp, format, convert = true, fixDay = true, fixHour = true) {\n    format = Translate.instant(format ? format : 'core.strftimedaydatetime');\n    if (fixDay) {\n      format = format.replace(/%d/g, '%e');\n    }\n    if (fixHour) {\n      format = format.replace('%I', '%l');\n    }\n    // Format could be in PHP format, convert it to moment.\n    if (convert) {\n      format = this.convertPHPToMoment(format);\n    }\n    return moment(timestamp).format(format);\n  }\n  /**\n   * Convert a timestamp to the format to set to a datetime input.\n   *\n   * @param timestamp Timestamp to convert (in ms). If not provided, current time.\n   * @returns Formatted time.\n   */\n  toDatetimeFormat(timestamp) {\n    return moment(timestamp || Date.now()).toISOString();\n  }\n  /**\n   * Convert a text into user timezone timestamp.\n   *\n   * @param date To convert to timestamp.\n   * @param applyOffset Whether to apply offset to date or not.\n   * @returns Converted timestamp.\n   * @deprecated since 4.1. Use moment(date).unix() instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  convertToTimestamp(date, applyOffset) {\n    return moment(date).unix();\n  }\n  /**\n   * Return the localized ISO format (i.e DDMMYY) from the localized moment format. Useful for translations.\n   * DO NOT USE this function for ion-datetime format. Moment escapes characters with [], but ion-datetime doesn't support it.\n   *\n   * @param localizedFormat Format to use.\n   * @returns Localized ISO format\n   */\n  getLocalizedDateFormat(localizedFormat) {\n    return moment.localeData().longDateFormat(localizedFormat);\n  }\n  /**\n   * For a given timestamp get the midnight value in the user's timezone.\n   *\n   * The calculation is performed relative to the user's midnight timestamp\n   * for today to ensure that timezones are preserved.\n   *\n   * @param timestamp The timestamp to calculate from. If not defined, return today's midnight.\n   * @returns The midnight value of the user's timestamp.\n   */\n  getMidnightForTimestamp(timestamp) {\n    if (timestamp) {\n      return moment(timestamp * 1000).startOf('day').unix();\n    } else {\n      return moment().startOf('day').unix();\n    }\n  }\n  /**\n   * Get the default max year for datetime inputs.\n   *\n   * @returns The maximum year for datetime inputs.\n   */\n  getDatetimeDefaultMax() {\n    return String(moment().year() + 20);\n  }\n  /**\n   * Get the default min year for datetime inputs.\n   *\n   * @returns The minimum year for datetime inputs.\n   */\n  getDatetimeDefaultMin() {\n    return String(moment().year() - 20);\n  }\n}\n_class = CoreTimeUtilsProvider;\n_class.FORMAT_REPLACEMENTS = {\n  '%a': 'ddd',\n  '%A': 'dddd',\n  '%d': 'DD',\n  '%e': 'D',\n  '%j': 'DDDD',\n  '%u': 'E',\n  '%w': 'e',\n  '%U': 'ww',\n  '%V': 'WW',\n  '%W': 'ww',\n  '%b': 'MMM',\n  '%B': 'MMMM',\n  '%h': 'MMM',\n  '%m': 'MM',\n  '%C': '',\n  '%g': 'GG',\n  '%G': 'GGGG',\n  '%y': 'YY',\n  '%Y': 'YYYY',\n  '%H': 'HH',\n  '%k': 'H',\n  '%I': 'hh',\n  '%l': 'h',\n  '%M': 'mm',\n  '%p': 'A',\n  '%P': 'a',\n  '%r': 'hh:mm:ss A',\n  '%R': 'HH:mm',\n  '%S': 'ss',\n  '%T': 'HH:mm:ss',\n  '%X': 'LTS',\n  '%z': 'ZZ',\n  '%Z': 'ZZ',\n  '%c': 'LLLL',\n  '%D': 'MM/DD/YY',\n  '%F': 'YYYY-MM-DD',\n  '%s': 'X',\n  '%x': 'L',\n  '%n': '\\n',\n  '%t': '\\t',\n  '%%': '%'\n};\n_class.ɵfac = function CoreTimeUtilsProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreTimeUtils = makeSingleton(CoreTimeUtilsProvider);","map":{"version":3,"names":["moment","makeSingleton","Translate","CoreTimeUtilsProvider","initialize","relativeTimeThreshold","convertPHPToMoment","format","converted","escaping","i","length","char","FORMAT_REPLACEMENTS","undefined","fixFormatForDatetime","fixed","replace","indexOf","readableTimestamp","Date","now","timestamp","Math","round","userDate","convert","fixDay","fixHour","instant","toDatetimeFormat","toISOString","convertToTimestamp","date","applyOffset","unix","getLocalizedDateFormat","localizedFormat","localeData","longDateFormat","getMidnightForTimestamp","startOf","getDatetimeDefaultMax","String","year","getDatetimeDefaultMin","_class","factory","ɵfac","providedIn","CoreTimeUtils"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/utils/time.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport moment, { LongDateFormatKey } from 'moment-timezone';\nimport { makeSingleton, Translate } from '@singletons';\n\n/*\n * \"Utils\" service with helper functions for date and time.\n*/\n@Injectable({ providedIn: 'root' })\nexport class CoreTimeUtilsProvider {\n\n    protected static readonly FORMAT_REPLACEMENTS = { // To convert PHP strf format to Moment format.\n        '%a': 'ddd',\n        '%A': 'dddd',\n        '%d': 'DD',\n        '%e': 'D', // Not exactly the same. PHP adds a space instead of leading zero, Moment doesn't.\n        '%j': 'DDDD',\n        '%u': 'E',\n        '%w': 'e', // It might not behave exactly like PHP, the first day could be calculated differently.\n        '%U': 'ww', // It might not behave exactly like PHP, the first week could be calculated differently.\n        '%V': 'WW',\n        '%W': 'ww', // It might not behave exactly like PHP, the first week could be calculated differently.\n        '%b': 'MMM',\n        '%B': 'MMMM',\n        '%h': 'MMM',\n        '%m': 'MM',\n        '%C' : '', // Not supported by Moment.\n        '%g': 'GG',\n        '%G': 'GGGG',\n        '%y': 'YY',\n        '%Y': 'YYYY',\n        '%H': 'HH',\n        '%k': 'H', // Not exactly the same. PHP adds a space instead of leading zero, Moment doesn't.\n        '%I': 'hh',\n        '%l': 'h', // Not exactly the same. PHP adds a space instead of leading zero, Moment doesn't.\n        '%M': 'mm',\n        '%p': 'A',\n        '%P': 'a',\n        '%r': 'hh:mm:ss A',\n        '%R': 'HH:mm',\n        '%S': 'ss',\n        '%T': 'HH:mm:ss',\n        '%X': 'LTS',\n        '%z': 'ZZ',\n        '%Z': 'ZZ', // Not supported by Moment, it was deprecated. Use the same as %z.\n        '%c': 'LLLL',\n        '%D': 'MM/DD/YY',\n        '%F': 'YYYY-MM-DD',\n        '%s': 'X',\n        '%x': 'L',\n        '%n': '\\n',\n        '%t': '\\t',\n        '%%': '%',\n    };\n\n    /**\n     * Initialize.\n     */\n    initialize(): void {\n        // Set relative time thresholds for humanize(), otherwise for example 47 minutes were converted to 'an hour'.\n        moment.relativeTimeThreshold('s', 60);\n        moment.relativeTimeThreshold('m', 60);\n        moment.relativeTimeThreshold('h', 24);\n        moment.relativeTimeThreshold('d', 30);\n        moment.relativeTimeThreshold('M', 12);\n        moment.relativeTimeThreshold('y', 365);\n        moment.relativeTimeThreshold('ss', 0); // To display exact number of seconds instead of just \"a few seconds\".\n    }\n\n    /**\n     * Convert a PHP format to a Moment format.\n     *\n     * @param format PHP format.\n     * @returns Converted format.\n     */\n    convertPHPToMoment(format: string): string {\n        if (typeof format != 'string') {\n            // Not valid.\n            return '';\n        }\n\n        let converted = '';\n        let escaping = false;\n\n        for (let i = 0; i < format.length; i++) {\n            let char = format[i];\n\n            if (char == '%') {\n                // It's a PHP format, try to convert it.\n                i++;\n                char += format[i] || '';\n\n                if (escaping) {\n                    // We were escaping some characters, stop doing it now.\n                    escaping = false;\n                    converted += ']';\n                }\n\n                converted += CoreTimeUtilsProvider.FORMAT_REPLACEMENTS[char] !== undefined ?\n                    CoreTimeUtilsProvider.FORMAT_REPLACEMENTS[char] : char;\n            } else {\n                // Not a PHP format. We need to escape them, otherwise the letters could be confused with Moment formats.\n                if (!escaping) {\n                    escaping = true;\n                    converted += '[';\n                }\n\n                converted += char;\n            }\n        }\n\n        if (escaping) {\n            // Finish escaping.\n            converted += ']';\n        }\n\n        return converted;\n    }\n\n    /**\n     * Fix format to use in an ion-datetime.\n     *\n     * @param format Format to use.\n     * @returns Fixed format.\n     */\n    fixFormatForDatetime(format: string): string {\n        if (!format) {\n            return '';\n        }\n\n        // The component ion-datetime doesn't support escaping characters ([]), so we remove them.\n        let fixed = format.replace(/[[\\]]/g, '');\n\n        if (fixed.indexOf('A') != -1) {\n            // Do not use am/pm format because there is a bug in ion-datetime.\n            fixed = fixed.replace(/ ?A/g, '');\n            fixed = fixed.replace(/h/g, 'H');\n        }\n\n        return fixed;\n    }\n\n    /**\n     * Return the current timestamp in a \"readable\" format: YYYYMMDDHHmmSS.\n     *\n     * @returns The readable timestamp.\n     */\n    readableTimestamp(): string {\n        return moment(Date.now()).format('YYYYMMDDHHmmSS');\n    }\n\n    /**\n     * Return the current timestamp (UNIX format, seconds).\n     *\n     * @returns The current timestamp in seconds.\n     */\n    timestamp(): number {\n        return Math.round(Date.now() / 1000);\n    }\n\n    /**\n     * Convert a timestamp into a readable date.\n     *\n     * @param timestamp Timestamp in milliseconds.\n     * @param format The format to use (lang key). Defaults to core.strftimedaydatetime.\n     * @param convert If true (default), convert the format from PHP to Moment. Set it to false for Moment formats.\n     * @param fixDay If true (default) then the leading zero from %d is removed.\n     * @param fixHour If true (default) then the leading zero from %I is removed.\n     * @returns Readable date.\n     */\n    userDate(timestamp: number, format?: string, convert: boolean = true, fixDay: boolean = true, fixHour: boolean = true): string {\n        format = Translate.instant(format ? format : 'core.strftimedaydatetime') as string;\n\n        if (fixDay) {\n            format = format.replace(/%d/g, '%e');\n        }\n\n        if (fixHour) {\n            format = format.replace('%I', '%l');\n        }\n\n        // Format could be in PHP format, convert it to moment.\n        if (convert) {\n            format = this.convertPHPToMoment(format);\n        }\n\n        return moment(timestamp).format(format);\n    }\n\n    /**\n     * Convert a timestamp to the format to set to a datetime input.\n     *\n     * @param timestamp Timestamp to convert (in ms). If not provided, current time.\n     * @returns Formatted time.\n     */\n    toDatetimeFormat(timestamp?: number): string {\n        return moment(timestamp || Date.now()).toISOString();\n    }\n\n    /**\n     * Convert a text into user timezone timestamp.\n     *\n     * @param date To convert to timestamp.\n     * @param applyOffset Whether to apply offset to date or not.\n     * @returns Converted timestamp.\n     * @deprecated since 4.1. Use moment(date).unix() instead.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    convertToTimestamp(date: string, applyOffset?: boolean): number {\n        return moment(date).unix();\n    }\n\n    /**\n     * Return the localized ISO format (i.e DDMMYY) from the localized moment format. Useful for translations.\n     * DO NOT USE this function for ion-datetime format. Moment escapes characters with [], but ion-datetime doesn't support it.\n     *\n     * @param localizedFormat Format to use.\n     * @returns Localized ISO format\n     */\n    getLocalizedDateFormat(localizedFormat: LongDateFormatKey): string {\n        return moment.localeData().longDateFormat(localizedFormat);\n    }\n\n    /**\n     * For a given timestamp get the midnight value in the user's timezone.\n     *\n     * The calculation is performed relative to the user's midnight timestamp\n     * for today to ensure that timezones are preserved.\n     *\n     * @param timestamp The timestamp to calculate from. If not defined, return today's midnight.\n     * @returns The midnight value of the user's timestamp.\n     */\n    getMidnightForTimestamp(timestamp?: number): number {\n        if (timestamp) {\n            return moment(timestamp * 1000).startOf('day').unix();\n        } else {\n            return moment().startOf('day').unix();\n        }\n    }\n\n    /**\n     * Get the default max year for datetime inputs.\n     *\n     * @returns The maximum year for datetime inputs.\n     */\n    getDatetimeDefaultMax(): string {\n        return String(moment().year() + 20);\n    }\n\n    /**\n     * Get the default min year for datetime inputs.\n     *\n     * @returns The minimum year for datetime inputs.\n     */\n    getDatetimeDefaultMin(): string {\n        return String(moment().year() - 20);\n    }\n\n}\n\nexport const CoreTimeUtils = makeSingleton(CoreTimeUtilsProvider);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}