{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldLatlongComponent } from '../component/latlong';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for latlong data field plugin.\n */\nexport class AddonModDataFieldLatlongHandlerService {\n  constructor() {\n    this.name = 'AddonModDataFieldLatlongHandler';\n    this.type = 'latlong';\n  }\n  /**\n   * @inheritdoc\n   */\n  getComponent() {\n    return AddonModDataFieldLatlongComponent;\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldSearchData(field, inputData) {\n    const fieldName = 'f_' + field.id;\n    if (inputData[fieldName]) {\n      return [{\n        name: fieldName,\n        value: inputData[fieldName]\n      }];\n    }\n    return [];\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldEditData(field, inputData) {\n    const fieldName = 'f_' + field.id;\n    return [{\n      fieldid: field.id,\n      subfield: '0',\n      value: inputData[fieldName + '_0'] || ''\n    }, {\n      fieldid: field.id,\n      subfield: '1',\n      value: inputData[fieldName + '_1'] || ''\n    }];\n  }\n  /**\n   * @inheritdoc\n   */\n  hasFieldDataChanged(field, inputData, originalFieldData) {\n    const fieldName = 'f_' + field.id;\n    const lat = inputData[fieldName + '_0'] || '';\n    const long = inputData[fieldName + '_1'] || '';\n    const originalLat = originalFieldData && originalFieldData.content || '';\n    const originalLong = originalFieldData && originalFieldData.content1 || '';\n    return lat != originalLat || long != originalLong;\n  }\n  /**\n   * @inheritdoc\n   */\n  getFieldsNotifications(field, inputData) {\n    let valueCount = 0;\n    // The lat long class has two values that need to be checked.\n    inputData.forEach(value => {\n      if (value.value !== undefined && value.value != '') {\n        valueCount++;\n      }\n    });\n    // If we get here then only one field has been filled in.\n    if (valueCount == 1) {\n      return Translate.instant('addon.mod_data.latlongboth');\n    } else if (field.required && valueCount == 0) {\n      return Translate.instant('addon.mod_data.errormustsupplyvalue');\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  overrideData(originalContent, offlineContent) {\n    originalContent.content = offlineContent['0'] || '';\n    originalContent.content1 = offlineContent['1'] || '';\n    return originalContent;\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n}\n_class = AddonModDataFieldLatlongHandlerService;\n_class.ɵfac = function AddonModDataFieldLatlongHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModDataFieldLatlongHandler = makeSingleton(AddonModDataFieldLatlongHandlerService);","map":{"version":3,"names":["makeSingleton","Translate","AddonModDataFieldLatlongComponent","AddonModDataFieldLatlongHandlerService","constructor","name","type","getComponent","getFieldSearchData","field","inputData","fieldName","id","value","getFieldEditData","fieldid","subfield","hasFieldDataChanged","originalFieldData","lat","long","originalLat","content","originalLong","content1","getFieldsNotifications","valueCount","forEach","undefined","instant","required","overrideData","originalContent","offlineContent","isEnabled","_asyncToGenerator","factory","ɵfac","providedIn","AddonModDataFieldLatlongHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/data/fields/latlong/services/handler.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    AddonModDataEntryField,\n    AddonModDataField,\n    AddonModDataSearchEntriesAdvancedFieldFormatted,\n    AddonModDataSubfieldData,\n} from '@addons/mod/data/services/data';\nimport { AddonModDataFieldHandler } from '@addons/mod/data/services/data-fields-delegate';\nimport { Injectable, Type } from '@angular/core';\nimport { CoreFormFields } from '@singletons/form';\nimport { makeSingleton, Translate } from '@singletons';\nimport { AddonModDataFieldLatlongComponent } from '../component/latlong';\nimport type { AddonModDataFieldPluginBaseComponent } from '@addons/mod/data/classes/base-field-plugin-component';\n\n/**\n * Handler for latlong data field plugin.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModDataFieldLatlongHandlerService implements AddonModDataFieldHandler {\n\n    name = 'AddonModDataFieldLatlongHandler';\n    type = 'latlong';\n\n    /**\n     * @inheritdoc\n     */\n    getComponent(): Type<AddonModDataFieldPluginBaseComponent> {\n        return AddonModDataFieldLatlongComponent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldSearchData(\n        field: AddonModDataField,\n        inputData: CoreFormFields<string>,\n    ): AddonModDataSearchEntriesAdvancedFieldFormatted[] {\n        const fieldName = 'f_' + field.id;\n\n        if (inputData[fieldName]) {\n            return [{\n                name: fieldName,\n                value: inputData[fieldName],\n            }];\n        }\n\n        return [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldEditData(field: AddonModDataField, inputData: CoreFormFields<string>): AddonModDataSubfieldData[] {\n        const fieldName = 'f_' + field.id;\n\n        return [\n            {\n                fieldid: field.id,\n                subfield: '0',\n                value: inputData[fieldName + '_0'] || '',\n            },\n            {\n                fieldid: field.id,\n                subfield: '1',\n                value: inputData[fieldName + '_1'] || '',\n            },\n        ];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    hasFieldDataChanged(\n        field: AddonModDataField,\n        inputData: CoreFormFields<string>,\n        originalFieldData: AddonModDataEntryField,\n    ): boolean {\n        const fieldName = 'f_' + field.id;\n        const lat = inputData[fieldName + '_0'] || '';\n        const long = inputData[fieldName + '_1'] || '';\n        const originalLat = (originalFieldData && originalFieldData.content) || '';\n        const originalLong = (originalFieldData && originalFieldData.content1) || '';\n\n        return lat != originalLat || long != originalLong;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFieldsNotifications(field: AddonModDataField, inputData: AddonModDataSubfieldData[]): string | undefined {\n        let valueCount = 0;\n\n        // The lat long class has two values that need to be checked.\n        inputData.forEach((value) => {\n            if (value.value !== undefined && value.value != '') {\n                valueCount++;\n            }\n        });\n\n        // If we get here then only one field has been filled in.\n        if (valueCount == 1) {\n            return Translate.instant('addon.mod_data.latlongboth');\n        } else if (field.required && valueCount == 0) {\n            return Translate.instant('addon.mod_data.errormustsupplyvalue');\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    overrideData(originalContent: AddonModDataEntryField, offlineContent: CoreFormFields<string>): AddonModDataEntryField {\n        originalContent.content = offlineContent['0'] || '';\n        originalContent.content1 = offlineContent['1'] || '';\n\n        return originalContent;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n}\nexport const AddonModDataFieldLatlongHandler = makeSingleton(AddonModDataFieldLatlongHandlerService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}