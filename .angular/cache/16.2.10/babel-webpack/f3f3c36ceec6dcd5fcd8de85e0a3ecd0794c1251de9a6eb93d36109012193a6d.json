{"ast":null,"code":"var _class;\nimport moment from 'moment-timezone';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { Translate } from '@singletons';\nimport { CoreLogger } from '@singletons/logger';\nimport * as i0 from \"@angular/core\";\n/**\n * Filter to display a date using the day, or the time.\n *\n * This shows a short version of a date. Use this filter when you want\n * the user to visualise when the action was done relatively to today's date.\n *\n * For instance, if the action happened during this day it will display the time,\n * but when the action happened few days ago, it will display the day of the week.\n *\n * The older the date is, the more information about it will be displayed.\n *\n * This filter expects a timestamp NOT including milliseconds.\n */\nexport class CoreDateDayOrTimePipe {\n  constructor() {\n    this.logger = CoreLogger.getInstance('CoreDateDayOrTimePipe');\n  }\n  /**\n   * Format a timestamp.\n   *\n   * @param timestamp The UNIX timestamp (without milliseconds).\n   * @returns Formatted time.\n   */\n  transform(timestamp) {\n    if (typeof timestamp == 'string') {\n      // Convert the value to a number.\n      const numberTimestamp = parseInt(timestamp, 10);\n      if (isNaN(numberTimestamp)) {\n        this.logger.error('Invalid value received', timestamp);\n        return timestamp;\n      }\n      timestamp = numberTimestamp;\n    }\n    return moment(timestamp * 1000).calendar(null, {\n      sameDay: CoreTimeUtils.convertPHPToMoment(Translate.instant('core.strftimetime')),\n      lastDay: Translate.instant('core.dflastweekdate'),\n      lastWeek: Translate.instant('core.dflastweekdate'),\n      sameElse: CoreTimeUtils.convertPHPToMoment(Translate.instant('core.strftimedatefullshort'))\n    });\n  }\n}\n_class = CoreDateDayOrTimePipe;\n_class.ɵfac = function CoreDateDayOrTimePipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"coreDateDayOrTime\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["moment","CoreTimeUtils","Translate","CoreLogger","CoreDateDayOrTimePipe","constructor","logger","getInstance","transform","timestamp","numberTimestamp","parseInt","isNaN","error","calendar","sameDay","convertPHPToMoment","instant","lastDay","lastWeek","sameElse","pure"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/pipes/date-day-or-time.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport moment from 'moment-timezone';\n\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { Translate } from '@singletons';\nimport { CoreLogger } from '@singletons/logger';\n\n/**\n * Filter to display a date using the day, or the time.\n *\n * This shows a short version of a date. Use this filter when you want\n * the user to visualise when the action was done relatively to today's date.\n *\n * For instance, if the action happened during this day it will display the time,\n * but when the action happened few days ago, it will display the day of the week.\n *\n * The older the date is, the more information about it will be displayed.\n *\n * This filter expects a timestamp NOT including milliseconds.\n */\n@Pipe({\n    name: 'coreDateDayOrTime',\n})\nexport class CoreDateDayOrTimePipe implements PipeTransform {\n\n    protected logger: CoreLogger;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreDateDayOrTimePipe');\n    }\n\n    /**\n     * Format a timestamp.\n     *\n     * @param timestamp The UNIX timestamp (without milliseconds).\n     * @returns Formatted time.\n     */\n    transform(timestamp: string | number): string {\n        if (typeof timestamp == 'string') {\n            // Convert the value to a number.\n            const numberTimestamp = parseInt(timestamp, 10);\n            if (isNaN(numberTimestamp)) {\n                this.logger.error('Invalid value received', timestamp);\n\n                return timestamp;\n            }\n            timestamp = numberTimestamp;\n        }\n\n        return moment(timestamp * 1000).calendar(null, {\n            sameDay: CoreTimeUtils.convertPHPToMoment(Translate.instant('core.strftimetime')),\n            lastDay: Translate.instant('core.dflastweekdate'),\n            lastWeek: Translate.instant('core.dflastweekdate'),\n            sameElse: CoreTimeUtils.convertPHPToMoment(Translate.instant('core.strftimedatefullshort')),\n        });\n    }\n\n}\n"],"mappings":";AAeA,OAAOA,MAAM,MAAM,iBAAiB;AAEpC,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,UAAU,QAAQ,oBAAoB;;AAE/C;;;;;;;;;;;;;AAgBA,OAAM,MAAOC,qBAAqB;EAI9BC,YAAA;IACI,IAAI,CAACC,MAAM,GAAGH,UAAU,CAACI,WAAW,CAAC,uBAAuB,CAAC;EACjE;EAEA;;;;;;EAMAC,SAASA,CAACC,SAA0B;IAChC,IAAI,OAAOA,SAAS,IAAI,QAAQ,EAAE;MAC9B;MACA,MAAMC,eAAe,GAAGC,QAAQ,CAACF,SAAS,EAAE,EAAE,CAAC;MAC/C,IAAIG,KAAK,CAACF,eAAe,CAAC,EAAE;QACxB,IAAI,CAACJ,MAAM,CAACO,KAAK,CAAC,wBAAwB,EAAEJ,SAAS,CAAC;QAEtD,OAAOA,SAAS;;MAEpBA,SAAS,GAAGC,eAAe;;IAG/B,OAAOV,MAAM,CAACS,SAAS,GAAG,IAAI,CAAC,CAACK,QAAQ,CAAC,IAAI,EAAE;MAC3CC,OAAO,EAAEd,aAAa,CAACe,kBAAkB,CAACd,SAAS,CAACe,OAAO,CAAC,mBAAmB,CAAC,CAAC;MACjFC,OAAO,EAAEhB,SAAS,CAACe,OAAO,CAAC,qBAAqB,CAAC;MACjDE,QAAQ,EAAEjB,SAAS,CAACe,OAAO,CAAC,qBAAqB,CAAC;MAClDG,QAAQ,EAAEnB,aAAa,CAACe,kBAAkB,CAACd,SAAS,CAACe,OAAO,CAAC,4BAA4B,CAAC;KAC7F,CAAC;EACN;;SAhCSb,qBAAqB;;mBAArBA,MAAqB;AAAA;;;QAArBA,MAAqB;EAAAiB,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}