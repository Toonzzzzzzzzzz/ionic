{"ast":null,"code":"/* eslint-disable */\n/**\n * Original code taken from https://github.com/kvz/locutus\n */\nfunction initCache() {\n  const store = [];\n  // cache only first element, second is length to jump ahead for the parser\n  const cache = function cache(value) {\n    store.push(value[0]);\n    return value;\n  };\n  cache.get = index => {\n    if (index >= store.length) {\n      throw RangeError(`Can't resolve reference ${index + 1}`);\n    }\n    return store[index];\n  };\n  return cache;\n}\nfunction expectType(str, cache) {\n  const types = /^(?:N(?=;)|[bidsSaOCrR](?=:)|[^:]+(?=:))/g;\n  const type = (types.exec(str) || [])[0];\n  if (!type) {\n    throw SyntaxError('Invalid input: ' + str);\n  }\n  switch (type) {\n    case 'N':\n      return cache([null, 2]);\n    case 'b':\n      return cache(expectBool(str));\n    case 'i':\n      return cache(expectInt(str));\n    case 'd':\n      return cache(expectFloat(str));\n    case 's':\n      return cache(expectString(str));\n    case 'S':\n      return cache(expectEscapedString(str));\n    case 'a':\n      return expectArray(str, cache);\n    case 'O':\n      return expectObject(str, cache);\n    case 'C':\n      return expectClass(str, cache);\n    case 'r':\n    case 'R':\n      return expectReference(str, cache);\n    default:\n      throw SyntaxError(`Invalid or unsupported data type: ${type}`);\n  }\n}\nfunction expectBool(str) {\n  const reBool = /^b:([01]);/;\n  const [match, boolMatch] = reBool.exec(str) || [];\n  if (!boolMatch) {\n    throw SyntaxError('Invalid bool value, expected 0 or 1');\n  }\n  return [boolMatch === '1', match === null || match === void 0 ? void 0 : match.length];\n}\nfunction expectInt(str) {\n  const reInt = /^i:([+-]?\\d+);/;\n  const [match, intMatch] = reInt.exec(str) || [];\n  if (!intMatch) {\n    throw SyntaxError('Expected an integer value');\n  }\n  return [parseInt(intMatch, 10), match === null || match === void 0 ? void 0 : match.length];\n}\nfunction expectFloat(str) {\n  const reFloat = /^d:(NAN|-?INF|(?:\\d+\\.\\d*|\\d*\\.\\d+|\\d+)(?:[eE][+-]\\d+)?);/;\n  const [match, floatMatch] = reFloat.exec(str) || [];\n  if (!floatMatch) {\n    throw SyntaxError('Expected a float value');\n  }\n  let floatValue;\n  switch (floatMatch) {\n    case 'NAN':\n      floatValue = Number.NaN;\n      break;\n    case '-INF':\n      floatValue = Number.NEGATIVE_INFINITY;\n      break;\n    case 'INF':\n      floatValue = Number.POSITIVE_INFINITY;\n      break;\n    default:\n      floatValue = parseFloat(floatMatch);\n      break;\n  }\n  return [floatValue, match === null || match === void 0 ? void 0 : match.length];\n}\nfunction readBytes(str, len, escapedString = false) {\n  let bytes = 0;\n  let out = '';\n  let c = 0;\n  const strLen = str.length;\n  let wasHighSurrogate = false;\n  let escapedChars = 0;\n  while (bytes < len && c < strLen) {\n    let chr = str.charAt(c);\n    const code = chr.charCodeAt(0);\n    const isHighSurrogate = code >= 0xd800 && code <= 0xdbff;\n    const isLowSurrogate = code >= 0xdc00 && code <= 0xdfff;\n    if (escapedString && chr === '\\\\') {\n      chr = String.fromCharCode(parseInt(str.substring(c + 1, c + 3), 16));\n      escapedChars++;\n      // each escaped sequence is 3 characters. Go 2 chars ahead.\n      // third character will be jumped over a few lines later\n      c += 2;\n    }\n    c++;\n    bytes += isHighSurrogate || isLowSurrogate && wasHighSurrogate\n    // if high surrogate, count 2 bytes, as expectation is to be followed by low surrogate\n    // if low surrogate preceded by high surrogate, add 2 bytes\n    ? 2 : code > 0x7ff\n    // otherwise low surrogate falls into this part\n    ? 3 : code > 0x7f ? 2 : 1;\n    // if high surrogate is not followed by low surrogate, add 1 more byte\n    bytes += wasHighSurrogate && !isLowSurrogate ? 1 : 0;\n    out += chr;\n    wasHighSurrogate = isHighSurrogate;\n  }\n  return [out, bytes, escapedChars];\n}\nfunction expectString(str) {\n  // PHP strings consist of one-byte characters.\n  // JS uses 2 bytes with possible surrogate pairs.\n  // Serialized length of 2 is still 1 JS string character\n  const reStrLength = /^s:(\\d+):\"/g; // also match the opening \" char\n  const [match, byteLenMatch] = reStrLength.exec(str) || [];\n  if (!match) {\n    throw SyntaxError('Expected a string value');\n  }\n  const len = parseInt(byteLenMatch, 10);\n  str = str.substring(match.length);\n  let [strMatch, bytes] = readBytes(str, len);\n  if (bytes !== len) {\n    throw SyntaxError(`Expected string of ${len} bytes, but got ${bytes}`);\n  }\n  str = str.substring(strMatch.length);\n  // strict parsing, match closing \"; chars\n  if (!str.startsWith('\";')) {\n    throw SyntaxError('Expected \";');\n  }\n  return [strMatch, match.length + strMatch.length + 2]; // skip last \";\n}\n\nfunction expectEscapedString(str) {\n  const reStrLength = /^S:(\\d+):\"/g; // also match the opening \" char\n  const [match, strLenMatch] = reStrLength.exec(str) || [];\n  if (!match) {\n    throw SyntaxError('Expected an escaped string value');\n  }\n  const len = parseInt(strLenMatch, 10);\n  str = str.substring(match.length);\n  let [strMatch, bytes, escapedChars] = readBytes(str, len, true);\n  if (bytes !== len) {\n    throw SyntaxError(`Expected escaped string of ${len} bytes, but got ${bytes}`);\n  }\n  str = str.substring(strMatch.length + escapedChars * 2);\n  // strict parsing, match closing \"; chars\n  if (!str.startsWith('\";')) {\n    throw SyntaxError('Expected \";');\n  }\n  return [strMatch, match.length + strMatch.length + 2]; // skip last \";\n}\n\nfunction expectKeyOrIndex(str) {\n  try {\n    return expectString(str);\n  } catch (err) {}\n  try {\n    return expectEscapedString(str);\n  } catch (err) {}\n  try {\n    return expectInt(str);\n  } catch (err) {\n    throw SyntaxError('Expected key or index');\n  }\n}\nfunction expectObject(str, cache) {\n  // O:<class name length>:\"class name\":<prop count>:{<props and values>}\n  // O:8:\"stdClass\":2:{s:3:\"foo\";s:3:\"bar\";s:3:\"bar\";s:3:\"baz\";}\n  const reObjectLiteral = /^O:(\\d+):\"([^\"]+)\":(\\d+):\\{/;\n  const [objectLiteralBeginMatch, /* classNameLengthMatch */, className, propCountMatch] = reObjectLiteral.exec(str) || [];\n  if (!objectLiteralBeginMatch) {\n    throw SyntaxError('Invalid input');\n  }\n  if (className !== 'stdClass') {\n    throw SyntaxError(`Unsupported object type: ${className}`);\n  }\n  let totalOffset = objectLiteralBeginMatch.length;\n  const propCount = parseInt(propCountMatch, 10);\n  const obj = {};\n  cache([obj]);\n  str = str.substring(totalOffset);\n  for (let i = 0; i < propCount; i++) {\n    const prop = expectKeyOrIndex(str);\n    str = str.substring(prop[1]);\n    totalOffset += prop[1];\n    const value = expectType(str, cache);\n    str = str.substring(value[1]);\n    totalOffset += value[1];\n    if (prop[0]) {\n      obj[prop[0]] = value[0];\n    }\n  }\n  // strict parsing, expect } after object literal\n  if (str.charAt(0) !== '}') {\n    throw SyntaxError('Expected }');\n  }\n  return [obj, totalOffset + 1]; // skip final }\n}\n\nfunction expectClass(str, cache) {\n  // can't be well supported, because requires calling eval (or similar)\n  // in order to call serialized constructor name\n  // which is unsafe\n  // or assume that constructor is defined in global scope\n  // but this is too much limiting\n  throw Error('Not yet implemented');\n}\nfunction expectReference(str, cache) {\n  const reRef = /^[rR]:([1-9]\\d*);/;\n  const [match, refIndex] = reRef.exec(str) || [];\n  if (!match) {\n    throw SyntaxError('Expected reference value');\n  }\n  return [cache.get(parseInt(refIndex, 10) - 1), match.length];\n}\nfunction expectArray(str, cache) {\n  var _arrayLiteralBeginMat;\n  const reArrayLength = /^a:(\\d+):{/;\n  const [arrayLiteralBeginMatch, arrayLengthMatch] = reArrayLength.exec(str) || [];\n  if (!arrayLengthMatch) {\n    throw SyntaxError('Expected array length annotation');\n  }\n  str = str.substring(arrayLiteralBeginMatch === null || arrayLiteralBeginMatch === void 0 ? void 0 : arrayLiteralBeginMatch.length);\n  const array = expectArrayItems(str, parseInt(arrayLengthMatch, 10), cache);\n  // strict parsing, expect closing } brace after array literal\n  if (str.charAt(array[1]) !== '}') {\n    throw SyntaxError('Expected }');\n  }\n  return [array[0], ((_arrayLiteralBeginMat = arrayLiteralBeginMatch === null || arrayLiteralBeginMatch === void 0 ? void 0 : arrayLiteralBeginMatch.length) !== null && _arrayLiteralBeginMat !== void 0 ? _arrayLiteralBeginMat : 0) + array[1] + 1]; // jump over }\n}\n\nfunction expectArrayItems(str, expectedItems = 0, cache) {\n  let key;\n  let hasStringKeys = false;\n  let item;\n  let totalOffset = 0;\n  let items = [];\n  cache([items]);\n  for (let i = 0; i < expectedItems; i++) {\n    key = expectKeyOrIndex(str);\n    // this is for backward compatibility with previous implementation\n    if (!hasStringKeys) {\n      hasStringKeys = typeof key[0] === 'string';\n    }\n    str = str.substring(key[1]);\n    totalOffset += key[1];\n    // references are resolved immediately, so if duplicate key overwrites previous array index\n    // the old value is anyway resolved\n    // fixme: but next time the same reference should point to the new value\n    item = expectType(str, cache);\n    str = str.substring(item[1]);\n    totalOffset += item[1];\n    items[key[0]] = item[0];\n  }\n  // this is for backward compatibility with previous implementation\n  if (hasStringKeys) {\n    items = Object.assign({}, items);\n  }\n  return [items, totalOffset];\n}\nfunction unserialize(str) {\n  //       discuss at: https://locutus.io/php/unserialize/\n  //      original by: Arpad Ray (mailto:arpad@php.net)\n  //      improved by: Pedro Tainha (https://www.pedrotainha.com)\n  //      improved by: Kevin van Zonneveld (https://kvz.io)\n  //      improved by: Kevin van Zonneveld (https://kvz.io)\n  //      improved by: Chris\n  //      improved by: James\n  //      improved by: Le Torbi\n  //      improved by: Eli Skeggs\n  //      bugfixed by: dptr1988\n  //      bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  //      bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //      bugfixed by: philippsimon (https://github.com/philippsimon/)\n  //       revised by: d3x\n  //         input by: Brett Zamir (https://brett-zamir.me)\n  //         input by: Martin (https://www.erlenwiese.de/)\n  //         input by: kilops\n  //         input by: Jaroslaw Czarniak\n  //         input by: lovasoa (https://github.com/lovasoa/)\n  //      improved by: Rafał Kukawski\n  // reimplemented by: Rafał Kukawski\n  //           note 1: We feel the main purpose of this function should be\n  //           note 1: to ease the transport of data between php & js\n  //           note 1: Aiming for PHP-compatibility, we have to translate objects to arrays\n  //        example 1: unserialize('a:3:{i:0;s:5:\"Kevin\";i:1;s:3:\"van\";i:2;s:9:\"Zonneveld\";}')\n  //        returns 1: ['Kevin', 'van', 'Zonneveld']\n  //        example 2: unserialize('a:2:{s:9:\"firstName\";s:5:\"Kevin\";s:7:\"midName\";s:3:\"van\";}')\n  //        returns 2: {firstName: 'Kevin', midName: 'van'}\n  //        example 3: unserialize('a:3:{s:2:\"ü\";s:2:\"ü\";s:3:\"四\";s:3:\"四\";s:4:\"𠜎\";s:4:\"𠜎\";}')\n  //        returns 3: {'ü': 'ü', '四': '四', '𠜎': '𠜎'}\n  //        example 4: unserialize(undefined)\n  //        returns 4: false\n  //        example 5: unserialize('O:8:\"stdClass\":1:{s:3:\"foo\";b:1;}')\n  //        returns 5: { foo: true }\n  //        example 6: unserialize('a:2:{i:0;N;i:1;s:0:\"\";}')\n  //        returns 6: [null, \"\"]\n  //        example 7: unserialize('S:7:\"\\\\65\\\\73\\\\63\\\\61\\\\70\\\\65\\\\64\";')\n  //        returns 7: 'escaped'\n  try {\n    if (typeof str !== 'string') {\n      return false;\n    }\n    return expectType(str, initCache())[0];\n  } catch (err) {\n    console.error(err);\n    return false;\n  }\n}\nfunction substr_replace(str, replace, start, length) {\n  //  discuss at: https://locutus.io/php/substr_replace/\n  // original by: Brett Zamir (https://brett-zamir.me)\n  //   example 1: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', 0)\n  //   returns 1: 'bob'\n  //   example 2: var $var = 'ABCDEFGH:/MNRPQR/'\n  //   example 2: substr_replace($var, 'bob', 0, $var.length)\n  //   returns 2: 'bob'\n  //   example 3: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', 0, 0)\n  //   returns 3: 'bobABCDEFGH:/MNRPQR/'\n  //   example 4: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', 10, -1)\n  //   returns 4: 'ABCDEFGH:/bob/'\n  //   example 5: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', -7, -1)\n  //   returns 5: 'ABCDEFGH:/bob/'\n  //   example 6: substr_replace('ABCDEFGH:/MNRPQR/', '', 10, -1)\n  //   returns 6: 'ABCDEFGH://'\n  if (start < 0) {\n    // start position in str\n    start = start + str.length;\n  }\n  length = length !== undefined ? length : str.length;\n  if (length < 0) {\n    length = length + str.length - start;\n  }\n  return [str.slice(0, start), replace.substring(0, length), replace.slice(length), str.slice(start + length)].join('');\n}\nexport class Locutus {\n  static unserialize(data) {\n    return unserialize(data);\n  }\n  static substrReplace(str, replace, start, length) {\n    return substr_replace(str, replace, start, length);\n  }\n}","map":{"version":3,"names":["initCache","store","cache","value","push","get","index","length","RangeError","expectType","str","types","type","exec","SyntaxError","expectBool","expectInt","expectFloat","expectString","expectEscapedString","expectArray","expectObject","expectClass","expectReference","reBool","match","boolMatch","reInt","intMatch","parseInt","reFloat","floatMatch","floatValue","Number","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","parseFloat","readBytes","len","escapedString","bytes","out","c","strLen","wasHighSurrogate","escapedChars","chr","charAt","code","charCodeAt","isHighSurrogate","isLowSurrogate","String","fromCharCode","substring","reStrLength","byteLenMatch","strMatch","startsWith","strLenMatch","expectKeyOrIndex","err","reObjectLiteral","objectLiteralBeginMatch","className","propCountMatch","totalOffset","propCount","obj","i","prop","Error","reRef","refIndex","_arrayLiteralBeginMat","reArrayLength","arrayLiteralBeginMatch","arrayLengthMatch","array","expectArrayItems","expectedItems","key","hasStringKeys","item","items","Object","assign","unserialize","console","error","substr_replace","replace","start","undefined","slice","join","Locutus","data","substrReplace"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/singletons/locutus.ts"],"sourcesContent":["/* eslint-disable */\n\n/**\n * Original code taken from https://github.com/kvz/locutus\n */\n\nfunction initCache () {\n  const store: any[] = []\n  // cache only first element, second is length to jump ahead for the parser\n  const cache = function cache (value) {\n    store.push(value[0])\n    return value\n  }\n\n  cache.get = (index) => {\n    if (index >= store.length) {\n      throw RangeError(`Can't resolve reference ${index + 1}`)\n    }\n\n    return store[index]\n  }\n\n  return cache\n}\n\nfunction expectType (str, cache) {\n  const types = /^(?:N(?=;)|[bidsSaOCrR](?=:)|[^:]+(?=:))/g\n  const type = (types.exec(str) || [])[0]\n\n  if (!type) {\n    throw SyntaxError('Invalid input: ' + str)\n  }\n\n  switch (type) {\n    case 'N':\n      return cache([ null, 2 ])\n    case 'b':\n      return cache(expectBool(str))\n    case 'i':\n      return cache(expectInt(str))\n    case 'd':\n      return cache(expectFloat(str))\n    case 's':\n      return cache(expectString(str))\n    case 'S':\n      return cache(expectEscapedString(str))\n    case 'a':\n      return expectArray(str, cache)\n    case 'O':\n      return expectObject(str, cache)\n    case 'C':\n      return expectClass(str, cache)\n    case 'r':\n    case 'R':\n      return expectReference(str, cache)\n    default:\n      throw SyntaxError(`Invalid or unsupported data type: ${type}`)\n  }\n}\n\nfunction expectBool (str) {\n  const reBool = /^b:([01]);/\n  const [ match, boolMatch ] = reBool.exec(str) || []\n\n  if (!boolMatch) {\n    throw SyntaxError('Invalid bool value, expected 0 or 1')\n  }\n\n  return [ boolMatch === '1', match?.length ]\n}\n\nfunction expectInt (str) {\n  const reInt = /^i:([+-]?\\d+);/\n  const [ match, intMatch ] = reInt.exec(str) || []\n\n  if (!intMatch) {\n    throw SyntaxError('Expected an integer value')\n  }\n\n  return [ parseInt(intMatch, 10), match?.length ]\n}\n\nfunction expectFloat (str) {\n  const reFloat = /^d:(NAN|-?INF|(?:\\d+\\.\\d*|\\d*\\.\\d+|\\d+)(?:[eE][+-]\\d+)?);/\n  const [ match, floatMatch ] = reFloat.exec(str) || []\n\n  if (!floatMatch) {\n    throw SyntaxError('Expected a float value')\n  }\n\n  let floatValue\n\n  switch (floatMatch) {\n    case 'NAN':\n      floatValue = Number.NaN\n      break\n    case '-INF':\n      floatValue = Number.NEGATIVE_INFINITY\n      break\n    case 'INF':\n      floatValue = Number.POSITIVE_INFINITY\n      break\n    default:\n      floatValue = parseFloat(floatMatch)\n      break\n  }\n\n  return [ floatValue, match?.length ]\n}\n\nfunction readBytes (str, len, escapedString = false) {\n  let bytes = 0\n  let out = ''\n  let c = 0\n  const strLen = str.length\n  let wasHighSurrogate = false\n  let escapedChars = 0\n\n  while (bytes < len && c < strLen) {\n    let chr = str.charAt(c)\n    const code = chr.charCodeAt(0)\n    const isHighSurrogate = code >= 0xd800 && code <= 0xdbff\n    const isLowSurrogate = code >= 0xdc00 && code <= 0xdfff\n\n    if (escapedString && chr === '\\\\') {\n      chr = String.fromCharCode(parseInt(str.substring(c + 1, c + 3), 16))\n      escapedChars++\n\n      // each escaped sequence is 3 characters. Go 2 chars ahead.\n      // third character will be jumped over a few lines later\n      c += 2\n    }\n\n    c++\n\n    bytes += isHighSurrogate || (isLowSurrogate && wasHighSurrogate)\n      // if high surrogate, count 2 bytes, as expectation is to be followed by low surrogate\n      // if low surrogate preceded by high surrogate, add 2 bytes\n      ? 2\n      : code > 0x7ff\n        // otherwise low surrogate falls into this part\n        ? 3\n        : code > 0x7f\n          ? 2\n          : 1\n\n    // if high surrogate is not followed by low surrogate, add 1 more byte\n    bytes += wasHighSurrogate && !isLowSurrogate ? 1 : 0\n\n    out += chr\n    wasHighSurrogate = isHighSurrogate\n  }\n\n  return [ out, bytes, escapedChars ]\n}\n\nfunction expectString (str) {\n  // PHP strings consist of one-byte characters.\n  // JS uses 2 bytes with possible surrogate pairs.\n  // Serialized length of 2 is still 1 JS string character\n  const reStrLength = /^s:(\\d+):\"/g // also match the opening \" char\n  const [ match, byteLenMatch ] = reStrLength.exec(str) || []\n\n  if (!match) {\n    throw SyntaxError('Expected a string value')\n  }\n\n  const len = parseInt(byteLenMatch, 10)\n\n  str = str.substring(match.length)\n\n  let [ strMatch, bytes ] = readBytes(str, len)\n\n  if (bytes !== len) {\n    throw SyntaxError(`Expected string of ${len} bytes, but got ${bytes}`)\n  }\n\n  str = str.substring((strMatch as string).length)\n\n  // strict parsing, match closing \"; chars\n  if (!str.startsWith('\";')) {\n    throw SyntaxError('Expected \";')\n  }\n\n  return [ strMatch, match.length + (strMatch as string).length + 2 ] // skip last \";\n}\n\nfunction expectEscapedString (str) {\n  const reStrLength = /^S:(\\d+):\"/g // also match the opening \" char\n  const [ match, strLenMatch ] = reStrLength.exec(str) || []\n\n  if (!match) {\n    throw SyntaxError('Expected an escaped string value')\n  }\n\n  const len = parseInt(strLenMatch, 10)\n\n  str = str.substring(match.length)\n\n  let [ strMatch, bytes, escapedChars ] = readBytes(str, len, true)\n\n  if (bytes !== len) {\n    throw SyntaxError(`Expected escaped string of ${len} bytes, but got ${bytes}`)\n  }\n\n  str = str.substring((strMatch as string).length + (escapedChars as number) * 2)\n\n  // strict parsing, match closing \"; chars\n  if (!str.startsWith('\";')) {\n    throw SyntaxError('Expected \";')\n  }\n\n  return [ strMatch, match.length + (strMatch as string).length + 2 ] // skip last \";\n}\n\nfunction expectKeyOrIndex (str) {\n  try {\n    return expectString(str)\n  } catch (err) {}\n\n  try {\n    return expectEscapedString(str)\n  } catch (err) {}\n\n  try {\n    return expectInt(str)\n  } catch (err) {\n    throw SyntaxError('Expected key or index')\n  }\n}\n\nfunction expectObject (str, cache) {\n  // O:<class name length>:\"class name\":<prop count>:{<props and values>}\n  // O:8:\"stdClass\":2:{s:3:\"foo\";s:3:\"bar\";s:3:\"bar\";s:3:\"baz\";}\n  const reObjectLiteral = /^O:(\\d+):\"([^\"]+)\":(\\d+):\\{/\n  const [ objectLiteralBeginMatch, /* classNameLengthMatch */, className, propCountMatch ] = reObjectLiteral.exec(str) || []\n\n  if (!objectLiteralBeginMatch) {\n    throw SyntaxError('Invalid input')\n  }\n\n  if (className !== 'stdClass') {\n    throw SyntaxError(`Unsupported object type: ${className}`)\n  }\n\n  let totalOffset = objectLiteralBeginMatch.length\n\n  const propCount = parseInt(propCountMatch, 10)\n  const obj = {}\n  cache([obj])\n\n  str = str.substring(totalOffset)\n\n  for (let i = 0; i < propCount; i++) {\n    const prop = expectKeyOrIndex(str)\n    str = str.substring(prop[1])\n    totalOffset += prop[1] as number\n\n    const value = expectType(str, cache)\n    str = str.substring(value[1])\n    totalOffset += value[1]\n\n    if (prop[0]) {\n        obj[prop[0]] = value[0]\n    }\n  }\n\n  // strict parsing, expect } after object literal\n  if (str.charAt(0) !== '}') {\n    throw SyntaxError('Expected }')\n  }\n\n  return [ obj, totalOffset + 1 ] // skip final }\n}\n\nfunction expectClass (str, cache) {\n  // can't be well supported, because requires calling eval (or similar)\n  // in order to call serialized constructor name\n  // which is unsafe\n  // or assume that constructor is defined in global scope\n  // but this is too much limiting\n  throw Error('Not yet implemented')\n}\n\nfunction expectReference (str, cache) {\n  const reRef = /^[rR]:([1-9]\\d*);/\n  const [ match, refIndex ] = reRef.exec(str) || []\n\n  if (!match) {\n    throw SyntaxError('Expected reference value')\n  }\n\n  return [ cache.get(parseInt(refIndex, 10) - 1), match.length ]\n}\n\nfunction expectArray (str, cache) {\n  const reArrayLength = /^a:(\\d+):{/\n  const [ arrayLiteralBeginMatch, arrayLengthMatch ] = reArrayLength.exec(str) || []\n\n  if (!arrayLengthMatch) {\n    throw SyntaxError('Expected array length annotation')\n  }\n\n  str = str.substring(arrayLiteralBeginMatch?.length)\n\n  const array = expectArrayItems(str, parseInt(arrayLengthMatch, 10), cache)\n\n  // strict parsing, expect closing } brace after array literal\n  if (str.charAt(array[1]) !== '}') {\n    throw SyntaxError('Expected }')\n  }\n\n  return [ array[0], (arrayLiteralBeginMatch?.length ?? 0) + (array[1] as number) + 1 ] // jump over }\n}\n\nfunction expectArrayItems (str, expectedItems = 0, cache) {\n  let key\n  let hasStringKeys = false\n  let item\n  let totalOffset = 0\n  let items: any[] = []\n  cache([items])\n\n  for (let i = 0; i < expectedItems; i++) {\n    key = expectKeyOrIndex(str)\n\n    // this is for backward compatibility with previous implementation\n    if (!hasStringKeys) {\n      hasStringKeys = (typeof key[0] === 'string')\n    }\n\n    str = str.substring(key[1])\n    totalOffset += key[1]\n\n    // references are resolved immediately, so if duplicate key overwrites previous array index\n    // the old value is anyway resolved\n    // fixme: but next time the same reference should point to the new value\n    item = expectType(str, cache)\n    str = str.substring(item[1])\n    totalOffset += item[1]\n\n    items[key[0]] = item[0]\n  }\n\n  // this is for backward compatibility with previous implementation\n  if (hasStringKeys) {\n    items = Object.assign({}, items)\n  }\n\n  return [ items, totalOffset ]\n}\n\nfunction unserialize (str) {\n  //       discuss at: https://locutus.io/php/unserialize/\n  //      original by: Arpad Ray (mailto:arpad@php.net)\n  //      improved by: Pedro Tainha (https://www.pedrotainha.com)\n  //      improved by: Kevin van Zonneveld (https://kvz.io)\n  //      improved by: Kevin van Zonneveld (https://kvz.io)\n  //      improved by: Chris\n  //      improved by: James\n  //      improved by: Le Torbi\n  //      improved by: Eli Skeggs\n  //      bugfixed by: dptr1988\n  //      bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  //      bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //      bugfixed by: philippsimon (https://github.com/philippsimon/)\n  //       revised by: d3x\n  //         input by: Brett Zamir (https://brett-zamir.me)\n  //         input by: Martin (https://www.erlenwiese.de/)\n  //         input by: kilops\n  //         input by: Jaroslaw Czarniak\n  //         input by: lovasoa (https://github.com/lovasoa/)\n  //      improved by: Rafał Kukawski\n  // reimplemented by: Rafał Kukawski\n  //           note 1: We feel the main purpose of this function should be\n  //           note 1: to ease the transport of data between php & js\n  //           note 1: Aiming for PHP-compatibility, we have to translate objects to arrays\n  //        example 1: unserialize('a:3:{i:0;s:5:\"Kevin\";i:1;s:3:\"van\";i:2;s:9:\"Zonneveld\";}')\n  //        returns 1: ['Kevin', 'van', 'Zonneveld']\n  //        example 2: unserialize('a:2:{s:9:\"firstName\";s:5:\"Kevin\";s:7:\"midName\";s:3:\"van\";}')\n  //        returns 2: {firstName: 'Kevin', midName: 'van'}\n  //        example 3: unserialize('a:3:{s:2:\"ü\";s:2:\"ü\";s:3:\"四\";s:3:\"四\";s:4:\"𠜎\";s:4:\"𠜎\";}')\n  //        returns 3: {'ü': 'ü', '四': '四', '𠜎': '𠜎'}\n  //        example 4: unserialize(undefined)\n  //        returns 4: false\n  //        example 5: unserialize('O:8:\"stdClass\":1:{s:3:\"foo\";b:1;}')\n  //        returns 5: { foo: true }\n  //        example 6: unserialize('a:2:{i:0;N;i:1;s:0:\"\";}')\n  //        returns 6: [null, \"\"]\n  //        example 7: unserialize('S:7:\"\\\\65\\\\73\\\\63\\\\61\\\\70\\\\65\\\\64\";')\n  //        returns 7: 'escaped'\n\n  try {\n    if (typeof str !== 'string') {\n      return false\n    }\n\n    return expectType(str, initCache())[0]\n  } catch (err) {\n    console.error(err)\n    return false\n  }\n}\n\nfunction substr_replace (str, replace, start, length) {\n  //  discuss at: https://locutus.io/php/substr_replace/\n  // original by: Brett Zamir (https://brett-zamir.me)\n  //   example 1: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', 0)\n  //   returns 1: 'bob'\n  //   example 2: var $var = 'ABCDEFGH:/MNRPQR/'\n  //   example 2: substr_replace($var, 'bob', 0, $var.length)\n  //   returns 2: 'bob'\n  //   example 3: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', 0, 0)\n  //   returns 3: 'bobABCDEFGH:/MNRPQR/'\n  //   example 4: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', 10, -1)\n  //   returns 4: 'ABCDEFGH:/bob/'\n  //   example 5: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', -7, -1)\n  //   returns 5: 'ABCDEFGH:/bob/'\n  //   example 6: substr_replace('ABCDEFGH:/MNRPQR/', '', 10, -1)\n  //   returns 6: 'ABCDEFGH://'\n\n  if (start < 0) {\n    // start position in str\n    start = start + str.length\n  }\n  length = length !== undefined ? length : str.length\n  if (length < 0) {\n    length = length + str.length - start\n  }\n\n  return [\n    str.slice(0, start),\n    replace.substring(0, length),\n    replace.slice(length),\n    str.slice(start + length)\n  ].join('')\n}\n\nexport class Locutus {\n\n    static unserialize<T = unknown>(data: string): T {\n        return unserialize(data);\n    }\n\n    static substrReplace(str: string, replace: string, start: number, length?: number): string {\n        return substr_replace(str, replace, start, length);\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}