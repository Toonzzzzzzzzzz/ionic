{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Service that provides some features to manage guest enrolment.\n */\nexport class AddonEnrolGuestService {\n  /**\n   * Get info from a course guest enrolment method.\n   *\n   * @param instanceId Guest instance ID.\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved when the info is retrieved.\n   */\n  getGuestEnrolmentInfo(instanceId, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const params = {\n        instanceid: instanceId\n      };\n      const preSets = {\n        cacheKey: _this.getGuestEnrolmentInfoCacheKey(instanceId),\n        updateFrequency: CoreSite.FREQUENCY_RARELY\n      };\n      const response = yield site.read('enrol_guest_get_instance_info', params, preSets);\n      return response.instanceinfo;\n    })();\n  }\n  /**\n   * Get cache key for get course guest enrolment methods WS call.\n   *\n   * @param instanceId Guest instance ID.\n   * @returns Cache key.\n   */\n  getGuestEnrolmentInfoCacheKey(instanceId) {\n    return AddonEnrolGuestService.ROOT_CACHE_KEY + instanceId;\n  }\n  /**\n   * Invalidates get course guest enrolment info WS call.\n   *\n   * @param instanceId Guest instance ID.\n   * @param siteId Site Id. If not defined, use current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateGuestEnrolmentInfo(instanceId, siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield Promise.all([site.invalidateWsCacheForKey(_this2.getGuestEnrolmentInfoCacheKey(instanceId)), site.invalidateWsCacheForKey(`mmCourses:guestinfo:${instanceId}`) // @todo Remove after 4.3 release.\n      ]);\n    })();\n  }\n  /**\n   * Check if guest password validation WS is available on the current site.\n   *\n   * @returns Whether guest password validation WS is available.\n   */\n  isValidateGuestAccessPasswordAvailable() {\n    return CoreSites.wsAvailableInCurrentSite('enrol_guest_validate_password');\n  }\n  /**\n   * Perform password validation of guess access.\n   *\n   * @param enrolmentInstanceId Instance id of guest enrolment plugin.\n   * @param password Course Password.\n   * @returns Wether the password is valid.\n   */\n  validateGuestAccessPassword(enrolmentInstanceId, password) {\n    return _asyncToGenerator(function* () {\n      const site = CoreSites.getCurrentSite();\n      if (!site) {\n        return {\n          validated: false\n        };\n      }\n      const params = {\n        instanceid: enrolmentInstanceId,\n        password\n      };\n      return yield site.write('enrol_guest_validate_password', params);\n    })();\n  }\n}\n_class = AddonEnrolGuestService;\n_class.ROOT_CACHE_KEY = 'AddonEnrolGuest:';\n_class.ɵfac = function AddonEnrolGuestService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonEnrolGuest = makeSingleton(AddonEnrolGuestService);","map":{"version":3,"names":["CoreSite","CoreSites","makeSingleton","AddonEnrolGuestService","getGuestEnrolmentInfo","instanceId","siteId","_this","_asyncToGenerator","site","getSite","params","instanceid","preSets","cacheKey","getGuestEnrolmentInfoCacheKey","updateFrequency","FREQUENCY_RARELY","response","read","instanceinfo","ROOT_CACHE_KEY","invalidateGuestEnrolmentInfo","_this2","Promise","all","invalidateWsCacheForKey","isValidateGuestAccessPasswordAvailable","wsAvailableInCurrentSite","validateGuestAccessPassword","enrolmentInstanceId","password","getCurrentSite","validated","write","_class","factory","ɵfac","providedIn","AddonEnrolGuest"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/enrol/guest/services/guest.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreSite } from '@classes/sites/site';\nimport { CoreEnrolEnrolmentInfo } from '@features/enrol/services/enrol';\nimport { CoreSites } from '@services/sites';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Service that provides some features to manage guest enrolment.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonEnrolGuestService {\n\n    protected static readonly ROOT_CACHE_KEY = 'AddonEnrolGuest:';\n\n    /**\n     * Get info from a course guest enrolment method.\n     *\n     * @param instanceId Guest instance ID.\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved when the info is retrieved.\n     */\n    async getGuestEnrolmentInfo(instanceId: number, siteId?: string): Promise<AddonEnrolGuestInfo> {\n        const site = await CoreSites.getSite(siteId);\n\n        const params: AddonEnrolGuestGetInstanceInfoWSParams = {\n            instanceid: instanceId,\n        };\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getGuestEnrolmentInfoCacheKey(instanceId),\n            updateFrequency: CoreSite.FREQUENCY_RARELY,\n        };\n\n        const response =\n            await site.read<AddonEnrolGuestGetInstanceInfoWSResponse>('enrol_guest_get_instance_info', params, preSets);\n\n        return response.instanceinfo;\n    }\n\n    /**\n     * Get cache key for get course guest enrolment methods WS call.\n     *\n     * @param instanceId Guest instance ID.\n     * @returns Cache key.\n     */\n    protected getGuestEnrolmentInfoCacheKey(instanceId: number): string {\n        return AddonEnrolGuestService.ROOT_CACHE_KEY + instanceId;\n    }\n\n    /**\n     * Invalidates get course guest enrolment info WS call.\n     *\n     * @param instanceId Guest instance ID.\n     * @param siteId Site Id. If not defined, use current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateGuestEnrolmentInfo(instanceId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await Promise.all([\n            site.invalidateWsCacheForKey(this.getGuestEnrolmentInfoCacheKey(instanceId)),\n            site.invalidateWsCacheForKey(`mmCourses:guestinfo:${instanceId}`), // @todo Remove after 4.3 release.\n        ]);\n    }\n\n    /**\n     * Check if guest password validation WS is available on the current site.\n     *\n     * @returns Whether guest password validation WS is available.\n     */\n    isValidateGuestAccessPasswordAvailable(): boolean {\n        return CoreSites.wsAvailableInCurrentSite('enrol_guest_validate_password');\n    }\n\n    /**\n     * Perform password validation of guess access.\n     *\n     * @param enrolmentInstanceId Instance id of guest enrolment plugin.\n     * @param password Course Password.\n     * @returns Wether the password is valid.\n     */\n    async validateGuestAccessPassword(\n        enrolmentInstanceId: number,\n        password: string,\n    ): Promise<AddonEnrolGuestValidatePasswordWSResponse> {\n        const site = CoreSites.getCurrentSite();\n\n        if (!site) {\n            return {\n                validated: false,\n            };\n        }\n\n        const params: AddonEnrolGuestValidatePasswordWSParams = {\n            instanceid: enrolmentInstanceId,\n            password,\n        };\n\n        return await site.write<AddonEnrolGuestValidatePasswordWSResponse>('enrol_guest_validate_password', params);\n    }\n\n}\nexport const AddonEnrolGuest = makeSingleton(AddonEnrolGuestService);\n\n/**\n * Params of enrol_guest_get_instance_info WS.\n */\ntype AddonEnrolGuestGetInstanceInfoWSParams = {\n    instanceid: number; // Instance id of guest enrolment plugin.\n};\n\n/**\n * Data returned by enrol_guest_get_instance_info WS.\n */\nexport type AddonEnrolGuestGetInstanceInfoWSResponse = {\n    instanceinfo: AddonEnrolGuestInfo;\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Course guest enrolment method.\n */\nexport type AddonEnrolGuestInfo = CoreEnrolEnrolmentInfo & {\n    passwordrequired: boolean; // Is a password required?\n    status: boolean; // Is the enrolment enabled?\n};\n\n/**\n * Params of enrol_guest_validate_password WS.\n */\ntype AddonEnrolGuestValidatePasswordWSParams = {\n    instanceid: number; // instance id of guest enrolment plugin\n    password: string; // the course password\n};\n\n/**\n * Data returned by enrol_guest_get_instance_info WS.\n */\nexport type AddonEnrolGuestValidatePasswordWSResponse = {\n    validated: boolean; // Whether the password was successfully validated\n    hint?: string; // Password hint (if enabled)\n    warnings?: CoreWSExternalWarning[];\n};\n"],"mappings":";;AAgBA,SAASA,QAAQ,QAAQ,qBAAqB;AAE9C,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,sBAAsB;EAI/B;;;;;;;EAOMC,qBAAqBA,CAACC,UAAkB,EAAEC,MAAe;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC3D,MAAMC,IAAI,SAASR,SAAS,CAACS,OAAO,CAACJ,MAAM,CAAC;MAE5C,MAAMK,MAAM,GAA2C;QACnDC,UAAU,EAAEP;OACf;MAED,MAAMQ,OAAO,GAAsB;QAC/BC,QAAQ,EAAEP,KAAI,CAACQ,6BAA6B,CAACV,UAAU,CAAC;QACxDW,eAAe,EAAEhB,QAAQ,CAACiB;OAC7B;MAED,MAAMC,QAAQ,SACJT,IAAI,CAACU,IAAI,CAA2C,+BAA+B,EAAER,MAAM,EAAEE,OAAO,CAAC;MAE/G,OAAOK,QAAQ,CAACE,YAAY;IAAC;EACjC;EAEA;;;;;;EAMUL,6BAA6BA,CAACV,UAAkB;IACtD,OAAOF,sBAAsB,CAACkB,cAAc,GAAGhB,UAAU;EAC7D;EAEA;;;;;;;EAOMiB,4BAA4BA,CAACjB,UAAkB,EAAEC,MAAe;IAAA,IAAAiB,MAAA;IAAA,OAAAf,iBAAA;MAClE,MAAMC,IAAI,SAASR,SAAS,CAACS,OAAO,CAACJ,MAAM,CAAC;MAE5C,MAAMkB,OAAO,CAACC,GAAG,CAAC,CACdhB,IAAI,CAACiB,uBAAuB,CAACH,MAAI,CAACR,6BAA6B,CAACV,UAAU,CAAC,CAAC,EAC5EI,IAAI,CAACiB,uBAAuB,CAAC,uBAAuBrB,UAAU,EAAE,CAAC,CAAE;MAAA,CACtE,CAAC;IAAC;EACP;EAEA;;;;;EAKAsB,sCAAsCA,CAAA;IAClC,OAAO1B,SAAS,CAAC2B,wBAAwB,CAAC,+BAA+B,CAAC;EAC9E;EAEA;;;;;;;EAOMC,2BAA2BA,CAC7BC,mBAA2B,EAC3BC,QAAgB;IAAA,OAAAvB,iBAAA;MAEhB,MAAMC,IAAI,GAAGR,SAAS,CAAC+B,cAAc,EAAE;MAEvC,IAAI,CAACvB,IAAI,EAAE;QACP,OAAO;UACHwB,SAAS,EAAE;SACd;;MAGL,MAAMtB,MAAM,GAA4C;QACpDC,UAAU,EAAEkB,mBAAmB;QAC/BC;OACH;MAED,aAAatB,IAAI,CAACyB,KAAK,CAA4C,+BAA+B,EAAEvB,MAAM,CAAC;IAAC;EAChH;;SAzFSR,sBAAsB;AAELgC,MAAA,CAAAd,cAAc,GAAG,kBAAkB;;mBAFpDlB,MAAsB;AAAA;;SAAtBA,MAAsB;EAAAiC,OAAA,EAAtBjC,MAAsB,CAAAkC,IAAA;EAAAC,UAAA,EADT;AAAM;AA6FhC,OAAO,MAAMC,eAAe,GAAGrC,aAAa,CAACC,sBAAsB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}