{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Md5 } from 'ts-md5';\nimport { CoreSitePlugins, CoreSitePluginsProvider } from '@features/siteplugins/services/siteplugins';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"compile\"];\n/**\n * Component to render a site plugin content.\n */\nexport class CoreSitePluginsPluginContentComponent {\n  constructor(differs) {\n    this.component = '';\n    this.data = {}; // Data to pass to the component.\n    this.onContentLoaded = new EventEmitter(); // Emits event when content is loaded.\n    this.onLoadingContent = new EventEmitter(); // Emits an event when starts to load the content.\n    this.content = ''; // Content.\n    this.javascript = ''; // Javascript to execute.\n    this.dataLoaded = false;\n    this.invalidateObservable = new Subject(); // An observable to notify observers when to invalidate data.\n    this.differ = differs.find([]).create();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    this.fetchContent();\n  }\n  /**\n   * Detect and act upon changes that Angular can’t or won’t detect on its own (objects and arrays).\n   */\n  ngDoCheck() {\n    if (!this.data || !this.jsData) {\n      return;\n    }\n    // Check if there's any change in the data object.\n    const changes = this.differ.diff(this.data);\n    if (changes) {\n      this.jsData = Object.assign(this.jsData, this.data);\n    }\n  }\n  /**\n   * Fetches the content to render.\n   *\n   * @param refresh Whether the user is refreshing.\n   * @returns Promise resolved when done.\n   */\n  fetchContent(refresh) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.onLoadingContent.emit(refresh);\n      _this.forceCompile = false;\n      const preSets = Object.assign({}, _this.preSets);\n      preSets.component = preSets.component || _this.component;\n      try {\n        const result = yield CoreSitePlugins.getContent(_this.component, _this.method, _this.args, preSets);\n        _this.content = result.templates.length ? result.templates[0].html : ''; // Load first template.\n        _this.javascript = result.javascript;\n        _this.otherData = result.otherdata;\n        _this.data = _this.data || {};\n        _this.forceCompile = true;\n        _this.jsData = Object.assign(_this.data, CoreSitePlugins.createDataForJS(_this.initResult, result));\n        // Pass some methods as jsData so they can be called from the template too.\n        _this.jsData.fetchContent = refresh => _this.fetchContent(refresh);\n        _this.jsData.openContent = (title, args, component, method, jsData, preSets, ptrEnabled) => _this.openContent(title, args, component, method, jsData, preSets, ptrEnabled);\n        _this.jsData.refreshContent = showSpinner => _this.refreshContent(showSpinner);\n        _this.jsData.updateContent = (args, component, method, jsData, preSets) => _this.updateContent(args, component, method, jsData, preSets);\n        _this.jsData.updateModuleCourseContent = (cmId, alreadyFetched) => _this.updateModuleCourseContent(cmId, alreadyFetched);\n        _this.jsData.updateCachedContent = () => _this.updateCachedContent();\n        _this.onContentLoaded.emit({\n          refresh: !!refresh,\n          success: true,\n          content: _this.content\n        });\n      } catch (error) {\n        // Make it think it's loaded - otherwise it sticks on 'loading' and stops navigation working.\n        _this.content = '<div></div>';\n        _this.onContentLoaded.emit({\n          refresh: !!refresh,\n          success: false,\n          content: _this.content\n        });\n        CoreDomUtils.showErrorModalDefault(error, 'core.errorloadingcontent', true);\n      } finally {\n        _this.dataLoaded = true;\n      }\n    })();\n  }\n  /**\n   * Open a new page with a new content.\n   *\n   * @param title The title to display with the new content.\n   * @param args New params.\n   * @param component New component. If not provided, current component\n   * @param method New method. If not provided, current method\n   * @param jsData JS variables to pass to the new view so they can be used in the template or JS.\n   *               If true is supplied instead of an object, all initial variables from current page will be copied.\n   * @param preSets The preSets for the WS call of the new content.\n   * @param ptrEnabled Whether PTR should be enabled in the new page. Defaults to true.\n   */\n  openContent(title, args = {}, component, method, jsData, preSets, ptrEnabled) {\n    if (jsData === true) {\n      jsData = this.data;\n    }\n    component = component || this.component;\n    method = method || this.method;\n    const hash = Md5.hashAsciiStr(JSON.stringify(args));\n    CoreNavigator.navigateToSitePath(`siteplugins/content/${component}/${method}/${hash}`, {\n      params: {\n        title,\n        args,\n        initResult: this.initResult,\n        jsData,\n        preSets,\n        ptrEnabled\n      }\n    });\n  }\n  /**\n   * Refresh the data.\n   *\n   * @param showSpinner Whether to show spinner while refreshing.\n   */\n  refreshContent(showSpinner = true) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (showSpinner) {\n        _this2.dataLoaded = false;\n      }\n      _this2.invalidateObservable.next(); // Notify observers.\n      try {\n        yield CoreSitePlugins.invalidateContent(_this2.component, _this2.method, _this2.args);\n      } finally {\n        yield _this2.fetchContent(true);\n      }\n    })();\n  }\n  /**\n   * Update the content, usually with a different method or params.\n   *\n   * @param args New params.\n   * @param component New component. If not provided, current component\n   * @param method New method. If not provided, current method\n   * @param jsData JS variables to pass to the new view so they can be used in the template or JS.\n   * @param preSets New preSets to use. If not provided, use current preSets.\n   */\n  updateContent(args, component, method, jsData, preSets) {\n    this.component = component || this.component;\n    this.method = method || this.method;\n    this.args = args;\n    this.dataLoaded = false;\n    this.preSets = preSets || this.preSets;\n    if (this.data && jsData) {\n      Object.assign(this.data, jsData);\n    }\n    this.fetchContent();\n  }\n  /**\n   * Call a certain function on the component instance.\n   *\n   * @param name Name of the function to call.\n   * @param params List of params to send to the function.\n   * @returns Result of the call. Undefined if no component instance or the function doesn't exist.\n   */\n  callComponentFunction(name, params) {\n    var _this$compileComponen;\n    return (_this$compileComponen = this.compileComponent) === null || _this$compileComponen === void 0 ? void 0 : _this$compileComponen.callComponentFunction(name, params);\n  }\n  /**\n   * Function only for module plugins using coursepagemethod. Update module data in course page content.\n   *\n   * @param cmId Module ID.\n   * @param alreadyFetched Whether course data has already been fetched (no need to fetch it again).\n   */\n  updateModuleCourseContent(cmId, alreadyFetched) {\n    CoreEvents.trigger(CoreSitePluginsProvider.UPDATE_COURSE_CONTENT, {\n      cmId,\n      alreadyFetched\n    });\n  }\n  /**\n   * Update this content stored in the app's cache. This function will not reload the view, it will only update the data stored\n   * in the device so it's updated for the next usage. If you want to update the view, please use refreshContent.\n   */\n  updateCachedContent() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield CoreSitePlugins.getContent(_this3.component, _this3.method, _this3.args, CoreSites.getReadingStrategyPreSets(2 /* CoreSitesReadingStrategy.ONLY_NETWORK */));\n    })();\n  }\n}\n_class = CoreSitePluginsPluginContentComponent;\n_class.ɵfac = function CoreSitePluginsPluginContentComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"core-site-plugins-plugin-content\"]],\n  viewQuery: function CoreSitePluginsPluginContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.compileComponent = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function CoreSitePluginsPluginContentComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.component);\n    }\n  },\n  inputs: {\n    component: \"component\",\n    method: \"method\",\n    args: \"args\",\n    initResult: \"initResult\",\n    data: \"data\",\n    preSets: \"preSets\",\n    pageTitle: \"pageTitle\"\n  },\n  outputs: {\n    onContentLoaded: \"onContentLoaded\",\n    onLoadingContent: \"onLoadingContent\"\n  },\n  decls: 3,\n  vars: 6,\n  consts: [[3, \"hideUntil\", \"fullscreen\"], [3, \"text\", \"javascript\", \"jsData\", \"forceCompile\"], [\"compile\", \"\"]],\n  template: function CoreSitePluginsPluginContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"core-loading\", 0);\n      i0.ɵɵelement(1, \"core-compile-html\", 1, 2);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"hideUntil\", ctx.dataLoaded)(\"fullscreen\", false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"text\", ctx.content)(\"javascript\", ctx.javascript)(\"jsData\", ctx.jsData)(\"forceCompile\", ctx.forceCompile);\n    }\n  },\n  styles: [\"[_nghost-%COMP%] { display: contents; }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9jb3JlL2ZlYXR1cmVzL3NpdGVwbHVnaW5zL2NvbXBvbmVudHMvcGx1Z2luLWNvbnRlbnQvcGx1Z2luLWNvbnRlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxpQkFBaUIsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["EventEmitter","Subject","Md5","CoreSitePlugins","CoreSitePluginsProvider","CoreNavigator","CoreDomUtils","CoreEvents","CoreSites","CoreSitePluginsPluginContentComponent","constructor","differs","component","data","onContentLoaded","onLoadingContent","content","javascript","dataLoaded","invalidateObservable","differ","find","create","ngOnInit","fetchContent","ngDoCheck","jsData","changes","diff","Object","assign","refresh","_this","_asyncToGenerator","emit","forceCompile","preSets","result","getContent","method","args","templates","length","html","otherData","otherdata","createDataForJS","initResult","openContent","title","ptrEnabled","refreshContent","showSpinner","updateContent","updateModuleCourseContent","cmId","alreadyFetched","updateCachedContent","success","error","showErrorModalDefault","hash","hashAsciiStr","JSON","stringify","navigateToSitePath","params","_this2","next","invalidateContent","callComponentFunction","name","_this$compileComponen","compileComponent","trigger","UPDATE_COURSE_CONTENT","_this3","getReadingStrategyPreSets","i0","ɵɵdirectiveInject","KeyValueDiffers","selectors","viewQuery","CoreSitePluginsPluginContentComponent_Query","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵproperty","ɵɵadvance"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/siteplugins/components/plugin-content/plugin-content.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/siteplugins/components/plugin-content/core-siteplugins-plugin-content.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    EventEmitter,\n    DoCheck,\n    KeyValueDiffers,\n    ViewChild,\n    KeyValueDiffer,\n    HostBinding,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Md5 } from 'ts-md5';\n\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { CoreCompileHtmlComponent } from '@features/compile/components/compile-html/compile-html';\nimport { CoreSitePlugins, CoreSitePluginsContent, CoreSitePluginsProvider } from '@features/siteplugins/services/siteplugins';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\n\n/**\n * Component to render a site plugin content.\n */\n@Component({\n    selector: 'core-site-plugins-plugin-content',\n    templateUrl: 'core-siteplugins-plugin-content.html',\n    styles: [':host { display: contents; }'],\n})\nexport class CoreSitePluginsPluginContentComponent implements OnInit, DoCheck {\n\n    // Get the compile element. Don't set the right type to prevent circular dependencies.\n    @ViewChild('compile') compileComponent?: CoreCompileHtmlComponent;\n\n    @HostBinding('class') @Input() component = '';\n    @Input() method!: string;\n    @Input() args?: Record<string, unknown>;\n    @Input() initResult?: CoreSitePluginsContent | null; // Result of the init WS call of the handler.\n    @Input() data: Record<string, unknown> = {}; // Data to pass to the component.\n    @Input() preSets?: CoreSiteWSPreSets; // The preSets for the WS call.\n    @Input() pageTitle?: string; // Current page title. It can be used by the \"new-content\" directives.\n    @Output() onContentLoaded = new EventEmitter<CoreSitePluginsPluginContentLoadedData>(); // Emits event when content is loaded.\n    @Output() onLoadingContent = new EventEmitter<boolean>(); // Emits an event when starts to load the content.\n\n    content = ''; // Content.\n    javascript = ''; // Javascript to execute.\n    otherData?: Record<string, unknown>; // Other data of the content.\n    dataLoaded = false;\n    invalidateObservable = new Subject<void>(); // An observable to notify observers when to invalidate data.\n    jsData?: Record<string, unknown>; // Data to pass to the component.\n    forceCompile?: boolean; // Force compilation on PTR.\n\n    protected differ: KeyValueDiffer<unknown, unknown>; // To detect changes in the data input.\n\n    constructor(differs: KeyValueDiffers) {\n        this.differ = differs.find([]).create();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.fetchContent();\n    }\n\n    /**\n     * Detect and act upon changes that Angular can’t or won’t detect on its own (objects and arrays).\n     */\n    ngDoCheck(): void {\n        if (!this.data || !this.jsData) {\n            return;\n        }\n\n        // Check if there's any change in the data object.\n        const changes = this.differ.diff(this.data);\n        if (changes) {\n            this.jsData = Object.assign(this.jsData, this.data);\n        }\n    }\n\n    /**\n     * Fetches the content to render.\n     *\n     * @param refresh Whether the user is refreshing.\n     * @returns Promise resolved when done.\n     */\n    async fetchContent(refresh?: boolean): Promise<void> {\n        this.onLoadingContent.emit(refresh);\n\n        this.forceCompile = false;\n\n        const preSets = Object.assign({}, this.preSets);\n        preSets.component = preSets.component || this.component;\n\n        try {\n            const result = await CoreSitePlugins.getContent(this.component, this.method, this.args, preSets);\n\n            this.content = result.templates.length ? result.templates[0].html : ''; // Load first template.\n            this.javascript = result.javascript;\n            this.otherData = result.otherdata;\n            this.data = this.data || {};\n            this.forceCompile = true;\n\n            this.jsData = Object.assign(this.data, CoreSitePlugins.createDataForJS(this.initResult, result));\n\n            // Pass some methods as jsData so they can be called from the template too.\n            this.jsData.fetchContent = (refresh?: boolean) => this.fetchContent(refresh);\n            this.jsData.openContent = (\n                title: string,\n                args?: Record<string, unknown>,\n                component?: string,\n                method?: string,\n                jsData?: Record<string, unknown> | boolean,\n                preSets?: CoreSiteWSPreSets,\n                ptrEnabled?: boolean,\n            ) => this.openContent(title, args, component, method, jsData, preSets, ptrEnabled);\n            this.jsData.refreshContent = (showSpinner?: boolean) => this.refreshContent(showSpinner);\n            this.jsData.updateContent = (\n                args?: Record<string, unknown>,\n                component?: string,\n                method?: string,\n                jsData?: Record<string, unknown>,\n                preSets?: CoreSiteWSPreSets,\n            ) => this.updateContent(args, component, method, jsData, preSets);\n            this.jsData.updateModuleCourseContent = (cmId: number, alreadyFetched?: boolean) =>\n                this.updateModuleCourseContent(cmId, alreadyFetched);\n            this.jsData.updateCachedContent = () => this.updateCachedContent();\n\n            this.onContentLoaded.emit({ refresh: !!refresh, success: true, content: this.content });\n        } catch (error) {\n            // Make it think it's loaded - otherwise it sticks on 'loading' and stops navigation working.\n            this.content = '<div></div>';\n            this.onContentLoaded.emit({ refresh: !!refresh, success: false, content: this.content });\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.errorloadingcontent', true);\n        } finally {\n            this.dataLoaded = true;\n        }\n    }\n\n    /**\n     * Open a new page with a new content.\n     *\n     * @param title The title to display with the new content.\n     * @param args New params.\n     * @param component New component. If not provided, current component\n     * @param method New method. If not provided, current method\n     * @param jsData JS variables to pass to the new view so they can be used in the template or JS.\n     *               If true is supplied instead of an object, all initial variables from current page will be copied.\n     * @param preSets The preSets for the WS call of the new content.\n     * @param ptrEnabled Whether PTR should be enabled in the new page. Defaults to true.\n     */\n    openContent(\n        title: string,\n        args: Record<string, unknown> = {},\n        component?: string,\n        method?: string,\n        jsData?: Record<string, unknown> | boolean,\n        preSets?: CoreSiteWSPreSets,\n        ptrEnabled?: boolean,\n    ): void {\n        if (jsData === true) {\n            jsData = this.data;\n        }\n\n        component = component || this.component;\n        method = method || this.method;\n        const hash = <string> Md5.hashAsciiStr(JSON.stringify(args));\n\n        CoreNavigator.navigateToSitePath(`siteplugins/content/${component}/${method}/${hash}`, {\n            params: {\n                title,\n                args,\n                initResult: this.initResult,\n                jsData,\n                preSets,\n                ptrEnabled,\n            },\n        });\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param showSpinner Whether to show spinner while refreshing.\n     */\n    async refreshContent(showSpinner = true): Promise<void> {\n        if (showSpinner) {\n            this.dataLoaded = false;\n        }\n\n        this.invalidateObservable.next(); // Notify observers.\n\n        try {\n            await CoreSitePlugins.invalidateContent(this.component, this.method, this.args);\n        } finally {\n            await this.fetchContent(true);\n        }\n    }\n\n    /**\n     * Update the content, usually with a different method or params.\n     *\n     * @param args New params.\n     * @param component New component. If not provided, current component\n     * @param method New method. If not provided, current method\n     * @param jsData JS variables to pass to the new view so they can be used in the template or JS.\n     * @param preSets New preSets to use. If not provided, use current preSets.\n     */\n    updateContent(\n        args?: Record<string, unknown>,\n        component?: string,\n        method?: string,\n        jsData?: Record<string, unknown>,\n        preSets?: CoreSiteWSPreSets,\n    ): void {\n        this.component = component || this.component;\n        this.method = method || this.method;\n        this.args = args;\n        this.dataLoaded = false;\n        this.preSets = preSets || this.preSets;\n\n        if (this.data && jsData) {\n            Object.assign(this.data, jsData);\n        }\n\n        this.fetchContent();\n    }\n\n    /**\n     * Call a certain function on the component instance.\n     *\n     * @param name Name of the function to call.\n     * @param params List of params to send to the function.\n     * @returns Result of the call. Undefined if no component instance or the function doesn't exist.\n     */\n    callComponentFunction(name: string, params?: unknown[]): unknown | undefined {\n        return this.compileComponent?.callComponentFunction(name, params);\n    }\n\n    /**\n     * Function only for module plugins using coursepagemethod. Update module data in course page content.\n     *\n     * @param cmId Module ID.\n     * @param alreadyFetched Whether course data has already been fetched (no need to fetch it again).\n     */\n    updateModuleCourseContent(cmId: number, alreadyFetched?: boolean): void {\n        CoreEvents.trigger(CoreSitePluginsProvider.UPDATE_COURSE_CONTENT, { cmId, alreadyFetched });\n    }\n\n    /**\n     * Update this content stored in the app's cache. This function will not reload the view, it will only update the data stored\n     * in the device so it's updated for the next usage. If you want to update the view, please use refreshContent.\n     */\n    async updateCachedContent(): Promise<void> {\n        await CoreSitePlugins.getContent(\n            this.component,\n            this.method,\n            this.args,\n            CoreSites.getReadingStrategyPreSets(CoreSitesReadingStrategy.ONLY_NETWORK),\n        );\n    }\n\n}\n\nexport type CoreSitePluginsPluginContentLoadedData = {\n    refresh: boolean;\n    success: boolean;\n    content: string;\n};\n","<core-loading [hideUntil]=\"dataLoaded\" [fullscreen]=\"false\">\n    <core-compile-html [text]=\"content\" [javascript]=\"javascript\" [jsData]=\"jsData\" [forceCompile]=\"forceCompile\" #compile />\n</core-loading>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}