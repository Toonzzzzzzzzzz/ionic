{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { makeSingleton } from '@singletons';\nimport { COMMENTS_TABLE, COMMENTS_DELETED_TABLE } from './database/comments';\nimport { CoreArray } from '@singletons/array';\nimport * as i0 from \"@angular/core\";\n/**\n * Service to handle offline comments.\n */\nexport class CoreCommentsOfflineProvider {\n  /**\n   * Get all offline comments.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with comments.\n   */\n  getAllComments(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const results = yield Promise.all([site.getDb().getRecords(COMMENTS_TABLE), site.getDb().getRecords(COMMENTS_DELETED_TABLE)]);\n      return CoreArray.flatten(results);\n    })();\n  }\n  /**\n   * Get an offline comment.\n   *\n   * @param contextLevel Contextlevel system, course, user...\n   * @param instanceId The Instance id of item associated with the context level.\n   * @param component Component name.\n   * @param itemId Associated id.\n   * @param area String comment area. Default empty.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the comments.\n   */\n  getComment(contextLevel, instanceId, component, itemId, area = '', siteId) {\n    return _asyncToGenerator(function* () {\n      try {\n        const site = yield CoreSites.getSite(siteId);\n        return yield site.getDb().getRecord(COMMENTS_TABLE, {\n          contextlevel: contextLevel,\n          instanceid: instanceId,\n          component: component,\n          itemid: itemId,\n          area: area\n        });\n      } catch (_unused) {\n        return;\n      }\n    })();\n  }\n  /**\n   * Get all offline comments added or deleted of a special area.\n   *\n   * @param contextLevel Contextlevel system, course, user...\n   * @param instanceId The Instance id of item associated with the context level.\n   * @param component Component name.\n   * @param itemId Associated id.\n   * @param area String comment area. Default empty.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the comments.\n   */\n  getComments(contextLevel, instanceId, component, itemId, area = '', siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let comments = [];\n      siteId = siteId || CoreSites.getCurrentSiteId();\n      const comment = yield _this.getComment(contextLevel, instanceId, component, itemId, area, siteId);\n      comments = comment ? [comment] : [];\n      const deletedComments = yield _this.getDeletedComments(contextLevel, instanceId, component, itemId, area, siteId);\n      comments = comments.concat(deletedComments);\n      return comments;\n    })();\n  }\n  /**\n   * Get all offline deleted comments.\n   *\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with comments.\n   */\n  getAllDeletedComments(siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      return site.getDb().getRecords(COMMENTS_DELETED_TABLE);\n    })();\n  }\n  /**\n   * Get an offline comment.\n   *\n   * @param contextLevel Contextlevel system, course, user...\n   * @param instanceId The Instance id of item associated with the context level.\n   * @param component Component name.\n   * @param itemId Associated id.\n   * @param area String comment area. Default empty.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the comments.\n   */\n  getDeletedComments(contextLevel, instanceId, component, itemId, area = '', siteId) {\n    return _asyncToGenerator(function* () {\n      try {\n        const site = yield CoreSites.getSite(siteId);\n        return yield site.getDb().getRecords(COMMENTS_DELETED_TABLE, {\n          contextlevel: contextLevel,\n          instanceid: instanceId,\n          component: component,\n          itemid: itemId,\n          area: area\n        });\n      } catch (_unused2) {\n        return [];\n      }\n    })();\n  }\n  /**\n   * Remove an offline comment.\n   *\n   * @param contextLevel Contextlevel system, course, user...\n   * @param instanceId The Instance id of item associated with the context level.\n   * @param component Component name.\n   * @param itemId Associated id.\n   * @param area String comment area. Default empty.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if deleted, rejected if failure.\n   */\n  removeComment(contextLevel, instanceId, component, itemId, area = '', siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.getDb().deleteRecords(COMMENTS_TABLE, {\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        component: component,\n        itemid: itemId,\n        area: area\n      });\n    })();\n  }\n  /**\n   * Remove an offline deleted comment.\n   *\n   * @param contextLevel Contextlevel system, course, user...\n   * @param instanceId The Instance id of item associated with the context level.\n   * @param component Component name.\n   * @param itemId Associated id.\n   * @param area String comment area. Default empty.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if deleted, rejected if failure.\n   */\n  removeDeletedComments(contextLevel, instanceId, component, itemId, area = '', siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.getDb().deleteRecords(COMMENTS_DELETED_TABLE, {\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        component: component,\n        itemid: itemId,\n        area: area\n      });\n    })();\n  }\n  /**\n   * Save a comment to be sent later.\n   *\n   * @param content Comment text.\n   * @param contextLevel Contextlevel system, course, user...\n   * @param instanceId The Instance id of item associated with the context level.\n   * @param component Component name.\n   * @param itemId Associated id.\n   * @param area String comment area. Default empty.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if stored, rejected if failure.\n   */\n  saveComment(content, contextLevel, instanceId, component, itemId, area = '', siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const now = CoreTimeUtils.timestamp();\n      const data = {\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        component: component,\n        itemid: itemId,\n        area: area,\n        content: content,\n        lastmodified: now\n      };\n      yield site.getDb().insertRecord(COMMENTS_TABLE, data);\n      return data;\n    })();\n  }\n  /**\n   * Delete a comment offline to be sent later.\n   *\n   * @param commentId Comment ID.\n   * @param contextLevel Contextlevel system, course, user...\n   * @param instanceId The Instance id of item associated with the context level.\n   * @param component Component name.\n   * @param itemId Associated id.\n   * @param area String comment area. Default empty.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if stored, rejected if failure.\n   */\n  deleteComment(commentId, contextLevel, instanceId, component, itemId, area = '', siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const now = CoreTimeUtils.timestamp();\n      const data = {\n        contextlevel: contextLevel,\n        instanceid: instanceId,\n        component: component,\n        itemid: itemId,\n        area: area,\n        commentid: commentId,\n        deleted: now\n      };\n      yield site.getDb().insertRecord(COMMENTS_DELETED_TABLE, data);\n    })();\n  }\n  /**\n   * Undo delete a comment.\n   *\n   * @param commentId Comment ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved if deleted, rejected if failure.\n   */\n  undoDeleteComment(commentId, siteId) {\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.getDb().deleteRecords(COMMENTS_DELETED_TABLE, {\n        commentid: commentId\n      });\n    })();\n  }\n}\n_class = CoreCommentsOfflineProvider;\n_class.ɵfac = function CoreCommentsOfflineProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreCommentsOffline = makeSingleton(CoreCommentsOfflineProvider);","map":{"version":3,"names":["CoreSites","CoreTimeUtils","makeSingleton","COMMENTS_TABLE","COMMENTS_DELETED_TABLE","CoreArray","CoreCommentsOfflineProvider","getAllComments","siteId","_asyncToGenerator","site","getSite","results","Promise","all","getDb","getRecords","flatten","getComment","contextLevel","instanceId","component","itemId","area","getRecord","contextlevel","instanceid","itemid","_unused","getComments","_this","comments","getCurrentSiteId","comment","deletedComments","getDeletedComments","concat","getAllDeletedComments","_unused2","removeComment","deleteRecords","removeDeletedComments","saveComment","content","now","timestamp","data","lastmodified","insertRecord","deleteComment","commentId","commentid","deleted","undoDeleteComment","factory","ɵfac","providedIn","CoreCommentsOffline"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/features/comments/services/comments-offline.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { makeSingleton } from '@singletons';\nimport { COMMENTS_TABLE, COMMENTS_DELETED_TABLE, CoreCommentsDBRecord, CoreCommentsDeletedDBRecord } from './database/comments';\nimport { CoreArray } from '@singletons/array';\n\n/**\n * Service to handle offline comments.\n */\n@Injectable( { providedIn: 'root' })\nexport class CoreCommentsOfflineProvider {\n\n    /**\n     * Get all offline comments.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with comments.\n     */\n    async getAllComments(siteId?: string): Promise<(CoreCommentsDBRecord | CoreCommentsDeletedDBRecord)[]> {\n        const site = await CoreSites.getSite(siteId);\n        const results = await Promise.all([\n            site.getDb().getRecords<CoreCommentsDBRecord>(COMMENTS_TABLE),\n            site.getDb().getRecords<CoreCommentsDeletedDBRecord>(COMMENTS_DELETED_TABLE),\n        ]);\n\n        return CoreArray.flatten<CoreCommentsDBRecord | CoreCommentsDeletedDBRecord>(results);\n    }\n\n    /**\n     * Get an offline comment.\n     *\n     * @param contextLevel Contextlevel system, course, user...\n     * @param instanceId The Instance id of item associated with the context level.\n     * @param component Component name.\n     * @param itemId Associated id.\n     * @param area String comment area. Default empty.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the comments.\n     */\n    async getComment(\n        contextLevel: string,\n        instanceId: number,\n        component: string,\n        itemId: number,\n        area: string = '',\n        siteId?: string,\n    ): Promise<CoreCommentsDBRecord | undefined> {\n        try {\n            const site = await CoreSites.getSite(siteId);\n\n            return await site.getDb().getRecord(COMMENTS_TABLE, {\n                contextlevel: contextLevel,\n                instanceid: instanceId,\n                component: component,\n                itemid: itemId,\n                area: area,\n            });\n        } catch {\n            return;\n        }\n    }\n\n    /**\n     * Get all offline comments added or deleted of a special area.\n     *\n     * @param contextLevel Contextlevel system, course, user...\n     * @param instanceId The Instance id of item associated with the context level.\n     * @param component Component name.\n     * @param itemId Associated id.\n     * @param area String comment area. Default empty.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the comments.\n     */\n    async getComments(\n        contextLevel: string,\n        instanceId: number,\n        component: string,\n        itemId: number,\n        area: string = '',\n        siteId?: string,\n    ): Promise<(CoreCommentsDBRecord | CoreCommentsDeletedDBRecord)[]> {\n        let comments: (CoreCommentsDBRecord | CoreCommentsDeletedDBRecord)[] = [];\n\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const comment = await this.getComment(contextLevel, instanceId, component, itemId, area, siteId);\n\n        comments = comment ? [comment] : [];\n\n        const deletedComments = await this.getDeletedComments(contextLevel, instanceId, component, itemId, area, siteId);\n        comments = comments.concat(deletedComments);\n\n        return comments;\n    }\n\n    /**\n     * Get all offline deleted comments.\n     *\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with comments.\n     */\n    async getAllDeletedComments(siteId?: string): Promise<CoreCommentsDeletedDBRecord[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        return site.getDb().getRecords(COMMENTS_DELETED_TABLE);\n    }\n\n    /**\n     * Get an offline comment.\n     *\n     * @param contextLevel Contextlevel system, course, user...\n     * @param instanceId The Instance id of item associated with the context level.\n     * @param component Component name.\n     * @param itemId Associated id.\n     * @param area String comment area. Default empty.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the comments.\n     */\n    async getDeletedComments(\n        contextLevel: string,\n        instanceId: number,\n        component: string,\n        itemId: number,\n        area: string = '',\n        siteId?: string,\n    ): Promise<CoreCommentsDeletedDBRecord[]> {\n        try {\n            const site = await CoreSites.getSite(siteId);\n\n            return await site.getDb().getRecords(COMMENTS_DELETED_TABLE, {\n                contextlevel: contextLevel,\n                instanceid: instanceId,\n                component: component,\n                itemid: itemId,\n                area: area,\n            });\n        } catch {\n            return [];\n        }\n    }\n\n    /**\n     * Remove an offline comment.\n     *\n     * @param contextLevel Contextlevel system, course, user...\n     * @param instanceId The Instance id of item associated with the context level.\n     * @param component Component name.\n     * @param itemId Associated id.\n     * @param area String comment area. Default empty.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if deleted, rejected if failure.\n     */\n    async removeComment(\n        contextLevel: string,\n        instanceId: number,\n        component: string,\n        itemId: number,\n        area: string = '',\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.getDb().deleteRecords(COMMENTS_TABLE, {\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            component: component,\n            itemid: itemId,\n            area: area,\n        });\n    }\n\n    /**\n     * Remove an offline deleted comment.\n     *\n     * @param contextLevel Contextlevel system, course, user...\n     * @param instanceId The Instance id of item associated with the context level.\n     * @param component Component name.\n     * @param itemId Associated id.\n     * @param area String comment area. Default empty.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if deleted, rejected if failure.\n     */\n    async removeDeletedComments(\n        contextLevel: string,\n        instanceId: number,\n        component: string,\n        itemId: number,\n        area: string = '',\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.getDb().deleteRecords(COMMENTS_DELETED_TABLE, {\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            component: component,\n            itemid: itemId,\n            area: area,\n        });\n    }\n\n    /**\n     * Save a comment to be sent later.\n     *\n     * @param content Comment text.\n     * @param contextLevel Contextlevel system, course, user...\n     * @param instanceId The Instance id of item associated with the context level.\n     * @param component Component name.\n     * @param itemId Associated id.\n     * @param area String comment area. Default empty.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if stored, rejected if failure.\n     */\n    async saveComment(\n        content: string,\n        contextLevel: string,\n        instanceId: number,\n        component: string,\n        itemId: number,\n        area: string = '',\n        siteId?: string,\n    ): Promise<CoreCommentsDBRecord> {\n        const site = await CoreSites.getSite(siteId);\n        const now = CoreTimeUtils.timestamp();\n        const data: CoreCommentsDBRecord = {\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            component: component,\n            itemid: itemId,\n            area: area,\n            content: content,\n            lastmodified: now,\n        };\n\n        await site.getDb().insertRecord(COMMENTS_TABLE, data);\n\n        return data;\n    }\n\n    /**\n     * Delete a comment offline to be sent later.\n     *\n     * @param commentId Comment ID.\n     * @param contextLevel Contextlevel system, course, user...\n     * @param instanceId The Instance id of item associated with the context level.\n     * @param component Component name.\n     * @param itemId Associated id.\n     * @param area String comment area. Default empty.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if stored, rejected if failure.\n     */\n    async deleteComment(\n        commentId: number,\n        contextLevel: string,\n        instanceId: number,\n        component: string,\n        itemId: number,\n        area: string = '',\n        siteId?: string,\n    ): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n        const now = CoreTimeUtils.timestamp();\n        const data: CoreCommentsDeletedDBRecord = {\n            contextlevel: contextLevel,\n            instanceid: instanceId,\n            component: component,\n            itemid: itemId,\n            area: area,\n            commentid: commentId,\n            deleted: now,\n        };\n\n        await site.getDb().insertRecord(COMMENTS_DELETED_TABLE, data);\n    }\n\n    /**\n     * Undo delete a comment.\n     *\n     * @param commentId Comment ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved if deleted, rejected if failure.\n     */\n    async undoDeleteComment(commentId: number, siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.getDb().deleteRecords(COMMENTS_DELETED_TABLE, { commentid: commentId });\n    }\n\n}\nexport const CoreCommentsOffline = makeSingleton(CoreCommentsOfflineProvider);\n"],"mappings":";;AAeA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,cAAc,EAAEC,sBAAsB,QAA2D,qBAAqB;AAC/H,SAASC,SAAS,QAAQ,mBAAmB;;AAE7C;;;AAIA,OAAM,MAAOC,2BAA2B;EAEpC;;;;;;EAMMC,cAAcA,CAACC,MAAe;IAAA,OAAAC,iBAAA;MAChC,MAAMC,IAAI,SAASV,SAAS,CAACW,OAAO,CAACH,MAAM,CAAC;MAC5C,MAAMI,OAAO,SAASC,OAAO,CAACC,GAAG,CAAC,CAC9BJ,IAAI,CAACK,KAAK,EAAE,CAACC,UAAU,CAAuBb,cAAc,CAAC,EAC7DO,IAAI,CAACK,KAAK,EAAE,CAACC,UAAU,CAA8BZ,sBAAsB,CAAC,CAC/E,CAAC;MAEF,OAAOC,SAAS,CAACY,OAAO,CAAqDL,OAAO,CAAC;IAAC;EAC1F;EAEA;;;;;;;;;;;EAWMM,UAAUA,CACZC,YAAoB,EACpBC,UAAkB,EAClBC,SAAiB,EACjBC,MAAc,EACdC,IAAA,GAAe,EAAE,EACjBf,MAAe;IAAA,OAAAC,iBAAA;MAEf,IAAI;QACA,MAAMC,IAAI,SAASV,SAAS,CAACW,OAAO,CAACH,MAAM,CAAC;QAE5C,aAAaE,IAAI,CAACK,KAAK,EAAE,CAACS,SAAS,CAACrB,cAAc,EAAE;UAChDsB,YAAY,EAAEN,YAAY;UAC1BO,UAAU,EAAEN,UAAU;UACtBC,SAAS,EAAEA,SAAS;UACpBM,MAAM,EAAEL,MAAM;UACdC,IAAI,EAAEA;SACT,CAAC;OACL,CAAC,OAAAK,OAAA,EAAM;QACJ;;IACH;EACL;EAEA;;;;;;;;;;;EAWMC,WAAWA,CACbV,YAAoB,EACpBC,UAAkB,EAClBC,SAAiB,EACjBC,MAAc,EACdC,IAAA,GAAe,EAAE,EACjBf,MAAe;IAAA,IAAAsB,KAAA;IAAA,OAAArB,iBAAA;MAEf,IAAIsB,QAAQ,GAA2D,EAAE;MAEzEvB,MAAM,GAAGA,MAAM,IAAIR,SAAS,CAACgC,gBAAgB,EAAE;MAE/C,MAAMC,OAAO,SAASH,KAAI,CAACZ,UAAU,CAACC,YAAY,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,IAAI,EAAEf,MAAM,CAAC;MAEhGuB,QAAQ,GAAGE,OAAO,GAAG,CAACA,OAAO,CAAC,GAAG,EAAE;MAEnC,MAAMC,eAAe,SAASJ,KAAI,CAACK,kBAAkB,CAAChB,YAAY,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,IAAI,EAAEf,MAAM,CAAC;MAChHuB,QAAQ,GAAGA,QAAQ,CAACK,MAAM,CAACF,eAAe,CAAC;MAE3C,OAAOH,QAAQ;IAAC;EACpB;EAEA;;;;;;EAMMM,qBAAqBA,CAAC7B,MAAe;IAAA,OAAAC,iBAAA;MACvC,MAAMC,IAAI,SAASV,SAAS,CAACW,OAAO,CAACH,MAAM,CAAC;MAE5C,OAAOE,IAAI,CAACK,KAAK,EAAE,CAACC,UAAU,CAACZ,sBAAsB,CAAC;IAAC;EAC3D;EAEA;;;;;;;;;;;EAWM+B,kBAAkBA,CACpBhB,YAAoB,EACpBC,UAAkB,EAClBC,SAAiB,EACjBC,MAAc,EACdC,IAAA,GAAe,EAAE,EACjBf,MAAe;IAAA,OAAAC,iBAAA;MAEf,IAAI;QACA,MAAMC,IAAI,SAASV,SAAS,CAACW,OAAO,CAACH,MAAM,CAAC;QAE5C,aAAaE,IAAI,CAACK,KAAK,EAAE,CAACC,UAAU,CAACZ,sBAAsB,EAAE;UACzDqB,YAAY,EAAEN,YAAY;UAC1BO,UAAU,EAAEN,UAAU;UACtBC,SAAS,EAAEA,SAAS;UACpBM,MAAM,EAAEL,MAAM;UACdC,IAAI,EAAEA;SACT,CAAC;OACL,CAAC,OAAAe,QAAA,EAAM;QACJ,OAAO,EAAE;;IACZ;EACL;EAEA;;;;;;;;;;;EAWMC,aAAaA,CACfpB,YAAoB,EACpBC,UAAkB,EAClBC,SAAiB,EACjBC,MAAc,EACdC,IAAA,GAAe,EAAE,EACjBf,MAAe;IAAA,OAAAC,iBAAA;MAEf,MAAMC,IAAI,SAASV,SAAS,CAACW,OAAO,CAACH,MAAM,CAAC;MAE5C,MAAME,IAAI,CAACK,KAAK,EAAE,CAACyB,aAAa,CAACrC,cAAc,EAAE;QAC7CsB,YAAY,EAAEN,YAAY;QAC1BO,UAAU,EAAEN,UAAU;QACtBC,SAAS,EAAEA,SAAS;QACpBM,MAAM,EAAEL,MAAM;QACdC,IAAI,EAAEA;OACT,CAAC;IAAC;EACP;EAEA;;;;;;;;;;;EAWMkB,qBAAqBA,CACvBtB,YAAoB,EACpBC,UAAkB,EAClBC,SAAiB,EACjBC,MAAc,EACdC,IAAA,GAAe,EAAE,EACjBf,MAAe;IAAA,OAAAC,iBAAA;MAEf,MAAMC,IAAI,SAASV,SAAS,CAACW,OAAO,CAACH,MAAM,CAAC;MAE5C,MAAME,IAAI,CAACK,KAAK,EAAE,CAACyB,aAAa,CAACpC,sBAAsB,EAAE;QACrDqB,YAAY,EAAEN,YAAY;QAC1BO,UAAU,EAAEN,UAAU;QACtBC,SAAS,EAAEA,SAAS;QACpBM,MAAM,EAAEL,MAAM;QACdC,IAAI,EAAEA;OACT,CAAC;IAAC;EACP;EAEA;;;;;;;;;;;;EAYMmB,WAAWA,CACbC,OAAe,EACfxB,YAAoB,EACpBC,UAAkB,EAClBC,SAAiB,EACjBC,MAAc,EACdC,IAAA,GAAe,EAAE,EACjBf,MAAe;IAAA,OAAAC,iBAAA;MAEf,MAAMC,IAAI,SAASV,SAAS,CAACW,OAAO,CAACH,MAAM,CAAC;MAC5C,MAAMoC,GAAG,GAAG3C,aAAa,CAAC4C,SAAS,EAAE;MACrC,MAAMC,IAAI,GAAyB;QAC/BrB,YAAY,EAAEN,YAAY;QAC1BO,UAAU,EAAEN,UAAU;QACtBC,SAAS,EAAEA,SAAS;QACpBM,MAAM,EAAEL,MAAM;QACdC,IAAI,EAAEA,IAAI;QACVoB,OAAO,EAAEA,OAAO;QAChBI,YAAY,EAAEH;OACjB;MAED,MAAMlC,IAAI,CAACK,KAAK,EAAE,CAACiC,YAAY,CAAC7C,cAAc,EAAE2C,IAAI,CAAC;MAErD,OAAOA,IAAI;IAAC;EAChB;EAEA;;;;;;;;;;;;EAYMG,aAAaA,CACfC,SAAiB,EACjB/B,YAAoB,EACpBC,UAAkB,EAClBC,SAAiB,EACjBC,MAAc,EACdC,IAAA,GAAe,EAAE,EACjBf,MAAe;IAAA,OAAAC,iBAAA;MAEf,MAAMC,IAAI,SAASV,SAAS,CAACW,OAAO,CAACH,MAAM,CAAC;MAC5C,MAAMoC,GAAG,GAAG3C,aAAa,CAAC4C,SAAS,EAAE;MACrC,MAAMC,IAAI,GAAgC;QACtCrB,YAAY,EAAEN,YAAY;QAC1BO,UAAU,EAAEN,UAAU;QACtBC,SAAS,EAAEA,SAAS;QACpBM,MAAM,EAAEL,MAAM;QACdC,IAAI,EAAEA,IAAI;QACV4B,SAAS,EAAED,SAAS;QACpBE,OAAO,EAAER;OACZ;MAED,MAAMlC,IAAI,CAACK,KAAK,EAAE,CAACiC,YAAY,CAAC5C,sBAAsB,EAAE0C,IAAI,CAAC;IAAC;EAClE;EAEA;;;;;;;EAOMO,iBAAiBA,CAACH,SAAiB,EAAE1C,MAAe;IAAA,OAAAC,iBAAA;MACtD,MAAMC,IAAI,SAASV,SAAS,CAACW,OAAO,CAACH,MAAM,CAAC;MAE5C,MAAME,IAAI,CAACK,KAAK,EAAE,CAACyB,aAAa,CAACpC,sBAAsB,EAAE;QAAE+C,SAAS,EAAED;MAAS,CAAE,CAAC;IAAC;EACvF;;SApRS5C,2BAA2B;;mBAA3BA,MAA2B;AAAA;;SAA3BA,MAA2B;EAAAgD,OAAA,EAA3BhD,MAA2B,CAAAiD,IAAA;EAAAC,UAAA,EADb;AAAM;AAwRjC,OAAO,MAAMC,mBAAmB,GAAGvD,aAAa,CAACI,2BAA2B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}