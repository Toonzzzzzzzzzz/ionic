{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@ngx-translate/core\";\nfunction AddonQbehaviourDeferredCBMComponent_div_0_ion_item_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 5)(1, \"ion-label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"ion-radio\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(option_r2.text);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", option_r2.id);\n    i0.ɵɵproperty(\"value\", option_r2.value)(\"disabled\", option_r2.disabled);\n  }\n}\nfunction AddonQbehaviourDeferredCBMComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"ion-item\", 1)(2, \"ion-label\")(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(6, \"ion-radio-group\", 2);\n    i0.ɵɵlistener(\"ngModelChange\", function AddonQbehaviourDeferredCBMComponent_div_0_Template_ion_radio_group_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.question.behaviourCertaintySelected = $event);\n    });\n    i0.ɵɵtemplate(7, AddonQbehaviourDeferredCBMComponent_div_0_ion_item_7_Template, 4, 4, \"ion-item\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 6, \"core.question.certainty\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.question.behaviourCertaintySelected)(\"name\", ctx_r0.question.behaviourCertaintyOptions[0].name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.question.behaviourCertaintyOptions);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.question.behaviourCertaintySelected);\n    i0.ɵɵattribute(\"name\", ctx_r0.question.behaviourCertaintyOptions[0].name);\n  }\n}\n/**\n * Component to render the deferred CBM in a question.\n */\nexport class AddonQbehaviourDeferredCBMComponent {\n  constructor() {\n    this.buttonClicked = new EventEmitter(); // Will emit when a behaviour button is clicked.\n    this.onAbort = new EventEmitter(); // Should emit an event if the question should be aborted.\n  }\n}\n_class = AddonQbehaviourDeferredCBMComponent;\n_class.ɵfac = function AddonQbehaviourDeferredCBMComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"addon-qbehaviour-deferredcbm\"]],\n  inputs: {\n    question: \"question\",\n    component: \"component\",\n    componentId: \"componentId\",\n    attemptId: \"attemptId\",\n    offlineEnabled: \"offlineEnabled\",\n    contextLevel: \"contextLevel\",\n    contextInstanceId: \"contextInstanceId\",\n    courseId: \"courseId\",\n    review: \"review\",\n    preferredBehaviour: \"preferredBehaviour\"\n  },\n  outputs: {\n    buttonClicked: \"buttonClicked\",\n    onAbort: \"onAbort\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [1, \"ion-text-wrap\", \"addon-qbehaviour-deferredcbm-certainty-title\"], [3, \"ngModel\", \"name\", \"ngModelChange\"], [\"class\", \"ion-text-wrap\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"hidden\", 3, \"ngModel\"], [1, \"ion-text-wrap\"], [\"slot\", \"end\", 3, \"id\", \"value\", \"disabled\"]],\n  template: function AddonQbehaviourDeferredCBMComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AddonQbehaviourDeferredCBMComponent_div_0_Template, 9, 8, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.question && ctx.question.behaviourCertaintyOptions && ctx.question.behaviourCertaintyOptions.length);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.IonItem, i3.IonLabel, i3.IonRadio, i3.IonRadioGroup, i3.RadioValueAccessor, i3.SelectValueAccessor, i4.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["EventEmitter","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","option_r2","text","ɵɵpropertyInterpolate","id","ɵɵproperty","value","disabled","ɵɵlistener","AddonQbehaviourDeferredCBMComponent_div_0_Template_ion_radio_group_ngModelChange_6_listener","$event","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","question","behaviourCertaintySelected","ɵɵtemplate","AddonQbehaviourDeferredCBMComponent_div_0_ion_item_7_Template","ɵɵpipeBind1","ctx_r0","behaviourCertaintyOptions","name","ɵɵattribute","AddonQbehaviourDeferredCBMComponent","constructor","buttonClicked","onAbort","selectors","inputs","component","componentId","attemptId","offlineEnabled","contextLevel","contextInstanceId","courseId","review","preferredBehaviour","outputs","decls","vars","consts","template","AddonQbehaviourDeferredCBMComponent_Template","rf","ctx","AddonQbehaviourDeferredCBMComponent_div_0_Template","length"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/qbehaviour/deferredcbm/component/deferredcbm.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/qbehaviour/deferredcbm/component/addon-qbehaviour-deferredcbm.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { CoreQuestionBehaviourButton, CoreQuestionQuestion } from '@features/question/services/question-helper';\n\n/**\n * Component to render the deferred CBM in a question.\n */\n@Component({\n    selector: 'addon-qbehaviour-deferredcbm',\n    templateUrl: 'addon-qbehaviour-deferredcbm.html',\n})\nexport class AddonQbehaviourDeferredCBMComponent {\n\n    @Input() question?: CoreQuestionQuestion; // The question.\n    @Input() component?: string; // The component the question belongs to.\n    @Input() componentId?: number; // ID of the component the question belongs to.\n    @Input() attemptId?: number; // Attempt ID.\n    @Input() offlineEnabled?: boolean | string; // Whether the question can be answered in offline.\n    @Input() contextLevel?: string; // The context level.\n    @Input() contextInstanceId?: number; // The instance ID related to the context.\n    @Input() courseId?: number; // Course ID the question belongs to (if any). It can be used to improve performance with filters.\n    @Input() review?: boolean; // Whether the user is in review mode.\n    @Input() preferredBehaviour?: string; // Preferred behaviour.\n    @Output() buttonClicked = new EventEmitter<CoreQuestionBehaviourButton>(); // Will emit when a behaviour button is clicked.\n    @Output() onAbort = new EventEmitter<void>(); // Should emit an event if the question should be aborted.\n\n}\n","<div *ngIf=\"question && question.behaviourCertaintyOptions && question.behaviourCertaintyOptions.length\">\n    <ion-item class=\"ion-text-wrap addon-qbehaviour-deferredcbm-certainty-title\">\n        <ion-label>\n            <p>{{ 'core.question.certainty' | translate }}</p>\n        </ion-label>\n    </ion-item>\n\n    <ion-radio-group [(ngModel)]=\"question.behaviourCertaintySelected\" [name]=\"question.behaviourCertaintyOptions[0].name\">\n        <ion-item class=\"ion-text-wrap\" *ngFor=\"let option of question.behaviourCertaintyOptions\">\n            <ion-label>{{ option.text }}</ion-label>\n            <ion-radio slot=\"end\" id=\"{{option.id}}\" [value]=\"option.value\" [disabled]=\"option.disabled\" />\n        </ion-item>\n    </ion-radio-group>\n\n    <!-- ion-radio doesn't use an input. Create a hidden input to hold the selected value. -->\n    <input type=\"hidden\" [ngModel]=\"question.behaviourCertaintySelected\" [attr.name]=\"question.behaviourCertaintyOptions[0].name\">\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}