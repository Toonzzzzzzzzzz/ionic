{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreUserDelegateContext, CoreUserDelegateService } from '@features/user/services/user-delegate';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { AddonBadges } from '../badges';\nimport * as i0 from \"@angular/core\";\n/**\n * Profile badges handler.\n */\nexport class AddonBadgesUserHandlerService {\n  constructor() {\n    this.name = 'AddonBadges:fakename'; // This name doesn't match any disabled feature, they'll be checked in isEnabledForContext.\n    this.priority = 300;\n    this.type = CoreUserDelegateService.TYPE_NEW_PAGE;\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabled() {\n    return AddonBadges.isPluginEnabled();\n  }\n  /**\n   * @inheritdoc\n   */\n  isEnabledForContext(context, courseId, navOptions) {\n    return _asyncToGenerator(function* () {\n      // Check if feature is disabled.\n      const currentSite = CoreSites.getCurrentSite();\n      if (!currentSite) {\n        return false;\n      }\n      if (context === CoreUserDelegateContext.USER_MENU) {\n        if (currentSite.isFeatureDisabled('CoreUserDelegate_AddonBadges:account')) {\n          return false;\n        }\n      } else if (currentSite.isFeatureDisabled('CoreUserDelegate_AddonBadges')) {\n        return false;\n      }\n      if (navOptions && navOptions.badges !== undefined) {\n        return navOptions.badges;\n      }\n      return true;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  getDisplayData() {\n    return {\n      icon: 'fas-trophy',\n      title: 'addon.badges.badges',\n      action: (event, user, context, contextId) => {\n        event.preventDefault();\n        event.stopPropagation();\n        CoreNavigator.navigateToSitePath('/badges', {\n          params: {\n            courseId: contextId,\n            userId: user.id\n          }\n        });\n      }\n    };\n  }\n}\n_class = AddonBadgesUserHandlerService;\n_class.ɵfac = function AddonBadgesUserHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonBadgesUserHandler = makeSingleton(AddonBadgesUserHandlerService);","map":{"version":3,"names":["CoreUserDelegateContext","CoreUserDelegateService","CoreNavigator","CoreSites","makeSingleton","AddonBadges","AddonBadgesUserHandlerService","constructor","name","priority","type","TYPE_NEW_PAGE","isEnabled","isPluginEnabled","isEnabledForContext","context","courseId","navOptions","_asyncToGenerator","currentSite","getCurrentSite","USER_MENU","isFeatureDisabled","badges","undefined","getDisplayData","icon","title","action","event","user","contextId","preventDefault","stopPropagation","navigateToSitePath","params","userId","id","factory","ɵfac","providedIn","AddonBadgesUserHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/badges/services/handlers/user.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreCourseUserAdminOrNavOptionIndexed } from '@features/courses/services/courses';\nimport {\n    CoreUserDelegateContext,\n    CoreUserDelegateService,\n    CoreUserProfileHandler,\n    CoreUserProfileHandlerData,\n} from '@features/user/services/user-delegate';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { AddonBadges } from '../badges';\n\n/**\n * Profile badges handler.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonBadgesUserHandlerService implements CoreUserProfileHandler {\n\n    name = 'AddonBadges:fakename'; // This name doesn't match any disabled feature, they'll be checked in isEnabledForContext.\n    priority = 300;\n    type = CoreUserDelegateService.TYPE_NEW_PAGE;\n\n    /**\n     * @inheritdoc\n     */\n    isEnabled(): Promise<boolean> {\n        return AddonBadges.isPluginEnabled();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async isEnabledForContext(\n        context: CoreUserDelegateContext,\n        courseId: number,\n        navOptions?: CoreCourseUserAdminOrNavOptionIndexed,\n    ): Promise<boolean> {\n        // Check if feature is disabled.\n        const currentSite = CoreSites.getCurrentSite();\n        if (!currentSite) {\n            return false;\n        }\n\n        if (context === CoreUserDelegateContext.USER_MENU) {\n            if (currentSite.isFeatureDisabled('CoreUserDelegate_AddonBadges:account')) {\n                return false;\n            }\n        } else if (currentSite.isFeatureDisabled('CoreUserDelegate_AddonBadges')) {\n            return false;\n        }\n\n        if (navOptions && navOptions.badges !== undefined) {\n            return navOptions.badges;\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getDisplayData(): CoreUserProfileHandlerData {\n        return {\n            icon: 'fas-trophy',\n            title: 'addon.badges.badges',\n            action: (event, user, context, contextId): void => {\n                event.preventDefault();\n                event.stopPropagation();\n                CoreNavigator.navigateToSitePath('/badges', {\n                    params: { courseId: contextId, userId: user.id },\n                });\n            },\n        };\n    }\n\n}\n\nexport const AddonBadgesUserHandler = makeSingleton(AddonBadgesUserHandlerService);\n"],"mappings":";;AAgBA,SACIA,uBAAuB,EACvBC,uBAAuB,QAGpB,uCAAuC;AAC9C,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,WAAW,QAAQ,WAAW;;AAEvC;;;AAIA,OAAM,MAAOC,6BAA6B;EAD1CC,YAAA;IAGI,KAAAC,IAAI,GAAG,sBAAsB,CAAC,CAAC;IAC/B,KAAAC,QAAQ,GAAG,GAAG;IACd,KAAAC,IAAI,GAAGT,uBAAuB,CAACU,aAAa;;EAE5C;;;EAGAC,SAASA,CAAA;IACL,OAAOP,WAAW,CAACQ,eAAe,EAAE;EACxC;EAEA;;;EAGMC,mBAAmBA,CACrBC,OAAgC,EAChCC,QAAgB,EAChBC,UAAkD;IAAA,OAAAC,iBAAA;MAElD;MACA,MAAMC,WAAW,GAAGhB,SAAS,CAACiB,cAAc,EAAE;MAC9C,IAAI,CAACD,WAAW,EAAE;QACd,OAAO,KAAK;;MAGhB,IAAIJ,OAAO,KAAKf,uBAAuB,CAACqB,SAAS,EAAE;QAC/C,IAAIF,WAAW,CAACG,iBAAiB,CAAC,sCAAsC,CAAC,EAAE;UACvE,OAAO,KAAK;;OAEnB,MAAM,IAAIH,WAAW,CAACG,iBAAiB,CAAC,8BAA8B,CAAC,EAAE;QACtE,OAAO,KAAK;;MAGhB,IAAIL,UAAU,IAAIA,UAAU,CAACM,MAAM,KAAKC,SAAS,EAAE;QAC/C,OAAOP,UAAU,CAACM,MAAM;;MAG5B,OAAO,IAAI;IAAC;EAChB;EAEA;;;EAGAE,cAAcA,CAAA;IACV,OAAO;MACHC,IAAI,EAAE,YAAY;MAClBC,KAAK,EAAE,qBAAqB;MAC5BC,MAAM,EAAEA,CAACC,KAAK,EAAEC,IAAI,EAAEf,OAAO,EAAEgB,SAAS,KAAU;QAC9CF,KAAK,CAACG,cAAc,EAAE;QACtBH,KAAK,CAACI,eAAe,EAAE;QACvB/B,aAAa,CAACgC,kBAAkB,CAAC,SAAS,EAAE;UACxCC,MAAM,EAAE;YAAEnB,QAAQ,EAAEe,SAAS;YAAEK,MAAM,EAAEN,IAAI,CAACO;UAAE;SACjD,CAAC;MACN;KACH;EACL;;SAzDS/B,6BAA6B;;mBAA7BA,MAA6B;AAAA;;SAA7BA,MAA6B;EAAAgC,OAAA,EAA7BhC,MAA6B,CAAAiC,IAAA;EAAAC,UAAA,EADhB;AAAM;AA8DhC,OAAO,MAAMC,sBAAsB,GAAGrC,aAAa,CAACE,6BAA6B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}