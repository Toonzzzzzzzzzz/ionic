{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { SYNC_TABLE_NAME } from '@services/database/sync';\nimport * as i0 from \"@angular/core\";\n/*\n * Service that provides some features regarding synchronization.\n*/\nexport class CoreSyncProvider {\n  constructor() {\n    // Store blocked sync objects.\n    this.blockedItems = {};\n    // Unblock all blocks on logout.\n    CoreEvents.on(CoreEvents.LOGOUT, data => {\n      this.clearAllBlocks(data.siteId);\n    });\n  }\n  /**\n   * Block a component and ID so it cannot be synchronized.\n   *\n   * @param component Component name.\n   * @param id Unique ID per component.\n   * @param operation Operation name. If not defined, a default text is used.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  blockOperation(component, id, operation, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    const uniqueId = this.getUniqueSyncBlockId(component, id);\n    if (!this.blockedItems[siteId]) {\n      this.blockedItems[siteId] = {};\n    }\n    if (!this.blockedItems[siteId][uniqueId]) {\n      this.blockedItems[siteId][uniqueId] = {};\n    }\n    operation = operation || '-';\n    this.blockedItems[siteId][uniqueId][operation] = true;\n  }\n  /**\n   * Clear all blocks for a site or all sites.\n   *\n   * @param siteId If set, clear the blocked objects only for this site. Otherwise clear them for all sites.\n   */\n  clearAllBlocks(siteId) {\n    if (siteId) {\n      delete this.blockedItems[siteId];\n    } else {\n      this.blockedItems = {};\n    }\n  }\n  /**\n   * Clear all blocks for a certain component.\n   *\n   * @param component Component name.\n   * @param id Unique ID per component.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  clearBlocks(component, id, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    const uniqueId = this.getUniqueSyncBlockId(component, id);\n    if (this.blockedItems[siteId]) {\n      delete this.blockedItems[siteId][uniqueId];\n    }\n  }\n  /**\n   * Returns a sync record.\n   *\n   * @param component Component name.\n   * @param id Unique ID per component.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Record if found or reject.\n   */\n  getSyncRecord(component, id, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      return db.getRecord(SYNC_TABLE_NAME, {\n        component: component,\n        id: String(id)\n      });\n    })();\n  }\n  /**\n   * Inserts or Updates info of a sync record.\n   *\n   * @param component Component name.\n   * @param id Unique ID per component.\n   * @param data Data that updates the record.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with done.\n   */\n  insertOrUpdateSyncRecord(component, id, data, siteId) {\n    return _asyncToGenerator(function* () {\n      const db = yield CoreSites.getSiteDb(siteId);\n      data.component = component;\n      data.id = String(id);\n      yield db.insertRecord(SYNC_TABLE_NAME, data);\n    })();\n  }\n  /**\n   * Convenience function to create unique identifiers for a component and id.\n   *\n   * @param component Component name.\n   * @param id Unique ID per component.\n   * @returns Unique sync id.\n   */\n  getUniqueSyncBlockId(component, id) {\n    return component + '#' + id;\n  }\n  /**\n   * Check if a component is blocked.\n   * One block can have different operations. Here we check how many operations are being blocking the object.\n   *\n   * @param component Component name.\n   * @param id Unique ID per component.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Whether it's blocked.\n   */\n  isBlocked(component, id, siteId) {\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    if (!this.blockedItems[siteId]) {\n      return false;\n    }\n    const uniqueId = this.getUniqueSyncBlockId(component, id);\n    if (!this.blockedItems[siteId][uniqueId]) {\n      return false;\n    }\n    return Object.keys(this.blockedItems[siteId][uniqueId]).length > 0;\n  }\n  /**\n   * Unblock an operation on a component and ID.\n   *\n   * @param component Component name.\n   * @param id Unique ID per component.\n   * @param operation Operation name. If not defined, a default text is used.\n   * @param siteId Site ID. If not defined, current site.\n   */\n  unblockOperation(component, id, operation, siteId) {\n    operation = operation || '-';\n    siteId = siteId || CoreSites.getCurrentSiteId();\n    const uniqueId = this.getUniqueSyncBlockId(component, id);\n    if (this.blockedItems[siteId] && this.blockedItems[siteId][uniqueId]) {\n      delete this.blockedItems[siteId][uniqueId][operation];\n    }\n  }\n}\n_class = CoreSyncProvider;\n_class.ɵfac = function CoreSyncProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreSync = makeSingleton(CoreSyncProvider);","map":{"version":3,"names":["CoreEvents","CoreSites","makeSingleton","SYNC_TABLE_NAME","CoreSyncProvider","constructor","blockedItems","on","LOGOUT","data","clearAllBlocks","siteId","blockOperation","component","id","operation","getCurrentSiteId","uniqueId","getUniqueSyncBlockId","clearBlocks","getSyncRecord","_asyncToGenerator","db","getSiteDb","getRecord","String","insertOrUpdateSyncRecord","insertRecord","isBlocked","Object","keys","length","unblockOperation","factory","ɵfac","providedIn","CoreSync"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/sync.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport { makeSingleton } from '@singletons';\nimport { SYNC_TABLE_NAME, CoreSyncRecord } from '@services/database/sync';\n\n/*\n * Service that provides some features regarding synchronization.\n*/\n@Injectable({ providedIn: 'root' })\nexport class CoreSyncProvider {\n\n    // Store blocked sync objects.\n    protected blockedItems: { [siteId: string]: { [blockId: string]: { [operation: string]: boolean } } } = {};\n\n    constructor() {\n        // Unblock all blocks on logout.\n        CoreEvents.on(CoreEvents.LOGOUT, (data: {siteId: string}) => {\n            this.clearAllBlocks(data.siteId);\n        });\n    }\n\n    /**\n     * Block a component and ID so it cannot be synchronized.\n     *\n     * @param component Component name.\n     * @param id Unique ID per component.\n     * @param operation Operation name. If not defined, a default text is used.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    blockOperation(component: string, id: string | number, operation?: string, siteId?: string): void {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const uniqueId = this.getUniqueSyncBlockId(component, id);\n\n        if (!this.blockedItems[siteId]) {\n            this.blockedItems[siteId] = {};\n        }\n\n        if (!this.blockedItems[siteId][uniqueId]) {\n            this.blockedItems[siteId][uniqueId] = {};\n        }\n\n        operation = operation || '-';\n\n        this.blockedItems[siteId][uniqueId][operation] = true;\n    }\n\n    /**\n     * Clear all blocks for a site or all sites.\n     *\n     * @param siteId If set, clear the blocked objects only for this site. Otherwise clear them for all sites.\n     */\n    clearAllBlocks(siteId?: string): void {\n        if (siteId) {\n            delete this.blockedItems[siteId];\n        } else {\n            this.blockedItems = {};\n        }\n    }\n\n    /**\n     * Clear all blocks for a certain component.\n     *\n     * @param component Component name.\n     * @param id Unique ID per component.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    clearBlocks(component: string, id: string | number, siteId?: string): void {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const uniqueId = this.getUniqueSyncBlockId(component, id);\n        if (this.blockedItems[siteId]) {\n            delete this.blockedItems[siteId][uniqueId];\n        }\n    }\n\n    /**\n     * Returns a sync record.\n     *\n     * @param component Component name.\n     * @param id Unique ID per component.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Record if found or reject.\n     */\n    async getSyncRecord(component: string, id: string | number, siteId?: string): Promise<CoreSyncRecord> {\n        const db = await CoreSites.getSiteDb(siteId);\n\n        return db.getRecord(SYNC_TABLE_NAME, { component: component, id: String(id) });\n    }\n\n    /**\n     * Inserts or Updates info of a sync record.\n     *\n     * @param component Component name.\n     * @param id Unique ID per component.\n     * @param data Data that updates the record.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with done.\n     */\n    async insertOrUpdateSyncRecord(\n        component: string,\n        id: string | number,\n        data: Partial<CoreSyncRecord>,\n        siteId?: string,\n    ): Promise<void> {\n        const db = await CoreSites.getSiteDb(siteId);\n\n        data.component = component;\n        data.id = String(id);\n\n        await db.insertRecord(SYNC_TABLE_NAME, data);\n    }\n\n    /**\n     * Convenience function to create unique identifiers for a component and id.\n     *\n     * @param component Component name.\n     * @param id Unique ID per component.\n     * @returns Unique sync id.\n     */\n    protected getUniqueSyncBlockId(component: string, id: string | number): string {\n        return component + '#' + id;\n    }\n\n    /**\n     * Check if a component is blocked.\n     * One block can have different operations. Here we check how many operations are being blocking the object.\n     *\n     * @param component Component name.\n     * @param id Unique ID per component.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Whether it's blocked.\n     */\n    isBlocked(component: string, id: string | number, siteId?: string): boolean {\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        if (!this.blockedItems[siteId]) {\n            return false;\n        }\n\n        const uniqueId = this.getUniqueSyncBlockId(component, id);\n        if (!this.blockedItems[siteId][uniqueId]) {\n            return false;\n        }\n\n        return Object.keys(this.blockedItems[siteId][uniqueId]).length > 0;\n    }\n\n    /**\n     * Unblock an operation on a component and ID.\n     *\n     * @param component Component name.\n     * @param id Unique ID per component.\n     * @param operation Operation name. If not defined, a default text is used.\n     * @param siteId Site ID. If not defined, current site.\n     */\n    unblockOperation(component: string, id: string | number, operation?: string, siteId?: string): void {\n        operation = operation || '-';\n        siteId = siteId || CoreSites.getCurrentSiteId();\n\n        const uniqueId = this.getUniqueSyncBlockId(component, id);\n\n        if (this.blockedItems[siteId] && this.blockedItems[siteId][uniqueId]) {\n            delete this.blockedItems[siteId][uniqueId][operation];\n        }\n    }\n\n}\n\nexport const CoreSync = makeSingleton(CoreSyncProvider);\n\nexport type CoreSyncResult = {\n    warnings: string[]; // List of warnings.\n    updated: boolean; // Whether some data was sent to the server or offline data was updated.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}