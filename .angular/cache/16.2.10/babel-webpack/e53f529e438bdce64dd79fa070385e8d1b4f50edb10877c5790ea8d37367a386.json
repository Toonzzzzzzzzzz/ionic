{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { AddonQbehaviourDeferredFeedbackHandler } from '@addons/qbehaviour/deferredfeedback/services/handlers/deferredfeedback';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler to support manual graded question behaviour.\n */\nexport class AddonQbehaviourManualGradedHandlerService {\n  constructor() {\n    this.name = 'AddonQbehaviourManualGraded';\n    this.type = 'manualgraded';\n  }\n  /**\n   * Determine a question new state based on its answer(s).\n   *\n   * @param component Component the question belongs to.\n   * @param attemptId Attempt ID the question belongs to.\n   * @param question The question.\n   * @param componentId Component ID.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns New state (or promise resolved with state).\n   */\n  determineNewState(component, attemptId, question, componentId, siteId) {\n    // Same implementation as the deferred feedback. Use that function instead of replicating it.\n    return AddonQbehaviourDeferredFeedbackHandler.determineNewStateDeferred(component, attemptId, question, componentId, siteId);\n  }\n  /**\n   * Whether or not the handler is enabled on a site level.\n   *\n   * @returns True or promise resolved with true if enabled.\n   */\n  isEnabled() {\n    return _asyncToGenerator(function* () {\n      return true;\n    })();\n  }\n}\n_class = AddonQbehaviourManualGradedHandlerService;\n_class.ɵfac = function AddonQbehaviourManualGradedHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonQbehaviourManualGradedHandler = makeSingleton(AddonQbehaviourManualGradedHandlerService);","map":{"version":3,"names":["AddonQbehaviourDeferredFeedbackHandler","makeSingleton","AddonQbehaviourManualGradedHandlerService","constructor","name","type","determineNewState","component","attemptId","question","componentId","siteId","determineNewStateDeferred","isEnabled","_asyncToGenerator","factory","ɵfac","providedIn","AddonQbehaviourManualGradedHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/qbehaviour/manualgraded/services/handlers/manualgraded.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { AddonQbehaviourDeferredFeedbackHandler } from '@addons/qbehaviour/deferredfeedback/services/handlers/deferredfeedback';\nimport { CoreQuestionBehaviourHandler, CoreQuestionQuestionWithAnswers } from '@features/question/services/behaviour-delegate';\nimport { CoreQuestionState } from '@features/question/services/question';\nimport { makeSingleton } from '@singletons';\n\n/**\n * Handler to support manual graded question behaviour.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonQbehaviourManualGradedHandlerService implements CoreQuestionBehaviourHandler {\n\n    name = 'AddonQbehaviourManualGraded';\n    type = 'manualgraded';\n\n    /**\n     * Determine a question new state based on its answer(s).\n     *\n     * @param component Component the question belongs to.\n     * @param attemptId Attempt ID the question belongs to.\n     * @param question The question.\n     * @param componentId Component ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns New state (or promise resolved with state).\n     */\n    determineNewState(\n        component: string,\n        attemptId: number,\n        question: CoreQuestionQuestionWithAnswers,\n        componentId: string | number,\n        siteId?: string,\n    ): CoreQuestionState | Promise<CoreQuestionState> {\n        // Same implementation as the deferred feedback. Use that function instead of replicating it.\n        return AddonQbehaviourDeferredFeedbackHandler.determineNewStateDeferred(\n            component,\n            attemptId,\n            question,\n            componentId,\n            siteId,\n        );\n    }\n\n    /**\n     * Whether or not the handler is enabled on a site level.\n     *\n     * @returns True or promise resolved with true if enabled.\n     */\n    async isEnabled(): Promise<boolean> {\n        return true;\n    }\n\n}\n\nexport const AddonQbehaviourManualGradedHandler = makeSingleton(AddonQbehaviourManualGradedHandlerService);\n"],"mappings":";;AAgBA,SAASA,sCAAsC,QAAQ,wEAAwE;AAG/H,SAASC,aAAa,QAAQ,aAAa;;AAE3C;;;AAIA,OAAM,MAAOC,yCAAyC;EADtDC,YAAA;IAGI,KAAAC,IAAI,GAAG,6BAA6B;IACpC,KAAAC,IAAI,GAAG,cAAc;;EAErB;;;;;;;;;;EAUAC,iBAAiBA,CACbC,SAAiB,EACjBC,SAAiB,EACjBC,QAAyC,EACzCC,WAA4B,EAC5BC,MAAe;IAEf;IACA,OAAOX,sCAAsC,CAACY,yBAAyB,CACnEL,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXC,MAAM,CACT;EACL;EAEA;;;;;EAKME,SAASA,CAAA;IAAA,OAAAC,iBAAA;MACX,OAAO,IAAI;IAAC;EAChB;;SAvCSZ,yCAAyC;;mBAAzCA,MAAyC;AAAA;;SAAzCA,MAAyC;EAAAa,OAAA,EAAzCb,MAAyC,CAAAc,IAAA;EAAAC,UAAA,EAD5B;AAAM;AA4ChC,OAAO,MAAMC,kCAAkC,GAAGjB,aAAa,CAACC,yCAAyC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}