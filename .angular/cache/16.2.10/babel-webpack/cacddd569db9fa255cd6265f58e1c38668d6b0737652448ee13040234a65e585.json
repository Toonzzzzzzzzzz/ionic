{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonBadges } from '../badges';\nimport { makeSingleton } from '@singletons';\nimport { CoreNavigator } from '@services/navigator';\nimport * as i0 from \"@angular/core\";\n/**\n * Handler for badges push notifications clicks.\n */\nexport class AddonBadgesPushClickHandlerService {\n  constructor() {\n    this.name = 'AddonBadgesPushClickHandler';\n    this.priority = 200;\n    this.featureName = 'CoreUserDelegate_AddonBadges';\n  }\n  /**\n   * Check if a notification click is handled by this handler.\n   *\n   * @param notification The notification to check.\n   * @returns Whether the notification click is handled by this handler\n   */\n  handles(notification) {\n    return _asyncToGenerator(function* () {\n      const data = notification.customdata || {};\n      if (CoreUtils.isTrueOrOne(notification.notif) && notification.moodlecomponent == 'moodle' && (notification.name == 'badgerecipientnotice' || notification.name == 'badgecreatornotice' && data.hash)) {\n        return AddonBadges.isPluginEnabled(notification.site);\n      }\n      return false;\n    })();\n  }\n  /**\n   * Handle the notification click.\n   *\n   * @param notification The notification to check.\n   * @returns Promise resolved when done.\n   */\n  handleClick(notification) {\n    return _asyncToGenerator(function* () {\n      const data = notification.customdata || {};\n      if (data.hash) {\n        // We have the hash, open the badge directly.\n        yield CoreNavigator.navigateToSitePath(`/badges/${data.hash}`, {\n          siteId: notification.site\n        });\n        return;\n      }\n      // No hash, open the list of user badges.\n      yield CoreUtils.ignoreErrors(AddonBadges.invalidateUserBadges(0, Number(notification.usertoid), notification.site));\n      yield CoreNavigator.navigateToSitePath('/badges', {\n        siteId: notification.site\n      });\n    })();\n  }\n}\n_class = AddonBadgesPushClickHandlerService;\n_class.ɵfac = function AddonBadgesPushClickHandlerService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonBadgesPushClickHandler = makeSingleton(AddonBadgesPushClickHandlerService);","map":{"version":3,"names":["CoreUtils","AddonBadges","makeSingleton","CoreNavigator","AddonBadgesPushClickHandlerService","constructor","name","priority","featureName","handles","notification","_asyncToGenerator","data","customdata","isTrueOrOne","notif","moodlecomponent","hash","isPluginEnabled","site","handleClick","navigateToSitePath","siteId","ignoreErrors","invalidateUserBadges","Number","usertoid","factory","ɵfac","providedIn","AddonBadgesPushClickHandler"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/badges/services/handlers/push-click.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\n\nimport { CoreUtils } from '@services/utils/utils';\nimport { CorePushNotificationsClickHandler } from '@features/pushnotifications/services/push-delegate';\nimport { AddonBadges } from '../badges';\nimport { makeSingleton } from '@singletons';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { CoreNavigator } from '@services/navigator';\n\n/**\n * Handler for badges push notifications clicks.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonBadgesPushClickHandlerService implements CorePushNotificationsClickHandler {\n\n    name = 'AddonBadgesPushClickHandler';\n    priority = 200;\n    featureName = 'CoreUserDelegate_AddonBadges';\n\n    /**\n     * Check if a notification click is handled by this handler.\n     *\n     * @param notification The notification to check.\n     * @returns Whether the notification click is handled by this handler\n     */\n    async handles(notification: CorePushNotificationsNotificationBasicData): Promise<boolean> {\n        const data = notification.customdata || {};\n\n        if (CoreUtils.isTrueOrOne(notification.notif) && notification.moodlecomponent == 'moodle' &&\n                (notification.name == 'badgerecipientnotice' || (notification.name == 'badgecreatornotice' && data.hash))) {\n            return AddonBadges.isPluginEnabled(notification.site);\n        }\n\n        return false;\n    }\n\n    /**\n     * Handle the notification click.\n     *\n     * @param notification The notification to check.\n     * @returns Promise resolved when done.\n     */\n    async handleClick(notification: CorePushNotificationsNotificationBasicData): Promise<void> {\n        const data = notification.customdata || {};\n\n        if (data.hash) {\n            // We have the hash, open the badge directly.\n            await CoreNavigator.navigateToSitePath(`/badges/${data.hash}`, {\n                siteId: notification.site,\n            });\n\n            return;\n        }\n\n        // No hash, open the list of user badges.\n        await CoreUtils.ignoreErrors(\n            AddonBadges.invalidateUserBadges(\n                0,\n                Number(notification.usertoid),\n                notification.site,\n            ),\n        );\n\n        await CoreNavigator.navigateToSitePath('/badges', { siteId: notification.site });\n    }\n\n}\n\nexport const AddonBadgesPushClickHandler = makeSingleton(AddonBadgesPushClickHandlerService);\n"],"mappings":";;AAgBA,SAASA,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,WAAW,QAAQ,WAAW;AACvC,SAASC,aAAa,QAAQ,aAAa;AAE3C,SAASC,aAAa,QAAQ,qBAAqB;;AAEnD;;;AAIA,OAAM,MAAOC,kCAAkC;EAD/CC,YAAA;IAGI,KAAAC,IAAI,GAAG,6BAA6B;IACpC,KAAAC,QAAQ,GAAG,GAAG;IACd,KAAAC,WAAW,GAAG,8BAA8B;;EAE5C;;;;;;EAMMC,OAAOA,CAACC,YAAwD;IAAA,OAAAC,iBAAA;MAClE,MAAMC,IAAI,GAAGF,YAAY,CAACG,UAAU,IAAI,EAAE;MAE1C,IAAIb,SAAS,CAACc,WAAW,CAACJ,YAAY,CAACK,KAAK,CAAC,IAAIL,YAAY,CAACM,eAAe,IAAI,QAAQ,KAChFN,YAAY,CAACJ,IAAI,IAAI,sBAAsB,IAAKI,YAAY,CAACJ,IAAI,IAAI,oBAAoB,IAAIM,IAAI,CAACK,IAAK,CAAC,EAAE;QAC/G,OAAOhB,WAAW,CAACiB,eAAe,CAACR,YAAY,CAACS,IAAI,CAAC;;MAGzD,OAAO,KAAK;IAAC;EACjB;EAEA;;;;;;EAMMC,WAAWA,CAACV,YAAwD;IAAA,OAAAC,iBAAA;MACtE,MAAMC,IAAI,GAAGF,YAAY,CAACG,UAAU,IAAI,EAAE;MAE1C,IAAID,IAAI,CAACK,IAAI,EAAE;QACX;QACA,MAAMd,aAAa,CAACkB,kBAAkB,CAAC,WAAWT,IAAI,CAACK,IAAI,EAAE,EAAE;UAC3DK,MAAM,EAAEZ,YAAY,CAACS;SACxB,CAAC;QAEF;;MAGJ;MACA,MAAMnB,SAAS,CAACuB,YAAY,CACxBtB,WAAW,CAACuB,oBAAoB,CAC5B,CAAC,EACDC,MAAM,CAACf,YAAY,CAACgB,QAAQ,CAAC,EAC7BhB,YAAY,CAACS,IAAI,CACpB,CACJ;MAED,MAAMhB,aAAa,CAACkB,kBAAkB,CAAC,SAAS,EAAE;QAAEC,MAAM,EAAEZ,YAAY,CAACS;MAAI,CAAE,CAAC;IAAC;EACrF;;SAnDSf,kCAAkC;;mBAAlCA,MAAkC;AAAA;;SAAlCA,MAAkC;EAAAuB,OAAA,EAAlCvB,MAAkC,CAAAwB,IAAA;EAAAC,UAAA,EADrB;AAAM;AAwDhC,OAAO,MAAMC,2BAA2B,GAAG5B,aAAa,CAACE,kCAAkC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}