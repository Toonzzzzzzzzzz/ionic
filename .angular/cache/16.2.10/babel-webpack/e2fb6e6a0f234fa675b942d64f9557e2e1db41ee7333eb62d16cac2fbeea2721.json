{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreCourse } from '@features/course/services/course';\nimport { makeSingleton } from '@singletons';\nimport { CoreCourseModuleDelegate } from '@features/course/services/module-delegate';\nimport * as i0 from \"@angular/core\";\nconst ROOT_CACHE_KEY = 'AddonBlockRecentlyAccessedItems:';\n/**\n * Service that provides some features regarding recently accessed items.\n */\nexport class AddonBlockRecentlyAccessedItemsProvider {\n  /**\n   * Get cache key for get last accessed items value WS call.\n   *\n   * @returns Cache key.\n   */\n  getRecentItemsCacheKey() {\n    return ROOT_CACHE_KEY + ':recentitems';\n  }\n  /**\n   * Get last accessed items.\n   *\n   * @param siteId Site ID. If not defined, use current site.\n   * @returns Promise resolved when the info is retrieved.\n   */\n  getRecentItems(siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      const preSets = {\n        cacheKey: _this.getRecentItemsCacheKey()\n      };\n      let items = yield site.read('block_recentlyaccesseditems_get_recent_items', undefined, preSets);\n      const cmIds = [];\n      items = yield Promise.all(items.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (item) {\n          const modicon = item.icon && CoreDomUtils.getHTMLElementAttribute(item.icon, 'src');\n          item.iconUrl = yield CoreCourseModuleDelegate.getModuleIconSrc(item.modname, modicon || undefined);\n          item.iconTitle = item.icon && CoreDomUtils.getHTMLElementAttribute(item.icon, 'title');\n          cmIds.push(item.cmid);\n          return item;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      // Check if the viewed module should be updated for each activity.\n      const lastViewedMap = yield CoreCourse.getCertainModulesViewed(cmIds, site.getId());\n      items.forEach(recentItem => {\n        const timeAccess = recentItem.timeaccess * 1000;\n        const lastViewed = lastViewedMap[recentItem.cmid];\n        if (lastViewed && lastViewed.timeaccess >= timeAccess) {\n          return; // No need to update.\n        }\n        // Update access.\n        CoreCourse.storeModuleViewed(recentItem.courseid, recentItem.cmid, {\n          timeaccess: recentItem.timeaccess * 1000,\n          sectionId: lastViewed && lastViewed.sectionId,\n          siteId: site.getId()\n        });\n      });\n      return items;\n    })();\n  }\n  /**\n   * Invalidates get last accessed items WS call.\n   *\n   * @param siteId Site ID to invalidate. If not defined, use current site.\n   * @returns Promise resolved when the data is invalidated.\n   */\n  invalidateRecentItems(siteId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const site = yield CoreSites.getSite(siteId);\n      yield site.invalidateWsCacheForKey(_this2.getRecentItemsCacheKey());\n    })();\n  }\n}\n_class = AddonBlockRecentlyAccessedItemsProvider;\n_class.ɵfac = function AddonBlockRecentlyAccessedItemsProvider_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonBlockRecentlyAccessedItems = makeSingleton(AddonBlockRecentlyAccessedItemsProvider);","map":{"version":3,"names":["CoreSites","CoreDomUtils","CoreCourse","makeSingleton","CoreCourseModuleDelegate","ROOT_CACHE_KEY","AddonBlockRecentlyAccessedItemsProvider","getRecentItemsCacheKey","getRecentItems","siteId","_this","_asyncToGenerator","site","getSite","preSets","cacheKey","items","read","undefined","cmIds","Promise","all","map","_ref","item","modicon","icon","getHTMLElementAttribute","iconUrl","getModuleIconSrc","modname","iconTitle","push","cmid","_x","apply","arguments","lastViewedMap","getCertainModulesViewed","getId","forEach","recentItem","timeAccess","timeaccess","lastViewed","storeModuleViewed","courseid","sectionId","invalidateRecentItems","_this2","invalidateWsCacheForKey","factory","ɵfac","providedIn","AddonBlockRecentlyAccessedItems"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/block/recentlyaccesseditems/services/recentlyaccesseditems.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreSiteWSPreSets } from '@classes/sites/authenticated-site';\nimport { makeSingleton } from '@singletons';\nimport { CoreCourseModuleDelegate } from '@features/course/services/module-delegate';\n\nconst ROOT_CACHE_KEY = 'AddonBlockRecentlyAccessedItems:';\n\n/**\n * Service that provides some features regarding recently accessed items.\n */\n@Injectable( { providedIn: 'root' })\nexport class AddonBlockRecentlyAccessedItemsProvider {\n\n    /**\n     * Get cache key for get last accessed items value WS call.\n     *\n     * @returns Cache key.\n     */\n    protected getRecentItemsCacheKey(): string {\n        return ROOT_CACHE_KEY + ':recentitems';\n    }\n\n    /**\n     * Get last accessed items.\n     *\n     * @param siteId Site ID. If not defined, use current site.\n     * @returns Promise resolved when the info is retrieved.\n     */\n    async getRecentItems(siteId?: string): Promise<AddonBlockRecentlyAccessedItemsItem[]> {\n        const site = await CoreSites.getSite(siteId);\n\n        const preSets: CoreSiteWSPreSets = {\n            cacheKey: this.getRecentItemsCacheKey(),\n        };\n\n        let items: AddonBlockRecentlyAccessedItemsItem[] =\n            await site.read('block_recentlyaccesseditems_get_recent_items', undefined, preSets);\n\n        const cmIds: number[] = [];\n\n        items = await Promise.all(items.map(async (item) => {\n            const modicon = item.icon && CoreDomUtils.getHTMLElementAttribute(item.icon, 'src');\n\n            item.iconUrl = await CoreCourseModuleDelegate.getModuleIconSrc(item.modname, modicon || undefined);\n            item.iconTitle = item.icon && CoreDomUtils.getHTMLElementAttribute(item.icon, 'title');\n            cmIds.push(item.cmid);\n\n            return item;\n        }));\n\n        // Check if the viewed module should be updated for each activity.\n        const lastViewedMap = await CoreCourse.getCertainModulesViewed(cmIds, site.getId());\n\n        items.forEach((recentItem) => {\n            const timeAccess = recentItem.timeaccess * 1000;\n            const lastViewed = lastViewedMap[recentItem.cmid];\n\n            if (lastViewed && lastViewed.timeaccess >= timeAccess) {\n                return; // No need to update.\n            }\n\n            // Update access.\n            CoreCourse.storeModuleViewed(recentItem.courseid, recentItem.cmid, {\n                timeaccess: recentItem.timeaccess * 1000,\n                sectionId: lastViewed && lastViewed.sectionId,\n                siteId: site.getId(),\n            });\n        });\n\n        return items;\n    }\n\n    /**\n     * Invalidates get last accessed items WS call.\n     *\n     * @param siteId Site ID to invalidate. If not defined, use current site.\n     * @returns Promise resolved when the data is invalidated.\n     */\n    async invalidateRecentItems(siteId?: string): Promise<void> {\n        const site = await CoreSites.getSite(siteId);\n\n        await site.invalidateWsCacheForKey(this.getRecentItemsCacheKey());\n    }\n\n}\nexport const AddonBlockRecentlyAccessedItems = makeSingleton(AddonBlockRecentlyAccessedItemsProvider);\n\n/**\n * Result of WS block_recentlyaccesseditems_get_recent_items.\n *\n * The most recently accessed activities/resources by the logged user.\n */\nexport type AddonBlockRecentlyAccessedItemsItem = {\n    id: number; // Id.\n    courseid: number; // Courseid.\n    cmid: number; // Cmid.\n    userid: number; // Userid.\n    modname: string; // Modname.\n    name: string; // Name.\n    coursename: string; // Coursename.\n    timeaccess: number; // Timeaccess.\n    viewurl: string; // Viewurl.\n    courseviewurl: string; // Courseviewurl.\n    icon: string; // Icon.\n    purpose?: string; // Purpose. @since 4.0\n} & AddonBlockRecentlyAccessedItemsItemCalculatedData;\n\n/**\n * Calculated data for recently accessed item.\n */\nexport type AddonBlockRecentlyAccessedItemsItemCalculatedData = {\n    iconUrl: string; // Icon URL. Calculated by the app.\n    iconTitle?: string | null; // Icon title.\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}