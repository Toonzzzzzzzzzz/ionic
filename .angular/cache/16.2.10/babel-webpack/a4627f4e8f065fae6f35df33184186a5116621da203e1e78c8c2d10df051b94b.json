{"ast":null,"code":"var _class;\nimport { PopoverController } from '@singletons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../../../../core/directives/content\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@ngx-translate/core\";\nfunction AddonModGlossaryModePickerPopoverComponent_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 2)(1, \"ion-label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"ion-radio\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const mode_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, mode_r1.langkey));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", mode_r1.key);\n  }\n}\n/**\n * Component to display the mode picker.\n */\nexport class AddonModGlossaryModePickerPopoverComponent {\n  constructor() {\n    this.browseModes = [];\n    this.selectedMode = '';\n    this.modes = [];\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    this.browseModes.forEach(mode => {\n      switch (mode) {\n        case 'letter':\n          this.modes.push({\n            key: 'letter_all',\n            langkey: 'addon.mod_glossary.byalphabet'\n          });\n          break;\n        case 'cat':\n          this.modes.push({\n            key: 'cat_all',\n            langkey: 'addon.mod_glossary.bycategory'\n          });\n          break;\n        case 'date':\n          this.modes.push({\n            key: 'newest_first',\n            langkey: 'addon.mod_glossary.bynewestfirst'\n          });\n          this.modes.push({\n            key: 'recently_updated',\n            langkey: 'addon.mod_glossary.byrecentlyupdated'\n          });\n          break;\n        case 'author':\n          this.modes.push({\n            key: 'author_all',\n            langkey: 'addon.mod_glossary.byauthor'\n          });\n          break;\n        default:\n      }\n    });\n  }\n  /**\n   * Function called when a mode is clicked.\n   */\n  modePicked() {\n    PopoverController.dismiss(this.selectedMode);\n  }\n}\n_class = AddonModGlossaryModePickerPopoverComponent;\n_class.ɵfac = function AddonModGlossaryModePickerPopoverComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"addon-mod-glossary-mode-picker-popover\"]],\n  inputs: {\n    browseModes: \"browseModes\",\n    selectedMode: \"selectedMode\"\n  },\n  decls: 3,\n  vars: 2,\n  consts: [[3, \"ngModel\", \"ngModelChange\", \"ionChange\"], [\"class\", \"ion-text-wrap\", 4, \"ngFor\", \"ngForOf\"], [1, \"ion-text-wrap\"], [\"slot\", \"end\", 3, \"value\"]],\n  template: function AddonModGlossaryModePickerPopoverComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-content\")(1, \"ion-radio-group\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function AddonModGlossaryModePickerPopoverComponent_Template_ion_radio_group_ngModelChange_1_listener($event) {\n        return ctx.selectedMode = $event;\n      })(\"ionChange\", function AddonModGlossaryModePickerPopoverComponent_Template_ion_radio_group_ionChange_1_listener() {\n        return ctx.modePicked();\n      });\n      i0.ɵɵtemplate(2, AddonModGlossaryModePickerPopoverComponent_ion_item_2_Template, 5, 4, \"ion-item\", 1);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedMode);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.modes);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.CoreContentDirective, i3.NgControlStatus, i3.NgModel, i4.IonContent, i4.IonItem, i4.IonLabel, i4.IonRadio, i4.IonRadioGroup, i4.RadioValueAccessor, i4.SelectValueAccessor, i5.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["PopoverController","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","mode_r1","langkey","ɵɵproperty","key","AddonModGlossaryModePickerPopoverComponent","constructor","browseModes","selectedMode","modes","ngOnInit","forEach","mode","push","modePicked","dismiss","selectors","inputs","decls","vars","consts","template","AddonModGlossaryModePickerPopoverComponent_Template","rf","ctx","ɵɵlistener","AddonModGlossaryModePickerPopoverComponent_Template_ion_radio_group_ngModelChange_1_listener","$event","AddonModGlossaryModePickerPopoverComponent_Template_ion_radio_group_ionChange_1_listener","ɵɵtemplate","AddonModGlossaryModePickerPopoverComponent_ion_item_2_Template"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/components/mode-picker/mode-picker.ts","/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/glossary/components/mode-picker/addon-mod-glossary-mode-picker.html"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { PopoverController } from '@singletons';\nimport { AddonModGlossaryFetchMode } from '../../classes/glossary-entries-source';\n\n/**\n * Component to display the mode picker.\n */\n@Component({\n    selector: 'addon-mod-glossary-mode-picker-popover',\n    templateUrl: 'addon-mod-glossary-mode-picker.html',\n})\nexport class AddonModGlossaryModePickerPopoverComponent implements OnInit {\n\n    @Input() browseModes: string[] = [];\n    @Input() selectedMode = '';\n\n    modes: { key: AddonModGlossaryFetchMode; langkey: string }[] = [];\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.browseModes.forEach((mode) => {\n            switch (mode) {\n                case 'letter' :\n                    this.modes.push({ key: 'letter_all', langkey: 'addon.mod_glossary.byalphabet' });\n                    break;\n                case 'cat' :\n                    this.modes.push({ key: 'cat_all', langkey: 'addon.mod_glossary.bycategory' });\n                    break;\n                case 'date' :\n                    this.modes.push({ key: 'newest_first', langkey: 'addon.mod_glossary.bynewestfirst' });\n                    this.modes.push({ key: 'recently_updated', langkey: 'addon.mod_glossary.byrecentlyupdated' });\n                    break;\n                case 'author' :\n                    this.modes.push({ key: 'author_all', langkey: 'addon.mod_glossary.byauthor' });\n                    break;\n                default:\n            }\n        });\n    }\n\n    /**\n     * Function called when a mode is clicked.\n     */\n    modePicked(): void {\n        PopoverController.dismiss(this.selectedMode);\n    }\n\n}\n","<ion-content>\n    <ion-radio-group [(ngModel)]=\"selectedMode\" (ionChange)=\"modePicked()\">\n        <ion-item class=\"ion-text-wrap\" *ngFor=\"let mode of modes\">\n            <ion-label>{{ mode.langkey | translate }}</ion-label>\n            <ion-radio slot=\"end\" [value]=\"mode.key\" />\n        </ion-item>\n    </ion-radio-group>\n</ion-content>\n"],"mappings":";AAeA,SAASA,iBAAiB,QAAQ,aAAa;;;;;;;;;ICbvCC,EAAA,CAAAC,cAAA,kBAA2D;IAC5CD,EAAA,CAAAE,MAAA,GAA8B;;IAAAF,EAAA,CAAAG,YAAA,EAAY;IACrDH,EAAA,CAAAI,SAAA,mBAA2C;IAC/CJ,EAAA,CAAAG,YAAA,EAAW;;;;IAFIH,EAAA,CAAAK,SAAA,GAA8B;IAA9BL,EAAA,CAAAM,iBAAA,CAAAN,EAAA,CAAAO,WAAA,OAAAC,OAAA,CAAAC,OAAA,EAA8B;IACnBT,EAAA,CAAAK,SAAA,GAAkB;IAAlBL,EAAA,CAAAU,UAAA,UAAAF,OAAA,CAAAG,GAAA,CAAkB;;;ADcpD;;;AAOA,OAAM,MAAOC,0CAA0C;EAJvDC,YAAA;IAMa,KAAAC,WAAW,GAAa,EAAE;IAC1B,KAAAC,YAAY,GAAG,EAAE;IAE1B,KAAAC,KAAK,GAA0D,EAAE;;EAEjE;;;EAGAC,QAAQA,CAAA;IACJ,IAAI,CAACH,WAAW,CAACI,OAAO,CAAEC,IAAI,IAAI;MAC9B,QAAQA,IAAI;QACR,KAAK,QAAQ;UACT,IAAI,CAACH,KAAK,CAACI,IAAI,CAAC;YAAET,GAAG,EAAE,YAAY;YAAEF,OAAO,EAAE;UAA+B,CAAE,CAAC;UAChF;QACJ,KAAK,KAAK;UACN,IAAI,CAACO,KAAK,CAACI,IAAI,CAAC;YAAET,GAAG,EAAE,SAAS;YAAEF,OAAO,EAAE;UAA+B,CAAE,CAAC;UAC7E;QACJ,KAAK,MAAM;UACP,IAAI,CAACO,KAAK,CAACI,IAAI,CAAC;YAAET,GAAG,EAAE,cAAc;YAAEF,OAAO,EAAE;UAAkC,CAAE,CAAC;UACrF,IAAI,CAACO,KAAK,CAACI,IAAI,CAAC;YAAET,GAAG,EAAE,kBAAkB;YAAEF,OAAO,EAAE;UAAsC,CAAE,CAAC;UAC7F;QACJ,KAAK,QAAQ;UACT,IAAI,CAACO,KAAK,CAACI,IAAI,CAAC;YAAET,GAAG,EAAE,YAAY;YAAEF,OAAO,EAAE;UAA6B,CAAE,CAAC;UAC9E;QACJ;;IAER,CAAC,CAAC;EACN;EAEA;;;EAGAY,UAAUA,CAAA;IACNtB,iBAAiB,CAACuB,OAAO,CAAC,IAAI,CAACP,YAAY,CAAC;EAChD;;SApCSH,0CAA0C;;mBAA1CA,MAA0C;AAAA;;QAA1CA,MAA0C;EAAAW,SAAA;EAAAC,MAAA;IAAAV,WAAA;IAAAC,YAAA;EAAA;EAAAU,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,oDAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCzBvD9B,EAAA,CAAAC,cAAA,kBAAa;MACQD,EAAA,CAAAgC,UAAA,2BAAAC,6FAAAC,MAAA;QAAA,OAAAH,GAAA,CAAAhB,YAAA,GAAAmB,MAAA;MAAA,EAA0B,uBAAAC,yFAAA;QAAA,OAAcJ,GAAA,CAAAV,UAAA,EAAY;MAAA,EAA1B;MACvCrB,EAAA,CAAAoC,UAAA,IAAAC,8DAAA,sBAGW;MACfrC,EAAA,CAAAG,YAAA,EAAkB;;;MALDH,EAAA,CAAAK,SAAA,GAA0B;MAA1BL,EAAA,CAAAU,UAAA,YAAAqB,GAAA,CAAAhB,YAAA,CAA0B;MACUf,EAAA,CAAAK,SAAA,GAAQ;MAARL,EAAA,CAAAU,UAAA,YAAAqB,GAAA,CAAAf,KAAA,CAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}