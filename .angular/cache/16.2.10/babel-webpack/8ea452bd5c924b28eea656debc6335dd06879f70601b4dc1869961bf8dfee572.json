{"ast":null,"code":"var _class;\nimport { CorePlatform } from '@services/platform';\nimport { Network } from '@awesome-cordova-plugins/network/ngx';\nimport { makeSingleton } from '@singletons';\nimport { Subject, merge } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var CoreNetworkConnection;\n(function (CoreNetworkConnection) {\n  CoreNetworkConnection[\"UNKNOWN\"] = \"unknown\";\n  CoreNetworkConnection[\"ETHERNET\"] = \"ethernet\";\n  CoreNetworkConnection[\"WIFI\"] = \"wifi\";\n  CoreNetworkConnection[\"CELL_2G\"] = \"2g\";\n  CoreNetworkConnection[\"CELL_3G\"] = \"3g\";\n  CoreNetworkConnection[\"CELL_4G\"] = \"4g\";\n  CoreNetworkConnection[\"CELL\"] = \"cellular\";\n  CoreNetworkConnection[\"NONE\"] = \"none\";\n})(CoreNetworkConnection || (CoreNetworkConnection = {}));\n/**\n * Service to manage network connections.\n */\nexport class CoreNetworkService extends Network {\n  constructor() {\n    super(...arguments);\n    this.connectObservable = new Subject();\n    this.connectStableObservable = new Subject();\n    this.disconnectObservable = new Subject();\n    this.online = false;\n  }\n  get connectionType() {\n    if (this.forceConnectionMode !== undefined) {\n      return this.forceConnectionMode;\n    }\n    if (CorePlatform.isMobile()) {\n      return this.type;\n    }\n    return this.online ? CoreNetworkConnection.WIFI : CoreNetworkConnection.NONE;\n  }\n  /**\n   * Initialize the service.\n   */\n  initialize() {\n    this.checkOnline();\n    if (CorePlatform.isMobile()) {\n      // We cannot directly listen to onChange because it depends on\n      // onConnect and onDisconnect that have been already overriden.\n      super.onConnect().subscribe(() => {\n        this.fireObservable();\n      });\n      super.onDisconnect().subscribe(() => {\n        this.fireObservable();\n      });\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.Connection = {\n        UNKNOWN: CoreNetworkConnection.UNKNOWN,\n        ETHERNET: CoreNetworkConnection.ETHERNET,\n        WIFI: CoreNetworkConnection.WIFI,\n        CELL_2G: CoreNetworkConnection.CELL_2G,\n        CELL_3G: CoreNetworkConnection.CELL_3G,\n        CELL_4G: CoreNetworkConnection.CELL_4G,\n        CELL: CoreNetworkConnection.CELL,\n        NONE: CoreNetworkConnection.NONE // eslint-disable-line @typescript-eslint/naming-convention\n      };\n\n      window.addEventListener('online', () => {\n        this.fireObservable();\n      }, false);\n      window.addEventListener('offline', () => {\n        this.fireObservable();\n      }, false);\n    }\n  }\n  /**\n   * Set value of forceConnectionMode flag.\n   * The app will think the device is offline or limited connection.\n   *\n   * @param value Value to set.\n   */\n  setForceConnectionMode(value) {\n    this.forceConnectionMode = value;\n    this.fireObservable();\n  }\n  /**\n   * Returns whether we are online.\n   *\n   * @returns Whether the app is online.\n   */\n  isOnline() {\n    return this.online;\n  }\n  /**\n   * Returns whether we are online.\n   */\n  checkOnline() {\n    if (this.forceConnectionMode === CoreNetworkConnection.NONE) {\n      this.online = false;\n      return;\n    }\n    const type = this.connectionType;\n    let online = type !== null && type !== CoreNetworkConnection.NONE && type !== CoreNetworkConnection.UNKNOWN;\n    // Double check we are not online because we cannot rely 100% in Cordova APIs.\n    if (!online && navigator.onLine) {\n      online = true;\n    }\n    this.online = online;\n  }\n  /**\n   * Returns an observable to watch connection changes.\n   *\n   * @returns Observable.\n   */\n  onChange() {\n    return merge(this.connectObservable, this.disconnectObservable);\n  }\n  /**\n   * Returns an observable to notify when the app is connected.\n   * It will also be fired when connection type changes.\n   * If you're going to perform network requests once the device is connected, please use onConnectShouldBeStable instead.\n   *\n   * @returns Observable.\n   */\n  onConnect() {\n    return this.connectObservable;\n  }\n  /**\n   * Returns an observable to notify when the app is connected and it should already be a stable a connection.\n   * E.g. when leaving flight mode the device could connect to mobile network first and then to WiFi.\n   * If you're going to perform network requests once the device is connected, it's recommended to use this function instead of\n   * onConnect because some OS (e.g. Android) duplicate a request if the type of connection changes while the request is done.\n   *\n   * @returns Observable.\n   */\n  onConnectShouldBeStable() {\n    return this.connectStableObservable;\n  }\n  /**\n   * Returns an observable to notify when the app is disconnected.\n   *\n   * @returns Observable.\n   */\n  onDisconnect() {\n    return this.disconnectObservable;\n  }\n  /**\n   * Fires the correct observable depending on the connection status.\n   */\n  fireObservable() {\n    clearTimeout(this.connectStableTimeout);\n    this.checkOnline();\n    if (this.online) {\n      this.connectObservable.next('connected');\n      this.connectStableTimeout = window.setTimeout(() => {\n        this.connectStableObservable.next('connected');\n      }, 5000);\n    } else {\n      this.disconnectObservable.next('disconnected');\n    }\n  }\n  /**\n   * Check if device uses a limited connection.\n   *\n   * @returns Whether the device uses a limited connection.\n   */\n  isNetworkAccessLimited() {\n    const limited = [CoreNetworkConnection.CELL_2G, CoreNetworkConnection.CELL_3G, CoreNetworkConnection.CELL_4G, CoreNetworkConnection.CELL];\n    const type = this.connectionType;\n    return limited.indexOf(type) > -1;\n  }\n  /**\n   * Check if device uses a wifi connection.\n   *\n   * @returns Whether the device uses a wifi connection.\n   */\n  isWifi() {\n    return this.isOnline() && !this.isNetworkAccessLimited();\n  }\n}\n_class = CoreNetworkService;\n_class.ɵfac = /*@__PURE__*/function () {\n  let ɵCoreNetworkService_BaseFactory;\n  return function CoreNetworkService_Factory(t) {\n    return (ɵCoreNetworkService_BaseFactory || (ɵCoreNetworkService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n  };\n}();\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const CoreNetwork = makeSingleton(CoreNetworkService);","map":{"version":3,"names":["CorePlatform","Network","makeSingleton","Subject","merge","CoreNetworkConnection","CoreNetworkService","constructor","connectObservable","connectStableObservable","disconnectObservable","online","connectionType","forceConnectionMode","undefined","isMobile","type","WIFI","NONE","initialize","checkOnline","onConnect","subscribe","fireObservable","onDisconnect","window","Connection","UNKNOWN","ETHERNET","CELL_2G","CELL_3G","CELL_4G","CELL","addEventListener","setForceConnectionMode","value","isOnline","navigator","onLine","onChange","onConnectShouldBeStable","clearTimeout","connectStableTimeout","next","setTimeout","isNetworkAccessLimited","limited","indexOf","isWifi","t","factory","ɵfac","providedIn","CoreNetwork"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/services/network.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CorePlatform } from '@services/platform';\nimport { Network } from '@awesome-cordova-plugins/network/ngx';\nimport { makeSingleton } from '@singletons';\nimport { Observable, Subject, merge } from 'rxjs';\n\nexport enum CoreNetworkConnection {\n    UNKNOWN = 'unknown',\n    ETHERNET = 'ethernet',\n    WIFI = 'wifi',\n    CELL_2G = '2g',\n    CELL_3G = '3g',\n    CELL_4G = '4g',\n    CELL = 'cellular',\n    NONE = 'none',\n}\n\n/**\n * Service to manage network connections.\n */\n@Injectable({ providedIn: 'root' })\nexport class CoreNetworkService extends Network {\n\n    type!: string;\n\n    protected connectObservable = new Subject<'connected'>();\n    protected connectStableObservable = new Subject<'connected'>();\n    protected disconnectObservable = new Subject<'disconnected'>();\n    protected forceConnectionMode?: CoreNetworkConnection;\n    protected online = false;\n    protected connectStableTimeout?: number;\n\n    get connectionType(): CoreNetworkConnection {\n        if (this.forceConnectionMode !== undefined) {\n            return this.forceConnectionMode;\n        }\n\n        if (CorePlatform.isMobile()) {\n            return this.type as CoreNetworkConnection;\n        }\n\n        return  this.online ? CoreNetworkConnection.WIFI : CoreNetworkConnection.NONE;\n    }\n\n    /**\n     * Initialize the service.\n     */\n    initialize(): void {\n        this.checkOnline();\n\n        if (CorePlatform.isMobile()) {\n            // We cannot directly listen to onChange because it depends on\n            // onConnect and onDisconnect that have been already overriden.\n            super.onConnect().subscribe(() => {\n                this.fireObservable();\n            });\n            super.onDisconnect().subscribe(() => {\n                this.fireObservable();\n            });\n        } else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (<any> window).Connection = {\n                UNKNOWN: CoreNetworkConnection.UNKNOWN, // eslint-disable-line @typescript-eslint/naming-convention\n                ETHERNET: CoreNetworkConnection.ETHERNET, // eslint-disable-line @typescript-eslint/naming-convention\n                WIFI: CoreNetworkConnection.WIFI, // eslint-disable-line @typescript-eslint/naming-convention\n                CELL_2G: CoreNetworkConnection.CELL_2G, // eslint-disable-line @typescript-eslint/naming-convention\n                CELL_3G: CoreNetworkConnection.CELL_3G, // eslint-disable-line @typescript-eslint/naming-convention\n                CELL_4G: CoreNetworkConnection.CELL_4G, // eslint-disable-line @typescript-eslint/naming-convention\n                CELL: CoreNetworkConnection.CELL, // eslint-disable-line @typescript-eslint/naming-convention\n                NONE: CoreNetworkConnection.NONE, // eslint-disable-line @typescript-eslint/naming-convention\n            };\n\n            window.addEventListener('online', () => {\n                this.fireObservable();\n            }, false);\n\n            window.addEventListener('offline', () => {\n                this.fireObservable();\n            }, false);\n        }\n    }\n\n    /**\n     * Set value of forceConnectionMode flag.\n     * The app will think the device is offline or limited connection.\n     *\n     * @param value Value to set.\n     */\n    setForceConnectionMode(value: CoreNetworkConnection): void {\n        this.forceConnectionMode = value;\n        this.fireObservable();\n    }\n\n    /**\n     * Returns whether we are online.\n     *\n     * @returns Whether the app is online.\n     */\n    isOnline(): boolean {\n        return this.online;\n    }\n\n    /**\n     * Returns whether we are online.\n     */\n    checkOnline(): void {\n        if (this.forceConnectionMode === CoreNetworkConnection.NONE) {\n            this.online = false;\n\n            return;\n        }\n\n        const type = this.connectionType;\n\n        let online = type !== null && type !== CoreNetworkConnection.NONE && type !== CoreNetworkConnection.UNKNOWN;\n\n        // Double check we are not online because we cannot rely 100% in Cordova APIs.\n        if (!online && navigator.onLine) {\n            online = true;\n        }\n\n        this.online = online;\n    }\n\n    /**\n     * Returns an observable to watch connection changes.\n     *\n     * @returns Observable.\n     */\n    onChange(): Observable<'connected' | 'disconnected'> {\n        return merge(this.connectObservable, this.disconnectObservable);\n    }\n\n    /**\n     * Returns an observable to notify when the app is connected.\n     * It will also be fired when connection type changes.\n     * If you're going to perform network requests once the device is connected, please use onConnectShouldBeStable instead.\n     *\n     * @returns Observable.\n     */\n    onConnect(): Observable<'connected'> {\n        return this.connectObservable;\n    }\n\n    /**\n     * Returns an observable to notify when the app is connected and it should already be a stable a connection.\n     * E.g. when leaving flight mode the device could connect to mobile network first and then to WiFi.\n     * If you're going to perform network requests once the device is connected, it's recommended to use this function instead of\n     * onConnect because some OS (e.g. Android) duplicate a request if the type of connection changes while the request is done.\n     *\n     * @returns Observable.\n     */\n    onConnectShouldBeStable(): Observable<'connected'> {\n        return this.connectStableObservable;\n    }\n\n    /**\n     * Returns an observable to notify when the app is disconnected.\n     *\n     * @returns Observable.\n     */\n    onDisconnect(): Observable<'disconnected'> {\n        return this.disconnectObservable;\n    }\n\n    /**\n     * Fires the correct observable depending on the connection status.\n     */\n    protected fireObservable(): void {\n        clearTimeout(this.connectStableTimeout);\n        this.checkOnline();\n\n        if (this.online) {\n            this.connectObservable.next('connected');\n            this.connectStableTimeout = window.setTimeout(() => {\n                this.connectStableObservable.next('connected');\n            }, 5000);\n        } else {\n            this.disconnectObservable.next('disconnected');\n        }\n    }\n\n    /**\n     * Check if device uses a limited connection.\n     *\n     * @returns Whether the device uses a limited connection.\n     */\n    isNetworkAccessLimited(): boolean {\n        const limited: CoreNetworkConnection[] = [\n            CoreNetworkConnection.CELL_2G,\n            CoreNetworkConnection.CELL_3G,\n            CoreNetworkConnection.CELL_4G,\n            CoreNetworkConnection.CELL,\n        ];\n\n        const type = this.connectionType;\n\n        return limited.indexOf(type) > -1;\n    }\n\n    /**\n     * Check if device uses a wifi connection.\n     *\n     * @returns Whether the device uses a wifi connection.\n     */\n    isWifi(): boolean {\n        return this.isOnline() && !this.isNetworkAccessLimited();\n    }\n\n}\n\nexport const CoreNetwork = makeSingleton(CoreNetworkService);\n"],"mappings":";AAeA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,OAAO,QAAQ,sCAAsC;AAC9D,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAAqBC,OAAO,EAAEC,KAAK,QAAQ,MAAM;;AAEjD,WAAYC,qBASX;AATD,WAAYA,qBAAqB;EAC7BA,qBAAA,uBAAmB;EACnBA,qBAAA,yBAAqB;EACrBA,qBAAA,iBAAa;EACbA,qBAAA,kBAAc;EACdA,qBAAA,kBAAc;EACdA,qBAAA,kBAAc;EACdA,qBAAA,qBAAiB;EACjBA,qBAAA,iBAAa;AACjB,CAAC,EATWA,qBAAqB,KAArBA,qBAAqB;AAWjC;;;AAIA,OAAM,MAAOC,kBAAmB,SAAQL,OAAO;EAD/CM,YAAA;;IAKc,KAAAC,iBAAiB,GAAG,IAAIL,OAAO,EAAe;IAC9C,KAAAM,uBAAuB,GAAG,IAAIN,OAAO,EAAe;IACpD,KAAAO,oBAAoB,GAAG,IAAIP,OAAO,EAAkB;IAEpD,KAAAQ,MAAM,GAAG,KAAK;;EAGxB,IAAIC,cAAcA,CAAA;IACd,IAAI,IAAI,CAACC,mBAAmB,KAAKC,SAAS,EAAE;MACxC,OAAO,IAAI,CAACD,mBAAmB;;IAGnC,IAAIb,YAAY,CAACe,QAAQ,EAAE,EAAE;MACzB,OAAO,IAAI,CAACC,IAA6B;;IAG7C,OAAQ,IAAI,CAACL,MAAM,GAAGN,qBAAqB,CAACY,IAAI,GAAGZ,qBAAqB,CAACa,IAAI;EACjF;EAEA;;;EAGAC,UAAUA,CAAA;IACN,IAAI,CAACC,WAAW,EAAE;IAElB,IAAIpB,YAAY,CAACe,QAAQ,EAAE,EAAE;MACzB;MACA;MACA,KAAK,CAACM,SAAS,EAAE,CAACC,SAAS,CAAC,MAAK;QAC7B,IAAI,CAACC,cAAc,EAAE;MACzB,CAAC,CAAC;MACF,KAAK,CAACC,YAAY,EAAE,CAACF,SAAS,CAAC,MAAK;QAChC,IAAI,CAACC,cAAc,EAAE;MACzB,CAAC,CAAC;KACL,MAAM;MACH;MACOE,MAAO,CAACC,UAAU,GAAG;QACxBC,OAAO,EAAEtB,qBAAqB,CAACsB,OAAO;QACtCC,QAAQ,EAAEvB,qBAAqB,CAACuB,QAAQ;QACxCX,IAAI,EAAEZ,qBAAqB,CAACY,IAAI;QAChCY,OAAO,EAAExB,qBAAqB,CAACwB,OAAO;QACtCC,OAAO,EAAEzB,qBAAqB,CAACyB,OAAO;QACtCC,OAAO,EAAE1B,qBAAqB,CAAC0B,OAAO;QACtCC,IAAI,EAAE3B,qBAAqB,CAAC2B,IAAI;QAChCd,IAAI,EAAEb,qBAAqB,CAACa,IAAI,CAAE;OACrC;;MAEDO,MAAM,CAACQ,gBAAgB,CAAC,QAAQ,EAAE,MAAK;QACnC,IAAI,CAACV,cAAc,EAAE;MACzB,CAAC,EAAE,KAAK,CAAC;MAETE,MAAM,CAACQ,gBAAgB,CAAC,SAAS,EAAE,MAAK;QACpC,IAAI,CAACV,cAAc,EAAE;MACzB,CAAC,EAAE,KAAK,CAAC;;EAEjB;EAEA;;;;;;EAMAW,sBAAsBA,CAACC,KAA4B;IAC/C,IAAI,CAACtB,mBAAmB,GAAGsB,KAAK;IAChC,IAAI,CAACZ,cAAc,EAAE;EACzB;EAEA;;;;;EAKAa,QAAQA,CAAA;IACJ,OAAO,IAAI,CAACzB,MAAM;EACtB;EAEA;;;EAGAS,WAAWA,CAAA;IACP,IAAI,IAAI,CAACP,mBAAmB,KAAKR,qBAAqB,CAACa,IAAI,EAAE;MACzD,IAAI,CAACP,MAAM,GAAG,KAAK;MAEnB;;IAGJ,MAAMK,IAAI,GAAG,IAAI,CAACJ,cAAc;IAEhC,IAAID,MAAM,GAAGK,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKX,qBAAqB,CAACa,IAAI,IAAIF,IAAI,KAAKX,qBAAqB,CAACsB,OAAO;IAE3G;IACA,IAAI,CAAChB,MAAM,IAAI0B,SAAS,CAACC,MAAM,EAAE;MAC7B3B,MAAM,GAAG,IAAI;;IAGjB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EAEA;;;;;EAKA4B,QAAQA,CAAA;IACJ,OAAOnC,KAAK,CAAC,IAAI,CAACI,iBAAiB,EAAE,IAAI,CAACE,oBAAoB,CAAC;EACnE;EAEA;;;;;;;EAOAW,SAASA,CAAA;IACL,OAAO,IAAI,CAACb,iBAAiB;EACjC;EAEA;;;;;;;;EAQAgC,uBAAuBA,CAAA;IACnB,OAAO,IAAI,CAAC/B,uBAAuB;EACvC;EAEA;;;;;EAKAe,YAAYA,CAAA;IACR,OAAO,IAAI,CAACd,oBAAoB;EACpC;EAEA;;;EAGUa,cAAcA,CAAA;IACpBkB,YAAY,CAAC,IAAI,CAACC,oBAAoB,CAAC;IACvC,IAAI,CAACtB,WAAW,EAAE;IAElB,IAAI,IAAI,CAACT,MAAM,EAAE;MACb,IAAI,CAACH,iBAAiB,CAACmC,IAAI,CAAC,WAAW,CAAC;MACxC,IAAI,CAACD,oBAAoB,GAAGjB,MAAM,CAACmB,UAAU,CAAC,MAAK;QAC/C,IAAI,CAACnC,uBAAuB,CAACkC,IAAI,CAAC,WAAW,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;KACX,MAAM;MACH,IAAI,CAACjC,oBAAoB,CAACiC,IAAI,CAAC,cAAc,CAAC;;EAEtD;EAEA;;;;;EAKAE,sBAAsBA,CAAA;IAClB,MAAMC,OAAO,GAA4B,CACrCzC,qBAAqB,CAACwB,OAAO,EAC7BxB,qBAAqB,CAACyB,OAAO,EAC7BzB,qBAAqB,CAAC0B,OAAO,EAC7B1B,qBAAqB,CAAC2B,IAAI,CAC7B;IAED,MAAMhB,IAAI,GAAG,IAAI,CAACJ,cAAc;IAEhC,OAAOkC,OAAO,CAACC,OAAO,CAAC/B,IAAI,CAAC,GAAG,CAAC,CAAC;EACrC;EAEA;;;;;EAKAgC,MAAMA,CAAA;IACF,OAAO,IAAI,CAACZ,QAAQ,EAAE,IAAI,CAAC,IAAI,CAACS,sBAAsB,EAAE;EAC5D;;SA1LSvC,kBAAmB;;;;2GAAnBA,MAAkB,IAAA2C,CAAA,IAAlB3C,MAAkB;EAAA;AAAA;;SAAlBA,MAAkB;EAAA4C,OAAA,EAAlB5C,MAAkB,CAAA6C,IAAA;EAAAC,UAAA,EADL;AAAM;AA+LhC,OAAO,MAAMC,WAAW,GAAGnD,aAAa,CAACI,kBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}