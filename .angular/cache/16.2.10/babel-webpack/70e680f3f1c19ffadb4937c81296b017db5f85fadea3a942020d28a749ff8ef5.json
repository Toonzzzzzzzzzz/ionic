{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport { CoreUtils } from '@services/utils/utils';\nimport * as i0 from \"@angular/core\";\n/**\n * Directive to listen for element resize events.\n */\nexport class CoreOnResizeDirective {\n  constructor(element) {\n    this.onResize = new EventEmitter();\n    this.element = element.nativeElement;\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnInit() {\n    'ResizeObserver' in window ? this.watchResize() : this.watchMutations();\n  }\n  /**\n   * @inheritdoc\n   */\n  ngOnDestroy() {\n    var _this$resizeObserver, _this$mutationObserve;\n    (_this$resizeObserver = this.resizeObserver) === null || _this$resizeObserver === void 0 || _this$resizeObserver.disconnect();\n    (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.disconnect();\n  }\n  /**\n   * Watch resize events.\n   */\n  watchResize() {\n    this.resizeObserver = new ResizeObserver(() => this.onResize.emit());\n    this.resizeObserver.observe(this.element);\n  }\n  /**\n   * Watch mutation events to detect resizing.\n   */\n  watchMutations() {\n    let size = this.getElementSize();\n    const onMutation = () => {\n      const newSize = this.getElementSize();\n      if (newSize.width !== size.width || newSize.height !== size.height) {\n        size = newSize;\n        this.onResize.emit();\n      }\n    };\n    // Debounce 20ms to let mutations resolve before checking the new size.\n    this.mutationObserver = new MutationObserver(CoreUtils.debounce(onMutation, 20));\n    this.mutationObserver.observe(this.element, {\n      subtree: true,\n      childList: true,\n      characterData: true\n    });\n  }\n  /**\n   * Get element size.\n   *\n   * @returns Element size.\n   */\n  getElementSize() {\n    return {\n      width: this.element.clientWidth,\n      height: this.element.clientHeight\n    };\n  }\n}\n_class = CoreOnResizeDirective;\n_class.ɵfac = function CoreOnResizeDirective_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"\", \"onResize\", \"\"]],\n  outputs: {\n    onResize: \"onResize\"\n  }\n});","map":{"version":3,"names":["EventEmitter","CoreUtils","CoreOnResizeDirective","constructor","element","onResize","nativeElement","ngOnInit","window","watchResize","watchMutations","ngOnDestroy","_this$resizeObserver","_this$mutationObserve","resizeObserver","disconnect","mutationObserver","ResizeObserver","emit","observe","size","getElementSize","onMutation","newSize","width","height","MutationObserver","debounce","subtree","childList","characterData","clientWidth","clientHeight","i0","ɵɵdirectiveInject","ElementRef","selectors","outputs"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/directives/on-resize.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Directive, ElementRef, OnInit, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { CoreUtils } from '@services/utils/utils';\n\n/**\n * Directive to listen for element resize events.\n */\n@Directive({\n    selector: '[onResize]',\n})\nexport class CoreOnResizeDirective implements OnInit, OnDestroy {\n\n    @Output() onResize = new EventEmitter();\n\n    private element: HTMLElement;\n    private resizeObserver?: ResizeObserver;\n    private mutationObserver?: MutationObserver;\n\n    constructor(element: ElementRef) {\n        this.element = element.nativeElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        'ResizeObserver' in window\n            ? this.watchResize()\n            : this.watchMutations();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.resizeObserver?.disconnect();\n        this.mutationObserver?.disconnect();\n    }\n\n    /**\n     * Watch resize events.\n     */\n    private watchResize(): void {\n        this.resizeObserver = new ResizeObserver(() => this.onResize.emit());\n\n        this.resizeObserver.observe(this.element);\n    }\n\n    /**\n     * Watch mutation events to detect resizing.\n     */\n    private watchMutations(): void {\n        let size = this.getElementSize();\n        const onMutation = () => {\n            const newSize = this.getElementSize();\n\n            if (newSize.width !== size.width || newSize.height !== size.height) {\n                size = newSize;\n\n                this.onResize.emit();\n            }\n        };\n\n        // Debounce 20ms to let mutations resolve before checking the new size.\n        this.mutationObserver = new MutationObserver(CoreUtils.debounce(onMutation, 20));\n\n        this.mutationObserver.observe(this.element, {\n            subtree: true,\n            childList: true,\n            characterData: true,\n        });\n    }\n\n    /**\n     * Get element size.\n     *\n     * @returns Element size.\n     */\n    private getElementSize(): { width: number; height: number } {\n        return {\n            width: this.element.clientWidth,\n            height: this.element.clientHeight,\n        };\n    }\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAgDA,YAAY,QAAmB,eAAe;AAC9F,SAASC,SAAS,QAAQ,uBAAuB;;AAEjD;;;AAMA,OAAM,MAAOC,qBAAqB;EAQ9BC,YAAYC,OAAmB;IANrB,KAAAC,QAAQ,GAAG,IAAIL,YAAY,EAAE;IAOnC,IAAI,CAACI,OAAO,GAAGA,OAAO,CAACE,aAAa;EACxC;EAEA;;;EAGAC,QAAQA,CAAA;IACJ,gBAAgB,IAAIC,MAAM,GACpB,IAAI,CAACC,WAAW,EAAE,GAClB,IAAI,CAACC,cAAc,EAAE;EAC/B;EAEA;;;EAGAC,WAAWA,CAAA;IAAA,IAAAC,oBAAA,EAAAC,qBAAA;IACP,CAAAD,oBAAA,OAAI,CAACE,cAAc,cAAAF,oBAAA,eAAnBA,oBAAA,CAAqBG,UAAU,EAAE;IACjC,CAAAF,qBAAA,OAAI,CAACG,gBAAgB,cAAAH,qBAAA,eAArBA,qBAAA,CAAuBE,UAAU,EAAE;EACvC;EAEA;;;EAGQN,WAAWA,CAAA;IACf,IAAI,CAACK,cAAc,GAAG,IAAIG,cAAc,CAAC,MAAM,IAAI,CAACZ,QAAQ,CAACa,IAAI,EAAE,CAAC;IAEpE,IAAI,CAACJ,cAAc,CAACK,OAAO,CAAC,IAAI,CAACf,OAAO,CAAC;EAC7C;EAEA;;;EAGQM,cAAcA,CAAA;IAClB,IAAIU,IAAI,GAAG,IAAI,CAACC,cAAc,EAAE;IAChC,MAAMC,UAAU,GAAGA,CAAA,KAAK;MACpB,MAAMC,OAAO,GAAG,IAAI,CAACF,cAAc,EAAE;MAErC,IAAIE,OAAO,CAACC,KAAK,KAAKJ,IAAI,CAACI,KAAK,IAAID,OAAO,CAACE,MAAM,KAAKL,IAAI,CAACK,MAAM,EAAE;QAChEL,IAAI,GAAGG,OAAO;QAEd,IAAI,CAAClB,QAAQ,CAACa,IAAI,EAAE;;IAE5B,CAAC;IAED;IACA,IAAI,CAACF,gBAAgB,GAAG,IAAIU,gBAAgB,CAACzB,SAAS,CAAC0B,QAAQ,CAACL,UAAU,EAAE,EAAE,CAAC,CAAC;IAEhF,IAAI,CAACN,gBAAgB,CAACG,OAAO,CAAC,IAAI,CAACf,OAAO,EAAE;MACxCwB,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,IAAI;MACfC,aAAa,EAAE;KAClB,CAAC;EACN;EAEA;;;;;EAKQT,cAAcA,CAAA;IAClB,OAAO;MACHG,KAAK,EAAE,IAAI,CAACpB,OAAO,CAAC2B,WAAW;MAC/BN,MAAM,EAAE,IAAI,CAACrB,OAAO,CAAC4B;KACxB;EACL;;SAzES9B,qBAAqB;;mBAArBA,MAAqB,EAAA+B,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;AAAA;;QAArBjC,MAAqB;EAAAkC,SAAA;EAAAC,OAAA;IAAAhC,QAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}