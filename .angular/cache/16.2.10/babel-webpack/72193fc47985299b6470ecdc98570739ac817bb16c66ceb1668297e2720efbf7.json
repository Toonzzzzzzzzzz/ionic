{"ast":null,"code":"var _class;\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CorePlatform } from '@services/platform';\nimport { OGVPlayer, OGVCompat, OGVLoader } from 'ogv';\nimport videojs from 'video.js';\nconst Tech = videojs.getComponent('Tech');\n/**\n * Object.defineProperty but \"lazy\", which means that the value is only set after\n * it retrieved the first time, rather than being set right away.\n *\n * @param obj The object to set the property on.\n * @param key The key for the property to set.\n * @param getValue The function used to get the value when it is needed.\n * @param setter Whether a setter should be allowed or not.\n * @returns Object.\n */\nconst defineLazyProperty = (obj, key, getValue, setter = true) => {\n  const set = value => {\n    Object.defineProperty(obj, key, {\n      value,\n      enumerable: true,\n      writable: true\n    });\n  };\n  const options = {\n    configurable: true,\n    enumerable: true,\n    get() {\n      const value = getValue();\n      set(value);\n      return value;\n    }\n  };\n  if (setter) {\n    options.set = set;\n  }\n  return Object.defineProperty(obj, key, options);\n};\n/**\n * OgvJS Media Controller for VideoJS - Wrapper for ogv.js Media API.\n *\n * Code adapted from https://github.com/HuongNV13/videojs-ogvjs/blob/f9b12bd53018d967bb305f02725834a98f20f61f/src/plugin.js\n * Modified in the following ways:\n * - Adapted to Typescript.\n * - Use our own functions to detect the platform instead of using getDeviceOS.\n * - Add an initialize static function.\n * - In the play function, reset the media if it already ended to fix problems with replaying media.\n * - Allow full screen in iOS devices, and implement enterFullScreen and exitFullScreen to use a fake full screen.\n */\nexport class VideoJSOgvJS extends Tech {\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param options The key/value store of player options.\n   * @param ready Callback function to call when the `OgvJS` Tech is ready.\n   */\n  constructor(options, ready) {\n    var _options$source, _options$sources;\n    super(options, ready);\n    this.parentElement = null;\n    this.placeholderElement = document.createElement('div');\n    this.el_.src = options.src || ((_options$source = options.source) === null || _options$source === void 0 ? void 0 : _options$source.src) || ((_options$sources = options.sources) === null || _options$sources === void 0 || (_options$sources = _options$sources[0]) === null || _options$sources === void 0 ? void 0 : _options$sources.src) || this.el_.src;\n    VideoJSOgvJS.setIfAvailable(this.el_, 'autoplay', options.autoplay);\n    VideoJSOgvJS.setIfAvailable(this.el_, 'loop', options.loop);\n    VideoJSOgvJS.setIfAvailable(this.el_, 'poster', options.poster);\n    VideoJSOgvJS.setIfAvailable(this.el_, 'preload', options.preload);\n    this.playerId = options.playerId;\n    this.on('loadedmetadata', () => {\n      if (CorePlatform.isIPhone()) {\n        // iPhoneOS add some inline styles to the canvas, we need to remove it.\n        const canvas = this.el_.getElementsByTagName('canvas')[0];\n        canvas.style.removeProperty('width');\n        canvas.style.removeProperty('margin');\n      }\n      this.triggerReady();\n    });\n  }\n  /**\n   * Set the value for the player is it has that property.\n   *\n   * @param el HTML player.\n   * @param name Name of the property.\n   * @param value Value to set.\n   */\n  static setIfAvailable(el, name, value) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (el.hasOwnProperty(name)) {\n      el[name] = value;\n    }\n  }\n  /**\n   * Check if browser/device is supported by Ogv.JS.\n   *\n   * @returns Whether it's supported.\n   */\n  static isSupported() {\n    return OGVCompat.supported('OGVPlayer');\n  }\n  /**\n   * Check if the tech can support the given type.\n   *\n   * @param type The mimetype to check.\n   * @returns 'probably', 'maybe', or '' (empty string).\n   */\n  static canPlayType(type) {\n    return type.indexOf('/ogg') !== -1 || type.indexOf('/webm') ? 'maybe' : '';\n  }\n  /**\n   * Check if the tech can support the given source.\n   *\n   * @param srcObj The source object.\n   * @returns The options passed to the tech.\n   */\n  static canPlaySource(srcObj) {\n    return VideoJSOgvJS.canPlayType(srcObj.type);\n  }\n  /**\n   * Check if the volume can be changed in this browser/device.\n   * Volume cannot be changed in a lot of mobile devices.\n   * Specifically, it can't be changed from 1 on iOS.\n   *\n   * @returns True if volume can be controlled.\n   */\n  static canControlVolume() {\n    if (CorePlatform.isIPhone() || CorePlatform.isIPad()) {\n      return false;\n    }\n    const player = new OGVPlayer();\n    // eslint-disable-next-line no-prototype-builtins\n    return player.hasOwnProperty('volume');\n  }\n  /**\n   * Check if the volume can be muted in this browser/device.\n   *\n   * @returns True if volume can be muted.\n   */\n  static canMuteVolume() {\n    return true;\n  }\n  /**\n   * Check if the playback rate can be changed in this browser/device.\n   *\n   * @returns True if playback rate can be controlled.\n   */\n  static canControlPlaybackRate() {\n    return true;\n  }\n  /**\n   * Check to see if native 'TextTracks' are supported by this browser/device.\n   *\n   * @returns True if native 'TextTracks' are supported.\n   */\n  static supportsNativeTextTracks() {\n    return false;\n  }\n  /**\n   * Check if the fullscreen resize is supported by this browser/device.\n   *\n   * @returns True if the fullscreen resize is supported.\n   */\n  static supportsFullscreenResize() {\n    return true;\n  }\n  /**\n   * Check if the progress events is supported by this browser/device.\n   *\n   * @returns True if the progress events is supported.\n   */\n  static supportsProgressEvents() {\n    return true;\n  }\n  /**\n   * Check if the time update events is supported by this browser/device.\n   *\n   * @returns True if the time update events is supported.\n   */\n  static supportsTimeupdateEvents() {\n    return true;\n  }\n  /**\n   * Create the 'OgvJS' Tech's DOM element.\n   *\n   * @returns The element that gets created.\n   */\n  createEl() {\n    const options = this.options_;\n    if (options.base) {\n      OGVLoader.base = options.base;\n    } else if (!OGVLoader.base) {\n      throw new Error('Please specify the base for the ogv.js library');\n    }\n    const el = new OGVPlayer(options);\n    el.className += ' vjs-tech';\n    options.tag = el;\n    return el;\n  }\n  /**\n   * Start playback.\n   */\n  play() {\n    if (this.ended()) {\n      // Reset the player, otherwise the Replay button doesn't work.\n      this.el_.stop();\n    }\n    this.el_.play();\n  }\n  /**\n   * Get the current playback speed.\n   *\n   * @returns Playback speed.\n   */\n  playbackRate() {\n    return this.el_.playbackRate || 1;\n  }\n  /**\n   * Set the playback speed.\n   *\n   * @param val Speed for the player to play.\n   */\n  setPlaybackRate(val) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (this.el_.hasOwnProperty('playbackRate')) {\n      this.el_.playbackRate = val;\n    }\n  }\n  /**\n   * Returns a TimeRanges object that represents the ranges of the media resource that the user agent has played.\n   *\n   * @returns The range of points on the media timeline that has been reached through normal playback.\n   */\n  played() {\n    return this.el_.played;\n  }\n  /**\n   * Pause playback.\n   */\n  pause() {\n    this.el_.pause();\n  }\n  /**\n   * Is the player paused or not.\n   *\n   * @returns Whether is paused.\n   */\n  paused() {\n    return this.el_.paused;\n  }\n  /**\n   * Get current playing time.\n   *\n   * @returns Current time.\n   */\n  currentTime() {\n    return this.el_.currentTime;\n  }\n  /**\n   * Set current playing time.\n   *\n   * @param seconds Current time of audio/video.\n   */\n  setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      videojs.log(e, 'Media is not ready. (Video.JS)');\n    }\n  }\n  /**\n   * Get media's duration.\n   *\n   * @returns Duration.\n   */\n  duration() {\n    if (this.el_.duration && this.el_.duration !== Infinity) {\n      return this.el_.duration;\n    }\n    return 0;\n  }\n  /**\n   * Get a TimeRange object that represents the intersection\n   * of the time ranges for which the user agent has all\n   * relevant media.\n   *\n   * @returns Time ranges.\n   */\n  buffered() {\n    return this.el_.buffered;\n  }\n  /**\n   * Get current volume level.\n   *\n   * @returns Volume.\n   */\n  volume() {\n    // eslint-disable-next-line no-prototype-builtins\n    return this.el_.hasOwnProperty('volume') ? this.el_.volume : 1;\n  }\n  /**\n   * Set current playing volume level.\n   *\n   * @param percentAsDecimal Volume percent as a decimal.\n   */\n  setVolume(percentAsDecimal) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!CorePlatform.isIPhone() && !CorePlatform.isIPad() && this.el_.hasOwnProperty('volume')) {\n      this.el_.volume = percentAsDecimal;\n    }\n  }\n  /**\n   * Is the player muted or not.\n   *\n   * @returns Whether it's muted.\n   */\n  muted() {\n    return this.el_.muted;\n  }\n  /**\n   * Mute the player.\n   *\n   * @param muted True to mute the player.\n   */\n  setMuted(muted) {\n    this.el_.muted = !!muted;\n  }\n  /**\n   * Is the player muted by default or not.\n   *\n   * @returns Whether it's muted by default.\n   */\n  defaultMuted() {\n    return this.el_.defaultMuted || false;\n  }\n  /**\n   * Get the player width.\n   *\n   * @returns Width.\n   */\n  width() {\n    return this.el_.offsetWidth;\n  }\n  /**\n   * Get the player height.\n   *\n   * @returns Height.\n   */\n  height() {\n    return this.el_.offsetHeight;\n  }\n  /**\n   * Get the video width.\n   *\n   * @returns Video width.\n   */\n  videoWidth() {\n    var _this$el_$videoWidth;\n    return (_this$el_$videoWidth = this.el_.videoWidth) !== null && _this$el_$videoWidth !== void 0 ? _this$el_$videoWidth : 0;\n  }\n  /**\n   * Get the video height.\n   *\n   * @returns Video heigth.\n   */\n  videoHeight() {\n    var _this$el_$videoHeight;\n    return (_this$el_$videoHeight = this.el_.videoHeight) !== null && _this$el_$videoHeight !== void 0 ? _this$el_$videoHeight : 0;\n  }\n  /**\n   * Get/set media source.\n   *\n   * @param src Source.\n   * @returns Source when getting it, undefined when setting it.\n   */\n  src(src) {\n    if (typeof src === 'undefined') {\n      return this.el_.src;\n    }\n    this.el_.src = src;\n  }\n  /**\n   * Load the media into the player.\n   */\n  load() {\n    this.el_.load();\n  }\n  /**\n   * Get current media source.\n   *\n   * @returns Current source.\n   */\n  currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.currentSrc;\n  }\n  /**\n   * Get media poster URL.\n   *\n   * @returns Poster.\n   */\n  poster() {\n    return 'poster' in this.el_ ? this.el_.poster : '';\n  }\n  /**\n   * Set media poster URL.\n   *\n   * @param url The poster image's url.\n   */\n  setPoster(url) {\n    this.el_.poster = url;\n  }\n  /**\n   * Is the media preloaded or not.\n   *\n   * @returns Whether it's preloaded.\n   */\n  preload() {\n    return this.el_.preload || 'none';\n  }\n  /**\n   * Set the media preload method.\n   *\n   * @param val Value for preload attribute.\n   */\n  setPreload(val) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (this.el_.hasOwnProperty('preload')) {\n      this.el_.preload = val;\n    }\n  }\n  /**\n   * Is the media auto-played or not.\n   *\n   * @returns Whether it's auto-played.\n   */\n  autoplay() {\n    return this.el_.autoplay || false;\n  }\n  /**\n   * Set media autoplay method.\n   *\n   * @param val Value for autoplay attribute.\n   */\n  setAutoplay(val) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (this.el_.hasOwnProperty('autoplay')) {\n      this.el_.autoplay = !!val;\n    }\n  }\n  /**\n   * Does the media has controls or not.\n   *\n   * @returns Whether it has controls.\n   */\n  controls() {\n    return this.el_.controls || false;\n  }\n  /**\n   * Set the media controls method.\n   *\n   * @param val Value for controls attribute.\n   */\n  setControls(val) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (this.el_.hasOwnProperty('controls')) {\n      this.el_.controls = !!val;\n    }\n  }\n  /**\n   * Is the media looped or not.\n   *\n   * @returns Whether it's looped.\n   */\n  loop() {\n    return this.el_.loop || false;\n  }\n  /**\n   * Set the media loop method.\n   *\n   * @param val Value for loop attribute.\n   */\n  setLoop(val) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (this.el_.hasOwnProperty('loop')) {\n      this.el_.loop = !!val;\n    }\n  }\n  /**\n   * Get a TimeRanges object that represents the\n   * ranges of the media resource to which it is possible\n   * for the user agent to seek.\n   *\n   * @returns Time ranges.\n   */\n  seekable() {\n    return this.el_.seekable;\n  }\n  /**\n   * Is player in the \"seeking\" state or not.\n   *\n   * @returns Whether is in the seeking state.\n   */\n  seeking() {\n    return this.el_.seeking;\n  }\n  /**\n   * Is the media ended or not.\n   *\n   * @returns Whether it's ended.\n   */\n  ended() {\n    return this.el_.ended;\n  }\n  /**\n   * Get the current state of network activity\n   * NETWORK_EMPTY (numeric value 0)\n   * NETWORK_IDLE (numeric value 1)\n   * NETWORK_LOADING (numeric value 2)\n   * NETWORK_NO_SOURCE (numeric value 3)\n   *\n   * @returns Network state.\n   */\n  networkState() {\n    return this.el_.networkState;\n  }\n  /**\n   * Get the current state of the player.\n   * HAVE_NOTHING (numeric value 0)\n   * HAVE_METADATA (numeric value 1)\n   * HAVE_CURRENT_DATA (numeric value 2)\n   * HAVE_FUTURE_DATA (numeric value 3)\n   * HAVE_ENOUGH_DATA (numeric value 4)\n   *\n   * @returns Ready state.\n   */\n  readyState() {\n    return this.el_.readyState;\n  }\n  /**\n   * Does the player support native fullscreen mode or not. (Mobile devices)\n   *\n   * @returns Whether it supports full screen.\n   */\n  supportsFullScreen() {\n    return !!this.playerId;\n  }\n  /**\n   * Get media player error.\n   *\n   * @returns Error.\n   */\n  error() {\n    return this.el_.error;\n  }\n  /**\n   * Enter full screen mode.\n   */\n  enterFullScreen() {\n    var _this$playerId;\n    // Use a \"fake\" full screen mode, moving the player to a different place in DOM to be able to use full screen size.\n    const player = videojs.getPlayer((_this$playerId = this.playerId) !== null && _this$playerId !== void 0 ? _this$playerId : '');\n    if (!player) {\n      return;\n    }\n    const container = player.el();\n    this.parentElement = container.parentElement;\n    if (!this.parentElement) {\n      // Shouldn't happen, it means the element is not in DOM. Do not support full screen in this case.\n      return;\n    }\n    this.parentElement.replaceChild(this.placeholderElement, container);\n    document.body.appendChild(container);\n    container.classList.add('vjs-ios-moodleapp-fs');\n    player.isFullscreen(true);\n  }\n  /**\n   * Exit full screen mode.\n   */\n  exitFullScreen() {\n    var _this$playerId2;\n    if (!this.parentElement) {\n      return;\n    }\n    const player = videojs.getPlayer((_this$playerId2 = this.playerId) !== null && _this$playerId2 !== void 0 ? _this$playerId2 : '');\n    if (!player) {\n      return;\n    }\n    const container = player.el();\n    this.parentElement.replaceChild(container, this.placeholderElement);\n    container.classList.remove('vjs-ios-moodleapp-fs');\n    player.isFullscreen(false);\n  }\n}\n_class = VideoJSOgvJS;\n/**\n * List of available events of the media player.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n_class.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];\n[['featuresVolumeControl', 'canControlVolume'], ['featuresMuteControl', 'canMuteVolume'], ['featuresPlaybackRate', 'canControlPlaybackRate'], ['featuresNativeTextTracks', 'supportsNativeTextTracks'], ['featuresFullscreenResize', 'supportsFullscreenResize'], ['featuresProgressEvents', 'supportsProgressEvents'], ['featuresTimeupdateEvents', 'supportsTimeupdateEvents']].forEach(([key, fn]) => {\n  defineLazyProperty(VideoJSOgvJS.prototype, key, () => VideoJSOgvJS[fn](), true);\n});","map":{"version":3,"names":["CorePlatform","OGVPlayer","OGVCompat","OGVLoader","videojs","Tech","getComponent","defineLazyProperty","obj","key","getValue","setter","set","value","Object","defineProperty","enumerable","writable","options","configurable","get","VideoJSOgvJS","constructor","ready","_options$source","_options$sources","parentElement","placeholderElement","document","createElement","el_","src","source","sources","setIfAvailable","autoplay","loop","poster","preload","playerId","on","isIPhone","canvas","getElementsByTagName","style","removeProperty","triggerReady","el","name","hasOwnProperty","isSupported","supported","canPlayType","type","indexOf","canPlaySource","srcObj","canControlVolume","isIPad","player","canMuteVolume","canControlPlaybackRate","supportsNativeTextTracks","supportsFullscreenResize","supportsProgressEvents","supportsTimeupdateEvents","createEl","options_","base","Error","className","tag","play","ended","stop","playbackRate","setPlaybackRate","val","played","pause","paused","currentTime","setCurrentTime","seconds","e","log","duration","Infinity","buffered","volume","setVolume","percentAsDecimal","muted","setMuted","defaultMuted","width","offsetWidth","height","offsetHeight","videoWidth","_this$el_$videoWidth","videoHeight","_this$el_$videoHeight","load","currentSrc","currentSource_","setPoster","url","setPreload","setAutoplay","controls","setControls","setLoop","seekable","seeking","networkState","readyState","supportsFullScreen","error","enterFullScreen","_this$playerId","getPlayer","container","replaceChild","body","appendChild","classList","add","isFullscreen","exitFullScreen","_this$playerId2","remove","_class","Events","forEach","fn","prototype"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/filter/mediaplugin/classes/videojs-ogvjs.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CorePlatform } from '@services/platform';\nimport { OGVPlayer, OGVCompat, OGVLoader } from 'ogv';\nimport videojs, { PreloadOption, TechSourceObject, VideoJSOptions } from 'video.js';\n\nconst Tech = videojs.getComponent('Tech');\n\n/**\n * Object.defineProperty but \"lazy\", which means that the value is only set after\n * it retrieved the first time, rather than being set right away.\n *\n * @param obj The object to set the property on.\n * @param key The key for the property to set.\n * @param getValue The function used to get the value when it is needed.\n * @param setter Whether a setter should be allowed or not.\n * @returns Object.\n */\nconst defineLazyProperty = <T>(obj: T, key: string, getValue: () => unknown, setter = true): T => {\n    const set = (value: unknown): void => {\n        Object.defineProperty(obj, key, { value, enumerable: true, writable: true });\n    };\n\n    const options: PropertyDescriptor = {\n        configurable: true,\n        enumerable: true,\n        get() {\n            const value = getValue();\n\n            set(value);\n\n            return value;\n        },\n    };\n\n    if (setter) {\n        options.set = set;\n    }\n\n    return Object.defineProperty(obj, key, options);\n};\n\n/**\n * OgvJS Media Controller for VideoJS - Wrapper for ogv.js Media API.\n *\n * Code adapted from https://github.com/HuongNV13/videojs-ogvjs/blob/f9b12bd53018d967bb305f02725834a98f20f61f/src/plugin.js\n * Modified in the following ways:\n * - Adapted to Typescript.\n * - Use our own functions to detect the platform instead of using getDeviceOS.\n * - Add an initialize static function.\n * - In the play function, reset the media if it already ended to fix problems with replaying media.\n * - Allow full screen in iOS devices, and implement enterFullScreen and exitFullScreen to use a fake full screen.\n */\nexport class VideoJSOgvJS extends Tech {\n\n    /**\n     * List of available events of the media player.\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    static readonly Events = [\n        'loadstart',\n        'suspend',\n        'abort',\n        'error',\n        'emptied',\n        'stalled',\n        'loadedmetadata',\n        'loadeddata',\n        'canplay',\n        'canplaythrough',\n        'playing',\n        'waiting',\n        'seeking',\n        'seeked',\n        'ended',\n        'durationchange',\n        'timeupdate',\n        'progress',\n        'play',\n        'pause',\n        'ratechange',\n        'resize',\n        'volumechange',\n    ];\n\n    protected playerId?: string;\n    protected parentElement: HTMLElement | null = null;\n    protected placeholderElement = document.createElement('div');\n\n    // Variables/functions defined in parent classes.\n    protected el_!: OGVPlayerEl; // eslint-disable-line @typescript-eslint/naming-convention\n    protected options_!: VideoJSOptions; // eslint-disable-line @typescript-eslint/naming-convention\n    protected currentSource_?: TechSourceObject; // eslint-disable-line @typescript-eslint/naming-convention\n    protected triggerReady!: () => void;\n    protected on!: (name: string, callback: (e?: Event) => void) => void;\n\n    /**\n     * Create an instance of this Tech.\n     *\n     * @param options The key/value store of player options.\n     * @param ready Callback function to call when the `OgvJS` Tech is ready.\n     */\n    constructor(options: VideoJSTechOptions, ready: () => void) {\n        super(options, ready);\n\n        this.el_.src = options.src || options.source?.src || options.sources?.[0]?.src || this.el_.src;\n        VideoJSOgvJS.setIfAvailable(this.el_, 'autoplay', options.autoplay);\n        VideoJSOgvJS.setIfAvailable(this.el_, 'loop', options.loop);\n        VideoJSOgvJS.setIfAvailable(this.el_, 'poster', options.poster);\n        VideoJSOgvJS.setIfAvailable(this.el_, 'preload', options.preload);\n        this.playerId = options.playerId;\n\n        this.on('loadedmetadata', () => {\n            if (CorePlatform.isIPhone()) {\n                // iPhoneOS add some inline styles to the canvas, we need to remove it.\n                const canvas = this.el_.getElementsByTagName('canvas')[0];\n\n                canvas.style.removeProperty('width');\n                canvas.style.removeProperty('margin');\n            }\n\n            this.triggerReady();\n        });\n    }\n\n    /**\n     * Set the value for the player is it has that property.\n     *\n     * @param el HTML player.\n     * @param name Name of the property.\n     * @param value Value to set.\n     */\n    static setIfAvailable(el: HTMLElement, name: string, value: unknown): void {\n        // eslint-disable-next-line no-prototype-builtins\n        if (el.hasOwnProperty(name)) {\n            el[name] = value;\n        }\n    }\n\n    /**\n     * Check if browser/device is supported by Ogv.JS.\n     *\n     * @returns Whether it's supported.\n     */\n    static isSupported(): boolean {\n        return OGVCompat.supported('OGVPlayer');\n    }\n\n    /**\n     * Check if the tech can support the given type.\n     *\n     * @param type The mimetype to check.\n     * @returns 'probably', 'maybe', or '' (empty string).\n     */\n    static canPlayType(type: string): string {\n        return (type.indexOf('/ogg') !== -1 || type.indexOf('/webm')) ? 'maybe' : '';\n    }\n\n    /**\n     * Check if the tech can support the given source.\n     *\n     * @param srcObj The source object.\n     * @returns The options passed to the tech.\n     */\n    static canPlaySource(srcObj: TechSourceObject): string {\n        return VideoJSOgvJS.canPlayType(srcObj.type);\n    }\n\n    /**\n     * Check if the volume can be changed in this browser/device.\n     * Volume cannot be changed in a lot of mobile devices.\n     * Specifically, it can't be changed from 1 on iOS.\n     *\n     * @returns True if volume can be controlled.\n     */\n    static canControlVolume(): boolean {\n        if (CorePlatform.isIPhone() || CorePlatform.isIPad()) {\n            return false;\n        }\n\n        const player = new OGVPlayer();\n\n        // eslint-disable-next-line no-prototype-builtins\n        return player.hasOwnProperty('volume');\n    }\n\n    /**\n     * Check if the volume can be muted in this browser/device.\n     *\n     * @returns True if volume can be muted.\n     */\n    static canMuteVolume(): boolean {\n        return true;\n    }\n\n    /**\n     * Check if the playback rate can be changed in this browser/device.\n     *\n     * @returns True if playback rate can be controlled.\n     */\n    static canControlPlaybackRate(): boolean {\n        return true;\n    }\n\n    /**\n     * Check to see if native 'TextTracks' are supported by this browser/device.\n     *\n     * @returns True if native 'TextTracks' are supported.\n     */\n    static supportsNativeTextTracks(): boolean {\n        return false;\n    }\n\n    /**\n     * Check if the fullscreen resize is supported by this browser/device.\n     *\n     * @returns True if the fullscreen resize is supported.\n     */\n    static supportsFullscreenResize(): boolean {\n        return true;\n    }\n\n    /**\n     * Check if the progress events is supported by this browser/device.\n     *\n     * @returns True if the progress events is supported.\n     */\n    static supportsProgressEvents(): boolean {\n        return true;\n    }\n\n    /**\n     * Check if the time update events is supported by this browser/device.\n     *\n     * @returns True if the time update events is supported.\n     */\n    static supportsTimeupdateEvents(): boolean {\n        return true;\n    }\n\n    /**\n     * Create the 'OgvJS' Tech's DOM element.\n     *\n     * @returns The element that gets created.\n     */\n    createEl(): OGVPlayerEl {\n        const options = this.options_;\n\n        if (options.base) {\n            OGVLoader.base = options.base;\n        } else if (!OGVLoader.base) {\n            throw new Error('Please specify the base for the ogv.js library');\n        }\n\n        const el = new OGVPlayer(options);\n\n        el.className += ' vjs-tech';\n        options.tag = el;\n\n        return el;\n    }\n\n    /**\n     * Start playback.\n     */\n    play(): void {\n        if (this.ended()) {\n            // Reset the player, otherwise the Replay button doesn't work.\n            this.el_.stop();\n        }\n\n        this.el_.play();\n    }\n\n    /**\n     * Get the current playback speed.\n     *\n     * @returns Playback speed.\n     */\n    playbackRate(): number {\n        return this.el_.playbackRate || 1;\n    }\n\n    /**\n     * Set the playback speed.\n     *\n     * @param val Speed for the player to play.\n     */\n    setPlaybackRate(val: number): void {\n        // eslint-disable-next-line no-prototype-builtins\n        if (this.el_.hasOwnProperty('playbackRate')) {\n            this.el_.playbackRate = val;\n        }\n    }\n\n    /**\n     * Returns a TimeRanges object that represents the ranges of the media resource that the user agent has played.\n     *\n     * @returns The range of points on the media timeline that has been reached through normal playback.\n     */\n    played(): TimeRanges {\n        return this.el_.played;\n    }\n\n    /**\n     * Pause playback.\n     */\n    pause(): void {\n        this.el_.pause();\n    }\n\n    /**\n     * Is the player paused or not.\n     *\n     * @returns Whether is paused.\n     */\n    paused(): boolean {\n        return this.el_.paused;\n    }\n\n    /**\n     * Get current playing time.\n     *\n     * @returns Current time.\n     */\n    currentTime(): number {\n        return this.el_.currentTime;\n    }\n\n    /**\n     * Set current playing time.\n     *\n     * @param seconds Current time of audio/video.\n     */\n    setCurrentTime(seconds: number): void {\n        try {\n            this.el_.currentTime = seconds;\n        } catch (e) {\n            videojs.log(e, 'Media is not ready. (Video.JS)');\n        }\n    }\n\n    /**\n     * Get media's duration.\n     *\n     * @returns Duration.\n     */\n    duration(): number {\n        if (this.el_.duration && this.el_.duration !== Infinity) {\n            return this.el_.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get a TimeRange object that represents the intersection\n     * of the time ranges for which the user agent has all\n     * relevant media.\n     *\n     * @returns Time ranges.\n     */\n    buffered(): TimeRanges {\n        return this.el_.buffered;\n    }\n\n    /**\n     * Get current volume level.\n     *\n     * @returns Volume.\n     */\n    volume(): number {\n        // eslint-disable-next-line no-prototype-builtins\n        return this.el_.hasOwnProperty('volume') ? this.el_.volume : 1;\n    }\n\n    /**\n     * Set current playing volume level.\n     *\n     * @param percentAsDecimal Volume percent as a decimal.\n     */\n    setVolume(percentAsDecimal: number): void {\n        // eslint-disable-next-line no-prototype-builtins\n        if (!CorePlatform.isIPhone() && !CorePlatform.isIPad() && this.el_.hasOwnProperty('volume')) {\n            this.el_.volume = percentAsDecimal;\n        }\n    }\n\n    /**\n     * Is the player muted or not.\n     *\n     * @returns Whether it's muted.\n     */\n    muted(): boolean {\n        return this.el_.muted;\n    }\n\n    /**\n     * Mute the player.\n     *\n     * @param muted True to mute the player.\n     */\n    setMuted(muted: boolean): void {\n        this.el_.muted = !!muted;\n    }\n\n    /**\n     * Is the player muted by default or not.\n     *\n     * @returns Whether it's muted by default.\n     */\n    defaultMuted(): boolean {\n        return this.el_.defaultMuted || false;\n    }\n\n    /**\n     * Get the player width.\n     *\n     * @returns Width.\n     */\n    width(): number {\n        return this.el_.offsetWidth;\n    }\n\n    /**\n     * Get the player height.\n     *\n     * @returns Height.\n     */\n    height(): number {\n        return this.el_.offsetHeight;\n    }\n\n    /**\n     * Get the video width.\n     *\n     * @returns Video width.\n     */\n    videoWidth(): number {\n        return (<HTMLVideoElement> this.el_).videoWidth ?? 0;\n    }\n\n    /**\n     * Get the video height.\n     *\n     * @returns Video heigth.\n     */\n    videoHeight(): number {\n        return (<HTMLVideoElement> this.el_).videoHeight ?? 0;\n    }\n\n    /**\n     * Get/set media source.\n     *\n     * @param src Source.\n     * @returns Source when getting it, undefined when setting it.\n     */\n    src(src?: string): string | undefined {\n        if (typeof src === 'undefined') {\n            return this.el_.src;\n        }\n\n        this.el_.src = src;\n    }\n\n    /**\n     * Load the media into the player.\n     */\n    load(): void {\n        this.el_.load();\n    }\n\n    /**\n     * Get current media source.\n     *\n     * @returns Current source.\n     */\n    currentSrc(): string {\n        if (this.currentSource_) {\n            return this.currentSource_.src;\n        }\n\n        return this.el_.currentSrc;\n    }\n\n    /**\n     * Get media poster URL.\n     *\n     * @returns Poster.\n     */\n    poster(): string {\n        return 'poster' in this.el_ ? this.el_.poster : '';\n    }\n\n    /**\n     * Set media poster URL.\n     *\n     * @param url The poster image's url.\n     */\n    setPoster(url: string): void {\n        (<HTMLVideoElement> this.el_).poster = url;\n    }\n\n    /**\n     * Is the media preloaded or not.\n     *\n     * @returns Whether it's preloaded.\n     */\n    preload(): PreloadOption {\n        return <PreloadOption> this.el_.preload || 'none';\n    }\n\n    /**\n     * Set the media preload method.\n     *\n     * @param val Value for preload attribute.\n     */\n    setPreload(val: PreloadOption): void {\n        // eslint-disable-next-line no-prototype-builtins\n        if (this.el_.hasOwnProperty('preload')) {\n            this.el_.preload = val;\n        }\n    }\n\n    /**\n     * Is the media auto-played or not.\n     *\n     * @returns Whether it's auto-played.\n     */\n    autoplay(): boolean {\n        return this.el_.autoplay || false;\n    }\n\n    /**\n     * Set media autoplay method.\n     *\n     * @param val Value for autoplay attribute.\n     */\n    setAutoplay(val: boolean): void {\n        // eslint-disable-next-line no-prototype-builtins\n        if (this.el_.hasOwnProperty('autoplay')) {\n            this.el_.autoplay = !!val;\n        }\n    }\n\n    /**\n     * Does the media has controls or not.\n     *\n     * @returns Whether it has controls.\n     */\n    controls(): boolean {\n        return this.el_.controls || false;\n    }\n\n    /**\n     * Set the media controls method.\n     *\n     * @param val Value for controls attribute.\n     */\n    setControls(val: boolean): void {\n        // eslint-disable-next-line no-prototype-builtins\n        if (this.el_.hasOwnProperty('controls')) {\n            this.el_.controls = !!val;\n        }\n    }\n\n    /**\n     * Is the media looped or not.\n     *\n     * @returns Whether it's looped.\n     */\n    loop(): boolean {\n        return this.el_.loop || false;\n    }\n\n    /**\n     * Set the media loop method.\n     *\n     * @param val Value for loop attribute.\n     */\n    setLoop(val: boolean): void {\n        // eslint-disable-next-line no-prototype-builtins\n        if (this.el_.hasOwnProperty('loop')) {\n            this.el_.loop = !!val;\n        }\n    }\n\n    /**\n     * Get a TimeRanges object that represents the\n     * ranges of the media resource to which it is possible\n     * for the user agent to seek.\n     *\n     * @returns Time ranges.\n     */\n    seekable(): TimeRanges {\n        return this.el_.seekable;\n    }\n\n    /**\n     * Is player in the \"seeking\" state or not.\n     *\n     * @returns Whether is in the seeking state.\n     */\n    seeking(): boolean {\n        return this.el_.seeking;\n    }\n\n    /**\n     * Is the media ended or not.\n     *\n     * @returns Whether it's ended.\n     */\n    ended(): boolean {\n        return this.el_.ended;\n    }\n\n    /**\n     * Get the current state of network activity\n     * NETWORK_EMPTY (numeric value 0)\n     * NETWORK_IDLE (numeric value 1)\n     * NETWORK_LOADING (numeric value 2)\n     * NETWORK_NO_SOURCE (numeric value 3)\n     *\n     * @returns Network state.\n     */\n    networkState(): number {\n        return this.el_.networkState;\n    }\n\n    /**\n     * Get the current state of the player.\n     * HAVE_NOTHING (numeric value 0)\n     * HAVE_METADATA (numeric value 1)\n     * HAVE_CURRENT_DATA (numeric value 2)\n     * HAVE_FUTURE_DATA (numeric value 3)\n     * HAVE_ENOUGH_DATA (numeric value 4)\n     *\n     * @returns Ready state.\n     */\n    readyState(): number {\n        return this.el_.readyState;\n    }\n\n    /**\n     * Does the player support native fullscreen mode or not. (Mobile devices)\n     *\n     * @returns Whether it supports full screen.\n     */\n    supportsFullScreen(): boolean {\n        return !!this.playerId;\n    }\n\n    /**\n     * Get media player error.\n     *\n     * @returns Error.\n     */\n    error(): MediaError | null {\n        return this.el_.error;\n    }\n\n    /**\n     * Enter full screen mode.\n     */\n    enterFullScreen(): void {\n        // Use a \"fake\" full screen mode, moving the player to a different place in DOM to be able to use full screen size.\n        const player = videojs.getPlayer(this.playerId ?? '');\n        if (!player) {\n            return;\n        }\n\n        const container = player.el();\n        this.parentElement = container.parentElement;\n        if (!this.parentElement) {\n            // Shouldn't happen, it means the element is not in DOM. Do not support full screen in this case.\n            return;\n        }\n\n        this.parentElement.replaceChild(this.placeholderElement, container);\n        document.body.appendChild(container);\n        container.classList.add('vjs-ios-moodleapp-fs');\n\n        player.isFullscreen(true);\n    }\n\n    /**\n     * Exit full screen mode.\n     */\n    exitFullScreen(): void {\n        if (!this.parentElement) {\n            return;\n        }\n\n        const player = videojs.getPlayer(this.playerId ?? '');\n        if (!player) {\n            return;\n        }\n\n        const container = player.el();\n        this.parentElement.replaceChild(container, this.placeholderElement);\n        container.classList.remove('vjs-ios-moodleapp-fs');\n\n        player.isFullscreen(false);\n    }\n\n}\n\n[\n    ['featuresVolumeControl', 'canControlVolume'],\n    ['featuresMuteControl', 'canMuteVolume'],\n    ['featuresPlaybackRate', 'canControlPlaybackRate'],\n    ['featuresNativeTextTracks', 'supportsNativeTextTracks'],\n    ['featuresFullscreenResize', 'supportsFullscreenResize'],\n    ['featuresProgressEvents', 'supportsProgressEvents'],\n    ['featuresTimeupdateEvents', 'supportsTimeupdateEvents'],\n].forEach(([key, fn]) => {\n    defineLazyProperty(VideoJSOgvJS.prototype, key, () => VideoJSOgvJS[fn](), true);\n});\n\ntype OGVPlayerEl = (HTMLAudioElement | HTMLVideoElement) & {\n    stop: () => void;\n};\n\n/**\n * VideoJS Tech options. It includes some options added by VideoJS internally.\n */\ntype VideoJSTechOptions = VideoJSOptions & {\n    playerId?: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}