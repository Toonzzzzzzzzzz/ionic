{"ast":null,"code":"import _asyncToGenerator from \"/home/toon/works/gitionic7/ionic-github/ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { CoreDelegate } from '@classes/delegate';\nimport { makeSingleton } from '@singletons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./handlers/default-feedback\";\n/**\n * Delegate to register plugins for assign feedback.\n */\nexport class AddonModAssignFeedbackDelegateService extends CoreDelegate {\n  constructor(defaultHandler) {\n    super('AddonModAssignFeedbackDelegate', true);\n    this.defaultHandler = defaultHandler;\n    this.handlerNameProperty = 'type';\n  }\n  /**\n   * Discard the draft data of the feedback plugin.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param plugin The plugin object.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  discardPluginFeedbackData(assignId, userId, plugin, siteId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.executeFunctionOnEnabled(plugin.type, 'discardDraft', [assignId, userId, siteId]);\n    })();\n  }\n  /**\n   * Get the component to use for a certain feedback plugin.\n   *\n   * @param plugin The plugin object.\n   * @returns Promise resolved with the component to use, undefined if not found.\n   */\n  getComponentForPlugin(plugin) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.executeFunctionOnEnabled(plugin.type, 'getComponent', [plugin]);\n    })();\n  }\n  /**\n   * Return the draft saved data of the feedback plugin.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param plugin The plugin object.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the draft data.\n   */\n  getPluginDraftData(assignId, userId, plugin, siteId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.executeFunctionOnEnabled(plugin.type, 'getDraft', [assignId, userId, siteId]);\n    })();\n  }\n  /**\n   * Get files used by this plugin.\n   * The files returned by this function will be prefetched when the user prefetches the assign.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with the files.\n   */\n  getPluginFiles(assign, submission, plugin, siteId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const files = yield _this4.executeFunctionOnEnabled(plugin.type, 'getPluginFiles', [assign, submission, plugin, siteId]);\n      return files || [];\n    })();\n  }\n  /**\n   * Get a readable name to use for a certain feedback plugin.\n   *\n   * @param plugin Plugin to get the name for.\n   * @returns Human readable name.\n   */\n  getPluginName(plugin) {\n    return this.executeFunctionOnEnabled(plugin.type, 'getPluginName', [plugin]);\n  }\n  /**\n   * Check if the feedback data has changed for a certain plugin.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param inputData Data entered by the user for the feedback.\n   * @param userId User ID of the submission.\n   * @returns Promise resolved with true if data has changed, resolved with false otherwise.\n   */\n  hasPluginDataChanged(assign, submission, plugin, inputData, userId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return _this5.executeFunctionOnEnabled(plugin.type, 'hasDataChanged', [assign, submission, plugin, inputData, userId]);\n    })();\n  }\n  /**\n   * Check whether the plugin has draft data stored.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param plugin The plugin object.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved with true if it has draft data.\n   */\n  hasPluginDraftData(assignId, userId, plugin, siteId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return _this6.executeFunctionOnEnabled(plugin.type, 'hasDraftData', [assignId, userId, siteId]);\n    })();\n  }\n  /**\n   * Check if a feedback plugin is supported.\n   *\n   * @param pluginType Type of the plugin.\n   * @returns Whether it's supported.\n   */\n  isPluginSupported(pluginType) {\n    return this.hasHandler(pluginType, true);\n  }\n  /**\n   * Prefetch any required data for a feedback plugin.\n   *\n   * @param assign The assignment.\n   * @param submission The submission.\n   * @param plugin The plugin object.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when done.\n   */\n  prefetch(assign, submission, plugin, siteId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return _this7.executeFunctionOnEnabled(plugin.type, 'prefetch', [assign, submission, plugin, siteId]);\n    })();\n  }\n  /**\n   * Prepare and add to pluginData the data to submit for a certain feedback plugin.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param plugin The plugin object.\n   * @param pluginData Object where to store the data to send.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when data has been gathered.\n   */\n  preparePluginFeedbackData(assignId, userId, plugin, pluginData, siteId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      return _this8.executeFunctionOnEnabled(plugin.type, 'prepareFeedbackData', [assignId, userId, plugin, pluginData, siteId]);\n    })();\n  }\n  /**\n   * Save draft data of the feedback plugin.\n   *\n   * @param assignId The assignment ID.\n   * @param userId User ID.\n   * @param plugin The plugin object.\n   * @param inputData Data to save.\n   * @param siteId Site ID. If not defined, current site.\n   * @returns Promise resolved when data has been saved.\n   */\n  saveFeedbackDraft(assignId, userId, plugin, inputData, siteId) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      return _this9.executeFunctionOnEnabled(plugin.type, 'saveDraft', [assignId, userId, plugin, inputData, siteId]);\n    })();\n  }\n}\n_class = AddonModAssignFeedbackDelegateService;\n_class.ɵfac = function AddonModAssignFeedbackDelegateService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AddonModAssignDefaultFeedbackHandler));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AddonModAssignFeedbackDelegate = makeSingleton(AddonModAssignFeedbackDelegateService);","map":{"version":3,"names":["CoreDelegate","makeSingleton","AddonModAssignFeedbackDelegateService","constructor","defaultHandler","handlerNameProperty","discardPluginFeedbackData","assignId","userId","plugin","siteId","_this","_asyncToGenerator","executeFunctionOnEnabled","type","getComponentForPlugin","_this2","getPluginDraftData","_this3","getPluginFiles","assign","submission","_this4","files","getPluginName","hasPluginDataChanged","inputData","_this5","hasPluginDraftData","_this6","isPluginSupported","pluginType","hasHandler","prefetch","_this7","preparePluginFeedbackData","pluginData","_this8","saveFeedbackDraft","_this9","i0","ɵɵinject","i1","AddonModAssignDefaultFeedbackHandler","factory","ɵfac","providedIn","AddonModAssignFeedbackDelegate"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/addons/mod/assign/services/feedback-delegate.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable, Type } from '@angular/core';\nimport { CoreDelegate, CoreDelegateHandler } from '@classes/delegate';\nimport { AddonModAssignDefaultFeedbackHandler } from './handlers/default-feedback';\nimport { AddonModAssignAssign, AddonModAssignSubmission, AddonModAssignPlugin, AddonModAssignSavePluginData } from './assign';\nimport { makeSingleton } from '@singletons';\nimport { CoreWSFile } from '@services/ws';\nimport { AddonModAssignSubmissionFormatted } from './assign-helper';\nimport { CoreFormFields } from '@singletons/form';\nimport type { IAddonModAssignFeedbackPluginComponent } from '@addons/mod/assign/classes/base-feedback-plugin-component';\n\n/**\n * Interface that all feedback handlers must implement.\n */\nexport interface AddonModAssignFeedbackHandler extends CoreDelegateHandler {\n\n    /**\n     * Name of the type of feedback the handler supports. E.g. 'file'.\n     */\n    type: string;\n\n    /**\n     * Discard the draft data of the feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    discardDraft?(assignId: number, userId: number, siteId?: string): void | Promise<void>;\n\n    /**\n     * Return the Component to use to display the plugin data.\n     * It's recommended to return the class of the component, but you can also return an instance of the component.\n     *\n     * @param plugin The plugin object.\n     * @returns The component (or promise resolved with component) to use, undefined if not found.\n     */\n    getComponent?(plugin: AddonModAssignPlugin): Type<IAddonModAssignFeedbackPluginComponent>\n    | undefined\n    | Promise<Type<IAddonModAssignFeedbackPluginComponent> | undefined>;\n\n    /**\n     * Return the draft saved data of the feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Data (or promise resolved with the data).\n     */\n    getDraft?(\n        assignId: number,\n        userId: number,\n        siteId?: string,\n    ): CoreFormFields | Promise<CoreFormFields | undefined> | undefined;\n\n    /**\n     * Get files used by this plugin.\n     * The files returned by this function will be prefetched when the user prefetches the assign.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns The files (or promise resolved with the files).\n     */\n    getPluginFiles?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): CoreWSFile[] | Promise<CoreWSFile[]>;\n\n    /**\n     * Get a readable name to use for the plugin.\n     *\n     * @param plugin The plugin object.\n     * @returns The plugin name.\n     */\n    getPluginName?(plugin: AddonModAssignPlugin): string;\n\n    /**\n     * Check if the feedback data has changed for this plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the feedback.\n     * @param userId User ID of the submission.\n     * @returns Boolean (or promise resolved with boolean): whether the data has changed.\n     */\n    hasDataChanged?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n        userId: number,\n    ): boolean | Promise<boolean>;\n\n    /**\n     * Check whether the plugin has draft data stored.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Boolean or promise resolved with boolean: whether the plugin has draft data.\n     */\n    hasDraftData?(assignId: number, userId: number, siteId?: string): boolean | Promise<boolean>;\n\n    /**\n     * Prefetch any required data for the plugin.\n     * This should NOT prefetch files. Files to be prefetched should be returned by the getPluginFiles function.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    prefetch?(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<void>;\n\n    /**\n     * Prepare and add to pluginData the data to send to the server based on the draft data saved.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param plugin The plugin object.\n     * @param pluginData Object where to store the data to send.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    prepareFeedbackData?(\n        assignId: number,\n        userId: number,\n        plugin: AddonModAssignPlugin,\n        pluginData: AddonModAssignSavePluginData,\n        siteId?: string,\n    ): void | Promise<void>;\n\n    /**\n     * Save draft data of the feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param plugin The plugin object.\n     * @param data The data to save.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns If the function is async, it should return a Promise resolved when done.\n     */\n    saveDraft?(\n        assignId: number,\n        userId: number,\n        plugin: AddonModAssignPlugin,\n        data: CoreFormFields,\n        siteId?: string,\n    ): void | Promise<void>;\n}\n\n/**\n * Delegate to register plugins for assign feedback.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonModAssignFeedbackDelegateService extends CoreDelegate<AddonModAssignFeedbackHandler> {\n\n    protected handlerNameProperty = 'type';\n\n    constructor(\n        protected defaultHandler: AddonModAssignDefaultFeedbackHandler,\n    ) {\n        super('AddonModAssignFeedbackDelegate', true);\n    }\n\n    /**\n     * Discard the draft data of the feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async discardPluginFeedbackData(\n        assignId: number,\n        userId: number,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<void> {\n        return this.executeFunctionOnEnabled(plugin.type, 'discardDraft', [assignId, userId, siteId]);\n    }\n\n    /**\n     * Get the component to use for a certain feedback plugin.\n     *\n     * @param plugin The plugin object.\n     * @returns Promise resolved with the component to use, undefined if not found.\n     */\n    async getComponentForPlugin(\n        plugin: AddonModAssignPlugin,\n    ): Promise<Type<IAddonModAssignFeedbackPluginComponent> | undefined> {\n        return this.executeFunctionOnEnabled(plugin.type, 'getComponent', [plugin]);\n    }\n\n    /**\n     * Return the draft saved data of the feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the draft data.\n     */\n    async getPluginDraftData<T>(\n        assignId: number,\n        userId: number,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<T | undefined> {\n        return this.executeFunctionOnEnabled(plugin.type, 'getDraft', [assignId, userId, siteId]);\n    }\n\n    /**\n     * Get files used by this plugin.\n     * The files returned by this function will be prefetched when the user prefetches the assign.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with the files.\n     */\n    async getPluginFiles(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<CoreWSFile[]> {\n        const files: CoreWSFile[] | undefined =\n            await this.executeFunctionOnEnabled(plugin.type, 'getPluginFiles', [assign, submission, plugin, siteId]);\n\n        return files || [];\n    }\n\n    /**\n     * Get a readable name to use for a certain feedback plugin.\n     *\n     * @param plugin Plugin to get the name for.\n     * @returns Human readable name.\n     */\n    getPluginName(plugin: AddonModAssignPlugin): string | undefined {\n        return this.executeFunctionOnEnabled(plugin.type, 'getPluginName', [plugin]);\n    }\n\n    /**\n     * Check if the feedback data has changed for a certain plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param inputData Data entered by the user for the feedback.\n     * @param userId User ID of the submission.\n     * @returns Promise resolved with true if data has changed, resolved with false otherwise.\n     */\n    async hasPluginDataChanged(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission | AddonModAssignSubmissionFormatted,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n        userId: number,\n    ): Promise<boolean | undefined> {\n        return this.executeFunctionOnEnabled(\n            plugin.type,\n            'hasDataChanged',\n            [assign, submission, plugin, inputData, userId],\n        );\n    }\n\n    /**\n     * Check whether the plugin has draft data stored.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved with true if it has draft data.\n     */\n    async hasPluginDraftData(\n        assignId: number,\n        userId: number,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<boolean | undefined> {\n        return this.executeFunctionOnEnabled(plugin.type, 'hasDraftData', [assignId, userId, siteId]);\n    }\n\n    /**\n     * Check if a feedback plugin is supported.\n     *\n     * @param pluginType Type of the plugin.\n     * @returns Whether it's supported.\n     */\n    isPluginSupported(pluginType: string): boolean {\n        return this.hasHandler(pluginType, true);\n    }\n\n    /**\n     * Prefetch any required data for a feedback plugin.\n     *\n     * @param assign The assignment.\n     * @param submission The submission.\n     * @param plugin The plugin object.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when done.\n     */\n    async prefetch(\n        assign: AddonModAssignAssign,\n        submission: AddonModAssignSubmission,\n        plugin: AddonModAssignPlugin,\n        siteId?: string,\n    ): Promise<void> {\n        return this.executeFunctionOnEnabled(plugin.type, 'prefetch', [assign, submission, plugin, siteId]);\n    }\n\n    /**\n     * Prepare and add to pluginData the data to submit for a certain feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param plugin The plugin object.\n     * @param pluginData Object where to store the data to send.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when data has been gathered.\n     */\n    async preparePluginFeedbackData(\n        assignId: number,\n        userId: number,\n        plugin: AddonModAssignPlugin,\n        pluginData: AddonModAssignSavePluginData,\n        siteId?: string,\n    ): Promise<void> {\n\n        return this.executeFunctionOnEnabled(\n            plugin.type,\n            'prepareFeedbackData',\n            [assignId, userId, plugin, pluginData, siteId],\n        );\n    }\n\n    /**\n     * Save draft data of the feedback plugin.\n     *\n     * @param assignId The assignment ID.\n     * @param userId User ID.\n     * @param plugin The plugin object.\n     * @param inputData Data to save.\n     * @param siteId Site ID. If not defined, current site.\n     * @returns Promise resolved when data has been saved.\n     */\n    async saveFeedbackDraft(\n        assignId: number,\n        userId: number,\n        plugin: AddonModAssignPlugin,\n        inputData: CoreFormFields,\n        siteId?: string,\n    ): Promise<void> {\n        return this.executeFunctionOnEnabled(\n            plugin.type,\n            'saveDraft',\n            [assignId, userId, plugin, inputData, siteId],\n        );\n    }\n\n}\nexport const AddonModAssignFeedbackDelegate = makeSingleton(AddonModAssignFeedbackDelegateService);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}