{"ast":null,"code":"// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CorePromise } from '@classes/promise';\n/**\n * Promise wrapper to expose result synchronously.\n */\nexport class CorePromisedValue extends CorePromise {\n  /**\n   * Wrap an existing promise.\n   *\n   * @param promise Promise.\n   * @returns Promised value.\n   */\n  static from(promise) {\n    const promisedValue = new CorePromisedValue();\n    promise.then(value => promisedValue.resolve(value)).catch(error => promisedValue.reject(error));\n    return promisedValue;\n  }\n  constructor() {\n    let resolvePromise;\n    let rejectPromise;\n    const nativePromise = new Promise((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    super(nativePromise);\n    this.resolvePromise = resolvePromise;\n    this.rejectPromise = rejectPromise;\n  }\n  /**\n   * @returns Promise.\n   * @deprecated since 4.1. The instance can be directly used as a promise.\n   */\n  get promise() {\n    return this;\n  }\n  get value() {\n    var _this$resolvedValue;\n    return (_this$resolvedValue = this.resolvedValue) !== null && _this$resolvedValue !== void 0 ? _this$resolvedValue : null;\n  }\n  /**\n   * Check whether the promise resolved successfully.\n   *\n   * @returns Whether the promise resolved successfuly.\n   */\n  isResolved() {\n    return 'resolvedValue' in this;\n  }\n  /**\n   * Check whether the promise was rejected.\n   *\n   * @returns Whether the promise was rejected.\n   */\n  isRejected() {\n    return 'rejectedReason' in this;\n  }\n  /**\n   * Check whether the promise is settled.\n   *\n   * @returns Whether the promise is settled.\n   */\n  isSettled() {\n    return this.isResolved() || this.isRejected();\n  }\n  /**\n   * Resolve the promise.\n   *\n   * @param value Promise result.\n   */\n  resolve(value) {\n    if (this.isSettled()) {\n      delete this.rejectedReason;\n      this.resetNativePromise();\n    }\n    this.resolvedValue = value;\n    this.resolvePromise(value);\n  }\n  /**\n   * Reject the promise.\n   *\n   * @param reason Rejection reason.\n   */\n  reject(reason) {\n    if (this.isSettled()) {\n      delete this.resolvedValue;\n      this.resetNativePromise();\n    }\n    this.rejectedReason = reason;\n    this.rejectPromise(reason);\n  }\n  /**\n   * Reset status and value.\n   */\n  reset() {\n    delete this.resolvedValue;\n    delete this.rejectedReason;\n    this.resetNativePromise();\n  }\n  /**\n   * Reset native promise and callbacks.\n   */\n  resetNativePromise() {\n    this.nativePromise = new Promise((resolve, reject) => {\n      this.resolvePromise = resolve;\n      this.rejectPromise = reject;\n    });\n  }\n}","map":{"version":3,"names":["CorePromise","CorePromisedValue","from","promise","promisedValue","then","value","resolve","catch","error","reject","constructor","resolvePromise","rejectPromise","nativePromise","Promise","_this$resolvedValue","resolvedValue","isResolved","isRejected","isSettled","rejectedReason","resetNativePromise","reason","reset"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/classes/promised-value.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CorePromise } from '@classes/promise';\n\n/**\n * Promise wrapper to expose result synchronously.\n */\nexport class CorePromisedValue<T = unknown> extends CorePromise<T> {\n\n    /**\n     * Wrap an existing promise.\n     *\n     * @param promise Promise.\n     * @returns Promised value.\n     */\n    static from<T>(promise: Promise<T>): CorePromisedValue<T> {\n        const promisedValue = new CorePromisedValue<T>();\n\n        promise\n            .then(value => promisedValue.resolve(value))\n            .catch(error => promisedValue.reject(error));\n\n        return promisedValue;\n    }\n\n    protected resolvedValue?: T;\n    protected rejectedReason?: Error;\n    protected resolvePromise!: (result: T) => void;\n    protected rejectPromise!: (error?: Error) => void;\n\n    constructor() {\n        let resolvePromise!: (result: T) => void;\n        let rejectPromise!: (error?: Error) => void;\n\n        const nativePromise = new Promise<T>((resolve, reject) => {\n            resolvePromise = resolve;\n            rejectPromise = reject;\n        });\n\n        super(nativePromise);\n\n        this.resolvePromise = resolvePromise;\n        this.rejectPromise = rejectPromise;\n    }\n\n    /**\n     * @returns Promise.\n     * @deprecated since 4.1. The instance can be directly used as a promise.\n     */\n    get promise(): Promise<T> {\n        return this;\n    }\n\n    get value(): T | null {\n        return this.resolvedValue ?? null;\n    }\n\n    /**\n     * Check whether the promise resolved successfully.\n     *\n     * @returns Whether the promise resolved successfuly.\n     */\n    isResolved(): this is { value: T } {\n        return 'resolvedValue' in this;\n    }\n\n    /**\n     * Check whether the promise was rejected.\n     *\n     * @returns Whether the promise was rejected.\n     */\n    isRejected(): boolean {\n        return 'rejectedReason' in this;\n    }\n\n    /**\n     * Check whether the promise is settled.\n     *\n     * @returns Whether the promise is settled.\n     */\n    isSettled(): boolean {\n        return this.isResolved() || this.isRejected();\n    }\n\n    /**\n     * Resolve the promise.\n     *\n     * @param value Promise result.\n     */\n    resolve(value: T): void {\n        if (this.isSettled()) {\n            delete this.rejectedReason;\n\n            this.resetNativePromise();\n        }\n\n        this.resolvedValue = value;\n        this.resolvePromise(value);\n    }\n\n    /**\n     * Reject the promise.\n     *\n     * @param reason Rejection reason.\n     */\n    reject(reason?: Error): void {\n        if (this.isSettled()) {\n            delete this.resolvedValue;\n\n            this.resetNativePromise();\n        }\n\n        this.rejectedReason = reason;\n        this.rejectPromise(reason);\n    }\n\n    /**\n     * Reset status and value.\n     */\n    reset(): void {\n        delete this.resolvedValue;\n        delete this.rejectedReason;\n\n        this.resetNativePromise();\n    }\n\n    /**\n     * Reset native promise and callbacks.\n     */\n    protected resetNativePromise(): void {\n        this.nativePromise = new Promise((resolve, reject) => {\n            this.resolvePromise = resolve;\n            this.rejectPromise = reject;\n        });\n    }\n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C;;;AAGA,OAAM,MAAOC,iBAA+B,SAAQD,WAAc;EAE9D;;;;;;EAMA,OAAOE,IAAIA,CAAIC,OAAmB;IAC9B,MAAMC,aAAa,GAAG,IAAIH,iBAAiB,EAAK;IAEhDE,OAAO,CACFE,IAAI,CAACC,KAAK,IAAIF,aAAa,CAACG,OAAO,CAACD,KAAK,CAAC,CAAC,CAC3CE,KAAK,CAACC,KAAK,IAAIL,aAAa,CAACM,MAAM,CAACD,KAAK,CAAC,CAAC;IAEhD,OAAOL,aAAa;EACxB;EAOAO,YAAA;IACI,IAAIC,cAAoC;IACxC,IAAIC,aAAuC;IAE3C,MAAMC,aAAa,GAAG,IAAIC,OAAO,CAAI,CAACR,OAAO,EAAEG,MAAM,KAAI;MACrDE,cAAc,GAAGL,OAAO;MACxBM,aAAa,GAAGH,MAAM;IAC1B,CAAC,CAAC;IAEF,KAAK,CAACI,aAAa,CAAC;IAEpB,IAAI,CAACF,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,aAAa,GAAGA,aAAa;EACtC;EAEA;;;;EAIA,IAAIV,OAAOA,CAAA;IACP,OAAO,IAAI;EACf;EAEA,IAAIG,KAAKA,CAAA;IAAA,IAAAU,mBAAA;IACL,QAAAA,mBAAA,GAAO,IAAI,CAACC,aAAa,cAAAD,mBAAA,cAAAA,mBAAA,GAAI,IAAI;EACrC;EAEA;;;;;EAKAE,UAAUA,CAAA;IACN,OAAO,eAAe,IAAI,IAAI;EAClC;EAEA;;;;;EAKAC,UAAUA,CAAA;IACN,OAAO,gBAAgB,IAAI,IAAI;EACnC;EAEA;;;;;EAKAC,SAASA,CAAA;IACL,OAAO,IAAI,CAACF,UAAU,EAAE,IAAI,IAAI,CAACC,UAAU,EAAE;EACjD;EAEA;;;;;EAKAZ,OAAOA,CAACD,KAAQ;IACZ,IAAI,IAAI,CAACc,SAAS,EAAE,EAAE;MAClB,OAAO,IAAI,CAACC,cAAc;MAE1B,IAAI,CAACC,kBAAkB,EAAE;;IAG7B,IAAI,CAACL,aAAa,GAAGX,KAAK;IAC1B,IAAI,CAACM,cAAc,CAACN,KAAK,CAAC;EAC9B;EAEA;;;;;EAKAI,MAAMA,CAACa,MAAc;IACjB,IAAI,IAAI,CAACH,SAAS,EAAE,EAAE;MAClB,OAAO,IAAI,CAACH,aAAa;MAEzB,IAAI,CAACK,kBAAkB,EAAE;;IAG7B,IAAI,CAACD,cAAc,GAAGE,MAAM;IAC5B,IAAI,CAACV,aAAa,CAACU,MAAM,CAAC;EAC9B;EAEA;;;EAGAC,KAAKA,CAAA;IACD,OAAO,IAAI,CAACP,aAAa;IACzB,OAAO,IAAI,CAACI,cAAc;IAE1B,IAAI,CAACC,kBAAkB,EAAE;EAC7B;EAEA;;;EAGUA,kBAAkBA,CAAA;IACxB,IAAI,CAACR,aAAa,GAAG,IAAIC,OAAO,CAAC,CAACR,OAAO,EAAEG,MAAM,KAAI;MACjD,IAAI,CAACE,cAAc,GAAGL,OAAO;MAC7B,IAAI,CAACM,aAAa,GAAGH,MAAM;IAC/B,CAAC,CAAC;EACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}