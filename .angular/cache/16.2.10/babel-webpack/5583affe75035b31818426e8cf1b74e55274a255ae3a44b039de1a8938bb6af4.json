{"ast":null,"code":"var _class;\nimport { Translate } from '@singletons';\nimport { CoreLogger } from '@singletons/logger';\nimport moment from 'moment-timezone';\nimport * as i0 from \"@angular/core\";\n/**\n * Pipe to turn a UNIX timestamp to \"time ago\".\n */\nexport class CoreTimeAgoPipe {\n  constructor() {\n    this.logger = CoreLogger.getInstance('CoreTimeAgoPipe');\n  }\n  /**\n   * Turn a UNIX timestamp to \"time ago\".\n   *\n   * @param timestamp The UNIX timestamp (without milliseconds).\n   * @returns Formatted time.\n   */\n  transform(timestamp) {\n    if (typeof timestamp === 'string') {\n      // Convert the value to a number.\n      const numberTimestamp = parseInt(timestamp, 10);\n      if (isNaN(numberTimestamp)) {\n        this.logger.error('Invalid value received', timestamp);\n        return timestamp;\n      }\n      timestamp = numberTimestamp;\n    }\n    return Translate.instant('core.ago', {\n      $a: moment(timestamp * 1000).fromNow(true)\n    });\n  }\n}\n_class = CoreTimeAgoPipe;\n_class.ɵfac = function CoreTimeAgoPipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"coreTimeAgo\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["Translate","CoreLogger","moment","CoreTimeAgoPipe","constructor","logger","getInstance","transform","timestamp","numberTimestamp","parseInt","isNaN","error","instant","$a","fromNow","pure"],"sources":["/home/toon/works/gitionic7/ionic-github/ionic/src/core/pipes/time-ago.ts"],"sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { Translate } from '@singletons';\nimport { CoreLogger } from '@singletons/logger';\nimport moment from 'moment-timezone';\n\n/**\n * Pipe to turn a UNIX timestamp to \"time ago\".\n */\n@Pipe({\n    name: 'coreTimeAgo',\n})\nexport class CoreTimeAgoPipe implements PipeTransform {\n\n    private logger: CoreLogger;\n\n    constructor() {\n        this.logger = CoreLogger.getInstance('CoreTimeAgoPipe');\n    }\n\n    /**\n     * Turn a UNIX timestamp to \"time ago\".\n     *\n     * @param timestamp The UNIX timestamp (without milliseconds).\n     * @returns Formatted time.\n     */\n    transform(timestamp: string | number): string {\n        if (typeof timestamp === 'string') {\n            // Convert the value to a number.\n            const numberTimestamp = parseInt(timestamp, 10);\n            if (isNaN(numberTimestamp)) {\n                this.logger.error('Invalid value received', timestamp);\n\n                return timestamp;\n            }\n            timestamp = numberTimestamp;\n        }\n\n        return Translate.instant('core.ago', { $a: moment(timestamp * 1000).fromNow(true) });\n    }\n\n}\n"],"mappings":";AAeA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,OAAOC,MAAM,MAAM,iBAAiB;;AAEpC;;;AAMA,OAAM,MAAOC,eAAe;EAIxBC,YAAA;IACI,IAAI,CAACC,MAAM,GAAGJ,UAAU,CAACK,WAAW,CAAC,iBAAiB,CAAC;EAC3D;EAEA;;;;;;EAMAC,SAASA,CAACC,SAA0B;IAChC,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;MAC/B;MACA,MAAMC,eAAe,GAAGC,QAAQ,CAACF,SAAS,EAAE,EAAE,CAAC;MAC/C,IAAIG,KAAK,CAACF,eAAe,CAAC,EAAE;QACxB,IAAI,CAACJ,MAAM,CAACO,KAAK,CAAC,wBAAwB,EAAEJ,SAAS,CAAC;QAEtD,OAAOA,SAAS;;MAEpBA,SAAS,GAAGC,eAAe;;IAG/B,OAAOT,SAAS,CAACa,OAAO,CAAC,UAAU,EAAE;MAAEC,EAAE,EAAEZ,MAAM,CAACM,SAAS,GAAG,IAAI,CAAC,CAACO,OAAO,CAAC,IAAI;IAAC,CAAE,CAAC;EACxF;;SA3BSZ,eAAe;;mBAAfA,MAAe;AAAA;;;QAAfA,MAAe;EAAAa,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}